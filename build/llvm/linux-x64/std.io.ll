; ModuleID = 'std::io'
source_filename = "std::io"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%"char[]" = type { ptr, i64 }
%File = type { ptr }
%any = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%BitReader = type { %any, i32, i32 }
%BitWriter = type { %any, i32, i32 }
%Formatter = type { ptr, ptr, %.anon }
%.anon = type { i32, i32, i32, i64, i64 }
%BufferData = type { %"char[]", i64 }
%ByteReader = type { %"char[]", i64 }
%MultiWriter = type { %"any[]", %any }
%MultiReader = type { %"any[]", i64, %any }
%ByteWriter = type { %"char[]", i64, %any }
%ReadBuffer = type { %any, %"char[]", i64, i64 }
%WriteBuffer = type { %any, %"char[]", i64 }
%TeeReader = type { %any, %any }
%LimitReader = type { %any, i64 }
%ByteBuffer = type { %any, i64, %"char[]", i64, i64, i8 }
%Scanner = type { %any, %"char[]", i64, i64 }
%"char[][]" = type { ptr, i64 }

$std.io.BitReader.init = comdat any

$std.io.BitReader.clear = comdat any

$std.io.BitReader.read_bits = comdat any

$std.io.BitWriter.init = comdat any

$std.io.BitWriter.flush = comdat any

$std.io.BitWriter.write_bits = comdat any

$std.io.fprintf = comdat any

$std.io.fprintfn = comdat any

$std.io.printf = comdat any

$std.io.printfn = comdat any

$std.io.eprintf = comdat any

$std.io.eprintfn = comdat any

$std.io.bprintf = comdat any

$std.io.putchar = comdat any

$std.io.stdout = comdat any

$std.io.stderr = comdat any

$std.io.stdin = comdat any

$std.io.available = comdat any

$std.io.copy_to = comdat any

$std.io.wrap_bytes = comdat any

$std.io.Formatter.pad = comdat any

$std.io.Formatter.out_chars = comdat any

$std.io.Formatter.etoa = comdat any

$std.io.Formatter.ftoa = comdat any

$std.io.Formatter.gtoa = comdat any

$std.io.Formatter.atoa = comdat any

$std.io.print_hex_chars = comdat any

$std.io.fmt_u = comdat any

$std.io.MultiWriter.init = comdat any

$std.io.MultiWriter.tinit = comdat any

$std.io.MultiWriter.free = comdat any

$std.io.MultiWriter.write = comdat any

$std.io.MultiWriter.write_byte = comdat any

$std.io.ByteReader.len = comdat any

$std.io.ByteReader.init = comdat any

$std.io.ByteReader.read = comdat any

$std.io.ByteReader.read_byte = comdat any

$std.io.ByteReader.pushback_byte = comdat any

$std.io.ByteReader.seek = comdat any

$std.io.ByteReader.write_to = comdat any

$std.io.ByteReader.available = comdat any

$std.io.MultiReader.init = comdat any

$std.io.MultiReader.tinit = comdat any

$std.io.MultiReader.free = comdat any

$std.io.MultiReader.read = comdat any

$std.io.MultiReader.read_byte = comdat any

$std.io.ByteWriter.init = comdat any

$std.io.ByteWriter.tinit = comdat any

$std.io.ByteWriter.init_with_buffer = comdat any

$std.io.ByteWriter.destroy = comdat any

$std.io.ByteWriter.str_view = comdat any

$std.io.ByteWriter.ensure_capacity = comdat any

$std.io.ByteWriter.write = comdat any

$std.io.ByteWriter.write_byte = comdat any

$std.io.ByteWriter.read_from = comdat any

$std.io.ReadBuffer.init = comdat any

$std.io.ReadBuffer.str_view = comdat any

$std.io.ReadBuffer.close = comdat any

$std.io.ReadBuffer.read = comdat any

$std.io.ReadBuffer.read_byte = comdat any

$std.io.WriteBuffer.init = comdat any

$std.io.WriteBuffer.str_view = comdat any

$std.io.WriteBuffer.close = comdat any

$std.io.WriteBuffer.flush = comdat any

$std.io.WriteBuffer.write = comdat any

$std.io.WriteBuffer.write_byte = comdat any

$std.io.TeeReader.init = comdat any

$std.io.TeeReader.read = comdat any

$std.io.TeeReader.read_byte = comdat any

$std.io.LimitReader.init = comdat any

$std.io.LimitReader.close = comdat any

$std.io.LimitReader.read = comdat any

$std.io.LimitReader.read_byte = comdat any

$std.io.LimitReader.available = comdat any

$std.io.ByteBuffer.init = comdat any

$std.io.ByteBuffer.tinit = comdat any

$std.io.ByteBuffer.init_with_buffer = comdat any

$std.io.ByteBuffer.free = comdat any

$std.io.ByteBuffer.write = comdat any

$std.io.ByteBuffer.write_byte = comdat any

$std.io.ByteBuffer.read = comdat any

$std.io.ByteBuffer.read_byte = comdat any

$std.io.ByteBuffer.pushback_byte = comdat any

$std.io.ByteBuffer.seek = comdat any

$std.io.ByteBuffer.available = comdat any

$std.io.ByteBuffer.grow = comdat any

$std.io.Scanner.init = comdat any

$std.io.Scanner.flush = comdat any

$std.io.Scanner.close = comdat any

$std.io.Scanner.scan = comdat any

$std.io.Scanner.read = comdat any

$std.io.Scanner.read_byte = comdat any

$std.core.ReflectedParam.to_format = comdat any

$std.io.Formatter.printf = comdat any

$std.io.Formatter.init = comdat any

$std.io.Formatter.print_with_function = comdat any

$std.io.Formatter.vprintf = comdat any

$std.io.Formatter.print = comdat any

$.dyn_search = comdat any

$"$ct.std.io.File" = comdat any

$"$ct.std.io.BitReader" = comdat any

$"$ct.std.io.BitWriter" = comdat any

$"$ct.std.io.BufferData" = comdat any

$"$ct.int" = comdat any

$"$ct.std.io.Seek" = comdat any

$"$ct.std.io.FloatFormatting" = comdat any

$"$ct.std.io.MultiWriter" = comdat any

$"$ct.std.io.ByteReader" = comdat any

$"$ct.std.io.MultiReader" = comdat any

$"$ct.std.io.ByteWriter" = comdat any

$"$ct.std.io.ReadBuffer" = comdat any

$"$ct.std.io.WriteBuffer" = comdat any

$"$ct.std.io.TeeReader" = comdat any

$"$ct.std.io.LimitReader" = comdat any

$"$ct.std.io.ByteBuffer" = comdat any

$"$ct.std.io.Scanner" = comdat any

$"$ct.std.io.$anon" = comdat any

$"$ct.std.io.Formatter" = comdat any

$"$ct.std.io.PrintFlags" = comdat any

$"$ct.uint" = comdat any

$std.io.WRITER_BITS = comdat any

$"$ct.ulong" = comdat any

$"$sel.read_byte" = comdat any

$"$sel.write" = comdat any

$std.io.INCOMPLETE_WRITE = comdat any

$"$sel.write_byte" = comdat any

$"$sel.flush" = comdat any

$std.io.BUFFER_EXCEEDED = comdat any

$"$sel.available" = comdat any

$"$sel.seek" = comdat any

$"$sel.read" = comdat any

$std.io.EOF = comdat any

$"$sel.write_to" = comdat any

$"$sel.read_to" = comdat any

$std.io.XDIGITS_H = comdat any

$std.io.XDIGITS_L = comdat any

$"$ct.bool" = comdat any

$"$ct.ichar" = comdat any

$"$ct.short" = comdat any

$"$ct.long" = comdat any

$"$ct.int128" = comdat any

$"$ct.char" = comdat any

$"$ct.ushort" = comdat any

$"$ct.uint128" = comdat any

$"$ct.float" = comdat any

$"$ct.double" = comdat any

$std.io.BAD_FORMAT = comdat any

$std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE = comdat any

$std.core.types.VALUE_OUT_OF_RANGE = comdat any

$std.io.INTERNAL_BUFFER_EXCEEDED = comdat any

$"$ct.fault" = comdat any

$"$sel.acquire" = comdat any

$"$sel.release" = comdat any

$std.io.INVALID_PUSHBACK = comdat any

$std.io.INVALID_POSITION = comdat any

$"$ct.void" = comdat any

$std.io.OUT_OF_SPACE = comdat any

$"$sel.resize" = comdat any

$"$sel.close" = comdat any

$std.io.GENERAL_ERROR = comdat any

$std.core.builtin.NOT_FOUND = comdat any

$std.io.PRINTF_NTOA_BUFFER_SIZE = comdat any

$"$ct.String" = comdat any

$"$ct.sa$char" = comdat any

$"$sel.to_format" = comdat any

$"$sel.to_constant_string" = comdat any

$"$ct.std.core.string.ZString" = comdat any

$"$ct.p$char" = comdat any

$"$ct.std.core.dstring.DString" = comdat any

$"$ct.p$std.core.dstring.DStringOpaque" = comdat any

$"$ct.std.core.dstring.DStringOpaque" = comdat any

$std.io.INVALID_FORMAT = comdat any

$std.io.NOT_ENOUGH_ARGUMENTS = comdat any

$std.io.INVALID_ARGUMENT = comdat any

$"$ct.sa$ichar" = comdat any

$"$ct.dyn.std.io.MultiWriter.write" = comdat any

$"$ct.dyn.std.io.MultiWriter.write_byte" = comdat any

$"$ct.dyn.std.io.ByteReader.len" = comdat any

$"$sel.len" = comdat any

$"$ct.dyn.std.io.ByteReader.read" = comdat any

$"$ct.dyn.std.io.ByteReader.read_byte" = comdat any

$"$ct.dyn.std.io.ByteReader.pushback_byte" = comdat any

$"$sel.pushback_byte" = comdat any

$"$ct.dyn.std.io.ByteReader.seek" = comdat any

$"$ct.dyn.std.io.ByteReader.write_to" = comdat any

$"$ct.dyn.std.io.ByteReader.available" = comdat any

$"$ct.dyn.std.io.MultiReader.read" = comdat any

$"$ct.dyn.std.io.MultiReader.read_byte" = comdat any

$"$ct.dyn.std.io.ByteWriter.destroy" = comdat any

$"$sel.destroy" = comdat any

$"$ct.dyn.std.io.ByteWriter.write" = comdat any

$"$ct.dyn.std.io.ByteWriter.write_byte" = comdat any

$"$ct.dyn.std.io.ByteWriter.read_from" = comdat any

$"$sel.read_from" = comdat any

$"$ct.dyn.std.io.ReadBuffer.close" = comdat any

$"$ct.dyn.std.io.ReadBuffer.read" = comdat any

$"$ct.dyn.std.io.ReadBuffer.read_byte" = comdat any

$"$ct.dyn.std.io.WriteBuffer.close" = comdat any

$"$ct.dyn.std.io.WriteBuffer.flush" = comdat any

$"$ct.dyn.std.io.WriteBuffer.write" = comdat any

$"$ct.dyn.std.io.WriteBuffer.write_byte" = comdat any

$"$ct.dyn.std.io.TeeReader.read" = comdat any

$"$ct.dyn.std.io.TeeReader.read_byte" = comdat any

$"$ct.dyn.std.io.LimitReader.close" = comdat any

$"$ct.dyn.std.io.LimitReader.read" = comdat any

$"$ct.dyn.std.io.LimitReader.read_byte" = comdat any

$"$ct.dyn.std.io.LimitReader.available" = comdat any

$"$ct.dyn.std.io.ByteBuffer.write" = comdat any

$"$ct.dyn.std.io.ByteBuffer.write_byte" = comdat any

$"$ct.dyn.std.io.ByteBuffer.read" = comdat any

$"$ct.dyn.std.io.ByteBuffer.read_byte" = comdat any

$"$ct.dyn.std.io.ByteBuffer.pushback_byte" = comdat any

$"$ct.dyn.std.io.ByteBuffer.seek" = comdat any

$"$ct.dyn.std.io.ByteBuffer.available" = comdat any

$"$ct.dyn.std.io.Scanner.flush" = comdat any

$"$ct.dyn.std.io.Scanner.close" = comdat any

$"$ct.dyn.std.io.Scanner.read" = comdat any

$"$ct.dyn.std.io.Scanner.read_byte" = comdat any

$"$ct.dyn.std.core.ReflectedParam.to_format" = comdat any

$"$ct.ReflectedParam" = comdat any

@"$ct.std.io.File" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.BitReader" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 24, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.BitWriter" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 24, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.BufferData" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@.enum.SET = internal constant [4 x i8] c"SET\00", align 1
@.enum.CURSOR = internal constant [7 x i8] c"CURSOR\00", align 1
@.enum.END = internal constant [4 x i8] c"END\00", align 1
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.Seek" = linkonce global { i8, i64, ptr, i64, i64, i64, [3 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 3, [3 x %"char[]"] [%"char[]" { ptr @.enum.SET, i64 3 }, %"char[]" { ptr @.enum.CURSOR, i64 6 }, %"char[]" { ptr @.enum.END, i64 3 }] }, comdat, align 8
@.enum.FLOAT = internal constant [6 x i8] c"FLOAT\00", align 1
@.enum.EXPONENTIAL = internal constant [12 x i8] c"EXPONENTIAL\00", align 1
@.enum.ADAPTIVE = internal constant [9 x i8] c"ADAPTIVE\00", align 1
@.enum.HEX = internal constant [4 x i8] c"HEX\00", align 1
@"$ct.std.io.FloatFormatting" = linkonce global { i8, i64, ptr, i64, i64, i64, [4 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 4, [4 x %"char[]"] [%"char[]" { ptr @.enum.FLOAT, i64 5 }, %"char[]" { ptr @.enum.EXPONENTIAL, i64 11 }, %"char[]" { ptr @.enum.ADAPTIVE, i64 8 }, %"char[]" { ptr @.enum.HEX, i64 3 }] }, comdat, align 8
@"$ct.std.io.MultiWriter" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 32, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteReader" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.MultiReader" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteWriter" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ReadBuffer" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.WriteBuffer" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.TeeReader" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 32, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.LimitReader" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteBuffer" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 64, i64 0, i64 6, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.Scanner" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.$anon" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 32, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.Formatter" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 48, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.PrintFlags" = linkonce global %.introspect { i8 11, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@std.io.WRITER_BITS = weak local_unnamed_addr constant i32 24, comdat, align 4, !dbg !0
@.panic_msg = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file = internal constant [8 x i8] c"bits.c3\00", align 1
@.func = internal constant [5 x i8] c"init\00", align 1
@std.core.builtin.panic = extern_weak global ptr, align 8
@.panic_msg.2 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.3 = internal constant [95 x i8] c"Unaligned access: ptr %% %s = %s, use @unaligned_load / @unaligned_store for unaligned access.\00", align 1
@.func.4 = internal constant [6 x i8] c"clear\00", align 1
@.func.5 = internal constant [10 x i8] c"read_bits\00", align 1
@.panic_msg.6 = internal constant [32 x i8] c"@require \22nbits <= 8\22 violated.\00", align 1
@.panic_msg.7 = internal constant [57 x i8] c"@require \22self.len + nbits <= uint.sizeof * 8\22 violated.\00", align 1
@"$sel.read_byte" = linkonce_odr constant [10 x i8] c"read_byte\00", comdat, align 1
@.panic_msg.8 = internal constant [47 x i8] c"No method 'read_byte' could be found on target\00", align 1
@.panic_msg.9 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.func.10 = internal constant [6 x i8] c"flush\00", align 1
@.panic_msg.11 = internal constant [118 x i8] c"@require \22is_arrayptr_or_slice_of_char(bytes)\22 violated: 'argument must be a pointer to an array or a slice of char'.\00", align 1
@.panic_msg.12 = internal constant [47 x i8] c"Dereference of null pointer, 'bytes' was null.\00", align 1
@.file.13 = internal constant [12 x i8] c"bitorder.c3\00", align 1
@.panic_msg.14 = internal constant [43 x i8] c"Dereference of null pointer, '(' was null.\00", align 1
@.file.15 = internal constant [11 x i8] c"builtin.c3\00", align 1
@.panic_msg.16 = internal constant [44 x i8] c"Negative value (%d) given for slice length.\00", align 1
@.panic_msg.17 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@"$sel.write" = linkonce_odr constant [6 x i8] c"write\00", comdat, align 1
@.panic_msg.18 = internal constant [43 x i8] c"No method 'write' could be found on target\00", align 1
@.file.19 = internal constant [10 x i8] c"stream.c3\00", align 1
@std.io.INCOMPLETE_WRITE = linkonce constant %"char[]" { ptr @std.io.INCOMPLETE_WRITE.nameof, i64 20 }, comdat, align 8
@std.io.INCOMPLETE_WRITE.nameof = internal constant [21 x i8] c"io::INCOMPLETE_WRITE\00", align 1
@.func.20 = internal constant [11 x i8] c"write_bits\00", align 1
@.panic_msg.21 = internal constant [33 x i8] c"@require \22nbits <= 32\22 violated.\00", align 1
@"$sel.write_byte" = linkonce_odr constant [11 x i8] c"write_byte\00", comdat, align 1
@.panic_msg.22 = internal constant [48 x i8] c"No method 'write_byte' could be found on target\00", align 1
@.file.23 = internal constant [6 x i8] c"io.c3\00", align 1
@.func.24 = internal constant [9 x i8] c"fprintfn\00", align 1
@"$sel.flush" = linkonce_odr constant [6 x i8] c"flush\00", comdat, align 1
@.panic_msg.25 = internal constant [43 x i8] c"No method 'flush' could be found on target\00", align 1
@.panic_msg.26 = internal constant [48 x i8] c"Dereference of null pointer, 'stream' was null.\00", align 1
@.func.27 = internal constant [17 x i8] c"out_putstream_fn\00", align 1
@.panic_msg.28 = internal constant [67 x i8] c"@require \22self.file != null\22 violated: 'File must be initialized'.\00", align 1
@.func.29 = internal constant [8 x i8] c"printfn\00", align 1
@.panic_msg.30 = internal constant [39 x i8] c"@require \22self.file != null\22 violated.\00", align 1
@.func.31 = internal constant [9 x i8] c"eprintfn\00", align 1
@.panic_msg.32 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.func.33 = internal constant [8 x i8] c"bprintf\00", align 1
@std.io.BUFFER_EXCEEDED = linkonce constant %"char[]" { ptr @std.io.BUFFER_EXCEEDED.nameof, i64 19 }, comdat, align 8
@std.io.BUFFER_EXCEEDED.nameof = internal constant [20 x i8] c"io::BUFFER_EXCEEDED\00", align 1
@.panic_msg.34 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.func.35 = internal constant [14 x i8] c"out_buffer_fn\00", align 1
@stdout.file = internal global %File zeroinitializer, align 8, !dbg !4
@stdout = external global ptr, align 8
@stderr.file = internal global %File zeroinitializer, align 8, !dbg !12
@stderr = external global ptr, align 8
@stdin.file = internal global %File zeroinitializer, align 8, !dbg !14
@stdin = external global ptr, align 8
@std.io.MAX_VARS = internal unnamed_addr constant { [2 x i8], i8, i8, i8, [3 x i8], i8 } { [2 x i8] zeroinitializer, i8 3, i8 0, i8 5, [3 x i8] zeroinitializer, i8 10 }, align 1, !dbg !16
@"$sel.available" = linkonce_odr constant [10 x i8] c"available\00", comdat, align 1
@.panic_msg.36 = internal constant [47 x i8] c"No method 'available' could be found on target\00", align 1
@.func.37 = internal constant [10 x i8] c"available\00", align 1
@"$sel.seek" = linkonce_odr constant [5 x i8] c"seek\00", comdat, align 1
@.panic_msg.38 = internal constant [42 x i8] c"No method 'seek' could be found on target\00", align 1
@"$sel.read" = linkonce_odr constant [5 x i8] c"read\00", comdat, align 1
@.panic_msg.39 = internal constant [42 x i8] c"No method 'read' could be found on target\00", align 1
@.func.40 = internal constant [8 x i8] c"copy_to\00", align 1
@std.io.EOF = linkonce constant %"char[]" { ptr @std.io.EOF.nameof, i64 7 }, comdat, align 8
@std.io.EOF.nameof = internal constant [8 x i8] c"io::EOF\00", align 1
@"$sel.write_to" = linkonce_odr constant [9 x i8] c"write_to\00", comdat, align 1
@.panic_msg.41 = internal constant [46 x i8] c"No method 'write_to' could be found on target\00", align 1
@"$sel.read_to" = linkonce_odr constant [8 x i8] c"read_to\00", comdat, align 1
@.panic_msg.42 = internal constant [45 x i8] c"No method 'read_to' could be found on target\00", align 1
@std.io.XDIGITS_H = weak constant [16 x i8] c"0123456789ABCDEF", comdat, align 16, !dbg !23
@std.io.XDIGITS_L = weak constant [16 x i8] c"0123456789abcdef", comdat, align 16, !dbg !29
@.file.44 = internal constant [21 x i8] c"formatter_private.c3\00", align 1
@.func.45 = internal constant [16 x i8] c"print_hex_chars\00", align 1
@.panic_msg.46 = internal constant [48 x i8] c"Dereference of null pointer, 'is_neg' was null.\00", align 1
@.func.47 = internal constant [13 x i8] c"int_from_any\00", align 1
@.panic_msg.48 = internal constant [33 x i8] c"Called a method on a null value.\00", align 1
@.panic_msg.49 = internal constant [50 x i8] c"Attempted to access 'inner' on non composite type\00", align 1
@"$ct.bool" = linkonce global %.introspect { i8 1, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ichar" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.short" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.int128" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint128" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.float" = linkonce global %.introspect { i8 4, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.double" = linkonce global %.introspect { i8 4, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@std.io.BAD_FORMAT = linkonce constant %"char[]" { ptr @std.io.BAD_FORMAT.nameof, i64 14 }, comdat, align 8
@std.io.BAD_FORMAT.nameof = internal constant [15 x i8] c"io::BAD_FORMAT\00", align 1
@.func.50 = internal constant [15 x i8] c"float_from_any\00", align 1
@.panic_msg.51 = internal constant [49 x i8] c"Dereference of null pointer, 'len_ptr' was null.\00", align 1
@.func.52 = internal constant [12 x i8] c"simple_atoi\00", align 1
@std.core.ascii.ASCII_LOOKUP = extern_weak constant [256 x i16], align 16
@.file.53 = internal constant [9 x i8] c"ascii.c3\00", align 1
@.panic_msg.54 = internal constant [45 x i8] c"Dereference of null pointer, '--s' was null.\00", align 1
@.func.55 = internal constant [6 x i8] c"fmt_u\00", align 1
@.panic_msg.56 = internal constant [51 x i8] c"Dereference of null pointer, 'index_ptr' was null.\00", align 1
@.func.57 = internal constant [26 x i8] c"printf_parse_format_field\00", align 1
@.panic_msg.58 = internal constant [56 x i8] c"Dereference of null pointer, 'args_index_ptr' was null.\00", align 1
@.panic_msg.59 = internal constant [70 x i8] c"@require \22$Type.kindof.is_int()\22 violated: 'Type was not an integer'.\00", align 1
@.panic_msg.60 = internal constant [72 x i8] c"@require \22v.type.kindof.is_int()\22 violated: 'Value was not an integer'.\00", align 1
@.file.61 = internal constant [9 x i8] c"types.c3\00", align 1
@std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE = linkonce constant %"char[]" { ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE.nameof, i64 34 }, comdat, align 8
@std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE.nameof = internal constant [35 x i8] c"types::VALUE_OUT_OF_UNSIGNED_RANGE\00", align 1
@std.core.types.VALUE_OUT_OF_RANGE = linkonce constant %"char[]" { ptr @std.core.types.VALUE_OUT_OF_RANGE.nameof, i64 25 }, comdat, align 8
@std.core.types.VALUE_OUT_OF_RANGE.nameof = internal constant [26 x i8] c"types::VALUE_OUT_OF_RANGE\00", align 1
@.str = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.62 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.63 = private unnamed_addr constant [26 x i8] c"printf_parse_format_field\00", align 1
@.func.64 = internal constant [7 x i8] c"adjust\00", align 1
@.func.65 = internal constant [11 x i8] c"out_substr\00", align 1
@.func.66 = internal constant [4 x i8] c"pad\00", align 1
@.func.67 = internal constant [10 x i8] c"out_chars\00", align 1
@.func.68 = internal constant [5 x i8] c"etoa\00", align 1
@.func.69 = internal constant [5 x i8] c"ftoa\00", align 1
@.func.70 = internal constant [5 x i8] c"gtoa\00", align 1
@.func.71 = internal constant [5 x i8] c"atoa\00", align 1
@.func.72 = internal constant [12 x i8] c"floatformat\00", align 1
@floatformat.BUF_SIZE = internal unnamed_addr constant i32 126, align 4, !dbg !31
@.str.73 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.74 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.75 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.76 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.panic_msg.77 = internal constant [48 x i8] c"Dereference of null pointer, '--estr' was null.\00", align 1
@.panic_msg.78 = internal constant [45 x i8] c"Dereference of null pointer, 's++' was null.\00", align 1
@std.io.INTERNAL_BUFFER_EXCEEDED = linkonce constant %"char[]" { ptr @std.io.INTERNAL_BUFFER_EXCEEDED.nameof, i64 28 }, comdat, align 8
@std.io.INTERNAL_BUFFER_EXCEEDED.nameof = internal constant [29 x i8] c"io::INTERNAL_BUFFER_EXCEEDED\00", align 1
@.str.79 = private unnamed_addr constant [3 x i8] c"0X\00", align 1
@.str.80 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.panic_msg.81 = internal constant [43 x i8] c"Dereference of null pointer, 'd' was null.\00", align 1
@.panic_msg.82 = internal constant [45 x i8] c"Dereference of null pointer, '--a' was null.\00", align 1
@.panic_msg.83 = internal constant [43 x i8] c"Dereference of null pointer, 'a' was null.\00", align 1
@.panic_msg.84 = internal constant [11 x i8] c"% by zero.\00", align 1
@.panic_msg.85 = internal constant [18 x i8] c"Division by zero.\00", align 1
@.panic_msg.86 = internal constant [45 x i8] c"Dereference of null pointer, 'd--' was null.\00", align 1
@.func.87 = internal constant [5 x i8] c"ntoa\00", align 1
@.func.88 = internal constant [12 x i8] c"ntoa_format\00", align 1
@.str.89 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.90 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.91 = private unnamed_addr constant [22 x i8] c"Formatter.ntoa_format\00", align 1
@.func.92 = internal constant [9 x i8] c"ntoa_any\00", align 1
@"$ct.fault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.93 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@.func.94 = internal constant [9 x i8] c"out_char\00", align 1
@.str.95 = private unnamed_addr constant [11 x i8] c"<NOT CHAR>\00", align 1
@.str.96 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.97 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.98 = private unnamed_addr constant [19 x i8] c"Formatter.out_char\00", align 1
@.func.99 = internal constant [12 x i8] c"out_reverse\00", align 1
@.file.100 = internal constant [15 x i8] c"multiwriter.c3\00", align 1
@.panic_msg.101 = internal constant [37 x i8] c"@require \22writers.len > 0\22 violated.\00", align 1
@.panic_msg.102 = internal constant [91 x i8] c"@require \22self.writers.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", comdat, align 1
@.panic_msg.103 = internal constant [66 x i8] c"@require \22!alignment || math::is_power_of_2(alignment)\22 violated.\00", align 1
@.file.104 = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.panic_msg.105 = internal constant [81 x i8] c"@require \22alignment <= mem::MAX_MEMORY_ALIGNMENT\22 violated: 'alignment too big'.\00", align 1
@.panic_msg.106 = internal constant [60 x i8] c"@require \22size > 0\22 violated: 'The size must be 1 or more'.\00", align 1
@.panic_msg.107 = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@.panic_msg.108 = internal constant [39 x i8] c"Slice copy length mismatch (%d != %d).\00", align 1
@.func.109 = internal constant [6 x i8] c"tinit\00", align 1
@std.core.mem.allocator.current_temp = extern_weak thread_local global %any, align 8
@.func.110 = internal constant [5 x i8] c"free\00", align 1
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", comdat, align 1
@.panic_msg.111 = internal constant [76 x i8] c"@require \22ptr != null\22 violated: 'Empty pointers should never be released'.\00", align 1
@.panic_msg.112 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@.func.113 = internal constant [6 x i8] c"write\00", align 1
@.panic_msg.114 = internal constant [54 x i8] c"Dereference of null pointer, 'self.writers' was null.\00", align 1
@.func.115 = internal constant [11 x i8] c"write_byte\00", align 1
@.file.116 = internal constant [14 x i8] c"bytereader.c3\00", align 1
@.func.117 = internal constant [4 x i8] c"len\00", align 1
@.func.118 = internal constant [5 x i8] c"read\00", align 1
@.panic_msg.119 = internal constant [38 x i8] c"Passed null to a ref ('&') parameter.\00", align 1
@.file.120 = internal constant [7 x i8] c"mem.c3\00", align 1
@.panic_msg.121 = internal constant [95 x i8] c"@require \22src != null || len == 0\22 violated: 'Copying a null with non-zero length is invalid'.\00", align 1
@.panic_msg.122 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.func.123 = internal constant [10 x i8] c"read_byte\00", align 1
@.func.124 = internal constant [14 x i8] c"pushback_byte\00", align 1
@std.io.INVALID_PUSHBACK = linkonce constant %"char[]" { ptr @std.io.INVALID_PUSHBACK.nameof, i64 20 }, comdat, align 8
@std.io.INVALID_PUSHBACK.nameof = internal constant [21 x i8] c"io::INVALID_PUSHBACK\00", align 1
@.func.125 = internal constant [5 x i8] c"seek\00", align 1
@std.io.INVALID_POSITION = linkonce constant %"char[]" { ptr @std.io.INVALID_POSITION.nameof, i64 20 }, comdat, align 8
@std.io.INVALID_POSITION.nameof = internal constant [21 x i8] c"io::INVALID_POSITION\00", align 1
@.func.126 = internal constant [9 x i8] c"write_to\00", align 1
@.panic_msg.127 = internal constant [46 x i8] c"Assert \22self.index <= self.bytes.len\22 failed.\00", align 1
@.file.128 = internal constant [15 x i8] c"multireader.c3\00", align 1
@.panic_msg.129 = internal constant [91 x i8] c"@require \22self.readers.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@.panic_msg.130 = internal constant [36 x i8] c"@ensure \22self.index == 0\22 violated.\00", align 1
@.file.131 = internal constant [14 x i8] c"bytewriter.c3\00", align 1
@.panic_msg.132 = internal constant [89 x i8] c"@require \22self.bytes.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@.panic_msg.133 = internal constant [53 x i8] c"@ensure \22(bool)allocator, self.index == 0\22 violated.\00", align 1
@.func.134 = internal constant [17 x i8] c"init_with_buffer\00", align 1
@"$ct.void" = linkonce global %.introspect { i8 0, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.func.135 = internal constant [8 x i8] c"destroy\00", align 1
@.func.136 = internal constant [9 x i8] c"str_view\00", align 1
@.func.137 = internal constant [16 x i8] c"ensure_capacity\00", align 1
@std.io.OUT_OF_SPACE = linkonce constant %"char[]" { ptr @std.io.OUT_OF_SPACE.nameof, i64 16 }, comdat, align 8
@std.io.OUT_OF_SPACE.nameof = internal constant [17 x i8] c"io::OUT_OF_SPACE\00", align 1
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", comdat, align 1
@.panic_msg.138 = internal constant [33 x i8] c"@require \22ptr != null\22 violated.\00", align 1
@.panic_msg.139 = internal constant [34 x i8] c"@require \22new_size > 0\22 violated.\00", align 1
@.panic_msg.140 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.func.141 = internal constant [10 x i8] c"read_from\00", align 1
@.file.142 = internal constant [10 x i8] c"buffer.c3\00", align 1
@.panic_msg.143 = internal constant [35 x i8] c"@require \22bytes.len > 0\22 violated.\00", align 1
@.func.144 = internal constant [6 x i8] c"close\00", align 1
@"$sel.close" = linkonce_odr constant [6 x i8] c"close\00", comdat, align 1
@.panic_msg.145 = internal constant [43 x i8] c"No method 'close' could be found on target\00", align 1
@.func.146 = internal constant [7 x i8] c"refill\00", align 1
@.panic_msg.147 = internal constant [64 x i8] c"@require \22bytes.len > 0\22 violated: 'Non-empty buffer required'.\00", align 1
@.func.148 = internal constant [14 x i8] c"write_pending\00", align 1
@.file.149 = internal constant [13 x i8] c"teereader.c3\00", align 1
@std.io.GENERAL_ERROR = linkonce constant %"char[]" { ptr @std.io.GENERAL_ERROR.nameof, i64 17 }, comdat, align 8
@std.io.GENERAL_ERROR.nameof = internal constant [18 x i8] c"io::GENERAL_ERROR\00", align 1
@.file.150 = internal constant [15 x i8] c"limitreader.c3\00", align 1
@.file.151 = internal constant [14 x i8] c"bytebuffer.c3\00", align 1
@.panic_msg.152 = internal constant [72 x i8] c"@require \22self.bytes.len == 0\22 violated: 'Buffer already initialized.'.\00", align 1
@.panic_msg.153 = internal constant [33 x i8] c"@require \22buf.len > 0\22 violated.\00", align 1
@.panic_msg.154 = internal constant [23 x i8] c"Negative indexing (%d)\00", align 1
@.panic_msg.155 = internal constant [35 x i8] c"Assert \22self.read_idx > 0\22 failed.\00", align 1
@.func.156 = internal constant [5 x i8] c"grow\00", align 1
@.file.157 = internal constant [11 x i8] c"scanner.c3\00", align 1
@.panic_msg.158 = internal constant [66 x i8] c"@require \22buffer.len > 0\22 violated: 'Non-empty buffer required.'.\00", align 1
@.panic_msg.159 = internal constant [51 x i8] c"Assert \22self.read_idx >= self.pattern_idx\22 failed.\00", align 1
@.func.160 = internal constant [5 x i8] c"scan\00", align 1
@.panic_msg.161 = internal constant [68 x i8] c"@require \22pattern.len > 0\22 violated: 'Non-empty pattern required.'.\00", align 1
@.panic_msg.162 = internal constant [70 x i8] c"@require \22self.buf.len > pattern.len\22 violated: 'Pattern too large.'.\00", align 1
@std.core.builtin.NOT_FOUND = linkonce constant %"char[]" { ptr @std.core.builtin.NOT_FOUND.nameof, i64 18 }, comdat, align 8
@std.core.builtin.NOT_FOUND.nameof = internal constant [19 x i8] c"builtin::NOT_FOUND\00", align 1
@.panic_msg.163 = internal constant [72 x i8] c"@require \22substr.len > 0\22 violated: 'The string must be len 1 or more'.\00", align 1
@std.io.PRINTF_NTOA_BUFFER_SIZE = weak local_unnamed_addr constant i32 256, comdat, align 4, !dbg !33
@.file.164 = internal constant [13 x i8] c"formatter.c3\00", align 1
@.func.165 = internal constant [10 x i8] c"to_format\00", align 1
@.str.166 = private unnamed_addr constant [17 x i8] c"[Parameter '%s']\00", align 1
@"$ct.String" = linkonce global %.introspect { i8 17, i64 ptrtoint (ptr @"$ct.sa$char" to i64), ptr null, i64 16, i64 ptrtoint (ptr @"$ct.sa$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.sa$char" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.func.167 = internal constant [7 x i8] c"printf\00", align 1
@.func.168 = internal constant [4 x i8] c"out\00", align 1
@.panic_msg.169 = internal constant [55 x i8] c"Calling null function pointer, 'self.out_fn' was null.\00", align 1
@.func.170 = internal constant [20 x i8] c"print_with_function\00", align 1
@"$sel.to_format" = linkonce_odr constant [10 x i8] c"to_format\00", comdat, align 1
@.str.171 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.panic_msg.172 = internal constant [47 x i8] c"No method 'to_format' could be found on target\00", align 1
@"$sel.to_constant_string" = linkonce_odr constant [19 x i8] c"to_constant_string\00", comdat, align 1
@.str.173 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.panic_msg.174 = internal constant [56 x i8] c"No method 'to_constant_string' could be found on target\00", align 1
@.func.175 = internal constant [12 x i8] c"out_unknown\00", align 1
@.str.176 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.177 = private unnamed_addr constant [7 x i8] c" type:\00", align 1
@.str.178 = private unnamed_addr constant [8 x i8] c", addr:\00", align 1
@.str.179 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.func.180 = internal constant [8 x i8] c"out_str\00", align 1
@.str.181 = private unnamed_addr constant [7 x i8] c"typeid\00", align 1
@.str.182 = private unnamed_addr constant [5 x i8] c"void\00", align 1
@.str.183 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.184 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.185 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.str.186 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.187 = private unnamed_addr constant [4 x i8] c"ERR\00", align 1
@.str.188 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.189 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.panic_msg.190 = internal constant [68 x i8] c"@require \22v.type.kindof == ENUM\22 violated: 'Value was not an enum'.\00", align 1
@.str.191 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.192 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.193 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.panic_msg.194 = internal constant [52 x i8] c"Attempted to access 'names' on non enum/fault type.\00", align 1
@.panic_msg.195 = internal constant [50 x i8] c"Illegal enum value found, numerical value was %d.\00", align 1
@.str.196 = private unnamed_addr constant [7 x i8] c"struct\00", align 1
@.str.197 = private unnamed_addr constant [6 x i8] c"union\00", align 1
@.str.198 = private unnamed_addr constant [10 x i8] c"bitstruct\00", align 1
@.str.199 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@"$ct.std.core.string.ZString" = linkonce global %.introspect { i8 17, i64 ptrtoint (ptr @"$ct.p$char" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$char" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.str.200 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@"$ct.std.core.dstring.DString" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$std.core.dstring.DStringOpaque" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$std.core.dstring.DStringOpaque" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.std.core.dstring.DStringOpaque" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.dstring.DStringOpaque" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 1, i64 ptrtoint (ptr @"$ct.void" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.str.201 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.panic_msg.202 = internal constant [49 x i8] c"Dereference of null pointer, 'pointer' was null.\00", align 1
@.str.203 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.panic_msg.204 = internal constant [44 x i8] c"Attempted to access 'len' on non array type\00", align 1
@.str.205 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.206 = private unnamed_addr constant [3 x i8] c"[<\00", align 1
@.str.207 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.208 = private unnamed_addr constant [3 x i8] c">]\00", align 1
@.panic_msg.209 = internal constant [46 x i8] c"Dereference of null pointer, 'temp' was null.\00", align 1
@.str.210 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.211 = private unnamed_addr constant [16 x i8] c"Already handled\00", align 1
@.str.212 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.213 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.str.214 = private unnamed_addr constant [13 x i8] c"Invalid type\00", align 1
@.func.215 = internal constant [8 x i8] c"vprintf\00", align 1
@.str.216 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@std.io.INVALID_FORMAT = linkonce constant %"char[]" { ptr @std.io.INVALID_FORMAT.nameof, i64 18 }, comdat, align 8
@std.io.INVALID_FORMAT.nameof = internal constant [19 x i8] c"io::INVALID_FORMAT\00", align 1
@.str.217 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.218 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.219 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.220 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@std.io.NOT_ENOUGH_ARGUMENTS = linkonce constant %"char[]" { ptr @std.io.NOT_ENOUGH_ARGUMENTS.nameof, i64 24 }, comdat, align 8
@std.io.NOT_ENOUGH_ARGUMENTS.nameof = internal constant [25 x i8] c"io::NOT_ENOUGH_ARGUMENTS\00", align 1
@.str.221 = private unnamed_addr constant [10 x i8] c"<MISSING>\00", align 1
@std.io.INVALID_ARGUMENT = linkonce constant %"char[]" { ptr @std.io.INVALID_ARGUMENT.nameof, i64 20 }, comdat, align 8
@std.io.INVALID_ARGUMENT.nameof = internal constant [21 x i8] c"io::INVALID_ARGUMENT\00", align 1
@.str.222 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.223 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.224 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.225 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@"$ct.sa$ichar" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.ichar" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.str.226 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.227 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.228 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.func.229 = internal constant [6 x i8] c"print\00", align 1
@"$ct.dyn.std.io.MultiWriter.write" = weak global { ptr, ptr, ptr } { ptr @std.io.MultiWriter.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiWriter.write_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.MultiWriter.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.len" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteReader.len, ptr @"$sel.len", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.len" = linkonce_odr constant [4 x i8] c"len\00", comdat, align 1
@"$ct.dyn.std.io.ByteReader.read" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.read_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.pushback_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteReader.pushback_byte, ptr @"$sel.pushback_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.pushback_byte" = linkonce_odr constant [14 x i8] c"pushback_byte\00", comdat, align 1
@"$ct.dyn.std.io.ByteReader.seek" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteReader.seek, ptr @"$sel.seek", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.write_to" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteReader.write_to, ptr @"$sel.write_to", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.available" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteReader.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiReader.read" = weak global { ptr, ptr, ptr } { ptr @std.io.MultiReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiReader.read_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.MultiReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteWriter.destroy" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.destroy, ptr @"$sel.destroy", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.destroy" = linkonce_odr constant [8 x i8] c"destroy\00", comdat, align 1
@"$ct.dyn.std.io.ByteWriter.write" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteWriter.write_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteWriter.read_from" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.read_from, ptr @"$sel.read_from", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.read_from" = linkonce_odr constant [10 x i8] c"read_from\00", comdat, align 1
@"$ct.dyn.std.io.ReadBuffer.close" = weak global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ReadBuffer.read" = weak global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ReadBuffer.read_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.close" = weak global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.flush" = weak global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.flush, ptr @"$sel.flush", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.write" = weak global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.write_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.TeeReader.read" = weak global { ptr, ptr, ptr } { ptr @std.io.TeeReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.TeeReader.read_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.TeeReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.LimitReader.close" = weak global { ptr, ptr, ptr } { ptr @std.io.LimitReader.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.LimitReader.read" = weak global { ptr, ptr, ptr } { ptr @std.io.LimitReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.LimitReader.read_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.LimitReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.LimitReader.available" = weak global { ptr, ptr, ptr } { ptr @std.io.LimitReader.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.write" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.write_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.read" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.read_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.pushback_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.pushback_byte, ptr @"$sel.pushback_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.seek" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.seek, ptr @"$sel.seek", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.available" = weak global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.flush" = weak global { ptr, ptr, ptr } { ptr @std.io.Scanner.flush, ptr @"$sel.flush", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.close" = weak global { ptr, ptr, ptr } { ptr @std.io.Scanner.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.read" = weak global { ptr, ptr, ptr } { ptr @std.io.Scanner.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.read_byte" = weak global { ptr, ptr, ptr } { ptr @std.io.Scanner.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.ReflectedParam.to_format" = weak global { ptr, ptr, ptr } { ptr @std.core.ReflectedParam.to_format, ptr @"$sel.to_format", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.ReflectedParam" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_register, ptr null }]

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.BitReader.init(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !81 {
entry:
  %self = alloca ptr, align 8
  %byte_reader = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %BitReader, align 8
  %3 = icmp eq ptr %0, null, !dbg !97
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !97
  br i1 %4, label %panic, label %checkok, !dbg !97

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !98, !DIExpression(), !99)
  store i64 %1, ptr %byte_reader, align 8
  %ptradd = getelementptr inbounds i8, ptr %byte_reader, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %byte_reader, !100, !DIExpression(), !101)
  %5 = load ptr, ptr %self, align 8, !dbg !102
  %checknull = icmp eq ptr %5, null, !dbg !102
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !102
  br i1 %6, label %panic1, label %checkok2, !dbg !102

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !102
  %8 = urem i64 %7, 8, !dbg !102
  %9 = icmp ne i64 %8, 0, !dbg !102
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !102
  br i1 %10, label %panic3, label %checkok6, !dbg !102

checkok6:                                         ; preds = %checkok2
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %byte_reader, i32 16, i1 false), !dbg !103
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !103
  ret void, !dbg !103

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !99
  call void %11(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func, i64 4, i32 10) #5, !dbg !99
  unreachable, !dbg !99

panic1:                                           ; preds = %checkok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !102
  call void %12(ptr @.panic_msg.2, i64 45, ptr @.file, i64 7, ptr @.func, i64 4, i32 12) #5, !dbg !102
  unreachable, !dbg !102

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %15 = insertvalue %any undef, ptr %taddr4, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %14, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %16, ptr %ptradd5, align 16
  %17 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %17, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file, i64 7, ptr @.func, i64 4, i32 12, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !102
  unreachable, !dbg !102
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.BitReader.clear(ptr %0) #0 comdat !dbg !104 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !107
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !107
  br i1 %2, label %panic, label %checkok, !dbg !107

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !108, !DIExpression(), !109)
  %3 = load ptr, ptr %self, align 8, !dbg !110
  %ptradd = getelementptr inbounds i8, ptr %3, i64 20, !dbg !110
  store i32 0, ptr %ptradd, align 4, !dbg !111
  ret void, !dbg !111

panic:                                            ; preds = %entry
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !109
  call void %4(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func.4, i64 5, i32 15) #5, !dbg !109
  unreachable, !dbg !109
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.BitReader.read_bits(ptr %0, ptr %1, i32 %2) #0 comdat !dbg !112 {
entry:
  %self = alloca ptr, align 8
  %nbits = alloca i32, align 4
  %bits = alloca i32, align 4
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i8, align 1
  %mask = alloca i32, align 4
  %taddr = alloca i32, align 4
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr16 = alloca i32, align 4
  %varargslots17 = alloca [1 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr26 = alloca i32, align 4
  %varargslots27 = alloca [1 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !118
  %3 = icmp eq ptr %1, null, !dbg !118
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !118
  br i1 %4, label %panic, label %checkok, !dbg !118

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !119, !DIExpression(), !120)
  store i32 %2, ptr %nbits, align 4
    #dbg_declare(ptr %nbits, !121, !DIExpression(), !122)
  %5 = load i32, ptr %nbits, align 4, !dbg !123
  %ge = icmp uge i32 8, %5, !dbg !123
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !123

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !123
  call void %6(ptr @.panic_msg.6, i64 31, ptr @.file, i64 7, ptr @.func.5, i64 9, i32 21) #5, !dbg !123
  unreachable, !dbg !123

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !125
  %ptradd = getelementptr inbounds i8, ptr %7, i64 20, !dbg !125
  %8 = load i32, ptr %ptradd, align 4, !dbg !125
  %9 = load i32, ptr %nbits, align 4, !dbg !126
  %add = add i32 %8, %9, !dbg !125
  %zext = zext i32 %add to i64, !dbg !125
  %ge1 = icmp uge i64 32, %zext, !dbg !125
  br i1 %ge1, label %assert_ok3, label %assert_fail2, !dbg !125

assert_fail2:                                     ; preds = %assert_ok
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !125
  call void %10(ptr @.panic_msg.7, i64 56, ptr @.file, i64 7, ptr @.func.5, i64 9, i32 22) #5, !dbg !125
  unreachable, !dbg !125

assert_ok3:                                       ; preds = %assert_ok
    #dbg_declare(ptr %bits, !127, !DIExpression(), !128)
  %11 = load ptr, ptr %self, align 8, !dbg !129
  %ptradd4 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !129
  %12 = load i32, ptr %ptradd4, align 8, !dbg !129
  store i32 %12, ptr %bits, align 4, !dbg !129
  %13 = load ptr, ptr %self, align 8, !dbg !130
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 20, !dbg !130
  %14 = load i32, ptr %ptradd5, align 4, !dbg !130
  %15 = load i32, ptr %nbits, align 4, !dbg !131
  %lt = icmp ult i32 %14, %15, !dbg !130
  br i1 %lt, label %if.then, label %if.exit, !dbg !130

if.then:                                          ; preds = %assert_ok3
    #dbg_declare(ptr %c, !132, !DIExpression(), !134)
  %16 = load ptr, ptr %self, align 8, !dbg !135
  %ptradd6 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !135
  %17 = load i64, ptr %ptradd6, align 8, !dbg !135
  %18 = inttoptr i64 %17 to ptr, !dbg !135
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !118
  %19 = icmp eq ptr %18, %type, !dbg !118
  br i1 %19, label %cache_hit, label %cache_miss, !dbg !118

cache_miss:                                       ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !118
  %20 = load ptr, ptr %ptradd7, align 8, !dbg !118
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.read_byte"), !dbg !118
  store ptr %21, ptr %.inlinecache, align 8, !dbg !118
  store ptr %18, ptr %.cachedtype, align 8, !dbg !118
  br label %22, !dbg !118

cache_hit:                                        ; preds = %if.then
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !118
  br label %22, !dbg !118

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ], !dbg !118
  %23 = icmp eq ptr %fn_phi, null, !dbg !118
  br i1 %23, label %missing_function, label %match, !dbg !118

missing_function:                                 ; preds = %22
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !135
  call void %24(ptr @.panic_msg.8, i64 46, ptr @.file, i64 7, ptr @.func.5, i64 9, i32 30) #5, !dbg !135
  unreachable, !dbg !135

match:                                            ; preds = %22
  %25 = load ptr, ptr %16, align 8
  %26 = call i64 %fn_phi(ptr %retparam, ptr %25), !dbg !135
  %not_err = icmp eq i64 %26, 0, !dbg !135
  %27 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !135
  br i1 %27, label %after_check, label %assign_optional, !dbg !135

assign_optional:                                  ; preds = %match
  store i64 %26, ptr %error_var, align 8, !dbg !135
  br label %guard_block, !dbg !135

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !135

guard_block:                                      ; preds = %assign_optional
  %28 = load i64, ptr %error_var, align 8, !dbg !135
  ret i64 %28, !dbg !135

noerr_block:                                      ; preds = %after_check
  %29 = load i8, ptr %retparam, align 1, !dbg !135
  store i8 %29, ptr %c, align 1, !dbg !135
  %30 = load i32, ptr %bits, align 4, !dbg !136
  %shl = shl i32 %30, 8, !dbg !136
  %31 = freeze i32 %shl, !dbg !136
  store i32 %31, ptr %bits, align 4, !dbg !136
  %32 = load i32, ptr %bits, align 4, !dbg !137
  %33 = load i8, ptr %c, align 1, !dbg !138
  %zext8 = zext i8 %33 to i32, !dbg !138
  %or = or i32 %32, %zext8, !dbg !137
  store i32 %or, ptr %bits, align 4, !dbg !137
  %34 = load ptr, ptr %self, align 8, !dbg !139
  %ptradd9 = getelementptr inbounds i8, ptr %34, i64 16, !dbg !139
  %35 = load i32, ptr %bits, align 4, !dbg !140
  store i32 %35, ptr %ptradd9, align 8, !dbg !140
  %36 = load ptr, ptr %self, align 8, !dbg !141
  %ptradd10 = getelementptr inbounds i8, ptr %36, i64 20, !dbg !141
  %37 = load i32, ptr %ptradd10, align 4, !dbg !141
  %add11 = add i32 %37, 8, !dbg !141
  store i32 %add11, ptr %ptradd10, align 4, !dbg !141
  br label %if.exit, !dbg !141

if.exit:                                          ; preds = %noerr_block, %assert_ok3
  %38 = load ptr, ptr %self, align 8, !dbg !142
  %ptradd12 = getelementptr inbounds i8, ptr %38, i64 20, !dbg !142
  %39 = load i32, ptr %ptradd12, align 4, !dbg !142
  %40 = load i32, ptr %nbits, align 4, !dbg !143
  %sub = sub i32 %39, %40, !dbg !142
  store i32 %sub, ptr %ptradd12, align 4, !dbg !142
    #dbg_declare(ptr %mask, !144, !DIExpression(), !145)
  %41 = load i32, ptr %nbits, align 4, !dbg !146
  %shift_underflow = icmp slt i32 %41, 0, !dbg !147
  %42 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !147
  br i1 %42, label %panic13, label %checkok14, !dbg !147

checkok14:                                        ; preds = %if.exit
  %shift_exceeds = icmp sge i32 %41, 32, !dbg !147
  %43 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !147
  br i1 %43, label %panic15, label %checkok20, !dbg !147

checkok20:                                        ; preds = %checkok14
  %shl21 = shl i32 1, %41, !dbg !147
  %44 = freeze i32 %shl21, !dbg !147
  %sub22 = sub i32 %44, 1, !dbg !147
  store i32 %sub22, ptr %mask, align 4, !dbg !147
  %45 = load i32, ptr %bits, align 4, !dbg !148
  %46 = load ptr, ptr %self, align 8, !dbg !149
  %ptradd23 = getelementptr inbounds i8, ptr %46, i64 20, !dbg !149
  %47 = load i32, ptr %ptradd23, align 4, !dbg !149
  %shift_exceeds24 = icmp uge i32 %47, 32, !dbg !148
  %48 = call i1 @llvm.expect.i1(i1 %shift_exceeds24, i1 false), !dbg !148
  br i1 %48, label %panic25, label %checkok30, !dbg !148

checkok30:                                        ; preds = %checkok20
  %lshr = lshr i32 %45, %47, !dbg !148
  %49 = freeze i32 %lshr, !dbg !148
  %50 = load i32, ptr %mask, align 4, !dbg !150
  %and = and i32 %49, %50, !dbg !151
  %trunc = trunc i32 %and to i8, !dbg !151
  store i8 %trunc, ptr %0, align 1, !dbg !151
  ret i64 0, !dbg !151

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !120
  call void %51(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func.5, i64 9, i32 24) #5, !dbg !120
  unreachable, !dbg !120

panic13:                                          ; preds = %if.exit
  store i32 %41, ptr %taddr, align 4
  %52 = insertvalue %any undef, ptr %taddr, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file, i64 7, ptr @.func.5, i64 9, i32 37, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !147
  unreachable, !dbg !147

panic15:                                          ; preds = %checkok14
  store i32 %41, ptr %taddr16, align 4
  %55 = insertvalue %any undef, ptr %taddr16, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %56, ptr %varargslots17, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp18" = insertvalue %"any[]" %57, i64 1, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file, i64 7, ptr @.func.5, i64 9, i32 37, ptr byval(%"any[]") align 8 %indirectarg19) #5, !dbg !147
  unreachable, !dbg !147

panic25:                                          ; preds = %checkok20
  store i32 %47, ptr %taddr26, align 4
  %58 = insertvalue %any undef, ptr %taddr26, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %59, ptr %varargslots27, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp28" = insertvalue %"any[]" %60, i64 1, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file, i64 7, ptr @.func.5, i64 9, i32 38, ptr byval(%"any[]") align 8 %indirectarg29) #5, !dbg !148
  unreachable, !dbg !148
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.BitWriter.init(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !152 {
entry:
  %self = alloca ptr, align 8
  %byte_writer = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %BitWriter, align 8
  %3 = icmp eq ptr %0, null, !dbg !165
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !165
  br i1 %4, label %panic, label %checkok, !dbg !165

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !166, !DIExpression(), !167)
  store i64 %1, ptr %byte_writer, align 8
  %ptradd = getelementptr inbounds i8, ptr %byte_writer, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %byte_writer, !168, !DIExpression(), !169)
  %5 = load ptr, ptr %self, align 8, !dbg !170
  %checknull = icmp eq ptr %5, null, !dbg !170
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !170
  br i1 %6, label %panic1, label %checkok2, !dbg !170

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !170
  %8 = urem i64 %7, 8, !dbg !170
  %9 = icmp ne i64 %8, 0, !dbg !170
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !170
  br i1 %10, label %panic3, label %checkok6, !dbg !170

checkok6:                                         ; preds = %checkok2
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %byte_writer, i32 16, i1 false), !dbg !171
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !171
  ret void, !dbg !171

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !167
  call void %11(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func, i64 4, i32 52) #5, !dbg !167
  unreachable, !dbg !167

panic1:                                           ; preds = %checkok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !170
  call void %12(ptr @.panic_msg.2, i64 45, ptr @.file, i64 7, ptr @.func, i64 4, i32 54) #5, !dbg !170
  unreachable, !dbg !170

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %15 = insertvalue %any undef, ptr %taddr4, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %14, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %16, ptr %ptradd5, align 16
  %17 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %17, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file, i64 7, ptr @.func, i64 4, i32 54, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !170
  unreachable, !dbg !170
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.BitWriter.flush(ptr %0) #0 comdat !dbg !172 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %padding = alloca i32, align 4
  %bits = alloca i32, align 4
  %taddr = alloca i32, align 4
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %n = alloca i32, align 4
  %buffer = alloca [4 x i8], align 1
  %x = alloca i32, align 4
  %bytes = alloca ptr, align 8
  %bytes9 = alloca ptr, align 8
  %s = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %expr = alloca i32, align 4
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %stream = alloca %any, align 8
  %taddr38 = alloca i64, align 8
  %varargslots39 = alloca [1 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %buffer52 = alloca %"char[]", align 8
  %blockret = alloca i64, align 8
  %n57 = alloca i64, align 8
  %error_var58 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !175
  %1 = icmp eq ptr %0, null, !dbg !175
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !175
  br i1 %2, label %panic, label %checkok, !dbg !175

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !176, !DIExpression(), !177)
  %3 = load ptr, ptr %self, align 8, !dbg !178
  %ptradd = getelementptr inbounds i8, ptr %3, i64 20, !dbg !178
  %4 = load i32, ptr %ptradd, align 4, !dbg !178
  %eq = icmp eq i32 0, %4, !dbg !178
  br i1 %eq, label %if.then, label %if.exit, !dbg !178

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %padding, !179, !DIExpression(), !180)
  %5 = load ptr, ptr %self, align 8, !dbg !181
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 20, !dbg !181
  %6 = load i32, ptr %ptradd1, align 4, !dbg !181
  %zext = zext i32 %6 to i64, !dbg !181
  %sub = sub i64 32, %zext, !dbg !182
  %trunc = trunc i64 %sub to i32, !dbg !182
  store i32 %trunc, ptr %padding, align 4, !dbg !182
    #dbg_declare(ptr %bits, !183, !DIExpression(), !184)
  %7 = load ptr, ptr %self, align 8, !dbg !185
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !185
  %8 = load i32, ptr %ptradd2, align 8, !dbg !185
  %9 = load i32, ptr %padding, align 4, !dbg !186
  %shift_exceeds = icmp uge i32 %9, 32, !dbg !185
  %10 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !185
  br i1 %10, label %panic3, label %checkok4, !dbg !185

checkok4:                                         ; preds = %if.exit
  %shl = shl i32 %8, %9, !dbg !185
  %11 = freeze i32 %shl, !dbg !185
  store i32 %11, ptr %bits, align 4, !dbg !185
    #dbg_declare(ptr %n, !187, !DIExpression(), !188)
  %12 = load ptr, ptr %self, align 8, !dbg !189
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 20, !dbg !189
  %13 = load i32, ptr %ptradd5, align 4, !dbg !189
  %add = add i32 %13, 7, !dbg !189
  %sdiv = sdiv i32 %add, 8, !dbg !189
  store i32 %sdiv, ptr %n, align 4, !dbg !189
    #dbg_declare(ptr %buffer, !190, !DIExpression(), !194)
  store i8 0, ptr %buffer, align 1, !dbg !194
  %ptradd6 = getelementptr inbounds i8, ptr %buffer, i64 1, !dbg !194
  store i8 0, ptr %ptradd6, align 1, !dbg !194
  %ptradd7 = getelementptr inbounds i8, ptr %buffer, i64 2, !dbg !194
  store i8 0, ptr %ptradd7, align 1, !dbg !194
  %ptradd8 = getelementptr inbounds i8, ptr %buffer, i64 3, !dbg !194
  store i8 0, ptr %ptradd8, align 1, !dbg !194
  %14 = load i32, ptr %bits, align 4
  store i32 %14, ptr %x, align 4
  store ptr %buffer, ptr %bytes, align 8
  %15 = load ptr, ptr %bytes, align 8
  store ptr %15, ptr %bytes9, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !195

assert_fail:                                      ; preds = %checkok4
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !198
  call void %16(ptr @.panic_msg.11, i64 117, ptr @.file, i64 7, ptr @.func.10, i64 5, i32 65) #5, !dbg !198
  unreachable, !dbg !198

assert_ok:                                        ; preds = %checkok4
    #dbg_declare(ptr %s, !202, !DIExpression(), !209)
  call void @llvm.memset.p0.i64(ptr align 8 %s, i8 0, i64 16, i1 false), !dbg !209
  %17 = load ptr, ptr %bytes, align 8, !dbg !210
  %checknull = icmp eq ptr %17, null, !dbg !210
  %18 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !210
  br i1 %18, label %panic10, label %checkok11, !dbg !210

checkok11:                                        ; preds = %assert_ok
  %19 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !210
  %20 = insertvalue %"char[]" %19, i64 4, 1, !dbg !210
  store %"char[]" %20, ptr %s, align 8, !dbg !210
  %21 = load ptr, ptr %s, align 8, !dbg !211
  %checknull12 = icmp eq ptr %21, null, !dbg !211
  %22 = call i1 @llvm.expect.i1(i1 %checknull12, i1 false), !dbg !211
  br i1 %22, label %panic13, label %checkok14, !dbg !211

checkok14:                                        ; preds = %checkok11
  %23 = ptrtoint ptr %21 to i64, !dbg !212
  %24 = urem i64 %23, 4, !dbg !212
  %25 = icmp ne i64 %24, 0, !dbg !212
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false), !dbg !212
  br i1 %26, label %panic15, label %checkok22, !dbg !212

checkok22:                                        ; preds = %checkok14
  %27 = load i32, ptr %x, align 4
  store i32 %27, ptr %expr, align 4
  %checknull23 = icmp eq ptr %expr, null, !dbg !213
  %28 = call i1 @llvm.expect.i1(i1 %checknull23, i1 false), !dbg !213
  br i1 %28, label %panic24, label %checkok25, !dbg !213

checkok25:                                        ; preds = %checkok22
  %29 = ptrtoint ptr %expr to i64, !dbg !217
  %30 = urem i64 %29, 4, !dbg !217
  %31 = icmp ne i64 %30, 0, !dbg !217
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !217
  br i1 %32, label %panic26, label %checkok33, !dbg !217

checkok33:                                        ; preds = %checkok25
  %33 = load i32, ptr %expr, align 4, !dbg !217
  %34 = call i32 @llvm.bswap.i32(i32 %33), !dbg !217
  store i32 %34, ptr %21, align 4, !dbg !217
  %35 = load ptr, ptr %self, align 8, !dbg !218
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %stream, ptr align 8 %35, i32 16, i1 false)
  %36 = load i32, ptr %n, align 4, !dbg !219
  %zext34 = zext i32 %36 to i64, !dbg !219
  %add35 = add i64 0, %zext34, !dbg !219
  %gt = icmp ugt i64 0, %add35, !dbg !219
  %sub36 = sub i64 %add35, 0, !dbg !219
  %37 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !219
  br i1 %37, label %panic37, label %checkok42, !dbg !219

checkok42:                                        ; preds = %checkok33
  %lt = icmp ult i64 4, %add35, !dbg !220
  %sub43 = sub i64 %add35, 1, !dbg !220
  %38 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !220
  br i1 %38, label %panic44, label %checkok51, !dbg !220

checkok51:                                        ; preds = %checkok42
  %size = sub i64 %add35, 0, !dbg !220
  %39 = insertvalue %"char[]" undef, ptr %buffer, 0, !dbg !220
  %40 = insertvalue %"char[]" %39, i64 %size, 1, !dbg !220
  store %"char[]" %40, ptr %buffer52, align 8
  %ptradd53 = getelementptr inbounds i8, ptr %buffer52, i64 8, !dbg !221
  %41 = load i64, ptr %ptradd53, align 8, !dbg !221
  %eq54 = icmp eq i64 0, %41, !dbg !221
  br i1 %eq54, label %if.then55, label %if.exit56, !dbg !221

if.then55:                                        ; preds = %checkok51
  store i64 0, ptr %blockret, align 8, !dbg !224
  br label %expr_block.exit, !dbg !224

if.exit56:                                        ; preds = %checkok51
    #dbg_declare(ptr %n57, !225, !DIExpression(), !226)
  %ptradd59 = getelementptr inbounds i8, ptr %stream, i64 8, !dbg !227
  %42 = load i64, ptr %ptradd59, align 8, !dbg !227
  %43 = inttoptr i64 %42 to ptr, !dbg !227
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !175
  %44 = icmp eq ptr %43, %type, !dbg !175
  br i1 %44, label %cache_hit, label %cache_miss, !dbg !175

cache_miss:                                       ; preds = %if.exit56
  %ptradd60 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !175
  %45 = load ptr, ptr %ptradd60, align 8, !dbg !175
  %46 = call ptr @.dyn_search(ptr %45, ptr @"$sel.write"), !dbg !175
  store ptr %46, ptr %.inlinecache, align 8, !dbg !175
  store ptr %43, ptr %.cachedtype, align 8, !dbg !175
  br label %47, !dbg !175

cache_hit:                                        ; preds = %if.exit56
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !175
  br label %47, !dbg !175

47:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %46, %cache_miss ], !dbg !175
  %48 = icmp eq ptr %fn_phi, null, !dbg !175
  br i1 %48, label %missing_function, label %match, !dbg !175

missing_function:                                 ; preds = %47
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !228
  call void %49(ptr @.panic_msg.18, i64 42, ptr @.file.19, i64 9, ptr @.func.10, i64 5, i32 102) #5, !dbg !228
  unreachable, !dbg !228

match:                                            ; preds = %47
  %50 = load ptr, ptr %stream, align 8
  %lo = load ptr, ptr %buffer52, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %buffer52, i64 8
  %hi = load i64, ptr %ptradd61, align 8
  %51 = call i64 %fn_phi(ptr %retparam, ptr %50, ptr %lo, i64 %hi), !dbg !228
  %not_err = icmp eq i64 %51, 0, !dbg !228
  %52 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !228
  br i1 %52, label %after_check, label %assign_optional, !dbg !228

assign_optional:                                  ; preds = %match
  store i64 %51, ptr %error_var58, align 8, !dbg !228
  br label %guard_block, !dbg !228

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !228

guard_block:                                      ; preds = %assign_optional
  %53 = load i64, ptr %error_var58, align 8, !dbg !228
  store i64 %53, ptr %error_var, align 8, !dbg !228
  br label %guard_block65, !dbg !228

noerr_block:                                      ; preds = %after_check
  %54 = load i64, ptr %retparam, align 8, !dbg !228
  store i64 %54, ptr %n57, align 8, !dbg !228
  %55 = load i64, ptr %n57, align 8, !dbg !229
  %ptradd62 = getelementptr inbounds i8, ptr %buffer52, i64 8, !dbg !230
  %56 = load i64, ptr %ptradd62, align 8, !dbg !230
  %neq = icmp ne i64 %55, %56, !dbg !229
  br i1 %neq, label %if.then63, label %if.exit64, !dbg !229

if.then63:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @std.io.INCOMPLETE_WRITE to i64), ptr %error_var, align 8, !dbg !231
  br label %guard_block65, !dbg !231

if.exit64:                                        ; preds = %noerr_block
  %57 = load i64, ptr %n57, align 8, !dbg !232
  store i64 %57, ptr %blockret, align 8, !dbg !232
  br label %expr_block.exit, !dbg !232

expr_block.exit:                                  ; preds = %if.exit64, %if.then55
  br label %noerr_block66, !dbg !232

guard_block65:                                    ; preds = %if.then63, %guard_block
  %58 = load i64, ptr %error_var, align 8, !dbg !232
  ret i64 %58, !dbg !232

noerr_block66:                                    ; preds = %expr_block.exit
  %59 = load ptr, ptr %self, align 8, !dbg !233
  %ptradd67 = getelementptr inbounds i8, ptr %59, i64 20, !dbg !233
  store i32 0, ptr %ptradd67, align 4, !dbg !234
  ret i64 0, !dbg !234

panic:                                            ; preds = %entry
  %60 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !177
  call void %60(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func.10, i64 5, i32 57) #5, !dbg !177
  unreachable, !dbg !177

panic3:                                           ; preds = %if.exit
  store i32 %9, ptr %taddr, align 4
  %61 = insertvalue %any undef, ptr %taddr, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %62, ptr %varargslots, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %63, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file, i64 7, ptr @.func.10, i64 5, i32 62, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !185
  unreachable, !dbg !185

panic10:                                          ; preds = %assert_ok
  %64 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !210
  call void %64(ptr @.panic_msg.12, i64 46, ptr @.file.13, i64 11, ptr @.func.10, i64 5, i32 115) #5, !dbg !210
  unreachable, !dbg !210

panic13:                                          ; preds = %checkok11
  %65 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !212
  call void %65(ptr @.panic_msg.14, i64 42, ptr @.file.13, i64 11, ptr @.func.10, i64 5, i32 119) #5, !dbg !212
  unreachable, !dbg !212

panic15:                                          ; preds = %checkok14
  store i64 4, ptr %taddr16, align 8
  %66 = insertvalue %any undef, ptr %taddr16, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %68 = insertvalue %any undef, ptr %taddr17, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %67, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %69, ptr %ptradd19, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.13, i64 11, ptr @.func.10, i64 5, i32 119, ptr byval(%"any[]") align 8 %indirectarg21) #5, !dbg !212
  unreachable, !dbg !212

panic24:                                          ; preds = %checkok22
  %71 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !217
  call void %71(ptr @.panic_msg.14, i64 42, ptr @.file.15, i64 10, ptr @.func.10, i64 5, i32 254) #5, !dbg !217
  unreachable, !dbg !217

panic26:                                          ; preds = %checkok25
  store i64 4, ptr %taddr27, align 8
  %72 = insertvalue %any undef, ptr %taddr27, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr28, align 8
  %74 = insertvalue %any undef, ptr %taddr28, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %75, ptr %ptradd30, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.15, i64 10, ptr @.func.10, i64 5, i32 254, ptr byval(%"any[]") align 8 %indirectarg32) #5, !dbg !217
  unreachable, !dbg !217

panic37:                                          ; preds = %checkok33
  store i64 %sub36, ptr %taddr38, align 8
  %77 = insertvalue %any undef, ptr %taddr38, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots39, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp40" = insertvalue %"any[]" %79, i64 1, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file, i64 7, ptr @.func.10, i64 5, i32 66, ptr byval(%"any[]") align 8 %indirectarg41) #5, !dbg !220
  unreachable, !dbg !220

panic44:                                          ; preds = %checkok42
  store i64 %sub43, ptr %taddr45, align 8
  %80 = insertvalue %any undef, ptr %taddr45, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr46, align 8
  %82 = insertvalue %any undef, ptr %taddr46, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %81, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %83, ptr %ptradd48, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file, i64 7, ptr @.func.10, i64 5, i32 66, ptr byval(%"any[]") align 8 %indirectarg50) #5, !dbg !220
  unreachable, !dbg !220
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.BitWriter.write_bits(ptr %0, i32 %1, i32 %2) #0 comdat !dbg !235 {
entry:
  %self = alloca ptr, align 8
  %bits = alloca i32, align 4
  %nbits = alloca i32, align 4
  %reterr = alloca i64, align 8
  %to_push = alloca i32, align 4
  %bits_to_push = alloca i32, align 4
  %taddr = alloca i32, align 4
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr6 = alloca i32, align 4
  %varargslots7 = alloca [1 x %any], align 16
  %indirectarg9 = alloca %"any[]", align 8
  %taddr13 = alloca i32, align 4
  %varargslots14 = alloca [1 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr22 = alloca i32, align 4
  %varargslots23 = alloca [1 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %reterr34 = alloca i64, align 8
  %taddr39 = alloca i32, align 4
  %varargslots40 = alloca [1 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr48 = alloca i32, align 4
  %varargslots49 = alloca [1 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr55 = alloca i32, align 4
  %varargslots56 = alloca [1 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !238
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !238
  br i1 %4, label %panic, label %checkok, !dbg !238

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !239, !DIExpression(), !240)
  store i32 %1, ptr %bits, align 4
    #dbg_declare(ptr %bits, !241, !DIExpression(), !242)
  store i32 %2, ptr %nbits, align 4
    #dbg_declare(ptr %nbits, !243, !DIExpression(), !244)
  %5 = load i32, ptr %nbits, align 4, !dbg !245
  %ge = icmp uge i32 32, %5, !dbg !245
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !245

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !245
  call void %6(ptr @.panic_msg.21, i64 32, ptr @.file, i64 7, ptr @.func.20, i64 10, i32 71) #5, !dbg !245
  unreachable, !dbg !245

assert_ok:                                        ; preds = %checkok
  %7 = load i32, ptr %nbits, align 4, !dbg !247
  %eq = icmp eq i32 0, %7, !dbg !247
  br i1 %eq, label %if.then, label %if.exit, !dbg !247

if.then:                                          ; preds = %assert_ok
  ret i64 0

if.exit:                                          ; preds = %assert_ok
  br label %loop.cond, !dbg !248

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %8 = load ptr, ptr %self, align 8, !dbg !249
  %ptradd = getelementptr inbounds i8, ptr %8, i64 20, !dbg !249
  %9 = load i32, ptr %ptradd, align 4, !dbg !249
  %10 = load i32, ptr %nbits, align 4, !dbg !251
  %add = add i32 %9, %10, !dbg !249
  %lt = icmp ult i32 24, %add, !dbg !249
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !249

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %to_push, !252, !DIExpression(), !254)
  %11 = load ptr, ptr %self, align 8, !dbg !255
  %ptradd1 = getelementptr inbounds i8, ptr %11, i64 20, !dbg !255
  %12 = load i32, ptr %ptradd1, align 4, !dbg !255
  %sub = sub i32 24, %12, !dbg !256
  store i32 %sub, ptr %to_push, align 4, !dbg !256
    #dbg_declare(ptr %bits_to_push, !257, !DIExpression(), !258)
  %13 = load i32, ptr %bits, align 4, !dbg !259
  %14 = load i32, ptr %nbits, align 4, !dbg !260
  %15 = load i32, ptr %to_push, align 4, !dbg !261
  %sub2 = sub i32 %14, %15, !dbg !260
  %shift_exceeds = icmp uge i32 %sub2, 32, !dbg !259
  %16 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !259
  br i1 %16, label %panic3, label %checkok4, !dbg !259

checkok4:                                         ; preds = %loop.body
  %lshr = lshr i32 %13, %sub2, !dbg !259
  %17 = freeze i32 %lshr, !dbg !259
  %18 = load i32, ptr %to_push, align 4, !dbg !262
  %shift_underflow = icmp slt i32 %18, 0, !dbg !263
  %19 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !263
  br i1 %19, label %panic5, label %checkok10, !dbg !263

checkok10:                                        ; preds = %checkok4
  %shift_exceeds11 = icmp sge i32 %18, 32, !dbg !263
  %20 = call i1 @llvm.expect.i1(i1 %shift_exceeds11, i1 false), !dbg !263
  br i1 %20, label %panic12, label %checkok17, !dbg !263

checkok17:                                        ; preds = %checkok10
  %shl = shl i32 1, %18, !dbg !263
  %21 = freeze i32 %shl, !dbg !263
  %sub18 = sub i32 %21, 1, !dbg !263
  %and = and i32 %17, %sub18, !dbg !259
  store i32 %and, ptr %bits_to_push, align 4, !dbg !259
  %22 = load ptr, ptr %self, align 8, !dbg !264
  %ptradd19 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !264
  %23 = load i32, ptr %ptradd19, align 8, !dbg !264
  %24 = load i32, ptr %to_push, align 4, !dbg !265
  %shift_exceeds20 = icmp uge i32 %24, 32, !dbg !264
  %25 = call i1 @llvm.expect.i1(i1 %shift_exceeds20, i1 false), !dbg !264
  br i1 %25, label %panic21, label %checkok26, !dbg !264

checkok26:                                        ; preds = %checkok17
  %shl27 = shl i32 %23, %24, !dbg !264
  %26 = freeze i32 %shl27, !dbg !264
  store i32 %26, ptr %ptradd19, align 8, !dbg !264
  %27 = load ptr, ptr %self, align 8, !dbg !266
  %ptradd28 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !266
  %28 = load i32, ptr %ptradd28, align 8, !dbg !266
  %29 = load i32, ptr %bits_to_push, align 4, !dbg !267
  %or = or i32 %28, %29, !dbg !266
  store i32 %or, ptr %ptradd28, align 8, !dbg !266
  %30 = load ptr, ptr %self, align 8, !dbg !268
  %ptradd29 = getelementptr inbounds i8, ptr %30, i64 20, !dbg !268
  %31 = load i32, ptr %ptradd29, align 4, !dbg !268
  %32 = load i32, ptr %to_push, align 4, !dbg !269
  %add30 = add i32 %31, %32, !dbg !268
  store i32 %add30, ptr %ptradd29, align 4, !dbg !268
  %33 = load i32, ptr %nbits, align 4, !dbg !270
  %34 = load i32, ptr %to_push, align 4, !dbg !271
  %sub31 = sub i32 %33, %34, !dbg !270
  store i32 %sub31, ptr %nbits, align 4, !dbg !270
  %35 = load ptr, ptr %self, align 8, !dbg !272
  %36 = call i64 @std.io.BitWriter.flush(ptr %35), !dbg !272
  %not_err = icmp eq i64 %36, 0, !dbg !272
  %37 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !272
  br i1 %37, label %after_check, label %assign_optional, !dbg !272

assign_optional:                                  ; preds = %checkok26
  store i64 %36, ptr %error_var, align 8, !dbg !272
  br label %guard_block, !dbg !272

after_check:                                      ; preds = %checkok26
  br label %noerr_block, !dbg !272

guard_block:                                      ; preds = %assign_optional
  %38 = load i64, ptr %error_var, align 8, !dbg !272
  ret i64 %38, !dbg !272

noerr_block:                                      ; preds = %after_check
  br label %loop.cond, !dbg !272

loop.exit:                                        ; preds = %loop.cond
  %39 = load i32, ptr %nbits, align 4, !dbg !273
  %eq32 = icmp eq i32 0, %39, !dbg !273
  br i1 %eq32, label %if.then33, label %if.exit35, !dbg !273

if.then33:                                        ; preds = %loop.exit
  ret i64 0

if.exit35:                                        ; preds = %loop.exit
  %40 = load ptr, ptr %self, align 8, !dbg !274
  %ptradd36 = getelementptr inbounds i8, ptr %40, i64 16, !dbg !274
  %41 = load i32, ptr %ptradd36, align 8, !dbg !274
  %42 = load i32, ptr %nbits, align 4, !dbg !275
  %shift_exceeds37 = icmp uge i32 %42, 32, !dbg !274
  %43 = call i1 @llvm.expect.i1(i1 %shift_exceeds37, i1 false), !dbg !274
  br i1 %43, label %panic38, label %checkok43, !dbg !274

checkok43:                                        ; preds = %if.exit35
  %shl44 = shl i32 %41, %42, !dbg !274
  %44 = freeze i32 %shl44, !dbg !274
  store i32 %44, ptr %ptradd36, align 8, !dbg !274
  %45 = load ptr, ptr %self, align 8, !dbg !276
  %ptradd45 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !276
  %46 = load i32, ptr %ptradd45, align 8, !dbg !276
  %47 = load i32, ptr %bits, align 4, !dbg !277
  %48 = load i32, ptr %nbits, align 4, !dbg !278
  %shift_underflow46 = icmp slt i32 %48, 0, !dbg !279
  %49 = call i1 @llvm.expect.i1(i1 %shift_underflow46, i1 false), !dbg !279
  br i1 %49, label %panic47, label %checkok52, !dbg !279

checkok52:                                        ; preds = %checkok43
  %shift_exceeds53 = icmp sge i32 %48, 32, !dbg !279
  %50 = call i1 @llvm.expect.i1(i1 %shift_exceeds53, i1 false), !dbg !279
  br i1 %50, label %panic54, label %checkok59, !dbg !279

checkok59:                                        ; preds = %checkok52
  %shl60 = shl i32 1, %48, !dbg !279
  %51 = freeze i32 %shl60, !dbg !279
  %sub61 = sub i32 %51, 1, !dbg !279
  %and62 = and i32 %47, %sub61, !dbg !277
  %or63 = or i32 %46, %and62, !dbg !276
  store i32 %or63, ptr %ptradd45, align 8, !dbg !276
  %52 = load ptr, ptr %self, align 8, !dbg !280
  %ptradd64 = getelementptr inbounds i8, ptr %52, i64 20, !dbg !280
  %53 = load i32, ptr %ptradd64, align 4, !dbg !280
  %54 = load i32, ptr %nbits, align 4, !dbg !281
  %add65 = add i32 %53, %54, !dbg !280
  store i32 %add65, ptr %ptradd64, align 4, !dbg !280
  ret i64 0, !dbg !280

panic:                                            ; preds = %entry
  %55 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !240
  call void %55(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func.20, i64 10, i32 73) #5, !dbg !240
  unreachable, !dbg !240

panic3:                                           ; preds = %loop.body
  store i32 %sub2, ptr %taddr, align 4
  %56 = insertvalue %any undef, ptr %taddr, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %57, ptr %varargslots, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %58, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file, i64 7, ptr @.func.20, i64 10, i32 79, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !259
  unreachable, !dbg !259

panic5:                                           ; preds = %checkok4
  store i32 %18, ptr %taddr6, align 4
  %59 = insertvalue %any undef, ptr %taddr6, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %60, ptr %varargslots7, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots7, 0
  %"$$temp8" = insertvalue %"any[]" %61, i64 1, 1
  store %"any[]" %"$$temp8", ptr %indirectarg9, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file, i64 7, ptr @.func.20, i64 10, i32 79, ptr byval(%"any[]") align 8 %indirectarg9) #5, !dbg !263
  unreachable, !dbg !263

panic12:                                          ; preds = %checkok10
  store i32 %18, ptr %taddr13, align 4
  %62 = insertvalue %any undef, ptr %taddr13, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %63, ptr %varargslots14, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp15" = insertvalue %"any[]" %64, i64 1, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file, i64 7, ptr @.func.20, i64 10, i32 79, ptr byval(%"any[]") align 8 %indirectarg16) #5, !dbg !263
  unreachable, !dbg !263

panic21:                                          ; preds = %checkok17
  store i32 %24, ptr %taddr22, align 4
  %65 = insertvalue %any undef, ptr %taddr22, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %66, ptr %varargslots23, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp24" = insertvalue %"any[]" %67, i64 1, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file, i64 7, ptr @.func.20, i64 10, i32 81, ptr byval(%"any[]") align 8 %indirectarg25) #5, !dbg !264
  unreachable, !dbg !264

panic38:                                          ; preds = %if.exit35
  store i32 %42, ptr %taddr39, align 4
  %68 = insertvalue %any undef, ptr %taddr39, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %69, ptr %varargslots40, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp41" = insertvalue %"any[]" %70, i64 1, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file, i64 7, ptr @.func.20, i64 10, i32 91, ptr byval(%"any[]") align 8 %indirectarg42) #5, !dbg !274
  unreachable, !dbg !274

panic47:                                          ; preds = %checkok43
  store i32 %48, ptr %taddr48, align 4
  %71 = insertvalue %any undef, ptr %taddr48, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %72, ptr %varargslots49, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp50" = insertvalue %"any[]" %73, i64 1, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file, i64 7, ptr @.func.20, i64 10, i32 92, ptr byval(%"any[]") align 8 %indirectarg51) #5, !dbg !279
  unreachable, !dbg !279

panic54:                                          ; preds = %checkok52
  store i32 %48, ptr %taddr55, align 4
  %74 = insertvalue %any undef, ptr %taddr55, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %75, ptr %varargslots56, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp57" = insertvalue %"any[]" %76, i64 1, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file, i64 7, ptr @.func.20, i64 10, i32 92, ptr byval(%"any[]") align 8 %indirectarg58) #5, !dbg !279
  unreachable, !dbg !279
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.fprintf(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4, ptr byval(%"any[]") align 8 %5) #0 comdat !dbg !282 {
entry:
  %out = alloca %any, align 8
  %format = alloca %"char[]", align 8
  %formatter = alloca %Formatter, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  store i64 %1, ptr %out, align 8
  %ptradd = getelementptr inbounds i8, ptr %out, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %out, !296, !DIExpression(), !297)
  store ptr %3, ptr %format, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %format, !298, !DIExpression(), !299)
    #dbg_declare(ptr %5, !300, !DIExpression(), !301)
    #dbg_declare(ptr %formatter, !302, !DIExpression(), !319)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !319
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %out), !dbg !320
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %5, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %5, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !321
  %not_err = icmp eq i64 %6, 0, !dbg !321
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !321
  br i1 %7, label %after_check, label %assign_optional, !dbg !321

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %reterr, align 8, !dbg !321
  br label %err_retblock, !dbg !321

after_check:                                      ; preds = %entry
  %8 = load i64, ptr %retparam, align 8, !dbg !321
  store i64 %8, ptr %0, align 8, !dbg !321
  ret i64 0, !dbg !321

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !321
  ret i64 %9, !dbg !321
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.fprintfn(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4, ptr byval(%"any[]") align 8 %5) #0 comdat !dbg !322 {
entry:
  %out = alloca %any, align 8
  %format = alloca %"char[]", align 8
  %formatter = alloca %Formatter, align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var6 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %.inlinecache15 = alloca ptr, align 8
  %.cachedtype16 = alloca ptr, align 8
  %error_var23 = alloca i64, align 8
  %.inlinecache25 = alloca ptr, align 8
  %.cachedtype26 = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype26, align 8
  store ptr null, ptr %.cachedtype16, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %1, ptr %out, align 8
  %ptradd = getelementptr inbounds i8, ptr %out, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %out, !323, !DIExpression(), !324)
  store ptr %3, ptr %format, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %format, !325, !DIExpression(), !326)
    #dbg_declare(ptr %5, !327, !DIExpression(), !328)
    #dbg_declare(ptr %formatter, !329, !DIExpression(), !330)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !330
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %out), !dbg !331
    #dbg_declare(ptr %len, !332, !DIExpression(), !333)
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %5, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %5, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !334
  %not_err = icmp eq i64 %6, 0, !dbg !334
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !334
  br i1 %7, label %after_check, label %assign_optional, !dbg !334

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %error_var, align 8, !dbg !334
  br label %guard_block, !dbg !334

after_check:                                      ; preds = %entry
  br label %noerr_block, !dbg !334

guard_block:                                      ; preds = %assign_optional
  %8 = load i64, ptr %error_var, align 8, !dbg !334
  ret i64 %8, !dbg !334

noerr_block:                                      ; preds = %after_check
  %9 = load i64, ptr %retparam, align 8, !dbg !334
  store i64 %9, ptr %len, align 8, !dbg !334
  %ptradd7 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !335
  %10 = load i64, ptr %ptradd7, align 8, !dbg !335
  %11 = inttoptr i64 %10 to ptr, !dbg !335
  %type = load ptr, ptr %.cachedtype, align 8
  %12 = icmp eq ptr %11, %type
  br i1 %12, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %noerr_block
  %ptradd8 = getelementptr inbounds i8, ptr %11, i64 16
  %13 = load ptr, ptr %ptradd8, align 8
  %14 = call ptr @.dyn_search(ptr %13, ptr @"$sel.write_byte")
  store ptr %14, ptr %.inlinecache, align 8
  store ptr %11, ptr %.cachedtype, align 8
  br label %15

cache_hit:                                        ; preds = %noerr_block
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %15

15:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %14, %cache_miss ]
  %16 = icmp eq ptr %fn_phi, null
  br i1 %16, label %missing_function, label %match

missing_function:                                 ; preds = %15
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !336
  call void %17(ptr @.panic_msg.22, i64 47, ptr @.file.23, i64 5, ptr @.func.24, i64 8, i32 162) #5, !dbg !336
  unreachable, !dbg !336

match:                                            ; preds = %15
  %18 = load ptr, ptr %out, align 8, !dbg !336
  %19 = call i64 %fn_phi(ptr %18, i8 zeroext 10), !dbg !336
  %not_err9 = icmp eq i64 %19, 0, !dbg !336
  %20 = call i1 @llvm.expect.i1(i1 %not_err9, i1 true), !dbg !336
  br i1 %20, label %after_check11, label %assign_optional10, !dbg !336

assign_optional10:                                ; preds = %match
  store i64 %19, ptr %error_var6, align 8, !dbg !336
  br label %guard_block12, !dbg !336

after_check11:                                    ; preds = %match
  br label %noerr_block13, !dbg !336

guard_block12:                                    ; preds = %assign_optional10
  %21 = load i64, ptr %error_var6, align 8, !dbg !336
  ret i64 %21, !dbg !336

noerr_block13:                                    ; preds = %after_check11
  %ptradd14 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !337
  %22 = load i64, ptr %ptradd14, align 8, !dbg !337
  %23 = inttoptr i64 %22 to ptr, !dbg !337
  %type17 = load ptr, ptr %.cachedtype16, align 8
  %24 = icmp eq ptr %23, %type17
  br i1 %24, label %cache_hit20, label %cache_miss18

cache_miss18:                                     ; preds = %noerr_block13
  %ptradd19 = getelementptr inbounds i8, ptr %23, i64 16
  %25 = load ptr, ptr %ptradd19, align 8
  %26 = call ptr @.dyn_search(ptr %25, ptr @"$sel.flush")
  store ptr %26, ptr %.inlinecache15, align 8
  store ptr %23, ptr %.cachedtype16, align 8
  br label %27

cache_hit20:                                      ; preds = %noerr_block13
  %cache_hit_fn21 = load ptr, ptr %.inlinecache15, align 8
  br label %27

27:                                               ; preds = %cache_hit20, %cache_miss18
  %fn_phi22 = phi ptr [ %cache_hit_fn21, %cache_hit20 ], [ %26, %cache_miss18 ]
  %i2b = icmp ne ptr %fn_phi22, null
  br i1 %i2b, label %if.then, label %if.exit

if.then:                                          ; preds = %27
  %ptradd24 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !338
  %28 = load i64, ptr %ptradd24, align 8, !dbg !338
  %29 = inttoptr i64 %28 to ptr, !dbg !338
  %type27 = load ptr, ptr %.cachedtype26, align 8
  %30 = icmp eq ptr %29, %type27
  br i1 %30, label %cache_hit30, label %cache_miss28

cache_miss28:                                     ; preds = %if.then
  %ptradd29 = getelementptr inbounds i8, ptr %29, i64 16
  %31 = load ptr, ptr %ptradd29, align 8
  %32 = call ptr @.dyn_search(ptr %31, ptr @"$sel.flush")
  store ptr %32, ptr %.inlinecache25, align 8
  store ptr %29, ptr %.cachedtype26, align 8
  br label %33

cache_hit30:                                      ; preds = %if.then
  %cache_hit_fn31 = load ptr, ptr %.inlinecache25, align 8
  br label %33

33:                                               ; preds = %cache_hit30, %cache_miss28
  %fn_phi32 = phi ptr [ %cache_hit_fn31, %cache_hit30 ], [ %32, %cache_miss28 ]
  %34 = icmp eq ptr %fn_phi32, null
  br i1 %34, label %missing_function33, label %match34

missing_function33:                               ; preds = %33
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !338
  call void %35(ptr @.panic_msg.25, i64 42, ptr @.file.23, i64 5, ptr @.func.24, i64 8, i32 163) #5, !dbg !338
  unreachable, !dbg !338

match34:                                          ; preds = %33
  %36 = load ptr, ptr %out, align 8, !dbg !338
  %37 = call i64 %fn_phi32(ptr %36), !dbg !338
  %not_err35 = icmp eq i64 %37, 0, !dbg !338
  %38 = call i1 @llvm.expect.i1(i1 %not_err35, i1 true), !dbg !338
  br i1 %38, label %after_check37, label %assign_optional36, !dbg !338

assign_optional36:                                ; preds = %match34
  store i64 %37, ptr %error_var23, align 8, !dbg !338
  br label %guard_block38, !dbg !338

after_check37:                                    ; preds = %match34
  br label %noerr_block39, !dbg !338

guard_block38:                                    ; preds = %assign_optional36
  %39 = load i64, ptr %error_var23, align 8, !dbg !338
  ret i64 %39, !dbg !338

noerr_block39:                                    ; preds = %after_check37
  br label %if.exit, !dbg !338

if.exit:                                          ; preds = %noerr_block39, %27
  %40 = load i64, ptr %len, align 8, !dbg !339
  %add = add i64 %40, 1, !dbg !339
  store i64 %add, ptr %0, align 8, !dbg !339
  ret i64 0, !dbg !339
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_putstream_fn(ptr %0, i8 zeroext %1) #0 !dbg !340 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  %stream = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !341, !DIExpression(), !342)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !343, !DIExpression(), !344)
    #dbg_declare(ptr %stream, !345, !DIExpression(), !347)
  %2 = load ptr, ptr %data, align 8, !dbg !348
  store ptr %2, ptr %stream, align 8, !dbg !348
  %3 = load ptr, ptr %stream, align 8, !dbg !349
  %checknull = icmp eq ptr %3, null, !dbg !349
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !349
  br i1 %4, label %panic, label %checkok, !dbg !349

checkok:                                          ; preds = %entry
  %5 = ptrtoint ptr %3 to i64, !dbg !349
  %6 = urem i64 %5, 8, !dbg !349
  %7 = icmp ne i64 %6, 0, !dbg !349
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !349
  br i1 %8, label %panic1, label %checkok3, !dbg !349

checkok3:                                         ; preds = %checkok
  %ptradd4 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !350
  %9 = load i64, ptr %ptradd4, align 8, !dbg !350
  %10 = inttoptr i64 %9 to ptr, !dbg !350
  %type = load ptr, ptr %.cachedtype, align 8
  %11 = icmp eq ptr %10, %type
  br i1 %11, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %checkok3
  %ptradd5 = getelementptr inbounds i8, ptr %10, i64 16
  %12 = load ptr, ptr %ptradd5, align 8
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.write_byte")
  store ptr %13, ptr %.inlinecache, align 8
  store ptr %10, ptr %.cachedtype, align 8
  br label %14

cache_hit:                                        ; preds = %checkok3
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %14

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ]
  %15 = icmp eq ptr %fn_phi, null
  br i1 %15, label %missing_function, label %match

missing_function:                                 ; preds = %14
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !351
  call void %16(ptr @.panic_msg.22, i64 47, ptr @.file.23, i64 5, ptr @.func.27, i64 16, i32 223) #5, !dbg !351
  unreachable, !dbg !351

match:                                            ; preds = %14
  %17 = load ptr, ptr %3, align 8, !dbg !351
  %18 = load i8, ptr %c, align 1, !dbg !351
  %19 = call i64 %fn_phi(ptr %17, i8 zeroext %18), !dbg !351
  %not_err = icmp eq i64 %19, 0, !dbg !351
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !351
  br i1 %20, label %after_check, label %assign_optional, !dbg !351

assign_optional:                                  ; preds = %match
  store i64 %19, ptr %reterr, align 8, !dbg !351
  br label %err_retblock, !dbg !351

after_check:                                      ; preds = %match
  ret i64 0, !dbg !351

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !351
  ret i64 %21, !dbg !351

panic:                                            ; preds = %entry
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !349
  call void %22(ptr @.panic_msg.26, i64 47, ptr @.file.23, i64 5, ptr @.func.27, i64 16, i32 223) #5, !dbg !349
  unreachable, !dbg !349

panic1:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr2, align 8
  %25 = insertvalue %any undef, ptr %taddr2, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %24, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.23, i64 5, ptr @.func.27, i64 16, i32 223, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !349
  unreachable, !dbg !349
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_putchar_fn(ptr %0, i8 zeroext %1) #0 !dbg !352 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !353, !DIExpression(), !354)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !355, !DIExpression(), !356)
  %2 = load i8, ptr %c, align 1, !dbg !357
  %zext = zext i8 %2 to i32, !dbg !357
  %3 = call i32 @putchar(i32 %zext), !dbg !358
  ret i64 0, !dbg !358
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.printf(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !359 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  store ptr %1, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %format, !362, !DIExpression(), !363)
  store ptr %3, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !364, !DIExpression(), !365)
    #dbg_declare(ptr %formatter, !366, !DIExpression(), !367)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !367
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putchar_fn, ptr null), !dbg !368
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %5 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !369
  %not_err = icmp eq i64 %5, 0, !dbg !369
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !369
  br i1 %6, label %after_check, label %assign_optional, !dbg !369

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %reterr, align 8, !dbg !369
  br label %err_retblock, !dbg !369

after_check:                                      ; preds = %entry
  %7 = load i64, ptr %retparam, align 8, !dbg !369
  store i64 %7, ptr %0, align 8, !dbg !369
  ret i64 0, !dbg !369

err_retblock:                                     ; preds = %assign_optional
  %8 = load i64, ptr %reterr, align 8, !dbg !369
  ret i64 %8, !dbg !369
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.printfn(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !370 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var = alloca i64, align 8
  %error_var9 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %format, !371, !DIExpression(), !372)
  store ptr %3, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !373, !DIExpression(), !374)
    #dbg_declare(ptr %formatter, !375, !DIExpression(), !376)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !376
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putchar_fn, ptr null), !dbg !377
    #dbg_declare(ptr %len, !378, !DIExpression(), !379)
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %5 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !380
  %not_err = icmp eq i64 %5, 0, !dbg !380
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !380
  br i1 %6, label %after_check, label %assign_optional, !dbg !380

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %len.f, align 8, !dbg !380
  br label %after_assign, !dbg !380

after_check:                                      ; preds = %entry
  %7 = load i64, ptr %retparam, align 8, !dbg !380
  store i64 %7, ptr %len, align 8, !dbg !380
  store i64 0, ptr %len.f, align 8, !dbg !380
  br label %after_assign, !dbg !380

after_assign:                                     ; preds = %after_check, %assign_optional
  %8 = call i64 @std.io.out_putchar_fn(ptr null, i8 zeroext 10), !dbg !381
  %not_err6 = icmp eq i64 %8, 0, !dbg !381
  %9 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true), !dbg !381
  br i1 %9, label %after_check8, label %assign_optional7, !dbg !381

assign_optional7:                                 ; preds = %after_assign
  store i64 %8, ptr %error_var, align 8, !dbg !381
  br label %guard_block, !dbg !381

after_check8:                                     ; preds = %after_assign
  br label %noerr_block, !dbg !381

guard_block:                                      ; preds = %assign_optional7
  %10 = load i64, ptr %error_var, align 8, !dbg !381
  ret i64 %10, !dbg !381

noerr_block:                                      ; preds = %after_check8
  %11 = call ptr @std.io.stdout(), !dbg !382
  %12 = load ptr, ptr %11, align 8, !dbg !383
  %neq = icmp ne ptr %12, null, !dbg !382
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !382

assert_fail:                                      ; preds = %noerr_block
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !382
  call void %13(ptr @.panic_msg.28, i64 66, ptr @.file.23, i64 5, ptr @.func.29, i64 7, i32 272) #5, !dbg !382
  unreachable, !dbg !382

assert_ok:                                        ; preds = %noerr_block
  %14 = call i64 @std.io.File.flush(ptr %11), !dbg !382
  %not_err10 = icmp eq i64 %14, 0, !dbg !382
  %15 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !382
  br i1 %15, label %after_check12, label %assign_optional11, !dbg !382

assign_optional11:                                ; preds = %assert_ok
  store i64 %14, ptr %error_var9, align 8, !dbg !382
  br label %guard_block13, !dbg !382

after_check12:                                    ; preds = %assert_ok
  br label %noerr_block14, !dbg !382

guard_block13:                                    ; preds = %assign_optional11
  %16 = load i64, ptr %error_var9, align 8, !dbg !382
  ret i64 %16, !dbg !382

noerr_block14:                                    ; preds = %after_check12
  %optval = load i64, ptr %len.f, align 8, !dbg !384
  %not_err15 = icmp eq i64 %optval, 0, !dbg !384
  %17 = call i1 @llvm.expect.i1(i1 %not_err15, i1 true), !dbg !384
  br i1 %17, label %after_check17, label %assign_optional16, !dbg !384

assign_optional16:                                ; preds = %noerr_block14
  store i64 %optval, ptr %reterr, align 8, !dbg !384
  br label %err_retblock, !dbg !384

after_check17:                                    ; preds = %noerr_block14
  %18 = load i64, ptr %len, align 8, !dbg !384
  %add = add i64 %18, 1, !dbg !384
  store i64 %add, ptr %0, align 8, !dbg !384
  ret i64 0, !dbg !384

err_retblock:                                     ; preds = %assign_optional16
  %19 = load i64, ptr %reterr, align 8, !dbg !384
  ret i64 %19, !dbg !384
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.eprintf(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !385 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %stream = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  store ptr %1, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %format, !386, !DIExpression(), !387)
  store ptr %3, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !388, !DIExpression(), !389)
    #dbg_declare(ptr %formatter, !390, !DIExpression(), !391)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !391
    #dbg_declare(ptr %stream, !392, !DIExpression(), !393)
  %5 = call ptr @std.io.stderr(), !dbg !394
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !394
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.std.io.File" to i64), 1, !dbg !394
  store %any %7, ptr %stream, align 8, !dbg !394
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %stream), !dbg !395
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %8 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !396
  %not_err = icmp eq i64 %8, 0, !dbg !396
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !396
  br i1 %9, label %after_check, label %assign_optional, !dbg !396

assign_optional:                                  ; preds = %entry
  store i64 %8, ptr %reterr, align 8, !dbg !396
  br label %err_retblock, !dbg !396

after_check:                                      ; preds = %entry
  %10 = load i64, ptr %retparam, align 8, !dbg !396
  store i64 %10, ptr %0, align 8, !dbg !396
  ret i64 0, !dbg !396

err_retblock:                                     ; preds = %assign_optional
  %11 = load i64, ptr %reterr, align 8, !dbg !396
  ret i64 %11, !dbg !396
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.eprintfn(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !397 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %stream = alloca %any, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var = alloca i64, align 8
  %error_var9 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %format, !398, !DIExpression(), !399)
  store ptr %3, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !400, !DIExpression(), !401)
    #dbg_declare(ptr %formatter, !402, !DIExpression(), !403)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !403
    #dbg_declare(ptr %stream, !404, !DIExpression(), !405)
  %5 = call ptr @std.io.stderr(), !dbg !406
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !406
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.std.io.File" to i64), 1, !dbg !406
  store %any %7, ptr %stream, align 8, !dbg !406
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %stream), !dbg !407
    #dbg_declare(ptr %len, !408, !DIExpression(), !409)
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %8 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !410
  %not_err = icmp eq i64 %8, 0, !dbg !410
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !410
  br i1 %9, label %after_check, label %assign_optional, !dbg !410

assign_optional:                                  ; preds = %entry
  store i64 %8, ptr %len.f, align 8, !dbg !410
  br label %after_assign, !dbg !410

after_check:                                      ; preds = %entry
  %10 = load i64, ptr %retparam, align 8, !dbg !410
  store i64 %10, ptr %len, align 8, !dbg !410
  store i64 0, ptr %len.f, align 8, !dbg !410
  br label %after_assign, !dbg !410

after_assign:                                     ; preds = %after_check, %assign_optional
  %11 = call ptr @std.io.stderr(), !dbg !411
  %12 = load ptr, ptr %11, align 8, !dbg !412
  %neq = icmp ne ptr %12, null, !dbg !411
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !411

assert_fail:                                      ; preds = %after_assign
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !411
  call void %13(ptr @.panic_msg.30, i64 38, ptr @.file.23, i64 5, ptr @.func.31, i64 8, i32 305) #5, !dbg !411
  unreachable, !dbg !411

assert_ok:                                        ; preds = %after_assign
  %14 = call i64 @std.io.File.write_byte(ptr %11, i8 zeroext 10), !dbg !411
  %not_err6 = icmp eq i64 %14, 0, !dbg !411
  %15 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true), !dbg !411
  br i1 %15, label %after_check8, label %assign_optional7, !dbg !411

assign_optional7:                                 ; preds = %assert_ok
  store i64 %14, ptr %error_var, align 8, !dbg !411
  br label %guard_block, !dbg !411

after_check8:                                     ; preds = %assert_ok
  br label %noerr_block, !dbg !411

guard_block:                                      ; preds = %assign_optional7
  %16 = load i64, ptr %error_var, align 8, !dbg !411
  ret i64 %16, !dbg !411

noerr_block:                                      ; preds = %after_check8
  %17 = call ptr @std.io.stderr(), !dbg !413
  %18 = load ptr, ptr %17, align 8, !dbg !414
  %neq10 = icmp ne ptr %18, null, !dbg !413
  br i1 %neq10, label %assert_ok12, label %assert_fail11, !dbg !413

assert_fail11:                                    ; preds = %noerr_block
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !413
  call void %19(ptr @.panic_msg.28, i64 66, ptr @.file.23, i64 5, ptr @.func.31, i64 8, i32 306) #5, !dbg !413
  unreachable, !dbg !413

assert_ok12:                                      ; preds = %noerr_block
  %20 = call i64 @std.io.File.flush(ptr %17), !dbg !413
  %not_err13 = icmp eq i64 %20, 0, !dbg !413
  %21 = call i1 @llvm.expect.i1(i1 %not_err13, i1 true), !dbg !413
  br i1 %21, label %after_check15, label %assign_optional14, !dbg !413

assign_optional14:                                ; preds = %assert_ok12
  store i64 %20, ptr %error_var9, align 8, !dbg !413
  br label %guard_block16, !dbg !413

after_check15:                                    ; preds = %assert_ok12
  br label %noerr_block17, !dbg !413

guard_block16:                                    ; preds = %assign_optional14
  %22 = load i64, ptr %error_var9, align 8, !dbg !413
  ret i64 %22, !dbg !413

noerr_block17:                                    ; preds = %after_check15
  %optval = load i64, ptr %len.f, align 8, !dbg !415
  %not_err18 = icmp eq i64 %optval, 0, !dbg !415
  %23 = call i1 @llvm.expect.i1(i1 %not_err18, i1 true), !dbg !415
  br i1 %23, label %after_check20, label %assign_optional19, !dbg !415

assign_optional19:                                ; preds = %noerr_block17
  store i64 %optval, ptr %reterr, align 8, !dbg !415
  br label %err_retblock, !dbg !415

after_check20:                                    ; preds = %noerr_block17
  %24 = load i64, ptr %len, align 8, !dbg !415
  %add = add i64 %24, 1, !dbg !415
  store i64 %add, ptr %0, align 8, !dbg !415
  ret i64 0, !dbg !415

err_retblock:                                     ; preds = %assign_optional19
  %25 = load i64, ptr %reterr, align 8, !dbg !415
  ret i64 %25, !dbg !415
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.bprintf(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4, ptr byval(%"any[]") align 8 %5) #0 comdat !dbg !416 {
entry:
  %buffer = alloca %"char[]", align 8
  %format = alloca %"char[]", align 8
  %formatter = alloca %Formatter, align 8
  %data = alloca %BufferData, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [1 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  store ptr %1, ptr %buffer, align 8
  %ptradd = getelementptr inbounds i8, ptr %buffer, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %buffer, !420, !DIExpression(), !421)
  store ptr %3, ptr %format, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %format, !422, !DIExpression(), !423)
    #dbg_declare(ptr %5, !424, !DIExpression(), !425)
    #dbg_declare(ptr %formatter, !426, !DIExpression(), !427)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !427
    #dbg_declare(ptr %data, !428, !DIExpression(), !433)
  call void @llvm.memset.p0.i64(ptr align 8 %data, i8 0, i64 24, i1 false), !dbg !433
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %data, ptr align 8 %buffer, i32 16, i1 false), !dbg !434
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_buffer_fn, ptr %data), !dbg !435
    #dbg_declare(ptr %size, !436, !DIExpression(), !437)
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %5, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %5, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !438
  %not_err = icmp eq i64 %6, 0, !dbg !438
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !438
  br i1 %7, label %after_check, label %assign_optional, !dbg !438

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %error_var, align 8, !dbg !438
  br label %guard_block, !dbg !438

after_check:                                      ; preds = %entry
  br label %noerr_block, !dbg !438

guard_block:                                      ; preds = %assign_optional
  %8 = load i64, ptr %error_var, align 8, !dbg !438
  ret i64 %8, !dbg !438

noerr_block:                                      ; preds = %after_check
  %9 = load i64, ptr %retparam, align 8, !dbg !438
  store i64 %9, ptr %size, align 8, !dbg !438
  %10 = load %"char[]", ptr %buffer, align 8, !dbg !439
  %11 = extractvalue %"char[]" %10, 0, !dbg !439
  %12 = extractvalue %"char[]" %10, 1, !dbg !440
  %gt = icmp ugt i64 0, %12, !dbg !440
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !440
  br i1 %13, label %panic, label %checkok, !dbg !440

checkok:                                          ; preds = %noerr_block
  %ptradd8 = getelementptr inbounds i8, ptr %data, i64 16, !dbg !441
  %14 = load i64, ptr %ptradd8, align 8, !dbg !441
  %add = add i64 0, %14, !dbg !441
  %gt9 = icmp ugt i64 0, %add, !dbg !441
  %sub = sub i64 %add, 0, !dbg !441
  %15 = call i1 @llvm.expect.i1(i1 %gt9, i1 false), !dbg !441
  br i1 %15, label %panic10, label %checkok15, !dbg !441

checkok15:                                        ; preds = %checkok
  %lt = icmp ult i64 %12, %add, !dbg !439
  %sub16 = sub i64 %add, 1, !dbg !439
  %16 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !439
  br i1 %16, label %panic17, label %checkok24, !dbg !439

checkok24:                                        ; preds = %checkok15
  %size25 = sub i64 %add, 0, !dbg !439
  %17 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !439
  %18 = insertvalue %"char[]" %17, i64 %size25, 1, !dbg !439
  store %"char[]" %18, ptr %0, align 8, !dbg !439
  ret i64 0, !dbg !439

panic:                                            ; preds = %noerr_block
  store i64 %12, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %21 = insertvalue %any undef, ptr %taddr6, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %20, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd7, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.23, i64 5, ptr @.func.33, i64 7, i32 324, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !439
  unreachable, !dbg !439

panic10:                                          ; preds = %checkok
  store i64 %sub, ptr %taddr11, align 8
  %24 = insertvalue %any undef, ptr %taddr11, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %25, ptr %varargslots12, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp13" = insertvalue %"any[]" %26, i64 1, 1
  store %"any[]" %"$$temp13", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.23, i64 5, ptr @.func.33, i64 7, i32 324, ptr byval(%"any[]") align 8 %indirectarg14) #5, !dbg !439
  unreachable, !dbg !439

panic17:                                          ; preds = %checkok15
  store i64 %sub16, ptr %taddr18, align 8
  %27 = insertvalue %any undef, ptr %taddr18, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr19, align 8
  %29 = insertvalue %any undef, ptr %taddr19, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %30, ptr %ptradd21, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.23, i64 5, ptr @.func.33, i64 7, i32 324, ptr byval(%"any[]") align 8 %indirectarg23) #5, !dbg !439
  unreachable, !dbg !439
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_buffer_fn(ptr %0, i8 zeroext %1) #0 !dbg !442 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  %buffer_data = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !443, !DIExpression(), !444)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !445, !DIExpression(), !446)
    #dbg_declare(ptr %buffer_data, !447, !DIExpression(), !449)
  %2 = load ptr, ptr %data, align 8, !dbg !450
  store ptr %2, ptr %buffer_data, align 8, !dbg !450
  %3 = load ptr, ptr %buffer_data, align 8, !dbg !451
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !451
  %4 = load i64, ptr %ptradd, align 8, !dbg !451
  %5 = load ptr, ptr %buffer_data, align 8, !dbg !452
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !452
  %6 = load i64, ptr %ptradd1, align 8, !dbg !452
  %ge = icmp uge i64 %4, %6, !dbg !451
  br i1 %ge, label %if.then, label %if.exit, !dbg !451

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @std.io.BUFFER_EXCEEDED to i64), !dbg !453

if.exit:                                          ; preds = %entry
  %7 = load ptr, ptr %buffer_data, align 8, !dbg !454
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !454
  %8 = load i64, ptr %ptradd2, align 8, !dbg !454
  %9 = load ptr, ptr %7, align 8, !dbg !454
  %10 = load ptr, ptr %buffer_data, align 8, !dbg !455
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !455
  %11 = load i64, ptr %ptradd3, align 8, !dbg !455
  %add = add i64 %11, 1, !dbg !455
  store i64 %add, ptr %ptradd3, align 8, !dbg !455
  %ge4 = icmp uge i64 %11, %8, !dbg !455
  %12 = call i1 @llvm.expect.i1(i1 %ge4, i1 false), !dbg !455
  br i1 %12, label %panic, label %checkok, !dbg !455

checkok:                                          ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 %11, !dbg !455
  %13 = load i8, ptr %c, align 1, !dbg !456
  store i8 %13, ptr %ptradd7, align 1, !dbg !456
  ret i64 0, !dbg !456

panic:                                            ; preds = %if.exit
  store i64 %8, ptr %taddr, align 8
  %14 = insertvalue %any undef, ptr %taddr, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr5, align 8
  %16 = insertvalue %any undef, ptr %taddr5, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %15, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %17, ptr %ptradd6, align 16
  %18 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %18, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.23, i64 5, ptr @.func.35, i64 13, i32 332, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !455
  unreachable, !dbg !455
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.putchar(i8 zeroext %0) #0 comdat !dbg !457 {
entry:
  %c = alloca i8, align 1
  store i8 %0, ptr %c, align 1
    #dbg_declare(ptr %c, !460, !DIExpression(), !461)
  %1 = load i8, ptr %c, align 1, !dbg !462
  %zext = zext i8 %1 to i32, !dbg !462
  %2 = call i32 @putchar(i32 %zext), !dbg !463
  ret void, !dbg !463
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.stdout() #0 comdat !dbg !464 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stdout.file, align 8, !dbg !468
  %i2nb = icmp eq ptr %0, null, !dbg !468
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !468

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @stdout, align 8, !dbg !469
  %2 = call ptr @std.io.file.from_handle(ptr %1), !dbg !473
  store ptr %2, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stdout.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stdout.file, !dbg !474
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.stderr() #0 comdat !dbg !475 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stderr.file, align 8, !dbg !476
  %i2nb = icmp eq ptr %0, null, !dbg !476
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !476

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @stderr, align 8, !dbg !477
  %2 = call ptr @std.io.file.from_handle(ptr %1), !dbg !480
  store ptr %2, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stderr.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stderr.file, !dbg !481
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.stdin() #0 comdat !dbg !482 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stdin.file, align 8, !dbg !483
  %i2nb = icmp eq ptr %0, null, !dbg !483
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !483

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @stdin, align 8, !dbg !484
  %2 = call ptr @std.io.file.from_handle(ptr %1), !dbg !487
  store ptr %2, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stdin.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stdin.file, !dbg !488
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.available(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !489 {
entry:
  %s = alloca %any, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache4 = alloca ptr, align 8
  %.cachedtype5 = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %.inlinecache13 = alloca ptr, align 8
  %.cachedtype14 = alloca ptr, align 8
  %curr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache24 = alloca ptr, align 8
  %.cachedtype25 = alloca ptr, align 8
  %retparam34 = alloca i64, align 8
  %len = alloca i64, align 8
  %error_var38 = alloca i64, align 8
  %.inlinecache40 = alloca ptr, align 8
  %.cachedtype41 = alloca ptr, align 8
  %retparam50 = alloca i64, align 8
  %error_var56 = alloca i64, align 8
  %.inlinecache58 = alloca ptr, align 8
  %.cachedtype59 = alloca ptr, align 8
  %retparam68 = alloca i64, align 8
  %reterr74 = alloca i64, align 8
  %reterr76 = alloca i64, align 8
  store ptr null, ptr %.cachedtype59, align 8
  store ptr null, ptr %.cachedtype41, align 8
  store ptr null, ptr %.cachedtype25, align 8
  store ptr null, ptr %.cachedtype14, align 8
  store ptr null, ptr %.cachedtype5, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !492, !DIExpression(), !493)
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !494
  %3 = load i64, ptr %ptradd1, align 8, !dbg !494
  %4 = inttoptr i64 %3 to ptr, !dbg !494
  %type = load ptr, ptr %.cachedtype, align 8
  %5 = icmp eq ptr %4, %type
  br i1 %5, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %4, i64 16
  %6 = load ptr, ptr %ptradd2, align 8
  %7 = call ptr @.dyn_search(ptr %6, ptr @"$sel.available")
  store ptr %7, ptr %.inlinecache, align 8
  store ptr %4, ptr %.cachedtype, align 8
  br label %8

cache_hit:                                        ; preds = %entry
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %8

8:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %7, %cache_miss ]
  %i2b = icmp ne ptr %fn_phi, null
  br i1 %i2b, label %if.then, label %if.exit

if.then:                                          ; preds = %8
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !495
  %9 = load i64, ptr %ptradd3, align 8, !dbg !495
  %10 = inttoptr i64 %9 to ptr, !dbg !495
  %type6 = load ptr, ptr %.cachedtype5, align 8
  %11 = icmp eq ptr %10, %type6
  br i1 %11, label %cache_hit9, label %cache_miss7

cache_miss7:                                      ; preds = %if.then
  %ptradd8 = getelementptr inbounds i8, ptr %10, i64 16
  %12 = load ptr, ptr %ptradd8, align 8
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.available")
  store ptr %13, ptr %.inlinecache4, align 8
  store ptr %10, ptr %.cachedtype5, align 8
  br label %14

cache_hit9:                                       ; preds = %if.then
  %cache_hit_fn10 = load ptr, ptr %.inlinecache4, align 8
  br label %14

14:                                               ; preds = %cache_hit9, %cache_miss7
  %fn_phi11 = phi ptr [ %cache_hit_fn10, %cache_hit9 ], [ %13, %cache_miss7 ]
  %15 = icmp eq ptr %fn_phi11, null
  br i1 %15, label %missing_function, label %match

missing_function:                                 ; preds = %14
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !495
  call void %16(ptr @.panic_msg.36, i64 46, ptr @.file.19, i64 9, ptr @.func.37, i64 9, i32 29) #5, !dbg !495
  unreachable, !dbg !495

match:                                            ; preds = %14
  %17 = load ptr, ptr %s, align 8
  %18 = call i64 %fn_phi11(ptr %retparam, ptr %17), !dbg !495
  %not_err = icmp eq i64 %18, 0, !dbg !495
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !495
  br i1 %19, label %after_check, label %assign_optional, !dbg !495

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %reterr, align 8, !dbg !495
  br label %err_retblock, !dbg !495

after_check:                                      ; preds = %match
  %20 = load i64, ptr %retparam, align 8, !dbg !495
  store i64 %20, ptr %0, align 8, !dbg !495
  ret i64 0, !dbg !495

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !495
  ret i64 %21, !dbg !495

if.exit:                                          ; preds = %8
  %ptradd12 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !496
  %22 = load i64, ptr %ptradd12, align 8, !dbg !496
  %23 = inttoptr i64 %22 to ptr, !dbg !496
  %type15 = load ptr, ptr %.cachedtype14, align 8
  %24 = icmp eq ptr %23, %type15
  br i1 %24, label %cache_hit18, label %cache_miss16

cache_miss16:                                     ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %23, i64 16
  %25 = load ptr, ptr %ptradd17, align 8
  %26 = call ptr @.dyn_search(ptr %25, ptr @"$sel.seek")
  store ptr %26, ptr %.inlinecache13, align 8
  store ptr %23, ptr %.cachedtype14, align 8
  br label %27

cache_hit18:                                      ; preds = %if.exit
  %cache_hit_fn19 = load ptr, ptr %.inlinecache13, align 8
  br label %27

27:                                               ; preds = %cache_hit18, %cache_miss16
  %fn_phi20 = phi ptr [ %cache_hit_fn19, %cache_hit18 ], [ %26, %cache_miss16 ]
  %i2b21 = icmp ne ptr %fn_phi20, null
  br i1 %i2b21, label %if.then22, label %if.exit75

if.then22:                                        ; preds = %27
    #dbg_declare(ptr %curr, !497, !DIExpression(), !499)
  %ptradd23 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !500
  %28 = load i64, ptr %ptradd23, align 8, !dbg !500
  %29 = inttoptr i64 %28 to ptr, !dbg !500
  %type26 = load ptr, ptr %.cachedtype25, align 8
  %30 = icmp eq ptr %29, %type26
  br i1 %30, label %cache_hit29, label %cache_miss27

cache_miss27:                                     ; preds = %if.then22
  %ptradd28 = getelementptr inbounds i8, ptr %29, i64 16
  %31 = load ptr, ptr %ptradd28, align 8
  %32 = call ptr @.dyn_search(ptr %31, ptr @"$sel.seek")
  store ptr %32, ptr %.inlinecache24, align 8
  store ptr %29, ptr %.cachedtype25, align 8
  br label %33

cache_hit29:                                      ; preds = %if.then22
  %cache_hit_fn30 = load ptr, ptr %.inlinecache24, align 8
  br label %33

33:                                               ; preds = %cache_hit29, %cache_miss27
  %fn_phi31 = phi ptr [ %cache_hit_fn30, %cache_hit29 ], [ %32, %cache_miss27 ]
  %34 = icmp eq ptr %fn_phi31, null
  br i1 %34, label %missing_function32, label %match33

missing_function32:                               ; preds = %33
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !501
  call void %35(ptr @.panic_msg.38, i64 41, ptr @.file.19, i64 9, ptr @.func.37, i64 9, i32 32) #5, !dbg !501
  unreachable, !dbg !501

match33:                                          ; preds = %33
  %36 = load ptr, ptr %s, align 8
  %37 = call i64 %fn_phi31(ptr %retparam34, ptr %36, i64 0, i32 1), !dbg !501
  %not_err35 = icmp eq i64 %37, 0, !dbg !501
  %38 = call i1 @llvm.expect.i1(i1 %not_err35, i1 true), !dbg !501
  br i1 %38, label %after_check37, label %assign_optional36, !dbg !501

assign_optional36:                                ; preds = %match33
  store i64 %37, ptr %error_var, align 8, !dbg !501
  br label %guard_block, !dbg !501

after_check37:                                    ; preds = %match33
  br label %noerr_block, !dbg !501

guard_block:                                      ; preds = %assign_optional36
  %39 = load i64, ptr %error_var, align 8, !dbg !501
  ret i64 %39, !dbg !501

noerr_block:                                      ; preds = %after_check37
  %40 = load i64, ptr %retparam34, align 8, !dbg !501
  store i64 %40, ptr %curr, align 8, !dbg !501
    #dbg_declare(ptr %len, !502, !DIExpression(), !503)
  %ptradd39 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !504
  %41 = load i64, ptr %ptradd39, align 8, !dbg !504
  %42 = inttoptr i64 %41 to ptr, !dbg !504
  %type42 = load ptr, ptr %.cachedtype41, align 8
  %43 = icmp eq ptr %42, %type42
  br i1 %43, label %cache_hit45, label %cache_miss43

cache_miss43:                                     ; preds = %noerr_block
  %ptradd44 = getelementptr inbounds i8, ptr %42, i64 16
  %44 = load ptr, ptr %ptradd44, align 8
  %45 = call ptr @.dyn_search(ptr %44, ptr @"$sel.seek")
  store ptr %45, ptr %.inlinecache40, align 8
  store ptr %42, ptr %.cachedtype41, align 8
  br label %46

cache_hit45:                                      ; preds = %noerr_block
  %cache_hit_fn46 = load ptr, ptr %.inlinecache40, align 8
  br label %46

46:                                               ; preds = %cache_hit45, %cache_miss43
  %fn_phi47 = phi ptr [ %cache_hit_fn46, %cache_hit45 ], [ %45, %cache_miss43 ]
  %47 = icmp eq ptr %fn_phi47, null
  br i1 %47, label %missing_function48, label %match49

missing_function48:                               ; preds = %46
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !505
  call void %48(ptr @.panic_msg.38, i64 41, ptr @.file.19, i64 9, ptr @.func.37, i64 9, i32 33) #5, !dbg !505
  unreachable, !dbg !505

match49:                                          ; preds = %46
  %49 = load ptr, ptr %s, align 8
  %50 = call i64 %fn_phi47(ptr %retparam50, ptr %49, i64 0, i32 2), !dbg !505
  %not_err51 = icmp eq i64 %50, 0, !dbg !505
  %51 = call i1 @llvm.expect.i1(i1 %not_err51, i1 true), !dbg !505
  br i1 %51, label %after_check53, label %assign_optional52, !dbg !505

assign_optional52:                                ; preds = %match49
  store i64 %50, ptr %error_var38, align 8, !dbg !505
  br label %guard_block54, !dbg !505

after_check53:                                    ; preds = %match49
  br label %noerr_block55, !dbg !505

guard_block54:                                    ; preds = %assign_optional52
  %52 = load i64, ptr %error_var38, align 8, !dbg !505
  ret i64 %52, !dbg !505

noerr_block55:                                    ; preds = %after_check53
  %53 = load i64, ptr %retparam50, align 8, !dbg !505
  store i64 %53, ptr %len, align 8, !dbg !505
  %54 = load i64, ptr %curr, align 8, !dbg !506
  %ptradd57 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !507
  %55 = load i64, ptr %ptradd57, align 8, !dbg !507
  %56 = inttoptr i64 %55 to ptr, !dbg !507
  %type60 = load ptr, ptr %.cachedtype59, align 8
  %57 = icmp eq ptr %56, %type60
  br i1 %57, label %cache_hit63, label %cache_miss61

cache_miss61:                                     ; preds = %noerr_block55
  %ptradd62 = getelementptr inbounds i8, ptr %56, i64 16
  %58 = load ptr, ptr %ptradd62, align 8
  %59 = call ptr @.dyn_search(ptr %58, ptr @"$sel.seek")
  store ptr %59, ptr %.inlinecache58, align 8
  store ptr %56, ptr %.cachedtype59, align 8
  br label %60

cache_hit63:                                      ; preds = %noerr_block55
  %cache_hit_fn64 = load ptr, ptr %.inlinecache58, align 8
  br label %60

60:                                               ; preds = %cache_hit63, %cache_miss61
  %fn_phi65 = phi ptr [ %cache_hit_fn64, %cache_hit63 ], [ %59, %cache_miss61 ]
  %61 = icmp eq ptr %fn_phi65, null
  br i1 %61, label %missing_function66, label %match67

missing_function66:                               ; preds = %60
  %62 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !508
  call void %62(ptr @.panic_msg.38, i64 41, ptr @.file.19, i64 9, ptr @.func.37, i64 9, i32 34) #5, !dbg !508
  unreachable, !dbg !508

match67:                                          ; preds = %60
  %63 = load ptr, ptr %s, align 8
  %64 = call i64 %fn_phi65(ptr %retparam68, ptr %63, i64 %54, i32 0), !dbg !508
  %not_err69 = icmp eq i64 %64, 0, !dbg !508
  %65 = call i1 @llvm.expect.i1(i1 %not_err69, i1 true), !dbg !508
  br i1 %65, label %after_check71, label %assign_optional70, !dbg !508

assign_optional70:                                ; preds = %match67
  store i64 %64, ptr %error_var56, align 8, !dbg !508
  br label %guard_block72, !dbg !508

after_check71:                                    ; preds = %match67
  br label %noerr_block73, !dbg !508

guard_block72:                                    ; preds = %assign_optional70
  %66 = load i64, ptr %error_var56, align 8, !dbg !508
  ret i64 %66, !dbg !508

noerr_block73:                                    ; preds = %after_check71
  %67 = load i64, ptr %len, align 8, !dbg !509
  %68 = load i64, ptr %curr, align 8, !dbg !510
  %sub = sub i64 %67, %68, !dbg !509
  store i64 %sub, ptr %0, align 8, !dbg !509
  ret i64 0, !dbg !509

if.exit75:                                        ; preds = %27
  store i64 0, ptr %0, align 8, !dbg !511
  ret i64 0, !dbg !511
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.copy_to(ptr %0, i64 %1, ptr %2, i64 %3, ptr %4, ptr byval(%"char[]") align 8 %5) #0 comdat !dbg !512 {
entry:
  %in = alloca %any, align 8
  %dst = alloca %any, align 8
  %reterr = alloca i64, align 8
  %in3 = alloca %any, align 8
  %dst4 = alloca %any, align 8
  %buffer = alloca %"char[]", align 8
  %blockret = alloca i64, align 8
  %total_copied = alloca i64, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %err = alloca i64, align 8
  %written = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [1 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %.inlinecache36 = alloca ptr, align 8
  %.cachedtype37 = alloca ptr, align 8
  %retparam46 = alloca i64, align 8
  %.inlinecache55 = alloca ptr, align 8
  %.cachedtype56 = alloca ptr, align 8
  %reterr65 = alloca i64, align 8
  %.inlinecache67 = alloca ptr, align 8
  %.cachedtype68 = alloca ptr, align 8
  %retparam77 = alloca i64, align 8
  %.inlinecache87 = alloca ptr, align 8
  %.cachedtype88 = alloca ptr, align 8
  %reterr97 = alloca i64, align 8
  %.inlinecache99 = alloca ptr, align 8
  %.cachedtype100 = alloca ptr, align 8
  %retparam109 = alloca i64, align 8
  %reterr118 = alloca i64, align 8
  %in119 = alloca %any, align 8
  %dst120 = alloca %any, align 8
  %literal = alloca [4096 x i8], align 16
  %buffer121 = alloca %"char[]", align 8
  %blockret122 = alloca i64, align 8
  %total_copied123 = alloca i64, align 8
  %len125 = alloca i64, align 8
  %len.f126 = alloca i64, align 8
  %.inlinecache128 = alloca ptr, align 8
  %.cachedtype129 = alloca ptr, align 8
  %retparam138 = alloca i64, align 8
  %err146 = alloca i64, align 8
  %written162 = alloca i64, align 8
  %error_var163 = alloca i64, align 8
  %taddr166 = alloca i64, align 8
  %taddr167 = alloca i64, align 8
  %varargslots168 = alloca [2 x %any], align 16
  %indirectarg171 = alloca %"any[]", align 8
  %taddr177 = alloca i64, align 8
  %varargslots178 = alloca [1 x %any], align 16
  %indirectarg180 = alloca %"any[]", align 8
  %taddr185 = alloca i64, align 8
  %taddr186 = alloca i64, align 8
  %varargslots187 = alloca [2 x %any], align 16
  %indirectarg190 = alloca %"any[]", align 8
  %.inlinecache194 = alloca ptr, align 8
  %.cachedtype195 = alloca ptr, align 8
  %retparam204 = alloca i64, align 8
  store ptr null, ptr %.cachedtype195, align 8
  store ptr null, ptr %.cachedtype129, align 8
  store ptr null, ptr %.cachedtype100, align 8
  store ptr null, ptr %.cachedtype88, align 8
  store ptr null, ptr %.cachedtype68, align 8
  store ptr null, ptr %.cachedtype56, align 8
  store ptr null, ptr %.cachedtype37, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %1, ptr %in, align 8
  %ptradd = getelementptr inbounds i8, ptr %in, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %in, !515, !DIExpression(), !516)
  store i64 %3, ptr %dst, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %dst, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %dst, !517, !DIExpression(), !518)
    #dbg_declare(ptr %5, !519, !DIExpression(), !520)
  %ptradd2 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !521
  %6 = load i64, ptr %ptradd2, align 8, !dbg !521
  %i2b = icmp ne i64 %6, 0, !dbg !521
  br i1 %i2b, label %if.then, label %if.exit53, !dbg !521

if.then:                                          ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %in3, ptr align 8 %in, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %dst4, ptr align 8 %dst, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buffer, ptr align 8 %5, i32 16, i1 false)
    #dbg_declare(ptr %total_copied, !522, !DIExpression(), !524)
  store i64 0, ptr %total_copied, align 8, !dbg !524
  br label %loop.body, !dbg !526

loop.body:                                        ; preds = %if.exit52, %if.then
    #dbg_declare(ptr %len, !527, !DIExpression(), !530)
  %ptradd5 = getelementptr inbounds i8, ptr %in3, i64 8, !dbg !531
  %7 = load i64, ptr %ptradd5, align 8, !dbg !531
  %8 = inttoptr i64 %7 to ptr, !dbg !531
  %type = load ptr, ptr %.cachedtype, align 8
  %9 = icmp eq ptr %8, %type
  br i1 %9, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %loop.body
  %ptradd6 = getelementptr inbounds i8, ptr %8, i64 16
  %10 = load ptr, ptr %ptradd6, align 8
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read")
  store ptr %11, ptr %.inlinecache, align 8
  store ptr %8, ptr %.cachedtype, align 8
  br label %12

cache_hit:                                        ; preds = %loop.body
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %12

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ]
  %13 = icmp eq ptr %fn_phi, null
  br i1 %13, label %missing_function, label %match

missing_function:                                 ; preds = %12
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !532
  call void %14(ptr @.panic_msg.39, i64 41, ptr @.file.19, i64 9, ptr @.func.40, i64 7, i32 173) #5, !dbg !532
  unreachable, !dbg !532

match:                                            ; preds = %12
  %15 = load ptr, ptr %in3, align 8
  %lo = load ptr, ptr %buffer, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %buffer, i64 8
  %hi = load i64, ptr %ptradd7, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %15, ptr %lo, i64 %hi), !dbg !532
  %not_err = icmp eq i64 %16, 0, !dbg !532
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !532
  br i1 %17, label %after_check, label %assign_optional, !dbg !532

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %len.f, align 8, !dbg !532
  br label %after_assign, !dbg !532

after_check:                                      ; preds = %match
  %18 = load i64, ptr %retparam, align 8, !dbg !532
  store i64 %18, ptr %len, align 8, !dbg !532
  store i64 0, ptr %len.f, align 8, !dbg !532
  br label %after_assign, !dbg !532

after_assign:                                     ; preds = %after_check, %assign_optional
    #dbg_declare(ptr %err, !533, !DIExpression(), !534)
  br label %testblock, !dbg !534

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %len.f, align 8, !dbg !535
  %not_err8 = icmp eq i64 %optval, 0, !dbg !535
  %19 = call i1 @llvm.expect.i1(i1 %not_err8, i1 true), !dbg !535
  br i1 %19, label %after_check10, label %assign_optional9, !dbg !535

assign_optional9:                                 ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !535
  br label %end_block, !dbg !535

after_check10:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !535
  br label %end_block, !dbg !535

end_block:                                        ; preds = %after_check10, %assign_optional9
  %20 = load i64, ptr %err, align 8, !dbg !535
  %i2b11 = icmp ne i64 %20, 0, !dbg !535
  br i1 %i2b11, label %if.then12, label %if.exit14, !dbg !535

if.then12:                                        ; preds = %end_block
  %21 = load i64, ptr %err, align 8, !dbg !536
  %eq = icmp eq i64 %21, ptrtoint (ptr @std.io.EOF to i64), !dbg !536
  br i1 %eq, label %if.then13, label %if.exit, !dbg !536

if.then13:                                        ; preds = %if.then12
  %22 = load i64, ptr %total_copied, align 8, !dbg !538
  store i64 %22, ptr %blockret, align 8, !dbg !538
  br label %expr_block.exit, !dbg !538

if.exit:                                          ; preds = %if.then12
  %23 = load i64, ptr %err, align 8, !dbg !539
  store i64 %23, ptr %reterr, align 8, !dbg !539
  br label %err_retblock, !dbg !539

if.exit14:                                        ; preds = %end_block
  %24 = load i64, ptr %len, align 8, !dbg !540
  %i2nb = icmp eq i64 %24, 0, !dbg !540
  br i1 %i2nb, label %if.then15, label %if.exit16, !dbg !540

if.then15:                                        ; preds = %if.exit14
  %25 = load i64, ptr %total_copied, align 8, !dbg !541
  store i64 %25, ptr %blockret, align 8, !dbg !541
  br label %expr_block.exit, !dbg !541

if.exit16:                                        ; preds = %if.exit14
    #dbg_declare(ptr %written, !542, !DIExpression(), !543)
  %26 = load %"char[]", ptr %buffer, align 8, !dbg !544
  %27 = extractvalue %"char[]" %26, 0, !dbg !544
  %28 = extractvalue %"char[]" %26, 1, !dbg !545
  %gt = icmp ugt i64 0, %28, !dbg !545
  %29 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !545
  br i1 %29, label %panic, label %checkok, !dbg !545

checkok:                                          ; preds = %if.exit16
  %30 = load i64, ptr %len, align 8, !dbg !546
  %add = add i64 0, %30, !dbg !546
  %gt19 = icmp ugt i64 0, %add, !dbg !546
  %sub = sub i64 %add, 0, !dbg !546
  %31 = call i1 @llvm.expect.i1(i1 %gt19, i1 false), !dbg !546
  br i1 %31, label %panic20, label %checkok25, !dbg !546

checkok25:                                        ; preds = %checkok
  %lt = icmp ult i64 %28, %add, !dbg !544
  %sub26 = sub i64 %add, 1, !dbg !544
  %32 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !544
  br i1 %32, label %panic27, label %checkok34, !dbg !544

checkok34:                                        ; preds = %checkok25
  %size = sub i64 %add, 0, !dbg !544
  %33 = insertvalue %"char[]" undef, ptr %27, 0, !dbg !544
  %34 = insertvalue %"char[]" %33, i64 %size, 1, !dbg !544
  %ptradd35 = getelementptr inbounds i8, ptr %dst4, i64 8, !dbg !544
  %35 = load i64, ptr %ptradd35, align 8, !dbg !544
  %36 = inttoptr i64 %35 to ptr, !dbg !544
  %type38 = load ptr, ptr %.cachedtype37, align 8
  %37 = icmp eq ptr %36, %type38
  br i1 %37, label %cache_hit41, label %cache_miss39

cache_miss39:                                     ; preds = %checkok34
  %ptradd40 = getelementptr inbounds i8, ptr %36, i64 16
  %38 = load ptr, ptr %ptradd40, align 8
  %39 = call ptr @.dyn_search(ptr %38, ptr @"$sel.write")
  store ptr %39, ptr %.inlinecache36, align 8
  store ptr %36, ptr %.cachedtype37, align 8
  br label %40

cache_hit41:                                      ; preds = %checkok34
  %cache_hit_fn42 = load ptr, ptr %.inlinecache36, align 8
  br label %40

40:                                               ; preds = %cache_hit41, %cache_miss39
  %fn_phi43 = phi ptr [ %cache_hit_fn42, %cache_hit41 ], [ %39, %cache_miss39 ]
  %41 = icmp eq ptr %fn_phi43, null
  br i1 %41, label %missing_function44, label %match45

missing_function44:                               ; preds = %40
  %42 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !547
  call void %42(ptr @.panic_msg.18, i64 42, ptr @.file.19, i64 9, ptr @.func.40, i64 7, i32 180) #5, !dbg !547
  unreachable, !dbg !547

match45:                                          ; preds = %40
  %43 = load ptr, ptr %dst4, align 8
  %44 = call i64 %fn_phi43(ptr %retparam46, ptr %43, ptr %27, i64 %size), !dbg !547
  %not_err47 = icmp eq i64 %44, 0, !dbg !547
  %45 = call i1 @llvm.expect.i1(i1 %not_err47, i1 true), !dbg !547
  br i1 %45, label %after_check49, label %assign_optional48, !dbg !547

assign_optional48:                                ; preds = %match45
  store i64 %44, ptr %error_var, align 8, !dbg !547
  br label %guard_block, !dbg !547

after_check49:                                    ; preds = %match45
  br label %noerr_block, !dbg !547

guard_block:                                      ; preds = %assign_optional48
  %46 = load i64, ptr %error_var, align 8, !dbg !547
  store i64 %46, ptr %reterr, align 8, !dbg !547
  br label %err_retblock, !dbg !547

noerr_block:                                      ; preds = %after_check49
  %47 = load i64, ptr %retparam46, align 8, !dbg !547
  store i64 %47, ptr %written, align 8, !dbg !547
  %48 = load i64, ptr %total_copied, align 8, !dbg !548
  %49 = load i64, ptr %len, align 8, !dbg !549
  %add50 = add i64 %48, %49, !dbg !548
  store i64 %add50, ptr %total_copied, align 8, !dbg !548
  %50 = load i64, ptr %written, align 8, !dbg !550
  %51 = load i64, ptr %len, align 8, !dbg !551
  %neq = icmp ne i64 %50, %51, !dbg !550
  br i1 %neq, label %if.then51, label %if.exit52, !dbg !550

if.then51:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @std.io.INCOMPLETE_WRITE to i64), ptr %reterr, align 8, !dbg !552
  br label %err_retblock, !dbg !552

if.exit52:                                        ; preds = %noerr_block
  br label %loop.body, !dbg !552

expr_block.exit:                                  ; preds = %if.then15, %if.then13
  %52 = load i64, ptr %blockret, align 8, !dbg !552
  store i64 %52, ptr %0, align 8, !dbg !552
  ret i64 0, !dbg !552

err_retblock:                                     ; preds = %if.then51, %guard_block, %if.exit
  %53 = load i64, ptr %reterr, align 8, !dbg !552
  ret i64 %53, !dbg !552

if.exit53:                                        ; preds = %entry
  %ptradd54 = getelementptr inbounds i8, ptr %in, i64 8, !dbg !553
  %54 = load i64, ptr %ptradd54, align 8, !dbg !553
  %55 = inttoptr i64 %54 to ptr, !dbg !553
  %type57 = load ptr, ptr %.cachedtype56, align 8
  %56 = icmp eq ptr %55, %type57
  br i1 %56, label %cache_hit60, label %cache_miss58

cache_miss58:                                     ; preds = %if.exit53
  %ptradd59 = getelementptr inbounds i8, ptr %55, i64 16
  %57 = load ptr, ptr %ptradd59, align 8
  %58 = call ptr @.dyn_search(ptr %57, ptr @"$sel.write_to")
  store ptr %58, ptr %.inlinecache55, align 8
  store ptr %55, ptr %.cachedtype56, align 8
  br label %59

cache_hit60:                                      ; preds = %if.exit53
  %cache_hit_fn61 = load ptr, ptr %.inlinecache55, align 8
  br label %59

59:                                               ; preds = %cache_hit60, %cache_miss58
  %fn_phi62 = phi ptr [ %cache_hit_fn61, %cache_hit60 ], [ %58, %cache_miss58 ]
  %i2b63 = icmp ne ptr %fn_phi62, null
  br i1 %i2b63, label %if.then64, label %if.exit85

if.then64:                                        ; preds = %59
  %ptradd66 = getelementptr inbounds i8, ptr %in, i64 8, !dbg !554
  %60 = load i64, ptr %ptradd66, align 8, !dbg !554
  %61 = inttoptr i64 %60 to ptr, !dbg !554
  %type69 = load ptr, ptr %.cachedtype68, align 8
  %62 = icmp eq ptr %61, %type69
  br i1 %62, label %cache_hit72, label %cache_miss70

cache_miss70:                                     ; preds = %if.then64
  %ptradd71 = getelementptr inbounds i8, ptr %61, i64 16
  %63 = load ptr, ptr %ptradd71, align 8
  %64 = call ptr @.dyn_search(ptr %63, ptr @"$sel.write_to")
  store ptr %64, ptr %.inlinecache67, align 8
  store ptr %61, ptr %.cachedtype68, align 8
  br label %65

cache_hit72:                                      ; preds = %if.then64
  %cache_hit_fn73 = load ptr, ptr %.inlinecache67, align 8
  br label %65

65:                                               ; preds = %cache_hit72, %cache_miss70
  %fn_phi74 = phi ptr [ %cache_hit_fn73, %cache_hit72 ], [ %64, %cache_miss70 ]
  %66 = icmp eq ptr %fn_phi74, null
  br i1 %66, label %missing_function75, label %match76

missing_function75:                               ; preds = %65
  %67 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !555
  call void %67(ptr @.panic_msg.41, i64 45, ptr @.file.19, i64 9, ptr @.func.40, i64 7, i32 155) #5, !dbg !555
  unreachable, !dbg !555

match76:                                          ; preds = %65
  %68 = load ptr, ptr %in, align 8
  %lo78 = load i64, ptr %dst, align 8
  %ptradd79 = getelementptr inbounds i8, ptr %dst, i64 8
  %hi80 = load ptr, ptr %ptradd79, align 8
  %69 = call i64 %fn_phi74(ptr %retparam77, ptr %68, i64 %lo78, ptr %hi80), !dbg !555
  %not_err81 = icmp eq i64 %69, 0, !dbg !555
  %70 = call i1 @llvm.expect.i1(i1 %not_err81, i1 true), !dbg !555
  br i1 %70, label %after_check83, label %assign_optional82, !dbg !555

assign_optional82:                                ; preds = %match76
  store i64 %69, ptr %reterr65, align 8, !dbg !555
  br label %err_retblock84, !dbg !555

after_check83:                                    ; preds = %match76
  %71 = load i64, ptr %retparam77, align 8, !dbg !555
  store i64 %71, ptr %0, align 8, !dbg !555
  ret i64 0, !dbg !555

err_retblock84:                                   ; preds = %assign_optional82
  %72 = load i64, ptr %reterr65, align 8, !dbg !555
  ret i64 %72, !dbg !555

if.exit85:                                        ; preds = %59
  %ptradd86 = getelementptr inbounds i8, ptr %dst, i64 8, !dbg !556
  %73 = load i64, ptr %ptradd86, align 8, !dbg !556
  %74 = inttoptr i64 %73 to ptr, !dbg !556
  %type89 = load ptr, ptr %.cachedtype88, align 8
  %75 = icmp eq ptr %74, %type89
  br i1 %75, label %cache_hit92, label %cache_miss90

cache_miss90:                                     ; preds = %if.exit85
  %ptradd91 = getelementptr inbounds i8, ptr %74, i64 16
  %76 = load ptr, ptr %ptradd91, align 8
  %77 = call ptr @.dyn_search(ptr %76, ptr @"$sel.read_to")
  store ptr %77, ptr %.inlinecache87, align 8
  store ptr %74, ptr %.cachedtype88, align 8
  br label %78

cache_hit92:                                      ; preds = %if.exit85
  %cache_hit_fn93 = load ptr, ptr %.inlinecache87, align 8
  br label %78

78:                                               ; preds = %cache_hit92, %cache_miss90
  %fn_phi94 = phi ptr [ %cache_hit_fn93, %cache_hit92 ], [ %77, %cache_miss90 ]
  %i2b95 = icmp ne ptr %fn_phi94, null
  br i1 %i2b95, label %if.then96, label %if.exit117

if.then96:                                        ; preds = %78
  %ptradd98 = getelementptr inbounds i8, ptr %dst, i64 8, !dbg !557
  %79 = load i64, ptr %ptradd98, align 8, !dbg !557
  %80 = inttoptr i64 %79 to ptr, !dbg !557
  %type101 = load ptr, ptr %.cachedtype100, align 8
  %81 = icmp eq ptr %80, %type101
  br i1 %81, label %cache_hit104, label %cache_miss102

cache_miss102:                                    ; preds = %if.then96
  %ptradd103 = getelementptr inbounds i8, ptr %80, i64 16
  %82 = load ptr, ptr %ptradd103, align 8
  %83 = call ptr @.dyn_search(ptr %82, ptr @"$sel.read_to")
  store ptr %83, ptr %.inlinecache99, align 8
  store ptr %80, ptr %.cachedtype100, align 8
  br label %84

cache_hit104:                                     ; preds = %if.then96
  %cache_hit_fn105 = load ptr, ptr %.inlinecache99, align 8
  br label %84

84:                                               ; preds = %cache_hit104, %cache_miss102
  %fn_phi106 = phi ptr [ %cache_hit_fn105, %cache_hit104 ], [ %83, %cache_miss102 ]
  %85 = icmp eq ptr %fn_phi106, null
  br i1 %85, label %missing_function107, label %match108

missing_function107:                              ; preds = %84
  %86 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !558
  call void %86(ptr @.panic_msg.42, i64 44, ptr @.file.19, i64 9, ptr @.func.40, i64 7, i32 156) #5, !dbg !558
  unreachable, !dbg !558

match108:                                         ; preds = %84
  %87 = load ptr, ptr %dst, align 8
  %lo110 = load i64, ptr %in, align 8
  %ptradd111 = getelementptr inbounds i8, ptr %in, i64 8
  %hi112 = load ptr, ptr %ptradd111, align 8
  %88 = call i64 %fn_phi106(ptr %retparam109, ptr %87, i64 %lo110, ptr %hi112), !dbg !558
  %not_err113 = icmp eq i64 %88, 0, !dbg !558
  %89 = call i1 @llvm.expect.i1(i1 %not_err113, i1 true), !dbg !558
  br i1 %89, label %after_check115, label %assign_optional114, !dbg !558

assign_optional114:                               ; preds = %match108
  store i64 %88, ptr %reterr97, align 8, !dbg !558
  br label %err_retblock116, !dbg !558

after_check115:                                   ; preds = %match108
  %90 = load i64, ptr %retparam109, align 8, !dbg !558
  store i64 %90, ptr %0, align 8, !dbg !558
  ret i64 0, !dbg !558

err_retblock116:                                  ; preds = %assign_optional114
  %91 = load i64, ptr %reterr97, align 8, !dbg !558
  ret i64 %91, !dbg !558

if.exit117:                                       ; preds = %78
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %in119, ptr align 8 %in, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %dst120, ptr align 8 %dst, i32 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 1 %literal, i8 0, i64 4096, i1 false)
  %92 = insertvalue %"char[]" undef, ptr %literal, 0
  %93 = insertvalue %"char[]" %92, i64 4096, 1
  store %"char[]" %93, ptr %buffer121, align 8
    #dbg_declare(ptr %total_copied123, !559, !DIExpression(), !561)
  store i64 0, ptr %total_copied123, align 8, !dbg !561
  br label %loop.body124, !dbg !563

loop.body124:                                     ; preds = %if.exit213, %if.exit117
    #dbg_declare(ptr %len125, !564, !DIExpression(), !567)
  %ptradd127 = getelementptr inbounds i8, ptr %in119, i64 8, !dbg !568
  %94 = load i64, ptr %ptradd127, align 8, !dbg !568
  %95 = inttoptr i64 %94 to ptr, !dbg !568
  %type130 = load ptr, ptr %.cachedtype129, align 8
  %96 = icmp eq ptr %95, %type130
  br i1 %96, label %cache_hit133, label %cache_miss131

cache_miss131:                                    ; preds = %loop.body124
  %ptradd132 = getelementptr inbounds i8, ptr %95, i64 16
  %97 = load ptr, ptr %ptradd132, align 8
  %98 = call ptr @.dyn_search(ptr %97, ptr @"$sel.read")
  store ptr %98, ptr %.inlinecache128, align 8
  store ptr %95, ptr %.cachedtype129, align 8
  br label %99

cache_hit133:                                     ; preds = %loop.body124
  %cache_hit_fn134 = load ptr, ptr %.inlinecache128, align 8
  br label %99

99:                                               ; preds = %cache_hit133, %cache_miss131
  %fn_phi135 = phi ptr [ %cache_hit_fn134, %cache_hit133 ], [ %98, %cache_miss131 ]
  %100 = icmp eq ptr %fn_phi135, null
  br i1 %100, label %missing_function136, label %match137

missing_function136:                              ; preds = %99
  %101 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !569
  call void %101(ptr @.panic_msg.39, i64 41, ptr @.file.19, i64 9, ptr @.func.40, i64 7, i32 173) #5, !dbg !569
  unreachable, !dbg !569

match137:                                         ; preds = %99
  %102 = load ptr, ptr %in119, align 8
  %lo139 = load ptr, ptr %buffer121, align 8
  %ptradd140 = getelementptr inbounds i8, ptr %buffer121, i64 8
  %hi141 = load i64, ptr %ptradd140, align 8
  %103 = call i64 %fn_phi135(ptr %retparam138, ptr %102, ptr %lo139, i64 %hi141), !dbg !569
  %not_err142 = icmp eq i64 %103, 0, !dbg !569
  %104 = call i1 @llvm.expect.i1(i1 %not_err142, i1 true), !dbg !569
  br i1 %104, label %after_check144, label %assign_optional143, !dbg !569

assign_optional143:                               ; preds = %match137
  store i64 %103, ptr %len.f126, align 8, !dbg !569
  br label %after_assign145, !dbg !569

after_check144:                                   ; preds = %match137
  %105 = load i64, ptr %retparam138, align 8, !dbg !569
  store i64 %105, ptr %len125, align 8, !dbg !569
  store i64 0, ptr %len.f126, align 8, !dbg !569
  br label %after_assign145, !dbg !569

after_assign145:                                  ; preds = %after_check144, %assign_optional143
    #dbg_declare(ptr %err146, !570, !DIExpression(), !571)
  br label %testblock147, !dbg !571

testblock147:                                     ; preds = %after_assign145
  %optval148 = load i64, ptr %len.f126, align 8, !dbg !572
  %not_err149 = icmp eq i64 %optval148, 0, !dbg !572
  %106 = call i1 @llvm.expect.i1(i1 %not_err149, i1 true), !dbg !572
  br i1 %106, label %after_check151, label %assign_optional150, !dbg !572

assign_optional150:                               ; preds = %testblock147
  store i64 %optval148, ptr %err146, align 8, !dbg !572
  br label %end_block152, !dbg !572

after_check151:                                   ; preds = %testblock147
  store i64 0, ptr %err146, align 8, !dbg !572
  br label %end_block152, !dbg !572

end_block152:                                     ; preds = %after_check151, %assign_optional150
  %107 = load i64, ptr %err146, align 8, !dbg !572
  %i2b153 = icmp ne i64 %107, 0, !dbg !572
  br i1 %i2b153, label %if.then154, label %if.exit158, !dbg !572

if.then154:                                       ; preds = %end_block152
  %108 = load i64, ptr %err146, align 8, !dbg !573
  %eq155 = icmp eq i64 %108, ptrtoint (ptr @std.io.EOF to i64), !dbg !573
  br i1 %eq155, label %if.then156, label %if.exit157, !dbg !573

if.then156:                                       ; preds = %if.then154
  %109 = load i64, ptr %total_copied123, align 8, !dbg !575
  store i64 %109, ptr %blockret122, align 8, !dbg !575
  br label %expr_block.exit214, !dbg !575

if.exit157:                                       ; preds = %if.then154
  %110 = load i64, ptr %err146, align 8, !dbg !576
  store i64 %110, ptr %reterr118, align 8, !dbg !576
  br label %err_retblock215, !dbg !576

if.exit158:                                       ; preds = %end_block152
  %111 = load i64, ptr %len125, align 8, !dbg !577
  %i2nb159 = icmp eq i64 %111, 0, !dbg !577
  br i1 %i2nb159, label %if.then160, label %if.exit161, !dbg !577

if.then160:                                       ; preds = %if.exit158
  %112 = load i64, ptr %total_copied123, align 8, !dbg !578
  store i64 %112, ptr %blockret122, align 8, !dbg !578
  br label %expr_block.exit214, !dbg !578

if.exit161:                                       ; preds = %if.exit158
    #dbg_declare(ptr %written162, !579, !DIExpression(), !580)
  %113 = load %"char[]", ptr %buffer121, align 8, !dbg !581
  %114 = extractvalue %"char[]" %113, 0, !dbg !581
  %115 = extractvalue %"char[]" %113, 1, !dbg !582
  %gt164 = icmp ugt i64 0, %115, !dbg !582
  %116 = call i1 @llvm.expect.i1(i1 %gt164, i1 false), !dbg !582
  br i1 %116, label %panic165, label %checkok172, !dbg !582

checkok172:                                       ; preds = %if.exit161
  %117 = load i64, ptr %len125, align 8, !dbg !583
  %add173 = add i64 0, %117, !dbg !583
  %gt174 = icmp ugt i64 0, %add173, !dbg !583
  %sub175 = sub i64 %add173, 0, !dbg !583
  %118 = call i1 @llvm.expect.i1(i1 %gt174, i1 false), !dbg !583
  br i1 %118, label %panic176, label %checkok181, !dbg !583

checkok181:                                       ; preds = %checkok172
  %lt182 = icmp ult i64 %115, %add173, !dbg !581
  %sub183 = sub i64 %add173, 1, !dbg !581
  %119 = call i1 @llvm.expect.i1(i1 %lt182, i1 false), !dbg !581
  br i1 %119, label %panic184, label %checkok191, !dbg !581

checkok191:                                       ; preds = %checkok181
  %size192 = sub i64 %add173, 0, !dbg !581
  %120 = insertvalue %"char[]" undef, ptr %114, 0, !dbg !581
  %121 = insertvalue %"char[]" %120, i64 %size192, 1, !dbg !581
  %ptradd193 = getelementptr inbounds i8, ptr %dst120, i64 8, !dbg !581
  %122 = load i64, ptr %ptradd193, align 8, !dbg !581
  %123 = inttoptr i64 %122 to ptr, !dbg !581
  %type196 = load ptr, ptr %.cachedtype195, align 8
  %124 = icmp eq ptr %123, %type196
  br i1 %124, label %cache_hit199, label %cache_miss197

cache_miss197:                                    ; preds = %checkok191
  %ptradd198 = getelementptr inbounds i8, ptr %123, i64 16
  %125 = load ptr, ptr %ptradd198, align 8
  %126 = call ptr @.dyn_search(ptr %125, ptr @"$sel.write")
  store ptr %126, ptr %.inlinecache194, align 8
  store ptr %123, ptr %.cachedtype195, align 8
  br label %127

cache_hit199:                                     ; preds = %checkok191
  %cache_hit_fn200 = load ptr, ptr %.inlinecache194, align 8
  br label %127

127:                                              ; preds = %cache_hit199, %cache_miss197
  %fn_phi201 = phi ptr [ %cache_hit_fn200, %cache_hit199 ], [ %126, %cache_miss197 ]
  %128 = icmp eq ptr %fn_phi201, null
  br i1 %128, label %missing_function202, label %match203

missing_function202:                              ; preds = %127
  %129 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !584
  call void %129(ptr @.panic_msg.18, i64 42, ptr @.file.19, i64 9, ptr @.func.40, i64 7, i32 180) #5, !dbg !584
  unreachable, !dbg !584

match203:                                         ; preds = %127
  %130 = load ptr, ptr %dst120, align 8
  %131 = call i64 %fn_phi201(ptr %retparam204, ptr %130, ptr %114, i64 %size192), !dbg !584
  %not_err205 = icmp eq i64 %131, 0, !dbg !584
  %132 = call i1 @llvm.expect.i1(i1 %not_err205, i1 true), !dbg !584
  br i1 %132, label %after_check207, label %assign_optional206, !dbg !584

assign_optional206:                               ; preds = %match203
  store i64 %131, ptr %error_var163, align 8, !dbg !584
  br label %guard_block208, !dbg !584

after_check207:                                   ; preds = %match203
  br label %noerr_block209, !dbg !584

guard_block208:                                   ; preds = %assign_optional206
  %133 = load i64, ptr %error_var163, align 8, !dbg !584
  store i64 %133, ptr %reterr118, align 8, !dbg !584
  br label %err_retblock215, !dbg !584

noerr_block209:                                   ; preds = %after_check207
  %134 = load i64, ptr %retparam204, align 8, !dbg !584
  store i64 %134, ptr %written162, align 8, !dbg !584
  %135 = load i64, ptr %total_copied123, align 8, !dbg !585
  %136 = load i64, ptr %len125, align 8, !dbg !586
  %add210 = add i64 %135, %136, !dbg !585
  store i64 %add210, ptr %total_copied123, align 8, !dbg !585
  %137 = load i64, ptr %written162, align 8, !dbg !587
  %138 = load i64, ptr %len125, align 8, !dbg !588
  %neq211 = icmp ne i64 %137, %138, !dbg !587
  br i1 %neq211, label %if.then212, label %if.exit213, !dbg !587

if.then212:                                       ; preds = %noerr_block209
  store i64 ptrtoint (ptr @std.io.INCOMPLETE_WRITE to i64), ptr %reterr118, align 8, !dbg !589
  br label %err_retblock215, !dbg !589

if.exit213:                                       ; preds = %noerr_block209
  br label %loop.body124, !dbg !589

expr_block.exit214:                               ; preds = %if.then160, %if.then156
  %139 = load i64, ptr %blockret122, align 8, !dbg !589
  store i64 %139, ptr %0, align 8, !dbg !589
  ret i64 0, !dbg !589

err_retblock215:                                  ; preds = %if.then212, %guard_block208, %if.exit157
  %140 = load i64, ptr %reterr118, align 8, !dbg !589
  ret i64 %140, !dbg !589

panic:                                            ; preds = %if.exit16
  store i64 %28, ptr %taddr, align 8
  %141 = insertvalue %any undef, ptr %taddr, 0
  %142 = insertvalue %any %141, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr17, align 8
  %143 = insertvalue %any undef, ptr %taddr17, 0
  %144 = insertvalue %any %143, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %142, ptr %varargslots, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %144, ptr %ptradd18, align 16
  %145 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %145, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.19, i64 9, ptr @.func.40, i64 7, i32 180, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !544
  unreachable, !dbg !544

panic20:                                          ; preds = %checkok
  store i64 %sub, ptr %taddr21, align 8
  %146 = insertvalue %any undef, ptr %taddr21, 0
  %147 = insertvalue %any %146, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %147, ptr %varargslots22, align 16
  %148 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp23" = insertvalue %"any[]" %148, i64 1, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.19, i64 9, ptr @.func.40, i64 7, i32 180, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !544
  unreachable, !dbg !544

panic27:                                          ; preds = %checkok25
  store i64 %sub26, ptr %taddr28, align 8
  %149 = insertvalue %any undef, ptr %taddr28, 0
  %150 = insertvalue %any %149, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %28, ptr %taddr29, align 8
  %151 = insertvalue %any undef, ptr %taddr29, 0
  %152 = insertvalue %any %151, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %150, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %152, ptr %ptradd31, align 16
  %153 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %153, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.19, i64 9, ptr @.func.40, i64 7, i32 180, ptr byval(%"any[]") align 8 %indirectarg33) #5, !dbg !544
  unreachable, !dbg !544

panic165:                                         ; preds = %if.exit161
  store i64 %115, ptr %taddr166, align 8
  %154 = insertvalue %any undef, ptr %taddr166, 0
  %155 = insertvalue %any %154, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr167, align 8
  %156 = insertvalue %any undef, ptr %taddr167, 0
  %157 = insertvalue %any %156, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %155, ptr %varargslots168, align 16
  %ptradd169 = getelementptr inbounds i8, ptr %varargslots168, i64 16
  store %any %157, ptr %ptradd169, align 16
  %158 = insertvalue %"any[]" undef, ptr %varargslots168, 0
  %"$$temp170" = insertvalue %"any[]" %158, i64 2, 1
  store %"any[]" %"$$temp170", ptr %indirectarg171, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.19, i64 9, ptr @.func.40, i64 7, i32 180, ptr byval(%"any[]") align 8 %indirectarg171) #5, !dbg !581
  unreachable, !dbg !581

panic176:                                         ; preds = %checkok172
  store i64 %sub175, ptr %taddr177, align 8
  %159 = insertvalue %any undef, ptr %taddr177, 0
  %160 = insertvalue %any %159, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %160, ptr %varargslots178, align 16
  %161 = insertvalue %"any[]" undef, ptr %varargslots178, 0
  %"$$temp179" = insertvalue %"any[]" %161, i64 1, 1
  store %"any[]" %"$$temp179", ptr %indirectarg180, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.19, i64 9, ptr @.func.40, i64 7, i32 180, ptr byval(%"any[]") align 8 %indirectarg180) #5, !dbg !581
  unreachable, !dbg !581

panic184:                                         ; preds = %checkok181
  store i64 %sub183, ptr %taddr185, align 8
  %162 = insertvalue %any undef, ptr %taddr185, 0
  %163 = insertvalue %any %162, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %115, ptr %taddr186, align 8
  %164 = insertvalue %any undef, ptr %taddr186, 0
  %165 = insertvalue %any %164, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %163, ptr %varargslots187, align 16
  %ptradd188 = getelementptr inbounds i8, ptr %varargslots187, i64 16
  store %any %165, ptr %ptradd188, align 16
  %166 = insertvalue %"any[]" undef, ptr %varargslots187, 0
  %"$$temp189" = insertvalue %"any[]" %166, i64 2, 1
  store %"any[]" %"$$temp189", ptr %indirectarg190, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.19, i64 9, ptr @.func.40, i64 7, i32 180, ptr byval(%"any[]") align 8 %indirectarg190) #5, !dbg !581
  unreachable, !dbg !581
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.wrap_bytes(ptr noalias sret(%ByteReader) align 8 %0, ptr %1, i64 %2) #0 comdat !dbg !590 {
entry:
  %bytes = alloca %"char[]", align 8
  %literal = alloca %ByteReader, align 8
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !597, !DIExpression(), !598)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %bytes, i32 16, i1 false), !dbg !599
  %ptradd1 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !599
  store i64 0, ptr %ptradd1, align 8, !dbg !600
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 24, i1 false), !dbg !600
  ret void, !dbg !600
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.adjust(ptr %0, ptr %1, i64 %2) #0 !dbg !601 {
entry:
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %reterr1 = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !605
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !605
  br i1 %4, label %panic, label %checkok, !dbg !605

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !606, !DIExpression(), !607)
  store i64 %2, ptr %len, align 8
    #dbg_declare(ptr %len, !608, !DIExpression(), !609)
  %5 = load ptr, ptr %self, align 8, !dbg !610
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !610
  %6 = load i32, ptr %ptradd, align 8, !dbg !610
  %lshrl = lshr i32 %6, 1, !dbg !610
  %7 = and i32 1, %lshrl, !dbg !610
  %trunc = trunc i32 %7 to i8, !dbg !610
  %8 = trunc i8 %trunc to i1, !dbg !610
  %not = xor i1 %8, true, !dbg !610
  br i1 %not, label %if.then, label %if.exit, !dbg !610

if.then:                                          ; preds = %checkok
  store i64 0, ptr %0, align 8, !dbg !611
  ret i64 0, !dbg !611

if.exit:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !612
  %ptradd2 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !612
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 4, !dbg !612
  %10 = load i32, ptr %ptradd3, align 4, !dbg !612
  %zext = zext i32 %10 to i64, !dbg !612
  %11 = load i64, ptr %len, align 8, !dbg !613
  %12 = load ptr, ptr %self, align 8
  %13 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %12, i8 zeroext 32, i64 %zext, i64 %11) #6, !dbg !614
  %not_err = icmp eq i64 %13, 0, !dbg !614
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !614
  br i1 %14, label %after_check, label %assign_optional, !dbg !614

assign_optional:                                  ; preds = %if.exit
  store i64 %13, ptr %reterr1, align 8, !dbg !614
  br label %err_retblock, !dbg !614

after_check:                                      ; preds = %if.exit
  %15 = load i64, ptr %retparam, align 8, !dbg !614
  store i64 %15, ptr %0, align 8, !dbg !614
  ret i64 0, !dbg !614

err_retblock:                                     ; preds = %assign_optional
  %16 = load i64, ptr %reterr1, align 8, !dbg !614
  ret i64 %16, !dbg !614

panic:                                            ; preds = %entry
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !607
  call void %17(ptr @.panic_msg, i64 62, ptr @.file.44, i64 20, ptr @.func.64, i64 6, i32 32) #5, !dbg !607
  unreachable, !dbg !607
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_substr(ptr %0, ptr %1, ptr %2, i64 %3) #0 !dbg !615 {
entry:
  %self = alloca ptr, align 8
  %str = alloca %"char[]", align 8
  %l = alloca i64, align 8
  %prec = alloca i32, align 4
  %index = alloca i64, align 8
  %chars = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !618
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !618
  br i1 %5, label %panic, label %checkok, !dbg !618

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !619, !DIExpression(), !620)
  store ptr %2, ptr %str, align 8
  %ptradd = getelementptr inbounds i8, ptr %str, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %str, !621, !DIExpression(), !622)
    #dbg_declare(ptr %l, !623, !DIExpression(), !624)
  %lo = load ptr, ptr %str, align 8, !dbg !625
  %ptradd1 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !625
  %hi = load i64, ptr %ptradd1, align 8, !dbg !625
  %6 = call i64 @std.core.string.conv.utf8_codepoints(ptr %lo, i64 %hi), !dbg !626
  store i64 %6, ptr %l, align 8, !dbg !626
    #dbg_declare(ptr %prec, !627, !DIExpression(), !628)
  %7 = load ptr, ptr %self, align 8, !dbg !629
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !629
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 8, !dbg !629
  %8 = load i32, ptr %ptradd3, align 8, !dbg !629
  store i32 %8, ptr %prec, align 4, !dbg !629
  %9 = load ptr, ptr %self, align 8, !dbg !630
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !630
  %10 = load i32, ptr %ptradd4, align 8, !dbg !630
  %lshrl = lshr i32 %10, 6, !dbg !630
  %11 = and i32 1, %lshrl, !dbg !630
  %trunc = trunc i32 %11 to i8, !dbg !630
  %12 = trunc i8 %trunc to i1, !dbg !630
  br i1 %12, label %and.rhs, label %and.phi, !dbg !630

and.rhs:                                          ; preds = %checkok
  %13 = load i64, ptr %l, align 8, !dbg !631
  %14 = load i32, ptr %prec, align 4, !dbg !632
  %zext = zext i32 %14 to i64, !dbg !632
  %lt = icmp ult i64 %13, %zext, !dbg !631
  br label %and.phi, !dbg !631

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %lt, %and.rhs ], !dbg !631
  br i1 %val, label %if.then, label %if.exit, !dbg !631

if.then:                                          ; preds = %and.phi
  %15 = load i32, ptr %prec, align 4, !dbg !633
  %zext5 = zext i32 %15 to i64, !dbg !633
  store i64 %zext5, ptr %l, align 8, !dbg !633
  br label %if.exit, !dbg !633

if.exit:                                          ; preds = %if.then, %and.phi
    #dbg_declare(ptr %index, !634, !DIExpression(), !635)
  store i64 0, ptr %index, align 8, !dbg !636
    #dbg_declare(ptr %chars, !637, !DIExpression(), !638)
  %ptradd6 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !639
  %16 = load i64, ptr %ptradd6, align 8, !dbg !639
  store i64 %16, ptr %chars, align 8, !dbg !639
    #dbg_declare(ptr %ptr, !640, !DIExpression(), !641)
  %17 = load ptr, ptr %str, align 8, !dbg !642
  store ptr %17, ptr %ptr, align 8, !dbg !642
  br label %loop.cond, !dbg !643

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %18 = load i64, ptr %index, align 8, !dbg !644
  %19 = load i64, ptr %chars, align 8, !dbg !646
  %lt7 = icmp ult i64 %18, %19, !dbg !644
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !644

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !647, !DIExpression(), !649)
  %20 = load ptr, ptr %ptr, align 8, !dbg !650
  %21 = load i64, ptr %index, align 8, !dbg !651
  %ptradd8 = getelementptr inbounds i8, ptr %20, i64 %21, !dbg !651
  %22 = load i8, ptr %ptradd8, align 1, !dbg !651
  store i8 %22, ptr %c, align 1, !dbg !651
  %23 = load i8, ptr %c, align 1, !dbg !652
  %zext9 = zext i8 %23 to i32, !dbg !652
  %and = and i32 %zext9, 192, !dbg !652
  %neq = icmp ne i32 %and, 128, !dbg !652
  br i1 %neq, label %and.rhs10, label %and.phi14, !dbg !652

and.rhs10:                                        ; preds = %loop.body
  %24 = load ptr, ptr %self, align 8, !dbg !653
  %ptradd11 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !653
  %25 = load i32, ptr %ptradd11, align 8, !dbg !653
  %lshrl12 = lshr i32 %25, 6, !dbg !653
  %26 = and i32 1, %lshrl12, !dbg !653
  %trunc13 = trunc i32 %26 to i8, !dbg !653
  %27 = trunc i8 %trunc13 to i1, !dbg !653
  br label %and.phi14, !dbg !653

and.phi14:                                        ; preds = %and.rhs10, %loop.body
  %val15 = phi i1 [ false, %loop.body ], [ %27, %and.rhs10 ], !dbg !653
  br i1 %val15, label %and.rhs16, label %and.phi17, !dbg !653

and.rhs16:                                        ; preds = %and.phi14
  %28 = load i32, ptr %prec, align 4, !dbg !654
  %sub = sub i32 %28, 1, !dbg !654
  store i32 %sub, ptr %prec, align 4, !dbg !654
  %i2nb = icmp eq i32 %28, 0, !dbg !654
  br label %and.phi17, !dbg !654

and.phi17:                                        ; preds = %and.rhs16, %and.phi14
  %val18 = phi i1 [ false, %and.phi14 ], [ %i2nb, %and.rhs16 ], !dbg !654
  br i1 %val18, label %if.then19, label %if.exit20, !dbg !654

if.then19:                                        ; preds = %and.phi17
  br label %loop.exit, !dbg !655

if.exit20:                                        ; preds = %and.phi17
  %29 = load ptr, ptr %self, align 8
  %30 = load i8, ptr %c, align 1
  %31 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %29, i8 zeroext %30), !dbg !656
  %not_err = icmp eq i64 %31, 0, !dbg !656
  %32 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !656
  br i1 %32, label %after_check, label %assign_optional, !dbg !656

assign_optional:                                  ; preds = %if.exit20
  store i64 %31, ptr %error_var, align 8, !dbg !656
  br label %guard_block, !dbg !656

after_check:                                      ; preds = %if.exit20
  br label %noerr_block, !dbg !656

guard_block:                                      ; preds = %assign_optional
  %33 = load i64, ptr %error_var, align 8, !dbg !656
  ret i64 %33, !dbg !656

noerr_block:                                      ; preds = %after_check
  %34 = load i64, ptr %index, align 8, !dbg !657
  %add = add i64 %34, 1, !dbg !657
  store i64 %add, ptr %index, align 8, !dbg !657
  br label %loop.cond, !dbg !657

loop.exit:                                        ; preds = %if.then19, %loop.cond
  %35 = load i64, ptr %index, align 8, !dbg !658
  store i64 %35, ptr %0, align 8, !dbg !658
  ret i64 0, !dbg !658

panic:                                            ; preds = %entry
  %36 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !620
  call void %36(ptr @.panic_msg, i64 62, ptr @.file.44, i64 20, ptr @.func.65, i64 10, i32 158) #5, !dbg !620
  unreachable, !dbg !620
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.pad(ptr %0, ptr %1, i8 zeroext %2, i64 %3, i64 %4) #0 comdat !dbg !659 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %width = alloca i64, align 8
  %len = alloca i64, align 8
  %delta = alloca i64, align 8
  %i = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %x = alloca i32, align 4
  %.anon = alloca i64, align 8
  %a = alloca i32, align 4
  %b = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !662
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !662
  br i1 %6, label %panic, label %checkok, !dbg !662

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !663, !DIExpression(), !664)
  store i8 %2, ptr %c, align 1
    #dbg_declare(ptr %c, !665, !DIExpression(), !666)
  store i64 %3, ptr %width, align 8
    #dbg_declare(ptr %width, !667, !DIExpression(), !669)
  store i64 %4, ptr %len, align 8
    #dbg_declare(ptr %len, !670, !DIExpression(), !671)
    #dbg_declare(ptr %delta, !672, !DIExpression(), !673)
  %7 = load i64, ptr %width, align 8, !dbg !674
  %8 = load i64, ptr %len, align 8, !dbg !675
  %sub = sub i64 %7, %8, !dbg !674
  store i64 %sub, ptr %delta, align 8, !dbg !674
    #dbg_declare(ptr %i, !676, !DIExpression(), !678)
  store i64 0, ptr %i, align 8, !dbg !679
  br label %loop.cond, !dbg !679

loop.cond:                                        ; preds = %noerr_block, %checkok
  %9 = load i64, ptr %i, align 8, !dbg !680
  %10 = load i64, ptr %delta, align 8, !dbg !681
  %lt = icmp slt i64 %9, %10, !dbg !680
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !680

loop.body:                                        ; preds = %loop.cond
  %11 = load ptr, ptr %self, align 8
  %12 = load i8, ptr %c, align 1
  %13 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %11, i8 zeroext %12), !dbg !682
  %not_err = icmp eq i64 %13, 0, !dbg !682
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !682
  br i1 %14, label %after_check, label %assign_optional, !dbg !682

assign_optional:                                  ; preds = %loop.body
  store i64 %13, ptr %error_var, align 8, !dbg !682
  br label %guard_block, !dbg !682

after_check:                                      ; preds = %loop.body
  br label %noerr_block, !dbg !682

guard_block:                                      ; preds = %assign_optional
  %15 = load i64, ptr %error_var, align 8, !dbg !682
  ret i64 %15, !dbg !682

noerr_block:                                      ; preds = %after_check
  %16 = load i64, ptr %i, align 8, !dbg !683
  %add = add i64 %16, 1, !dbg !683
  store i64 %add, ptr %i, align 8, !dbg !683
  br label %loop.cond, !dbg !683

loop.exit:                                        ; preds = %loop.cond
  store i32 0, ptr %x, align 4
  %17 = load i64, ptr %delta, align 8
  store i64 %17, ptr %.anon, align 8
  %18 = load i32, ptr %x, align 4
  store i32 %18, ptr %a, align 4
  %19 = load i64, ptr %.anon, align 8
  store i64 %19, ptr %b, align 8
  %20 = load i32, ptr %a, align 4, !dbg !684
  %sext = sext i32 %20 to i64, !dbg !684
  %21 = load i64, ptr %b, align 8, !dbg !690
  %gt = icmp sgt i64 %sext, %21, !dbg !684
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !684

cond.lhs:                                         ; preds = %loop.exit
  %22 = load i32, ptr %x, align 4, !dbg !691
  %sext1 = sext i32 %22 to i64, !dbg !691
  br label %cond.phi, !dbg !691

cond.rhs:                                         ; preds = %loop.exit
  %23 = load i64, ptr %.anon, align 8, !dbg !692
  br label %cond.phi, !dbg !692

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %sext1, %cond.lhs ], [ %23, %cond.rhs ], !dbg !692
  store i64 %val, ptr %0, align 8, !dbg !692
  ret i64 0, !dbg !692

panic:                                            ; preds = %entry
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !664
  call void %24(ptr @.panic_msg, i64 62, ptr @.file.44, i64 20, ptr @.func.66, i64 3, i32 177) #5, !dbg !664
  unreachable, !dbg !664
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.out_chars(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !693 {
entry:
  %self = alloca ptr, align 8
  %s = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !696
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !696
  br i1 %5, label %panic, label %checkok, !dbg !696

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !697, !DIExpression(), !698)
  store ptr %2, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !699, !DIExpression(), !700)
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !701
  %6 = load i64, ptr %ptradd1, align 8, !dbg !701
    #dbg_declare(ptr %.anon, !703, !DIExpression(), !701)
  store i64 0, ptr %.anon, align 8, !dbg !701
  br label %loop.cond, !dbg !701

loop.cond:                                        ; preds = %noerr_block, %checkok
  %7 = load i64, ptr %.anon, align 8, !dbg !701
  %lt = icmp ult i64 %7, %6, !dbg !701
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !701

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !704, !DIExpression(), !706)
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !707
  %8 = load i64, ptr %ptradd2, align 8, !dbg !707
  %9 = load ptr, ptr %s, align 8, !dbg !707
  %10 = load i64, ptr %.anon, align 8, !dbg !707
  %ge = icmp uge i64 %10, %8, !dbg !707
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !707
  br i1 %11, label %panic3, label %checkok6, !dbg !707

checkok6:                                         ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !707
  %12 = load i8, ptr %ptradd7, align 1, !dbg !707
  store i8 %12, ptr %c, align 1, !dbg !707
  %13 = load ptr, ptr %self, align 8
  %14 = load i8, ptr %c, align 1
  %15 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %13, i8 zeroext %14), !dbg !708
  %not_err = icmp eq i64 %15, 0, !dbg !708
  %16 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !708
  br i1 %16, label %after_check, label %assign_optional, !dbg !708

assign_optional:                                  ; preds = %checkok6
  store i64 %15, ptr %error_var, align 8, !dbg !708
  br label %guard_block, !dbg !708

after_check:                                      ; preds = %checkok6
  br label %noerr_block, !dbg !708

guard_block:                                      ; preds = %assign_optional
  %17 = load i64, ptr %error_var, align 8, !dbg !708
  ret i64 %17, !dbg !708

noerr_block:                                      ; preds = %after_check
  %18 = load i64, ptr %.anon, align 8, !dbg !701
  %addnuw = add nuw i64 %18, 1, !dbg !701
  store i64 %addnuw, ptr %.anon, align 8, !dbg !701
  br label %loop.cond, !dbg !701

loop.exit:                                        ; preds = %loop.cond
  %ptradd8 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !709
  %19 = load i64, ptr %ptradd8, align 8, !dbg !709
  store i64 %19, ptr %0, align 8, !dbg !709
  ret i64 0, !dbg !709

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !698
  call void %20(ptr @.panic_msg, i64 62, ptr @.file.44, i64 20, ptr @.func.67, i64 9, i32 191) #5, !dbg !698
  unreachable, !dbg !698

panic3:                                           ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr4, align 8
  %23 = insertvalue %any undef, ptr %taddr4, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd5, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.44, i64 20, ptr @.func.67, i64 9, i32 193, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !707
  unreachable, !dbg !707
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.etoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !710 {
entry:
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !714
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !714
  br i1 %4, label %panic, label %checkok, !dbg !714

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !715, !DIExpression(), !716)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !717, !DIExpression(), !718)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 1, double %6), !dbg !714
  %not_err = icmp eq i64 %7, 0, !dbg !714
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !714
  br i1 %8, label %after_check, label %assign_optional, !dbg !714

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !714
  br label %err_retblock, !dbg !714

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !714
  store i64 %9, ptr %0, align 8, !dbg !714
  ret i64 0, !dbg !714

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !714
  ret i64 %10, !dbg !714

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !716
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.44, i64 20, ptr @.func.68, i64 4, i32 205) #5, !dbg !716
  unreachable, !dbg !716
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.ftoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !719 {
entry:
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !720
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !720
  br i1 %4, label %panic, label %checkok, !dbg !720

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !721, !DIExpression(), !722)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !723, !DIExpression(), !724)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 0, double %6), !dbg !720
  %not_err = icmp eq i64 %7, 0, !dbg !720
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !720
  br i1 %8, label %after_check, label %assign_optional, !dbg !720

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !720
  br label %err_retblock, !dbg !720

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !720
  store i64 %9, ptr %0, align 8, !dbg !720
  ret i64 0, !dbg !720

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !720
  ret i64 %10, !dbg !720

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !722
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.44, i64 20, ptr @.func.69, i64 4, i32 206) #5, !dbg !722
  unreachable, !dbg !722
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.gtoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !725 {
entry:
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !726
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !726
  br i1 %4, label %panic, label %checkok, !dbg !726

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !727, !DIExpression(), !728)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !729, !DIExpression(), !730)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 2, double %6), !dbg !726
  %not_err = icmp eq i64 %7, 0, !dbg !726
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !726
  br i1 %8, label %after_check, label %assign_optional, !dbg !726

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !726
  br label %err_retblock, !dbg !726

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !726
  store i64 %9, ptr %0, align 8, !dbg !726
  ret i64 0, !dbg !726

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !726
  ret i64 %10, !dbg !726

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !728
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.44, i64 20, ptr @.func.70, i64 4, i32 207) #5, !dbg !728
  unreachable, !dbg !728
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.atoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !731 {
entry:
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !732
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !732
  br i1 %4, label %panic, label %checkok, !dbg !732

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !733, !DIExpression(), !734)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !735, !DIExpression(), !736)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 3, double %6), !dbg !732
  %not_err = icmp eq i64 %7, 0, !dbg !732
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !732
  br i1 %8, label %after_check, label %assign_optional, !dbg !732

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !732
  br label %err_retblock, !dbg !732

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !732
  store i64 %9, ptr %0, align 8, !dbg !732
  ret i64 0, !dbg !732

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !732
  ret i64 %10, !dbg !732

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !734
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.44, i64 20, ptr @.func.71, i64 4, i32 208) #5, !dbg !734
  unreachable, !dbg !734
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.floatformat(ptr %0, ptr %1, i32 %2, double %3) #0 !dbg !737 {
entry:
  %self = alloca ptr, align 8
  %formatting = alloca i32, align 4
  %y = alloca double, align 8
  %big = alloca [126 x i32], align 16
  %is_neg = alloca i8, align 1
  %x = alloca double, align 8
  %expr = alloca double, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %pl = alloca i64, align 8
  %x8 = alloca double, align 8
  %expr9 = alloca double, align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %s = alloca %"char[]", align 8
  %x35 = alloca double, align 8
  %expr36 = alloca double, align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %varargslots43 = alloca [2 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %error_var57 = alloca i64, align 8
  %retparam59 = alloca i64, align 8
  %error_var67 = alloca i64, align 8
  %retparam68 = alloca i64, align 8
  %error_var80 = alloca i64, align 8
  %retparam85 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %e2 = alloca i32, align 4
  %x94 = alloca double, align 8
  %e = alloca ptr, align 8
  %ebuf0 = alloca [12 x i8], align 1
  %ebuf = alloca ptr, align 8
  %buf_array = alloca [22 x i8], align 16
  %buf = alloca ptr, align 8
  %p = alloca i64, align 8
  %round = alloca double, align 8
  %re = alloca i32, align 4
  %estr = alloca ptr, align 8
  %taddr140 = alloca i128, align 16
  %s165 = alloca ptr, align 8
  %xdigits = alloca ptr, align 8
  %x173 = alloca i32, align 4
  %outlen = alloca i64, align 8
  %explen = alloca i64, align 8
  %len209 = alloca i64, align 8
  %l = alloca i64, align 8
  %error_var234 = alloca i64, align 8
  %retparam239 = alloca i64, align 8
  %error_var254 = alloca i64, align 8
  %retparam256 = alloca i64, align 8
  %error_var264 = alloca i64, align 8
  %retparam269 = alloca i64, align 8
  %error_var279 = alloca i64, align 8
  %retparam284 = alloca i64, align 8
  %error_var292 = alloca i64, align 8
  %taddr297 = alloca i64, align 8
  %varargslots298 = alloca [1 x %any], align 16
  %indirectarg300 = alloca %"any[]", align 8
  %retparam302 = alloca i64, align 8
  %error_var309 = alloca i64, align 8
  %retparam312 = alloca i64, align 8
  %error_var319 = alloca i64, align 8
  %taddr324 = alloca i64, align 8
  %varargslots325 = alloca [1 x %any], align 16
  %indirectarg327 = alloca %"any[]", align 8
  %retparam330 = alloca i64, align 8
  %error_var341 = alloca i64, align 8
  %retparam346 = alloca i64, align 8
  %reterr354 = alloca i64, align 8
  %a = alloca ptr, align 8
  %z = alloca ptr, align 8
  %r = alloca ptr, align 8
  %v = alloca i32, align 4
  %carry = alloca i32, align 4
  %sh = alloca i32, align 4
  %x379 = alloca i32, align 4
  %y380 = alloca i32, align 4
  %d = alloca ptr, align 8
  %x384 = alloca i64, align 8
  %taddr389 = alloca i64, align 8
  %taddr390 = alloca i64, align 8
  %varargslots391 = alloca [2 x %any], align 16
  %indirectarg394 = alloca %"any[]", align 8
  %taddr399 = alloca i64, align 8
  %varargslots400 = alloca [1 x %any], align 16
  %indirectarg402 = alloca %"any[]", align 8
  %taddr410 = alloca i64, align 8
  %taddr411 = alloca i64, align 8
  %varargslots412 = alloca [2 x %any], align 16
  %indirectarg415 = alloca %"any[]", align 8
  %taddr428 = alloca i64, align 8
  %taddr429 = alloca i64, align 8
  %varargslots430 = alloca [2 x %any], align 16
  %indirectarg433 = alloca %"any[]", align 8
  %carry450 = alloca i32, align 4
  %b = alloca ptr, align 8
  %sh451 = alloca i32, align 4
  %x452 = alloca i32, align 4
  %y454 = alloca i32, align 4
  %need = alloca i32, align 4
  %d460 = alloca ptr, align 8
  %rm = alloca i32, align 4
  %taddr468 = alloca i64, align 8
  %taddr469 = alloca i64, align 8
  %varargslots470 = alloca [2 x %any], align 16
  %indirectarg473 = alloca %"any[]", align 8
  %taddr476 = alloca i32, align 4
  %varargslots477 = alloca [1 x %any], align 16
  %indirectarg479 = alloca %"any[]", align 8
  %taddr483 = alloca i32, align 4
  %varargslots484 = alloca [1 x %any], align 16
  %indirectarg486 = alloca %"any[]", align 8
  %taddr495 = alloca i64, align 8
  %taddr496 = alloca i64, align 8
  %varargslots497 = alloca [2 x %any], align 16
  %indirectarg500 = alloca %"any[]", align 8
  %taddr506 = alloca i64, align 8
  %taddr507 = alloca i64, align 8
  %varargslots508 = alloca [2 x %any], align 16
  %indirectarg511 = alloca %"any[]", align 8
  %taddr515 = alloca i32, align 4
  %varargslots516 = alloca [1 x %any], align 16
  %indirectarg518 = alloca %"any[]", align 8
  %taddr524 = alloca i32, align 4
  %varargslots525 = alloca [1 x %any], align 16
  %indirectarg527 = alloca %"any[]", align 8
  %taddr531 = alloca i32, align 4
  %varargslots532 = alloca [1 x %any], align 16
  %indirectarg534 = alloca %"any[]", align 8
  %e558 = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr568 = alloca i64, align 8
  %taddr569 = alloca i64, align 8
  %varargslots570 = alloca [2 x %any], align 16
  %indirectarg573 = alloca %"any[]", align 8
  %j = alloca i32, align 4
  %x600 = alloca i32, align 4
  %d601 = alloca ptr, align 8
  %i610 = alloca i32, align 4
  %taddr622 = alloca i64, align 8
  %taddr623 = alloca i64, align 8
  %varargslots624 = alloca [2 x %any], align 16
  %indirectarg627 = alloca %"any[]", align 8
  %round639 = alloca double, align 8
  %small = alloca double, align 8
  %taddr644 = alloca i64, align 8
  %taddr645 = alloca i64, align 8
  %varargslots646 = alloca [2 x %any], align 16
  %indirectarg649 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr701 = alloca i64, align 8
  %taddr702 = alloca i64, align 8
  %varargslots703 = alloca [2 x %any], align 16
  %indirectarg706 = alloca %"any[]", align 8
  %taddr716 = alloca i64, align 8
  %taddr717 = alloca i64, align 8
  %varargslots718 = alloca [2 x %any], align 16
  %indirectarg721 = alloca %"any[]", align 8
  %taddr727 = alloca i64, align 8
  %taddr728 = alloca i64, align 8
  %varargslots729 = alloca [2 x %any], align 16
  %indirectarg732 = alloca %"any[]", align 8
  %taddr740 = alloca i64, align 8
  %taddr741 = alloca i64, align 8
  %varargslots742 = alloca [2 x %any], align 16
  %indirectarg745 = alloca %"any[]", align 8
  %taddr754 = alloca i64, align 8
  %taddr755 = alloca i64, align 8
  %varargslots756 = alloca [2 x %any], align 16
  %indirectarg759 = alloca %"any[]", align 8
  %taddr768 = alloca i64, align 8
  %taddr769 = alloca i64, align 8
  %varargslots770 = alloca [2 x %any], align 16
  %indirectarg773 = alloca %"any[]", align 8
  %taddr780 = alloca i64, align 8
  %taddr781 = alloca i64, align 8
  %varargslots782 = alloca [2 x %any], align 16
  %indirectarg785 = alloca %"any[]", align 8
  %taddr796 = alloca i64, align 8
  %taddr797 = alloca i64, align 8
  %varargslots798 = alloca [2 x %any], align 16
  %indirectarg801 = alloca %"any[]", align 8
  %i859 = alloca i32, align 4
  %x875 = alloca i64, align 8
  %x876 = alloca i64, align 8
  %y881 = alloca i64, align 8
  %y882 = alloca i64, align 8
  %x884 = alloca i64, align 8
  %x885 = alloca i64, align 8
  %y892 = alloca i64, align 8
  %y893 = alloca i64, align 8
  %l909 = alloca i32, align 4
  %estr921 = alloca ptr, align 8
  %taddr940 = alloca i128, align 16
  %len976 = alloca i64, align 8
  %error_var988 = alloca i64, align 8
  %retparam994 = alloca i64, align 8
  %error_var1009 = alloca i64, align 8
  %retparam1011 = alloca i64, align 8
  %error_var1022 = alloca i64, align 8
  %retparam1028 = alloca i64, align 8
  %d1041 = alloca ptr, align 8
  %s1045 = alloca ptr, align 8
  %taddr1050 = alloca i64, align 8
  %taddr1051 = alloca i64, align 8
  %varargslots1052 = alloca [2 x %any], align 16
  %indirectarg1055 = alloca %"any[]", align 8
  %taddr1059 = alloca i128, align 16
  %switch1063 = alloca i8, align 1
  %error_var1084 = alloca i64, align 8
  %taddr1090 = alloca i64, align 8
  %varargslots1091 = alloca [1 x %any], align 16
  %indirectarg1093 = alloca %"any[]", align 8
  %retparam1096 = alloca i64, align 8
  %error_var1113 = alloca i64, align 8
  %retparam1114 = alloca i64, align 8
  %s1129 = alloca ptr, align 8
  %taddr1134 = alloca i64, align 8
  %taddr1135 = alloca i64, align 8
  %varargslots1136 = alloca [2 x %any], align 16
  %indirectarg1139 = alloca %"any[]", align 8
  %taddr1143 = alloca i128, align 16
  %error_var1155 = alloca i64, align 8
  %x1156 = alloca i64, align 8
  %y1157 = alloca i64, align 8
  %taddr1162 = alloca i64, align 8
  %varargslots1163 = alloca [1 x %any], align 16
  %indirectarg1165 = alloca %"any[]", align 8
  %retparam1168 = alloca i64, align 8
  %error_var1178 = alloca i64, align 8
  %retparam1180 = alloca i64, align 8
  %d1192 = alloca ptr, align 8
  %s1200 = alloca ptr, align 8
  %taddr1205 = alloca i64, align 8
  %taddr1206 = alloca i64, align 8
  %varargslots1207 = alloca [2 x %any], align 16
  %indirectarg1210 = alloca %"any[]", align 8
  %taddr1214 = alloca i128, align 16
  %error_var1231 = alloca i64, align 8
  %retparam1233 = alloca i64, align 8
  %error_var1248 = alloca i64, align 8
  %retparam1249 = alloca i64, align 8
  %error_var1258 = alloca i64, align 8
  %x1260 = alloca i64, align 8
  %y1261 = alloca i64, align 8
  %taddr1266 = alloca i64, align 8
  %varargslots1267 = alloca [1 x %any], align 16
  %indirectarg1269 = alloca %"any[]", align 8
  %retparam1272 = alloca i64, align 8
  %error_var1283 = alloca i64, align 8
  %retparam1285 = alloca i64, align 8
  %error_var1292 = alloca i64, align 8
  %taddr1297 = alloca i64, align 8
  %varargslots1298 = alloca [1 x %any], align 16
  %indirectarg1300 = alloca %"any[]", align 8
  %retparam1303 = alloca i64, align 8
  %error_var1315 = alloca i64, align 8
  %retparam1321 = alloca i64, align 8
  %reterr1329 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !740
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !740
  br i1 %5, label %panic, label %checkok, !dbg !740

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !741, !DIExpression(), !742)
  store i32 %2, ptr %formatting, align 4
    #dbg_declare(ptr %formatting, !743, !DIExpression(), !744)
  store double %3, ptr %y, align 8
    #dbg_declare(ptr %y, !745, !DIExpression(), !746)
    #dbg_declare(ptr %big, !747, !DIExpression(), !751)
  call void @llvm.memset.p0.i64(ptr align 16 %big, i8 0, i64 504, i1 false), !dbg !751
    #dbg_declare(ptr %is_neg, !752, !DIExpression(), !754)
  store i8 0, ptr %is_neg, align 1, !dbg !755
  %6 = load double, ptr %y, align 8
  store double %6, ptr %x, align 8
  %7 = load double, ptr %x, align 8
  store double %7, ptr %expr, align 8
  %checknull = icmp eq ptr %expr, null, !dbg !756
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !756
  br i1 %8, label %panic1, label %checkok2, !dbg !756

checkok2:                                         ; preds = %checkok
  %9 = ptrtoint ptr %expr to i64, !dbg !762
  %10 = urem i64 %9, 8, !dbg !762
  %11 = icmp ne i64 %10, 0, !dbg !762
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !762
  br i1 %12, label %panic3, label %checkok5, !dbg !762

checkok5:                                         ; preds = %checkok2
  %13 = load i64, ptr %expr, align 8, !dbg !762
  %lshr = lshr i64 %13, 63, !dbg !763
  %14 = freeze i64 %lshr, !dbg !763
  %trunc = trunc i64 %14 to i32, !dbg !763
  %i2b = icmp ne i32 %trunc, 0, !dbg !763
  br i1 %i2b, label %if.then, label %if.exit, !dbg !763

if.then:                                          ; preds = %checkok5
  store i8 1, ptr %is_neg, align 1, !dbg !764
  %15 = load double, ptr %y, align 8, !dbg !766
  %fneg = fneg double %15, !dbg !766
  store double %fneg, ptr %y, align 8, !dbg !766
  br label %if.exit, !dbg !766

if.exit:                                          ; preds = %if.then, %checkok5
    #dbg_declare(ptr %pl, !767, !DIExpression(), !768)
  %16 = load i8, ptr %is_neg, align 1, !dbg !769
  %17 = trunc i8 %16 to i1, !dbg !769
  br i1 %17, label %or.phi, label %or.rhs, !dbg !769

or.rhs:                                           ; preds = %if.exit
  %18 = load ptr, ptr %self, align 8, !dbg !770
  %ptradd6 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !770
  %19 = load i32, ptr %ptradd6, align 8, !dbg !770
  %lshrl = lshr i32 %19, 2, !dbg !770
  %20 = and i32 1, %lshrl, !dbg !770
  %trunc7 = trunc i32 %20 to i8, !dbg !770
  %21 = trunc i8 %trunc7 to i1, !dbg !770
  br label %or.phi, !dbg !770

or.phi:                                           ; preds = %or.rhs, %if.exit
  %val = phi i1 [ true, %if.exit ], [ %21, %or.rhs ], !dbg !770
  %ternary = select i1 %val, i64 1, i64 0, !dbg !771
  store i64 %ternary, ptr %pl, align 8, !dbg !771
  %22 = load double, ptr %y, align 8
  store double %22, ptr %x8, align 8
  %23 = load double, ptr %x8, align 8
  store double %23, ptr %expr9, align 8
  %checknull10 = icmp eq ptr %expr9, null, !dbg !772
  %24 = call i1 @llvm.expect.i1(i1 %checknull10, i1 false), !dbg !772
  br i1 %24, label %panic11, label %checkok12, !dbg !772

checkok12:                                        ; preds = %or.phi
  %25 = ptrtoint ptr %expr9 to i64, !dbg !777
  %26 = urem i64 %25, 8, !dbg !777
  %27 = icmp ne i64 %26, 0, !dbg !777
  %28 = call i1 @llvm.expect.i1(i1 %27, i1 false), !dbg !777
  br i1 %28, label %panic13, label %checkok20, !dbg !777

checkok20:                                        ; preds = %checkok12
  %29 = load i64, ptr %expr9, align 8, !dbg !777
  %and = and i64 %29, 9223372036854775807, !dbg !774
  %lt = icmp ult i64 %and, 9218868437227405312, !dbg !774
  %not = xor i1 %lt, true, !dbg !774
  br i1 %not, label %if.then21, label %if.exit93, !dbg !774

if.then21:                                        ; preds = %checkok20
    #dbg_declare(ptr %len, !778, !DIExpression(), !780)
  store i64 0, ptr %len, align 8, !dbg !780
  %30 = load ptr, ptr %self, align 8, !dbg !781
  %ptradd22 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !781
  %31 = load i32, ptr %ptradd22, align 8, !dbg !781
  %lshrl23 = lshr i32 %31, 1, !dbg !781
  %32 = and i32 1, %lshrl23, !dbg !781
  %trunc24 = trunc i32 %32 to i8, !dbg !781
  %33 = trunc i8 %trunc24 to i1, !dbg !781
  %not25 = xor i1 %33, true, !dbg !781
  br i1 %not25, label %if.then26, label %if.exit30, !dbg !781

if.then26:                                        ; preds = %if.then21
  %34 = load i64, ptr %len, align 8, !dbg !782
  %35 = load ptr, ptr %self, align 8, !dbg !783
  %ptradd27 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !783
  %ptradd28 = getelementptr inbounds i8, ptr %ptradd27, i64 4, !dbg !783
  %36 = load i32, ptr %ptradd28, align 4, !dbg !783
  %zext = zext i32 %36 to i64, !dbg !783
  %37 = load i64, ptr %pl, align 8, !dbg !784
  %add = add i64 3, %37, !dbg !785
  %38 = load ptr, ptr %self, align 8
  %39 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %38, i8 zeroext 32, i64 %zext, i64 %add) #6, !dbg !786
  %not_err = icmp eq i64 %39, 0, !dbg !786
  %40 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !786
  br i1 %40, label %after_check, label %assign_optional, !dbg !786

assign_optional:                                  ; preds = %if.then26
  store i64 %39, ptr %error_var, align 8, !dbg !786
  br label %guard_block, !dbg !786

after_check:                                      ; preds = %if.then26
  br label %noerr_block, !dbg !786

guard_block:                                      ; preds = %assign_optional
  %41 = load i64, ptr %error_var, align 8, !dbg !786
  ret i64 %41, !dbg !786

noerr_block:                                      ; preds = %after_check
  %42 = load i64, ptr %retparam, align 8, !dbg !786
  %add29 = add i64 %34, %42, !dbg !782
  store i64 %add29, ptr %len, align 8, !dbg !782
  br label %if.exit30, !dbg !782

if.exit30:                                        ; preds = %noerr_block, %if.then21
    #dbg_declare(ptr %s, !787, !DIExpression(), !788)
  %43 = load ptr, ptr %self, align 8, !dbg !789
  %ptradd31 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !789
  %44 = load i32, ptr %ptradd31, align 8, !dbg !789
  %lshrl32 = lshr i32 %44, 5, !dbg !789
  %45 = and i32 1, %lshrl32, !dbg !789
  %trunc33 = trunc i32 %45 to i8, !dbg !789
  %46 = trunc i8 %trunc33 to i1, !dbg !789
  %ternary34 = select i1 %46, %"char[]" { ptr @.str.73, i64 3 }, %"char[]" { ptr @.str.74, i64 3 }, !dbg !790
  store %"char[]" %ternary34, ptr %s, align 8, !dbg !790
  %47 = load double, ptr %y, align 8
  store double %47, ptr %x35, align 8
  %48 = load double, ptr %x35, align 8
  store double %48, ptr %expr36, align 8
  %checknull37 = icmp eq ptr %expr36, null, !dbg !791
  %49 = call i1 @llvm.expect.i1(i1 %checknull37, i1 false), !dbg !791
  br i1 %49, label %panic38, label %checkok39, !dbg !791

checkok39:                                        ; preds = %if.exit30
  %50 = ptrtoint ptr %expr36 to i64, !dbg !796
  %51 = urem i64 %50, 8, !dbg !796
  %52 = icmp ne i64 %51, 0, !dbg !796
  %53 = call i1 @llvm.expect.i1(i1 %52, i1 false), !dbg !796
  br i1 %53, label %panic40, label %checkok47, !dbg !796

checkok47:                                        ; preds = %checkok39
  %54 = load i64, ptr %expr36, align 8, !dbg !796
  %and48 = and i64 %54, 9223372036854775807, !dbg !793
  %gt = icmp ugt i64 %and48, 9218868437227405312, !dbg !793
  br i1 %gt, label %if.then49, label %if.exit54, !dbg !793

if.then49:                                        ; preds = %checkok47
  %55 = load ptr, ptr %self, align 8, !dbg !797
  %ptradd50 = getelementptr inbounds i8, ptr %55, i64 16, !dbg !797
  %56 = load i32, ptr %ptradd50, align 8, !dbg !797
  %lshrl51 = lshr i32 %56, 5, !dbg !797
  %57 = and i32 1, %lshrl51, !dbg !797
  %trunc52 = trunc i32 %57 to i8, !dbg !797
  %58 = trunc i8 %trunc52 to i1, !dbg !797
  %ternary53 = select i1 %58, %"char[]" { ptr @.str.75, i64 3 }, %"char[]" { ptr @.str.76, i64 3 }, !dbg !798
  store %"char[]" %ternary53, ptr %s, align 8, !dbg !798
  br label %if.exit54, !dbg !798

if.exit54:                                        ; preds = %if.then49, %checkok47
  %59 = load i64, ptr %pl, align 8, !dbg !799
  %i2b55 = icmp ne i64 %59, 0, !dbg !799
  br i1 %i2b55, label %if.then56, label %if.exit66, !dbg !799

if.then56:                                        ; preds = %if.exit54
  %60 = load i64, ptr %len, align 8, !dbg !800
  %61 = load i8, ptr %is_neg, align 1, !dbg !801
  %62 = trunc i8 %61 to i1, !dbg !801
  %ternary58 = select i1 %62, i8 45, i8 43, !dbg !802
  %63 = load ptr, ptr %self, align 8
  %64 = call i64 @std.io.Formatter.out(ptr %retparam59, ptr %63, i8 zeroext %ternary58), !dbg !803
  %not_err60 = icmp eq i64 %64, 0, !dbg !803
  %65 = call i1 @llvm.expect.i1(i1 %not_err60, i1 true), !dbg !803
  br i1 %65, label %after_check62, label %assign_optional61, !dbg !803

assign_optional61:                                ; preds = %if.then56
  store i64 %64, ptr %error_var57, align 8, !dbg !803
  br label %guard_block63, !dbg !803

after_check62:                                    ; preds = %if.then56
  br label %noerr_block64, !dbg !803

guard_block63:                                    ; preds = %assign_optional61
  %66 = load i64, ptr %error_var57, align 8, !dbg !803
  ret i64 %66, !dbg !803

noerr_block64:                                    ; preds = %after_check62
  %67 = load i64, ptr %retparam59, align 8, !dbg !803
  %add65 = add i64 %60, %67, !dbg !800
  store i64 %add65, ptr %len, align 8, !dbg !800
  br label %if.exit66, !dbg !800

if.exit66:                                        ; preds = %noerr_block64, %if.exit54
  %68 = load i64, ptr %len, align 8, !dbg !804
  %69 = load ptr, ptr %self, align 8
  %lo = load ptr, ptr %s, align 8
  %ptradd69 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd69, align 8
  %70 = call i64 @std.io.Formatter.out_chars(ptr %retparam68, ptr %69, ptr %lo, i64 %hi), !dbg !805
  %not_err70 = icmp eq i64 %70, 0, !dbg !805
  %71 = call i1 @llvm.expect.i1(i1 %not_err70, i1 true), !dbg !805
  br i1 %71, label %after_check72, label %assign_optional71, !dbg !805

assign_optional71:                                ; preds = %if.exit66
  store i64 %70, ptr %error_var67, align 8, !dbg !805
  br label %guard_block73, !dbg !805

after_check72:                                    ; preds = %if.exit66
  br label %noerr_block74, !dbg !805

guard_block73:                                    ; preds = %assign_optional71
  %72 = load i64, ptr %error_var67, align 8, !dbg !805
  ret i64 %72, !dbg !805

noerr_block74:                                    ; preds = %after_check72
  %73 = load i64, ptr %retparam68, align 8, !dbg !805
  %add75 = add i64 %68, %73, !dbg !804
  store i64 %add75, ptr %len, align 8, !dbg !804
  %74 = load ptr, ptr %self, align 8, !dbg !806
  %ptradd76 = getelementptr inbounds i8, ptr %74, i64 16, !dbg !806
  %75 = load i32, ptr %ptradd76, align 8, !dbg !806
  %lshrl77 = lshr i32 %75, 1, !dbg !806
  %76 = and i32 1, %lshrl77, !dbg !806
  %trunc78 = trunc i32 %76 to i8, !dbg !806
  %77 = trunc i8 %trunc78 to i1, !dbg !806
  br i1 %77, label %if.then79, label %if.exit92, !dbg !806

if.then79:                                        ; preds = %noerr_block74
  %78 = load i64, ptr %len, align 8, !dbg !807
  %79 = load ptr, ptr %self, align 8, !dbg !808
  %ptradd81 = getelementptr inbounds i8, ptr %79, i64 16, !dbg !808
  %ptradd82 = getelementptr inbounds i8, ptr %ptradd81, i64 4, !dbg !808
  %80 = load i32, ptr %ptradd82, align 4, !dbg !808
  %zext83 = zext i32 %80 to i64, !dbg !808
  %81 = load i64, ptr %pl, align 8, !dbg !809
  %add84 = add i64 3, %81, !dbg !810
  %82 = load ptr, ptr %self, align 8
  %83 = call i64 @std.io.Formatter.pad(ptr %retparam85, ptr %82, i8 zeroext 32, i64 %zext83, i64 %add84) #6, !dbg !811
  %not_err86 = icmp eq i64 %83, 0, !dbg !811
  %84 = call i1 @llvm.expect.i1(i1 %not_err86, i1 true), !dbg !811
  br i1 %84, label %after_check88, label %assign_optional87, !dbg !811

assign_optional87:                                ; preds = %if.then79
  store i64 %83, ptr %error_var80, align 8, !dbg !811
  br label %guard_block89, !dbg !811

after_check88:                                    ; preds = %if.then79
  br label %noerr_block90, !dbg !811

guard_block89:                                    ; preds = %assign_optional87
  %85 = load i64, ptr %error_var80, align 8, !dbg !811
  ret i64 %85, !dbg !811

noerr_block90:                                    ; preds = %after_check88
  %86 = load i64, ptr %retparam85, align 8, !dbg !811
  %add91 = add i64 %78, %86, !dbg !807
  store i64 %add91, ptr %len, align 8, !dbg !807
  br label %if.exit92, !dbg !807

if.exit92:                                        ; preds = %noerr_block90, %noerr_block74
  %87 = load i64, ptr %len, align 8, !dbg !812
  store i64 %87, ptr %0, align 8, !dbg !812
  ret i64 0, !dbg !812

if.exit93:                                        ; preds = %checkok20
    #dbg_declare(ptr %e2, !813, !DIExpression(), !814)
  store i32 0, ptr %e2, align 4, !dbg !814
  %88 = load double, ptr %y, align 8
  store double %88, ptr %x94, align 8
  store ptr %e2, ptr %e, align 8
  %89 = load double, ptr %x94, align 8, !dbg !815
  %90 = load ptr, ptr %e, align 8, !dbg !815
  %91 = call double @std.math._frexp(double %89, ptr %90), !dbg !818
  %fmul = fmul double %91, 2.000000e+00, !dbg !817
  store double %fmul, ptr %y, align 8, !dbg !817
  %92 = load double, ptr %y, align 8, !dbg !819
  %neq = fcmp one double %92, 0.000000e+00, !dbg !819
  br i1 %neq, label %if.then95, label %if.exit96, !dbg !819

if.then95:                                        ; preds = %if.exit93
  %93 = load i32, ptr %e2, align 4, !dbg !820
  %sub = sub i32 %93, 1, !dbg !820
  store i32 %sub, ptr %e2, align 4, !dbg !820
  br label %if.exit96, !dbg !820

if.exit96:                                        ; preds = %if.then95, %if.exit93
    #dbg_declare(ptr %ebuf0, !821, !DIExpression(), !825)
  store i8 0, ptr %ebuf0, align 1, !dbg !825
  %ptradd97 = getelementptr inbounds i8, ptr %ebuf0, i64 1, !dbg !825
  store i8 0, ptr %ptradd97, align 1, !dbg !825
  %ptradd98 = getelementptr inbounds i8, ptr %ebuf0, i64 2, !dbg !825
  store i8 0, ptr %ptradd98, align 1, !dbg !825
  %ptradd99 = getelementptr inbounds i8, ptr %ebuf0, i64 3, !dbg !825
  store i8 0, ptr %ptradd99, align 1, !dbg !825
  %ptradd100 = getelementptr inbounds i8, ptr %ebuf0, i64 4, !dbg !825
  store i8 0, ptr %ptradd100, align 1, !dbg !825
  %ptradd101 = getelementptr inbounds i8, ptr %ebuf0, i64 5, !dbg !825
  store i8 0, ptr %ptradd101, align 1, !dbg !825
  %ptradd102 = getelementptr inbounds i8, ptr %ebuf0, i64 6, !dbg !825
  store i8 0, ptr %ptradd102, align 1, !dbg !825
  %ptradd103 = getelementptr inbounds i8, ptr %ebuf0, i64 7, !dbg !825
  store i8 0, ptr %ptradd103, align 1, !dbg !825
  %ptradd104 = getelementptr inbounds i8, ptr %ebuf0, i64 8, !dbg !825
  store i8 0, ptr %ptradd104, align 1, !dbg !825
  %ptradd105 = getelementptr inbounds i8, ptr %ebuf0, i64 9, !dbg !825
  store i8 0, ptr %ptradd105, align 1, !dbg !825
  %ptradd106 = getelementptr inbounds i8, ptr %ebuf0, i64 10, !dbg !825
  store i8 0, ptr %ptradd106, align 1, !dbg !825
  %ptradd107 = getelementptr inbounds i8, ptr %ebuf0, i64 11, !dbg !825
  store i8 0, ptr %ptradd107, align 1, !dbg !825
    #dbg_declare(ptr %ebuf, !826, !DIExpression(), !827)
  %ptradd_any = getelementptr i8, ptr %ebuf0, i64 12, !dbg !828
  store ptr %ptradd_any, ptr %ebuf, align 8, !dbg !828
    #dbg_declare(ptr %buf_array, !829, !DIExpression(), !833)
  call void @llvm.memset.p0.i64(ptr align 16 %buf_array, i8 0, i64 22, i1 false), !dbg !833
    #dbg_declare(ptr %buf, !834, !DIExpression(), !835)
  store ptr %buf_array, ptr %buf, align 8, !dbg !836
    #dbg_declare(ptr %p, !837, !DIExpression(), !838)
  %94 = load ptr, ptr %self, align 8, !dbg !839
  %ptradd108 = getelementptr inbounds i8, ptr %94, i64 16, !dbg !839
  %95 = load i32, ptr %ptradd108, align 8, !dbg !839
  %lshrl109 = lshr i32 %95, 6, !dbg !839
  %96 = and i32 1, %lshrl109, !dbg !839
  %trunc110 = trunc i32 %96 to i8, !dbg !839
  %97 = trunc i8 %trunc110 to i1, !dbg !839
  br i1 %97, label %cond.lhs, label %cond.rhs, !dbg !839

cond.lhs:                                         ; preds = %if.exit96
  %98 = load ptr, ptr %self, align 8, !dbg !840
  %ptradd111 = getelementptr inbounds i8, ptr %98, i64 16, !dbg !840
  %ptradd112 = getelementptr inbounds i8, ptr %ptradd111, i64 8, !dbg !840
  %99 = load i32, ptr %ptradd112, align 8, !dbg !840
  br label %cond.phi, !dbg !840

cond.rhs:                                         ; preds = %if.exit96
  br label %cond.phi, !dbg !841

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val113 = phi i32 [ %99, %cond.lhs ], [ -1, %cond.rhs ], !dbg !841
  %sext = sext i32 %val113 to i64, !dbg !841
  store i64 %sext, ptr %p, align 8, !dbg !841
  %100 = load i32, ptr %formatting, align 4, !dbg !842
  %eq = icmp eq i32 %100, 3, !dbg !842
  br i1 %eq, label %if.then114, label %if.exit355, !dbg !842

if.then114:                                       ; preds = %cond.phi
    #dbg_declare(ptr %round, !843, !DIExpression(), !845)
  store double 8.000000e+00, ptr %round, align 8, !dbg !846
  %101 = load i64, ptr %pl, align 8, !dbg !847
  %add115 = add i64 %101, 2, !dbg !847
  store i64 %add115, ptr %pl, align 8, !dbg !847
  %102 = load i64, ptr %p, align 8, !dbg !848
  %gt116 = icmp sgt i64 %102, 0, !dbg !848
  br i1 %gt116, label %and.rhs, label %and.phi, !dbg !848

and.rhs:                                          ; preds = %if.then114
  %103 = load i64, ptr %p, align 8, !dbg !849
  %lt117 = icmp slt i64 %103, 12, !dbg !849
  br label %and.phi, !dbg !849

and.phi:                                          ; preds = %and.rhs, %if.then114
  %val118 = phi i1 [ false, %if.then114 ], [ %lt117, %and.rhs ], !dbg !849
  br i1 %val118, label %if.then119, label %if.exit132, !dbg !849

if.then119:                                       ; preds = %and.phi
    #dbg_declare(ptr %re, !850, !DIExpression(), !852)
  %104 = load i64, ptr %p, align 8, !dbg !853
  %trunc120 = trunc i64 %104 to i32, !dbg !853
  %sub121 = sub i32 12, %trunc120, !dbg !854
  store i32 %sub121, ptr %re, align 4, !dbg !854
  %105 = load double, ptr %round, align 8, !dbg !855
  %fmul122 = fmul double %105, 2.000000e+00, !dbg !855
  store double %fmul122, ptr %round, align 8, !dbg !855
  br label %loop.cond, !dbg !856

loop.cond:                                        ; preds = %loop.body, %if.then119
  %106 = load i32, ptr %re, align 4, !dbg !857
  %sub123 = sub i32 %106, 1, !dbg !857
  store i32 %sub123, ptr %re, align 4, !dbg !857
  %i2b124 = icmp ne i32 %106, 0, !dbg !857
  br i1 %i2b124, label %loop.body, label %loop.exit, !dbg !857

loop.body:                                        ; preds = %loop.cond
  %107 = load double, ptr %round, align 8, !dbg !859
  %fmul125 = fmul double %107, 1.600000e+01, !dbg !859
  store double %fmul125, ptr %round, align 8, !dbg !859
  br label %loop.cond, !dbg !859

loop.exit:                                        ; preds = %loop.cond
  %108 = load i8, ptr %is_neg, align 1, !dbg !860
  %109 = trunc i8 %108 to i1, !dbg !860
  br i1 %109, label %if.then126, label %if.else, !dbg !860

if.then126:                                       ; preds = %loop.exit
  %110 = load double, ptr %y, align 8, !dbg !861
  %fneg127 = fneg double %110, !dbg !861
  store double %fneg127, ptr %y, align 8, !dbg !861
  %111 = load double, ptr %y, align 8, !dbg !863
  %112 = load double, ptr %round, align 8, !dbg !864
  %fsub = fsub double %111, %112, !dbg !863
  store double %fsub, ptr %y, align 8, !dbg !863
  %113 = load double, ptr %y, align 8, !dbg !865
  %114 = load double, ptr %round, align 8, !dbg !866
  %fadd = fadd double %113, %114, !dbg !865
  store double %fadd, ptr %y, align 8, !dbg !865
  %115 = load double, ptr %y, align 8, !dbg !867
  %fneg128 = fneg double %115, !dbg !867
  store double %fneg128, ptr %y, align 8, !dbg !867
  br label %if.exit131, !dbg !867

if.else:                                          ; preds = %loop.exit
  %116 = load double, ptr %y, align 8, !dbg !868
  %117 = load double, ptr %round, align 8, !dbg !870
  %fadd129 = fadd double %116, %117, !dbg !868
  store double %fadd129, ptr %y, align 8, !dbg !868
  %118 = load double, ptr %y, align 8, !dbg !871
  %119 = load double, ptr %round, align 8, !dbg !872
  %fsub130 = fsub double %118, %119, !dbg !871
  store double %fsub130, ptr %y, align 8, !dbg !871
  br label %if.exit131, !dbg !871

if.exit131:                                       ; preds = %if.else, %if.then126
  br label %if.exit132, !dbg !871

if.exit132:                                       ; preds = %if.exit131, %and.phi
    #dbg_declare(ptr %estr, !873, !DIExpression(), !874)
  %120 = load i32, ptr %e2, align 4, !dbg !875
  %lt133 = icmp slt i32 %120, 0, !dbg !875
  br i1 %lt133, label %cond.lhs134, label %cond.rhs136, !dbg !875

cond.lhs134:                                      ; preds = %if.exit132
  %121 = load i32, ptr %e2, align 4, !dbg !876
  %neg = sub i32 0, %121, !dbg !876
  %sext135 = sext i32 %neg to i128, !dbg !876
  br label %cond.phi138, !dbg !876

cond.rhs136:                                      ; preds = %if.exit132
  %122 = load i32, ptr %e2, align 4, !dbg !877
  %sext137 = sext i32 %122 to i128, !dbg !877
  br label %cond.phi138, !dbg !877

cond.phi138:                                      ; preds = %cond.rhs136, %cond.lhs134
  %val139 = phi i128 [ %sext135, %cond.lhs134 ], [ %sext137, %cond.rhs136 ], !dbg !877
  store i128 %val139, ptr %taddr140, align 16
  %lo141 = load i64, ptr %taddr140, align 16
  %ptradd142 = getelementptr inbounds i8, ptr %taddr140, i64 8
  %hi143 = load i64, ptr %ptradd142, align 8
  %123 = load ptr, ptr %ebuf, align 8
  %124 = call ptr @std.io.fmt_u(i64 %lo141, i64 %hi143, ptr %123), !dbg !878
  store ptr %124, ptr %estr, align 8, !dbg !878
  %125 = load ptr, ptr %estr, align 8, !dbg !879
  %126 = load ptr, ptr %ebuf, align 8, !dbg !880
  %eq144 = icmp eq ptr %125, %126, !dbg !879
  br i1 %eq144, label %if.then145, label %if.exit150, !dbg !879

if.then145:                                       ; preds = %cond.phi138
  %127 = load ptr, ptr %estr, align 8, !dbg !881
  %ptradd_any146 = getelementptr i8, ptr %127, i8 -1, !dbg !881
  store ptr %ptradd_any146, ptr %estr, align 8, !dbg !881
  %checknull147 = icmp eq ptr %ptradd_any146, null, !dbg !881
  %128 = call i1 @llvm.expect.i1(i1 %checknull147, i1 false), !dbg !881
  br i1 %128, label %panic148, label %checkok149, !dbg !881

checkok149:                                       ; preds = %if.then145
  store i8 48, ptr %ptradd_any146, align 1, !dbg !882
  br label %if.exit150, !dbg !882

if.exit150:                                       ; preds = %checkok149, %cond.phi138
  %129 = load ptr, ptr %estr, align 8, !dbg !883
  %ptradd_any151 = getelementptr i8, ptr %129, i8 -1, !dbg !883
  store ptr %ptradd_any151, ptr %estr, align 8, !dbg !883
  %checknull152 = icmp eq ptr %ptradd_any151, null, !dbg !883
  %130 = call i1 @llvm.expect.i1(i1 %checknull152, i1 false), !dbg !883
  br i1 %130, label %panic153, label %checkok154, !dbg !883

checkok154:                                       ; preds = %if.exit150
  %131 = load i32, ptr %e2, align 4, !dbg !884
  %lt155 = icmp slt i32 %131, 0, !dbg !884
  %ternary156 = select i1 %lt155, i8 45, i8 43, !dbg !885
  store i8 %ternary156, ptr %ptradd_any151, align 1, !dbg !885
  %132 = load ptr, ptr %estr, align 8, !dbg !886
  %ptradd_any157 = getelementptr i8, ptr %132, i8 -1, !dbg !886
  store ptr %ptradd_any157, ptr %estr, align 8, !dbg !886
  %checknull158 = icmp eq ptr %ptradd_any157, null, !dbg !886
  %133 = call i1 @llvm.expect.i1(i1 %checknull158, i1 false), !dbg !886
  br i1 %133, label %panic159, label %checkok160, !dbg !886

checkok160:                                       ; preds = %checkok154
  %134 = load ptr, ptr %self, align 8, !dbg !887
  %ptradd161 = getelementptr inbounds i8, ptr %134, i64 16, !dbg !887
  %135 = load i32, ptr %ptradd161, align 8, !dbg !887
  %lshrl162 = lshr i32 %135, 5, !dbg !887
  %136 = and i32 1, %lshrl162, !dbg !887
  %trunc163 = trunc i32 %136 to i8, !dbg !887
  %137 = trunc i8 %trunc163 to i1, !dbg !887
  %ternary164 = select i1 %137, i8 80, i8 112, !dbg !888
  store i8 %ternary164, ptr %ptradd_any157, align 1, !dbg !888
    #dbg_declare(ptr %s165, !889, !DIExpression(), !890)
  %138 = load ptr, ptr %buf, align 8, !dbg !891
  store ptr %138, ptr %s165, align 8, !dbg !891
    #dbg_declare(ptr %xdigits, !892, !DIExpression(), !893)
  %139 = load ptr, ptr %self, align 8, !dbg !894
  %ptradd166 = getelementptr inbounds i8, ptr %139, i64 16, !dbg !894
  %140 = load i32, ptr %ptradd166, align 8, !dbg !894
  %lshrl167 = lshr i32 %140, 5, !dbg !894
  %141 = and i32 1, %lshrl167, !dbg !894
  %trunc168 = trunc i32 %141 to i8, !dbg !894
  %142 = trunc i8 %trunc168 to i1, !dbg !894
  %ternary169 = select i1 %142, ptr @std.io.XDIGITS_H, ptr @std.io.XDIGITS_L, !dbg !895
  store ptr %ternary169, ptr %xdigits, align 8, !dbg !895
  br label %loop.body172, !dbg !896

loop.cond170:                                     ; preds = %if.exit202
  %143 = load double, ptr %y, align 8, !dbg !897
  %neq171 = fcmp one double %143, 0.000000e+00, !dbg !897
  br i1 %neq171, label %loop.body172, label %loop.exit203, !dbg !897

loop.body172:                                     ; preds = %loop.cond170, %checkok160
    #dbg_declare(ptr %x173, !899, !DIExpression(), !901)
  %144 = load double, ptr %y, align 8, !dbg !902
  %fpsi = fptosi double %144 to i32, !dbg !902
  store i32 %fpsi, ptr %x173, align 4, !dbg !902
  %145 = load ptr, ptr %s165, align 8, !dbg !903
  %ptradd_any174 = getelementptr i8, ptr %145, i8 1, !dbg !903
  store ptr %ptradd_any174, ptr %s165, align 8, !dbg !903
  %checknull175 = icmp eq ptr %145, null, !dbg !903
  %146 = call i1 @llvm.expect.i1(i1 %checknull175, i1 false), !dbg !903
  br i1 %146, label %panic176, label %checkok177, !dbg !903

checkok177:                                       ; preds = %loop.body172
  %147 = load ptr, ptr %xdigits, align 8, !dbg !904
  %148 = load i32, ptr %x173, align 4, !dbg !905
  %sext178 = sext i32 %148 to i64, !dbg !905
  %ptradd179 = getelementptr inbounds i8, ptr %147, i64 %sext178, !dbg !905
  %149 = load i8, ptr %ptradd179, align 1, !dbg !905
  store i8 %149, ptr %145, align 1, !dbg !905
  %150 = load double, ptr %y, align 8, !dbg !906
  %151 = load i32, ptr %x173, align 4, !dbg !907
  %sifp = sitofp i32 %151 to double, !dbg !907
  %fsub180 = fsub double %150, %sifp, !dbg !906
  %fmul181 = fmul double 1.600000e+01, %fsub180, !dbg !908
  store double %fmul181, ptr %y, align 8, !dbg !908
  %152 = load ptr, ptr %s165, align 8, !dbg !909
  %153 = load ptr, ptr %buf, align 8, !dbg !910
  %154 = ptrtoint ptr %153 to i64, !dbg !909
  %155 = ptrtoint ptr %152 to i64, !dbg !909
  %156 = sub i64 %155, %154, !dbg !909
  %157 = sdiv exact i64 %156, 1, !dbg !909
  %eq182 = icmp eq i64 %157, 1, !dbg !909
  br i1 %eq182, label %and.rhs183, label %and.phi195, !dbg !909

and.rhs183:                                       ; preds = %checkok177
  %158 = load double, ptr %y, align 8, !dbg !911
  %neq184 = fcmp one double %158, 0.000000e+00, !dbg !911
  br i1 %neq184, label %or.phi187, label %or.rhs185, !dbg !911

or.rhs185:                                        ; preds = %and.rhs183
  %159 = load i64, ptr %p, align 8, !dbg !912
  %gt186 = icmp sgt i64 %159, 0, !dbg !912
  br label %or.phi187, !dbg !912

or.phi187:                                        ; preds = %or.rhs185, %and.rhs183
  %val188 = phi i1 [ true, %and.rhs183 ], [ %gt186, %or.rhs185 ], !dbg !912
  br i1 %val188, label %or.phi193, label %or.rhs189, !dbg !912

or.rhs189:                                        ; preds = %or.phi187
  %160 = load ptr, ptr %self, align 8, !dbg !913
  %ptradd190 = getelementptr inbounds i8, ptr %160, i64 16, !dbg !913
  %161 = load i32, ptr %ptradd190, align 8, !dbg !913
  %lshrl191 = lshr i32 %161, 4, !dbg !913
  %162 = and i32 1, %lshrl191, !dbg !913
  %trunc192 = trunc i32 %162 to i8, !dbg !913
  %163 = trunc i8 %trunc192 to i1, !dbg !913
  br label %or.phi193, !dbg !913

or.phi193:                                        ; preds = %or.rhs189, %or.phi187
  %val194 = phi i1 [ true, %or.phi187 ], [ %163, %or.rhs189 ], !dbg !913
  br label %and.phi195, !dbg !913

and.phi195:                                       ; preds = %or.phi193, %checkok177
  %val196 = phi i1 [ false, %checkok177 ], [ %val194, %or.phi193 ], !dbg !913
  br i1 %val196, label %if.then197, label %if.exit202, !dbg !913

if.then197:                                       ; preds = %and.phi195
  %164 = load ptr, ptr %s165, align 8, !dbg !914
  %ptradd_any198 = getelementptr i8, ptr %164, i8 1, !dbg !914
  store ptr %ptradd_any198, ptr %s165, align 8, !dbg !914
  %checknull199 = icmp eq ptr %164, null, !dbg !914
  %165 = call i1 @llvm.expect.i1(i1 %checknull199, i1 false), !dbg !914
  br i1 %165, label %panic200, label %checkok201, !dbg !914

checkok201:                                       ; preds = %if.then197
  store i8 46, ptr %164, align 1, !dbg !915
  br label %if.exit202, !dbg !915

if.exit202:                                       ; preds = %checkok201, %and.phi195
  br label %loop.cond170, !dbg !915

loop.exit203:                                     ; preds = %loop.cond170
    #dbg_declare(ptr %outlen, !916, !DIExpression(), !917)
  %166 = load ptr, ptr %s165, align 8, !dbg !918
  %167 = load ptr, ptr %buf, align 8, !dbg !919
  %168 = ptrtoint ptr %167 to i64, !dbg !918
  %169 = ptrtoint ptr %166 to i64, !dbg !918
  %170 = sub i64 %169, %168, !dbg !918
  %171 = sdiv exact i64 %170, 1, !dbg !918
  store i64 %171, ptr %outlen, align 8, !dbg !918
    #dbg_declare(ptr %explen, !920, !DIExpression(), !921)
  %172 = load ptr, ptr %ebuf, align 8, !dbg !922
  %173 = load ptr, ptr %estr, align 8, !dbg !923
  %174 = ptrtoint ptr %173 to i64, !dbg !922
  %175 = ptrtoint ptr %172 to i64, !dbg !922
  %176 = sub i64 %175, %174, !dbg !922
  %177 = sdiv exact i64 %176, 1, !dbg !922
  store i64 %177, ptr %explen, align 8, !dbg !922
  %178 = load i64, ptr %p, align 8, !dbg !924
  %179 = load i64, ptr %explen, align 8, !dbg !925
  %sub204 = sub i64 2147483645, %179, !dbg !926
  %180 = load i64, ptr %pl, align 8, !dbg !927
  %sub205 = sub i64 %sub204, %180, !dbg !926
  %gt206 = icmp sgt i64 %178, %sub205, !dbg !924
  br i1 %gt206, label %if.then207, label %if.exit208, !dbg !924

if.then207:                                       ; preds = %loop.exit203
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !928

if.exit208:                                       ; preds = %loop.exit203
    #dbg_declare(ptr %len209, !929, !DIExpression(), !930)
  store i64 0, ptr %len209, align 8, !dbg !930
    #dbg_declare(ptr %l, !931, !DIExpression(), !932)
  %181 = load i64, ptr %p, align 8, !dbg !933
  %i2b210 = icmp ne i64 %181, 0, !dbg !933
  br i1 %i2b210, label %and.rhs211, label %and.phi214, !dbg !933

and.rhs211:                                       ; preds = %if.exit208
  %182 = load i64, ptr %outlen, align 8, !dbg !934
  %sub212 = sub i64 %182, 2, !dbg !934
  %183 = load i64, ptr %p, align 8, !dbg !935
  %lt213 = icmp slt i64 %sub212, %183, !dbg !934
  br label %and.phi214, !dbg !934

and.phi214:                                       ; preds = %and.rhs211, %if.exit208
  %val215 = phi i1 [ false, %if.exit208 ], [ %lt213, %and.rhs211 ], !dbg !934
  br i1 %val215, label %cond.lhs216, label %cond.rhs219, !dbg !934

cond.lhs216:                                      ; preds = %and.phi214
  %184 = load i64, ptr %p, align 8, !dbg !936
  %add217 = add i64 %184, 2, !dbg !936
  %185 = load i64, ptr %explen, align 8, !dbg !937
  %add218 = add i64 %add217, %185, !dbg !936
  br label %cond.phi221, !dbg !936

cond.rhs219:                                      ; preds = %and.phi214
  %186 = load i64, ptr %outlen, align 8, !dbg !938
  %187 = load i64, ptr %explen, align 8, !dbg !939
  %add220 = add i64 %186, %187, !dbg !938
  br label %cond.phi221, !dbg !938

cond.phi221:                                      ; preds = %cond.rhs219, %cond.lhs216
  %val222 = phi i64 [ %add218, %cond.lhs216 ], [ %add220, %cond.rhs219 ], !dbg !938
  store i64 %val222, ptr %l, align 8, !dbg !938
  %188 = load ptr, ptr %self, align 8, !dbg !940
  %ptradd223 = getelementptr inbounds i8, ptr %188, i64 16, !dbg !940
  %189 = load i32, ptr %ptradd223, align 8, !dbg !940
  %lshrl224 = lshr i32 %189, 1, !dbg !940
  %190 = and i32 1, %lshrl224, !dbg !940
  %trunc225 = trunc i32 %190 to i8, !dbg !940
  %191 = trunc i8 %trunc225 to i1, !dbg !940
  %not226 = xor i1 %191, true, !dbg !940
  br i1 %not226, label %and.rhs227, label %and.phi231, !dbg !940

and.rhs227:                                       ; preds = %cond.phi221
  %192 = load ptr, ptr %self, align 8, !dbg !941
  %ptradd228 = getelementptr inbounds i8, ptr %192, i64 16, !dbg !941
  %193 = load i32, ptr %ptradd228, align 8, !dbg !941
  %194 = and i32 1, %193, !dbg !941
  %trunc229 = trunc i32 %194 to i8, !dbg !941
  %195 = trunc i8 %trunc229 to i1, !dbg !941
  %not230 = xor i1 %195, true, !dbg !941
  br label %and.phi231, !dbg !941

and.phi231:                                       ; preds = %and.rhs227, %cond.phi221
  %val232 = phi i1 [ false, %cond.phi221 ], [ %not230, %and.rhs227 ], !dbg !941
  br i1 %val232, label %if.then233, label %if.exit246, !dbg !941

if.then233:                                       ; preds = %and.phi231
  %196 = load i64, ptr %len209, align 8, !dbg !942
  %197 = load ptr, ptr %self, align 8, !dbg !943
  %ptradd235 = getelementptr inbounds i8, ptr %197, i64 16, !dbg !943
  %ptradd236 = getelementptr inbounds i8, ptr %ptradd235, i64 4, !dbg !943
  %198 = load i32, ptr %ptradd236, align 4, !dbg !943
  %zext237 = zext i32 %198 to i64, !dbg !943
  %199 = load i64, ptr %pl, align 8, !dbg !944
  %200 = load i64, ptr %l, align 8, !dbg !945
  %add238 = add i64 %199, %200, !dbg !944
  %201 = load ptr, ptr %self, align 8
  %202 = call i64 @std.io.Formatter.pad(ptr %retparam239, ptr %201, i8 zeroext 32, i64 %zext237, i64 %add238) #6, !dbg !946
  %not_err240 = icmp eq i64 %202, 0, !dbg !946
  %203 = call i1 @llvm.expect.i1(i1 %not_err240, i1 true), !dbg !946
  br i1 %203, label %after_check242, label %assign_optional241, !dbg !946

assign_optional241:                               ; preds = %if.then233
  store i64 %202, ptr %error_var234, align 8, !dbg !946
  br label %guard_block243, !dbg !946

after_check242:                                   ; preds = %if.then233
  br label %noerr_block244, !dbg !946

guard_block243:                                   ; preds = %assign_optional241
  %204 = load i64, ptr %error_var234, align 8, !dbg !946
  ret i64 %204, !dbg !946

noerr_block244:                                   ; preds = %after_check242
  %205 = load i64, ptr %retparam239, align 8, !dbg !946
  %add245 = add i64 %196, %205, !dbg !942
  store i64 %add245, ptr %len209, align 8, !dbg !942
  br label %if.exit246, !dbg !942

if.exit246:                                       ; preds = %noerr_block244, %and.phi231
  %206 = load i8, ptr %is_neg, align 1, !dbg !947
  %207 = trunc i8 %206 to i1, !dbg !947
  br i1 %207, label %or.phi251, label %or.rhs247, !dbg !947

or.rhs247:                                        ; preds = %if.exit246
  %208 = load ptr, ptr %self, align 8, !dbg !948
  %ptradd248 = getelementptr inbounds i8, ptr %208, i64 16, !dbg !948
  %209 = load i32, ptr %ptradd248, align 8, !dbg !948
  %lshrl249 = lshr i32 %209, 2, !dbg !948
  %210 = and i32 1, %lshrl249, !dbg !948
  %trunc250 = trunc i32 %210 to i8, !dbg !948
  %211 = trunc i8 %trunc250 to i1, !dbg !948
  br label %or.phi251, !dbg !948

or.phi251:                                        ; preds = %or.rhs247, %if.exit246
  %val252 = phi i1 [ true, %if.exit246 ], [ %211, %or.rhs247 ], !dbg !948
  br i1 %val252, label %if.then253, label %if.exit263, !dbg !948

if.then253:                                       ; preds = %or.phi251
  %212 = load i64, ptr %len209, align 8, !dbg !949
  %213 = load i8, ptr %is_neg, align 1, !dbg !950
  %214 = trunc i8 %213 to i1, !dbg !950
  %ternary255 = select i1 %214, i8 45, i8 43, !dbg !951
  %215 = load ptr, ptr %self, align 8
  %216 = call i64 @std.io.Formatter.out(ptr %retparam256, ptr %215, i8 zeroext %ternary255), !dbg !952
  %not_err257 = icmp eq i64 %216, 0, !dbg !952
  %217 = call i1 @llvm.expect.i1(i1 %not_err257, i1 true), !dbg !952
  br i1 %217, label %after_check259, label %assign_optional258, !dbg !952

assign_optional258:                               ; preds = %if.then253
  store i64 %216, ptr %error_var254, align 8, !dbg !952
  br label %guard_block260, !dbg !952

after_check259:                                   ; preds = %if.then253
  br label %noerr_block261, !dbg !952

guard_block260:                                   ; preds = %assign_optional258
  %218 = load i64, ptr %error_var254, align 8, !dbg !952
  ret i64 %218, !dbg !952

noerr_block261:                                   ; preds = %after_check259
  %219 = load i64, ptr %retparam256, align 8, !dbg !952
  %add262 = add i64 %212, %219, !dbg !949
  store i64 %add262, ptr %len209, align 8, !dbg !949
  br label %if.exit263, !dbg !949

if.exit263:                                       ; preds = %noerr_block261, %or.phi251
  %220 = load i64, ptr %len209, align 8, !dbg !953
  %221 = load ptr, ptr %self, align 8, !dbg !954
  %ptradd265 = getelementptr inbounds i8, ptr %221, i64 16, !dbg !954
  %222 = load i32, ptr %ptradd265, align 8, !dbg !954
  %lshrl266 = lshr i32 %222, 5, !dbg !954
  %223 = and i32 1, %lshrl266, !dbg !954
  %trunc267 = trunc i32 %223 to i8, !dbg !954
  %224 = trunc i8 %trunc267 to i1, !dbg !954
  %ternary268 = select i1 %224, %"char[]" { ptr @.str.79, i64 2 }, %"char[]" { ptr @.str.80, i64 2 }, !dbg !955
  %225 = load ptr, ptr %self, align 8
  %226 = extractvalue %"char[]" %ternary268, 0
  %227 = extractvalue %"char[]" %ternary268, 1
  %228 = call i64 @std.io.Formatter.out_chars(ptr %retparam269, ptr %225, ptr %226, i64 %227), !dbg !956
  %not_err270 = icmp eq i64 %228, 0, !dbg !956
  %229 = call i1 @llvm.expect.i1(i1 %not_err270, i1 true), !dbg !956
  br i1 %229, label %after_check272, label %assign_optional271, !dbg !956

assign_optional271:                               ; preds = %if.exit263
  store i64 %228, ptr %error_var264, align 8, !dbg !956
  br label %guard_block273, !dbg !956

after_check272:                                   ; preds = %if.exit263
  br label %noerr_block274, !dbg !956

guard_block273:                                   ; preds = %assign_optional271
  %230 = load i64, ptr %error_var264, align 8, !dbg !956
  ret i64 %230, !dbg !956

noerr_block274:                                   ; preds = %after_check272
  %231 = load i64, ptr %retparam269, align 8, !dbg !956
  %add275 = add i64 %220, %231, !dbg !953
  store i64 %add275, ptr %len209, align 8, !dbg !953
  %232 = load ptr, ptr %self, align 8, !dbg !957
  %ptradd276 = getelementptr inbounds i8, ptr %232, i64 16, !dbg !957
  %233 = load i32, ptr %ptradd276, align 8, !dbg !957
  %234 = and i32 1, %233, !dbg !957
  %trunc277 = trunc i32 %234 to i8, !dbg !957
  %235 = trunc i8 %trunc277 to i1, !dbg !957
  br i1 %235, label %if.then278, label %if.exit291, !dbg !957

if.then278:                                       ; preds = %noerr_block274
  %236 = load i64, ptr %len209, align 8, !dbg !958
  %237 = load ptr, ptr %self, align 8, !dbg !959
  %ptradd280 = getelementptr inbounds i8, ptr %237, i64 16, !dbg !959
  %ptradd281 = getelementptr inbounds i8, ptr %ptradd280, i64 4, !dbg !959
  %238 = load i32, ptr %ptradd281, align 4, !dbg !959
  %zext282 = zext i32 %238 to i64, !dbg !959
  %239 = load i64, ptr %pl, align 8, !dbg !960
  %240 = load i64, ptr %l, align 8, !dbg !961
  %add283 = add i64 %239, %240, !dbg !960
  %241 = load ptr, ptr %self, align 8
  %242 = call i64 @std.io.Formatter.pad(ptr %retparam284, ptr %241, i8 zeroext 48, i64 %zext282, i64 %add283) #6, !dbg !962
  %not_err285 = icmp eq i64 %242, 0, !dbg !962
  %243 = call i1 @llvm.expect.i1(i1 %not_err285, i1 true), !dbg !962
  br i1 %243, label %after_check287, label %assign_optional286, !dbg !962

assign_optional286:                               ; preds = %if.then278
  store i64 %242, ptr %error_var279, align 8, !dbg !962
  br label %guard_block288, !dbg !962

after_check287:                                   ; preds = %if.then278
  br label %noerr_block289, !dbg !962

guard_block288:                                   ; preds = %assign_optional286
  %244 = load i64, ptr %error_var279, align 8, !dbg !962
  ret i64 %244, !dbg !962

noerr_block289:                                   ; preds = %after_check287
  %245 = load i64, ptr %retparam284, align 8, !dbg !962
  %add290 = add i64 %236, %245, !dbg !958
  store i64 %add290, ptr %len209, align 8, !dbg !958
  br label %if.exit291, !dbg !958

if.exit291:                                       ; preds = %noerr_block289, %noerr_block274
  %246 = load i64, ptr %len209, align 8, !dbg !963
  %247 = load ptr, ptr %buf, align 8, !dbg !964
  %248 = load i64, ptr %outlen, align 8, !dbg !965
  %add293 = add i64 0, %248, !dbg !965
  %gt294 = icmp sgt i64 0, %add293, !dbg !965
  %sub295 = sub i64 %add293, 0, !dbg !965
  %249 = call i1 @llvm.expect.i1(i1 %gt294, i1 false), !dbg !965
  br i1 %249, label %panic296, label %checkok301, !dbg !965

checkok301:                                       ; preds = %if.exit291
  %size = sub i64 %add293, 0, !dbg !964
  %250 = insertvalue %"char[]" undef, ptr %247, 0, !dbg !964
  %251 = insertvalue %"char[]" %250, i64 %size, 1, !dbg !964
  %252 = load ptr, ptr %self, align 8
  %253 = call i64 @std.io.Formatter.out_chars(ptr %retparam302, ptr %252, ptr %247, i64 %size), !dbg !966
  %not_err303 = icmp eq i64 %253, 0, !dbg !966
  %254 = call i1 @llvm.expect.i1(i1 %not_err303, i1 true), !dbg !966
  br i1 %254, label %after_check305, label %assign_optional304, !dbg !966

assign_optional304:                               ; preds = %checkok301
  store i64 %253, ptr %error_var292, align 8, !dbg !966
  br label %guard_block306, !dbg !966

after_check305:                                   ; preds = %checkok301
  br label %noerr_block307, !dbg !966

guard_block306:                                   ; preds = %assign_optional304
  %255 = load i64, ptr %error_var292, align 8, !dbg !966
  ret i64 %255, !dbg !966

noerr_block307:                                   ; preds = %after_check305
  %256 = load i64, ptr %retparam302, align 8, !dbg !966
  %add308 = add i64 %246, %256, !dbg !963
  store i64 %add308, ptr %len209, align 8, !dbg !963
  %257 = load i64, ptr %len209, align 8, !dbg !967
  %258 = load i64, ptr %l, align 8, !dbg !968
  %259 = load i64, ptr %outlen, align 8, !dbg !969
  %sub310 = sub i64 %258, %259, !dbg !968
  %260 = load i64, ptr %explen, align 8, !dbg !970
  %sub311 = sub i64 %sub310, %260, !dbg !968
  %261 = load ptr, ptr %self, align 8
  %262 = call i64 @std.io.Formatter.pad(ptr %retparam312, ptr %261, i8 zeroext 48, i64 %sub311, i64 0) #6, !dbg !971
  %not_err313 = icmp eq i64 %262, 0, !dbg !971
  %263 = call i1 @llvm.expect.i1(i1 %not_err313, i1 true), !dbg !971
  br i1 %263, label %after_check315, label %assign_optional314, !dbg !971

assign_optional314:                               ; preds = %noerr_block307
  store i64 %262, ptr %error_var309, align 8, !dbg !971
  br label %guard_block316, !dbg !971

after_check315:                                   ; preds = %noerr_block307
  br label %noerr_block317, !dbg !971

guard_block316:                                   ; preds = %assign_optional314
  %264 = load i64, ptr %error_var309, align 8, !dbg !971
  ret i64 %264, !dbg !971

noerr_block317:                                   ; preds = %after_check315
  %265 = load i64, ptr %retparam312, align 8, !dbg !971
  %add318 = add i64 %257, %265, !dbg !967
  store i64 %add318, ptr %len209, align 8, !dbg !967
  %266 = load i64, ptr %len209, align 8, !dbg !972
  %267 = load ptr, ptr %estr, align 8, !dbg !973
  %268 = load i64, ptr %explen, align 8, !dbg !974
  %add320 = add i64 0, %268, !dbg !974
  %gt321 = icmp sgt i64 0, %add320, !dbg !974
  %sub322 = sub i64 %add320, 0, !dbg !974
  %269 = call i1 @llvm.expect.i1(i1 %gt321, i1 false), !dbg !974
  br i1 %269, label %panic323, label %checkok328, !dbg !974

checkok328:                                       ; preds = %noerr_block317
  %size329 = sub i64 %add320, 0, !dbg !973
  %270 = insertvalue %"char[]" undef, ptr %267, 0, !dbg !973
  %271 = insertvalue %"char[]" %270, i64 %size329, 1, !dbg !973
  %272 = load ptr, ptr %self, align 8
  %273 = call i64 @std.io.Formatter.out_chars(ptr %retparam330, ptr %272, ptr %267, i64 %size329), !dbg !975
  %not_err331 = icmp eq i64 %273, 0, !dbg !975
  %274 = call i1 @llvm.expect.i1(i1 %not_err331, i1 true), !dbg !975
  br i1 %274, label %after_check333, label %assign_optional332, !dbg !975

assign_optional332:                               ; preds = %checkok328
  store i64 %273, ptr %error_var319, align 8, !dbg !975
  br label %guard_block334, !dbg !975

after_check333:                                   ; preds = %checkok328
  br label %noerr_block335, !dbg !975

guard_block334:                                   ; preds = %assign_optional332
  %275 = load i64, ptr %error_var319, align 8, !dbg !975
  ret i64 %275, !dbg !975

noerr_block335:                                   ; preds = %after_check333
  %276 = load i64, ptr %retparam330, align 8, !dbg !975
  %add336 = add i64 %266, %276, !dbg !972
  store i64 %add336, ptr %len209, align 8, !dbg !972
  %277 = load ptr, ptr %self, align 8, !dbg !976
  %ptradd337 = getelementptr inbounds i8, ptr %277, i64 16, !dbg !976
  %278 = load i32, ptr %ptradd337, align 8, !dbg !976
  %lshrl338 = lshr i32 %278, 1, !dbg !976
  %279 = and i32 1, %lshrl338, !dbg !976
  %trunc339 = trunc i32 %279 to i8, !dbg !976
  %280 = trunc i8 %trunc339 to i1, !dbg !976
  br i1 %280, label %if.then340, label %if.exit353, !dbg !976

if.then340:                                       ; preds = %noerr_block335
  %281 = load i64, ptr %len209, align 8, !dbg !977
  %282 = load ptr, ptr %self, align 8, !dbg !978
  %ptradd342 = getelementptr inbounds i8, ptr %282, i64 16, !dbg !978
  %ptradd343 = getelementptr inbounds i8, ptr %ptradd342, i64 4, !dbg !978
  %283 = load i32, ptr %ptradd343, align 4, !dbg !978
  %zext344 = zext i32 %283 to i64, !dbg !978
  %284 = load i64, ptr %pl, align 8, !dbg !979
  %285 = load i64, ptr %l, align 8, !dbg !980
  %add345 = add i64 %284, %285, !dbg !979
  %286 = load ptr, ptr %self, align 8
  %287 = call i64 @std.io.Formatter.pad(ptr %retparam346, ptr %286, i8 zeroext 32, i64 %zext344, i64 %add345) #6, !dbg !981
  %not_err347 = icmp eq i64 %287, 0, !dbg !981
  %288 = call i1 @llvm.expect.i1(i1 %not_err347, i1 true), !dbg !981
  br i1 %288, label %after_check349, label %assign_optional348, !dbg !981

assign_optional348:                               ; preds = %if.then340
  store i64 %287, ptr %error_var341, align 8, !dbg !981
  br label %guard_block350, !dbg !981

after_check349:                                   ; preds = %if.then340
  br label %noerr_block351, !dbg !981

guard_block350:                                   ; preds = %assign_optional348
  %289 = load i64, ptr %error_var341, align 8, !dbg !981
  ret i64 %289, !dbg !981

noerr_block351:                                   ; preds = %after_check349
  %290 = load i64, ptr %retparam346, align 8, !dbg !981
  %add352 = add i64 %281, %290, !dbg !977
  store i64 %add352, ptr %len209, align 8, !dbg !977
  br label %if.exit353, !dbg !977

if.exit353:                                       ; preds = %noerr_block351, %noerr_block335
  %291 = load i64, ptr %len209, align 8, !dbg !982
  store i64 %291, ptr %0, align 8, !dbg !982
  ret i64 0, !dbg !982

if.exit355:                                       ; preds = %cond.phi
  %292 = load i64, ptr %p, align 8, !dbg !983
  %lt356 = icmp slt i64 %292, 0, !dbg !983
  br i1 %lt356, label %if.then357, label %if.exit358, !dbg !983

if.then357:                                       ; preds = %if.exit355
  store i64 6, ptr %p, align 8, !dbg !984
  br label %if.exit358, !dbg !984

if.exit358:                                       ; preds = %if.then357, %if.exit355
  %293 = load double, ptr %y, align 8, !dbg !985
  %neq359 = fcmp one double %293, 0.000000e+00, !dbg !985
  br i1 %neq359, label %if.then360, label %if.exit363, !dbg !985

if.then360:                                       ; preds = %if.exit358
  %294 = load double, ptr %y, align 8, !dbg !986
  %fmul361 = fmul double %294, 0x41B0000000000000, !dbg !986
  store double %fmul361, ptr %y, align 8, !dbg !986
  %295 = load i32, ptr %e2, align 4, !dbg !988
  %sub362 = sub i32 %295, 28, !dbg !988
  store i32 %sub362, ptr %e2, align 4, !dbg !988
  br label %if.exit363, !dbg !988

if.exit363:                                       ; preds = %if.then360, %if.exit358
    #dbg_declare(ptr %a, !989, !DIExpression(), !991)
  store ptr null, ptr %a, align 8, !dbg !991
    #dbg_declare(ptr %z, !992, !DIExpression(), !993)
  store ptr null, ptr %z, align 8, !dbg !993
    #dbg_declare(ptr %r, !994, !DIExpression(), !995)
  store ptr null, ptr %r, align 8, !dbg !995
  %296 = load i32, ptr %e2, align 4, !dbg !996
  %lt364 = icmp slt i32 %296, 0, !dbg !996
  br i1 %lt364, label %if.then365, label %if.else366, !dbg !996

if.then365:                                       ; preds = %if.exit363
  store ptr %big, ptr %z, align 8, !dbg !997
  store ptr %big, ptr %r, align 8, !dbg !997
  store ptr %big, ptr %a, align 8, !dbg !997
  br label %if.exit368, !dbg !997

if.else366:                                       ; preds = %if.exit363
  %ptradd_any367 = getelementptr i8, ptr %big, i64 288, !dbg !999
  store ptr %ptradd_any367, ptr %z, align 8, !dbg !999
  store ptr %ptradd_any367, ptr %r, align 8, !dbg !999
  store ptr %ptradd_any367, ptr %a, align 8, !dbg !999
  br label %if.exit368, !dbg !999

if.exit368:                                       ; preds = %if.else366, %if.then365
  br label %loop.body371, !dbg !1001

loop.cond369:                                     ; preds = %loop.body371
  %297 = load double, ptr %y, align 8, !dbg !1002
  %neq370 = fcmp one double %297, 0.000000e+00, !dbg !1002
  br i1 %neq370, label %loop.body371, label %loop.exit375, !dbg !1002

loop.body371:                                     ; preds = %loop.cond369, %if.exit368
    #dbg_declare(ptr %v, !1004, !DIExpression(), !1006)
  %298 = load ptr, ptr %z, align 8, !dbg !1007
  %ptradd_any372 = getelementptr i8, ptr %298, i8 4, !dbg !1007
  store ptr %ptradd_any372, ptr %z, align 8, !dbg !1007
  %299 = load double, ptr %y, align 8, !dbg !1008
  %fpui = fptoui double %299 to i32, !dbg !1008
  store i32 %fpui, ptr %298, align 4, !dbg !1008
  store i32 %fpui, ptr %v, align 4, !dbg !1008
  %300 = load double, ptr %y, align 8, !dbg !1009
  %301 = load i32, ptr %v, align 4, !dbg !1010
  %uifp = uitofp i32 %301 to double, !dbg !1010
  %fsub373 = fsub double %300, %uifp, !dbg !1009
  %fmul374 = fmul double 1.000000e+09, %fsub373, !dbg !1011
  store double %fmul374, ptr %y, align 8, !dbg !1011
  br label %loop.cond369, !dbg !1011

loop.exit375:                                     ; preds = %loop.cond369
  br label %loop.cond376, !dbg !1012

loop.cond376:                                     ; preds = %loop.exit444, %loop.exit375
  %302 = load i32, ptr %e2, align 4, !dbg !1013
  %gt377 = icmp sgt i32 %302, 0, !dbg !1013
  br i1 %gt377, label %loop.body378, label %loop.exit446, !dbg !1013

loop.body378:                                     ; preds = %loop.cond376
    #dbg_declare(ptr %carry, !1015, !DIExpression(), !1017)
  store i32 0, ptr %carry, align 4, !dbg !1018
    #dbg_declare(ptr %sh, !1019, !DIExpression(), !1020)
  store i32 29, ptr %x379, align 4
  %303 = load i32, ptr %e2, align 4
  store i32 %303, ptr %y380, align 4
  %304 = load i32, ptr %x379, align 4, !dbg !1021
  %305 = load i32, ptr %y380, align 4, !dbg !1024
  %306 = call i32 @llvm.smin.i32(i32 %304, i32 %305), !dbg !1024
  store i32 %306, ptr %sh, align 4, !dbg !1024
    #dbg_declare(ptr %d, !1025, !DIExpression(), !1027)
  %307 = load ptr, ptr %z, align 8, !dbg !1028
  %ptradd_any381 = getelementptr i8, ptr %307, i64 -4, !dbg !1029
  store ptr %ptradd_any381, ptr %d, align 8, !dbg !1029
  br label %loop.cond382, !dbg !1029

loop.cond382:                                     ; preds = %checkok416, %loop.body378
  %308 = load ptr, ptr %d, align 8, !dbg !1030
  %309 = load ptr, ptr %a, align 8, !dbg !1031
  %ge = icmp uge ptr %308, %309, !dbg !1030
  br i1 %ge, label %loop.body383, label %loop.exit420, !dbg !1030

loop.body383:                                     ; preds = %loop.cond382
    #dbg_declare(ptr %x384, !1032, !DIExpression(), !1034)
  %310 = load ptr, ptr %d, align 8, !dbg !1035
  %checknull385 = icmp eq ptr %310, null, !dbg !1035
  %311 = call i1 @llvm.expect.i1(i1 %checknull385, i1 false), !dbg !1035
  br i1 %311, label %panic386, label %checkok387, !dbg !1035

checkok387:                                       ; preds = %loop.body383
  %312 = ptrtoint ptr %310 to i64, !dbg !1035
  %313 = urem i64 %312, 4, !dbg !1035
  %314 = icmp ne i64 %313, 0, !dbg !1035
  %315 = call i1 @llvm.expect.i1(i1 %314, i1 false), !dbg !1035
  br i1 %315, label %panic388, label %checkok395, !dbg !1035

checkok395:                                       ; preds = %checkok387
  %316 = load i32, ptr %310, align 4, !dbg !1035
  %zext396 = zext i32 %316 to i64, !dbg !1035
  %317 = load i32, ptr %sh, align 4, !dbg !1036
  %zext397 = zext i32 %317 to i64, !dbg !1037
  %shift_exceeds = icmp uge i64 %zext397, 64, !dbg !1037
  %318 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !1037
  br i1 %318, label %panic398, label %checkok403, !dbg !1037

checkok403:                                       ; preds = %checkok395
  %shl = shl i64 %zext396, %zext397, !dbg !1037
  %319 = freeze i64 %shl, !dbg !1037
  %320 = load i32, ptr %carry, align 4, !dbg !1038
  %zext404 = zext i32 %320 to i64, !dbg !1038
  %add405 = add i64 %319, %zext404, !dbg !1037
  store i64 %add405, ptr %x384, align 8, !dbg !1037
  %321 = load ptr, ptr %d, align 8, !dbg !1039
  %checknull406 = icmp eq ptr %321, null, !dbg !1039
  %322 = call i1 @llvm.expect.i1(i1 %checknull406, i1 false), !dbg !1039
  br i1 %322, label %panic407, label %checkok408, !dbg !1039

checkok408:                                       ; preds = %checkok403
  %323 = ptrtoint ptr %321 to i64, !dbg !1039
  %324 = urem i64 %323, 4, !dbg !1039
  %325 = icmp ne i64 %324, 0, !dbg !1039
  %326 = call i1 @llvm.expect.i1(i1 %325, i1 false), !dbg !1039
  br i1 %326, label %panic409, label %checkok416, !dbg !1039

checkok416:                                       ; preds = %checkok408
  %327 = load i64, ptr %x384, align 8, !dbg !1040
  %smod = srem i64 %327, 1000000000, !dbg !1041
  %trunc417 = trunc i64 %smod to i32, !dbg !1041
  store i32 %trunc417, ptr %321, align 4, !dbg !1041
  %328 = load i64, ptr %x384, align 8, !dbg !1042
  %sdiv = sdiv i64 %328, 1000000000, !dbg !1043
  %trunc418 = trunc i64 %sdiv to i32, !dbg !1043
  store i32 %trunc418, ptr %carry, align 4, !dbg !1043
  %329 = load ptr, ptr %d, align 8, !dbg !1044
  %ptradd_any419 = getelementptr i8, ptr %329, i8 -4, !dbg !1044
  store ptr %ptradd_any419, ptr %d, align 8, !dbg !1044
  br label %loop.cond382, !dbg !1044

loop.exit420:                                     ; preds = %loop.cond382
  %330 = load i32, ptr %carry, align 4, !dbg !1045
  %i2b421 = icmp ne i32 %330, 0, !dbg !1045
  br i1 %i2b421, label %if.then422, label %if.exit435, !dbg !1045

if.then422:                                       ; preds = %loop.exit420
  %331 = load ptr, ptr %a, align 8, !dbg !1046
  %ptradd_any423 = getelementptr i8, ptr %331, i8 -4, !dbg !1046
  store ptr %ptradd_any423, ptr %a, align 8, !dbg !1046
  %checknull424 = icmp eq ptr %ptradd_any423, null, !dbg !1046
  %332 = call i1 @llvm.expect.i1(i1 %checknull424, i1 false), !dbg !1046
  br i1 %332, label %panic425, label %checkok426, !dbg !1046

checkok426:                                       ; preds = %if.then422
  %333 = ptrtoint ptr %ptradd_any423 to i64, !dbg !1047
  %334 = urem i64 %333, 4, !dbg !1047
  %335 = icmp ne i64 %334, 0, !dbg !1047
  %336 = call i1 @llvm.expect.i1(i1 %335, i1 false), !dbg !1047
  br i1 %336, label %panic427, label %checkok434, !dbg !1047

checkok434:                                       ; preds = %checkok426
  %337 = load i32, ptr %carry, align 4, !dbg !1048
  store i32 %337, ptr %ptradd_any423, align 4, !dbg !1048
  br label %if.exit435, !dbg !1048

if.exit435:                                       ; preds = %checkok434, %loop.exit420
  br label %loop.cond436, !dbg !1049

loop.cond436:                                     ; preds = %loop.body442, %if.exit435
  %338 = load ptr, ptr %z, align 8, !dbg !1050
  %339 = load ptr, ptr %a, align 8, !dbg !1052
  %gt437 = icmp ugt ptr %338, %339, !dbg !1050
  br i1 %gt437, label %and.rhs438, label %and.phi440, !dbg !1050

and.rhs438:                                       ; preds = %loop.cond436
  %340 = load ptr, ptr %z, align 8, !dbg !1053
  %ptradd439 = getelementptr inbounds i8, ptr %340, i64 -4, !dbg !1054
  %341 = load i32, ptr %ptradd439, align 4, !dbg !1054
  %i2nb = icmp eq i32 %341, 0, !dbg !1054
  br label %and.phi440, !dbg !1054

and.phi440:                                       ; preds = %and.rhs438, %loop.cond436
  %val441 = phi i1 [ false, %loop.cond436 ], [ %i2nb, %and.rhs438 ], !dbg !1054
  br i1 %val441, label %loop.body442, label %loop.exit444, !dbg !1054

loop.body442:                                     ; preds = %and.phi440
  %342 = load ptr, ptr %z, align 8, !dbg !1055
  %ptradd_any443 = getelementptr i8, ptr %342, i8 -4, !dbg !1055
  store ptr %ptradd_any443, ptr %z, align 8, !dbg !1055
  br label %loop.cond436, !dbg !1055

loop.exit444:                                     ; preds = %and.phi440
  %343 = load i32, ptr %e2, align 4, !dbg !1056
  %344 = load i32, ptr %sh, align 4, !dbg !1057
  %sub445 = sub i32 %343, %344, !dbg !1056
  store i32 %sub445, ptr %e2, align 4, !dbg !1056
  br label %loop.cond376, !dbg !1056

loop.exit446:                                     ; preds = %loop.cond376
  br label %loop.cond447, !dbg !1058

loop.cond447:                                     ; preds = %if.exit555, %loop.exit446
  %345 = load i32, ptr %e2, align 4, !dbg !1059
  %lt448 = icmp slt i32 %345, 0, !dbg !1059
  br i1 %lt448, label %loop.body449, label %loop.exit557, !dbg !1059

loop.body449:                                     ; preds = %loop.cond447
    #dbg_declare(ptr %carry450, !1061, !DIExpression(), !1063)
  store i32 0, ptr %carry450, align 4, !dbg !1064
    #dbg_declare(ptr %b, !1065, !DIExpression(), !1066)
  store ptr null, ptr %b, align 8, !dbg !1066
    #dbg_declare(ptr %sh451, !1067, !DIExpression(), !1068)
  store i32 9, ptr %x452, align 4
  %346 = load i32, ptr %e2, align 4, !dbg !1069
  %neg453 = sub i32 0, %346, !dbg !1069
  store i32 %neg453, ptr %y454, align 4
  %347 = load i32, ptr %x452, align 4, !dbg !1070
  %348 = load i32, ptr %y454, align 4, !dbg !1073
  %349 = call i32 @llvm.smin.i32(i32 %347, i32 %348), !dbg !1073
  store i32 %349, ptr %sh451, align 4, !dbg !1073
    #dbg_declare(ptr %need, !1074, !DIExpression(), !1075)
  %350 = load i64, ptr %p, align 8, !dbg !1076
  %add455 = add i64 %350, 17, !dbg !1076
  %add456 = add i64 %add455, 8, !dbg !1076
  %sdiv457 = sdiv i64 %add456, 9, !dbg !1076
  %add458 = add i64 1, %sdiv457, !dbg !1077
  %trunc459 = trunc i64 %add458 to i32, !dbg !1077
  store i32 %trunc459, ptr %need, align 4, !dbg !1077
    #dbg_declare(ptr %d460, !1078, !DIExpression(), !1080)
  %351 = load ptr, ptr %a, align 8, !dbg !1081
  store ptr %351, ptr %d460, align 8, !dbg !1081
  br label %loop.cond461, !dbg !1081

loop.cond461:                                     ; preds = %checkok535, %loop.body449
  %352 = load ptr, ptr %d460, align 8, !dbg !1082
  %353 = load ptr, ptr %z, align 8, !dbg !1083
  %lt462 = icmp ult ptr %352, %353, !dbg !1082
  br i1 %lt462, label %loop.body463, label %loop.exit537, !dbg !1082

loop.body463:                                     ; preds = %loop.cond461
    #dbg_declare(ptr %rm, !1084, !DIExpression(), !1086)
  %354 = load ptr, ptr %d460, align 8, !dbg !1087
  %checknull464 = icmp eq ptr %354, null, !dbg !1087
  %355 = call i1 @llvm.expect.i1(i1 %checknull464, i1 false), !dbg !1087
  br i1 %355, label %panic465, label %checkok466, !dbg !1087

checkok466:                                       ; preds = %loop.body463
  %356 = ptrtoint ptr %354 to i64, !dbg !1087
  %357 = urem i64 %356, 4, !dbg !1087
  %358 = icmp ne i64 %357, 0, !dbg !1087
  %359 = call i1 @llvm.expect.i1(i1 %358, i1 false), !dbg !1087
  br i1 %359, label %panic467, label %checkok474, !dbg !1087

checkok474:                                       ; preds = %checkok466
  %360 = load i32, ptr %354, align 4, !dbg !1087
  %361 = load i32, ptr %sh451, align 4, !dbg !1088
  %shift_underflow = icmp slt i32 %361, 0, !dbg !1089
  %362 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !1089
  br i1 %362, label %panic475, label %checkok480, !dbg !1089

checkok480:                                       ; preds = %checkok474
  %shift_exceeds481 = icmp sge i32 %361, 32, !dbg !1089
  %363 = call i1 @llvm.expect.i1(i1 %shift_exceeds481, i1 false), !dbg !1089
  br i1 %363, label %panic482, label %checkok487, !dbg !1089

checkok487:                                       ; preds = %checkok480
  %shl488 = shl i32 1, %361, !dbg !1089
  %364 = freeze i32 %shl488, !dbg !1089
  %sub489 = sub i32 %364, 1, !dbg !1089
  %and490 = and i32 %360, %sub489, !dbg !1090
  store i32 %and490, ptr %rm, align 4, !dbg !1090
  %365 = load ptr, ptr %d460, align 8, !dbg !1091
  %checknull491 = icmp eq ptr %365, null, !dbg !1091
  %366 = call i1 @llvm.expect.i1(i1 %checknull491, i1 false), !dbg !1091
  br i1 %366, label %panic492, label %checkok493, !dbg !1091

checkok493:                                       ; preds = %checkok487
  %367 = ptrtoint ptr %365 to i64, !dbg !1091
  %368 = urem i64 %367, 4, !dbg !1091
  %369 = icmp ne i64 %368, 0, !dbg !1091
  %370 = call i1 @llvm.expect.i1(i1 %369, i1 false), !dbg !1091
  br i1 %370, label %panic494, label %checkok501, !dbg !1091

checkok501:                                       ; preds = %checkok493
  %371 = load ptr, ptr %d460, align 8, !dbg !1092
  %checknull502 = icmp eq ptr %371, null, !dbg !1092
  %372 = call i1 @llvm.expect.i1(i1 %checknull502, i1 false), !dbg !1092
  br i1 %372, label %panic503, label %checkok504, !dbg !1092

checkok504:                                       ; preds = %checkok501
  %373 = ptrtoint ptr %371 to i64, !dbg !1092
  %374 = urem i64 %373, 4, !dbg !1092
  %375 = icmp ne i64 %374, 0, !dbg !1092
  %376 = call i1 @llvm.expect.i1(i1 %375, i1 false), !dbg !1092
  br i1 %376, label %panic505, label %checkok512, !dbg !1092

checkok512:                                       ; preds = %checkok504
  %377 = load i32, ptr %371, align 4, !dbg !1092
  %378 = load i32, ptr %sh451, align 4, !dbg !1093
  %shift_exceeds513 = icmp uge i32 %378, 32, !dbg !1094
  %379 = call i1 @llvm.expect.i1(i1 %shift_exceeds513, i1 false), !dbg !1094
  br i1 %379, label %panic514, label %checkok519, !dbg !1094

checkok519:                                       ; preds = %checkok512
  %lshr520 = lshr i32 %377, %378, !dbg !1094
  %380 = freeze i32 %lshr520, !dbg !1094
  %381 = load i32, ptr %carry450, align 4, !dbg !1095
  %add521 = add i32 %380, %381, !dbg !1094
  store i32 %add521, ptr %365, align 4, !dbg !1094
  %382 = load i32, ptr %sh451, align 4, !dbg !1096
  %shift_underflow522 = icmp slt i32 %382, 0, !dbg !1097
  %383 = call i1 @llvm.expect.i1(i1 %shift_underflow522, i1 false), !dbg !1097
  br i1 %383, label %panic523, label %checkok528, !dbg !1097

checkok528:                                       ; preds = %checkok519
  %shift_exceeds529 = icmp sge i32 %382, 32, !dbg !1097
  %384 = call i1 @llvm.expect.i1(i1 %shift_exceeds529, i1 false), !dbg !1097
  br i1 %384, label %panic530, label %checkok535, !dbg !1097

checkok535:                                       ; preds = %checkok528
  %ashr = ashr i32 1000000000, %382, !dbg !1097
  %385 = freeze i32 %ashr, !dbg !1097
  %386 = load i32, ptr %rm, align 4, !dbg !1098
  %mul = mul i32 %385, %386, !dbg !1097
  store i32 %mul, ptr %carry450, align 4, !dbg !1097
  %387 = load ptr, ptr %d460, align 8, !dbg !1099
  %ptradd_any536 = getelementptr i8, ptr %387, i8 4, !dbg !1099
  store ptr %ptradd_any536, ptr %d460, align 8, !dbg !1099
  br label %loop.cond461, !dbg !1099

loop.exit537:                                     ; preds = %loop.cond461
  %388 = load ptr, ptr %a, align 8, !dbg !1100
  %389 = load i32, ptr %388, align 4, !dbg !1101
  %i2nb538 = icmp eq i32 %389, 0, !dbg !1101
  br i1 %i2nb538, label %if.then539, label %if.exit541, !dbg !1101

if.then539:                                       ; preds = %loop.exit537
  %390 = load ptr, ptr %a, align 8, !dbg !1102
  %ptradd_any540 = getelementptr i8, ptr %390, i8 4, !dbg !1102
  store ptr %ptradd_any540, ptr %a, align 8, !dbg !1102
  br label %if.exit541, !dbg !1102

if.exit541:                                       ; preds = %if.then539, %loop.exit537
  %391 = load i32, ptr %carry450, align 4, !dbg !1103
  %i2b542 = icmp ne i32 %391, 0, !dbg !1103
  br i1 %i2b542, label %if.then543, label %if.exit545, !dbg !1103

if.then543:                                       ; preds = %if.exit541
  %392 = load ptr, ptr %z, align 8, !dbg !1104
  %ptradd_any544 = getelementptr i8, ptr %392, i8 4, !dbg !1104
  store ptr %ptradd_any544, ptr %z, align 8, !dbg !1104
  %393 = load i32, ptr %carry450, align 4, !dbg !1105
  store i32 %393, ptr %392, align 4, !dbg !1105
  br label %if.exit545, !dbg !1105

if.exit545:                                       ; preds = %if.then543, %if.exit541
  %394 = load i32, ptr %formatting, align 4, !dbg !1106
  %eq546 = icmp eq i32 %394, 0, !dbg !1106
  br i1 %eq546, label %cond.lhs547, label %cond.rhs548, !dbg !1106

cond.lhs547:                                      ; preds = %if.exit545
  %395 = load ptr, ptr %r, align 8, !dbg !1107
  br label %cond.phi549, !dbg !1107

cond.rhs548:                                      ; preds = %if.exit545
  %396 = load ptr, ptr %a, align 8, !dbg !1108
  br label %cond.phi549, !dbg !1108

cond.phi549:                                      ; preds = %cond.rhs548, %cond.lhs547
  %val550 = phi ptr [ %395, %cond.lhs547 ], [ %396, %cond.rhs548 ], !dbg !1108
  store ptr %val550, ptr %b, align 8, !dbg !1108
  %397 = load ptr, ptr %z, align 8, !dbg !1109
  %398 = load ptr, ptr %b, align 8, !dbg !1110
  %399 = ptrtoint ptr %398 to i64, !dbg !1109
  %400 = ptrtoint ptr %397 to i64, !dbg !1109
  %401 = sub i64 %400, %399, !dbg !1109
  %402 = sdiv exact i64 %401, 4, !dbg !1109
  %403 = load i32, ptr %need, align 4, !dbg !1111
  %sext551 = sext i32 %403 to i64, !dbg !1111
  %gt552 = icmp sgt i64 %402, %sext551, !dbg !1109
  br i1 %gt552, label %if.then553, label %if.exit555, !dbg !1109

if.then553:                                       ; preds = %cond.phi549
  %404 = load ptr, ptr %b, align 8, !dbg !1112
  %405 = load i32, ptr %need, align 4, !dbg !1113
  %sext554 = sext i32 %405 to i64, !dbg !1113
  %ptroffset_any = getelementptr [4 x i8], ptr %404, i64 %sext554, !dbg !1113
  store ptr %ptroffset_any, ptr %z, align 8, !dbg !1113
  br label %if.exit555, !dbg !1113

if.exit555:                                       ; preds = %if.then553, %cond.phi549
  %406 = load i32, ptr %e2, align 4, !dbg !1114
  %407 = load i32, ptr %sh451, align 4, !dbg !1115
  %add556 = add i32 %406, %407, !dbg !1114
  store i32 %add556, ptr %e2, align 4, !dbg !1114
  br label %loop.cond447, !dbg !1114

loop.exit557:                                     ; preds = %loop.cond447
    #dbg_declare(ptr %e558, !1116, !DIExpression(), !1117)
  store i32 0, ptr %e558, align 4, !dbg !1117
  %408 = load ptr, ptr %a, align 8, !dbg !1118
  %409 = load ptr, ptr %z, align 8, !dbg !1119
  %lt559 = icmp ult ptr %408, %409, !dbg !1118
  br i1 %lt559, label %if.then560, label %if.exit579, !dbg !1118

if.then560:                                       ; preds = %loop.exit557
    #dbg_declare(ptr %i, !1120, !DIExpression(), !1123)
  store i32 10, ptr %i, align 4, !dbg !1124
  %410 = load ptr, ptr %r, align 8, !dbg !1125
  %411 = load ptr, ptr %a, align 8, !dbg !1126
  %412 = ptrtoint ptr %411 to i64, !dbg !1125
  %413 = ptrtoint ptr %410 to i64, !dbg !1125
  %414 = sub i64 %413, %412, !dbg !1125
  %415 = sdiv exact i64 %414, 4, !dbg !1125
  %mul561 = mul i64 9, %415, !dbg !1127
  %trunc562 = trunc i64 %mul561 to i32, !dbg !1127
  store i32 %trunc562, ptr %e558, align 4, !dbg !1127
  br label %loop.cond563, !dbg !1127

loop.cond563:                                     ; preds = %loop.body575, %if.then560
  %416 = load ptr, ptr %a, align 8, !dbg !1128
  %checknull564 = icmp eq ptr %416, null, !dbg !1128
  %417 = call i1 @llvm.expect.i1(i1 %checknull564, i1 false), !dbg !1128
  br i1 %417, label %panic565, label %checkok566, !dbg !1128

checkok566:                                       ; preds = %loop.cond563
  %418 = ptrtoint ptr %416 to i64, !dbg !1128
  %419 = urem i64 %418, 4, !dbg !1128
  %420 = icmp ne i64 %419, 0, !dbg !1128
  %421 = call i1 @llvm.expect.i1(i1 %420, i1 false), !dbg !1128
  br i1 %421, label %panic567, label %checkok574, !dbg !1128

checkok574:                                       ; preds = %checkok566
  %422 = load i32, ptr %416, align 4, !dbg !1128
  %423 = load i32, ptr %i, align 4, !dbg !1129
  %le = icmp sle i32 %423, %422, !dbg !1130
  %check = icmp slt i32 %422, 0, !dbg !1130
  %siui-le = or i1 %check, %le, !dbg !1130
  br i1 %siui-le, label %loop.body575, label %loop.exit578, !dbg !1130

loop.body575:                                     ; preds = %checkok574
  %424 = load i32, ptr %i, align 4, !dbg !1131
  %mul576 = mul i32 %424, 10, !dbg !1131
  store i32 %mul576, ptr %i, align 4, !dbg !1131
  %425 = load i32, ptr %e558, align 4, !dbg !1132
  %add577 = add i32 %425, 1, !dbg !1132
  store i32 %add577, ptr %e558, align 4, !dbg !1132
  br label %loop.cond563, !dbg !1132

loop.exit578:                                     ; preds = %checkok574
  br label %if.exit579, !dbg !1132

if.exit579:                                       ; preds = %loop.exit578, %loop.exit557
    #dbg_declare(ptr %j, !1133, !DIExpression(), !1134)
  %426 = load i64, ptr %p, align 8, !dbg !1135
  %427 = load i32, ptr %formatting, align 4, !dbg !1136
  %eq580 = icmp eq i32 %427, 0, !dbg !1136
  br i1 %eq580, label %cond.lhs581, label %cond.rhs582, !dbg !1136

cond.lhs581:                                      ; preds = %if.exit579
  br label %cond.phi590, !dbg !1137

cond.rhs582:                                      ; preds = %if.exit579
  %428 = load i32, ptr %e558, align 4, !dbg !1138
  %429 = load i32, ptr %formatting, align 4, !dbg !1139
  %eq583 = icmp eq i32 %429, 2, !dbg !1139
  br i1 %eq583, label %and.rhs584, label %and.phi586, !dbg !1139

and.rhs584:                                       ; preds = %cond.rhs582
  %430 = load i64, ptr %p, align 8, !dbg !1140
  %i2b585 = icmp ne i64 %430, 0, !dbg !1140
  br label %and.phi586, !dbg !1140

and.phi586:                                       ; preds = %and.rhs584, %cond.rhs582
  %val587 = phi i1 [ false, %cond.rhs582 ], [ %i2b585, %and.rhs584 ], !dbg !1140
  %zext588 = zext i1 %val587 to i32, !dbg !1140
  %sub589 = sub i32 %428, %zext588, !dbg !1138
  br label %cond.phi590, !dbg !1138

cond.phi590:                                      ; preds = %and.phi586, %cond.lhs581
  %val591 = phi i32 [ 0, %cond.lhs581 ], [ %sub589, %and.phi586 ], !dbg !1138
  %sext592 = sext i32 %val591 to i64, !dbg !1138
  %sub593 = sub i64 %426, %sext592, !dbg !1141
  %trunc594 = trunc i64 %sub593 to i32, !dbg !1141
  store i32 %trunc594, ptr %j, align 4, !dbg !1141
  %431 = load i32, ptr %j, align 4, !dbg !1142
  %sext595 = sext i32 %431 to i64, !dbg !1142
  %432 = load ptr, ptr %z, align 8, !dbg !1143
  %433 = load ptr, ptr %r, align 8, !dbg !1144
  %434 = ptrtoint ptr %433 to i64, !dbg !1143
  %435 = ptrtoint ptr %432 to i64, !dbg !1143
  %436 = sub i64 %435, %434, !dbg !1143
  %437 = sdiv exact i64 %436, 4, !dbg !1143
  %sub596 = sub i64 %437, 1, !dbg !1143
  %mul597 = mul i64 9, %sub596, !dbg !1145
  %lt598 = icmp slt i64 %sext595, %mul597, !dbg !1142
  br i1 %lt598, label %if.then599, label %if.exit817, !dbg !1142

if.then599:                                       ; preds = %cond.phi590
    #dbg_declare(ptr %x600, !1146, !DIExpression(), !1148)
  store i32 0, ptr %x600, align 4, !dbg !1148
    #dbg_declare(ptr %d601, !1149, !DIExpression(), !1150)
  %438 = load ptr, ptr %r, align 8, !dbg !1151
  %439 = load i32, ptr %j, align 4, !dbg !1152
  %add602 = add i32 %439, 9216, !dbg !1152
  %sdiv603 = sdiv i32 %add602, 9, !dbg !1152
  %sub604 = sub i32 %sdiv603, 1024, !dbg !1152
  %sext605 = sext i32 %sub604 to i64, !dbg !1152
  %add606 = add i64 1, %sext605, !dbg !1151
  %ptroffset_any607 = getelementptr [4 x i8], ptr %438, i64 %add606, !dbg !1151
  store ptr %ptroffset_any607, ptr %d601, align 8, !dbg !1151
  %440 = load i32, ptr %j, align 4, !dbg !1153
  %add608 = add i32 %440, 9216, !dbg !1153
  store i32 %add608, ptr %j, align 4, !dbg !1153
  %441 = load i32, ptr %j, align 4, !dbg !1154
  %smod609 = srem i32 %441, 9, !dbg !1154
  store i32 %smod609, ptr %j, align 4, !dbg !1154
    #dbg_declare(ptr %i610, !1155, !DIExpression(), !1156)
  store i32 0, ptr %i610, align 4, !dbg !1156
  store i32 10, ptr %i610, align 4, !dbg !1157
  %442 = load i32, ptr %j, align 4, !dbg !1159
  %add611 = add i32 %442, 1, !dbg !1159
  store i32 %add611, ptr %j, align 4, !dbg !1159
  br label %loop.cond612, !dbg !1159

loop.cond612:                                     ; preds = %loop.body614, %if.then599
  %443 = load i32, ptr %j, align 4, !dbg !1160
  %lt613 = icmp slt i32 %443, 9, !dbg !1160
  br i1 %lt613, label %loop.body614, label %loop.exit617, !dbg !1160

loop.body614:                                     ; preds = %loop.cond612
  %444 = load i32, ptr %i610, align 4, !dbg !1161
  %mul615 = mul i32 %444, 10, !dbg !1161
  store i32 %mul615, ptr %i610, align 4, !dbg !1161
  %445 = load i32, ptr %j, align 4, !dbg !1162
  %add616 = add i32 %445, 1, !dbg !1162
  store i32 %add616, ptr %j, align 4, !dbg !1162
  br label %loop.cond612, !dbg !1162

loop.exit617:                                     ; preds = %loop.cond612
  %446 = load ptr, ptr %d601, align 8, !dbg !1163
  %checknull618 = icmp eq ptr %446, null, !dbg !1163
  %447 = call i1 @llvm.expect.i1(i1 %checknull618, i1 false), !dbg !1163
  br i1 %447, label %panic619, label %checkok620, !dbg !1163

checkok620:                                       ; preds = %loop.exit617
  %448 = ptrtoint ptr %446 to i64, !dbg !1163
  %449 = urem i64 %448, 4, !dbg !1163
  %450 = icmp ne i64 %449, 0, !dbg !1163
  %451 = call i1 @llvm.expect.i1(i1 %450, i1 false), !dbg !1163
  br i1 %451, label %panic621, label %checkok628, !dbg !1163

checkok628:                                       ; preds = %checkok620
  %452 = load i32, ptr %446, align 4, !dbg !1163
  %453 = load i32, ptr %i610, align 4, !dbg !1164
  %zero = icmp eq i32 %453, 0, !dbg !1165
  %454 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !1165
  br i1 %454, label %panic629, label %checkok630, !dbg !1165

checkok630:                                       ; preds = %checkok628
  %smod631 = srem i32 %452, %453, !dbg !1165
  store i32 %smod631, ptr %x600, align 4, !dbg !1165
  %455 = load i32, ptr %x600, align 4, !dbg !1166
  %i2b632 = icmp ne i32 %455, 0, !dbg !1166
  br i1 %i2b632, label %or.phi636, label %or.rhs633, !dbg !1166

or.rhs633:                                        ; preds = %checkok630
  %456 = load ptr, ptr %d601, align 8, !dbg !1167
  %ptradd_any634 = getelementptr i8, ptr %456, i64 4, !dbg !1168
  %457 = load ptr, ptr %z, align 8, !dbg !1169
  %neq635 = icmp ne ptr %ptradd_any634, %457, !dbg !1167
  br label %or.phi636, !dbg !1167

or.phi636:                                        ; preds = %or.rhs633, %checkok630
  %val637 = phi i1 [ true, %checkok630 ], [ %neq635, %or.rhs633 ], !dbg !1167
  br i1 %val637, label %if.then638, label %if.exit811, !dbg !1167

if.then638:                                       ; preds = %or.phi636
    #dbg_declare(ptr %round639, !1170, !DIExpression(), !1172)
  store double 0x4340000000000000, ptr %round639, align 8, !dbg !1173
    #dbg_declare(ptr %small, !1174, !DIExpression(), !1175)
  store double 0.000000e+00, ptr %small, align 8, !dbg !1175
  %458 = load ptr, ptr %d601, align 8, !dbg !1176
  %checknull640 = icmp eq ptr %458, null, !dbg !1176
  %459 = call i1 @llvm.expect.i1(i1 %checknull640, i1 false), !dbg !1176
  br i1 %459, label %panic641, label %checkok642, !dbg !1176

checkok642:                                       ; preds = %if.then638
  %460 = ptrtoint ptr %458 to i64, !dbg !1176
  %461 = urem i64 %460, 4, !dbg !1176
  %462 = icmp ne i64 %461, 0, !dbg !1176
  %463 = call i1 @llvm.expect.i1(i1 %462, i1 false), !dbg !1176
  br i1 %463, label %panic643, label %checkok650, !dbg !1176

checkok650:                                       ; preds = %checkok642
  %464 = load i32, ptr %458, align 4, !dbg !1176
  %465 = load i32, ptr %i610, align 4, !dbg !1177
  %zero651 = icmp eq i32 %465, 0, !dbg !1178
  %466 = call i1 @llvm.expect.i1(i1 %zero651, i1 false), !dbg !1178
  br i1 %466, label %panic652, label %checkok653, !dbg !1178

checkok653:                                       ; preds = %checkok650
  %sdiv654 = sdiv i32 %464, %465, !dbg !1178
  %and655 = and i32 %sdiv654, 1, !dbg !1178
  %i2b656 = icmp ne i32 %and655, 0, !dbg !1178
  br i1 %i2b656, label %or.phi669, label %or.rhs657, !dbg !1178

or.rhs657:                                        ; preds = %checkok653
  %467 = load i32, ptr %i610, align 4, !dbg !1179
  %eq658 = icmp eq i32 %467, 1000000000, !dbg !1179
  br i1 %eq658, label %and.rhs659, label %and.phi661, !dbg !1179

and.rhs659:                                       ; preds = %or.rhs657
  %468 = load ptr, ptr %d601, align 8, !dbg !1180
  %469 = load ptr, ptr %a, align 8, !dbg !1181
  %gt660 = icmp ugt ptr %468, %469, !dbg !1180
  br label %and.phi661, !dbg !1180

and.phi661:                                       ; preds = %and.rhs659, %or.rhs657
  %val662 = phi i1 [ false, %or.rhs657 ], [ %gt660, %and.rhs659 ], !dbg !1180
  br i1 %val662, label %and.rhs663, label %and.phi667, !dbg !1180

and.rhs663:                                       ; preds = %and.phi661
  %470 = load ptr, ptr %d601, align 8, !dbg !1182
  %ptradd664 = getelementptr inbounds i8, ptr %470, i64 -4, !dbg !1183
  %471 = load i32, ptr %ptradd664, align 4, !dbg !1183
  %and665 = and i32 %471, 1, !dbg !1182
  %i2b666 = icmp ne i32 %and665, 0, !dbg !1182
  br label %and.phi667, !dbg !1182

and.phi667:                                       ; preds = %and.rhs663, %and.phi661
  %val668 = phi i1 [ false, %and.phi661 ], [ %i2b666, %and.rhs663 ], !dbg !1182
  br label %or.phi669, !dbg !1182

or.phi669:                                        ; preds = %and.phi667, %checkok653
  %val670 = phi i1 [ true, %checkok653 ], [ %val668, %and.phi667 ], !dbg !1182
  br i1 %val670, label %if.then671, label %if.exit673, !dbg !1182

if.then671:                                       ; preds = %or.phi669
  %472 = load double, ptr %round639, align 8, !dbg !1184
  %fadd672 = fadd double %472, 2.000000e+00, !dbg !1184
  store double %fadd672, ptr %round639, align 8, !dbg !1184
  br label %if.exit673, !dbg !1184

if.exit673:                                       ; preds = %if.then671, %or.phi669
  store i8 1, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit673
  %473 = load i8, ptr %switch, align 1
  %474 = trunc i8 %473 to i1
  %475 = load i32, ptr %x600, align 4, !dbg !1186
  %476 = load i32, ptr %i610, align 4, !dbg !1188
  %sdiv674 = sdiv i32 %476, 2, !dbg !1188
  %gt675 = icmp sgt i32 %sdiv674, %475, !dbg !1186
  %check676 = icmp sge i32 %475, 0, !dbg !1186
  %siui-gt = and i1 %check676, %gt675, !dbg !1186
  %eq677 = icmp eq i1 %siui-gt, %474, !dbg !1186
  br i1 %eq677, label %switch.case, label %next_if, !dbg !1186

switch.case:                                      ; preds = %switch.entry
  store double 5.000000e-01, ptr %small, align 8, !dbg !1189
  br label %switch.exit, !dbg !1189

next_if:                                          ; preds = %switch.entry
  %477 = load i32, ptr %x600, align 4, !dbg !1191
  %478 = load i32, ptr %i610, align 4, !dbg !1192
  %sdiv678 = sdiv i32 %478, 2, !dbg !1192
  %eq679 = icmp eq i32 %sdiv678, %477, !dbg !1191
  %check680 = icmp sge i32 %sdiv678, 0, !dbg !1191
  %siui-eq = and i1 %check680, %eq679, !dbg !1191
  br i1 %siui-eq, label %and.rhs681, label %and.phi684, !dbg !1191

and.rhs681:                                       ; preds = %next_if
  %479 = load ptr, ptr %d601, align 8, !dbg !1193
  %ptradd_any682 = getelementptr i8, ptr %479, i64 4, !dbg !1194
  %480 = load ptr, ptr %z, align 8, !dbg !1195
  %eq683 = icmp eq ptr %ptradd_any682, %480, !dbg !1193
  br label %and.phi684, !dbg !1193

and.phi684:                                       ; preds = %and.rhs681, %next_if
  %val685 = phi i1 [ false, %next_if ], [ %eq683, %and.rhs681 ], !dbg !1193
  %eq686 = icmp eq i1 %val685, %474, !dbg !1193
  br i1 %eq686, label %switch.case687, label %next_if688, !dbg !1193

switch.case687:                                   ; preds = %and.phi684
  store double 1.000000e+00, ptr %small, align 8, !dbg !1196
  br label %switch.exit, !dbg !1196

next_if688:                                       ; preds = %and.phi684
  br label %switch.default, !dbg !1196

switch.default:                                   ; preds = %next_if688
  store double 1.500000e+00, ptr %small, align 8, !dbg !1198
  br label %switch.exit, !dbg !1198

switch.exit:                                      ; preds = %switch.default, %switch.case687, %switch.case
  %481 = load i64, ptr %pl, align 8, !dbg !1200
  %i2b689 = icmp ne i64 %481, 0, !dbg !1200
  br i1 %i2b689, label %and.rhs690, label %and.phi691, !dbg !1200

and.rhs690:                                       ; preds = %switch.exit
  %482 = load i8, ptr %is_neg, align 1, !dbg !1201
  %483 = trunc i8 %482 to i1, !dbg !1201
  br label %and.phi691, !dbg !1201

and.phi691:                                       ; preds = %and.rhs690, %switch.exit
  %val692 = phi i1 [ false, %switch.exit ], [ %483, %and.rhs690 ], !dbg !1201
  br i1 %val692, label %if.then693, label %if.exit696, !dbg !1201

if.then693:                                       ; preds = %and.phi691
  %484 = load double, ptr %round639, align 8, !dbg !1202
  %fmul694 = fmul double %484, -1.000000e+00, !dbg !1202
  store double %fmul694, ptr %round639, align 8, !dbg !1202
  %485 = load double, ptr %small, align 8, !dbg !1204
  %fmul695 = fmul double %485, -1.000000e+00, !dbg !1204
  store double %fmul695, ptr %small, align 8, !dbg !1204
  br label %if.exit696, !dbg !1204

if.exit696:                                       ; preds = %if.then693, %and.phi691
  %486 = load ptr, ptr %d601, align 8, !dbg !1205
  %checknull697 = icmp eq ptr %486, null, !dbg !1205
  %487 = call i1 @llvm.expect.i1(i1 %checknull697, i1 false), !dbg !1205
  br i1 %487, label %panic698, label %checkok699, !dbg !1205

checkok699:                                       ; preds = %if.exit696
  %488 = ptrtoint ptr %486 to i64, !dbg !1205
  %489 = urem i64 %488, 4, !dbg !1205
  %490 = icmp ne i64 %489, 0, !dbg !1205
  %491 = call i1 @llvm.expect.i1(i1 %490, i1 false), !dbg !1205
  br i1 %491, label %panic700, label %checkok707, !dbg !1205

checkok707:                                       ; preds = %checkok699
  %492 = load i32, ptr %486, align 4, !dbg !1205
  %493 = load i32, ptr %x600, align 4, !dbg !1206
  %sub708 = sub i32 %492, %493, !dbg !1207
  store i32 %sub708, ptr %486, align 4, !dbg !1207
  %494 = load double, ptr %round639, align 8, !dbg !1208
  %495 = load double, ptr %small, align 8, !dbg !1209
  %fadd709 = fadd double %494, %495, !dbg !1208
  %496 = load double, ptr %round639, align 8, !dbg !1210
  %neq710 = fcmp one double %fadd709, %496, !dbg !1208
  br i1 %neq710, label %if.then711, label %if.exit810, !dbg !1208

if.then711:                                       ; preds = %checkok707
  %497 = load ptr, ptr %d601, align 8, !dbg !1211
  %checknull712 = icmp eq ptr %497, null, !dbg !1211
  %498 = call i1 @llvm.expect.i1(i1 %checknull712, i1 false), !dbg !1211
  br i1 %498, label %panic713, label %checkok714, !dbg !1211

checkok714:                                       ; preds = %if.then711
  %499 = ptrtoint ptr %497 to i64, !dbg !1211
  %500 = urem i64 %499, 4, !dbg !1211
  %501 = icmp ne i64 %500, 0, !dbg !1211
  %502 = call i1 @llvm.expect.i1(i1 %501, i1 false), !dbg !1211
  br i1 %502, label %panic715, label %checkok722, !dbg !1211

checkok722:                                       ; preds = %checkok714
  %503 = load ptr, ptr %d601, align 8, !dbg !1213
  %checknull723 = icmp eq ptr %503, null, !dbg !1213
  %504 = call i1 @llvm.expect.i1(i1 %checknull723, i1 false), !dbg !1213
  br i1 %504, label %panic724, label %checkok725, !dbg !1213

checkok725:                                       ; preds = %checkok722
  %505 = ptrtoint ptr %503 to i64, !dbg !1213
  %506 = urem i64 %505, 4, !dbg !1213
  %507 = icmp ne i64 %506, 0, !dbg !1213
  %508 = call i1 @llvm.expect.i1(i1 %507, i1 false), !dbg !1213
  br i1 %508, label %panic726, label %checkok733, !dbg !1213

checkok733:                                       ; preds = %checkok725
  %509 = load i32, ptr %503, align 4, !dbg !1213
  %510 = load i32, ptr %i610, align 4, !dbg !1214
  %add734 = add i32 %509, %510, !dbg !1215
  store i32 %add734, ptr %497, align 4, !dbg !1215
  br label %loop.cond735, !dbg !1216

loop.cond735:                                     ; preds = %checkok786, %checkok733
  %511 = load ptr, ptr %d601, align 8, !dbg !1217
  %checknull736 = icmp eq ptr %511, null, !dbg !1217
  %512 = call i1 @llvm.expect.i1(i1 %checknull736, i1 false), !dbg !1217
  br i1 %512, label %panic737, label %checkok738, !dbg !1217

checkok738:                                       ; preds = %loop.cond735
  %513 = ptrtoint ptr %511 to i64, !dbg !1217
  %514 = urem i64 %513, 4, !dbg !1217
  %515 = icmp ne i64 %514, 0, !dbg !1217
  %516 = call i1 @llvm.expect.i1(i1 %515, i1 false), !dbg !1217
  br i1 %516, label %panic739, label %checkok746, !dbg !1217

checkok746:                                       ; preds = %checkok738
  %517 = load i32, ptr %511, align 4, !dbg !1217
  %lt747 = icmp ult i32 999999999, %517, !dbg !1219
  br i1 %lt747, label %loop.body748, label %loop.exit788, !dbg !1219

loop.body748:                                     ; preds = %checkok746
  %518 = load ptr, ptr %d601, align 8, !dbg !1220
  %ptradd_any749 = getelementptr i8, ptr %518, i8 -4, !dbg !1220
  store ptr %ptradd_any749, ptr %d601, align 8, !dbg !1220
  %checknull750 = icmp eq ptr %518, null, !dbg !1220
  %519 = call i1 @llvm.expect.i1(i1 %checknull750, i1 false), !dbg !1220
  br i1 %519, label %panic751, label %checkok752, !dbg !1220

checkok752:                                       ; preds = %loop.body748
  %520 = ptrtoint ptr %518 to i64, !dbg !1220
  %521 = urem i64 %520, 4, !dbg !1220
  %522 = icmp ne i64 %521, 0, !dbg !1220
  %523 = call i1 @llvm.expect.i1(i1 %522, i1 false), !dbg !1220
  br i1 %523, label %panic753, label %checkok760, !dbg !1220

checkok760:                                       ; preds = %checkok752
  store i32 0, ptr %518, align 4, !dbg !1222
  %524 = load ptr, ptr %d601, align 8, !dbg !1223
  %525 = load ptr, ptr %a, align 8, !dbg !1224
  %lt761 = icmp ult ptr %524, %525, !dbg !1223
  br i1 %lt761, label %if.then762, label %if.exit775, !dbg !1223

if.then762:                                       ; preds = %checkok760
  %526 = load ptr, ptr %a, align 8, !dbg !1225
  %ptradd_any763 = getelementptr i8, ptr %526, i8 -4, !dbg !1225
  store ptr %ptradd_any763, ptr %a, align 8, !dbg !1225
  %checknull764 = icmp eq ptr %ptradd_any763, null, !dbg !1225
  %527 = call i1 @llvm.expect.i1(i1 %checknull764, i1 false), !dbg !1225
  br i1 %527, label %panic765, label %checkok766, !dbg !1225

checkok766:                                       ; preds = %if.then762
  %528 = ptrtoint ptr %ptradd_any763 to i64, !dbg !1226
  %529 = urem i64 %528, 4, !dbg !1226
  %530 = icmp ne i64 %529, 0, !dbg !1226
  %531 = call i1 @llvm.expect.i1(i1 %530, i1 false), !dbg !1226
  br i1 %531, label %panic767, label %checkok774, !dbg !1226

checkok774:                                       ; preds = %checkok766
  store i32 0, ptr %ptradd_any763, align 4, !dbg !1227
  br label %if.exit775, !dbg !1227

if.exit775:                                       ; preds = %checkok774, %checkok760
  %532 = load ptr, ptr %d601, align 8, !dbg !1228
  %checknull776 = icmp eq ptr %532, null, !dbg !1228
  %533 = call i1 @llvm.expect.i1(i1 %checknull776, i1 false), !dbg !1228
  br i1 %533, label %panic777, label %checkok778, !dbg !1228

checkok778:                                       ; preds = %if.exit775
  %534 = ptrtoint ptr %532 to i64, !dbg !1228
  %535 = urem i64 %534, 4, !dbg !1228
  %536 = icmp ne i64 %535, 0, !dbg !1228
  %537 = call i1 @llvm.expect.i1(i1 %536, i1 false), !dbg !1228
  br i1 %537, label %panic779, label %checkok786, !dbg !1228

checkok786:                                       ; preds = %checkok778
  %538 = load i32, ptr %532, align 4, !dbg !1229
  %add787 = add i32 %538, 1, !dbg !1229
  store i32 %add787, ptr %532, align 4, !dbg !1229
  br label %loop.cond735, !dbg !1229

loop.exit788:                                     ; preds = %checkok746
  store i32 10, ptr %i610, align 4, !dbg !1230
  %539 = load ptr, ptr %r, align 8, !dbg !1232
  %540 = load ptr, ptr %a, align 8, !dbg !1233
  %541 = ptrtoint ptr %540 to i64, !dbg !1232
  %542 = ptrtoint ptr %539 to i64, !dbg !1232
  %543 = sub i64 %542, %541, !dbg !1232
  %544 = sdiv exact i64 %543, 4, !dbg !1232
  %mul789 = mul i64 9, %544, !dbg !1234
  %trunc790 = trunc i64 %mul789 to i32, !dbg !1234
  store i32 %trunc790, ptr %e558, align 4, !dbg !1234
  br label %loop.cond791, !dbg !1234

loop.cond791:                                     ; preds = %loop.body806, %loop.exit788
  %545 = load ptr, ptr %a, align 8, !dbg !1235
  %checknull792 = icmp eq ptr %545, null, !dbg !1235
  %546 = call i1 @llvm.expect.i1(i1 %checknull792, i1 false), !dbg !1235
  br i1 %546, label %panic793, label %checkok794, !dbg !1235

checkok794:                                       ; preds = %loop.cond791
  %547 = ptrtoint ptr %545 to i64, !dbg !1235
  %548 = urem i64 %547, 4, !dbg !1235
  %549 = icmp ne i64 %548, 0, !dbg !1235
  %550 = call i1 @llvm.expect.i1(i1 %549, i1 false), !dbg !1235
  br i1 %550, label %panic795, label %checkok802, !dbg !1235

checkok802:                                       ; preds = %checkok794
  %551 = load i32, ptr %545, align 4, !dbg !1235
  %552 = load i32, ptr %i610, align 4, !dbg !1236
  %le803 = icmp sle i32 %552, %551, !dbg !1237
  %check804 = icmp slt i32 %551, 0, !dbg !1237
  %siui-le805 = or i1 %check804, %le803, !dbg !1237
  br i1 %siui-le805, label %loop.body806, label %loop.exit809, !dbg !1237

loop.body806:                                     ; preds = %checkok802
  %553 = load i32, ptr %i610, align 4, !dbg !1238
  %mul807 = mul i32 %553, 10, !dbg !1238
  store i32 %mul807, ptr %i610, align 4, !dbg !1238
  %554 = load i32, ptr %e558, align 4, !dbg !1239
  %add808 = add i32 %554, 1, !dbg !1239
  store i32 %add808, ptr %e558, align 4, !dbg !1239
  br label %loop.cond791, !dbg !1239

loop.exit809:                                     ; preds = %checkok802
  br label %if.exit810, !dbg !1239

if.exit810:                                       ; preds = %loop.exit809, %checkok707
  br label %if.exit811, !dbg !1239

if.exit811:                                       ; preds = %if.exit810, %or.phi636
  %555 = load ptr, ptr %z, align 8, !dbg !1240
  %556 = load ptr, ptr %d601, align 8, !dbg !1241
  %ptradd_any812 = getelementptr i8, ptr %556, i64 4, !dbg !1242
  %gt813 = icmp ugt ptr %555, %ptradd_any812, !dbg !1240
  br i1 %gt813, label %if.then814, label %if.exit816, !dbg !1240

if.then814:                                       ; preds = %if.exit811
  %557 = load ptr, ptr %d601, align 8, !dbg !1243
  %ptradd_any815 = getelementptr i8, ptr %557, i64 4, !dbg !1244
  store ptr %ptradd_any815, ptr %z, align 8, !dbg !1244
  br label %if.exit816, !dbg !1244

if.exit816:                                       ; preds = %if.then814, %if.exit811
  br label %if.exit817, !dbg !1244

if.exit817:                                       ; preds = %if.exit816, %cond.phi590
  br label %loop.cond818, !dbg !1245

loop.cond818:                                     ; preds = %loop.body825, %if.exit817
  %558 = load ptr, ptr %z, align 8, !dbg !1246
  %559 = load ptr, ptr %a, align 8, !dbg !1248
  %gt819 = icmp ugt ptr %558, %559, !dbg !1246
  br i1 %gt819, label %and.rhs820, label %and.phi823, !dbg !1246

and.rhs820:                                       ; preds = %loop.cond818
  %560 = load ptr, ptr %z, align 8, !dbg !1249
  %ptradd821 = getelementptr inbounds i8, ptr %560, i64 -4, !dbg !1250
  %561 = load i32, ptr %ptradd821, align 4, !dbg !1250
  %i2nb822 = icmp eq i32 %561, 0, !dbg !1250
  br label %and.phi823, !dbg !1250

and.phi823:                                       ; preds = %and.rhs820, %loop.cond818
  %val824 = phi i1 [ false, %loop.cond818 ], [ %i2nb822, %and.rhs820 ], !dbg !1250
  br i1 %val824, label %loop.body825, label %loop.exit827, !dbg !1250

loop.body825:                                     ; preds = %and.phi823
  %562 = load ptr, ptr %z, align 8, !dbg !1251
  %ptradd_any826 = getelementptr i8, ptr %562, i8 -4, !dbg !1251
  store ptr %ptradd_any826, ptr %z, align 8, !dbg !1251
  br label %loop.cond818, !dbg !1251

loop.exit827:                                     ; preds = %and.phi823
  %563 = load i32, ptr %formatting, align 4, !dbg !1252
  %eq828 = icmp eq i32 %563, 2, !dbg !1252
  br i1 %eq828, label %if.then829, label %if.exit896, !dbg !1252

if.then829:                                       ; preds = %loop.exit827
  %564 = load i64, ptr %p, align 8, !dbg !1253
  %i2nb830 = icmp eq i64 %564, 0, !dbg !1253
  br i1 %i2nb830, label %if.then831, label %if.exit833, !dbg !1253

if.then831:                                       ; preds = %if.then829
  %565 = load i64, ptr %p, align 8, !dbg !1255
  %add832 = add i64 %565, 1, !dbg !1255
  store i64 %add832, ptr %p, align 8, !dbg !1255
  br label %if.exit833, !dbg !1255

if.exit833:                                       ; preds = %if.then831, %if.then829
  %566 = load i64, ptr %p, align 8, !dbg !1256
  %567 = load i32, ptr %e558, align 4, !dbg !1257
  %sext834 = sext i32 %567 to i64, !dbg !1257
  %gt835 = icmp sgt i64 %566, %sext834, !dbg !1256
  br i1 %gt835, label %and.rhs836, label %and.phi838, !dbg !1256

and.rhs836:                                       ; preds = %if.exit833
  %568 = load i32, ptr %e558, align 4, !dbg !1258
  %ge837 = icmp sge i32 %568, -4, !dbg !1258
  br label %and.phi838, !dbg !1258

and.phi838:                                       ; preds = %and.rhs836, %if.exit833
  %val839 = phi i1 [ false, %if.exit833 ], [ %ge837, %and.rhs836 ], !dbg !1258
  br i1 %val839, label %if.then840, label %if.else844, !dbg !1258

if.then840:                                       ; preds = %and.phi838
  store i32 0, ptr %formatting, align 4, !dbg !1259
  %569 = load i64, ptr %p, align 8, !dbg !1261
  %570 = load i32, ptr %e558, align 4, !dbg !1262
  %sext841 = sext i32 %570 to i64, !dbg !1262
  %add842 = add i64 %sext841, 1, !dbg !1262
  %sub843 = sub i64 %569, %add842, !dbg !1261
  store i64 %sub843, ptr %p, align 8, !dbg !1261
  br label %if.exit846, !dbg !1261

if.else844:                                       ; preds = %and.phi838
  store i32 1, ptr %formatting, align 4, !dbg !1263
  %571 = load i64, ptr %p, align 8, !dbg !1265
  %sub845 = sub i64 %571, 1, !dbg !1265
  store i64 %sub845, ptr %p, align 8, !dbg !1265
  br label %if.exit846, !dbg !1265

if.exit846:                                       ; preds = %if.else844, %if.then840
  %572 = load ptr, ptr %self, align 8, !dbg !1266
  %ptradd847 = getelementptr inbounds i8, ptr %572, i64 16, !dbg !1266
  %573 = load i32, ptr %ptradd847, align 8, !dbg !1266
  %lshrl848 = lshr i32 %573, 4, !dbg !1266
  %574 = and i32 1, %lshrl848, !dbg !1266
  %trunc849 = trunc i32 %574 to i8, !dbg !1266
  %575 = trunc i8 %trunc849 to i1, !dbg !1266
  %not850 = xor i1 %575, true, !dbg !1266
  br i1 %not850, label %if.then851, label %if.exit895, !dbg !1266

if.then851:                                       ; preds = %if.exit846
  %576 = load ptr, ptr %z, align 8, !dbg !1267
  %577 = load ptr, ptr %a, align 8, !dbg !1269
  %gt852 = icmp ugt ptr %576, %577, !dbg !1267
  br i1 %gt852, label %and.rhs853, label %and.phi856, !dbg !1267

and.rhs853:                                       ; preds = %if.then851
  %578 = load ptr, ptr %z, align 8, !dbg !1270
  %ptradd854 = getelementptr inbounds i8, ptr %578, i64 -4, !dbg !1271
  %579 = load i32, ptr %ptradd854, align 4, !dbg !1271
  %i2b855 = icmp ne i32 %579, 0, !dbg !1271
  br label %and.phi856, !dbg !1271

and.phi856:                                       ; preds = %and.rhs853, %if.then851
  %val857 = phi i1 [ false, %if.then851 ], [ %i2b855, %and.rhs853 ], !dbg !1271
  br i1 %val857, label %if.then858, label %if.else871, !dbg !1271

if.then858:                                       ; preds = %and.phi856
    #dbg_declare(ptr %i859, !1272, !DIExpression(), !1275)
  store i32 10, ptr %i859, align 4, !dbg !1276
  store i32 0, ptr %j, align 4, !dbg !1277
  br label %loop.cond860, !dbg !1277

loop.cond860:                                     ; preds = %loop.body867, %if.then858
  %580 = load ptr, ptr %z, align 8, !dbg !1278
  %ptradd861 = getelementptr inbounds i8, ptr %580, i64 -4, !dbg !1279
  %581 = load i32, ptr %ptradd861, align 4, !dbg !1279
  %582 = load i32, ptr %i859, align 4, !dbg !1280
  %zero862 = icmp eq i32 %582, 0, !dbg !1278
  %583 = call i1 @llvm.expect.i1(i1 %zero862, i1 false), !dbg !1278
  br i1 %583, label %panic863, label %checkok864, !dbg !1278

checkok864:                                       ; preds = %loop.cond860
  %smod865 = srem i32 %581, %582, !dbg !1278
  %eq866 = icmp eq i32 %smod865, 0, !dbg !1278
  br i1 %eq866, label %loop.body867, label %loop.exit870, !dbg !1278

loop.body867:                                     ; preds = %checkok864
  %584 = load i32, ptr %i859, align 4, !dbg !1281
  %mul868 = mul i32 %584, 10, !dbg !1281
  store i32 %mul868, ptr %i859, align 4, !dbg !1281
  %585 = load i32, ptr %j, align 4, !dbg !1282
  %add869 = add i32 %585, 1, !dbg !1282
  store i32 %add869, ptr %j, align 4, !dbg !1282
  br label %loop.cond860, !dbg !1282

loop.exit870:                                     ; preds = %checkok864
  br label %if.exit872, !dbg !1282

if.else871:                                       ; preds = %and.phi856
  store i32 9, ptr %j, align 4, !dbg !1283
  br label %if.exit872, !dbg !1283

if.exit872:                                       ; preds = %if.else871, %loop.exit870
  %586 = load i32, ptr %formatting, align 4, !dbg !1285
  %eq873 = icmp eq i32 %586, 0, !dbg !1285
  br i1 %eq873, label %if.then874, label %if.else883, !dbg !1285

if.then874:                                       ; preds = %if.exit872
  %587 = load i64, ptr %p, align 8
  store i64 %587, ptr %x875, align 8
  store i64 0, ptr %x876, align 8
  %588 = load ptr, ptr %z, align 8, !dbg !1286
  %589 = load ptr, ptr %r, align 8, !dbg !1288
  %590 = ptrtoint ptr %589 to i64, !dbg !1286
  %591 = ptrtoint ptr %588 to i64, !dbg !1286
  %592 = sub i64 %591, %590, !dbg !1286
  %593 = sdiv exact i64 %592, 4, !dbg !1286
  %sub877 = sub i64 %593, 1, !dbg !1286
  %mul878 = mul i64 9, %sub877, !dbg !1289
  %594 = load i32, ptr %j, align 4, !dbg !1290
  %sext879 = sext i32 %594 to i64, !dbg !1290
  %sub880 = sub i64 %mul878, %sext879, !dbg !1289
  store i64 %sub880, ptr %y881, align 8
  %595 = load i64, ptr %x876, align 8, !dbg !1291
  %596 = load i64, ptr %y881, align 8, !dbg !1294
  %597 = call i64 @llvm.smax.i64(i64 %595, i64 %596), !dbg !1294
  store i64 %597, ptr %y882, align 8
  %598 = load i64, ptr %x875, align 8, !dbg !1295
  %599 = load i64, ptr %y882, align 8, !dbg !1298
  %600 = call i64 @llvm.smin.i64(i64 %598, i64 %599), !dbg !1298
  store i64 %600, ptr %p, align 8, !dbg !1298
  br label %if.exit894, !dbg !1298

if.else883:                                       ; preds = %if.exit872
  %601 = load i64, ptr %p, align 8
  store i64 %601, ptr %x884, align 8
  store i64 0, ptr %x885, align 8
  %602 = load ptr, ptr %z, align 8, !dbg !1299
  %603 = load ptr, ptr %r, align 8, !dbg !1301
  %604 = ptrtoint ptr %603 to i64, !dbg !1299
  %605 = ptrtoint ptr %602 to i64, !dbg !1299
  %606 = sub i64 %605, %604, !dbg !1299
  %607 = sdiv exact i64 %606, 4, !dbg !1299
  %sub886 = sub i64 %607, 1, !dbg !1299
  %mul887 = mul i64 9, %sub886, !dbg !1302
  %608 = load i32, ptr %e558, align 4, !dbg !1303
  %sext888 = sext i32 %608 to i64, !dbg !1303
  %add889 = add i64 %mul887, %sext888, !dbg !1302
  %609 = load i32, ptr %j, align 4, !dbg !1304
  %sext890 = sext i32 %609 to i64, !dbg !1304
  %sub891 = sub i64 %add889, %sext890, !dbg !1302
  store i64 %sub891, ptr %y892, align 8
  %610 = load i64, ptr %x885, align 8, !dbg !1305
  %611 = load i64, ptr %y892, align 8, !dbg !1308
  %612 = call i64 @llvm.smax.i64(i64 %610, i64 %611), !dbg !1308
  store i64 %612, ptr %y893, align 8
  %613 = load i64, ptr %x884, align 8, !dbg !1309
  %614 = load i64, ptr %y893, align 8, !dbg !1312
  %615 = call i64 @llvm.smin.i64(i64 %613, i64 %614), !dbg !1312
  store i64 %615, ptr %p, align 8, !dbg !1312
  br label %if.exit894, !dbg !1312

if.exit894:                                       ; preds = %if.else883, %if.then874
  br label %if.exit895, !dbg !1312

if.exit895:                                       ; preds = %if.exit894, %if.exit846
  br label %if.exit896, !dbg !1312

if.exit896:                                       ; preds = %if.exit895, %loop.exit827
  %616 = load i64, ptr %p, align 8, !dbg !1313
  %617 = load i64, ptr %p, align 8, !dbg !1314
  %i2b897 = icmp ne i64 %617, 0, !dbg !1314
  br i1 %i2b897, label %or.phi902, label %or.rhs898, !dbg !1314

or.rhs898:                                        ; preds = %if.exit896
  %618 = load ptr, ptr %self, align 8, !dbg !1315
  %ptradd899 = getelementptr inbounds i8, ptr %618, i64 16, !dbg !1315
  %619 = load i32, ptr %ptradd899, align 8, !dbg !1315
  %lshrl900 = lshr i32 %619, 4, !dbg !1315
  %620 = and i32 1, %lshrl900, !dbg !1315
  %trunc901 = trunc i32 %620 to i8, !dbg !1315
  %621 = trunc i8 %trunc901 to i1, !dbg !1315
  br label %or.phi902, !dbg !1315

or.phi902:                                        ; preds = %or.rhs898, %if.exit896
  %val903 = phi i1 [ true, %if.exit896 ], [ %621, %or.rhs898 ], !dbg !1315
  %zext904 = zext i1 %val903 to i64, !dbg !1315
  %sub905 = sub i64 2147483646, %zext904, !dbg !1316
  %gt906 = icmp sgt i64 %616, %sub905, !dbg !1313
  br i1 %gt906, label %if.then907, label %if.exit908, !dbg !1313

if.then907:                                       ; preds = %or.phi902
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1317

if.exit908:                                       ; preds = %or.phi902
    #dbg_declare(ptr %l909, !1318, !DIExpression(), !1319)
  %622 = load i64, ptr %p, align 8, !dbg !1320
  %add910 = add i64 1, %622, !dbg !1321
  %623 = load i64, ptr %p, align 8, !dbg !1322
  %i2b911 = icmp ne i64 %623, 0, !dbg !1322
  br i1 %i2b911, label %or.phi916, label %or.rhs912, !dbg !1322

or.rhs912:                                        ; preds = %if.exit908
  %624 = load ptr, ptr %self, align 8, !dbg !1323
  %ptradd913 = getelementptr inbounds i8, ptr %624, i64 16, !dbg !1323
  %625 = load i32, ptr %ptradd913, align 8, !dbg !1323
  %lshrl914 = lshr i32 %625, 4, !dbg !1323
  %626 = and i32 1, %lshrl914, !dbg !1323
  %trunc915 = trunc i32 %626 to i8, !dbg !1323
  %627 = trunc i8 %trunc915 to i1, !dbg !1323
  br label %or.phi916, !dbg !1323

or.phi916:                                        ; preds = %or.rhs912, %if.exit908
  %val917 = phi i1 [ true, %if.exit908 ], [ %627, %or.rhs912 ], !dbg !1323
  %zext918 = zext i1 %val917 to i64, !dbg !1323
  %add919 = add i64 %add910, %zext918, !dbg !1324
  %trunc920 = trunc i64 %add919 to i32, !dbg !1324
  store i32 %trunc920, ptr %l909, align 4, !dbg !1324
    #dbg_declare(ptr %estr921, !1325, !DIExpression(), !1326)
  %628 = load i32, ptr %formatting, align 4, !dbg !1327
  %eq922 = icmp eq i32 %628, 0, !dbg !1327
  br i1 %eq922, label %if.then923, label %if.else932, !dbg !1327

if.then923:                                       ; preds = %or.phi916
  %629 = load i32, ptr %e558, align 4, !dbg !1328
  %630 = load i32, ptr %l909, align 4, !dbg !1330
  %sub924 = sub i32 2147483647, %630, !dbg !1331
  %gt925 = icmp sgt i32 %629, %sub924, !dbg !1328
  br i1 %gt925, label %if.then926, label %if.exit927, !dbg !1328

if.then926:                                       ; preds = %if.then923
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1332

if.exit927:                                       ; preds = %if.then923
  %631 = load i32, ptr %e558, align 4, !dbg !1333
  %gt928 = icmp sgt i32 %631, 0, !dbg !1333
  br i1 %gt928, label %if.then929, label %if.exit931, !dbg !1333

if.then929:                                       ; preds = %if.exit927
  %632 = load i32, ptr %l909, align 4, !dbg !1334
  %633 = load i32, ptr %e558, align 4, !dbg !1335
  %add930 = add i32 %632, %633, !dbg !1334
  store i32 %add930, ptr %l909, align 4, !dbg !1334
  br label %if.exit931, !dbg !1334

if.exit931:                                       ; preds = %if.then929, %if.exit927
  br label %if.exit970, !dbg !1334

if.else932:                                       ; preds = %or.phi916
  %634 = load i32, ptr %e558, align 4, !dbg !1336
  %lt933 = icmp slt i32 %634, 0, !dbg !1336
  br i1 %lt933, label %cond.lhs934, label %cond.rhs936, !dbg !1336

cond.lhs934:                                      ; preds = %if.else932
  %635 = load i32, ptr %e558, align 4, !dbg !1338
  %neg935 = sub i32 0, %635, !dbg !1338
  br label %cond.phi937, !dbg !1338

cond.rhs936:                                      ; preds = %if.else932
  %636 = load i32, ptr %e558, align 4, !dbg !1339
  br label %cond.phi937, !dbg !1339

cond.phi937:                                      ; preds = %cond.rhs936, %cond.lhs934
  %val938 = phi i32 [ %neg935, %cond.lhs934 ], [ %636, %cond.rhs936 ], !dbg !1339
  %sext939 = sext i32 %val938 to i128, !dbg !1339
  store i128 %sext939, ptr %taddr940, align 16
  %lo941 = load i64, ptr %taddr940, align 16
  %ptradd942 = getelementptr inbounds i8, ptr %taddr940, i64 8
  %hi943 = load i64, ptr %ptradd942, align 8
  %637 = load ptr, ptr %ebuf, align 8
  %638 = call ptr @std.io.fmt_u(i64 %lo941, i64 %hi943, ptr %637), !dbg !1340
  store ptr %638, ptr %estr921, align 8, !dbg !1340
  br label %loop.cond944, !dbg !1341

loop.cond944:                                     ; preds = %loop.body946, %cond.phi937
  %639 = load ptr, ptr %ebuf, align 8, !dbg !1342
  %640 = load ptr, ptr %estr921, align 8, !dbg !1344
  %641 = ptrtoint ptr %640 to i64, !dbg !1342
  %642 = ptrtoint ptr %639 to i64, !dbg !1342
  %643 = sub i64 %642, %641, !dbg !1342
  %644 = sdiv exact i64 %643, 1, !dbg !1342
  %lt945 = icmp slt i64 %644, 2, !dbg !1342
  br i1 %lt945, label %loop.body946, label %loop.exit948, !dbg !1342

loop.body946:                                     ; preds = %loop.cond944
  %645 = load ptr, ptr %estr921, align 8, !dbg !1345
  %ptradd_any947 = getelementptr i8, ptr %645, i8 -1, !dbg !1345
  store ptr %ptradd_any947, ptr %estr921, align 8, !dbg !1345
  store i8 48, ptr %ptradd_any947, align 1, !dbg !1346
  br label %loop.cond944, !dbg !1346

loop.exit948:                                     ; preds = %loop.cond944
  %646 = load ptr, ptr %estr921, align 8, !dbg !1347
  %ptradd_any949 = getelementptr i8, ptr %646, i8 -1, !dbg !1347
  store ptr %ptradd_any949, ptr %estr921, align 8, !dbg !1347
  %checknull950 = icmp eq ptr %ptradd_any949, null, !dbg !1347
  %647 = call i1 @llvm.expect.i1(i1 %checknull950, i1 false), !dbg !1347
  br i1 %647, label %panic951, label %checkok952, !dbg !1347

checkok952:                                       ; preds = %loop.exit948
  %648 = load i32, ptr %e558, align 4, !dbg !1348
  %lt953 = icmp slt i32 %648, 0, !dbg !1348
  %ternary954 = select i1 %lt953, i8 45, i8 43, !dbg !1349
  store i8 %ternary954, ptr %ptradd_any949, align 1, !dbg !1349
  %649 = load ptr, ptr %estr921, align 8, !dbg !1350
  %ptradd_any955 = getelementptr i8, ptr %649, i8 -1, !dbg !1350
  store ptr %ptradd_any955, ptr %estr921, align 8, !dbg !1350
  %checknull956 = icmp eq ptr %ptradd_any955, null, !dbg !1350
  %650 = call i1 @llvm.expect.i1(i1 %checknull956, i1 false), !dbg !1350
  br i1 %650, label %panic957, label %checkok958, !dbg !1350

checkok958:                                       ; preds = %checkok952
  %651 = load ptr, ptr %self, align 8, !dbg !1351
  %ptradd959 = getelementptr inbounds i8, ptr %651, i64 16, !dbg !1351
  %652 = load i32, ptr %ptradd959, align 8, !dbg !1351
  %lshrl960 = lshr i32 %652, 5, !dbg !1351
  %653 = and i32 1, %lshrl960, !dbg !1351
  %trunc961 = trunc i32 %653 to i8, !dbg !1351
  %654 = trunc i8 %trunc961 to i1, !dbg !1351
  %ternary962 = select i1 %654, i8 69, i8 101, !dbg !1352
  store i8 %ternary962, ptr %ptradd_any955, align 1, !dbg !1352
  %655 = load ptr, ptr %ebuf, align 8, !dbg !1353
  %656 = load ptr, ptr %estr921, align 8, !dbg !1354
  %657 = ptrtoint ptr %656 to i64, !dbg !1353
  %658 = ptrtoint ptr %655 to i64, !dbg !1353
  %659 = sub i64 %658, %657, !dbg !1353
  %660 = sdiv exact i64 %659, 1, !dbg !1353
  %661 = load i32, ptr %l909, align 4, !dbg !1355
  %sext963 = sext i32 %661 to i64, !dbg !1355
  %sub964 = sub i64 2147483647, %sext963, !dbg !1356
  %gt965 = icmp sgt i64 %660, %sub964, !dbg !1353
  br i1 %gt965, label %if.then966, label %if.exit967, !dbg !1353

if.then966:                                       ; preds = %checkok958
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1357

if.exit967:                                       ; preds = %checkok958
  %662 = load i32, ptr %l909, align 4, !dbg !1358
  %663 = load ptr, ptr %ebuf, align 8, !dbg !1359
  %664 = load ptr, ptr %estr921, align 8, !dbg !1360
  %665 = ptrtoint ptr %664 to i64, !dbg !1361
  %666 = ptrtoint ptr %663 to i64, !dbg !1361
  %667 = sub i64 %666, %665, !dbg !1361
  %668 = sdiv exact i64 %667, 1, !dbg !1361
  %trunc968 = trunc i64 %668 to i32, !dbg !1361
  %add969 = add i32 %662, %trunc968, !dbg !1358
  store i32 %add969, ptr %l909, align 4, !dbg !1358
  br label %if.exit970, !dbg !1358

if.exit970:                                       ; preds = %if.exit967, %if.exit931
  %669 = load i32, ptr %l909, align 4, !dbg !1362
  %sext971 = sext i32 %669 to i64, !dbg !1362
  %670 = load i64, ptr %pl, align 8, !dbg !1363
  %sub972 = sub i64 2147483647, %670, !dbg !1364
  %gt973 = icmp sgt i64 %sext971, %sub972, !dbg !1362
  br i1 %gt973, label %if.then974, label %if.exit975, !dbg !1362

if.then974:                                       ; preds = %if.exit970
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1365

if.exit975:                                       ; preds = %if.exit970
    #dbg_declare(ptr %len976, !1366, !DIExpression(), !1367)
  store i64 0, ptr %len976, align 8, !dbg !1367
  %671 = load ptr, ptr %self, align 8, !dbg !1368
  %ptradd977 = getelementptr inbounds i8, ptr %671, i64 16, !dbg !1368
  %672 = load i32, ptr %ptradd977, align 8, !dbg !1368
  %lshrl978 = lshr i32 %672, 1, !dbg !1368
  %673 = and i32 1, %lshrl978, !dbg !1368
  %trunc979 = trunc i32 %673 to i8, !dbg !1368
  %674 = trunc i8 %trunc979 to i1, !dbg !1368
  %not980 = xor i1 %674, true, !dbg !1368
  br i1 %not980, label %and.rhs981, label %and.phi985, !dbg !1368

and.rhs981:                                       ; preds = %if.exit975
  %675 = load ptr, ptr %self, align 8, !dbg !1369
  %ptradd982 = getelementptr inbounds i8, ptr %675, i64 16, !dbg !1369
  %676 = load i32, ptr %ptradd982, align 8, !dbg !1369
  %677 = and i32 1, %676, !dbg !1369
  %trunc983 = trunc i32 %677 to i8, !dbg !1369
  %678 = trunc i8 %trunc983 to i1, !dbg !1369
  %not984 = xor i1 %678, true, !dbg !1369
  br label %and.phi985, !dbg !1369

and.phi985:                                       ; preds = %and.rhs981, %if.exit975
  %val986 = phi i1 [ false, %if.exit975 ], [ %not984, %and.rhs981 ], !dbg !1369
  br i1 %val986, label %if.then987, label %if.exit1001, !dbg !1369

if.then987:                                       ; preds = %and.phi985
  %679 = load i64, ptr %len976, align 8, !dbg !1370
  %680 = load ptr, ptr %self, align 8, !dbg !1371
  %ptradd989 = getelementptr inbounds i8, ptr %680, i64 16, !dbg !1371
  %ptradd990 = getelementptr inbounds i8, ptr %ptradd989, i64 4, !dbg !1371
  %681 = load i32, ptr %ptradd990, align 4, !dbg !1371
  %zext991 = zext i32 %681 to i64, !dbg !1371
  %682 = load i64, ptr %pl, align 8, !dbg !1372
  %683 = load i32, ptr %l909, align 4, !dbg !1373
  %sext992 = sext i32 %683 to i64, !dbg !1373
  %add993 = add i64 %682, %sext992, !dbg !1372
  %684 = load ptr, ptr %self, align 8
  %685 = call i64 @std.io.Formatter.pad(ptr %retparam994, ptr %684, i8 zeroext 32, i64 %zext991, i64 %add993) #6, !dbg !1374
  %not_err995 = icmp eq i64 %685, 0, !dbg !1374
  %686 = call i1 @llvm.expect.i1(i1 %not_err995, i1 true), !dbg !1374
  br i1 %686, label %after_check997, label %assign_optional996, !dbg !1374

assign_optional996:                               ; preds = %if.then987
  store i64 %685, ptr %error_var988, align 8, !dbg !1374
  br label %guard_block998, !dbg !1374

after_check997:                                   ; preds = %if.then987
  br label %noerr_block999, !dbg !1374

guard_block998:                                   ; preds = %assign_optional996
  %687 = load i64, ptr %error_var988, align 8, !dbg !1374
  ret i64 %687, !dbg !1374

noerr_block999:                                   ; preds = %after_check997
  %688 = load i64, ptr %retparam994, align 8, !dbg !1374
  %add1000 = add i64 %679, %688, !dbg !1370
  store i64 %add1000, ptr %len976, align 8, !dbg !1370
  br label %if.exit1001, !dbg !1370

if.exit1001:                                      ; preds = %noerr_block999, %and.phi985
  %689 = load i8, ptr %is_neg, align 1, !dbg !1375
  %690 = trunc i8 %689 to i1, !dbg !1375
  br i1 %690, label %or.phi1006, label %or.rhs1002, !dbg !1375

or.rhs1002:                                       ; preds = %if.exit1001
  %691 = load ptr, ptr %self, align 8, !dbg !1376
  %ptradd1003 = getelementptr inbounds i8, ptr %691, i64 16, !dbg !1376
  %692 = load i32, ptr %ptradd1003, align 8, !dbg !1376
  %lshrl1004 = lshr i32 %692, 2, !dbg !1376
  %693 = and i32 1, %lshrl1004, !dbg !1376
  %trunc1005 = trunc i32 %693 to i8, !dbg !1376
  %694 = trunc i8 %trunc1005 to i1, !dbg !1376
  br label %or.phi1006, !dbg !1376

or.phi1006:                                       ; preds = %or.rhs1002, %if.exit1001
  %val1007 = phi i1 [ true, %if.exit1001 ], [ %694, %or.rhs1002 ], !dbg !1376
  br i1 %val1007, label %if.then1008, label %if.exit1018, !dbg !1376

if.then1008:                                      ; preds = %or.phi1006
  %695 = load i64, ptr %len976, align 8, !dbg !1377
  %696 = load i8, ptr %is_neg, align 1, !dbg !1378
  %697 = trunc i8 %696 to i1, !dbg !1378
  %ternary1010 = select i1 %697, i8 45, i8 43, !dbg !1379
  %698 = load ptr, ptr %self, align 8
  %699 = call i64 @std.io.Formatter.out(ptr %retparam1011, ptr %698, i8 zeroext %ternary1010), !dbg !1380
  %not_err1012 = icmp eq i64 %699, 0, !dbg !1380
  %700 = call i1 @llvm.expect.i1(i1 %not_err1012, i1 true), !dbg !1380
  br i1 %700, label %after_check1014, label %assign_optional1013, !dbg !1380

assign_optional1013:                              ; preds = %if.then1008
  store i64 %699, ptr %error_var1009, align 8, !dbg !1380
  br label %guard_block1015, !dbg !1380

after_check1014:                                  ; preds = %if.then1008
  br label %noerr_block1016, !dbg !1380

guard_block1015:                                  ; preds = %assign_optional1013
  %701 = load i64, ptr %error_var1009, align 8, !dbg !1380
  ret i64 %701, !dbg !1380

noerr_block1016:                                  ; preds = %after_check1014
  %702 = load i64, ptr %retparam1011, align 8, !dbg !1380
  %add1017 = add i64 %695, %702, !dbg !1377
  store i64 %add1017, ptr %len976, align 8, !dbg !1377
  br label %if.exit1018, !dbg !1377

if.exit1018:                                      ; preds = %noerr_block1016, %or.phi1006
  %703 = load ptr, ptr %self, align 8, !dbg !1381
  %ptradd1019 = getelementptr inbounds i8, ptr %703, i64 16, !dbg !1381
  %704 = load i32, ptr %ptradd1019, align 8, !dbg !1381
  %705 = and i32 1, %704, !dbg !1381
  %trunc1020 = trunc i32 %705 to i8, !dbg !1381
  %706 = trunc i8 %trunc1020 to i1, !dbg !1381
  br i1 %706, label %if.then1021, label %if.exit1035, !dbg !1381

if.then1021:                                      ; preds = %if.exit1018
  %707 = load i64, ptr %len976, align 8, !dbg !1382
  %708 = load ptr, ptr %self, align 8, !dbg !1383
  %ptradd1023 = getelementptr inbounds i8, ptr %708, i64 16, !dbg !1383
  %ptradd1024 = getelementptr inbounds i8, ptr %ptradd1023, i64 4, !dbg !1383
  %709 = load i32, ptr %ptradd1024, align 4, !dbg !1383
  %zext1025 = zext i32 %709 to i64, !dbg !1383
  %710 = load i64, ptr %pl, align 8, !dbg !1384
  %711 = load i32, ptr %l909, align 4, !dbg !1385
  %sext1026 = sext i32 %711 to i64, !dbg !1385
  %add1027 = add i64 %710, %sext1026, !dbg !1384
  %712 = load ptr, ptr %self, align 8
  %713 = call i64 @std.io.Formatter.pad(ptr %retparam1028, ptr %712, i8 zeroext 48, i64 %zext1025, i64 %add1027) #6, !dbg !1386
  %not_err1029 = icmp eq i64 %713, 0, !dbg !1386
  %714 = call i1 @llvm.expect.i1(i1 %not_err1029, i1 true), !dbg !1386
  br i1 %714, label %after_check1031, label %assign_optional1030, !dbg !1386

assign_optional1030:                              ; preds = %if.then1021
  store i64 %713, ptr %error_var1022, align 8, !dbg !1386
  br label %guard_block1032, !dbg !1386

after_check1031:                                  ; preds = %if.then1021
  br label %noerr_block1033, !dbg !1386

guard_block1032:                                  ; preds = %assign_optional1030
  %715 = load i64, ptr %error_var1022, align 8, !dbg !1386
  ret i64 %715, !dbg !1386

noerr_block1033:                                  ; preds = %after_check1031
  %716 = load i64, ptr %retparam1028, align 8, !dbg !1386
  %add1034 = add i64 %707, %716, !dbg !1382
  store i64 %add1034, ptr %len976, align 8, !dbg !1382
  br label %if.exit1035, !dbg !1382

if.exit1035:                                      ; preds = %noerr_block1033, %if.exit1018
  %717 = load i32, ptr %formatting, align 4, !dbg !1387
  %eq1036 = icmp eq i32 %717, 0, !dbg !1387
  br i1 %eq1036, label %if.then1037, label %if.else1187, !dbg !1387

if.then1037:                                      ; preds = %if.exit1035
  %718 = load ptr, ptr %a, align 8, !dbg !1388
  %719 = load ptr, ptr %r, align 8, !dbg !1390
  %gt1038 = icmp ugt ptr %718, %719, !dbg !1388
  br i1 %gt1038, label %if.then1039, label %if.exit1040, !dbg !1388

if.then1039:                                      ; preds = %if.then1037
  %720 = load ptr, ptr %r, align 8, !dbg !1391
  store ptr %720, ptr %a, align 8, !dbg !1391
  br label %if.exit1040, !dbg !1391

if.exit1040:                                      ; preds = %if.then1039, %if.then1037
    #dbg_declare(ptr %d1041, !1392, !DIExpression(), !1393)
  %721 = load ptr, ptr %a, align 8, !dbg !1394
  store ptr %721, ptr %d1041, align 8, !dbg !1394
  br label %loop.cond1042, !dbg !1395

loop.cond1042:                                    ; preds = %noerr_block1101, %if.exit1040
  %722 = load ptr, ptr %d1041, align 8, !dbg !1396
  %723 = load ptr, ptr %r, align 8, !dbg !1398
  %le1043 = icmp ule ptr %722, %723, !dbg !1396
  br i1 %le1043, label %loop.body1044, label %loop.exit1104, !dbg !1396

loop.body1044:                                    ; preds = %loop.cond1042
    #dbg_declare(ptr %s1045, !1399, !DIExpression(), !1401)
  %724 = load ptr, ptr %d1041, align 8, !dbg !1402
  %checknull1046 = icmp eq ptr %724, null, !dbg !1402
  %725 = call i1 @llvm.expect.i1(i1 %checknull1046, i1 false), !dbg !1402
  br i1 %725, label %panic1047, label %checkok1048, !dbg !1402

checkok1048:                                      ; preds = %loop.body1044
  %726 = ptrtoint ptr %724 to i64, !dbg !1402
  %727 = urem i64 %726, 4, !dbg !1402
  %728 = icmp ne i64 %727, 0, !dbg !1402
  %729 = call i1 @llvm.expect.i1(i1 %728, i1 false), !dbg !1402
  br i1 %729, label %panic1049, label %checkok1056, !dbg !1402

checkok1056:                                      ; preds = %checkok1048
  %730 = load i32, ptr %724, align 4, !dbg !1402
  %zext1057 = zext i32 %730 to i128, !dbg !1402
  %731 = load ptr, ptr %buf, align 8, !dbg !1403
  %ptradd_any1058 = getelementptr i8, ptr %731, i64 9, !dbg !1404
  store i128 %zext1057, ptr %taddr1059, align 16
  %lo1060 = load i64, ptr %taddr1059, align 16
  %ptradd1061 = getelementptr inbounds i8, ptr %taddr1059, i64 8
  %hi1062 = load i64, ptr %ptradd1061, align 8
  %732 = call ptr @std.io.fmt_u(i64 %lo1060, i64 %hi1062, ptr %ptradd_any1058), !dbg !1405
  store ptr %732, ptr %s1045, align 8, !dbg !1405
  store i8 1, ptr %switch1063, align 1
  br label %switch.entry1064

switch.entry1064:                                 ; preds = %checkok1056
  %733 = load i8, ptr %switch1063, align 1
  %734 = trunc i8 %733 to i1
  %735 = load ptr, ptr %d1041, align 8, !dbg !1406
  %736 = load ptr, ptr %a, align 8, !dbg !1408
  %neq1065 = icmp ne ptr %735, %736, !dbg !1406
  %eq1066 = icmp eq i1 %neq1065, %734, !dbg !1406
  br i1 %eq1066, label %switch.case1067, label %next_if1073, !dbg !1406

switch.case1067:                                  ; preds = %switch.entry1064
  br label %loop.cond1068, !dbg !1409

loop.cond1068:                                    ; preds = %loop.body1070, %switch.case1067
  %737 = load ptr, ptr %s1045, align 8, !dbg !1411
  %738 = load ptr, ptr %buf, align 8, !dbg !1413
  %gt1069 = icmp ugt ptr %737, %738, !dbg !1411
  br i1 %gt1069, label %loop.body1070, label %loop.exit1072, !dbg !1411

loop.body1070:                                    ; preds = %loop.cond1068
  %739 = load ptr, ptr %s1045, align 8, !dbg !1414
  %ptradd_any1071 = getelementptr i8, ptr %739, i8 -1, !dbg !1414
  store ptr %ptradd_any1071, ptr %s1045, align 8, !dbg !1414
  store i8 48, ptr %ptradd_any1071, align 1, !dbg !1415
  br label %loop.cond1068, !dbg !1415

loop.exit1072:                                    ; preds = %loop.cond1068
  br label %switch.exit1083, !dbg !1415

next_if1073:                                      ; preds = %switch.entry1064
  %740 = load ptr, ptr %s1045, align 8, !dbg !1416
  %741 = load ptr, ptr %buf, align 8, !dbg !1417
  %ptradd_any1074 = getelementptr i8, ptr %741, i64 9, !dbg !1418
  %eq1075 = icmp eq ptr %740, %ptradd_any1074, !dbg !1416
  %eq1076 = icmp eq i1 %eq1075, %734, !dbg !1416
  br i1 %eq1076, label %switch.case1077, label %next_if1082, !dbg !1416

switch.case1077:                                  ; preds = %next_if1073
  %742 = load ptr, ptr %s1045, align 8, !dbg !1419
  %ptradd_any1078 = getelementptr i8, ptr %742, i8 -1, !dbg !1419
  store ptr %ptradd_any1078, ptr %s1045, align 8, !dbg !1419
  %checknull1079 = icmp eq ptr %ptradd_any1078, null, !dbg !1419
  %743 = call i1 @llvm.expect.i1(i1 %checknull1079, i1 false), !dbg !1419
  br i1 %743, label %panic1080, label %checkok1081, !dbg !1419

checkok1081:                                      ; preds = %switch.case1077
  store i8 48, ptr %ptradd_any1078, align 1, !dbg !1421
  br label %switch.exit1083, !dbg !1421

next_if1082:                                      ; preds = %next_if1073
  br label %switch.exit1083, !dbg !1421

switch.exit1083:                                  ; preds = %next_if1082, %checkok1081, %loop.exit1072
  %744 = load i64, ptr %len976, align 8, !dbg !1422
  %745 = load ptr, ptr %s1045, align 8, !dbg !1423
  %746 = load ptr, ptr %buf, align 8, !dbg !1424
  %ptradd_any1085 = getelementptr i8, ptr %746, i64 9, !dbg !1425
  %747 = load ptr, ptr %s1045, align 8, !dbg !1426
  %748 = ptrtoint ptr %747 to i64, !dbg !1424
  %749 = ptrtoint ptr %ptradd_any1085 to i64, !dbg !1424
  %750 = sub i64 %749, %748, !dbg !1424
  %751 = sdiv exact i64 %750, 1, !dbg !1424
  %add1086 = add i64 0, %751, !dbg !1424
  %gt1087 = icmp sgt i64 0, %add1086, !dbg !1424
  %sub1088 = sub i64 %add1086, 0, !dbg !1424
  %752 = call i1 @llvm.expect.i1(i1 %gt1087, i1 false), !dbg !1424
  br i1 %752, label %panic1089, label %checkok1094, !dbg !1424

checkok1094:                                      ; preds = %switch.exit1083
  %size1095 = sub i64 %add1086, 0, !dbg !1423
  %753 = insertvalue %"char[]" undef, ptr %745, 0, !dbg !1423
  %754 = insertvalue %"char[]" %753, i64 %size1095, 1, !dbg !1423
  %755 = load ptr, ptr %self, align 8
  %756 = call i64 @std.io.Formatter.out_chars(ptr %retparam1096, ptr %755, ptr %745, i64 %size1095), !dbg !1427
  %not_err1097 = icmp eq i64 %756, 0, !dbg !1427
  %757 = call i1 @llvm.expect.i1(i1 %not_err1097, i1 true), !dbg !1427
  br i1 %757, label %after_check1099, label %assign_optional1098, !dbg !1427

assign_optional1098:                              ; preds = %checkok1094
  store i64 %756, ptr %error_var1084, align 8, !dbg !1427
  br label %guard_block1100, !dbg !1427

after_check1099:                                  ; preds = %checkok1094
  br label %noerr_block1101, !dbg !1427

guard_block1100:                                  ; preds = %assign_optional1098
  %758 = load i64, ptr %error_var1084, align 8, !dbg !1427
  ret i64 %758, !dbg !1427

noerr_block1101:                                  ; preds = %after_check1099
  %759 = load i64, ptr %retparam1096, align 8, !dbg !1427
  %add1102 = add i64 %744, %759, !dbg !1422
  store i64 %add1102, ptr %len976, align 8, !dbg !1422
  %760 = load ptr, ptr %d1041, align 8, !dbg !1428
  %ptradd_any1103 = getelementptr i8, ptr %760, i8 4, !dbg !1428
  store ptr %ptradd_any1103, ptr %d1041, align 8, !dbg !1428
  br label %loop.cond1042, !dbg !1428

loop.exit1104:                                    ; preds = %loop.cond1042
  %761 = load i64, ptr %p, align 8, !dbg !1429
  %i2b1105 = icmp ne i64 %761, 0, !dbg !1429
  br i1 %i2b1105, label %or.phi1110, label %or.rhs1106, !dbg !1429

or.rhs1106:                                       ; preds = %loop.exit1104
  %762 = load ptr, ptr %self, align 8, !dbg !1430
  %ptradd1107 = getelementptr inbounds i8, ptr %762, i64 16, !dbg !1430
  %763 = load i32, ptr %ptradd1107, align 8, !dbg !1430
  %lshrl1108 = lshr i32 %763, 4, !dbg !1430
  %764 = and i32 1, %lshrl1108, !dbg !1430
  %trunc1109 = trunc i32 %764 to i8, !dbg !1430
  %765 = trunc i8 %trunc1109 to i1, !dbg !1430
  br label %or.phi1110, !dbg !1430

or.phi1110:                                       ; preds = %or.rhs1106, %loop.exit1104
  %val1111 = phi i1 [ true, %loop.exit1104 ], [ %765, %or.rhs1106 ], !dbg !1430
  br i1 %val1111, label %if.then1112, label %if.exit1121, !dbg !1430

if.then1112:                                      ; preds = %or.phi1110
  %766 = load i64, ptr %len976, align 8, !dbg !1431
  %767 = load ptr, ptr %self, align 8
  %768 = call i64 @std.io.Formatter.out(ptr %retparam1114, ptr %767, i8 zeroext 46), !dbg !1432
  %not_err1115 = icmp eq i64 %768, 0, !dbg !1432
  %769 = call i1 @llvm.expect.i1(i1 %not_err1115, i1 true), !dbg !1432
  br i1 %769, label %after_check1117, label %assign_optional1116, !dbg !1432

assign_optional1116:                              ; preds = %if.then1112
  store i64 %768, ptr %error_var1113, align 8, !dbg !1432
  br label %guard_block1118, !dbg !1432

after_check1117:                                  ; preds = %if.then1112
  br label %noerr_block1119, !dbg !1432

guard_block1118:                                  ; preds = %assign_optional1116
  %770 = load i64, ptr %error_var1113, align 8, !dbg !1432
  ret i64 %770, !dbg !1432

noerr_block1119:                                  ; preds = %after_check1117
  %771 = load i64, ptr %retparam1114, align 8, !dbg !1432
  %add1120 = add i64 %766, %771, !dbg !1431
  store i64 %add1120, ptr %len976, align 8, !dbg !1431
  br label %if.exit1121, !dbg !1431

if.exit1121:                                      ; preds = %noerr_block1119, %or.phi1110
  br label %loop.cond1122, !dbg !1433

loop.cond1122:                                    ; preds = %noerr_block1173, %if.exit1121
  %772 = load ptr, ptr %d1041, align 8, !dbg !1434
  %773 = load ptr, ptr %z, align 8, !dbg !1436
  %lt1123 = icmp ult ptr %772, %773, !dbg !1434
  br i1 %lt1123, label %and.rhs1124, label %and.phi1126, !dbg !1434

and.rhs1124:                                      ; preds = %loop.cond1122
  %774 = load i64, ptr %p, align 8, !dbg !1437
  %gt1125 = icmp sgt i64 %774, 0, !dbg !1437
  br label %and.phi1126, !dbg !1437

and.phi1126:                                      ; preds = %and.rhs1124, %loop.cond1122
  %val1127 = phi i1 [ false, %loop.cond1122 ], [ %gt1125, %and.rhs1124 ], !dbg !1437
  br i1 %val1127, label %loop.body1128, label %loop.exit1177, !dbg !1437

loop.body1128:                                    ; preds = %and.phi1126
    #dbg_declare(ptr %s1129, !1438, !DIExpression(), !1440)
  %775 = load ptr, ptr %d1041, align 8, !dbg !1441
  %checknull1130 = icmp eq ptr %775, null, !dbg !1441
  %776 = call i1 @llvm.expect.i1(i1 %checknull1130, i1 false), !dbg !1441
  br i1 %776, label %panic1131, label %checkok1132, !dbg !1441

checkok1132:                                      ; preds = %loop.body1128
  %777 = ptrtoint ptr %775 to i64, !dbg !1441
  %778 = urem i64 %777, 4, !dbg !1441
  %779 = icmp ne i64 %778, 0, !dbg !1441
  %780 = call i1 @llvm.expect.i1(i1 %779, i1 false), !dbg !1441
  br i1 %780, label %panic1133, label %checkok1140, !dbg !1441

checkok1140:                                      ; preds = %checkok1132
  %781 = load i32, ptr %775, align 4, !dbg !1441
  %zext1141 = zext i32 %781 to i128, !dbg !1441
  %782 = load ptr, ptr %buf, align 8, !dbg !1442
  %ptradd_any1142 = getelementptr i8, ptr %782, i64 9, !dbg !1443
  store i128 %zext1141, ptr %taddr1143, align 16
  %lo1144 = load i64, ptr %taddr1143, align 16
  %ptradd1145 = getelementptr inbounds i8, ptr %taddr1143, i64 8
  %hi1146 = load i64, ptr %ptradd1145, align 8
  %783 = call ptr @std.io.fmt_u(i64 %lo1144, i64 %hi1146, ptr %ptradd_any1142), !dbg !1444
  store ptr %783, ptr %s1129, align 8, !dbg !1444
  br label %loop.cond1147, !dbg !1445

loop.cond1147:                                    ; preds = %checkok1153, %checkok1140
  %784 = load ptr, ptr %s1129, align 8, !dbg !1446
  %785 = load ptr, ptr %buf, align 8, !dbg !1448
  %gt1148 = icmp ugt ptr %784, %785, !dbg !1446
  br i1 %gt1148, label %loop.body1149, label %loop.exit1154, !dbg !1446

loop.body1149:                                    ; preds = %loop.cond1147
  %786 = load ptr, ptr %s1129, align 8, !dbg !1449
  %ptradd_any1150 = getelementptr i8, ptr %786, i8 -1, !dbg !1449
  store ptr %ptradd_any1150, ptr %s1129, align 8, !dbg !1449
  %checknull1151 = icmp eq ptr %ptradd_any1150, null, !dbg !1449
  %787 = call i1 @llvm.expect.i1(i1 %checknull1151, i1 false), !dbg !1449
  br i1 %787, label %panic1152, label %checkok1153, !dbg !1449

checkok1153:                                      ; preds = %loop.body1149
  store i8 48, ptr %ptradd_any1150, align 1, !dbg !1450
  br label %loop.cond1147, !dbg !1450

loop.exit1154:                                    ; preds = %loop.cond1147
  %788 = load i64, ptr %len976, align 8, !dbg !1451
  %789 = load ptr, ptr %s1129, align 8, !dbg !1452
  store i64 9, ptr %x1156, align 8
  %790 = load i64, ptr %p, align 8
  store i64 %790, ptr %y1157, align 8
  %791 = load i64, ptr %x1156, align 8, !dbg !1453
  %792 = load i64, ptr %y1157, align 8, !dbg !1456
  %793 = call i64 @llvm.smin.i64(i64 %791, i64 %792), !dbg !1456
  %add1158 = add i64 0, %793, !dbg !1456
  %gt1159 = icmp sgt i64 0, %add1158, !dbg !1456
  %sub1160 = sub i64 %add1158, 0, !dbg !1456
  %794 = call i1 @llvm.expect.i1(i1 %gt1159, i1 false), !dbg !1456
  br i1 %794, label %panic1161, label %checkok1166, !dbg !1456

checkok1166:                                      ; preds = %loop.exit1154
  %size1167 = sub i64 %add1158, 0, !dbg !1452
  %795 = insertvalue %"char[]" undef, ptr %789, 0, !dbg !1452
  %796 = insertvalue %"char[]" %795, i64 %size1167, 1, !dbg !1452
  %797 = load ptr, ptr %self, align 8
  %798 = call i64 @std.io.Formatter.out_chars(ptr %retparam1168, ptr %797, ptr %789, i64 %size1167), !dbg !1457
  %not_err1169 = icmp eq i64 %798, 0, !dbg !1457
  %799 = call i1 @llvm.expect.i1(i1 %not_err1169, i1 true), !dbg !1457
  br i1 %799, label %after_check1171, label %assign_optional1170, !dbg !1457

assign_optional1170:                              ; preds = %checkok1166
  store i64 %798, ptr %error_var1155, align 8, !dbg !1457
  br label %guard_block1172, !dbg !1457

after_check1171:                                  ; preds = %checkok1166
  br label %noerr_block1173, !dbg !1457

guard_block1172:                                  ; preds = %assign_optional1170
  %800 = load i64, ptr %error_var1155, align 8, !dbg !1457
  ret i64 %800, !dbg !1457

noerr_block1173:                                  ; preds = %after_check1171
  %801 = load i64, ptr %retparam1168, align 8, !dbg !1457
  %add1174 = add i64 %788, %801, !dbg !1451
  store i64 %add1174, ptr %len976, align 8, !dbg !1451
  %802 = load ptr, ptr %d1041, align 8, !dbg !1458
  %ptradd_any1175 = getelementptr i8, ptr %802, i8 4, !dbg !1458
  store ptr %ptradd_any1175, ptr %d1041, align 8, !dbg !1458
  %803 = load i64, ptr %p, align 8, !dbg !1459
  %sub1176 = sub i64 %803, 9, !dbg !1459
  store i64 %sub1176, ptr %p, align 8, !dbg !1459
  br label %loop.cond1122, !dbg !1459

loop.exit1177:                                    ; preds = %and.phi1126
  %804 = load i64, ptr %len976, align 8, !dbg !1460
  %805 = load i64, ptr %p, align 8, !dbg !1461
  %add1179 = add i64 %805, 9, !dbg !1461
  %806 = load ptr, ptr %self, align 8
  %807 = call i64 @std.io.Formatter.pad(ptr %retparam1180, ptr %806, i8 zeroext 48, i64 %add1179, i64 9) #6, !dbg !1462
  %not_err1181 = icmp eq i64 %807, 0, !dbg !1462
  %808 = call i1 @llvm.expect.i1(i1 %not_err1181, i1 true), !dbg !1462
  br i1 %808, label %after_check1183, label %assign_optional1182, !dbg !1462

assign_optional1182:                              ; preds = %loop.exit1177
  store i64 %807, ptr %error_var1178, align 8, !dbg !1462
  br label %guard_block1184, !dbg !1462

after_check1183:                                  ; preds = %loop.exit1177
  br label %noerr_block1185, !dbg !1462

guard_block1184:                                  ; preds = %assign_optional1182
  %809 = load i64, ptr %error_var1178, align 8, !dbg !1462
  ret i64 %809, !dbg !1462

noerr_block1185:                                  ; preds = %after_check1183
  %810 = load i64, ptr %retparam1180, align 8, !dbg !1462
  %add1186 = add i64 %804, %810, !dbg !1460
  store i64 %add1186, ptr %len976, align 8, !dbg !1460
  br label %if.exit1310, !dbg !1460

if.else1187:                                      ; preds = %if.exit1035
  %811 = load ptr, ptr %z, align 8, !dbg !1463
  %812 = load ptr, ptr %a, align 8, !dbg !1465
  %le1188 = icmp ule ptr %811, %812, !dbg !1463
  br i1 %le1188, label %if.then1189, label %if.exit1191, !dbg !1463

if.then1189:                                      ; preds = %if.else1187
  %813 = load ptr, ptr %a, align 8, !dbg !1466
  %ptradd_any1190 = getelementptr i8, ptr %813, i64 4, !dbg !1467
  store ptr %ptradd_any1190, ptr %z, align 8, !dbg !1467
  br label %if.exit1191, !dbg !1467

if.exit1191:                                      ; preds = %if.then1189, %if.else1187
    #dbg_declare(ptr %d1192, !1468, !DIExpression(), !1470)
  %814 = load ptr, ptr %a, align 8, !dbg !1471
  store ptr %814, ptr %d1192, align 8, !dbg !1471
  br label %loop.cond1193, !dbg !1471

loop.cond1193:                                    ; preds = %noerr_block1277, %if.exit1191
  %815 = load ptr, ptr %d1192, align 8, !dbg !1472
  %816 = load ptr, ptr %z, align 8, !dbg !1473
  %lt1194 = icmp ult ptr %815, %816, !dbg !1472
  br i1 %lt1194, label %and.rhs1195, label %and.phi1197, !dbg !1472

and.rhs1195:                                      ; preds = %loop.cond1193
  %817 = load i64, ptr %p, align 8, !dbg !1474
  %ge1196 = icmp sge i64 %817, 0, !dbg !1474
  br label %and.phi1197, !dbg !1474

and.phi1197:                                      ; preds = %and.rhs1195, %loop.cond1193
  %val1198 = phi i1 [ false, %loop.cond1193 ], [ %ge1196, %and.rhs1195 ], !dbg !1474
  br i1 %val1198, label %loop.body1199, label %loop.exit1282, !dbg !1474

loop.body1199:                                    ; preds = %and.phi1197
    #dbg_declare(ptr %s1200, !1475, !DIExpression(), !1477)
  %818 = load ptr, ptr %d1192, align 8, !dbg !1478
  %checknull1201 = icmp eq ptr %818, null, !dbg !1478
  %819 = call i1 @llvm.expect.i1(i1 %checknull1201, i1 false), !dbg !1478
  br i1 %819, label %panic1202, label %checkok1203, !dbg !1478

checkok1203:                                      ; preds = %loop.body1199
  %820 = ptrtoint ptr %818 to i64, !dbg !1478
  %821 = urem i64 %820, 4, !dbg !1478
  %822 = icmp ne i64 %821, 0, !dbg !1478
  %823 = call i1 @llvm.expect.i1(i1 %822, i1 false), !dbg !1478
  br i1 %823, label %panic1204, label %checkok1211, !dbg !1478

checkok1211:                                      ; preds = %checkok1203
  %824 = load i32, ptr %818, align 4, !dbg !1478
  %zext1212 = zext i32 %824 to i128, !dbg !1478
  %825 = load ptr, ptr %buf, align 8, !dbg !1479
  %ptradd_any1213 = getelementptr i8, ptr %825, i64 9, !dbg !1480
  store i128 %zext1212, ptr %taddr1214, align 16
  %lo1215 = load i64, ptr %taddr1214, align 16
  %ptradd1216 = getelementptr inbounds i8, ptr %taddr1214, i64 8
  %hi1217 = load i64, ptr %ptradd1216, align 8
  %826 = call ptr @std.io.fmt_u(i64 %lo1215, i64 %hi1217, ptr %ptradd_any1213), !dbg !1481
  store ptr %826, ptr %s1200, align 8, !dbg !1481
  %827 = load ptr, ptr %s1200, align 8, !dbg !1482
  %828 = load ptr, ptr %buf, align 8, !dbg !1483
  %ptradd_any1218 = getelementptr i8, ptr %828, i64 9, !dbg !1484
  %eq1219 = icmp eq ptr %827, %ptradd_any1218, !dbg !1482
  br i1 %eq1219, label %if.then1220, label %if.exit1222, !dbg !1482

if.then1220:                                      ; preds = %checkok1211
  %829 = load ptr, ptr %s1200, align 8, !dbg !1485
  %ptradd_any1221 = getelementptr i8, ptr %829, i8 -1, !dbg !1485
  store ptr %ptradd_any1221, ptr %s1200, align 8, !dbg !1485
  store i8 48, ptr %ptradd_any1221, align 1, !dbg !1486
  br label %if.exit1222, !dbg !1486

if.exit1222:                                      ; preds = %if.then1220, %checkok1211
  %830 = load ptr, ptr %d1192, align 8, !dbg !1487
  %831 = load ptr, ptr %a, align 8, !dbg !1488
  %neq1223 = icmp ne ptr %830, %831, !dbg !1487
  br i1 %neq1223, label %if.then1224, label %if.else1230, !dbg !1487

if.then1224:                                      ; preds = %if.exit1222
  br label %loop.cond1225, !dbg !1489

loop.cond1225:                                    ; preds = %loop.body1227, %if.then1224
  %832 = load ptr, ptr %s1200, align 8, !dbg !1491
  %833 = load ptr, ptr %buf, align 8, !dbg !1493
  %gt1226 = icmp ugt ptr %832, %833, !dbg !1491
  br i1 %gt1226, label %loop.body1227, label %loop.exit1229, !dbg !1491

loop.body1227:                                    ; preds = %loop.cond1225
  %834 = load ptr, ptr %s1200, align 8, !dbg !1494
  %ptradd_any1228 = getelementptr i8, ptr %834, i8 -1, !dbg !1494
  store ptr %ptradd_any1228, ptr %s1200, align 8, !dbg !1494
  store i8 48, ptr %ptradd_any1228, align 1, !dbg !1495
  br label %loop.cond1225, !dbg !1495

loop.exit1229:                                    ; preds = %loop.cond1225
  br label %if.exit1257, !dbg !1495

if.else1230:                                      ; preds = %if.exit1222
  %835 = load i64, ptr %len976, align 8, !dbg !1496
  %836 = load ptr, ptr %s1200, align 8, !dbg !1498
  %ptradd_any1232 = getelementptr i8, ptr %836, i8 1, !dbg !1498
  store ptr %ptradd_any1232, ptr %s1200, align 8, !dbg !1498
  %837 = load ptr, ptr %self, align 8
  %838 = load i8, ptr %836, align 1
  %839 = call i64 @std.io.Formatter.out(ptr %retparam1233, ptr %837, i8 zeroext %838), !dbg !1499
  %not_err1234 = icmp eq i64 %839, 0, !dbg !1499
  %840 = call i1 @llvm.expect.i1(i1 %not_err1234, i1 true), !dbg !1499
  br i1 %840, label %after_check1236, label %assign_optional1235, !dbg !1499

assign_optional1235:                              ; preds = %if.else1230
  store i64 %839, ptr %error_var1231, align 8, !dbg !1499
  br label %guard_block1237, !dbg !1499

after_check1236:                                  ; preds = %if.else1230
  br label %noerr_block1238, !dbg !1499

guard_block1237:                                  ; preds = %assign_optional1235
  %841 = load i64, ptr %error_var1231, align 8, !dbg !1499
  ret i64 %841, !dbg !1499

noerr_block1238:                                  ; preds = %after_check1236
  %842 = load i64, ptr %retparam1233, align 8, !dbg !1499
  %add1239 = add i64 %835, %842, !dbg !1496
  store i64 %add1239, ptr %len976, align 8, !dbg !1496
  %843 = load i64, ptr %p, align 8, !dbg !1500
  %gt1240 = icmp sgt i64 %843, 0, !dbg !1500
  br i1 %gt1240, label %or.phi1245, label %or.rhs1241, !dbg !1500

or.rhs1241:                                       ; preds = %noerr_block1238
  %844 = load ptr, ptr %self, align 8, !dbg !1501
  %ptradd1242 = getelementptr inbounds i8, ptr %844, i64 16, !dbg !1501
  %845 = load i32, ptr %ptradd1242, align 8, !dbg !1501
  %lshrl1243 = lshr i32 %845, 4, !dbg !1501
  %846 = and i32 1, %lshrl1243, !dbg !1501
  %trunc1244 = trunc i32 %846 to i8, !dbg !1501
  %847 = trunc i8 %trunc1244 to i1, !dbg !1501
  br label %or.phi1245, !dbg !1501

or.phi1245:                                       ; preds = %or.rhs1241, %noerr_block1238
  %val1246 = phi i1 [ true, %noerr_block1238 ], [ %847, %or.rhs1241 ], !dbg !1501
  br i1 %val1246, label %if.then1247, label %if.exit1256, !dbg !1501

if.then1247:                                      ; preds = %or.phi1245
  %848 = load i64, ptr %len976, align 8, !dbg !1502
  %849 = load ptr, ptr %self, align 8
  %850 = call i64 @std.io.Formatter.out(ptr %retparam1249, ptr %849, i8 zeroext 46), !dbg !1503
  %not_err1250 = icmp eq i64 %850, 0, !dbg !1503
  %851 = call i1 @llvm.expect.i1(i1 %not_err1250, i1 true), !dbg !1503
  br i1 %851, label %after_check1252, label %assign_optional1251, !dbg !1503

assign_optional1251:                              ; preds = %if.then1247
  store i64 %850, ptr %error_var1248, align 8, !dbg !1503
  br label %guard_block1253, !dbg !1503

after_check1252:                                  ; preds = %if.then1247
  br label %noerr_block1254, !dbg !1503

guard_block1253:                                  ; preds = %assign_optional1251
  %852 = load i64, ptr %error_var1248, align 8, !dbg !1503
  ret i64 %852, !dbg !1503

noerr_block1254:                                  ; preds = %after_check1252
  %853 = load i64, ptr %retparam1249, align 8, !dbg !1503
  %add1255 = add i64 %848, %853, !dbg !1502
  store i64 %add1255, ptr %len976, align 8, !dbg !1502
  br label %if.exit1256, !dbg !1502

if.exit1256:                                      ; preds = %noerr_block1254, %or.phi1245
  br label %if.exit1257, !dbg !1502

if.exit1257:                                      ; preds = %if.exit1256, %loop.exit1229
  %854 = load i64, ptr %len976, align 8, !dbg !1504
  %855 = load ptr, ptr %s1200, align 8, !dbg !1505
  %856 = load ptr, ptr %buf, align 8, !dbg !1506
  %ptradd_any1259 = getelementptr i8, ptr %856, i64 9, !dbg !1507
  %857 = load ptr, ptr %s1200, align 8, !dbg !1508
  %858 = ptrtoint ptr %857 to i64, !dbg !1506
  %859 = ptrtoint ptr %ptradd_any1259 to i64, !dbg !1506
  %860 = sub i64 %859, %858, !dbg !1506
  %861 = sdiv exact i64 %860, 1, !dbg !1506
  store i64 %861, ptr %x1260, align 8
  %862 = load i64, ptr %p, align 8
  store i64 %862, ptr %y1261, align 8
  %863 = load i64, ptr %x1260, align 8, !dbg !1509
  %864 = load i64, ptr %y1261, align 8, !dbg !1512
  %865 = call i64 @llvm.smin.i64(i64 %863, i64 %864), !dbg !1512
  %add1262 = add i64 0, %865, !dbg !1512
  %gt1263 = icmp sgt i64 0, %add1262, !dbg !1512
  %sub1264 = sub i64 %add1262, 0, !dbg !1512
  %866 = call i1 @llvm.expect.i1(i1 %gt1263, i1 false), !dbg !1512
  br i1 %866, label %panic1265, label %checkok1270, !dbg !1512

checkok1270:                                      ; preds = %if.exit1257
  %size1271 = sub i64 %add1262, 0, !dbg !1505
  %867 = insertvalue %"char[]" undef, ptr %855, 0, !dbg !1505
  %868 = insertvalue %"char[]" %867, i64 %size1271, 1, !dbg !1505
  %869 = load ptr, ptr %self, align 8
  %870 = call i64 @std.io.Formatter.out_chars(ptr %retparam1272, ptr %869, ptr %855, i64 %size1271), !dbg !1513
  %not_err1273 = icmp eq i64 %870, 0, !dbg !1513
  %871 = call i1 @llvm.expect.i1(i1 %not_err1273, i1 true), !dbg !1513
  br i1 %871, label %after_check1275, label %assign_optional1274, !dbg !1513

assign_optional1274:                              ; preds = %checkok1270
  store i64 %870, ptr %error_var1258, align 8, !dbg !1513
  br label %guard_block1276, !dbg !1513

after_check1275:                                  ; preds = %checkok1270
  br label %noerr_block1277, !dbg !1513

guard_block1276:                                  ; preds = %assign_optional1274
  %872 = load i64, ptr %error_var1258, align 8, !dbg !1513
  ret i64 %872, !dbg !1513

noerr_block1277:                                  ; preds = %after_check1275
  %873 = load i64, ptr %retparam1272, align 8, !dbg !1513
  %add1278 = add i64 %854, %873, !dbg !1504
  store i64 %add1278, ptr %len976, align 8, !dbg !1504
  %874 = load i64, ptr %p, align 8, !dbg !1514
  %875 = load ptr, ptr %buf, align 8, !dbg !1515
  %ptradd_any1279 = getelementptr i8, ptr %875, i64 9, !dbg !1516
  %876 = load ptr, ptr %s1200, align 8, !dbg !1517
  %877 = ptrtoint ptr %876 to i64, !dbg !1515
  %878 = ptrtoint ptr %ptradd_any1279 to i64, !dbg !1515
  %879 = sub i64 %878, %877, !dbg !1515
  %880 = sdiv exact i64 %879, 1, !dbg !1515
  %sub1280 = sub i64 %874, %880, !dbg !1514
  store i64 %sub1280, ptr %p, align 8, !dbg !1514
  %881 = load ptr, ptr %d1192, align 8, !dbg !1518
  %ptradd_any1281 = getelementptr i8, ptr %881, i8 4, !dbg !1518
  store ptr %ptradd_any1281, ptr %d1192, align 8, !dbg !1518
  br label %loop.cond1193, !dbg !1518

loop.exit1282:                                    ; preds = %and.phi1197
  %882 = load i64, ptr %len976, align 8, !dbg !1519
  %883 = load i64, ptr %p, align 8, !dbg !1520
  %add1284 = add i64 %883, 18, !dbg !1520
  %884 = load ptr, ptr %self, align 8
  %885 = call i64 @std.io.Formatter.pad(ptr %retparam1285, ptr %884, i8 zeroext 48, i64 %add1284, i64 18) #6, !dbg !1521
  %not_err1286 = icmp eq i64 %885, 0, !dbg !1521
  %886 = call i1 @llvm.expect.i1(i1 %not_err1286, i1 true), !dbg !1521
  br i1 %886, label %after_check1288, label %assign_optional1287, !dbg !1521

assign_optional1287:                              ; preds = %loop.exit1282
  store i64 %885, ptr %error_var1283, align 8, !dbg !1521
  br label %guard_block1289, !dbg !1521

after_check1288:                                  ; preds = %loop.exit1282
  br label %noerr_block1290, !dbg !1521

guard_block1289:                                  ; preds = %assign_optional1287
  %887 = load i64, ptr %error_var1283, align 8, !dbg !1521
  ret i64 %887, !dbg !1521

noerr_block1290:                                  ; preds = %after_check1288
  %888 = load i64, ptr %retparam1285, align 8, !dbg !1521
  %add1291 = add i64 %882, %888, !dbg !1519
  store i64 %add1291, ptr %len976, align 8, !dbg !1519
  %889 = load i64, ptr %len976, align 8, !dbg !1522
  %890 = load ptr, ptr %estr921, align 8, !dbg !1523
  %891 = load ptr, ptr %ebuf, align 8, !dbg !1524
  %892 = load ptr, ptr %estr921, align 8, !dbg !1525
  %893 = ptrtoint ptr %892 to i64, !dbg !1524
  %894 = ptrtoint ptr %891 to i64, !dbg !1524
  %895 = sub i64 %894, %893, !dbg !1524
  %896 = sdiv exact i64 %895, 1, !dbg !1524
  %add1293 = add i64 0, %896, !dbg !1524
  %gt1294 = icmp sgt i64 0, %add1293, !dbg !1524
  %sub1295 = sub i64 %add1293, 0, !dbg !1524
  %897 = call i1 @llvm.expect.i1(i1 %gt1294, i1 false), !dbg !1524
  br i1 %897, label %panic1296, label %checkok1301, !dbg !1524

checkok1301:                                      ; preds = %noerr_block1290
  %size1302 = sub i64 %add1293, 0, !dbg !1523
  %898 = insertvalue %"char[]" undef, ptr %890, 0, !dbg !1523
  %899 = insertvalue %"char[]" %898, i64 %size1302, 1, !dbg !1523
  %900 = load ptr, ptr %self, align 8
  %901 = call i64 @std.io.Formatter.out_chars(ptr %retparam1303, ptr %900, ptr %890, i64 %size1302), !dbg !1526
  %not_err1304 = icmp eq i64 %901, 0, !dbg !1526
  %902 = call i1 @llvm.expect.i1(i1 %not_err1304, i1 true), !dbg !1526
  br i1 %902, label %after_check1306, label %assign_optional1305, !dbg !1526

assign_optional1305:                              ; preds = %checkok1301
  store i64 %901, ptr %error_var1292, align 8, !dbg !1526
  br label %guard_block1307, !dbg !1526

after_check1306:                                  ; preds = %checkok1301
  br label %noerr_block1308, !dbg !1526

guard_block1307:                                  ; preds = %assign_optional1305
  %903 = load i64, ptr %error_var1292, align 8, !dbg !1526
  ret i64 %903, !dbg !1526

noerr_block1308:                                  ; preds = %after_check1306
  %904 = load i64, ptr %retparam1303, align 8, !dbg !1526
  %add1309 = add i64 %889, %904, !dbg !1522
  store i64 %add1309, ptr %len976, align 8, !dbg !1522
  br label %if.exit1310, !dbg !1522

if.exit1310:                                      ; preds = %noerr_block1308, %noerr_block1185
  %905 = load ptr, ptr %self, align 8, !dbg !1527
  %ptradd1311 = getelementptr inbounds i8, ptr %905, i64 16, !dbg !1527
  %906 = load i32, ptr %ptradd1311, align 8, !dbg !1527
  %lshrl1312 = lshr i32 %906, 1, !dbg !1527
  %907 = and i32 1, %lshrl1312, !dbg !1527
  %trunc1313 = trunc i32 %907 to i8, !dbg !1527
  %908 = trunc i8 %trunc1313 to i1, !dbg !1527
  br i1 %908, label %if.then1314, label %if.exit1328, !dbg !1527

if.then1314:                                      ; preds = %if.exit1310
  %909 = load i64, ptr %len976, align 8, !dbg !1528
  %910 = load ptr, ptr %self, align 8, !dbg !1529
  %ptradd1316 = getelementptr inbounds i8, ptr %910, i64 16, !dbg !1529
  %ptradd1317 = getelementptr inbounds i8, ptr %ptradd1316, i64 4, !dbg !1529
  %911 = load i32, ptr %ptradd1317, align 4, !dbg !1529
  %zext1318 = zext i32 %911 to i64, !dbg !1529
  %912 = load i64, ptr %pl, align 8, !dbg !1530
  %913 = load i32, ptr %l909, align 4, !dbg !1531
  %sext1319 = sext i32 %913 to i64, !dbg !1531
  %add1320 = add i64 %912, %sext1319, !dbg !1530
  %914 = load ptr, ptr %self, align 8
  %915 = call i64 @std.io.Formatter.pad(ptr %retparam1321, ptr %914, i8 zeroext 32, i64 %zext1318, i64 %add1320) #6, !dbg !1532
  %not_err1322 = icmp eq i64 %915, 0, !dbg !1532
  %916 = call i1 @llvm.expect.i1(i1 %not_err1322, i1 true), !dbg !1532
  br i1 %916, label %after_check1324, label %assign_optional1323, !dbg !1532

assign_optional1323:                              ; preds = %if.then1314
  store i64 %915, ptr %error_var1315, align 8, !dbg !1532
  br label %guard_block1325, !dbg !1532

after_check1324:                                  ; preds = %if.then1314
  br label %noerr_block1326, !dbg !1532

guard_block1325:                                  ; preds = %assign_optional1323
  %917 = load i64, ptr %error_var1315, align 8, !dbg !1532
  ret i64 %917, !dbg !1532

noerr_block1326:                                  ; preds = %after_check1324
  %918 = load i64, ptr %retparam1321, align 8, !dbg !1532
  %add1327 = add i64 %909, %918, !dbg !1528
  store i64 %add1327, ptr %len976, align 8, !dbg !1528
  br label %if.exit1328, !dbg !1528

if.exit1328:                                      ; preds = %noerr_block1326, %if.exit1310
  %919 = load i64, ptr %len976, align 8, !dbg !1533
  store i64 %919, ptr %0, align 8, !dbg !1533
  ret i64 0, !dbg !1533

panic:                                            ; preds = %entry
  %920 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !742
  call void %920(ptr @.panic_msg, i64 62, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 210) #5, !dbg !742
  unreachable, !dbg !742

panic1:                                           ; preds = %checkok
  %921 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !762
  call void %921(ptr @.panic_msg.14, i64 42, ptr @.file.15, i64 10, ptr @.func.72, i64 11, i32 254) #5, !dbg !762
  unreachable, !dbg !762

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %922 = insertvalue %any undef, ptr %taddr, 0
  %923 = insertvalue %any %922, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr4, align 8
  %924 = insertvalue %any undef, ptr %taddr4, 0
  %925 = insertvalue %any %924, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %923, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %925, ptr %ptradd, align 16
  %926 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %926, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.15, i64 10, ptr @.func.72, i64 11, i32 254, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !762
  unreachable, !dbg !762

panic11:                                          ; preds = %or.phi
  %927 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !777
  call void %927(ptr @.panic_msg.14, i64 42, ptr @.file.15, i64 10, ptr @.func.72, i64 11, i32 254) #5, !dbg !777
  unreachable, !dbg !777

panic13:                                          ; preds = %checkok12
  store i64 8, ptr %taddr14, align 8
  %928 = insertvalue %any undef, ptr %taddr14, 0
  %929 = insertvalue %any %928, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr15, align 8
  %930 = insertvalue %any undef, ptr %taddr15, 0
  %931 = insertvalue %any %930, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %929, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %931, ptr %ptradd17, align 16
  %932 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %932, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.15, i64 10, ptr @.func.72, i64 11, i32 254, ptr byval(%"any[]") align 8 %indirectarg19) #5, !dbg !777
  unreachable, !dbg !777

panic38:                                          ; preds = %if.exit30
  %933 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !796
  call void %933(ptr @.panic_msg.14, i64 42, ptr @.file.15, i64 10, ptr @.func.72, i64 11, i32 254) #5, !dbg !796
  unreachable, !dbg !796

panic40:                                          ; preds = %checkok39
  store i64 8, ptr %taddr41, align 8
  %934 = insertvalue %any undef, ptr %taddr41, 0
  %935 = insertvalue %any %934, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr42, align 8
  %936 = insertvalue %any undef, ptr %taddr42, 0
  %937 = insertvalue %any %936, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %935, ptr %varargslots43, align 16
  %ptradd44 = getelementptr inbounds i8, ptr %varargslots43, i64 16
  store %any %937, ptr %ptradd44, align 16
  %938 = insertvalue %"any[]" undef, ptr %varargslots43, 0
  %"$$temp45" = insertvalue %"any[]" %938, i64 2, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.15, i64 10, ptr @.func.72, i64 11, i32 254, ptr byval(%"any[]") align 8 %indirectarg46) #5, !dbg !796
  unreachable, !dbg !796

panic148:                                         ; preds = %if.then145
  %939 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1534
  call void %939(ptr @.panic_msg.77, i64 47, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 271) #5, !dbg !1534
  unreachable, !dbg !1534

panic153:                                         ; preds = %if.exit150
  %940 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1535
  call void %940(ptr @.panic_msg.77, i64 47, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 272) #5, !dbg !1535
  unreachable, !dbg !1535

panic159:                                         ; preds = %checkok154
  %941 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1536
  call void %941(ptr @.panic_msg.77, i64 47, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 273) #5, !dbg !1536
  unreachable, !dbg !1536

panic176:                                         ; preds = %loop.body172
  %942 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !903
  call void %942(ptr @.panic_msg.78, i64 44, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 279) #5, !dbg !903
  unreachable, !dbg !903

panic200:                                         ; preds = %if.then197
  %943 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !914
  call void %943(ptr @.panic_msg.78, i64 44, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 281) #5, !dbg !914
  unreachable, !dbg !914

panic296:                                         ; preds = %if.exit291
  store i64 %sub295, ptr %taddr297, align 8
  %944 = insertvalue %any undef, ptr %taddr297, 0
  %945 = insertvalue %any %944, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %945, ptr %varargslots298, align 16
  %946 = insertvalue %"any[]" undef, ptr %varargslots298, 0
  %"$$temp299" = insertvalue %"any[]" %946, i64 1, 1
  store %"any[]" %"$$temp299", ptr %indirectarg300, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 294, ptr byval(%"any[]") align 8 %indirectarg300) #5, !dbg !964
  unreachable, !dbg !964

panic323:                                         ; preds = %noerr_block317
  store i64 %sub322, ptr %taddr324, align 8
  %947 = insertvalue %any undef, ptr %taddr324, 0
  %948 = insertvalue %any %947, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %948, ptr %varargslots325, align 16
  %949 = insertvalue %"any[]" undef, ptr %varargslots325, 0
  %"$$temp326" = insertvalue %"any[]" %949, i64 1, 1
  store %"any[]" %"$$temp326", ptr %indirectarg327, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 296, ptr byval(%"any[]") align 8 %indirectarg327) #5, !dbg !973
  unreachable, !dbg !973

panic386:                                         ; preds = %loop.body383
  %950 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1035
  call void %950(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 329) #5, !dbg !1035
  unreachable, !dbg !1035

panic388:                                         ; preds = %checkok387
  store i64 4, ptr %taddr389, align 8
  %951 = insertvalue %any undef, ptr %taddr389, 0
  %952 = insertvalue %any %951, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %313, ptr %taddr390, align 8
  %953 = insertvalue %any undef, ptr %taddr390, 0
  %954 = insertvalue %any %953, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %952, ptr %varargslots391, align 16
  %ptradd392 = getelementptr inbounds i8, ptr %varargslots391, i64 16
  store %any %954, ptr %ptradd392, align 16
  %955 = insertvalue %"any[]" undef, ptr %varargslots391, 0
  %"$$temp393" = insertvalue %"any[]" %955, i64 2, 1
  store %"any[]" %"$$temp393", ptr %indirectarg394, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 329, ptr byval(%"any[]") align 8 %indirectarg394) #5, !dbg !1035
  unreachable, !dbg !1035

panic398:                                         ; preds = %checkok395
  store i64 %zext397, ptr %taddr399, align 8
  %956 = insertvalue %any undef, ptr %taddr399, 0
  %957 = insertvalue %any %956, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %957, ptr %varargslots400, align 16
  %958 = insertvalue %"any[]" undef, ptr %varargslots400, 0
  %"$$temp401" = insertvalue %"any[]" %958, i64 1, 1
  store %"any[]" %"$$temp401", ptr %indirectarg402, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 329, ptr byval(%"any[]") align 8 %indirectarg402) #5, !dbg !1037
  unreachable, !dbg !1037

panic407:                                         ; preds = %checkok403
  %959 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1039
  call void %959(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 330) #5, !dbg !1039
  unreachable, !dbg !1039

panic409:                                         ; preds = %checkok408
  store i64 4, ptr %taddr410, align 8
  %960 = insertvalue %any undef, ptr %taddr410, 0
  %961 = insertvalue %any %960, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %324, ptr %taddr411, align 8
  %962 = insertvalue %any undef, ptr %taddr411, 0
  %963 = insertvalue %any %962, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %961, ptr %varargslots412, align 16
  %ptradd413 = getelementptr inbounds i8, ptr %varargslots412, i64 16
  store %any %963, ptr %ptradd413, align 16
  %964 = insertvalue %"any[]" undef, ptr %varargslots412, 0
  %"$$temp414" = insertvalue %"any[]" %964, i64 2, 1
  store %"any[]" %"$$temp414", ptr %indirectarg415, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 330, ptr byval(%"any[]") align 8 %indirectarg415) #5, !dbg !1039
  unreachable, !dbg !1039

panic425:                                         ; preds = %if.then422
  %965 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1047
  call void %965(ptr @.panic_msg.82, i64 44, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 333) #5, !dbg !1047
  unreachable, !dbg !1047

panic427:                                         ; preds = %checkok426
  store i64 4, ptr %taddr428, align 8
  %966 = insertvalue %any undef, ptr %taddr428, 0
  %967 = insertvalue %any %966, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %334, ptr %taddr429, align 8
  %968 = insertvalue %any undef, ptr %taddr429, 0
  %969 = insertvalue %any %968, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %967, ptr %varargslots430, align 16
  %ptradd431 = getelementptr inbounds i8, ptr %varargslots430, i64 16
  store %any %969, ptr %ptradd431, align 16
  %970 = insertvalue %"any[]" undef, ptr %varargslots430, 0
  %"$$temp432" = insertvalue %"any[]" %970, i64 2, 1
  store %"any[]" %"$$temp432", ptr %indirectarg433, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 333, ptr byval(%"any[]") align 8 %indirectarg433) #5, !dbg !1047
  unreachable, !dbg !1047

panic465:                                         ; preds = %loop.body463
  %971 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1087
  call void %971(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 347) #5, !dbg !1087
  unreachable, !dbg !1087

panic467:                                         ; preds = %checkok466
  store i64 4, ptr %taddr468, align 8
  %972 = insertvalue %any undef, ptr %taddr468, 0
  %973 = insertvalue %any %972, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %357, ptr %taddr469, align 8
  %974 = insertvalue %any undef, ptr %taddr469, 0
  %975 = insertvalue %any %974, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %973, ptr %varargslots470, align 16
  %ptradd471 = getelementptr inbounds i8, ptr %varargslots470, i64 16
  store %any %975, ptr %ptradd471, align 16
  %976 = insertvalue %"any[]" undef, ptr %varargslots470, 0
  %"$$temp472" = insertvalue %"any[]" %976, i64 2, 1
  store %"any[]" %"$$temp472", ptr %indirectarg473, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 347, ptr byval(%"any[]") align 8 %indirectarg473) #5, !dbg !1087
  unreachable, !dbg !1087

panic475:                                         ; preds = %checkok474
  store i32 %361, ptr %taddr476, align 4
  %977 = insertvalue %any undef, ptr %taddr476, 0
  %978 = insertvalue %any %977, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %978, ptr %varargslots477, align 16
  %979 = insertvalue %"any[]" undef, ptr %varargslots477, 0
  %"$$temp478" = insertvalue %"any[]" %979, i64 1, 1
  store %"any[]" %"$$temp478", ptr %indirectarg479, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 347, ptr byval(%"any[]") align 8 %indirectarg479) #5, !dbg !1089
  unreachable, !dbg !1089

panic482:                                         ; preds = %checkok480
  store i32 %361, ptr %taddr483, align 4
  %980 = insertvalue %any undef, ptr %taddr483, 0
  %981 = insertvalue %any %980, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %981, ptr %varargslots484, align 16
  %982 = insertvalue %"any[]" undef, ptr %varargslots484, 0
  %"$$temp485" = insertvalue %"any[]" %982, i64 1, 1
  store %"any[]" %"$$temp485", ptr %indirectarg486, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 347, ptr byval(%"any[]") align 8 %indirectarg486) #5, !dbg !1089
  unreachable, !dbg !1089

panic492:                                         ; preds = %checkok487
  %983 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1091
  call void %983(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 348) #5, !dbg !1091
  unreachable, !dbg !1091

panic494:                                         ; preds = %checkok493
  store i64 4, ptr %taddr495, align 8
  %984 = insertvalue %any undef, ptr %taddr495, 0
  %985 = insertvalue %any %984, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %368, ptr %taddr496, align 8
  %986 = insertvalue %any undef, ptr %taddr496, 0
  %987 = insertvalue %any %986, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %985, ptr %varargslots497, align 16
  %ptradd498 = getelementptr inbounds i8, ptr %varargslots497, i64 16
  store %any %987, ptr %ptradd498, align 16
  %988 = insertvalue %"any[]" undef, ptr %varargslots497, 0
  %"$$temp499" = insertvalue %"any[]" %988, i64 2, 1
  store %"any[]" %"$$temp499", ptr %indirectarg500, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 348, ptr byval(%"any[]") align 8 %indirectarg500) #5, !dbg !1091
  unreachable, !dbg !1091

panic503:                                         ; preds = %checkok501
  %989 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1092
  call void %989(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 348) #5, !dbg !1092
  unreachable, !dbg !1092

panic505:                                         ; preds = %checkok504
  store i64 4, ptr %taddr506, align 8
  %990 = insertvalue %any undef, ptr %taddr506, 0
  %991 = insertvalue %any %990, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %374, ptr %taddr507, align 8
  %992 = insertvalue %any undef, ptr %taddr507, 0
  %993 = insertvalue %any %992, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %991, ptr %varargslots508, align 16
  %ptradd509 = getelementptr inbounds i8, ptr %varargslots508, i64 16
  store %any %993, ptr %ptradd509, align 16
  %994 = insertvalue %"any[]" undef, ptr %varargslots508, 0
  %"$$temp510" = insertvalue %"any[]" %994, i64 2, 1
  store %"any[]" %"$$temp510", ptr %indirectarg511, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 348, ptr byval(%"any[]") align 8 %indirectarg511) #5, !dbg !1092
  unreachable, !dbg !1092

panic514:                                         ; preds = %checkok512
  store i32 %378, ptr %taddr515, align 4
  %995 = insertvalue %any undef, ptr %taddr515, 0
  %996 = insertvalue %any %995, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %996, ptr %varargslots516, align 16
  %997 = insertvalue %"any[]" undef, ptr %varargslots516, 0
  %"$$temp517" = insertvalue %"any[]" %997, i64 1, 1
  store %"any[]" %"$$temp517", ptr %indirectarg518, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 348, ptr byval(%"any[]") align 8 %indirectarg518) #5, !dbg !1094
  unreachable, !dbg !1094

panic523:                                         ; preds = %checkok519
  store i32 %382, ptr %taddr524, align 4
  %998 = insertvalue %any undef, ptr %taddr524, 0
  %999 = insertvalue %any %998, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %999, ptr %varargslots525, align 16
  %1000 = insertvalue %"any[]" undef, ptr %varargslots525, 0
  %"$$temp526" = insertvalue %"any[]" %1000, i64 1, 1
  store %"any[]" %"$$temp526", ptr %indirectarg527, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 349, ptr byval(%"any[]") align 8 %indirectarg527) #5, !dbg !1097
  unreachable, !dbg !1097

panic530:                                         ; preds = %checkok528
  store i32 %382, ptr %taddr531, align 4
  %1001 = insertvalue %any undef, ptr %taddr531, 0
  %1002 = insertvalue %any %1001, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %1002, ptr %varargslots532, align 16
  %1003 = insertvalue %"any[]" undef, ptr %varargslots532, 0
  %"$$temp533" = insertvalue %"any[]" %1003, i64 1, 1
  store %"any[]" %"$$temp533", ptr %indirectarg534, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.9, i64 35, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 349, ptr byval(%"any[]") align 8 %indirectarg534) #5, !dbg !1097
  unreachable, !dbg !1097

panic565:                                         ; preds = %loop.cond563
  %1004 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1128
  call void %1004(ptr @.panic_msg.83, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 362) #5, !dbg !1128
  unreachable, !dbg !1128

panic567:                                         ; preds = %checkok566
  store i64 4, ptr %taddr568, align 8
  %1005 = insertvalue %any undef, ptr %taddr568, 0
  %1006 = insertvalue %any %1005, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %419, ptr %taddr569, align 8
  %1007 = insertvalue %any undef, ptr %taddr569, 0
  %1008 = insertvalue %any %1007, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1006, ptr %varargslots570, align 16
  %ptradd571 = getelementptr inbounds i8, ptr %varargslots570, i64 16
  store %any %1008, ptr %ptradd571, align 16
  %1009 = insertvalue %"any[]" undef, ptr %varargslots570, 0
  %"$$temp572" = insertvalue %"any[]" %1009, i64 2, 1
  store %"any[]" %"$$temp572", ptr %indirectarg573, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 362, ptr byval(%"any[]") align 8 %indirectarg573) #5, !dbg !1128
  unreachable, !dbg !1128

panic619:                                         ; preds = %loop.exit617
  %1010 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1163
  call void %1010(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 376) #5, !dbg !1163
  unreachable, !dbg !1163

panic621:                                         ; preds = %checkok620
  store i64 4, ptr %taddr622, align 8
  %1011 = insertvalue %any undef, ptr %taddr622, 0
  %1012 = insertvalue %any %1011, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %449, ptr %taddr623, align 8
  %1013 = insertvalue %any undef, ptr %taddr623, 0
  %1014 = insertvalue %any %1013, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1012, ptr %varargslots624, align 16
  %ptradd625 = getelementptr inbounds i8, ptr %varargslots624, i64 16
  store %any %1014, ptr %ptradd625, align 16
  %1015 = insertvalue %"any[]" undef, ptr %varargslots624, 0
  %"$$temp626" = insertvalue %"any[]" %1015, i64 2, 1
  store %"any[]" %"$$temp626", ptr %indirectarg627, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 376, ptr byval(%"any[]") align 8 %indirectarg627) #5, !dbg !1163
  unreachable, !dbg !1163

panic629:                                         ; preds = %checkok628
  %1016 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1165
  call void %1016(ptr @.panic_msg.84, i64 10, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 376) #5, !dbg !1165
  unreachable, !dbg !1165

panic641:                                         ; preds = %if.then638
  %1017 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1176
  call void %1017(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 382) #5, !dbg !1176
  unreachable, !dbg !1176

panic643:                                         ; preds = %checkok642
  store i64 4, ptr %taddr644, align 8
  %1018 = insertvalue %any undef, ptr %taddr644, 0
  %1019 = insertvalue %any %1018, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %461, ptr %taddr645, align 8
  %1020 = insertvalue %any undef, ptr %taddr645, 0
  %1021 = insertvalue %any %1020, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1019, ptr %varargslots646, align 16
  %ptradd647 = getelementptr inbounds i8, ptr %varargslots646, i64 16
  store %any %1021, ptr %ptradd647, align 16
  %1022 = insertvalue %"any[]" undef, ptr %varargslots646, 0
  %"$$temp648" = insertvalue %"any[]" %1022, i64 2, 1
  store %"any[]" %"$$temp648", ptr %indirectarg649, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 382, ptr byval(%"any[]") align 8 %indirectarg649) #5, !dbg !1176
  unreachable, !dbg !1176

panic652:                                         ; preds = %checkok650
  %1023 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1178
  call void %1023(ptr @.panic_msg.85, i64 17, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 382) #5, !dbg !1178
  unreachable, !dbg !1178

panic698:                                         ; preds = %if.exit696
  %1024 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1205
  call void %1024(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 400) #5, !dbg !1205
  unreachable, !dbg !1205

panic700:                                         ; preds = %checkok699
  store i64 4, ptr %taddr701, align 8
  %1025 = insertvalue %any undef, ptr %taddr701, 0
  %1026 = insertvalue %any %1025, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %489, ptr %taddr702, align 8
  %1027 = insertvalue %any undef, ptr %taddr702, 0
  %1028 = insertvalue %any %1027, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1026, ptr %varargslots703, align 16
  %ptradd704 = getelementptr inbounds i8, ptr %varargslots703, i64 16
  store %any %1028, ptr %ptradd704, align 16
  %1029 = insertvalue %"any[]" undef, ptr %varargslots703, 0
  %"$$temp705" = insertvalue %"any[]" %1029, i64 2, 1
  store %"any[]" %"$$temp705", ptr %indirectarg706, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 400, ptr byval(%"any[]") align 8 %indirectarg706) #5, !dbg !1205
  unreachable, !dbg !1205

panic713:                                         ; preds = %if.then711
  %1030 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1211
  call void %1030(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 404) #5, !dbg !1211
  unreachable, !dbg !1211

panic715:                                         ; preds = %checkok714
  store i64 4, ptr %taddr716, align 8
  %1031 = insertvalue %any undef, ptr %taddr716, 0
  %1032 = insertvalue %any %1031, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %500, ptr %taddr717, align 8
  %1033 = insertvalue %any undef, ptr %taddr717, 0
  %1034 = insertvalue %any %1033, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1032, ptr %varargslots718, align 16
  %ptradd719 = getelementptr inbounds i8, ptr %varargslots718, i64 16
  store %any %1034, ptr %ptradd719, align 16
  %1035 = insertvalue %"any[]" undef, ptr %varargslots718, 0
  %"$$temp720" = insertvalue %"any[]" %1035, i64 2, 1
  store %"any[]" %"$$temp720", ptr %indirectarg721, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 404, ptr byval(%"any[]") align 8 %indirectarg721) #5, !dbg !1211
  unreachable, !dbg !1211

panic724:                                         ; preds = %checkok722
  %1036 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1213
  call void %1036(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 404) #5, !dbg !1213
  unreachable, !dbg !1213

panic726:                                         ; preds = %checkok725
  store i64 4, ptr %taddr727, align 8
  %1037 = insertvalue %any undef, ptr %taddr727, 0
  %1038 = insertvalue %any %1037, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %506, ptr %taddr728, align 8
  %1039 = insertvalue %any undef, ptr %taddr728, 0
  %1040 = insertvalue %any %1039, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1038, ptr %varargslots729, align 16
  %ptradd730 = getelementptr inbounds i8, ptr %varargslots729, i64 16
  store %any %1040, ptr %ptradd730, align 16
  %1041 = insertvalue %"any[]" undef, ptr %varargslots729, 0
  %"$$temp731" = insertvalue %"any[]" %1041, i64 2, 1
  store %"any[]" %"$$temp731", ptr %indirectarg732, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 404, ptr byval(%"any[]") align 8 %indirectarg732) #5, !dbg !1213
  unreachable, !dbg !1213

panic737:                                         ; preds = %loop.cond735
  %1042 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1217
  call void %1042(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 405) #5, !dbg !1217
  unreachable, !dbg !1217

panic739:                                         ; preds = %checkok738
  store i64 4, ptr %taddr740, align 8
  %1043 = insertvalue %any undef, ptr %taddr740, 0
  %1044 = insertvalue %any %1043, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %514, ptr %taddr741, align 8
  %1045 = insertvalue %any undef, ptr %taddr741, 0
  %1046 = insertvalue %any %1045, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1044, ptr %varargslots742, align 16
  %ptradd743 = getelementptr inbounds i8, ptr %varargslots742, i64 16
  store %any %1046, ptr %ptradd743, align 16
  %1047 = insertvalue %"any[]" undef, ptr %varargslots742, 0
  %"$$temp744" = insertvalue %"any[]" %1047, i64 2, 1
  store %"any[]" %"$$temp744", ptr %indirectarg745, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 405, ptr byval(%"any[]") align 8 %indirectarg745) #5, !dbg !1217
  unreachable, !dbg !1217

panic751:                                         ; preds = %loop.body748
  %1048 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1220
  call void %1048(ptr @.panic_msg.86, i64 44, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 407) #5, !dbg !1220
  unreachable, !dbg !1220

panic753:                                         ; preds = %checkok752
  store i64 4, ptr %taddr754, align 8
  %1049 = insertvalue %any undef, ptr %taddr754, 0
  %1050 = insertvalue %any %1049, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %521, ptr %taddr755, align 8
  %1051 = insertvalue %any undef, ptr %taddr755, 0
  %1052 = insertvalue %any %1051, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1050, ptr %varargslots756, align 16
  %ptradd757 = getelementptr inbounds i8, ptr %varargslots756, i64 16
  store %any %1052, ptr %ptradd757, align 16
  %1053 = insertvalue %"any[]" undef, ptr %varargslots756, 0
  %"$$temp758" = insertvalue %"any[]" %1053, i64 2, 1
  store %"any[]" %"$$temp758", ptr %indirectarg759, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 407, ptr byval(%"any[]") align 8 %indirectarg759) #5, !dbg !1220
  unreachable, !dbg !1220

panic765:                                         ; preds = %if.then762
  %1054 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1226
  call void %1054(ptr @.panic_msg.82, i64 44, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 408) #5, !dbg !1226
  unreachable, !dbg !1226

panic767:                                         ; preds = %checkok766
  store i64 4, ptr %taddr768, align 8
  %1055 = insertvalue %any undef, ptr %taddr768, 0
  %1056 = insertvalue %any %1055, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %529, ptr %taddr769, align 8
  %1057 = insertvalue %any undef, ptr %taddr769, 0
  %1058 = insertvalue %any %1057, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1056, ptr %varargslots770, align 16
  %ptradd771 = getelementptr inbounds i8, ptr %varargslots770, i64 16
  store %any %1058, ptr %ptradd771, align 16
  %1059 = insertvalue %"any[]" undef, ptr %varargslots770, 0
  %"$$temp772" = insertvalue %"any[]" %1059, i64 2, 1
  store %"any[]" %"$$temp772", ptr %indirectarg773, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 408, ptr byval(%"any[]") align 8 %indirectarg773) #5, !dbg !1226
  unreachable, !dbg !1226

panic777:                                         ; preds = %if.exit775
  %1060 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1228
  call void %1060(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 409) #5, !dbg !1228
  unreachable, !dbg !1228

panic779:                                         ; preds = %checkok778
  store i64 4, ptr %taddr780, align 8
  %1061 = insertvalue %any undef, ptr %taddr780, 0
  %1062 = insertvalue %any %1061, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %535, ptr %taddr781, align 8
  %1063 = insertvalue %any undef, ptr %taddr781, 0
  %1064 = insertvalue %any %1063, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1062, ptr %varargslots782, align 16
  %ptradd783 = getelementptr inbounds i8, ptr %varargslots782, i64 16
  store %any %1064, ptr %ptradd783, align 16
  %1065 = insertvalue %"any[]" undef, ptr %varargslots782, 0
  %"$$temp784" = insertvalue %"any[]" %1065, i64 2, 1
  store %"any[]" %"$$temp784", ptr %indirectarg785, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 409, ptr byval(%"any[]") align 8 %indirectarg785) #5, !dbg !1228
  unreachable, !dbg !1228

panic793:                                         ; preds = %loop.cond791
  %1066 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1235
  call void %1066(ptr @.panic_msg.83, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 411) #5, !dbg !1235
  unreachable, !dbg !1235

panic795:                                         ; preds = %checkok794
  store i64 4, ptr %taddr796, align 8
  %1067 = insertvalue %any undef, ptr %taddr796, 0
  %1068 = insertvalue %any %1067, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %548, ptr %taddr797, align 8
  %1069 = insertvalue %any undef, ptr %taddr797, 0
  %1070 = insertvalue %any %1069, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1068, ptr %varargslots798, align 16
  %ptradd799 = getelementptr inbounds i8, ptr %varargslots798, i64 16
  store %any %1070, ptr %ptradd799, align 16
  %1071 = insertvalue %"any[]" undef, ptr %varargslots798, 0
  %"$$temp800" = insertvalue %"any[]" %1071, i64 2, 1
  store %"any[]" %"$$temp800", ptr %indirectarg801, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 411, ptr byval(%"any[]") align 8 %indirectarg801) #5, !dbg !1235
  unreachable, !dbg !1235

panic863:                                         ; preds = %loop.cond860
  %1072 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1278
  call void %1072(ptr @.panic_msg.84, i64 10, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 436) #5, !dbg !1278
  unreachable, !dbg !1278

panic951:                                         ; preds = %loop.exit948
  %1073 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1537
  call void %1073(ptr @.panic_msg.77, i64 47, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 465) #5, !dbg !1537
  unreachable, !dbg !1537

panic957:                                         ; preds = %checkok952
  %1074 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1538
  call void %1074(ptr @.panic_msg.77, i64 47, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 466) #5, !dbg !1538
  unreachable, !dbg !1538

panic1047:                                        ; preds = %loop.body1044
  %1075 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1402
  call void %1075(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 481) #5, !dbg !1402
  unreachable, !dbg !1402

panic1049:                                        ; preds = %checkok1048
  store i64 4, ptr %taddr1050, align 8
  %1076 = insertvalue %any undef, ptr %taddr1050, 0
  %1077 = insertvalue %any %1076, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %727, ptr %taddr1051, align 8
  %1078 = insertvalue %any undef, ptr %taddr1051, 0
  %1079 = insertvalue %any %1078, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1077, ptr %varargslots1052, align 16
  %ptradd1053 = getelementptr inbounds i8, ptr %varargslots1052, i64 16
  store %any %1079, ptr %ptradd1053, align 16
  %1080 = insertvalue %"any[]" undef, ptr %varargslots1052, 0
  %"$$temp1054" = insertvalue %"any[]" %1080, i64 2, 1
  store %"any[]" %"$$temp1054", ptr %indirectarg1055, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 481, ptr byval(%"any[]") align 8 %indirectarg1055) #5, !dbg !1402
  unreachable, !dbg !1402

panic1080:                                        ; preds = %switch.case1077
  %1081 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1539
  call void %1081(ptr @.panic_msg.54, i64 44, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 487) #5, !dbg !1539
  unreachable, !dbg !1539

panic1089:                                        ; preds = %switch.exit1083
  store i64 %sub1088, ptr %taddr1090, align 8
  %1082 = insertvalue %any undef, ptr %taddr1090, 0
  %1083 = insertvalue %any %1082, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1083, ptr %varargslots1091, align 16
  %1084 = insertvalue %"any[]" undef, ptr %varargslots1091, 0
  %"$$temp1092" = insertvalue %"any[]" %1084, i64 1, 1
  store %"any[]" %"$$temp1092", ptr %indirectarg1093, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 489, ptr byval(%"any[]") align 8 %indirectarg1093) #5, !dbg !1423
  unreachable, !dbg !1423

panic1131:                                        ; preds = %loop.body1128
  %1085 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1441
  call void %1085(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 494) #5, !dbg !1441
  unreachable, !dbg !1441

panic1133:                                        ; preds = %checkok1132
  store i64 4, ptr %taddr1134, align 8
  %1086 = insertvalue %any undef, ptr %taddr1134, 0
  %1087 = insertvalue %any %1086, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %778, ptr %taddr1135, align 8
  %1088 = insertvalue %any undef, ptr %taddr1135, 0
  %1089 = insertvalue %any %1088, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1087, ptr %varargslots1136, align 16
  %ptradd1137 = getelementptr inbounds i8, ptr %varargslots1136, i64 16
  store %any %1089, ptr %ptradd1137, align 16
  %1090 = insertvalue %"any[]" undef, ptr %varargslots1136, 0
  %"$$temp1138" = insertvalue %"any[]" %1090, i64 2, 1
  store %"any[]" %"$$temp1138", ptr %indirectarg1139, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 494, ptr byval(%"any[]") align 8 %indirectarg1139) #5, !dbg !1441
  unreachable, !dbg !1441

panic1152:                                        ; preds = %loop.body1149
  %1091 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1540
  call void %1091(ptr @.panic_msg.54, i64 44, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 495) #5, !dbg !1540
  unreachable, !dbg !1540

panic1161:                                        ; preds = %loop.exit1154
  store i64 %sub1160, ptr %taddr1162, align 8
  %1092 = insertvalue %any undef, ptr %taddr1162, 0
  %1093 = insertvalue %any %1092, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1093, ptr %varargslots1163, align 16
  %1094 = insertvalue %"any[]" undef, ptr %varargslots1163, 0
  %"$$temp1164" = insertvalue %"any[]" %1094, i64 1, 1
  store %"any[]" %"$$temp1164", ptr %indirectarg1165, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 496, ptr byval(%"any[]") align 8 %indirectarg1165) #5, !dbg !1452
  unreachable, !dbg !1452

panic1202:                                        ; preds = %loop.body1199
  %1095 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1478
  call void %1095(ptr @.panic_msg.81, i64 42, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 505) #5, !dbg !1478
  unreachable, !dbg !1478

panic1204:                                        ; preds = %checkok1203
  store i64 4, ptr %taddr1205, align 8
  %1096 = insertvalue %any undef, ptr %taddr1205, 0
  %1097 = insertvalue %any %1096, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %821, ptr %taddr1206, align 8
  %1098 = insertvalue %any undef, ptr %taddr1206, 0
  %1099 = insertvalue %any %1098, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %1097, ptr %varargslots1207, align 16
  %ptradd1208 = getelementptr inbounds i8, ptr %varargslots1207, i64 16
  store %any %1099, ptr %ptradd1208, align 16
  %1100 = insertvalue %"any[]" undef, ptr %varargslots1207, 0
  %"$$temp1209" = insertvalue %"any[]" %1100, i64 2, 1
  store %"any[]" %"$$temp1209", ptr %indirectarg1210, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 505, ptr byval(%"any[]") align 8 %indirectarg1210) #5, !dbg !1478
  unreachable, !dbg !1478

panic1265:                                        ; preds = %if.exit1257
  store i64 %sub1264, ptr %taddr1266, align 8
  %1101 = insertvalue %any undef, ptr %taddr1266, 0
  %1102 = insertvalue %any %1101, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1102, ptr %varargslots1267, align 16
  %1103 = insertvalue %"any[]" undef, ptr %varargslots1267, 0
  %"$$temp1268" = insertvalue %"any[]" %1103, i64 1, 1
  store %"any[]" %"$$temp1268", ptr %indirectarg1269, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 516, ptr byval(%"any[]") align 8 %indirectarg1269) #5, !dbg !1505
  unreachable, !dbg !1505

panic1296:                                        ; preds = %noerr_block1290
  store i64 %sub1295, ptr %taddr1297, align 8
  %1104 = insertvalue %any undef, ptr %taddr1297, 0
  %1105 = insertvalue %any %1104, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1105, ptr %varargslots1298, align 16
  %1106 = insertvalue %"any[]" undef, ptr %varargslots1298, 0
  %"$$temp1299" = insertvalue %"any[]" %1106, i64 1, 1
  store %"any[]" %"$$temp1299", ptr %indirectarg1300, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.44, i64 20, ptr @.func.72, i64 11, i32 520, ptr byval(%"any[]") align 8 %indirectarg1300) #5, !dbg !1523
  unreachable, !dbg !1523
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa(ptr %0, ptr %1, i64 %2, i64 %3, i8 zeroext %4, i32 %5) #0 !dbg !1541 {
entry:
  %self = alloca ptr, align 8
  %value = alloca i128, align 16
  %negative = alloca i8, align 1
  %base = alloca i32, align 4
  %buf = alloca [256 x i8], align 16
  %len = alloca i64, align 8
  %past_10 = alloca i8, align 1
  %digit = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %6 = icmp eq ptr %1, null, !dbg !1545
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !1545
  br i1 %7, label %panic, label %checkok, !dbg !1545

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1546, !DIExpression(), !1547)
  store i64 %2, ptr %value, align 16
  %ptradd = getelementptr inbounds i8, ptr %value, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %value, !1548, !DIExpression(), !1549)
  store i8 %4, ptr %negative, align 1
    #dbg_declare(ptr %negative, !1550, !DIExpression(), !1551)
  store i32 %5, ptr %base, align 4
    #dbg_declare(ptr %base, !1552, !DIExpression(), !1553)
    #dbg_declare(ptr %buf, !1554, !DIExpression(), !1558)
    #dbg_declare(ptr %len, !1559, !DIExpression(), !1560)
  store i64 0, ptr %len, align 8, !dbg !1560
  %8 = load i128, ptr %value, align 16, !dbg !1561
  %i2nb = icmp eq i128 %8, 0, !dbg !1561
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1561

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !1562
  %ptradd1 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1562
  %10 = load i32, ptr %ptradd1, align 8, !dbg !1563
  %11 = and i32 %10, -17, !dbg !1563
  store i32 %11, ptr %ptradd1, align 8, !dbg !1563
  br label %if.exit, !dbg !1563

if.exit:                                          ; preds = %if.then, %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !1564
  %ptradd2 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1564
  %13 = load i32, ptr %ptradd2, align 8, !dbg !1564
  %lshrl = lshr i32 %13, 6, !dbg !1564
  %14 = and i32 1, %lshrl, !dbg !1564
  %trunc = trunc i32 %14 to i8, !dbg !1564
  %15 = trunc i8 %trunc to i1, !dbg !1564
  %not = xor i1 %15, true, !dbg !1564
  br i1 %not, label %or.phi, label %or.rhs, !dbg !1564

or.rhs:                                           ; preds = %if.exit
  %16 = load i128, ptr %value, align 16, !dbg !1565
  %i2b = icmp ne i128 %16, 0, !dbg !1565
  br label %or.phi, !dbg !1565

or.phi:                                           ; preds = %or.rhs, %if.exit
  %val = phi i1 [ true, %if.exit ], [ %i2b, %or.rhs ], !dbg !1565
  br i1 %val, label %if.then3, label %if.exit30, !dbg !1565

if.then3:                                         ; preds = %or.phi
    #dbg_declare(ptr %past_10, !1566, !DIExpression(), !1568)
  %17 = load ptr, ptr %self, align 8, !dbg !1569
  %ptradd4 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !1569
  %18 = load i32, ptr %ptradd4, align 8, !dbg !1569
  %lshrl5 = lshr i32 %18, 5, !dbg !1569
  %19 = and i32 1, %lshrl5, !dbg !1569
  %trunc6 = trunc i32 %19 to i8, !dbg !1569
  %20 = trunc i8 %trunc6 to i1, !dbg !1569
  %ternary = select i1 %20, i8 65, i8 97, !dbg !1570
  %zext = zext i8 %ternary to i32, !dbg !1570
  %sub = sub i32 %zext, 10, !dbg !1569
  %trunc7 = trunc i32 %sub to i8, !dbg !1569
  store i8 %trunc7, ptr %past_10, align 1, !dbg !1569
  br label %loop.body, !dbg !1571

loop.cond:                                        ; preds = %checkok29
  %21 = load i128, ptr %value, align 16, !dbg !1572
  %i2b8 = icmp ne i128 %21, 0, !dbg !1572
  br i1 %i2b8, label %loop.body, label %loop.exit, !dbg !1572

loop.body:                                        ; preds = %loop.cond, %if.then3
  %22 = load i64, ptr %len, align 8, !dbg !1574
  %le = icmp ule i64 256, %22, !dbg !1574
  br i1 %le, label %if.then9, label %if.exit10, !dbg !1574

if.then9:                                         ; preds = %loop.body
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1576

if.exit10:                                        ; preds = %loop.body
    #dbg_declare(ptr %digit, !1577, !DIExpression(), !1578)
  %23 = load i128, ptr %value, align 16, !dbg !1579
  %24 = load i32, ptr %base, align 4, !dbg !1580
  %zext11 = zext i32 %24 to i128, !dbg !1580
  %zero = icmp eq i128 %zext11, 0, !dbg !1581
  %25 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !1581
  br i1 %25, label %panic12, label %checkok13, !dbg !1581

checkok13:                                        ; preds = %if.exit10
  %umod = urem i128 %23, %zext11, !dbg !1581
  %trunc14 = trunc i128 %umod to i8, !dbg !1581
  store i8 %trunc14, ptr %digit, align 1, !dbg !1581
  %26 = load i64, ptr %len, align 8, !dbg !1582
  %add = add i64 %26, 1, !dbg !1582
  store i64 %add, ptr %len, align 8, !dbg !1582
  %ge = icmp uge i64 %26, 256, !dbg !1582
  %27 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1582
  br i1 %27, label %panic15, label %checkok18, !dbg !1582

checkok18:                                        ; preds = %checkok13
  %ptradd19 = getelementptr inbounds i8, ptr %buf, i64 %26, !dbg !1582
  %28 = load i8, ptr %digit, align 1, !dbg !1583
  %zext20 = zext i8 %28 to i32, !dbg !1583
  %29 = load i8, ptr %digit, align 1, !dbg !1584
  %zext21 = zext i8 %29 to i32, !dbg !1584
  %gt = icmp ugt i32 10, %zext21, !dbg !1584
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !1584

cond.lhs:                                         ; preds = %checkok18
  br label %cond.phi, !dbg !1585

cond.rhs:                                         ; preds = %checkok18
  %30 = load i8, ptr %past_10, align 1, !dbg !1586
  br label %cond.phi, !dbg !1586

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val22 = phi i8 [ 48, %cond.lhs ], [ %30, %cond.rhs ], !dbg !1586
  %zext23 = zext i8 %val22 to i32, !dbg !1586
  %add24 = add i32 %zext20, %zext23, !dbg !1583
  %trunc25 = trunc i32 %add24 to i8, !dbg !1583
  store i8 %trunc25, ptr %ptradd19, align 1, !dbg !1583
  %31 = load i128, ptr %value, align 16, !dbg !1587
  %32 = load i32, ptr %base, align 4, !dbg !1588
  %zext26 = zext i32 %32 to i128, !dbg !1588
  %zero27 = icmp eq i128 %zext26, 0, !dbg !1587
  %33 = call i1 @llvm.expect.i1(i1 %zero27, i1 false), !dbg !1587
  br i1 %33, label %panic28, label %checkok29, !dbg !1587

checkok29:                                        ; preds = %cond.phi
  %udiv = udiv i128 %31, %zext26, !dbg !1587
  store i128 %udiv, ptr %value, align 16, !dbg !1587
  br label %loop.cond, !dbg !1587

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit30, !dbg !1587

if.exit30:                                        ; preds = %loop.exit, %or.phi
  %34 = insertvalue %"char[]" undef, ptr %buf, 0, !dbg !1589
  %35 = insertvalue %"char[]" %34, i64 256, 1, !dbg !1589
  %36 = load ptr, ptr %self, align 8
  %37 = load i64, ptr %len, align 8
  %38 = load i8, ptr %negative, align 1
  %39 = load i32, ptr %base, align 4
  %40 = call i64 @std.io.Formatter.ntoa_format(ptr %retparam, ptr %36, ptr %buf, i64 256, i64 %37, i8 zeroext %38, i32 %39), !dbg !1590
  %not_err = icmp eq i64 %40, 0, !dbg !1590
  %41 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1590
  br i1 %41, label %after_check, label %assign_optional, !dbg !1590

assign_optional:                                  ; preds = %if.exit30
  store i64 %40, ptr %reterr, align 8, !dbg !1590
  br label %err_retblock, !dbg !1590

after_check:                                      ; preds = %if.exit30
  %42 = load i64, ptr %retparam, align 8, !dbg !1590
  store i64 %42, ptr %0, align 8, !dbg !1590
  ret i64 0, !dbg !1590

err_retblock:                                     ; preds = %assign_optional
  %43 = load i64, ptr %reterr, align 8, !dbg !1590
  ret i64 %43, !dbg !1590

panic:                                            ; preds = %entry
  %44 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1547
  call void %44(ptr @.panic_msg, i64 62, ptr @.file.44, i64 20, ptr @.func.87, i64 4, i32 528) #5, !dbg !1547
  unreachable, !dbg !1547

panic12:                                          ; preds = %if.exit10
  %45 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1581
  call void %45(ptr @.panic_msg.84, i64 10, ptr @.file.44, i64 20, ptr @.func.87, i64 4, i32 543) #5, !dbg !1581
  unreachable, !dbg !1581

panic15:                                          ; preds = %checkok13
  store i64 256, ptr %taddr, align 8
  %46 = insertvalue %any undef, ptr %taddr, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr16, align 8
  %48 = insertvalue %any undef, ptr %taddr16, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %47, ptr %varargslots, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %49, ptr %ptradd17, align 16
  %50 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %50, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.44, i64 20, ptr @.func.87, i64 4, i32 544, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1582
  unreachable, !dbg !1582

panic28:                                          ; preds = %cond.phi
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1587
  call void %51(ptr @.panic_msg.85, i64 17, ptr @.file.44, i64 20, ptr @.func.87, i64 4, i32 545) #5, !dbg !1587
  unreachable, !dbg !1587
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa_format(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4, i8 zeroext %5, i32 %6) #0 !dbg !1591 {
entry:
  %self = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %negative = alloca i8, align 1
  %base = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %switch = alloca i32, align 4
  %taddr109 = alloca i64, align 8
  %taddr110 = alloca i64, align 8
  %varargslots111 = alloca [2 x %any], align 16
  %indirectarg114 = alloca %"any[]", align 8
  %taddr125 = alloca i64, align 8
  %taddr126 = alloca i64, align 8
  %varargslots127 = alloca [2 x %any], align 16
  %indirectarg130 = alloca %"any[]", align 8
  %taddr142 = alloca i64, align 8
  %taddr143 = alloca i64, align 8
  %varargslots144 = alloca [2 x %any], align 16
  %indirectarg147 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg155 = alloca %"any[]", align 8
  %taddr160 = alloca i64, align 8
  %taddr161 = alloca i64, align 8
  %varargslots162 = alloca [2 x %any], align 16
  %indirectarg165 = alloca %"any[]", align 8
  %switch170 = alloca i8, align 1
  %taddr182 = alloca i64, align 8
  %taddr183 = alloca i64, align 8
  %varargslots184 = alloca [2 x %any], align 16
  %indirectarg187 = alloca %"any[]", align 8
  %taddr203 = alloca i64, align 8
  %taddr204 = alloca i64, align 8
  %varargslots205 = alloca [2 x %any], align 16
  %indirectarg208 = alloca %"any[]", align 8
  %taddr225 = alloca i64, align 8
  %taddr226 = alloca i64, align 8
  %varargslots227 = alloca [2 x %any], align 16
  %indirectarg230 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %taddr238 = alloca i64, align 8
  %taddr239 = alloca i64, align 8
  %varargslots240 = alloca [2 x %any], align 16
  %indirectarg243 = alloca %"any[]", align 8
  %taddr249 = alloca i64, align 8
  %varargslots250 = alloca [1 x %any], align 16
  %indirectarg252 = alloca %"any[]", align 8
  %taddr257 = alloca i64, align 8
  %taddr258 = alloca i64, align 8
  %varargslots259 = alloca [2 x %any], align 16
  %indirectarg262 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %7 = icmp eq ptr %1, null, !dbg !1594
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !1594
  br i1 %8, label %panic, label %checkok, !dbg !1594

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1595, !DIExpression(), !1596)
  store ptr %2, ptr %buf, align 8
  %ptradd = getelementptr inbounds i8, ptr %buf, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %buf, !1597, !DIExpression(), !1598)
  store i64 %4, ptr %len, align 8
    #dbg_declare(ptr %len, !1599, !DIExpression(), !1600)
  store i8 %5, ptr %negative, align 1
    #dbg_declare(ptr %negative, !1601, !DIExpression(), !1602)
  store i32 %6, ptr %base, align 4
    #dbg_declare(ptr %base, !1603, !DIExpression(), !1604)
  %9 = load ptr, ptr %self, align 8, !dbg !1605
  %ptradd1 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1605
  %10 = load i32, ptr %ptradd1, align 8, !dbg !1605
  %lshrl = lshr i32 %10, 1, !dbg !1605
  %11 = and i32 1, %lshrl, !dbg !1605
  %trunc = trunc i32 %11 to i8, !dbg !1605
  %12 = trunc i8 %trunc to i1, !dbg !1605
  %not = xor i1 %12, true, !dbg !1605
  br i1 %not, label %if.then, label %if.exit62, !dbg !1605

if.then:                                          ; preds = %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !1606
  %ptradd2 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !1606
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 4, !dbg !1606
  %14 = load i32, ptr %ptradd3, align 4, !dbg !1606
  %i2b = icmp ne i32 %14, 0, !dbg !1606
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !1606

and.rhs:                                          ; preds = %if.then
  %15 = load ptr, ptr %self, align 8, !dbg !1608
  %ptradd4 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !1608
  %16 = load i32, ptr %ptradd4, align 8, !dbg !1608
  %17 = and i32 1, %16, !dbg !1608
  %trunc5 = trunc i32 %17 to i8, !dbg !1608
  %18 = trunc i8 %trunc5 to i1, !dbg !1608
  br label %and.phi, !dbg !1608

and.phi:                                          ; preds = %and.rhs, %if.then
  %val = phi i1 [ false, %if.then ], [ %18, %and.rhs ], !dbg !1608
  br i1 %val, label %and.rhs6, label %and.phi17, !dbg !1608

and.rhs6:                                         ; preds = %and.phi
  %19 = load i8, ptr %negative, align 1, !dbg !1609
  %20 = trunc i8 %19 to i1, !dbg !1609
  br i1 %20, label %or.phi, label %or.rhs, !dbg !1609

or.rhs:                                           ; preds = %and.rhs6
  %21 = load ptr, ptr %self, align 8, !dbg !1610
  %ptradd7 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !1610
  %22 = load i32, ptr %ptradd7, align 8, !dbg !1610
  %lshrl8 = lshr i32 %22, 2, !dbg !1610
  %23 = and i32 1, %lshrl8, !dbg !1610
  %trunc9 = trunc i32 %23 to i8, !dbg !1610
  %24 = trunc i8 %trunc9 to i1, !dbg !1610
  br label %or.phi, !dbg !1610

or.phi:                                           ; preds = %or.rhs, %and.rhs6
  %val10 = phi i1 [ true, %and.rhs6 ], [ %24, %or.rhs ], !dbg !1610
  br i1 %val10, label %or.phi15, label %or.rhs11, !dbg !1610

or.rhs11:                                         ; preds = %or.phi
  %25 = load ptr, ptr %self, align 8, !dbg !1611
  %ptradd12 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !1611
  %26 = load i32, ptr %ptradd12, align 8, !dbg !1611
  %lshrl13 = lshr i32 %26, 3, !dbg !1611
  %27 = and i32 1, %lshrl13, !dbg !1611
  %trunc14 = trunc i32 %27 to i8, !dbg !1611
  %28 = trunc i8 %trunc14 to i1, !dbg !1611
  br label %or.phi15, !dbg !1611

or.phi15:                                         ; preds = %or.rhs11, %or.phi
  %val16 = phi i1 [ true, %or.phi ], [ %28, %or.rhs11 ], !dbg !1611
  br label %and.phi17, !dbg !1611

and.phi17:                                        ; preds = %or.phi15, %and.phi
  %val18 = phi i1 [ false, %and.phi ], [ %val16, %or.phi15 ], !dbg !1611
  br i1 %val18, label %if.then19, label %if.exit, !dbg !1611

if.then19:                                        ; preds = %and.phi17
  %29 = load ptr, ptr %self, align 8, !dbg !1612
  %ptradd20 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !1612
  %ptradd21 = getelementptr inbounds i8, ptr %ptradd20, i64 4, !dbg !1612
  %30 = load i32, ptr %ptradd21, align 4, !dbg !1612
  %sub = sub i32 %30, 1, !dbg !1612
  store i32 %sub, ptr %ptradd21, align 4, !dbg !1612
  br label %if.exit, !dbg !1612

if.exit:                                          ; preds = %if.then19, %and.phi17
  br label %loop.cond, !dbg !1613

loop.cond:                                        ; preds = %checkok32, %if.exit
  %31 = load i64, ptr %len, align 8, !dbg !1614
  %32 = load ptr, ptr %self, align 8, !dbg !1616
  %ptradd22 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !1616
  %ptradd23 = getelementptr inbounds i8, ptr %ptradd22, i64 8, !dbg !1616
  %33 = load i32, ptr %ptradd23, align 8, !dbg !1616
  %zext = zext i32 %33 to i64, !dbg !1616
  %lt = icmp ult i64 %31, %zext, !dbg !1614
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1614

loop.body:                                        ; preds = %loop.cond
  %34 = load i64, ptr %len, align 8, !dbg !1617
  %ptradd24 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1619
  %35 = load i64, ptr %ptradd24, align 8, !dbg !1619
  %ge = icmp uge i64 %34, %35, !dbg !1617
  br i1 %ge, label %if.then25, label %if.exit26, !dbg !1617

if.then25:                                        ; preds = %loop.body
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1620

if.exit26:                                        ; preds = %loop.body
  %ptradd27 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1621
  %36 = load i64, ptr %ptradd27, align 8, !dbg !1621
  %37 = load ptr, ptr %buf, align 8, !dbg !1621
  %38 = load i64, ptr %len, align 8, !dbg !1622
  %add = add i64 %38, 1, !dbg !1622
  store i64 %add, ptr %len, align 8, !dbg !1622
  %ge28 = icmp uge i64 %38, %36, !dbg !1622
  %39 = call i1 @llvm.expect.i1(i1 %ge28, i1 false), !dbg !1622
  br i1 %39, label %panic29, label %checkok32, !dbg !1622

checkok32:                                        ; preds = %if.exit26
  %ptradd33 = getelementptr inbounds i8, ptr %37, i64 %38, !dbg !1622
  store i8 48, ptr %ptradd33, align 1, !dbg !1623
  br label %loop.cond, !dbg !1623

loop.exit:                                        ; preds = %loop.cond
  br label %loop.cond34, !dbg !1624

loop.cond34:                                      ; preds = %checkok59, %loop.exit
  %40 = load ptr, ptr %self, align 8, !dbg !1625
  %ptradd35 = getelementptr inbounds i8, ptr %40, i64 16, !dbg !1625
  %41 = load i32, ptr %ptradd35, align 8, !dbg !1625
  %42 = and i32 1, %41, !dbg !1625
  %trunc36 = trunc i32 %42 to i8, !dbg !1625
  %43 = trunc i8 %trunc36 to i1, !dbg !1625
  br i1 %43, label %and.rhs37, label %and.phi42, !dbg !1625

and.rhs37:                                        ; preds = %loop.cond34
  %44 = load i64, ptr %len, align 8, !dbg !1627
  %45 = load ptr, ptr %self, align 8, !dbg !1628
  %ptradd38 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !1628
  %ptradd39 = getelementptr inbounds i8, ptr %ptradd38, i64 4, !dbg !1628
  %46 = load i32, ptr %ptradd39, align 4, !dbg !1628
  %zext40 = zext i32 %46 to i64, !dbg !1628
  %lt41 = icmp ult i64 %44, %zext40, !dbg !1627
  br label %and.phi42, !dbg !1627

and.phi42:                                        ; preds = %and.rhs37, %loop.cond34
  %val43 = phi i1 [ false, %loop.cond34 ], [ %lt41, %and.rhs37 ], !dbg !1627
  br i1 %val43, label %loop.body44, label %loop.exit61, !dbg !1627

loop.body44:                                      ; preds = %and.phi42
  %47 = load i64, ptr %len, align 8, !dbg !1629
  %ptradd45 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1631
  %48 = load i64, ptr %ptradd45, align 8, !dbg !1631
  %ge46 = icmp uge i64 %47, %48, !dbg !1629
  br i1 %ge46, label %if.then47, label %if.exit48, !dbg !1629

if.then47:                                        ; preds = %loop.body44
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1632

if.exit48:                                        ; preds = %loop.body44
  %ptradd49 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1633
  %49 = load i64, ptr %ptradd49, align 8, !dbg !1633
  %50 = load ptr, ptr %buf, align 8, !dbg !1633
  %51 = load i64, ptr %len, align 8, !dbg !1634
  %add50 = add i64 %51, 1, !dbg !1634
  store i64 %add50, ptr %len, align 8, !dbg !1634
  %ge51 = icmp uge i64 %51, %49, !dbg !1634
  %52 = call i1 @llvm.expect.i1(i1 %ge51, i1 false), !dbg !1634
  br i1 %52, label %panic52, label %checkok59, !dbg !1634

checkok59:                                        ; preds = %if.exit48
  %ptradd60 = getelementptr inbounds i8, ptr %50, i64 %51, !dbg !1634
  store i8 48, ptr %ptradd60, align 1, !dbg !1635
  br label %loop.cond34, !dbg !1635

loop.exit61:                                      ; preds = %and.phi42
  br label %if.exit62, !dbg !1635

if.exit62:                                        ; preds = %loop.exit61, %checkok
  %53 = load ptr, ptr %self, align 8, !dbg !1636
  %ptradd63 = getelementptr inbounds i8, ptr %53, i64 16, !dbg !1636
  %54 = load i32, ptr %ptradd63, align 8, !dbg !1636
  %lshrl64 = lshr i32 %54, 4, !dbg !1636
  %55 = and i32 1, %lshrl64, !dbg !1636
  %trunc65 = trunc i32 %55 to i8, !dbg !1636
  %56 = trunc i8 %trunc65 to i1, !dbg !1636
  br i1 %56, label %and.rhs66, label %and.phi67, !dbg !1636

and.rhs66:                                        ; preds = %if.exit62
  %57 = load i32, ptr %base, align 4, !dbg !1637
  %neq = icmp ne i32 10, %57, !dbg !1637
  br label %and.phi67, !dbg !1637

and.phi67:                                        ; preds = %and.rhs66, %if.exit62
  %val68 = phi i1 [ false, %if.exit62 ], [ %neq, %and.rhs66 ], !dbg !1637
  br i1 %val68, label %if.then69, label %if.exit169, !dbg !1637

if.then69:                                        ; preds = %and.phi67
  %58 = load ptr, ptr %self, align 8, !dbg !1638
  %ptradd70 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !1638
  %59 = load i32, ptr %ptradd70, align 8, !dbg !1638
  %lshrl71 = lshr i32 %59, 6, !dbg !1638
  %60 = and i32 1, %lshrl71, !dbg !1638
  %trunc72 = trunc i32 %60 to i8, !dbg !1638
  %61 = trunc i8 %trunc72 to i1, !dbg !1638
  %not73 = xor i1 %61, true, !dbg !1638
  br i1 %not73, label %and.rhs74, label %and.phi76, !dbg !1638

and.rhs74:                                        ; preds = %if.then69
  %62 = load i64, ptr %len, align 8, !dbg !1640
  %i2b75 = icmp ne i64 %62, 0, !dbg !1640
  br label %and.phi76, !dbg !1640

and.phi76:                                        ; preds = %and.rhs74, %if.then69
  %val77 = phi i1 [ false, %if.then69 ], [ %i2b75, %and.rhs74 ], !dbg !1640
  br i1 %val77, label %and.rhs78, label %and.phi82, !dbg !1640

and.rhs78:                                        ; preds = %and.phi76
  %63 = load i64, ptr %len, align 8, !dbg !1641
  %64 = load ptr, ptr %self, align 8, !dbg !1642
  %ptradd79 = getelementptr inbounds i8, ptr %64, i64 16, !dbg !1642
  %ptradd80 = getelementptr inbounds i8, ptr %ptradd79, i64 8, !dbg !1642
  %65 = load i32, ptr %ptradd80, align 8, !dbg !1642
  %zext81 = zext i32 %65 to i64, !dbg !1642
  %eq = icmp eq i64 %63, %zext81, !dbg !1641
  br label %and.phi82, !dbg !1641

and.phi82:                                        ; preds = %and.rhs78, %and.phi76
  %val83 = phi i1 [ false, %and.phi76 ], [ %eq, %and.rhs78 ], !dbg !1641
  br i1 %val83, label %and.rhs84, label %and.phi89, !dbg !1641

and.rhs84:                                        ; preds = %and.phi82
  %66 = load i64, ptr %len, align 8, !dbg !1643
  %67 = load ptr, ptr %self, align 8, !dbg !1644
  %ptradd85 = getelementptr inbounds i8, ptr %67, i64 16, !dbg !1644
  %ptradd86 = getelementptr inbounds i8, ptr %ptradd85, i64 4, !dbg !1644
  %68 = load i32, ptr %ptradd86, align 4, !dbg !1644
  %zext87 = zext i32 %68 to i64, !dbg !1644
  %eq88 = icmp eq i64 %66, %zext87, !dbg !1643
  br label %and.phi89, !dbg !1643

and.phi89:                                        ; preds = %and.rhs84, %and.phi82
  %val90 = phi i1 [ false, %and.phi82 ], [ %eq88, %and.rhs84 ], !dbg !1643
  br i1 %val90, label %if.then91, label %if.exit97, !dbg !1643

if.then91:                                        ; preds = %and.phi89
  %69 = load i64, ptr %len, align 8, !dbg !1645
  %sub92 = sub i64 %69, 1, !dbg !1645
  store i64 %sub92, ptr %len, align 8, !dbg !1645
  %70 = load i64, ptr %len, align 8, !dbg !1647
  %i2b93 = icmp ne i64 %70, 0, !dbg !1647
  br i1 %i2b93, label %if.then94, label %if.exit96, !dbg !1647

if.then94:                                        ; preds = %if.then91
  %71 = load i64, ptr %len, align 8, !dbg !1648
  %sub95 = sub i64 %71, 1, !dbg !1648
  store i64 %sub95, ptr %len, align 8, !dbg !1648
  br label %if.exit96, !dbg !1648

if.exit96:                                        ; preds = %if.then94, %if.then91
  br label %if.exit97, !dbg !1648

if.exit97:                                        ; preds = %if.exit96, %and.phi89
  %72 = load i32, ptr %base, align 4, !dbg !1649
  %neq98 = icmp ne i32 10, %72, !dbg !1649
  br i1 %neq98, label %if.then99, label %if.exit168, !dbg !1649

if.then99:                                        ; preds = %if.exit97
  %73 = load i64, ptr %len, align 8, !dbg !1650
  %add100 = add i64 %73, 1, !dbg !1650
  %ptradd101 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1652
  %74 = load i64, ptr %ptradd101, align 8, !dbg !1652
  %ge102 = icmp sge i64 %add100, %74, !dbg !1650
  %check = icmp sge i64 %74, 0, !dbg !1650
  %siui-ge = and i1 %check, %ge102, !dbg !1650
  br i1 %siui-ge, label %if.then103, label %if.exit104, !dbg !1650

if.then103:                                       ; preds = %if.then99
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1653

if.exit104:                                       ; preds = %if.then99
  %75 = load i32, ptr %base, align 4
  store i32 %75, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit104
  %76 = load i32, ptr %switch, align 4
  switch i32 %76, label %switch.default [
    i32 16, label %switch.case
    i32 8, label %switch.case120
    i32 2, label %switch.case137
  ]

switch.case:                                      ; preds = %switch.entry
  %ptradd105 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1654
  %77 = load i64, ptr %ptradd105, align 8, !dbg !1654
  %78 = load ptr, ptr %buf, align 8, !dbg !1654
  %79 = load i64, ptr %len, align 8, !dbg !1657
  %add106 = add i64 %79, 1, !dbg !1657
  store i64 %add106, ptr %len, align 8, !dbg !1657
  %ge107 = icmp uge i64 %79, %77, !dbg !1657
  %80 = call i1 @llvm.expect.i1(i1 %ge107, i1 false), !dbg !1657
  br i1 %80, label %panic108, label %checkok115, !dbg !1657

checkok115:                                       ; preds = %switch.case
  %ptradd116 = getelementptr inbounds i8, ptr %78, i64 %79, !dbg !1657
  %81 = load ptr, ptr %self, align 8, !dbg !1658
  %ptradd117 = getelementptr inbounds i8, ptr %81, i64 16, !dbg !1658
  %82 = load i32, ptr %ptradd117, align 8, !dbg !1658
  %lshrl118 = lshr i32 %82, 5, !dbg !1658
  %83 = and i32 1, %lshrl118, !dbg !1658
  %trunc119 = trunc i32 %83 to i8, !dbg !1658
  %84 = trunc i8 %trunc119 to i1, !dbg !1658
  %ternary = select i1 %84, i8 88, i8 120, !dbg !1659
  store i8 %ternary, ptr %ptradd116, align 1, !dbg !1659
  br label %switch.exit, !dbg !1659

switch.case120:                                   ; preds = %switch.entry
  %ptradd121 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1660
  %85 = load i64, ptr %ptradd121, align 8, !dbg !1660
  %86 = load ptr, ptr %buf, align 8, !dbg !1660
  %87 = load i64, ptr %len, align 8, !dbg !1662
  %add122 = add i64 %87, 1, !dbg !1662
  store i64 %add122, ptr %len, align 8, !dbg !1662
  %ge123 = icmp uge i64 %87, %85, !dbg !1662
  %88 = call i1 @llvm.expect.i1(i1 %ge123, i1 false), !dbg !1662
  br i1 %88, label %panic124, label %checkok131, !dbg !1662

checkok131:                                       ; preds = %switch.case120
  %ptradd132 = getelementptr inbounds i8, ptr %86, i64 %87, !dbg !1662
  %89 = load ptr, ptr %self, align 8, !dbg !1663
  %ptradd133 = getelementptr inbounds i8, ptr %89, i64 16, !dbg !1663
  %90 = load i32, ptr %ptradd133, align 8, !dbg !1663
  %lshrl134 = lshr i32 %90, 5, !dbg !1663
  %91 = and i32 1, %lshrl134, !dbg !1663
  %trunc135 = trunc i32 %91 to i8, !dbg !1663
  %92 = trunc i8 %trunc135 to i1, !dbg !1663
  %ternary136 = select i1 %92, i8 79, i8 111, !dbg !1664
  store i8 %ternary136, ptr %ptradd132, align 1, !dbg !1664
  br label %switch.exit, !dbg !1664

switch.case137:                                   ; preds = %switch.entry
  %ptradd138 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1665
  %93 = load i64, ptr %ptradd138, align 8, !dbg !1665
  %94 = load ptr, ptr %buf, align 8, !dbg !1665
  %95 = load i64, ptr %len, align 8, !dbg !1667
  %add139 = add i64 %95, 1, !dbg !1667
  store i64 %add139, ptr %len, align 8, !dbg !1667
  %ge140 = icmp uge i64 %95, %93, !dbg !1667
  %96 = call i1 @llvm.expect.i1(i1 %ge140, i1 false), !dbg !1667
  br i1 %96, label %panic141, label %checkok148, !dbg !1667

checkok148:                                       ; preds = %switch.case137
  %ptradd149 = getelementptr inbounds i8, ptr %94, i64 %95, !dbg !1667
  %97 = load ptr, ptr %self, align 8, !dbg !1668
  %ptradd150 = getelementptr inbounds i8, ptr %97, i64 16, !dbg !1668
  %98 = load i32, ptr %ptradd150, align 8, !dbg !1668
  %lshrl151 = lshr i32 %98, 5, !dbg !1668
  %99 = and i32 1, %lshrl151, !dbg !1668
  %trunc152 = trunc i32 %99 to i8, !dbg !1668
  %100 = trunc i8 %trunc152 to i1, !dbg !1668
  %ternary153 = select i1 %100, i8 66, i8 98, !dbg !1669
  store i8 %ternary153, ptr %ptradd149, align 1, !dbg !1669
  br label %switch.exit, !dbg !1669

switch.default:                                   ; preds = %switch.entry
  store %"char[]" { ptr @.str.89, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1670
  %ptradd154 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1670
  %hi = load i64, ptr %ptradd154, align 8, !dbg !1670
  store %"any[]" zeroinitializer, ptr %indirectarg155, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.90, i64 20, ptr @.str.91, i64 21, i32 590, ptr byval(%"any[]") align 8 %indirectarg155), !dbg !1674
  unreachable, !dbg !1675

switch.exit:                                      ; preds = %checkok148, %checkok131, %checkok115
  %ptradd156 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1676
  %101 = load i64, ptr %ptradd156, align 8, !dbg !1676
  %102 = load ptr, ptr %buf, align 8, !dbg !1676
  %103 = load i64, ptr %len, align 8, !dbg !1677
  %add157 = add i64 %103, 1, !dbg !1677
  store i64 %add157, ptr %len, align 8, !dbg !1677
  %ge158 = icmp uge i64 %103, %101, !dbg !1677
  %104 = call i1 @llvm.expect.i1(i1 %ge158, i1 false), !dbg !1677
  br i1 %104, label %panic159, label %checkok166, !dbg !1677

checkok166:                                       ; preds = %switch.exit
  %ptradd167 = getelementptr inbounds i8, ptr %102, i64 %103, !dbg !1677
  store i8 48, ptr %ptradd167, align 1, !dbg !1678
  br label %if.exit168, !dbg !1678

if.exit168:                                       ; preds = %checkok166, %if.exit97
  br label %if.exit169, !dbg !1678

if.exit169:                                       ; preds = %if.exit168, %and.phi67
  store i8 1, ptr %switch170, align 1
  br label %switch.entry171

switch.entry171:                                  ; preds = %if.exit169
  %105 = load i8, ptr %switch170, align 1
  %106 = trunc i8 %105 to i1
  %107 = load i8, ptr %negative, align 1, !dbg !1679
  %108 = trunc i8 %107 to i1, !dbg !1679
  %eq172 = icmp eq i1 %108, %106, !dbg !1679
  br i1 %eq172, label %switch.case173, label %next_if, !dbg !1679

switch.case173:                                   ; preds = %switch.entry171
  %109 = load i64, ptr %len, align 8, !dbg !1681
  %ptradd174 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1683
  %110 = load i64, ptr %ptradd174, align 8, !dbg !1683
  %ge175 = icmp uge i64 %109, %110, !dbg !1681
  br i1 %ge175, label %if.then176, label %if.exit177, !dbg !1681

if.then176:                                       ; preds = %switch.case173
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1684

if.exit177:                                       ; preds = %switch.case173
  %ptradd178 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1685
  %111 = load i64, ptr %ptradd178, align 8, !dbg !1685
  %112 = load ptr, ptr %buf, align 8, !dbg !1685
  %113 = load i64, ptr %len, align 8, !dbg !1686
  %add179 = add i64 %113, 1, !dbg !1686
  store i64 %add179, ptr %len, align 8, !dbg !1686
  %ge180 = icmp uge i64 %113, %111, !dbg !1686
  %114 = call i1 @llvm.expect.i1(i1 %ge180, i1 false), !dbg !1686
  br i1 %114, label %panic181, label %checkok188, !dbg !1686

checkok188:                                       ; preds = %if.exit177
  %ptradd189 = getelementptr inbounds i8, ptr %112, i64 %113, !dbg !1686
  store i8 45, ptr %ptradd189, align 1, !dbg !1687
  br label %switch.exit234, !dbg !1687

next_if:                                          ; preds = %switch.entry171
  %115 = load ptr, ptr %self, align 8, !dbg !1688
  %ptradd190 = getelementptr inbounds i8, ptr %115, i64 16, !dbg !1688
  %116 = load i32, ptr %ptradd190, align 8, !dbg !1688
  %lshrl191 = lshr i32 %116, 2, !dbg !1688
  %117 = and i32 1, %lshrl191, !dbg !1688
  %trunc192 = trunc i32 %117 to i8, !dbg !1688
  %118 = trunc i8 %trunc192 to i1, !dbg !1688
  %eq193 = icmp eq i1 %118, %106, !dbg !1688
  br i1 %eq193, label %switch.case194, label %next_if211, !dbg !1688

switch.case194:                                   ; preds = %next_if
  %119 = load i64, ptr %len, align 8, !dbg !1689
  %ptradd195 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1691
  %120 = load i64, ptr %ptradd195, align 8, !dbg !1691
  %ge196 = icmp uge i64 %119, %120, !dbg !1689
  br i1 %ge196, label %if.then197, label %if.exit198, !dbg !1689

if.then197:                                       ; preds = %switch.case194
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1692

if.exit198:                                       ; preds = %switch.case194
  %ptradd199 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1693
  %121 = load i64, ptr %ptradd199, align 8, !dbg !1693
  %122 = load ptr, ptr %buf, align 8, !dbg !1693
  %123 = load i64, ptr %len, align 8, !dbg !1694
  %add200 = add i64 %123, 1, !dbg !1694
  store i64 %add200, ptr %len, align 8, !dbg !1694
  %ge201 = icmp uge i64 %123, %121, !dbg !1694
  %124 = call i1 @llvm.expect.i1(i1 %ge201, i1 false), !dbg !1694
  br i1 %124, label %panic202, label %checkok209, !dbg !1694

checkok209:                                       ; preds = %if.exit198
  %ptradd210 = getelementptr inbounds i8, ptr %122, i64 %123, !dbg !1694
  store i8 43, ptr %ptradd210, align 1, !dbg !1695
  br label %switch.exit234, !dbg !1695

next_if211:                                       ; preds = %next_if
  %125 = load ptr, ptr %self, align 8, !dbg !1696
  %ptradd212 = getelementptr inbounds i8, ptr %125, i64 16, !dbg !1696
  %126 = load i32, ptr %ptradd212, align 8, !dbg !1696
  %lshrl213 = lshr i32 %126, 3, !dbg !1696
  %127 = and i32 1, %lshrl213, !dbg !1696
  %trunc214 = trunc i32 %127 to i8, !dbg !1696
  %128 = trunc i8 %trunc214 to i1, !dbg !1696
  %eq215 = icmp eq i1 %128, %106, !dbg !1696
  br i1 %eq215, label %switch.case216, label %next_if233, !dbg !1696

switch.case216:                                   ; preds = %next_if211
  %129 = load i64, ptr %len, align 8, !dbg !1697
  %ptradd217 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1699
  %130 = load i64, ptr %ptradd217, align 8, !dbg !1699
  %ge218 = icmp uge i64 %129, %130, !dbg !1697
  br i1 %ge218, label %if.then219, label %if.exit220, !dbg !1697

if.then219:                                       ; preds = %switch.case216
  ret i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), !dbg !1700

if.exit220:                                       ; preds = %switch.case216
  %ptradd221 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1701
  %131 = load i64, ptr %ptradd221, align 8, !dbg !1701
  %132 = load ptr, ptr %buf, align 8, !dbg !1701
  %133 = load i64, ptr %len, align 8, !dbg !1702
  %add222 = add i64 %133, 1, !dbg !1702
  store i64 %add222, ptr %len, align 8, !dbg !1702
  %ge223 = icmp uge i64 %133, %131, !dbg !1702
  %134 = call i1 @llvm.expect.i1(i1 %ge223, i1 false), !dbg !1702
  br i1 %134, label %panic224, label %checkok231, !dbg !1702

checkok231:                                       ; preds = %if.exit220
  %ptradd232 = getelementptr inbounds i8, ptr %132, i64 %133, !dbg !1702
  store i8 32, ptr %ptradd232, align 1, !dbg !1703
  br label %switch.exit234, !dbg !1703

next_if233:                                       ; preds = %next_if211
  br label %switch.exit234, !dbg !1703

switch.exit234:                                   ; preds = %next_if233, %checkok231, %checkok209, %checkok188
  %135 = load i64, ptr %len, align 8, !dbg !1704
  %i2b235 = icmp ne i64 %135, 0, !dbg !1704
  br i1 %i2b235, label %if.then236, label %if.exit264, !dbg !1704

if.then236:                                       ; preds = %switch.exit234
  %136 = load %"char[]", ptr %buf, align 8, !dbg !1705
  %137 = extractvalue %"char[]" %136, 0, !dbg !1705
  %138 = extractvalue %"char[]" %136, 1, !dbg !1706
  %gt = icmp ugt i64 0, %138, !dbg !1706
  %139 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1706
  br i1 %139, label %panic237, label %checkok244, !dbg !1706

checkok244:                                       ; preds = %if.then236
  %140 = load i64, ptr %len, align 8, !dbg !1707
  %add245 = add i64 0, %140, !dbg !1707
  %gt246 = icmp ugt i64 0, %add245, !dbg !1707
  %sub247 = sub i64 %add245, 0, !dbg !1707
  %141 = call i1 @llvm.expect.i1(i1 %gt246, i1 false), !dbg !1707
  br i1 %141, label %panic248, label %checkok253, !dbg !1707

checkok253:                                       ; preds = %checkok244
  %lt254 = icmp ult i64 %138, %add245, !dbg !1705
  %sub255 = sub i64 %add245, 1, !dbg !1705
  %142 = call i1 @llvm.expect.i1(i1 %lt254, i1 false), !dbg !1705
  br i1 %142, label %panic256, label %checkok263, !dbg !1705

checkok263:                                       ; preds = %checkok253
  %size = sub i64 %add245, 0, !dbg !1705
  %143 = insertvalue %"char[]" undef, ptr %137, 0, !dbg !1705
  %144 = insertvalue %"char[]" %143, i64 %size, 1, !dbg !1705
  %145 = load ptr, ptr %self, align 8
  %146 = call i64 @std.io.Formatter.out_reverse(ptr %retparam, ptr %145, ptr %137, i64 %size), !dbg !1708
  %not_err = icmp eq i64 %146, 0, !dbg !1708
  %147 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1708
  br i1 %147, label %after_check, label %assign_optional, !dbg !1708

assign_optional:                                  ; preds = %checkok263
  store i64 %146, ptr %error_var, align 8, !dbg !1708
  br label %guard_block, !dbg !1708

after_check:                                      ; preds = %checkok263
  br label %noerr_block, !dbg !1708

guard_block:                                      ; preds = %assign_optional
  %148 = load i64, ptr %error_var, align 8, !dbg !1708
  ret i64 %148, !dbg !1708

noerr_block:                                      ; preds = %after_check
  br label %if.exit264, !dbg !1708

if.exit264:                                       ; preds = %noerr_block, %switch.exit234
  %149 = load i64, ptr %len, align 8, !dbg !1709
  store i64 %149, ptr %0, align 8, !dbg !1709
  ret i64 0, !dbg !1709

panic:                                            ; preds = %entry
  %150 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1596
  call void %150(ptr @.panic_msg, i64 62, ptr @.file.44, i64 20, ptr @.func.88, i64 11, i32 552) #5, !dbg !1596
  unreachable, !dbg !1596

panic29:                                          ; preds = %if.exit26
  store i64 %36, ptr %taddr, align 8
  %151 = insertvalue %any undef, ptr %taddr, 0
  %152 = insertvalue %any %151, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr30, align 8
  %153 = insertvalue %any undef, ptr %taddr30, 0
  %154 = insertvalue %any %153, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %152, ptr %varargslots, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %154, ptr %ptradd31, align 16
  %155 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %155, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.44, i64 20, ptr @.func.88, i64 11, i32 561, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1622
  unreachable, !dbg !1622

panic52:                                          ; preds = %if.exit48
  store i64 %49, ptr %taddr53, align 8
  %156 = insertvalue %any undef, ptr %taddr53, 0
  %157 = insertvalue %any %156, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr54, align 8
  %158 = insertvalue %any undef, ptr %taddr54, 0
  %159 = insertvalue %any %158, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %157, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %159, ptr %ptradd56, align 16
  %160 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %160, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.44, i64 20, ptr @.func.88, i64 11, i32 566, ptr byval(%"any[]") align 8 %indirectarg58) #5, !dbg !1634
  unreachable, !dbg !1634

panic108:                                         ; preds = %switch.case
  store i64 %77, ptr %taddr109, align 8
  %161 = insertvalue %any undef, ptr %taddr109, 0
  %162 = insertvalue %any %161, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %79, ptr %taddr110, align 8
  %163 = insertvalue %any undef, ptr %taddr110, 0
  %164 = insertvalue %any %163, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %162, ptr %varargslots111, align 16
  %ptradd112 = getelementptr inbounds i8, ptr %varargslots111, i64 16
  store %any %164, ptr %ptradd112, align 16
  %165 = insertvalue %"any[]" undef, ptr %varargslots111, 0
  %"$$temp113" = insertvalue %"any[]" %165, i64 2, 1
  store %"any[]" %"$$temp113", ptr %indirectarg114, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.44, i64 20, ptr @.func.88, i64 11, i32 584, ptr byval(%"any[]") align 8 %indirectarg114) #5, !dbg !1657
  unreachable, !dbg !1657

panic124:                                         ; preds = %switch.case120
  store i64 %85, ptr %taddr125, align 8
  %166 = insertvalue %any undef, ptr %taddr125, 0
  %167 = insertvalue %any %166, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %87, ptr %taddr126, align 8
  %168 = insertvalue %any undef, ptr %taddr126, 0
  %169 = insertvalue %any %168, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %167, ptr %varargslots127, align 16
  %ptradd128 = getelementptr inbounds i8, ptr %varargslots127, i64 16
  store %any %169, ptr %ptradd128, align 16
  %170 = insertvalue %"any[]" undef, ptr %varargslots127, 0
  %"$$temp129" = insertvalue %"any[]" %170, i64 2, 1
  store %"any[]" %"$$temp129", ptr %indirectarg130, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.44, i64 20, ptr @.func.88, i64 11, i32 586, ptr byval(%"any[]") align 8 %indirectarg130) #5, !dbg !1662
  unreachable, !dbg !1662

panic141:                                         ; preds = %switch.case137
  store i64 %93, ptr %taddr142, align 8
  %171 = insertvalue %any undef, ptr %taddr142, 0
  %172 = insertvalue %any %171, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %95, ptr %taddr143, align 8
  %173 = insertvalue %any undef, ptr %taddr143, 0
  %174 = insertvalue %any %173, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %172, ptr %varargslots144, align 16
  %ptradd145 = getelementptr inbounds i8, ptr %varargslots144, i64 16
  store %any %174, ptr %ptradd145, align 16
  %175 = insertvalue %"any[]" undef, ptr %varargslots144, 0
  %"$$temp146" = insertvalue %"any[]" %175, i64 2, 1
  store %"any[]" %"$$temp146", ptr %indirectarg147, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.44, i64 20, ptr @.func.88, i64 11, i32 588, ptr byval(%"any[]") align 8 %indirectarg147) #5, !dbg !1667
  unreachable, !dbg !1667

panic159:                                         ; preds = %switch.exit
  store i64 %101, ptr %taddr160, align 8
  %176 = insertvalue %any undef, ptr %taddr160, 0
  %177 = insertvalue %any %176, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %103, ptr %taddr161, align 8
  %178 = insertvalue %any undef, ptr %taddr161, 0
  %179 = insertvalue %any %178, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %177, ptr %varargslots162, align 16
  %ptradd163 = getelementptr inbounds i8, ptr %varargslots162, i64 16
  store %any %179, ptr %ptradd163, align 16
  %180 = insertvalue %"any[]" undef, ptr %varargslots162, 0
  %"$$temp164" = insertvalue %"any[]" %180, i64 2, 1
  store %"any[]" %"$$temp164", ptr %indirectarg165, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.44, i64 20, ptr @.func.88, i64 11, i32 592, ptr byval(%"any[]") align 8 %indirectarg165) #5, !dbg !1677
  unreachable, !dbg !1677

panic181:                                         ; preds = %if.exit177
  store i64 %111, ptr %taddr182, align 8
  %181 = insertvalue %any undef, ptr %taddr182, 0
  %182 = insertvalue %any %181, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %113, ptr %taddr183, align 8
  %183 = insertvalue %any undef, ptr %taddr183, 0
  %184 = insertvalue %any %183, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %182, ptr %varargslots184, align 16
  %ptradd185 = getelementptr inbounds i8, ptr %varargslots184, i64 16
  store %any %184, ptr %ptradd185, align 16
  %185 = insertvalue %"any[]" undef, ptr %varargslots184, 0
  %"$$temp186" = insertvalue %"any[]" %185, i64 2, 1
  store %"any[]" %"$$temp186", ptr %indirectarg187, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.44, i64 20, ptr @.func.88, i64 11, i32 600, ptr byval(%"any[]") align 8 %indirectarg187) #5, !dbg !1686
  unreachable, !dbg !1686

panic202:                                         ; preds = %if.exit198
  store i64 %121, ptr %taddr203, align 8
  %186 = insertvalue %any undef, ptr %taddr203, 0
  %187 = insertvalue %any %186, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %123, ptr %taddr204, align 8
  %188 = insertvalue %any undef, ptr %taddr204, 0
  %189 = insertvalue %any %188, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %187, ptr %varargslots205, align 16
  %ptradd206 = getelementptr inbounds i8, ptr %varargslots205, i64 16
  store %any %189, ptr %ptradd206, align 16
  %190 = insertvalue %"any[]" undef, ptr %varargslots205, 0
  %"$$temp207" = insertvalue %"any[]" %190, i64 2, 1
  store %"any[]" %"$$temp207", ptr %indirectarg208, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.44, i64 20, ptr @.func.88, i64 11, i32 603, ptr byval(%"any[]") align 8 %indirectarg208) #5, !dbg !1694
  unreachable, !dbg !1694

panic224:                                         ; preds = %if.exit220
  store i64 %131, ptr %taddr225, align 8
  %191 = insertvalue %any undef, ptr %taddr225, 0
  %192 = insertvalue %any %191, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %133, ptr %taddr226, align 8
  %193 = insertvalue %any undef, ptr %taddr226, 0
  %194 = insertvalue %any %193, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %192, ptr %varargslots227, align 16
  %ptradd228 = getelementptr inbounds i8, ptr %varargslots227, i64 16
  store %any %194, ptr %ptradd228, align 16
  %195 = insertvalue %"any[]" undef, ptr %varargslots227, 0
  %"$$temp229" = insertvalue %"any[]" %195, i64 2, 1
  store %"any[]" %"$$temp229", ptr %indirectarg230, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.44, i64 20, ptr @.func.88, i64 11, i32 606, ptr byval(%"any[]") align 8 %indirectarg230) #5, !dbg !1702
  unreachable, !dbg !1702

panic237:                                         ; preds = %if.then236
  store i64 %138, ptr %taddr238, align 8
  %196 = insertvalue %any undef, ptr %taddr238, 0
  %197 = insertvalue %any %196, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr239, align 8
  %198 = insertvalue %any undef, ptr %taddr239, 0
  %199 = insertvalue %any %198, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %197, ptr %varargslots240, align 16
  %ptradd241 = getelementptr inbounds i8, ptr %varargslots240, i64 16
  store %any %199, ptr %ptradd241, align 16
  %200 = insertvalue %"any[]" undef, ptr %varargslots240, 0
  %"$$temp242" = insertvalue %"any[]" %200, i64 2, 1
  store %"any[]" %"$$temp242", ptr %indirectarg243, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.44, i64 20, ptr @.func.88, i64 11, i32 608, ptr byval(%"any[]") align 8 %indirectarg243) #5, !dbg !1705
  unreachable, !dbg !1705

panic248:                                         ; preds = %checkok244
  store i64 %sub247, ptr %taddr249, align 8
  %201 = insertvalue %any undef, ptr %taddr249, 0
  %202 = insertvalue %any %201, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %202, ptr %varargslots250, align 16
  %203 = insertvalue %"any[]" undef, ptr %varargslots250, 0
  %"$$temp251" = insertvalue %"any[]" %203, i64 1, 1
  store %"any[]" %"$$temp251", ptr %indirectarg252, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.44, i64 20, ptr @.func.88, i64 11, i32 608, ptr byval(%"any[]") align 8 %indirectarg252) #5, !dbg !1705
  unreachable, !dbg !1705

panic256:                                         ; preds = %checkok253
  store i64 %sub255, ptr %taddr257, align 8
  %204 = insertvalue %any undef, ptr %taddr257, 0
  %205 = insertvalue %any %204, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %138, ptr %taddr258, align 8
  %206 = insertvalue %any undef, ptr %taddr258, 0
  %207 = insertvalue %any %206, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %205, ptr %varargslots259, align 16
  %ptradd260 = getelementptr inbounds i8, ptr %varargslots259, i64 16
  store %any %207, ptr %ptradd260, align 16
  %208 = insertvalue %"any[]" undef, ptr %varargslots259, 0
  %"$$temp261" = insertvalue %"any[]" %208, i64 2, 1
  store %"any[]" %"$$temp261", ptr %indirectarg262, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.44, i64 20, ptr @.func.88, i64 11, i32 608, ptr byval(%"any[]") align 8 %indirectarg262) #5, !dbg !1705
  unreachable, !dbg !1705
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa_any(ptr %0, ptr %1, i64 %2, ptr %3, i32 %4) #0 !dbg !1710 {
entry:
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %base = alloca i32, align 4
  %is_neg = alloca i8, align 1
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i128, align 16
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %retparam2 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !1713
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1713
  br i1 %6, label %panic, label %checkok, !dbg !1713

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1714, !DIExpression(), !1715)
  store i64 %2, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %3, ptr %ptradd, align 8
    #dbg_declare(ptr %arg, !1716, !DIExpression(), !1717)
  store i32 %4, ptr %base, align 4
    #dbg_declare(ptr %base, !1718, !DIExpression(), !1719)
    #dbg_declare(ptr %is_neg, !1720, !DIExpression(), !1721)
  store i8 0, ptr %is_neg, align 1, !dbg !1721
  %lo = load i64, ptr %arg, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi = load ptr, ptr %ptradd1, align 8
  %7 = call i64 @std.io.int_from_any(ptr %retparam, i64 %lo, ptr %hi, ptr %is_neg), !dbg !1722
  %not_err = icmp eq i64 %7, 0, !dbg !1722
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1722
  br i1 %8, label %after_check, label %assign_optional, !dbg !1722

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !1722
  br label %panic_block, !dbg !1722

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !1722

panic_block:                                      ; preds = %assign_optional
  %9 = insertvalue %any undef, ptr %error_var, 0, !dbg !1722
  %10 = insertvalue %any %9, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !1722
  store %any %10, ptr %varargslots, align 16
  %11 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %11, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.93, i64 36, ptr @.file.44, i64 20, ptr @.func.92, i64 8, i32 616, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1722
  unreachable, !dbg !1722

noerr_block:                                      ; preds = %after_check
  %12 = load ptr, ptr %self, align 8
  %lo3 = load i64, ptr %retparam, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %retparam, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %13 = load i8, ptr %is_neg, align 1
  %14 = load i32, ptr %base, align 4
  %15 = call i64 @std.io.Formatter.ntoa(ptr %retparam2, ptr %12, i64 %lo3, i64 %hi5, i8 zeroext %13, i32 %14) #6, !dbg !1723
  %not_err6 = icmp eq i64 %15, 0, !dbg !1723
  %16 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true), !dbg !1723
  br i1 %16, label %after_check8, label %assign_optional7, !dbg !1723

assign_optional7:                                 ; preds = %noerr_block
  store i64 %15, ptr %reterr, align 8, !dbg !1723
  br label %err_retblock, !dbg !1723

after_check8:                                     ; preds = %noerr_block
  %17 = load i64, ptr %retparam2, align 8, !dbg !1723
  store i64 %17, ptr %0, align 8, !dbg !1723
  ret i64 0, !dbg !1723

err_retblock:                                     ; preds = %assign_optional7
  %18 = load i64, ptr %reterr, align 8, !dbg !1723
  ret i64 %18, !dbg !1723

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1715
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.44, i64 20, ptr @.func.92, i64 8, i32 613) #5, !dbg !1715
  unreachable, !dbg !1715
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_char(ptr %0, ptr %1, i64 %2, ptr %3) #0 !dbg !1724 {
entry:
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %len = alloca i64, align 8
  %l = alloca i32, align 4
  %error_var = alloca i64, align 8
  %retparam2 = alloca i64, align 8
  %c = alloca i32, align 4
  %v = alloca %any, align 8
  %blockret = alloca i32, align 4
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i32, align 4
  %min = alloca i32, align 4
  %switch = alloca i64, align 8
  %c17 = alloca i8, align 1
  %s = alloca i16, align 2
  %taddr = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %i = alloca i32, align 4
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %varargslots66 = alloca [2 x %any], align 16
  %indirectarg69 = alloca %"any[]", align 8
  %l96 = alloca i64, align 8
  %taddr101 = alloca i64, align 8
  %taddr102 = alloca i64, align 8
  %varargslots103 = alloca [2 x %any], align 16
  %indirectarg106 = alloca %"any[]", align 8
  %i135 = alloca i128, align 16
  %taddr140 = alloca i64, align 8
  %taddr141 = alloca i64, align 8
  %varargslots142 = alloca [2 x %any], align 16
  %indirectarg145 = alloca %"any[]", align 8
  %c175 = alloca i8, align 1
  %s192 = alloca i16, align 2
  %taddr197 = alloca i64, align 8
  %taddr198 = alloca i64, align 8
  %varargslots199 = alloca [2 x %any], align 16
  %indirectarg202 = alloca %"any[]", align 8
  %i222 = alloca i32, align 4
  %taddr227 = alloca i64, align 8
  %taddr228 = alloca i64, align 8
  %varargslots229 = alloca [2 x %any], align 16
  %indirectarg232 = alloca %"any[]", align 8
  %l249 = alloca i64, align 8
  %taddr254 = alloca i64, align 8
  %taddr255 = alloca i64, align 8
  %varargslots256 = alloca [2 x %any], align 16
  %indirectarg259 = alloca %"any[]", align 8
  %i279 = alloca i128, align 16
  %taddr284 = alloca i64, align 8
  %taddr285 = alloca i64, align 8
  %varargslots286 = alloca [2 x %any], align 16
  %indirectarg289 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg303 = alloca %"any[]", align 8
  %switch305 = alloca i8, align 1
  %error_var310 = alloca i64, align 8
  %retparam312 = alloca i64, align 8
  %error_var322 = alloca i64, align 8
  %retparam324 = alloca i64, align 8
  %error_var330 = alloca i64, align 8
  %retparam333 = alloca i64, align 8
  %error_var343 = alloca i64, align 8
  %retparam347 = alloca i64, align 8
  %error_var353 = alloca i64, align 8
  %retparam358 = alloca i64, align 8
  %error_var364 = alloca i64, align 8
  %retparam368 = alloca i64, align 8
  %error_var376 = alloca i64, align 8
  %retparam380 = alloca i64, align 8
  %error_var386 = alloca i64, align 8
  %retparam391 = alloca i64, align 8
  %error_var397 = alloca i64, align 8
  %retparam402 = alloca i64, align 8
  %error_var408 = alloca i64, align 8
  %retparam412 = alloca i64, align 8
  %error_var418 = alloca i64, align 8
  %retparam420 = alloca i64, align 8
  %reterr427 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !1727
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1727
  br i1 %5, label %panic, label %checkok, !dbg !1727

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1728, !DIExpression(), !1729)
  store i64 %2, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %3, ptr %ptradd, align 8
    #dbg_declare(ptr %arg, !1730, !DIExpression(), !1731)
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !1732
  %6 = load i64, ptr %ptradd1, align 8, !dbg !1732
  %"introspect*" = inttoptr i64 %6 to ptr, !dbg !1732
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !1732
  %7 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext %typeid.kind) #6, !dbg !1732
  %8 = trunc i8 %7 to i1, !dbg !1732
  %not = xor i1 %8, true, !dbg !1732
  br i1 %not, label %if.then, label %if.exit, !dbg !1732

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8
  %10 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %9, ptr @.str.95, i64 10), !dbg !1733
  %not_err = icmp eq i64 %10, 0, !dbg !1733
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1733
  br i1 %11, label %after_check, label %assign_optional, !dbg !1733

assign_optional:                                  ; preds = %if.then
  store i64 %10, ptr %reterr, align 8, !dbg !1733
  br label %err_retblock, !dbg !1733

after_check:                                      ; preds = %if.then
  %12 = load i64, ptr %retparam, align 8, !dbg !1733
  store i64 %12, ptr %0, align 8, !dbg !1733
  ret i64 0, !dbg !1733

err_retblock:                                     ; preds = %assign_optional
  %13 = load i64, ptr %reterr, align 8, !dbg !1733
  ret i64 %13, !dbg !1733

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %len, !1735, !DIExpression(), !1736)
  store i64 1, ptr %len, align 8, !dbg !1737
    #dbg_declare(ptr %l, !1738, !DIExpression(), !1739)
  store i32 1, ptr %l, align 4, !dbg !1740
  %14 = load i64, ptr %len, align 8, !dbg !1741
  %15 = load i32, ptr %l, align 4, !dbg !1742
  %zext = zext i32 %15 to i64, !dbg !1742
  %16 = load ptr, ptr %self, align 8
  %17 = call i64 @std.io.Formatter.adjust(ptr %retparam2, ptr %16, i64 %zext), !dbg !1743
  %not_err3 = icmp eq i64 %17, 0, !dbg !1743
  %18 = call i1 @llvm.expect.i1(i1 %not_err3, i1 true), !dbg !1743
  br i1 %18, label %after_check5, label %assign_optional4, !dbg !1743

assign_optional4:                                 ; preds = %if.exit
  store i64 %17, ptr %error_var, align 8, !dbg !1743
  br label %guard_block, !dbg !1743

after_check5:                                     ; preds = %if.exit
  br label %noerr_block, !dbg !1743

guard_block:                                      ; preds = %assign_optional4
  %19 = load i64, ptr %error_var, align 8, !dbg !1743
  ret i64 %19, !dbg !1743

noerr_block:                                      ; preds = %after_check5
  %20 = load i64, ptr %retparam2, align 8, !dbg !1743
  %add = add i64 %14, %20, !dbg !1741
  store i64 %add, ptr %len, align 8, !dbg !1741
    #dbg_declare(ptr %c, !1744, !DIExpression(), !1746)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %arg, i32 16, i1 false)
  %21 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext 3) #6, !dbg !1747
  %22 = trunc i8 %21 to i1, !dbg !1747
  br i1 %22, label %assert_ok, label %assert_fail, !dbg !1747

assert_fail:                                      ; preds = %noerr_block
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1747
  call void %23(ptr @.panic_msg.59, i64 69, ptr @.file.44, i64 20, ptr @.func.94, i64 8, i32 630) #5, !dbg !1747
  unreachable, !dbg !1747

assert_ok:                                        ; preds = %noerr_block
  %ptradd6 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !1752
  %24 = load i64, ptr %ptradd6, align 8, !dbg !1752
  %"introspect*7" = inttoptr i64 %24 to ptr, !dbg !1752
  %typeid.kind8 = load i8, ptr %"introspect*7", align 8, !dbg !1752
  %25 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext %typeid.kind8) #6, !dbg !1747
  %26 = trunc i8 %25 to i1, !dbg !1747
  br i1 %26, label %assert_ok10, label %assert_fail9, !dbg !1747

assert_fail9:                                     ; preds = %assert_ok
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1747
  call void %27(ptr @.panic_msg.60, i64 71, ptr @.file.44, i64 20, ptr @.func.94, i64 8, i32 630) #5, !dbg !1747
  unreachable, !dbg !1747

assert_ok10:                                      ; preds = %assert_ok
    #dbg_declare(ptr %any_type, !1753, !DIExpression(), !1754)
  %ptradd11 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !1755
  %28 = load i64, ptr %ptradd11, align 8, !dbg !1755
  store i64 %28, ptr %any_type, align 8, !dbg !1755
    #dbg_declare(ptr %kind, !1756, !DIExpression(), !1757)
  %29 = load i64, ptr %any_type, align 8, !dbg !1758
  %"introspect*12" = inttoptr i64 %29 to ptr, !dbg !1758
  %typeid.kind13 = load i8, ptr %"introspect*12", align 8, !dbg !1758
  store i8 %typeid.kind13, ptr %kind, align 1, !dbg !1758
    #dbg_declare(ptr %is_mixed_signed, !1759, !DIExpression(), !1760)
  %30 = load i64, ptr %any_type, align 8, !dbg !1761
  %"introspect*14" = inttoptr i64 %30 to ptr, !dbg !1761
  %typeid.kind15 = load i8, ptr %"introspect*14", align 8, !dbg !1761
  %neq = icmp ne i8 3, %typeid.kind15, !dbg !1762
  %31 = zext i1 %neq to i8, !dbg !1762
  store i8 %31, ptr %is_mixed_signed, align 1, !dbg !1762
    #dbg_declare(ptr %max, !1763, !DIExpression(), !1764)
  store i32 -1, ptr %max, align 4, !dbg !1765
    #dbg_declare(ptr %min, !1766, !DIExpression(), !1767)
  store i32 0, ptr %min, align 4, !dbg !1768
  %32 = load i64, ptr %any_type, align 8
  store i64 %32, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %assert_ok10
  %33 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !1769

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %34 = phi i64 [ %33, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !1769
  %eq = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %34, !dbg !1769
  br i1 %eq, label %result_block, label %parent_type_block, !dbg !1769

parent_type_block:                                ; preds = %check_subtype
  %35 = inttoptr i64 %34 to ptr, !dbg !1769
  %ptradd16 = getelementptr inbounds i8, ptr %35, i64 8, !dbg !1769
  %typeid.parent = load i64, ptr %ptradd16, align 8, !dbg !1769
  %36 = icmp eq i64 %typeid.parent, 0, !dbg !1769
  br i1 %36, label %result_block, label %check_subtype, !dbg !1769

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %37 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !1769
  br i1 %37, label %switch.case, label %next_if, !dbg !1769

switch.case:                                      ; preds = %result_block
    #dbg_declare(ptr %c17, !1771, !DIExpression(), !1774)
  %38 = load ptr, ptr %v, align 8, !dbg !1775
  %checknull = icmp eq ptr %38, null, !dbg !1775
  %39 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1775
  br i1 %39, label %panic18, label %checkok19, !dbg !1775

checkok19:                                        ; preds = %switch.case
  %40 = load i8, ptr %38, align 1, !dbg !1776
  store i8 %40, ptr %c17, align 1, !dbg !1776
  %41 = load i8, ptr %is_mixed_signed, align 1, !dbg !1777
  %42 = trunc i8 %41 to i1, !dbg !1777
  br i1 %42, label %and.rhs, label %and.phi, !dbg !1777

and.rhs:                                          ; preds = %checkok19
  %43 = load i8, ptr %c17, align 1, !dbg !1778
  %sext = sext i8 %43 to i32, !dbg !1778
  %lt = icmp slt i32 %sext, 0, !dbg !1778
  br label %and.phi, !dbg !1778

and.phi:                                          ; preds = %and.rhs, %checkok19
  %val = phi i1 [ false, %checkok19 ], [ %lt, %and.rhs ], !dbg !1778
  br i1 %val, label %if.then20, label %if.exit21, !dbg !1778

if.then20:                                        ; preds = %and.phi
  br label %else_block, !dbg !1779

if.exit21:                                        ; preds = %and.phi
  %44 = load i8, ptr %c17, align 1, !dbg !1780
  %sext22 = sext i8 %44 to i32, !dbg !1780
  store i32 %sext22, ptr %blockret, align 4, !dbg !1780
  br label %expr_block.exit, !dbg !1780

next_if:                                          ; preds = %result_block
  br label %check_subtype23, !dbg !1781

check_subtype23:                                  ; preds = %parent_type_block25, %next_if
  %45 = phi i64 [ %33, %next_if ], [ %typeid.parent27, %parent_type_block25 ], !dbg !1781
  %eq24 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %45, !dbg !1781
  br i1 %eq24, label %result_block28, label %parent_type_block25, !dbg !1781

parent_type_block25:                              ; preds = %check_subtype23
  %46 = inttoptr i64 %45 to ptr, !dbg !1781
  %ptradd26 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !1781
  %typeid.parent27 = load i64, ptr %ptradd26, align 8, !dbg !1781
  %47 = icmp eq i64 %typeid.parent27, 0, !dbg !1781
  br i1 %47, label %result_block28, label %check_subtype23, !dbg !1781

result_block28:                                   ; preds = %parent_type_block25, %check_subtype23
  %48 = phi i1 [ false, %parent_type_block25 ], [ true, %check_subtype23 ], !dbg !1781
  br i1 %48, label %switch.case29, label %next_if52, !dbg !1781

switch.case29:                                    ; preds = %result_block28
    #dbg_declare(ptr %s, !1782, !DIExpression(), !1785)
  %49 = load ptr, ptr %v, align 8, !dbg !1786
  %checknull30 = icmp eq ptr %49, null, !dbg !1786
  %50 = call i1 @llvm.expect.i1(i1 %checknull30, i1 false), !dbg !1786
  br i1 %50, label %panic31, label %checkok32, !dbg !1786

checkok32:                                        ; preds = %switch.case29
  %51 = ptrtoint ptr %49 to i64, !dbg !1787
  %52 = urem i64 %51, 2, !dbg !1787
  %53 = icmp ne i64 %52, 0, !dbg !1787
  %54 = call i1 @llvm.expect.i1(i1 %53, i1 false), !dbg !1787
  br i1 %54, label %panic33, label %checkok36, !dbg !1787

checkok36:                                        ; preds = %checkok32
  %55 = load i16, ptr %49, align 2, !dbg !1787
  store i16 %55, ptr %s, align 2, !dbg !1787
  %56 = load i8, ptr %is_mixed_signed, align 1, !dbg !1788
  %57 = trunc i8 %56 to i1, !dbg !1788
  br i1 %57, label %and.rhs37, label %and.phi40, !dbg !1788

and.rhs37:                                        ; preds = %checkok36
  %58 = load i16, ptr %s, align 2, !dbg !1789
  %sext38 = sext i16 %58 to i32, !dbg !1789
  %lt39 = icmp slt i32 %sext38, 0, !dbg !1789
  br label %and.phi40, !dbg !1789

and.phi40:                                        ; preds = %and.rhs37, %checkok36
  %val41 = phi i1 [ false, %checkok36 ], [ %lt39, %and.rhs37 ], !dbg !1789
  br i1 %val41, label %if.then42, label %if.exit43, !dbg !1789

if.then42:                                        ; preds = %and.phi40
  br label %else_block, !dbg !1790

if.exit43:                                        ; preds = %and.phi40
  %59 = load i16, ptr %s, align 2, !dbg !1791
  %sext44 = sext i16 %59 to i32, !dbg !1791
  %60 = load i32, ptr %max, align 4, !dbg !1792
  %gt = icmp sgt i32 %sext44, %60, !dbg !1791
  %check = icmp sge i32 %60, 0, !dbg !1791
  %siui-gt = and i1 %check, %gt, !dbg !1791
  br i1 %siui-gt, label %or.phi, label %or.rhs, !dbg !1791

or.rhs:                                           ; preds = %if.exit43
  %61 = load i16, ptr %s, align 2, !dbg !1793
  %sext45 = sext i16 %61 to i32, !dbg !1793
  %62 = load i32, ptr %min, align 4, !dbg !1794
  %lt46 = icmp slt i32 %sext45, %62, !dbg !1793
  %check47 = icmp slt i32 %62, 0, !dbg !1793
  %siui-lt = or i1 %check47, %lt46, !dbg !1793
  br label %or.phi, !dbg !1793

or.phi:                                           ; preds = %or.rhs, %if.exit43
  %val48 = phi i1 [ true, %if.exit43 ], [ %siui-lt, %or.rhs ], !dbg !1793
  br i1 %val48, label %if.then49, label %if.exit50, !dbg !1793

if.then49:                                        ; preds = %or.phi
  br label %else_block, !dbg !1795

if.exit50:                                        ; preds = %or.phi
  %63 = load i16, ptr %s, align 2, !dbg !1796
  %sext51 = sext i16 %63 to i32, !dbg !1796
  store i32 %sext51, ptr %blockret, align 4, !dbg !1796
  br label %expr_block.exit, !dbg !1796

next_if52:                                        ; preds = %result_block28
  br label %check_subtype53, !dbg !1797

check_subtype53:                                  ; preds = %parent_type_block55, %next_if52
  %64 = phi i64 [ %33, %next_if52 ], [ %typeid.parent57, %parent_type_block55 ], !dbg !1797
  %eq54 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %64, !dbg !1797
  br i1 %eq54, label %result_block58, label %parent_type_block55, !dbg !1797

parent_type_block55:                              ; preds = %check_subtype53
  %65 = inttoptr i64 %64 to ptr, !dbg !1797
  %ptradd56 = getelementptr inbounds i8, ptr %65, i64 8, !dbg !1797
  %typeid.parent57 = load i64, ptr %ptradd56, align 8, !dbg !1797
  %66 = icmp eq i64 %typeid.parent57, 0, !dbg !1797
  br i1 %66, label %result_block58, label %check_subtype53, !dbg !1797

result_block58:                                   ; preds = %parent_type_block55, %check_subtype53
  %67 = phi i1 [ false, %parent_type_block55 ], [ true, %check_subtype53 ], !dbg !1797
  br i1 %67, label %switch.case59, label %next_if88, !dbg !1797

switch.case59:                                    ; preds = %result_block58
    #dbg_declare(ptr %i, !1798, !DIExpression(), !1800)
  %68 = load ptr, ptr %v, align 8, !dbg !1801
  %checknull60 = icmp eq ptr %68, null, !dbg !1801
  %69 = call i1 @llvm.expect.i1(i1 %checknull60, i1 false), !dbg !1801
  br i1 %69, label %panic61, label %checkok62, !dbg !1801

checkok62:                                        ; preds = %switch.case59
  %70 = ptrtoint ptr %68 to i64, !dbg !1802
  %71 = urem i64 %70, 4, !dbg !1802
  %72 = icmp ne i64 %71, 0, !dbg !1802
  %73 = call i1 @llvm.expect.i1(i1 %72, i1 false), !dbg !1802
  br i1 %73, label %panic63, label %checkok70, !dbg !1802

checkok70:                                        ; preds = %checkok62
  %74 = load i32, ptr %68, align 4, !dbg !1802
  store i32 %74, ptr %i, align 4, !dbg !1802
  %75 = load i8, ptr %is_mixed_signed, align 1, !dbg !1803
  %76 = trunc i8 %75 to i1, !dbg !1803
  br i1 %76, label %and.rhs71, label %and.phi73, !dbg !1803

and.rhs71:                                        ; preds = %checkok70
  %77 = load i32, ptr %i, align 4, !dbg !1804
  %lt72 = icmp slt i32 %77, 0, !dbg !1804
  br label %and.phi73, !dbg !1804

and.phi73:                                        ; preds = %and.rhs71, %checkok70
  %val74 = phi i1 [ false, %checkok70 ], [ %lt72, %and.rhs71 ], !dbg !1804
  br i1 %val74, label %if.then75, label %if.exit76, !dbg !1804

if.then75:                                        ; preds = %and.phi73
  br label %else_block, !dbg !1805

if.exit76:                                        ; preds = %and.phi73
  %78 = load i32, ptr %i, align 4, !dbg !1806
  %79 = load i32, ptr %max, align 4, !dbg !1807
  %gt77 = icmp sgt i32 %78, %79, !dbg !1806
  %check78 = icmp sge i32 %79, 0, !dbg !1806
  %siui-gt79 = and i1 %check78, %gt77, !dbg !1806
  br i1 %siui-gt79, label %or.phi84, label %or.rhs80, !dbg !1806

or.rhs80:                                         ; preds = %if.exit76
  %80 = load i32, ptr %i, align 4, !dbg !1808
  %81 = load i32, ptr %min, align 4, !dbg !1809
  %lt81 = icmp slt i32 %80, %81, !dbg !1808
  %check82 = icmp slt i32 %81, 0, !dbg !1808
  %siui-lt83 = or i1 %check82, %lt81, !dbg !1808
  br label %or.phi84, !dbg !1808

or.phi84:                                         ; preds = %or.rhs80, %if.exit76
  %val85 = phi i1 [ true, %if.exit76 ], [ %siui-lt83, %or.rhs80 ], !dbg !1808
  br i1 %val85, label %if.then86, label %if.exit87, !dbg !1808

if.then86:                                        ; preds = %or.phi84
  br label %else_block, !dbg !1810

if.exit87:                                        ; preds = %or.phi84
  %82 = load i32, ptr %i, align 4, !dbg !1811
  store i32 %82, ptr %blockret, align 4, !dbg !1811
  br label %expr_block.exit, !dbg !1811

next_if88:                                        ; preds = %result_block58
  br label %check_subtype89, !dbg !1812

check_subtype89:                                  ; preds = %parent_type_block91, %next_if88
  %83 = phi i64 [ %33, %next_if88 ], [ %typeid.parent93, %parent_type_block91 ], !dbg !1812
  %eq90 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %83, !dbg !1812
  br i1 %eq90, label %result_block94, label %parent_type_block91, !dbg !1812

parent_type_block91:                              ; preds = %check_subtype89
  %84 = inttoptr i64 %83 to ptr, !dbg !1812
  %ptradd92 = getelementptr inbounds i8, ptr %84, i64 8, !dbg !1812
  %typeid.parent93 = load i64, ptr %ptradd92, align 8, !dbg !1812
  %85 = icmp eq i64 %typeid.parent93, 0, !dbg !1812
  br i1 %85, label %result_block94, label %check_subtype89, !dbg !1812

result_block94:                                   ; preds = %parent_type_block91, %check_subtype89
  %86 = phi i1 [ false, %parent_type_block91 ], [ true, %check_subtype89 ], !dbg !1812
  br i1 %86, label %switch.case95, label %next_if127, !dbg !1812

switch.case95:                                    ; preds = %result_block94
    #dbg_declare(ptr %l96, !1813, !DIExpression(), !1815)
  %87 = load ptr, ptr %v, align 8, !dbg !1816
  %checknull97 = icmp eq ptr %87, null, !dbg !1816
  %88 = call i1 @llvm.expect.i1(i1 %checknull97, i1 false), !dbg !1816
  br i1 %88, label %panic98, label %checkok99, !dbg !1816

checkok99:                                        ; preds = %switch.case95
  %89 = ptrtoint ptr %87 to i64, !dbg !1817
  %90 = urem i64 %89, 8, !dbg !1817
  %91 = icmp ne i64 %90, 0, !dbg !1817
  %92 = call i1 @llvm.expect.i1(i1 %91, i1 false), !dbg !1817
  br i1 %92, label %panic100, label %checkok107, !dbg !1817

checkok107:                                       ; preds = %checkok99
  %93 = load i64, ptr %87, align 8, !dbg !1817
  store i64 %93, ptr %l96, align 8, !dbg !1817
  %94 = load i8, ptr %is_mixed_signed, align 1, !dbg !1818
  %95 = trunc i8 %94 to i1, !dbg !1818
  br i1 %95, label %and.rhs108, label %and.phi110, !dbg !1818

and.rhs108:                                       ; preds = %checkok107
  %96 = load i64, ptr %l96, align 8, !dbg !1819
  %lt109 = icmp slt i64 %96, 0, !dbg !1819
  br label %and.phi110, !dbg !1819

and.phi110:                                       ; preds = %and.rhs108, %checkok107
  %val111 = phi i1 [ false, %checkok107 ], [ %lt109, %and.rhs108 ], !dbg !1819
  br i1 %val111, label %if.then112, label %if.exit113, !dbg !1819

if.then112:                                       ; preds = %and.phi110
  br label %else_block, !dbg !1820

if.exit113:                                       ; preds = %and.phi110
  %97 = load i64, ptr %l96, align 8, !dbg !1821
  %98 = load i32, ptr %max, align 4, !dbg !1822
  %zext114 = zext i32 %98 to i64, !dbg !1822
  %gt115 = icmp sgt i64 %97, %zext114, !dbg !1821
  %check116 = icmp sge i64 %zext114, 0, !dbg !1821
  %siui-gt117 = and i1 %check116, %gt115, !dbg !1821
  br i1 %siui-gt117, label %or.phi123, label %or.rhs118, !dbg !1821

or.rhs118:                                        ; preds = %if.exit113
  %99 = load i64, ptr %l96, align 8, !dbg !1823
  %100 = load i32, ptr %min, align 4, !dbg !1824
  %zext119 = zext i32 %100 to i64, !dbg !1824
  %lt120 = icmp slt i64 %99, %zext119, !dbg !1823
  %check121 = icmp slt i64 %zext119, 0, !dbg !1823
  %siui-lt122 = or i1 %check121, %lt120, !dbg !1823
  br label %or.phi123, !dbg !1823

or.phi123:                                        ; preds = %or.rhs118, %if.exit113
  %val124 = phi i1 [ true, %if.exit113 ], [ %siui-lt122, %or.rhs118 ], !dbg !1823
  br i1 %val124, label %if.then125, label %if.exit126, !dbg !1823

if.then125:                                       ; preds = %or.phi123
  br label %else_block, !dbg !1825

if.exit126:                                       ; preds = %or.phi123
  %101 = load i64, ptr %l96, align 8, !dbg !1826
  %trunc = trunc i64 %101 to i32, !dbg !1826
  store i32 %trunc, ptr %blockret, align 4, !dbg !1826
  br label %expr_block.exit, !dbg !1826

next_if127:                                       ; preds = %result_block94
  br label %check_subtype128, !dbg !1827

check_subtype128:                                 ; preds = %parent_type_block130, %next_if127
  %102 = phi i64 [ %33, %next_if127 ], [ %typeid.parent132, %parent_type_block130 ], !dbg !1827
  %eq129 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %102, !dbg !1827
  br i1 %eq129, label %result_block133, label %parent_type_block130, !dbg !1827

parent_type_block130:                             ; preds = %check_subtype128
  %103 = inttoptr i64 %102 to ptr, !dbg !1827
  %ptradd131 = getelementptr inbounds i8, ptr %103, i64 8, !dbg !1827
  %typeid.parent132 = load i64, ptr %ptradd131, align 8, !dbg !1827
  %104 = icmp eq i64 %typeid.parent132, 0, !dbg !1827
  br i1 %104, label %result_block133, label %check_subtype128, !dbg !1827

result_block133:                                  ; preds = %parent_type_block130, %check_subtype128
  %105 = phi i1 [ false, %parent_type_block130 ], [ true, %check_subtype128 ], !dbg !1827
  br i1 %105, label %switch.case134, label %next_if167, !dbg !1827

switch.case134:                                   ; preds = %result_block133
    #dbg_declare(ptr %i135, !1828, !DIExpression(), !1831)
  %106 = load ptr, ptr %v, align 8, !dbg !1832
  %checknull136 = icmp eq ptr %106, null, !dbg !1832
  %107 = call i1 @llvm.expect.i1(i1 %checknull136, i1 false), !dbg !1832
  br i1 %107, label %panic137, label %checkok138, !dbg !1832

checkok138:                                       ; preds = %switch.case134
  %108 = ptrtoint ptr %106 to i64, !dbg !1833
  %109 = urem i64 %108, 16, !dbg !1833
  %110 = icmp ne i64 %109, 0, !dbg !1833
  %111 = call i1 @llvm.expect.i1(i1 %110, i1 false), !dbg !1833
  br i1 %111, label %panic139, label %checkok146, !dbg !1833

checkok146:                                       ; preds = %checkok138
  %112 = load i128, ptr %106, align 16, !dbg !1833
  store i128 %112, ptr %i135, align 16, !dbg !1833
  %113 = load i8, ptr %is_mixed_signed, align 1, !dbg !1834
  %114 = trunc i8 %113 to i1, !dbg !1834
  br i1 %114, label %and.rhs147, label %and.phi149, !dbg !1834

and.rhs147:                                       ; preds = %checkok146
  %115 = load i128, ptr %i135, align 16, !dbg !1835
  %lt148 = icmp slt i128 %115, 0, !dbg !1835
  br label %and.phi149, !dbg !1835

and.phi149:                                       ; preds = %and.rhs147, %checkok146
  %val150 = phi i1 [ false, %checkok146 ], [ %lt148, %and.rhs147 ], !dbg !1835
  br i1 %val150, label %if.then151, label %if.exit152, !dbg !1835

if.then151:                                       ; preds = %and.phi149
  br label %else_block, !dbg !1836

if.exit152:                                       ; preds = %and.phi149
  %116 = load i128, ptr %i135, align 16, !dbg !1837
  %117 = load i32, ptr %max, align 4, !dbg !1838
  %zext153 = zext i32 %117 to i128, !dbg !1838
  %gt154 = icmp sgt i128 %116, %zext153, !dbg !1837
  %check155 = icmp sge i128 %zext153, 0, !dbg !1837
  %siui-gt156 = and i1 %check155, %gt154, !dbg !1837
  br i1 %siui-gt156, label %or.phi162, label %or.rhs157, !dbg !1837

or.rhs157:                                        ; preds = %if.exit152
  %118 = load i128, ptr %i135, align 16, !dbg !1839
  %119 = load i32, ptr %min, align 4, !dbg !1840
  %zext158 = zext i32 %119 to i128, !dbg !1840
  %lt159 = icmp slt i128 %118, %zext158, !dbg !1839
  %check160 = icmp slt i128 %zext158, 0, !dbg !1839
  %siui-lt161 = or i1 %check160, %lt159, !dbg !1839
  br label %or.phi162, !dbg !1839

or.phi162:                                        ; preds = %or.rhs157, %if.exit152
  %val163 = phi i1 [ true, %if.exit152 ], [ %siui-lt161, %or.rhs157 ], !dbg !1839
  br i1 %val163, label %if.then164, label %if.exit165, !dbg !1839

if.then164:                                       ; preds = %or.phi162
  br label %else_block, !dbg !1841

if.exit165:                                       ; preds = %or.phi162
  %120 = load i128, ptr %i135, align 16, !dbg !1842
  %trunc166 = trunc i128 %120 to i32, !dbg !1842
  store i32 %trunc166, ptr %blockret, align 4, !dbg !1842
  br label %expr_block.exit, !dbg !1842

next_if167:                                       ; preds = %result_block133
  br label %check_subtype168, !dbg !1843

check_subtype168:                                 ; preds = %parent_type_block170, %next_if167
  %121 = phi i64 [ %33, %next_if167 ], [ %typeid.parent172, %parent_type_block170 ], !dbg !1843
  %eq169 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %121, !dbg !1843
  br i1 %eq169, label %result_block173, label %parent_type_block170, !dbg !1843

parent_type_block170:                             ; preds = %check_subtype168
  %122 = inttoptr i64 %121 to ptr, !dbg !1843
  %ptradd171 = getelementptr inbounds i8, ptr %122, i64 8, !dbg !1843
  %typeid.parent172 = load i64, ptr %ptradd171, align 8, !dbg !1843
  %123 = icmp eq i64 %typeid.parent172, 0, !dbg !1843
  br i1 %123, label %result_block173, label %check_subtype168, !dbg !1843

result_block173:                                  ; preds = %parent_type_block170, %check_subtype168
  %124 = phi i1 [ false, %parent_type_block170 ], [ true, %check_subtype168 ], !dbg !1843
  br i1 %124, label %switch.case174, label %next_if184, !dbg !1843

switch.case174:                                   ; preds = %result_block173
    #dbg_declare(ptr %c175, !1844, !DIExpression(), !1846)
  %125 = load ptr, ptr %v, align 8, !dbg !1847
  %checknull176 = icmp eq ptr %125, null, !dbg !1847
  %126 = call i1 @llvm.expect.i1(i1 %checknull176, i1 false), !dbg !1847
  br i1 %126, label %panic177, label %checkok178, !dbg !1847

checkok178:                                       ; preds = %switch.case174
  %127 = load i8, ptr %125, align 1, !dbg !1848
  store i8 %127, ptr %c175, align 1, !dbg !1848
  %128 = load i8, ptr %c175, align 1, !dbg !1849
  %zext179 = zext i8 %128 to i32, !dbg !1849
  %129 = load i32, ptr %max, align 4, !dbg !1850
  %gt180 = icmp ugt i32 %zext179, %129, !dbg !1849
  br i1 %gt180, label %if.then181, label %if.exit182, !dbg !1849

if.then181:                                       ; preds = %checkok178
  br label %else_block, !dbg !1851

if.exit182:                                       ; preds = %checkok178
  %130 = load i8, ptr %c175, align 1, !dbg !1852
  %zext183 = zext i8 %130 to i32, !dbg !1852
  store i32 %zext183, ptr %blockret, align 4, !dbg !1852
  br label %expr_block.exit, !dbg !1852

next_if184:                                       ; preds = %result_block173
  br label %check_subtype185, !dbg !1853

check_subtype185:                                 ; preds = %parent_type_block187, %next_if184
  %131 = phi i64 [ %33, %next_if184 ], [ %typeid.parent189, %parent_type_block187 ], !dbg !1853
  %eq186 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %131, !dbg !1853
  br i1 %eq186, label %result_block190, label %parent_type_block187, !dbg !1853

parent_type_block187:                             ; preds = %check_subtype185
  %132 = inttoptr i64 %131 to ptr, !dbg !1853
  %ptradd188 = getelementptr inbounds i8, ptr %132, i64 8, !dbg !1853
  %typeid.parent189 = load i64, ptr %ptradd188, align 8, !dbg !1853
  %133 = icmp eq i64 %typeid.parent189, 0, !dbg !1853
  br i1 %133, label %result_block190, label %check_subtype185, !dbg !1853

result_block190:                                  ; preds = %parent_type_block187, %check_subtype185
  %134 = phi i1 [ false, %parent_type_block187 ], [ true, %check_subtype185 ], !dbg !1853
  br i1 %134, label %switch.case191, label %next_if214, !dbg !1853

switch.case191:                                   ; preds = %result_block190
    #dbg_declare(ptr %s192, !1854, !DIExpression(), !1857)
  %135 = load ptr, ptr %v, align 8, !dbg !1858
  %checknull193 = icmp eq ptr %135, null, !dbg !1858
  %136 = call i1 @llvm.expect.i1(i1 %checknull193, i1 false), !dbg !1858
  br i1 %136, label %panic194, label %checkok195, !dbg !1858

checkok195:                                       ; preds = %switch.case191
  %137 = ptrtoint ptr %135 to i64, !dbg !1859
  %138 = urem i64 %137, 2, !dbg !1859
  %139 = icmp ne i64 %138, 0, !dbg !1859
  %140 = call i1 @llvm.expect.i1(i1 %139, i1 false), !dbg !1859
  br i1 %140, label %panic196, label %checkok203, !dbg !1859

checkok203:                                       ; preds = %checkok195
  %141 = load i16, ptr %135, align 2, !dbg !1859
  store i16 %141, ptr %s192, align 2, !dbg !1859
  %142 = load i16, ptr %s192, align 2, !dbg !1860
  %zext204 = zext i16 %142 to i32, !dbg !1860
  %143 = load i32, ptr %max, align 4, !dbg !1861
  %gt205 = icmp ugt i32 %zext204, %143, !dbg !1860
  br i1 %gt205, label %or.phi209, label %or.rhs206, !dbg !1860

or.rhs206:                                        ; preds = %checkok203
  %144 = load i16, ptr %s192, align 2, !dbg !1862
  %zext207 = zext i16 %144 to i32, !dbg !1862
  %145 = load i32, ptr %min, align 4, !dbg !1863
  %lt208 = icmp ult i32 %zext207, %145, !dbg !1862
  br label %or.phi209, !dbg !1862

or.phi209:                                        ; preds = %or.rhs206, %checkok203
  %val210 = phi i1 [ true, %checkok203 ], [ %lt208, %or.rhs206 ], !dbg !1862
  br i1 %val210, label %if.then211, label %if.exit212, !dbg !1862

if.then211:                                       ; preds = %or.phi209
  br label %else_block, !dbg !1864

if.exit212:                                       ; preds = %or.phi209
  %146 = load i16, ptr %s192, align 2, !dbg !1865
  %zext213 = zext i16 %146 to i32, !dbg !1865
  store i32 %zext213, ptr %blockret, align 4, !dbg !1865
  br label %expr_block.exit, !dbg !1865

next_if214:                                       ; preds = %result_block190
  br label %check_subtype215, !dbg !1866

check_subtype215:                                 ; preds = %parent_type_block217, %next_if214
  %147 = phi i64 [ %33, %next_if214 ], [ %typeid.parent219, %parent_type_block217 ], !dbg !1866
  %eq216 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %147, !dbg !1866
  br i1 %eq216, label %result_block220, label %parent_type_block217, !dbg !1866

parent_type_block217:                             ; preds = %check_subtype215
  %148 = inttoptr i64 %147 to ptr, !dbg !1866
  %ptradd218 = getelementptr inbounds i8, ptr %148, i64 8, !dbg !1866
  %typeid.parent219 = load i64, ptr %ptradd218, align 8, !dbg !1866
  %149 = icmp eq i64 %typeid.parent219, 0, !dbg !1866
  br i1 %149, label %result_block220, label %check_subtype215, !dbg !1866

result_block220:                                  ; preds = %parent_type_block217, %check_subtype215
  %150 = phi i1 [ false, %parent_type_block217 ], [ true, %check_subtype215 ], !dbg !1866
  br i1 %150, label %switch.case221, label %next_if241, !dbg !1866

switch.case221:                                   ; preds = %result_block220
    #dbg_declare(ptr %i222, !1867, !DIExpression(), !1869)
  %151 = load ptr, ptr %v, align 8, !dbg !1870
  %checknull223 = icmp eq ptr %151, null, !dbg !1870
  %152 = call i1 @llvm.expect.i1(i1 %checknull223, i1 false), !dbg !1870
  br i1 %152, label %panic224, label %checkok225, !dbg !1870

checkok225:                                       ; preds = %switch.case221
  %153 = ptrtoint ptr %151 to i64, !dbg !1871
  %154 = urem i64 %153, 4, !dbg !1871
  %155 = icmp ne i64 %154, 0, !dbg !1871
  %156 = call i1 @llvm.expect.i1(i1 %155, i1 false), !dbg !1871
  br i1 %156, label %panic226, label %checkok233, !dbg !1871

checkok233:                                       ; preds = %checkok225
  %157 = load i32, ptr %151, align 4, !dbg !1871
  store i32 %157, ptr %i222, align 4, !dbg !1871
  %158 = load i32, ptr %i222, align 4, !dbg !1872
  %159 = load i32, ptr %max, align 4, !dbg !1873
  %gt234 = icmp ugt i32 %158, %159, !dbg !1872
  br i1 %gt234, label %or.phi237, label %or.rhs235, !dbg !1872

or.rhs235:                                        ; preds = %checkok233
  %160 = load i32, ptr %i222, align 4, !dbg !1874
  %161 = load i32, ptr %min, align 4, !dbg !1875
  %lt236 = icmp ult i32 %160, %161, !dbg !1874
  br label %or.phi237, !dbg !1874

or.phi237:                                        ; preds = %or.rhs235, %checkok233
  %val238 = phi i1 [ true, %checkok233 ], [ %lt236, %or.rhs235 ], !dbg !1874
  br i1 %val238, label %if.then239, label %if.exit240, !dbg !1874

if.then239:                                       ; preds = %or.phi237
  br label %else_block, !dbg !1876

if.exit240:                                       ; preds = %or.phi237
  %162 = load i32, ptr %i222, align 4, !dbg !1877
  store i32 %162, ptr %blockret, align 4, !dbg !1877
  br label %expr_block.exit, !dbg !1877

next_if241:                                       ; preds = %result_block220
  br label %check_subtype242, !dbg !1878

check_subtype242:                                 ; preds = %parent_type_block244, %next_if241
  %163 = phi i64 [ %33, %next_if241 ], [ %typeid.parent246, %parent_type_block244 ], !dbg !1878
  %eq243 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %163, !dbg !1878
  br i1 %eq243, label %result_block247, label %parent_type_block244, !dbg !1878

parent_type_block244:                             ; preds = %check_subtype242
  %164 = inttoptr i64 %163 to ptr, !dbg !1878
  %ptradd245 = getelementptr inbounds i8, ptr %164, i64 8, !dbg !1878
  %typeid.parent246 = load i64, ptr %ptradd245, align 8, !dbg !1878
  %165 = icmp eq i64 %typeid.parent246, 0, !dbg !1878
  br i1 %165, label %result_block247, label %check_subtype242, !dbg !1878

result_block247:                                  ; preds = %parent_type_block244, %check_subtype242
  %166 = phi i1 [ false, %parent_type_block244 ], [ true, %check_subtype242 ], !dbg !1878
  br i1 %166, label %switch.case248, label %next_if271, !dbg !1878

switch.case248:                                   ; preds = %result_block247
    #dbg_declare(ptr %l249, !1879, !DIExpression(), !1881)
  %167 = load ptr, ptr %v, align 8, !dbg !1882
  %checknull250 = icmp eq ptr %167, null, !dbg !1882
  %168 = call i1 @llvm.expect.i1(i1 %checknull250, i1 false), !dbg !1882
  br i1 %168, label %panic251, label %checkok252, !dbg !1882

checkok252:                                       ; preds = %switch.case248
  %169 = ptrtoint ptr %167 to i64, !dbg !1883
  %170 = urem i64 %169, 8, !dbg !1883
  %171 = icmp ne i64 %170, 0, !dbg !1883
  %172 = call i1 @llvm.expect.i1(i1 %171, i1 false), !dbg !1883
  br i1 %172, label %panic253, label %checkok260, !dbg !1883

checkok260:                                       ; preds = %checkok252
  %173 = load i64, ptr %167, align 8, !dbg !1883
  store i64 %173, ptr %l249, align 8, !dbg !1883
  %174 = load i64, ptr %l249, align 8, !dbg !1884
  %175 = load i32, ptr %max, align 4, !dbg !1885
  %zext261 = zext i32 %175 to i64, !dbg !1885
  %gt262 = icmp ugt i64 %174, %zext261, !dbg !1884
  br i1 %gt262, label %or.phi266, label %or.rhs263, !dbg !1884

or.rhs263:                                        ; preds = %checkok260
  %176 = load i64, ptr %l249, align 8, !dbg !1886
  %177 = load i32, ptr %min, align 4, !dbg !1887
  %zext264 = zext i32 %177 to i64, !dbg !1887
  %lt265 = icmp ult i64 %176, %zext264, !dbg !1886
  br label %or.phi266, !dbg !1886

or.phi266:                                        ; preds = %or.rhs263, %checkok260
  %val267 = phi i1 [ true, %checkok260 ], [ %lt265, %or.rhs263 ], !dbg !1886
  br i1 %val267, label %if.then268, label %if.exit269, !dbg !1886

if.then268:                                       ; preds = %or.phi266
  br label %else_block, !dbg !1888

if.exit269:                                       ; preds = %or.phi266
  %178 = load i64, ptr %l249, align 8, !dbg !1889
  %trunc270 = trunc i64 %178 to i32, !dbg !1889
  store i32 %trunc270, ptr %blockret, align 4, !dbg !1889
  br label %expr_block.exit, !dbg !1889

next_if271:                                       ; preds = %result_block247
  br label %check_subtype272, !dbg !1890

check_subtype272:                                 ; preds = %parent_type_block274, %next_if271
  %179 = phi i64 [ %33, %next_if271 ], [ %typeid.parent276, %parent_type_block274 ], !dbg !1890
  %eq273 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %179, !dbg !1890
  br i1 %eq273, label %result_block277, label %parent_type_block274, !dbg !1890

parent_type_block274:                             ; preds = %check_subtype272
  %180 = inttoptr i64 %179 to ptr, !dbg !1890
  %ptradd275 = getelementptr inbounds i8, ptr %180, i64 8, !dbg !1890
  %typeid.parent276 = load i64, ptr %ptradd275, align 8, !dbg !1890
  %181 = icmp eq i64 %typeid.parent276, 0, !dbg !1890
  br i1 %181, label %result_block277, label %check_subtype272, !dbg !1890

result_block277:                                  ; preds = %parent_type_block274, %check_subtype272
  %182 = phi i1 [ false, %parent_type_block274 ], [ true, %check_subtype272 ], !dbg !1890
  br i1 %182, label %switch.case278, label %next_if301, !dbg !1890

switch.case278:                                   ; preds = %result_block277
    #dbg_declare(ptr %i279, !1891, !DIExpression(), !1893)
  %183 = load ptr, ptr %v, align 8, !dbg !1894
  %checknull280 = icmp eq ptr %183, null, !dbg !1894
  %184 = call i1 @llvm.expect.i1(i1 %checknull280, i1 false), !dbg !1894
  br i1 %184, label %panic281, label %checkok282, !dbg !1894

checkok282:                                       ; preds = %switch.case278
  %185 = ptrtoint ptr %183 to i64, !dbg !1895
  %186 = urem i64 %185, 16, !dbg !1895
  %187 = icmp ne i64 %186, 0, !dbg !1895
  %188 = call i1 @llvm.expect.i1(i1 %187, i1 false), !dbg !1895
  br i1 %188, label %panic283, label %checkok290, !dbg !1895

checkok290:                                       ; preds = %checkok282
  %189 = load i128, ptr %183, align 16, !dbg !1895
  store i128 %189, ptr %i279, align 16, !dbg !1895
  %190 = load i128, ptr %i279, align 16, !dbg !1896
  %191 = load i32, ptr %max, align 4, !dbg !1897
  %zext291 = zext i32 %191 to i128, !dbg !1897
  %gt292 = icmp ugt i128 %190, %zext291, !dbg !1896
  br i1 %gt292, label %or.phi296, label %or.rhs293, !dbg !1896

or.rhs293:                                        ; preds = %checkok290
  %192 = load i128, ptr %i279, align 16, !dbg !1898
  %193 = load i32, ptr %min, align 4, !dbg !1899
  %zext294 = zext i32 %193 to i128, !dbg !1899
  %lt295 = icmp ult i128 %192, %zext294, !dbg !1898
  br label %or.phi296, !dbg !1898

or.phi296:                                        ; preds = %or.rhs293, %checkok290
  %val297 = phi i1 [ true, %checkok290 ], [ %lt295, %or.rhs293 ], !dbg !1898
  br i1 %val297, label %if.then298, label %if.exit299, !dbg !1898

if.then298:                                       ; preds = %or.phi296
  br label %else_block, !dbg !1900

if.exit299:                                       ; preds = %or.phi296
  %194 = load i128, ptr %i279, align 16, !dbg !1901
  %trunc300 = trunc i128 %194 to i32, !dbg !1901
  store i32 %trunc300, ptr %blockret, align 4, !dbg !1901
  br label %expr_block.exit, !dbg !1901

next_if301:                                       ; preds = %result_block277
  br label %switch.default, !dbg !1901

switch.default:                                   ; preds = %next_if301
  store %"char[]" { ptr @.str.96, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1902
  %ptradd302 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1902
  %hi = load i64, ptr %ptradd302, align 8, !dbg !1902
  store %"any[]" zeroinitializer, ptr %indirectarg303, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.97, i64 20, ptr @.str.98, i64 18, i32 630, ptr byval(%"any[]") align 8 %indirectarg303), !dbg !1906
  unreachable, !dbg !1907

expr_block.exit:                                  ; preds = %if.exit299, %if.exit269, %if.exit240, %if.exit212, %if.exit182, %if.exit165, %if.exit126, %if.exit87, %if.exit50, %if.exit21
  %195 = load i32, ptr %blockret, align 4, !dbg !1907
  br label %phi_block, !dbg !1907

else_block:                                       ; preds = %if.then298, %if.then268, %if.then239, %if.then211, %if.then181, %if.then164, %if.then151, %if.then125, %if.then112, %if.then86, %if.then75, %if.then49, %if.then42, %if.then20
  br label %phi_block, !dbg !1908

phi_block:                                        ; preds = %else_block, %expr_block.exit
  %val304 = phi i32 [ %195, %expr_block.exit ], [ 65533, %else_block ], !dbg !1908
  store i32 %val304, ptr %c, align 4, !dbg !1908
  store i8 1, ptr %switch305, align 1
  br label %switch.entry306

switch.entry306:                                  ; preds = %phi_block
  %196 = load i8, ptr %switch305, align 1
  %197 = trunc i8 %196 to i1
  %198 = load i32, ptr %c, align 4, !dbg !1909
  %lt307 = icmp ult i32 %198, 127, !dbg !1909
  %eq308 = icmp eq i1 %lt307, %197, !dbg !1909
  br i1 %eq308, label %switch.case309, label %next_if318, !dbg !1909

switch.case309:                                   ; preds = %switch.entry306
  %199 = load i32, ptr %c, align 4, !dbg !1911
  %trunc311 = trunc i32 %199 to i8, !dbg !1911
  %200 = load ptr, ptr %self, align 8
  %201 = call i64 @std.io.Formatter.out(ptr %retparam312, ptr %200, i8 zeroext %trunc311), !dbg !1913
  %not_err313 = icmp eq i64 %201, 0, !dbg !1913
  %202 = call i1 @llvm.expect.i1(i1 %not_err313, i1 true), !dbg !1913
  br i1 %202, label %after_check315, label %assign_optional314, !dbg !1913

assign_optional314:                               ; preds = %switch.case309
  store i64 %201, ptr %error_var310, align 8, !dbg !1913
  br label %guard_block316, !dbg !1913

after_check315:                                   ; preds = %switch.case309
  br label %noerr_block317, !dbg !1913

guard_block316:                                   ; preds = %assign_optional314
  %203 = load i64, ptr %error_var310, align 8, !dbg !1913
  ret i64 %203, !dbg !1913

noerr_block317:                                   ; preds = %after_check315
  br label %switch.exit, !dbg !1913

next_if318:                                       ; preds = %switch.entry306
  %204 = load i32, ptr %c, align 4, !dbg !1914
  %lt319 = icmp ult i32 %204, 2047, !dbg !1914
  %eq320 = icmp eq i1 %lt319, %197, !dbg !1914
  br i1 %eq320, label %switch.case321, label %next_if339, !dbg !1914

switch.case321:                                   ; preds = %next_if318
  %205 = load i32, ptr %c, align 4, !dbg !1915
  %lshr = lshr i32 %205, 6, !dbg !1915
  %206 = freeze i32 %lshr, !dbg !1915
  %or = or i32 192, %206, !dbg !1917
  %trunc323 = trunc i32 %or to i8, !dbg !1917
  %207 = load ptr, ptr %self, align 8
  %208 = call i64 @std.io.Formatter.out(ptr %retparam324, ptr %207, i8 zeroext %trunc323), !dbg !1918
  %not_err325 = icmp eq i64 %208, 0, !dbg !1918
  %209 = call i1 @llvm.expect.i1(i1 %not_err325, i1 true), !dbg !1918
  br i1 %209, label %after_check327, label %assign_optional326, !dbg !1918

assign_optional326:                               ; preds = %switch.case321
  store i64 %208, ptr %error_var322, align 8, !dbg !1918
  br label %guard_block328, !dbg !1918

after_check327:                                   ; preds = %switch.case321
  br label %noerr_block329, !dbg !1918

guard_block328:                                   ; preds = %assign_optional326
  %210 = load i64, ptr %error_var322, align 8, !dbg !1918
  ret i64 %210, !dbg !1918

noerr_block329:                                   ; preds = %after_check327
  %211 = load i32, ptr %c, align 4, !dbg !1919
  %and = and i32 %211, 63, !dbg !1919
  %or331 = or i32 128, %and, !dbg !1920
  %trunc332 = trunc i32 %or331 to i8, !dbg !1920
  %212 = load ptr, ptr %self, align 8
  %213 = call i64 @std.io.Formatter.out(ptr %retparam333, ptr %212, i8 zeroext %trunc332), !dbg !1921
  %not_err334 = icmp eq i64 %213, 0, !dbg !1921
  %214 = call i1 @llvm.expect.i1(i1 %not_err334, i1 true), !dbg !1921
  br i1 %214, label %after_check336, label %assign_optional335, !dbg !1921

assign_optional335:                               ; preds = %noerr_block329
  store i64 %213, ptr %error_var330, align 8, !dbg !1921
  br label %guard_block337, !dbg !1921

after_check336:                                   ; preds = %noerr_block329
  br label %noerr_block338, !dbg !1921

guard_block337:                                   ; preds = %assign_optional335
  %215 = load i64, ptr %error_var330, align 8, !dbg !1921
  ret i64 %215, !dbg !1921

noerr_block338:                                   ; preds = %after_check336
  br label %switch.exit, !dbg !1921

next_if339:                                       ; preds = %next_if318
  %216 = load i32, ptr %c, align 4, !dbg !1922
  %lt340 = icmp ult i32 %216, 65535, !dbg !1922
  %eq341 = icmp eq i1 %lt340, %197, !dbg !1922
  br i1 %eq341, label %switch.case342, label %next_if374, !dbg !1922

switch.case342:                                   ; preds = %next_if339
  %217 = load i32, ptr %c, align 4, !dbg !1923
  %lshr344 = lshr i32 %217, 12, !dbg !1923
  %218 = freeze i32 %lshr344, !dbg !1923
  %or345 = or i32 224, %218, !dbg !1925
  %trunc346 = trunc i32 %or345 to i8, !dbg !1925
  %219 = load ptr, ptr %self, align 8
  %220 = call i64 @std.io.Formatter.out(ptr %retparam347, ptr %219, i8 zeroext %trunc346), !dbg !1926
  %not_err348 = icmp eq i64 %220, 0, !dbg !1926
  %221 = call i1 @llvm.expect.i1(i1 %not_err348, i1 true), !dbg !1926
  br i1 %221, label %after_check350, label %assign_optional349, !dbg !1926

assign_optional349:                               ; preds = %switch.case342
  store i64 %220, ptr %error_var343, align 8, !dbg !1926
  br label %guard_block351, !dbg !1926

after_check350:                                   ; preds = %switch.case342
  br label %noerr_block352, !dbg !1926

guard_block351:                                   ; preds = %assign_optional349
  %222 = load i64, ptr %error_var343, align 8, !dbg !1926
  ret i64 %222, !dbg !1926

noerr_block352:                                   ; preds = %after_check350
  %223 = load i32, ptr %c, align 4, !dbg !1927
  %lshr354 = lshr i32 %223, 6, !dbg !1927
  %224 = freeze i32 %lshr354, !dbg !1927
  %and355 = and i32 %224, 63, !dbg !1927
  %or356 = or i32 128, %and355, !dbg !1928
  %trunc357 = trunc i32 %or356 to i8, !dbg !1928
  %225 = load ptr, ptr %self, align 8
  %226 = call i64 @std.io.Formatter.out(ptr %retparam358, ptr %225, i8 zeroext %trunc357), !dbg !1929
  %not_err359 = icmp eq i64 %226, 0, !dbg !1929
  %227 = call i1 @llvm.expect.i1(i1 %not_err359, i1 true), !dbg !1929
  br i1 %227, label %after_check361, label %assign_optional360, !dbg !1929

assign_optional360:                               ; preds = %noerr_block352
  store i64 %226, ptr %error_var353, align 8, !dbg !1929
  br label %guard_block362, !dbg !1929

after_check361:                                   ; preds = %noerr_block352
  br label %noerr_block363, !dbg !1929

guard_block362:                                   ; preds = %assign_optional360
  %228 = load i64, ptr %error_var353, align 8, !dbg !1929
  ret i64 %228, !dbg !1929

noerr_block363:                                   ; preds = %after_check361
  %229 = load i32, ptr %c, align 4, !dbg !1930
  %and365 = and i32 %229, 63, !dbg !1930
  %or366 = or i32 128, %and365, !dbg !1931
  %trunc367 = trunc i32 %or366 to i8, !dbg !1931
  %230 = load ptr, ptr %self, align 8
  %231 = call i64 @std.io.Formatter.out(ptr %retparam368, ptr %230, i8 zeroext %trunc367), !dbg !1932
  %not_err369 = icmp eq i64 %231, 0, !dbg !1932
  %232 = call i1 @llvm.expect.i1(i1 %not_err369, i1 true), !dbg !1932
  br i1 %232, label %after_check371, label %assign_optional370, !dbg !1932

assign_optional370:                               ; preds = %noerr_block363
  store i64 %231, ptr %error_var364, align 8, !dbg !1932
  br label %guard_block372, !dbg !1932

after_check371:                                   ; preds = %noerr_block363
  br label %noerr_block373, !dbg !1932

guard_block372:                                   ; preds = %assign_optional370
  %233 = load i64, ptr %error_var364, align 8, !dbg !1932
  ret i64 %233, !dbg !1932

noerr_block373:                                   ; preds = %after_check371
  br label %switch.exit, !dbg !1932

next_if374:                                       ; preds = %next_if339
  br label %switch.default375, !dbg !1932

switch.default375:                                ; preds = %next_if374
  %234 = load i32, ptr %c, align 4, !dbg !1933
  %lshr377 = lshr i32 %234, 18, !dbg !1933
  %235 = freeze i32 %lshr377, !dbg !1933
  %or378 = or i32 240, %235, !dbg !1935
  %trunc379 = trunc i32 %or378 to i8, !dbg !1935
  %236 = load ptr, ptr %self, align 8
  %237 = call i64 @std.io.Formatter.out(ptr %retparam380, ptr %236, i8 zeroext %trunc379), !dbg !1936
  %not_err381 = icmp eq i64 %237, 0, !dbg !1936
  %238 = call i1 @llvm.expect.i1(i1 %not_err381, i1 true), !dbg !1936
  br i1 %238, label %after_check383, label %assign_optional382, !dbg !1936

assign_optional382:                               ; preds = %switch.default375
  store i64 %237, ptr %error_var376, align 8, !dbg !1936
  br label %guard_block384, !dbg !1936

after_check383:                                   ; preds = %switch.default375
  br label %noerr_block385, !dbg !1936

guard_block384:                                   ; preds = %assign_optional382
  %239 = load i64, ptr %error_var376, align 8, !dbg !1936
  ret i64 %239, !dbg !1936

noerr_block385:                                   ; preds = %after_check383
  %240 = load i32, ptr %c, align 4, !dbg !1937
  %lshr387 = lshr i32 %240, 12, !dbg !1937
  %241 = freeze i32 %lshr387, !dbg !1937
  %and388 = and i32 %241, 63, !dbg !1937
  %or389 = or i32 128, %and388, !dbg !1938
  %trunc390 = trunc i32 %or389 to i8, !dbg !1938
  %242 = load ptr, ptr %self, align 8
  %243 = call i64 @std.io.Formatter.out(ptr %retparam391, ptr %242, i8 zeroext %trunc390), !dbg !1939
  %not_err392 = icmp eq i64 %243, 0, !dbg !1939
  %244 = call i1 @llvm.expect.i1(i1 %not_err392, i1 true), !dbg !1939
  br i1 %244, label %after_check394, label %assign_optional393, !dbg !1939

assign_optional393:                               ; preds = %noerr_block385
  store i64 %243, ptr %error_var386, align 8, !dbg !1939
  br label %guard_block395, !dbg !1939

after_check394:                                   ; preds = %noerr_block385
  br label %noerr_block396, !dbg !1939

guard_block395:                                   ; preds = %assign_optional393
  %245 = load i64, ptr %error_var386, align 8, !dbg !1939
  ret i64 %245, !dbg !1939

noerr_block396:                                   ; preds = %after_check394
  %246 = load i32, ptr %c, align 4, !dbg !1940
  %lshr398 = lshr i32 %246, 6, !dbg !1940
  %247 = freeze i32 %lshr398, !dbg !1940
  %and399 = and i32 %247, 63, !dbg !1940
  %or400 = or i32 128, %and399, !dbg !1941
  %trunc401 = trunc i32 %or400 to i8, !dbg !1941
  %248 = load ptr, ptr %self, align 8
  %249 = call i64 @std.io.Formatter.out(ptr %retparam402, ptr %248, i8 zeroext %trunc401), !dbg !1942
  %not_err403 = icmp eq i64 %249, 0, !dbg !1942
  %250 = call i1 @llvm.expect.i1(i1 %not_err403, i1 true), !dbg !1942
  br i1 %250, label %after_check405, label %assign_optional404, !dbg !1942

assign_optional404:                               ; preds = %noerr_block396
  store i64 %249, ptr %error_var397, align 8, !dbg !1942
  br label %guard_block406, !dbg !1942

after_check405:                                   ; preds = %noerr_block396
  br label %noerr_block407, !dbg !1942

guard_block406:                                   ; preds = %assign_optional404
  %251 = load i64, ptr %error_var397, align 8, !dbg !1942
  ret i64 %251, !dbg !1942

noerr_block407:                                   ; preds = %after_check405
  %252 = load i32, ptr %c, align 4, !dbg !1943
  %and409 = and i32 %252, 63, !dbg !1943
  %or410 = or i32 128, %and409, !dbg !1944
  %trunc411 = trunc i32 %or410 to i8, !dbg !1944
  %253 = load ptr, ptr %self, align 8
  %254 = call i64 @std.io.Formatter.out(ptr %retparam412, ptr %253, i8 zeroext %trunc411), !dbg !1945
  %not_err413 = icmp eq i64 %254, 0, !dbg !1945
  %255 = call i1 @llvm.expect.i1(i1 %not_err413, i1 true), !dbg !1945
  br i1 %255, label %after_check415, label %assign_optional414, !dbg !1945

assign_optional414:                               ; preds = %noerr_block407
  store i64 %254, ptr %error_var408, align 8, !dbg !1945
  br label %guard_block416, !dbg !1945

after_check415:                                   ; preds = %noerr_block407
  br label %noerr_block417, !dbg !1945

guard_block416:                                   ; preds = %assign_optional414
  %256 = load i64, ptr %error_var408, align 8, !dbg !1945
  ret i64 %256, !dbg !1945

noerr_block417:                                   ; preds = %after_check415
  br label %switch.exit, !dbg !1945

switch.exit:                                      ; preds = %noerr_block417, %noerr_block373, %noerr_block338, %noerr_block317
  %257 = load i64, ptr %len, align 8, !dbg !1946
  %258 = load i32, ptr %l, align 4, !dbg !1947
  %zext419 = zext i32 %258 to i64, !dbg !1947
  %259 = load ptr, ptr %self, align 8
  %260 = call i64 @std.io.Formatter.adjust(ptr %retparam420, ptr %259, i64 %zext419), !dbg !1948
  %not_err421 = icmp eq i64 %260, 0, !dbg !1948
  %261 = call i1 @llvm.expect.i1(i1 %not_err421, i1 true), !dbg !1948
  br i1 %261, label %after_check423, label %assign_optional422, !dbg !1948

assign_optional422:                               ; preds = %switch.exit
  store i64 %260, ptr %error_var418, align 8, !dbg !1948
  br label %guard_block424, !dbg !1948

after_check423:                                   ; preds = %switch.exit
  br label %noerr_block425, !dbg !1948

guard_block424:                                   ; preds = %assign_optional422
  %262 = load i64, ptr %error_var418, align 8, !dbg !1948
  ret i64 %262, !dbg !1948

noerr_block425:                                   ; preds = %after_check423
  %263 = load i64, ptr %retparam420, align 8, !dbg !1948
  %add426 = add i64 %257, %263, !dbg !1946
  store i64 %add426, ptr %len, align 8, !dbg !1946
  %264 = load i64, ptr %len, align 8, !dbg !1949
  store i64 %264, ptr %0, align 8, !dbg !1949
  ret i64 0, !dbg !1949

panic:                                            ; preds = %entry
  %265 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1729
  call void %265(ptr @.panic_msg, i64 62, ptr @.file.44, i64 20, ptr @.func.94, i64 8, i32 619) #5, !dbg !1729
  unreachable, !dbg !1729

panic18:                                          ; preds = %switch.case
  %266 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1776
  call void %266(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 31) #5, !dbg !1776
  unreachable, !dbg !1776

panic31:                                          ; preds = %switch.case29
  %267 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1787
  call void %267(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 35) #5, !dbg !1787
  unreachable, !dbg !1787

panic33:                                          ; preds = %checkok32
  store i64 2, ptr %taddr, align 8
  %268 = insertvalue %any undef, ptr %taddr, 0
  %269 = insertvalue %any %268, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %52, ptr %taddr34, align 8
  %270 = insertvalue %any undef, ptr %taddr34, 0
  %271 = insertvalue %any %270, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %269, ptr %varargslots, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %271, ptr %ptradd35, align 16
  %272 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %272, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 35, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1787
  unreachable, !dbg !1787

panic61:                                          ; preds = %switch.case59
  %273 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1802
  call void %273(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 40) #5, !dbg !1802
  unreachable, !dbg !1802

panic63:                                          ; preds = %checkok62
  store i64 4, ptr %taddr64, align 8
  %274 = insertvalue %any undef, ptr %taddr64, 0
  %275 = insertvalue %any %274, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %71, ptr %taddr65, align 8
  %276 = insertvalue %any undef, ptr %taddr65, 0
  %277 = insertvalue %any %276, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %275, ptr %varargslots66, align 16
  %ptradd67 = getelementptr inbounds i8, ptr %varargslots66, i64 16
  store %any %277, ptr %ptradd67, align 16
  %278 = insertvalue %"any[]" undef, ptr %varargslots66, 0
  %"$$temp68" = insertvalue %"any[]" %278, i64 2, 1
  store %"any[]" %"$$temp68", ptr %indirectarg69, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 40, ptr byval(%"any[]") align 8 %indirectarg69) #5, !dbg !1802
  unreachable, !dbg !1802

panic98:                                          ; preds = %switch.case95
  %279 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1817
  call void %279(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 45) #5, !dbg !1817
  unreachable, !dbg !1817

panic100:                                         ; preds = %checkok99
  store i64 8, ptr %taddr101, align 8
  %280 = insertvalue %any undef, ptr %taddr101, 0
  %281 = insertvalue %any %280, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %90, ptr %taddr102, align 8
  %282 = insertvalue %any undef, ptr %taddr102, 0
  %283 = insertvalue %any %282, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %281, ptr %varargslots103, align 16
  %ptradd104 = getelementptr inbounds i8, ptr %varargslots103, i64 16
  store %any %283, ptr %ptradd104, align 16
  %284 = insertvalue %"any[]" undef, ptr %varargslots103, 0
  %"$$temp105" = insertvalue %"any[]" %284, i64 2, 1
  store %"any[]" %"$$temp105", ptr %indirectarg106, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 45, ptr byval(%"any[]") align 8 %indirectarg106) #5, !dbg !1817
  unreachable, !dbg !1817

panic137:                                         ; preds = %switch.case134
  %285 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1833
  call void %285(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 50) #5, !dbg !1833
  unreachable, !dbg !1833

panic139:                                         ; preds = %checkok138
  store i64 16, ptr %taddr140, align 8
  %286 = insertvalue %any undef, ptr %taddr140, 0
  %287 = insertvalue %any %286, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %109, ptr %taddr141, align 8
  %288 = insertvalue %any undef, ptr %taddr141, 0
  %289 = insertvalue %any %288, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %287, ptr %varargslots142, align 16
  %ptradd143 = getelementptr inbounds i8, ptr %varargslots142, i64 16
  store %any %289, ptr %ptradd143, align 16
  %290 = insertvalue %"any[]" undef, ptr %varargslots142, 0
  %"$$temp144" = insertvalue %"any[]" %290, i64 2, 1
  store %"any[]" %"$$temp144", ptr %indirectarg145, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 50, ptr byval(%"any[]") align 8 %indirectarg145) #5, !dbg !1833
  unreachable, !dbg !1833

panic177:                                         ; preds = %switch.case174
  %291 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1848
  call void %291(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 55) #5, !dbg !1848
  unreachable, !dbg !1848

panic194:                                         ; preds = %switch.case191
  %292 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1859
  call void %292(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 59) #5, !dbg !1859
  unreachable, !dbg !1859

panic196:                                         ; preds = %checkok195
  store i64 2, ptr %taddr197, align 8
  %293 = insertvalue %any undef, ptr %taddr197, 0
  %294 = insertvalue %any %293, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %138, ptr %taddr198, align 8
  %295 = insertvalue %any undef, ptr %taddr198, 0
  %296 = insertvalue %any %295, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %294, ptr %varargslots199, align 16
  %ptradd200 = getelementptr inbounds i8, ptr %varargslots199, i64 16
  store %any %296, ptr %ptradd200, align 16
  %297 = insertvalue %"any[]" undef, ptr %varargslots199, 0
  %"$$temp201" = insertvalue %"any[]" %297, i64 2, 1
  store %"any[]" %"$$temp201", ptr %indirectarg202, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 59, ptr byval(%"any[]") align 8 %indirectarg202) #5, !dbg !1859
  unreachable, !dbg !1859

panic224:                                         ; preds = %switch.case221
  %298 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1871
  call void %298(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 63) #5, !dbg !1871
  unreachable, !dbg !1871

panic226:                                         ; preds = %checkok225
  store i64 4, ptr %taddr227, align 8
  %299 = insertvalue %any undef, ptr %taddr227, 0
  %300 = insertvalue %any %299, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %154, ptr %taddr228, align 8
  %301 = insertvalue %any undef, ptr %taddr228, 0
  %302 = insertvalue %any %301, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %300, ptr %varargslots229, align 16
  %ptradd230 = getelementptr inbounds i8, ptr %varargslots229, i64 16
  store %any %302, ptr %ptradd230, align 16
  %303 = insertvalue %"any[]" undef, ptr %varargslots229, 0
  %"$$temp231" = insertvalue %"any[]" %303, i64 2, 1
  store %"any[]" %"$$temp231", ptr %indirectarg232, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 63, ptr byval(%"any[]") align 8 %indirectarg232) #5, !dbg !1871
  unreachable, !dbg !1871

panic251:                                         ; preds = %switch.case248
  %304 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1883
  call void %304(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 67) #5, !dbg !1883
  unreachable, !dbg !1883

panic253:                                         ; preds = %checkok252
  store i64 8, ptr %taddr254, align 8
  %305 = insertvalue %any undef, ptr %taddr254, 0
  %306 = insertvalue %any %305, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %170, ptr %taddr255, align 8
  %307 = insertvalue %any undef, ptr %taddr255, 0
  %308 = insertvalue %any %307, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %306, ptr %varargslots256, align 16
  %ptradd257 = getelementptr inbounds i8, ptr %varargslots256, i64 16
  store %any %308, ptr %ptradd257, align 16
  %309 = insertvalue %"any[]" undef, ptr %varargslots256, 0
  %"$$temp258" = insertvalue %"any[]" %309, i64 2, 1
  store %"any[]" %"$$temp258", ptr %indirectarg259, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 67, ptr byval(%"any[]") align 8 %indirectarg259) #5, !dbg !1883
  unreachable, !dbg !1883

panic281:                                         ; preds = %switch.case278
  %310 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1895
  call void %310(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 71) #5, !dbg !1895
  unreachable, !dbg !1895

panic283:                                         ; preds = %checkok282
  store i64 16, ptr %taddr284, align 8
  %311 = insertvalue %any undef, ptr %taddr284, 0
  %312 = insertvalue %any %311, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %186, ptr %taddr285, align 8
  %313 = insertvalue %any undef, ptr %taddr285, 0
  %314 = insertvalue %any %313, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %312, ptr %varargslots286, align 16
  %ptradd287 = getelementptr inbounds i8, ptr %varargslots286, i64 16
  store %any %314, ptr %ptradd287, align 16
  %315 = insertvalue %"any[]" undef, ptr %varargslots286, 0
  %"$$temp288" = insertvalue %"any[]" %315, i64 2, 1
  store %"any[]" %"$$temp288", ptr %indirectarg289, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.94, i64 8, i32 71, ptr byval(%"any[]") align 8 %indirectarg289) #5, !dbg !1895
  unreachable, !dbg !1895
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_reverse(ptr %0, ptr %1, ptr %2, i64 %3) #0 !dbg !1950 {
entry:
  %self = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %buffer_start_idx = alloca i64, align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var10 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %retparam17 = alloca i64, align 8
  %error_var24 = alloca i64, align 8
  %retparam25 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !1951
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1951
  br i1 %5, label %panic, label %checkok, !dbg !1951

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1952, !DIExpression(), !1953)
  store ptr %2, ptr %buf, align 8
  %ptradd = getelementptr inbounds i8, ptr %buf, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %buf, !1954, !DIExpression(), !1955)
    #dbg_declare(ptr %n, !1956, !DIExpression(), !1957)
  store i64 0, ptr %n, align 8, !dbg !1957
    #dbg_declare(ptr %buffer_start_idx, !1958, !DIExpression(), !1959)
  %6 = load ptr, ptr %self, align 8, !dbg !1960
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1960
  %ptradd2 = getelementptr inbounds i8, ptr %ptradd1, i64 16, !dbg !1960
  %7 = load i64, ptr %ptradd2, align 8, !dbg !1960
  store i64 %7, ptr %buffer_start_idx, align 8, !dbg !1960
    #dbg_declare(ptr %len, !1961, !DIExpression(), !1962)
  %ptradd3 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1963
  %8 = load i64, ptr %ptradd3, align 8, !dbg !1963
  store i64 %8, ptr %len, align 8, !dbg !1963
  %9 = load ptr, ptr %self, align 8, !dbg !1964
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1964
  %10 = load i32, ptr %ptradd4, align 8, !dbg !1964
  %11 = and i32 1, %10, !dbg !1964
  %trunc = trunc i32 %11 to i8, !dbg !1964
  %12 = trunc i8 %trunc to i1, !dbg !1964
  %not = xor i1 %12, true, !dbg !1964
  br i1 %not, label %and.rhs, label %and.phi, !dbg !1964

and.rhs:                                          ; preds = %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !1965
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !1965
  %14 = load i32, ptr %ptradd5, align 8, !dbg !1965
  %lshrl = lshr i32 %14, 1, !dbg !1965
  %15 = and i32 1, %lshrl, !dbg !1965
  %trunc6 = trunc i32 %15 to i8, !dbg !1965
  %16 = trunc i8 %trunc6 to i1, !dbg !1965
  %not7 = xor i1 %16, true, !dbg !1965
  br label %and.phi, !dbg !1965

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %not7, %and.rhs ], !dbg !1965
  br i1 %val, label %if.then, label %if.exit, !dbg !1965

if.then:                                          ; preds = %and.phi
  %17 = load i64, ptr %n, align 8, !dbg !1966
  %18 = load ptr, ptr %self, align 8, !dbg !1968
  %ptradd8 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !1968
  %ptradd9 = getelementptr inbounds i8, ptr %ptradd8, i64 4, !dbg !1968
  %19 = load i32, ptr %ptradd9, align 4, !dbg !1968
  %zext = zext i32 %19 to i64, !dbg !1968
  %20 = load i64, ptr %len, align 8, !dbg !1969
  %21 = load ptr, ptr %self, align 8
  %22 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %21, i8 zeroext 32, i64 %zext, i64 %20) #6, !dbg !1970
  %not_err = icmp eq i64 %22, 0, !dbg !1970
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1970
  br i1 %23, label %after_check, label %assign_optional, !dbg !1970

assign_optional:                                  ; preds = %if.then
  store i64 %22, ptr %error_var, align 8, !dbg !1970
  br label %guard_block, !dbg !1970

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !1970

guard_block:                                      ; preds = %assign_optional
  %24 = load i64, ptr %error_var, align 8, !dbg !1970
  ret i64 %24, !dbg !1970

noerr_block:                                      ; preds = %after_check
  %25 = load i64, ptr %retparam, align 8, !dbg !1970
  %add = add i64 %17, %25, !dbg !1966
  store i64 %add, ptr %n, align 8, !dbg !1966
  br label %if.exit, !dbg !1966

if.exit:                                          ; preds = %noerr_block, %and.phi
  br label %loop.cond, !dbg !1971

loop.cond:                                        ; preds = %noerr_block22, %if.exit
  %26 = load i64, ptr %len, align 8, !dbg !1972
  %i2b = icmp ne i64 %26, 0, !dbg !1972
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1972

loop.body:                                        ; preds = %loop.cond
  %27 = load i64, ptr %n, align 8, !dbg !1974
  %ptradd11 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !1975
  %28 = load i64, ptr %ptradd11, align 8, !dbg !1975
  %29 = load ptr, ptr %buf, align 8, !dbg !1975
  %30 = load i64, ptr %len, align 8, !dbg !1976
  %sub = sub i64 %30, 1, !dbg !1976
  store i64 %sub, ptr %len, align 8, !dbg !1976
  %ge = icmp uge i64 %sub, %28, !dbg !1976
  %31 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1976
  br i1 %31, label %panic12, label %checkok15, !dbg !1976

checkok15:                                        ; preds = %loop.body
  %ptradd16 = getelementptr inbounds i8, ptr %29, i64 %sub, !dbg !1977
  %32 = load ptr, ptr %self, align 8
  %33 = load i8, ptr %ptradd16, align 1
  %34 = call i64 @std.io.Formatter.out(ptr %retparam17, ptr %32, i8 zeroext %33), !dbg !1978
  %not_err18 = icmp eq i64 %34, 0, !dbg !1978
  %35 = call i1 @llvm.expect.i1(i1 %not_err18, i1 true), !dbg !1978
  br i1 %35, label %after_check20, label %assign_optional19, !dbg !1978

assign_optional19:                                ; preds = %checkok15
  store i64 %34, ptr %error_var10, align 8, !dbg !1978
  br label %guard_block21, !dbg !1978

after_check20:                                    ; preds = %checkok15
  br label %noerr_block22, !dbg !1978

guard_block21:                                    ; preds = %assign_optional19
  %36 = load i64, ptr %error_var10, align 8, !dbg !1978
  ret i64 %36, !dbg !1978

noerr_block22:                                    ; preds = %after_check20
  %37 = load i64, ptr %retparam17, align 8, !dbg !1978
  %add23 = add i64 %27, %37, !dbg !1974
  store i64 %add23, ptr %n, align 8, !dbg !1974
  br label %loop.cond, !dbg !1974

loop.exit:                                        ; preds = %loop.cond
  %38 = load i64, ptr %n, align 8, !dbg !1979
  %39 = load ptr, ptr %self, align 8
  %40 = load i64, ptr %n, align 8
  %41 = call i64 @std.io.Formatter.adjust(ptr %retparam25, ptr %39, i64 %40), !dbg !1980
  %not_err26 = icmp eq i64 %41, 0, !dbg !1980
  %42 = call i1 @llvm.expect.i1(i1 %not_err26, i1 true), !dbg !1980
  br i1 %42, label %after_check28, label %assign_optional27, !dbg !1980

assign_optional27:                                ; preds = %loop.exit
  store i64 %41, ptr %error_var24, align 8, !dbg !1980
  br label %guard_block29, !dbg !1980

after_check28:                                    ; preds = %loop.exit
  br label %noerr_block30, !dbg !1980

guard_block29:                                    ; preds = %assign_optional27
  %43 = load i64, ptr %error_var24, align 8, !dbg !1980
  ret i64 %43, !dbg !1980

noerr_block30:                                    ; preds = %after_check28
  %44 = load i64, ptr %retparam25, align 8, !dbg !1980
  %add31 = add i64 %38, %44, !dbg !1979
  store i64 %add31, ptr %n, align 8, !dbg !1979
  %45 = load i64, ptr %n, align 8, !dbg !1981
  store i64 %45, ptr %0, align 8, !dbg !1981
  ret i64 0, !dbg !1981

panic:                                            ; preds = %entry
  %46 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1953
  call void %46(ptr @.panic_msg, i64 62, ptr @.file.44, i64 20, ptr @.func.99, i64 11, i32 653) #5, !dbg !1953
  unreachable, !dbg !1953

panic12:                                          ; preds = %loop.body
  store i64 %28, ptr %taddr, align 8
  %47 = insertvalue %any undef, ptr %taddr, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr13, align 8
  %49 = insertvalue %any undef, ptr %taddr13, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %48, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %50, ptr %ptradd14, align 16
  %51 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %51, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.44, i64 20, ptr @.func.99, i64 11, i32 664, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1977
  unreachable, !dbg !1977
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.print_hex_chars(ptr %0, ptr %1, ptr %2, i64 %3, i8 zeroext %4) #0 comdat !dbg !1982 {
entry:
  %f = alloca ptr, align 8
  %out = alloca %"char[]", align 8
  %uppercase = alloca i8, align 1
  %past_10 = alloca i8, align 1
  %len = alloca i64, align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %digit = alloca i8, align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var15 = alloca i64, align 8
  %retparam26 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %f, align 8
    #dbg_declare(ptr %f, !1985, !DIExpression(), !1986)
  store ptr %2, ptr %out, align 8
  %ptradd = getelementptr inbounds i8, ptr %out, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %out, !1987, !DIExpression(), !1988)
  store i8 %4, ptr %uppercase, align 1
    #dbg_declare(ptr %uppercase, !1989, !DIExpression(), !1990)
    #dbg_declare(ptr %past_10, !1991, !DIExpression(), !1992)
  %5 = load i8, ptr %uppercase, align 1, !dbg !1993
  %6 = trunc i8 %5 to i1, !dbg !1993
  %ternary = select i1 %6, i8 65, i8 97, !dbg !1994
  %zext = zext i8 %ternary to i32, !dbg !1994
  %sub = sub i32 %zext, 10, !dbg !1993
  %trunc = trunc i32 %sub to i8, !dbg !1993
  store i8 %trunc, ptr %past_10, align 1, !dbg !1993
    #dbg_declare(ptr %len, !1995, !DIExpression(), !1996)
  store i64 0, ptr %len, align 8, !dbg !1997
  %ptradd1 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !1998
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1998
    #dbg_declare(ptr %.anon, !2000, !DIExpression(), !1998)
  store i64 0, ptr %.anon, align 8, !dbg !1998
  br label %loop.cond, !dbg !1998

loop.cond:                                        ; preds = %noerr_block31, %entry
  %8 = load i64, ptr %.anon, align 8, !dbg !1998
  %lt = icmp ult i64 %8, %7, !dbg !1998
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1998

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !2001, !DIExpression(), !2003)
  %ptradd2 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !2004
  %9 = load i64, ptr %ptradd2, align 8, !dbg !2004
  %10 = load ptr, ptr %out, align 8, !dbg !2004
  %11 = load i64, ptr %.anon, align 8, !dbg !2004
  %ge = icmp uge i64 %11, %9, !dbg !2004
  %12 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2004
  br i1 %12, label %panic, label %checkok, !dbg !2004

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %10, i64 %11, !dbg !2004
  %13 = load i8, ptr %ptradd5, align 1, !dbg !2004
  store i8 %13, ptr %c, align 1, !dbg !2004
    #dbg_declare(ptr %digit, !2005, !DIExpression(), !2007)
  %14 = load i8, ptr %c, align 1, !dbg !2008
  %zext6 = zext i8 %14 to i32, !dbg !2008
  %lshr = lshr i32 %zext6, 4, !dbg !2008
  %15 = freeze i32 %lshr, !dbg !2008
  %trunc7 = trunc i32 %15 to i8, !dbg !2008
  store i8 %trunc7, ptr %digit, align 1, !dbg !2008
  %16 = load i8, ptr %digit, align 1, !dbg !2009
  %zext8 = zext i8 %16 to i32, !dbg !2009
  %17 = load i8, ptr %digit, align 1, !dbg !2010
  %zext9 = zext i8 %17 to i32, !dbg !2010
  %gt = icmp ugt i32 10, %zext9, !dbg !2010
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !2010

cond.lhs:                                         ; preds = %checkok
  br label %cond.phi, !dbg !2011

cond.rhs:                                         ; preds = %checkok
  %18 = load i8, ptr %past_10, align 1, !dbg !2012
  br label %cond.phi, !dbg !2012

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i8 [ 48, %cond.lhs ], [ %18, %cond.rhs ], !dbg !2012
  %zext10 = zext i8 %val to i32, !dbg !2012
  %add = add i32 %zext8, %zext10, !dbg !2009
  %trunc11 = trunc i32 %add to i8, !dbg !2009
  %19 = load ptr, ptr %f, align 8
  %20 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %19, i8 zeroext %trunc11), !dbg !2013
  %not_err = icmp eq i64 %20, 0, !dbg !2013
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2013
  br i1 %21, label %after_check, label %assign_optional, !dbg !2013

assign_optional:                                  ; preds = %cond.phi
  store i64 %20, ptr %error_var, align 8, !dbg !2013
  br label %guard_block, !dbg !2013

after_check:                                      ; preds = %cond.phi
  br label %noerr_block, !dbg !2013

guard_block:                                      ; preds = %assign_optional
  %22 = load i64, ptr %error_var, align 8, !dbg !2013
  ret i64 %22, !dbg !2013

noerr_block:                                      ; preds = %after_check
  %23 = load i64, ptr %len, align 8, !dbg !2014
  %add12 = add i64 %23, 1, !dbg !2014
  store i64 %add12, ptr %len, align 8, !dbg !2014
  %24 = load i8, ptr %c, align 1, !dbg !2015
  %zext13 = zext i8 %24 to i32, !dbg !2015
  %and = and i32 %zext13, 15, !dbg !2015
  %trunc14 = trunc i32 %and to i8, !dbg !2015
  store i8 %trunc14, ptr %digit, align 1, !dbg !2015
  %25 = load i8, ptr %digit, align 1, !dbg !2016
  %zext16 = zext i8 %25 to i32, !dbg !2016
  %26 = load i8, ptr %digit, align 1, !dbg !2017
  %zext17 = zext i8 %26 to i32, !dbg !2017
  %gt18 = icmp ugt i32 10, %zext17, !dbg !2017
  br i1 %gt18, label %cond.lhs19, label %cond.rhs20, !dbg !2017

cond.lhs19:                                       ; preds = %noerr_block
  br label %cond.phi21, !dbg !2018

cond.rhs20:                                       ; preds = %noerr_block
  %27 = load i8, ptr %past_10, align 1, !dbg !2019
  br label %cond.phi21, !dbg !2019

cond.phi21:                                       ; preds = %cond.rhs20, %cond.lhs19
  %val22 = phi i8 [ 48, %cond.lhs19 ], [ %27, %cond.rhs20 ], !dbg !2019
  %zext23 = zext i8 %val22 to i32, !dbg !2019
  %add24 = add i32 %zext16, %zext23, !dbg !2016
  %trunc25 = trunc i32 %add24 to i8, !dbg !2016
  %28 = load ptr, ptr %f, align 8
  %29 = call i64 @std.io.Formatter.out(ptr %retparam26, ptr %28, i8 zeroext %trunc25), !dbg !2020
  %not_err27 = icmp eq i64 %29, 0, !dbg !2020
  %30 = call i1 @llvm.expect.i1(i1 %not_err27, i1 true), !dbg !2020
  br i1 %30, label %after_check29, label %assign_optional28, !dbg !2020

assign_optional28:                                ; preds = %cond.phi21
  store i64 %29, ptr %error_var15, align 8, !dbg !2020
  br label %guard_block30, !dbg !2020

after_check29:                                    ; preds = %cond.phi21
  br label %noerr_block31, !dbg !2020

guard_block30:                                    ; preds = %assign_optional28
  %31 = load i64, ptr %error_var15, align 8, !dbg !2020
  ret i64 %31, !dbg !2020

noerr_block31:                                    ; preds = %after_check29
  %32 = load i64, ptr %len, align 8, !dbg !2021
  %add32 = add i64 %32, 1, !dbg !2021
  store i64 %add32, ptr %len, align 8, !dbg !2021
  %33 = load i64, ptr %.anon, align 8, !dbg !1998
  %addnuw = add nuw i64 %33, 1, !dbg !1998
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1998
  br label %loop.cond, !dbg !1998

loop.exit:                                        ; preds = %loop.cond
  %34 = load i64, ptr %len, align 8, !dbg !2022
  store i64 %34, ptr %0, align 8, !dbg !2022
  ret i64 0, !dbg !2022

panic:                                            ; preds = %loop.body
  store i64 %9, ptr %taddr, align 8
  %35 = insertvalue %any undef, ptr %taddr, 0
  %36 = insertvalue %any %35, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr3, align 8
  %37 = insertvalue %any undef, ptr %taddr3, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %36, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %38, ptr %ptradd4, align 16
  %39 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %39, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.44, i64 20, ptr @.func.45, i64 15, i32 13, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2004
  unreachable, !dbg !2004
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.int_from_any(ptr %0, i64 %1, ptr %2, ptr %3) #0 !dbg !2023 {
entry:
  %arg = alloca %any, align 8
  %is_neg = alloca ptr, align 8
  %switch = alloca i8, align 1
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr10 = alloca i64, align 8
  %self = alloca ptr, align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %retparam = alloca i128, align 16
  %taddr51 = alloca %any, align 8
  %switch57 = alloca i64, align 8
  %reterr62 = alloca i64, align 8
  %val = alloca i32, align 4
  %reterr77 = alloca i64, align 8
  %val92 = alloca i32, align 4
  %taddr97 = alloca i64, align 8
  %taddr98 = alloca i64, align 8
  %varargslots99 = alloca [2 x %any], align 16
  %indirectarg102 = alloca %"any[]", align 8
  %reterr105 = alloca i64, align 8
  %val126 = alloca i32, align 4
  %taddr131 = alloca i64, align 8
  %taddr132 = alloca i64, align 8
  %varargslots133 = alloca [2 x %any], align 16
  %indirectarg136 = alloca %"any[]", align 8
  %reterr138 = alloca i64, align 8
  %val159 = alloca i64, align 8
  %taddr164 = alloca i64, align 8
  %taddr165 = alloca i64, align 8
  %varargslots166 = alloca [2 x %any], align 16
  %indirectarg169 = alloca %"any[]", align 8
  %reterr171 = alloca i64, align 8
  %val192 = alloca i128, align 16
  %taddr197 = alloca i64, align 8
  %taddr198 = alloca i64, align 8
  %varargslots199 = alloca [2 x %any], align 16
  %indirectarg202 = alloca %"any[]", align 8
  %reterr204 = alloca i64, align 8
  %reterr223 = alloca i64, align 8
  %reterr236 = alloca i64, align 8
  %taddr241 = alloca i64, align 8
  %taddr242 = alloca i64, align 8
  %varargslots243 = alloca [2 x %any], align 16
  %indirectarg246 = alloca %"any[]", align 8
  %reterr257 = alloca i64, align 8
  %taddr262 = alloca i64, align 8
  %taddr263 = alloca i64, align 8
  %varargslots264 = alloca [2 x %any], align 16
  %indirectarg267 = alloca %"any[]", align 8
  %reterr278 = alloca i64, align 8
  %taddr283 = alloca i64, align 8
  %taddr284 = alloca i64, align 8
  %varargslots285 = alloca [2 x %any], align 16
  %indirectarg288 = alloca %"any[]", align 8
  %reterr299 = alloca i64, align 8
  %taddr304 = alloca i64, align 8
  %taddr305 = alloca i64, align 8
  %varargslots306 = alloca [2 x %any], align 16
  %indirectarg309 = alloca %"any[]", align 8
  %f = alloca float, align 4
  %taddr323 = alloca i64, align 8
  %taddr324 = alloca i64, align 8
  %varargslots325 = alloca [2 x %any], align 16
  %indirectarg328 = alloca %"any[]", align 8
  %reterr330 = alloca i64, align 8
  %d = alloca double, align 8
  %taddr351 = alloca i64, align 8
  %taddr352 = alloca i64, align 8
  %varargslots353 = alloca [2 x %any], align 16
  %indirectarg356 = alloca %"any[]", align 8
  %reterr358 = alloca i64, align 8
  store i64 %1, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %arg, !2028, !DIExpression(), !2029)
  store ptr %3, ptr %is_neg, align 8
    #dbg_declare(ptr %is_neg, !2030, !DIExpression(), !2031)
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2032
  %4 = load i64, ptr %ptradd1, align 8, !dbg !2032
  %"introspect*" = inttoptr i64 %4 to ptr, !dbg !2032
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !2032
  store i8 %typeid.kind, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %entry
  %5 = load i8, ptr %switch, align 1
  switch i8 %5, label %switch.default [
    i8 12, label %switch.case
    i8 18, label %switch.case
    i8 17, label %switch.case9
  ]

switch.case:                                      ; preds = %switch.entry, %switch.entry
  %6 = load ptr, ptr %is_neg, align 8, !dbg !2034
  %checknull = icmp eq ptr %6, null, !dbg !2034
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2034
  br i1 %7, label %panic, label %checkok, !dbg !2034

checkok:                                          ; preds = %switch.case
  store i8 0, ptr %6, align 1, !dbg !2036
  %8 = load ptr, ptr %arg, align 8, !dbg !2037
  %checknull2 = icmp eq ptr %8, null, !dbg !2037
  %9 = call i1 @llvm.expect.i1(i1 %checknull2, i1 false), !dbg !2037
  br i1 %9, label %panic3, label %checkok4, !dbg !2037

checkok4:                                         ; preds = %checkok
  %10 = ptrtoint ptr %8 to i64, !dbg !2038
  %11 = urem i64 %10, 8, !dbg !2038
  %12 = icmp ne i64 %11, 0, !dbg !2038
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false), !dbg !2038
  br i1 %13, label %panic5, label %checkok8, !dbg !2038

checkok8:                                         ; preds = %checkok4
  %14 = load ptr, ptr %8, align 8, !dbg !2038
  %ptrxi = ptrtoint ptr %14 to i64, !dbg !2038
  %zext = zext i64 %ptrxi to i128, !dbg !2038
  store i128 %zext, ptr %0, align 16, !dbg !2038
  ret i64 0, !dbg !2038

switch.case9:                                     ; preds = %switch.entry
  store ptr %arg, ptr %self, align 8
  %15 = load ptr, ptr %self, align 8, !dbg !2039
  %neq = icmp ne ptr %15, null, !dbg !2039
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2039

assert_fail:                                      ; preds = %switch.case9
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2039
  call void %16(ptr @.panic_msg.48, i64 32, ptr @.file.15, i64 10, ptr @.func.47, i64 12, i32 239) #5, !dbg !2039
  unreachable, !dbg !2039

assert_ok:                                        ; preds = %switch.case9
  %17 = load ptr, ptr %self, align 8, !dbg !2044
  %checknull11 = icmp eq ptr %17, null, !dbg !2044
  %18 = call i1 @llvm.expect.i1(i1 %checknull11, i1 false), !dbg !2044
  br i1 %18, label %panic12, label %checkok13, !dbg !2044

checkok13:                                        ; preds = %assert_ok
  %19 = ptrtoint ptr %17 to i64, !dbg !2044
  %20 = urem i64 %19, 8, !dbg !2044
  %21 = icmp ne i64 %20, 0, !dbg !2044
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false), !dbg !2044
  br i1 %22, label %panic14, label %checkok21, !dbg !2044

checkok21:                                        ; preds = %checkok13
  %23 = load ptr, ptr %17, align 8, !dbg !2044
  %24 = load ptr, ptr %self, align 8, !dbg !2045
  %checknull22 = icmp eq ptr %24, null, !dbg !2045
  %25 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !2045
  br i1 %25, label %panic23, label %checkok24, !dbg !2045

checkok24:                                        ; preds = %checkok21
  %26 = ptrtoint ptr %24 to i64, !dbg !2045
  %27 = urem i64 %26, 8, !dbg !2045
  %28 = icmp ne i64 %27, 0, !dbg !2045
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false), !dbg !2045
  br i1 %29, label %panic25, label %checkok32, !dbg !2045

checkok32:                                        ; preds = %checkok24
  %ptradd33 = getelementptr inbounds i8, ptr %24, i64 8, !dbg !2045
  %30 = load i64, ptr %ptradd33, align 8, !dbg !2045
  %"introspect*34" = inttoptr i64 %30 to ptr, !dbg !2045
  %typeid.kind35 = load i8, ptr %"introspect*34", align 8, !dbg !2045
  %eq = icmp eq i8 %typeid.kind35, 14, !dbg !2045
  br i1 %eq, label %check_type_ok, label %check_next, !dbg !2045

check_next:                                       ; preds = %checkok32
  %eq36 = icmp eq i8 %typeid.kind35, 18, !dbg !2045
  br i1 %eq36, label %check_type_ok, label %check_next37, !dbg !2045

check_next37:                                     ; preds = %check_next
  %eq38 = icmp eq i8 %typeid.kind35, 16, !dbg !2045
  br i1 %eq38, label %check_type_ok, label %check_next39, !dbg !2045

check_next39:                                     ; preds = %check_next37
  %eq40 = icmp eq i8 %typeid.kind35, 8, !dbg !2045
  br i1 %eq40, label %check_type_ok, label %check_next41, !dbg !2045

check_next41:                                     ; preds = %check_next39
  %eq42 = icmp eq i8 %typeid.kind35, 15, !dbg !2045
  br i1 %eq42, label %check_type_ok, label %check_next43, !dbg !2045

check_next43:                                     ; preds = %check_next41
  %eq44 = icmp eq i8 %typeid.kind35, 17, !dbg !2045
  br i1 %eq44, label %check_type_ok, label %check_next45, !dbg !2045

check_next45:                                     ; preds = %check_next43
  %eq46 = icmp eq i8 %typeid.kind35, 13, !dbg !2045
  br i1 %eq46, label %check_type_ok, label %check_next47, !dbg !2045

check_next47:                                     ; preds = %check_next45
  %eq48 = icmp eq i8 %typeid.kind35, 11, !dbg !2045
  br i1 %eq48, label %check_type_ok, label %check_next49, !dbg !2045

check_next49:                                     ; preds = %check_next47
  %31 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2045
  call void %31(ptr @.panic_msg.49, i64 49, ptr @.file.15, i64 10, ptr @.func.47, i64 12, i32 241) #5, !dbg !2045
  unreachable, !dbg !2045

check_type_ok:                                    ; preds = %check_next47, %check_next45, %check_next43, %check_next41, %check_next39, %check_next37, %check_next, %checkok32
  %ptradd50 = getelementptr inbounds i8, ptr %"introspect*34", i64 32, !dbg !2045
  %typeid.inner = load i64, ptr %ptradd50, align 8, !dbg !2045
  %32 = insertvalue %any undef, ptr %23, 0, !dbg !2045
  %33 = insertvalue %any %32, i64 %typeid.inner, 1, !dbg !2045
  store %any %33, ptr %taddr51, align 8
  %lo = load i64, ptr %taddr51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %taddr51, i64 8
  %hi = load ptr, ptr %ptradd52, align 8
  %34 = load ptr, ptr %is_neg, align 8
  %35 = call i64 @std.io.int_from_any(ptr %retparam, i64 %lo, ptr %hi, ptr %34), !dbg !2046
  %not_err = icmp eq i64 %35, 0, !dbg !2046
  %36 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2046
  br i1 %36, label %after_check, label %assign_optional, !dbg !2046

assign_optional:                                  ; preds = %check_type_ok
  store i64 %35, ptr %reterr10, align 8, !dbg !2046
  br label %err_retblock, !dbg !2046

after_check:                                      ; preds = %check_type_ok
  %37 = load i128, ptr %retparam, align 16, !dbg !2046
  store i128 %37, ptr %0, align 16, !dbg !2046
  ret i64 0, !dbg !2046

err_retblock:                                     ; preds = %assign_optional
  %38 = load i64, ptr %reterr10, align 8, !dbg !2046
  ret i64 %38, !dbg !2046

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2047

switch.exit:                                      ; preds = %switch.default
  %39 = load ptr, ptr %is_neg, align 8, !dbg !2049
  %checknull53 = icmp eq ptr %39, null, !dbg !2049
  %40 = call i1 @llvm.expect.i1(i1 %checknull53, i1 false), !dbg !2049
  br i1 %40, label %panic54, label %checkok55, !dbg !2049

checkok55:                                        ; preds = %switch.exit
  store i8 0, ptr %39, align 1, !dbg !2050
  %ptradd56 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2051
  %41 = load i64, ptr %ptradd56, align 8
  store i64 %41, ptr %switch57, align 8
  br label %switch.entry58

switch.entry58:                                   ; preds = %checkok55
  %42 = load i64, ptr %switch57, align 8
  br label %check_subtype, !dbg !2053

check_subtype:                                    ; preds = %parent_type_block, %switch.entry58
  %43 = phi i64 [ %42, %switch.entry58 ], [ %typeid.parent, %parent_type_block ], !dbg !2053
  %eq59 = icmp eq i64 ptrtoint (ptr @"$ct.bool" to i64), %43, !dbg !2053
  br i1 %eq59, label %result_block, label %parent_type_block, !dbg !2053

parent_type_block:                                ; preds = %check_subtype
  %44 = inttoptr i64 %43 to ptr, !dbg !2053
  %ptradd60 = getelementptr inbounds i8, ptr %44, i64 8, !dbg !2053
  %typeid.parent = load i64, ptr %ptradd60, align 8, !dbg !2053
  %45 = icmp eq i64 %typeid.parent, 0, !dbg !2053
  br i1 %45, label %result_block, label %check_subtype, !dbg !2053

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %46 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !2053
  br i1 %46, label %switch.case61, label %next_if, !dbg !2053

switch.case61:                                    ; preds = %result_block
  %47 = load ptr, ptr %arg, align 8, !dbg !2054
  %checknull63 = icmp eq ptr %47, null, !dbg !2054
  %48 = call i1 @llvm.expect.i1(i1 %checknull63, i1 false), !dbg !2054
  br i1 %48, label %panic64, label %checkok65, !dbg !2054

checkok65:                                        ; preds = %switch.case61
  %49 = load i8, ptr %47, align 1, !dbg !2054
  %50 = trunc i8 %49 to i1, !dbg !2054
  %zext66 = zext i1 %50 to i128, !dbg !2054
  store i128 %zext66, ptr %0, align 16, !dbg !2054
  ret i64 0, !dbg !2054

next_if:                                          ; preds = %result_block
  br label %check_subtype67, !dbg !2056

check_subtype67:                                  ; preds = %parent_type_block69, %next_if
  %51 = phi i64 [ %42, %next_if ], [ %typeid.parent71, %parent_type_block69 ], !dbg !2056
  %eq68 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %51, !dbg !2056
  br i1 %eq68, label %result_block72, label %parent_type_block69, !dbg !2056

parent_type_block69:                              ; preds = %check_subtype67
  %52 = inttoptr i64 %51 to ptr, !dbg !2056
  %ptradd70 = getelementptr inbounds i8, ptr %52, i64 8, !dbg !2056
  %typeid.parent71 = load i64, ptr %ptradd70, align 8, !dbg !2056
  %53 = icmp eq i64 %typeid.parent71, 0, !dbg !2056
  br i1 %53, label %result_block72, label %check_subtype67, !dbg !2056

result_block72:                                   ; preds = %parent_type_block69, %check_subtype67
  %54 = phi i1 [ false, %parent_type_block69 ], [ true, %check_subtype67 ], !dbg !2056
  br i1 %54, label %switch.case73, label %next_if84, !dbg !2056

switch.case73:                                    ; preds = %result_block72
    #dbg_declare(ptr %val, !2057, !DIExpression(), !2059)
  %55 = load ptr, ptr %arg, align 8, !dbg !2060
  %checknull74 = icmp eq ptr %55, null, !dbg !2060
  %56 = call i1 @llvm.expect.i1(i1 %checknull74, i1 false), !dbg !2060
  br i1 %56, label %panic75, label %checkok76, !dbg !2060

checkok76:                                        ; preds = %switch.case73
  %57 = load i8, ptr %55, align 1, !dbg !2060
  %sext = sext i8 %57 to i32, !dbg !2060
  store i32 %sext, ptr %val, align 4, !dbg !2060
  %58 = load ptr, ptr %is_neg, align 8, !dbg !2061
  %checknull78 = icmp eq ptr %58, null, !dbg !2061
  %59 = call i1 @llvm.expect.i1(i1 %checknull78, i1 false), !dbg !2061
  br i1 %59, label %panic79, label %checkok80, !dbg !2061

checkok80:                                        ; preds = %checkok76
  %60 = load i32, ptr %val, align 4, !dbg !2062
  %lt = icmp slt i32 %60, 0, !dbg !2062
  %61 = zext i1 %lt to i8, !dbg !2062
  store i8 %61, ptr %58, align 1, !dbg !2062
  %62 = trunc i8 %61 to i1, !dbg !2062
  br i1 %62, label %cond.lhs, label %cond.rhs, !dbg !2062

cond.lhs:                                         ; preds = %checkok80
  %63 = load i32, ptr %val, align 4, !dbg !2063
  %sext81 = sext i32 %63 to i128, !dbg !2063
  %bnot = xor i128 %sext81, -1, !dbg !2063
  %add = add i128 %bnot, 1, !dbg !2064
  br label %cond.phi, !dbg !2064

cond.rhs:                                         ; preds = %checkok80
  %64 = load i32, ptr %val, align 4, !dbg !2065
  %sext82 = sext i32 %64 to i128, !dbg !2065
  br label %cond.phi, !dbg !2065

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val83 = phi i128 [ %add, %cond.lhs ], [ %sext82, %cond.rhs ], !dbg !2065
  store i128 %val83, ptr %0, align 16, !dbg !2065
  ret i64 0, !dbg !2065

next_if84:                                        ; preds = %result_block72
  br label %check_subtype85, !dbg !2066

check_subtype85:                                  ; preds = %parent_type_block87, %next_if84
  %65 = phi i64 [ %42, %next_if84 ], [ %typeid.parent89, %parent_type_block87 ], !dbg !2066
  %eq86 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %65, !dbg !2066
  br i1 %eq86, label %result_block90, label %parent_type_block87, !dbg !2066

parent_type_block87:                              ; preds = %check_subtype85
  %66 = inttoptr i64 %65 to ptr, !dbg !2066
  %ptradd88 = getelementptr inbounds i8, ptr %66, i64 8, !dbg !2066
  %typeid.parent89 = load i64, ptr %ptradd88, align 8, !dbg !2066
  %67 = icmp eq i64 %typeid.parent89, 0, !dbg !2066
  br i1 %67, label %result_block90, label %check_subtype85, !dbg !2066

result_block90:                                   ; preds = %parent_type_block87, %check_subtype85
  %68 = phi i1 [ false, %parent_type_block87 ], [ true, %check_subtype85 ], !dbg !2066
  br i1 %68, label %switch.case91, label %next_if118, !dbg !2066

switch.case91:                                    ; preds = %result_block90
    #dbg_declare(ptr %val92, !2067, !DIExpression(), !2069)
  %69 = load ptr, ptr %arg, align 8, !dbg !2070
  %checknull93 = icmp eq ptr %69, null, !dbg !2070
  %70 = call i1 @llvm.expect.i1(i1 %checknull93, i1 false), !dbg !2070
  br i1 %70, label %panic94, label %checkok95, !dbg !2070

checkok95:                                        ; preds = %switch.case91
  %71 = ptrtoint ptr %69 to i64, !dbg !2070
  %72 = urem i64 %71, 2, !dbg !2070
  %73 = icmp ne i64 %72, 0, !dbg !2070
  %74 = call i1 @llvm.expect.i1(i1 %73, i1 false), !dbg !2070
  br i1 %74, label %panic96, label %checkok103, !dbg !2070

checkok103:                                       ; preds = %checkok95
  %75 = load i16, ptr %69, align 2, !dbg !2070
  %sext104 = sext i16 %75 to i32, !dbg !2070
  store i32 %sext104, ptr %val92, align 4, !dbg !2070
  %76 = load ptr, ptr %is_neg, align 8, !dbg !2071
  %checknull106 = icmp eq ptr %76, null, !dbg !2071
  %77 = call i1 @llvm.expect.i1(i1 %checknull106, i1 false), !dbg !2071
  br i1 %77, label %panic107, label %checkok108, !dbg !2071

checkok108:                                       ; preds = %checkok103
  %78 = load i32, ptr %val92, align 4, !dbg !2072
  %lt109 = icmp slt i32 %78, 0, !dbg !2072
  %79 = zext i1 %lt109 to i8, !dbg !2072
  store i8 %79, ptr %76, align 1, !dbg !2072
  %80 = trunc i8 %79 to i1, !dbg !2072
  br i1 %80, label %cond.lhs110, label %cond.rhs114, !dbg !2072

cond.lhs110:                                      ; preds = %checkok108
  %81 = load i32, ptr %val92, align 4, !dbg !2073
  %sext111 = sext i32 %81 to i128, !dbg !2073
  %bnot112 = xor i128 %sext111, -1, !dbg !2073
  %add113 = add i128 %bnot112, 1, !dbg !2074
  br label %cond.phi116, !dbg !2074

cond.rhs114:                                      ; preds = %checkok108
  %82 = load i32, ptr %val92, align 4, !dbg !2075
  %sext115 = sext i32 %82 to i128, !dbg !2075
  br label %cond.phi116, !dbg !2075

cond.phi116:                                      ; preds = %cond.rhs114, %cond.lhs110
  %val117 = phi i128 [ %add113, %cond.lhs110 ], [ %sext115, %cond.rhs114 ], !dbg !2075
  store i128 %val117, ptr %0, align 16, !dbg !2075
  ret i64 0, !dbg !2075

next_if118:                                       ; preds = %result_block90
  br label %check_subtype119, !dbg !2076

check_subtype119:                                 ; preds = %parent_type_block121, %next_if118
  %83 = phi i64 [ %42, %next_if118 ], [ %typeid.parent123, %parent_type_block121 ], !dbg !2076
  %eq120 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %83, !dbg !2076
  br i1 %eq120, label %result_block124, label %parent_type_block121, !dbg !2076

parent_type_block121:                             ; preds = %check_subtype119
  %84 = inttoptr i64 %83 to ptr, !dbg !2076
  %ptradd122 = getelementptr inbounds i8, ptr %84, i64 8, !dbg !2076
  %typeid.parent123 = load i64, ptr %ptradd122, align 8, !dbg !2076
  %85 = icmp eq i64 %typeid.parent123, 0, !dbg !2076
  br i1 %85, label %result_block124, label %check_subtype119, !dbg !2076

result_block124:                                  ; preds = %parent_type_block121, %check_subtype119
  %86 = phi i1 [ false, %parent_type_block121 ], [ true, %check_subtype119 ], !dbg !2076
  br i1 %86, label %switch.case125, label %next_if151, !dbg !2076

switch.case125:                                   ; preds = %result_block124
    #dbg_declare(ptr %val126, !2077, !DIExpression(), !2079)
  %87 = load ptr, ptr %arg, align 8, !dbg !2080
  %checknull127 = icmp eq ptr %87, null, !dbg !2080
  %88 = call i1 @llvm.expect.i1(i1 %checknull127, i1 false), !dbg !2080
  br i1 %88, label %panic128, label %checkok129, !dbg !2080

checkok129:                                       ; preds = %switch.case125
  %89 = ptrtoint ptr %87 to i64, !dbg !2080
  %90 = urem i64 %89, 4, !dbg !2080
  %91 = icmp ne i64 %90, 0, !dbg !2080
  %92 = call i1 @llvm.expect.i1(i1 %91, i1 false), !dbg !2080
  br i1 %92, label %panic130, label %checkok137, !dbg !2080

checkok137:                                       ; preds = %checkok129
  %93 = load i32, ptr %87, align 4, !dbg !2080
  store i32 %93, ptr %val126, align 4, !dbg !2080
  %94 = load ptr, ptr %is_neg, align 8, !dbg !2081
  %checknull139 = icmp eq ptr %94, null, !dbg !2081
  %95 = call i1 @llvm.expect.i1(i1 %checknull139, i1 false), !dbg !2081
  br i1 %95, label %panic140, label %checkok141, !dbg !2081

checkok141:                                       ; preds = %checkok137
  %96 = load i32, ptr %val126, align 4, !dbg !2082
  %lt142 = icmp slt i32 %96, 0, !dbg !2082
  %97 = zext i1 %lt142 to i8, !dbg !2082
  store i8 %97, ptr %94, align 1, !dbg !2082
  %98 = trunc i8 %97 to i1, !dbg !2082
  br i1 %98, label %cond.lhs143, label %cond.rhs147, !dbg !2082

cond.lhs143:                                      ; preds = %checkok141
  %99 = load i32, ptr %val126, align 4, !dbg !2083
  %sext144 = sext i32 %99 to i128, !dbg !2083
  %bnot145 = xor i128 %sext144, -1, !dbg !2083
  %add146 = add i128 %bnot145, 1, !dbg !2084
  br label %cond.phi149, !dbg !2084

cond.rhs147:                                      ; preds = %checkok141
  %100 = load i32, ptr %val126, align 4, !dbg !2085
  %sext148 = sext i32 %100 to i128, !dbg !2085
  br label %cond.phi149, !dbg !2085

cond.phi149:                                      ; preds = %cond.rhs147, %cond.lhs143
  %val150 = phi i128 [ %add146, %cond.lhs143 ], [ %sext148, %cond.rhs147 ], !dbg !2085
  store i128 %val150, ptr %0, align 16, !dbg !2085
  ret i64 0, !dbg !2085

next_if151:                                       ; preds = %result_block124
  br label %check_subtype152, !dbg !2086

check_subtype152:                                 ; preds = %parent_type_block154, %next_if151
  %101 = phi i64 [ %42, %next_if151 ], [ %typeid.parent156, %parent_type_block154 ], !dbg !2086
  %eq153 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %101, !dbg !2086
  br i1 %eq153, label %result_block157, label %parent_type_block154, !dbg !2086

parent_type_block154:                             ; preds = %check_subtype152
  %102 = inttoptr i64 %101 to ptr, !dbg !2086
  %ptradd155 = getelementptr inbounds i8, ptr %102, i64 8, !dbg !2086
  %typeid.parent156 = load i64, ptr %ptradd155, align 8, !dbg !2086
  %103 = icmp eq i64 %typeid.parent156, 0, !dbg !2086
  br i1 %103, label %result_block157, label %check_subtype152, !dbg !2086

result_block157:                                  ; preds = %parent_type_block154, %check_subtype152
  %104 = phi i1 [ false, %parent_type_block154 ], [ true, %check_subtype152 ], !dbg !2086
  br i1 %104, label %switch.case158, label %next_if184, !dbg !2086

switch.case158:                                   ; preds = %result_block157
    #dbg_declare(ptr %val159, !2087, !DIExpression(), !2089)
  %105 = load ptr, ptr %arg, align 8, !dbg !2090
  %checknull160 = icmp eq ptr %105, null, !dbg !2090
  %106 = call i1 @llvm.expect.i1(i1 %checknull160, i1 false), !dbg !2090
  br i1 %106, label %panic161, label %checkok162, !dbg !2090

checkok162:                                       ; preds = %switch.case158
  %107 = ptrtoint ptr %105 to i64, !dbg !2090
  %108 = urem i64 %107, 8, !dbg !2090
  %109 = icmp ne i64 %108, 0, !dbg !2090
  %110 = call i1 @llvm.expect.i1(i1 %109, i1 false), !dbg !2090
  br i1 %110, label %panic163, label %checkok170, !dbg !2090

checkok170:                                       ; preds = %checkok162
  %111 = load i64, ptr %105, align 8, !dbg !2090
  store i64 %111, ptr %val159, align 8, !dbg !2090
  %112 = load ptr, ptr %is_neg, align 8, !dbg !2091
  %checknull172 = icmp eq ptr %112, null, !dbg !2091
  %113 = call i1 @llvm.expect.i1(i1 %checknull172, i1 false), !dbg !2091
  br i1 %113, label %panic173, label %checkok174, !dbg !2091

checkok174:                                       ; preds = %checkok170
  %114 = load i64, ptr %val159, align 8, !dbg !2092
  %lt175 = icmp slt i64 %114, 0, !dbg !2092
  %115 = zext i1 %lt175 to i8, !dbg !2092
  store i8 %115, ptr %112, align 1, !dbg !2092
  %116 = trunc i8 %115 to i1, !dbg !2092
  br i1 %116, label %cond.lhs176, label %cond.rhs180, !dbg !2092

cond.lhs176:                                      ; preds = %checkok174
  %117 = load i64, ptr %val159, align 8, !dbg !2093
  %sext177 = sext i64 %117 to i128, !dbg !2093
  %bnot178 = xor i128 %sext177, -1, !dbg !2093
  %add179 = add i128 %bnot178, 1, !dbg !2094
  br label %cond.phi182, !dbg !2094

cond.rhs180:                                      ; preds = %checkok174
  %118 = load i64, ptr %val159, align 8, !dbg !2095
  %sext181 = sext i64 %118 to i128, !dbg !2095
  br label %cond.phi182, !dbg !2095

cond.phi182:                                      ; preds = %cond.rhs180, %cond.lhs176
  %val183 = phi i128 [ %add179, %cond.lhs176 ], [ %sext181, %cond.rhs180 ], !dbg !2095
  store i128 %val183, ptr %0, align 16, !dbg !2095
  ret i64 0, !dbg !2095

next_if184:                                       ; preds = %result_block157
  br label %check_subtype185, !dbg !2096

check_subtype185:                                 ; preds = %parent_type_block187, %next_if184
  %119 = phi i64 [ %42, %next_if184 ], [ %typeid.parent189, %parent_type_block187 ], !dbg !2096
  %eq186 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %119, !dbg !2096
  br i1 %eq186, label %result_block190, label %parent_type_block187, !dbg !2096

parent_type_block187:                             ; preds = %check_subtype185
  %120 = inttoptr i64 %119 to ptr, !dbg !2096
  %ptradd188 = getelementptr inbounds i8, ptr %120, i64 8, !dbg !2096
  %typeid.parent189 = load i64, ptr %ptradd188, align 8, !dbg !2096
  %121 = icmp eq i64 %typeid.parent189, 0, !dbg !2096
  br i1 %121, label %result_block190, label %check_subtype185, !dbg !2096

result_block190:                                  ; preds = %parent_type_block187, %check_subtype185
  %122 = phi i1 [ false, %parent_type_block187 ], [ true, %check_subtype185 ], !dbg !2096
  br i1 %122, label %switch.case191, label %next_if215, !dbg !2096

switch.case191:                                   ; preds = %result_block190
    #dbg_declare(ptr %val192, !2097, !DIExpression(), !2099)
  %123 = load ptr, ptr %arg, align 8, !dbg !2100
  %checknull193 = icmp eq ptr %123, null, !dbg !2100
  %124 = call i1 @llvm.expect.i1(i1 %checknull193, i1 false), !dbg !2100
  br i1 %124, label %panic194, label %checkok195, !dbg !2100

checkok195:                                       ; preds = %switch.case191
  %125 = ptrtoint ptr %123 to i64, !dbg !2100
  %126 = urem i64 %125, 16, !dbg !2100
  %127 = icmp ne i64 %126, 0, !dbg !2100
  %128 = call i1 @llvm.expect.i1(i1 %127, i1 false), !dbg !2100
  br i1 %128, label %panic196, label %checkok203, !dbg !2100

checkok203:                                       ; preds = %checkok195
  %129 = load i128, ptr %123, align 16, !dbg !2100
  store i128 %129, ptr %val192, align 16, !dbg !2100
  %130 = load ptr, ptr %is_neg, align 8, !dbg !2101
  %checknull205 = icmp eq ptr %130, null, !dbg !2101
  %131 = call i1 @llvm.expect.i1(i1 %checknull205, i1 false), !dbg !2101
  br i1 %131, label %panic206, label %checkok207, !dbg !2101

checkok207:                                       ; preds = %checkok203
  %132 = load i128, ptr %val192, align 16, !dbg !2102
  %lt208 = icmp slt i128 %132, 0, !dbg !2102
  %133 = zext i1 %lt208 to i8, !dbg !2102
  store i8 %133, ptr %130, align 1, !dbg !2102
  %134 = trunc i8 %133 to i1, !dbg !2102
  br i1 %134, label %cond.lhs209, label %cond.rhs212, !dbg !2102

cond.lhs209:                                      ; preds = %checkok207
  %135 = load i128, ptr %val192, align 16, !dbg !2103
  %bnot210 = xor i128 %135, -1, !dbg !2103
  %add211 = add i128 %bnot210, 1, !dbg !2104
  br label %cond.phi213, !dbg !2104

cond.rhs212:                                      ; preds = %checkok207
  %136 = load i128, ptr %val192, align 16, !dbg !2105
  br label %cond.phi213, !dbg !2105

cond.phi213:                                      ; preds = %cond.rhs212, %cond.lhs209
  %val214 = phi i128 [ %add211, %cond.lhs209 ], [ %136, %cond.rhs212 ], !dbg !2105
  store i128 %val214, ptr %0, align 16, !dbg !2105
  ret i64 0, !dbg !2105

next_if215:                                       ; preds = %result_block190
  br label %check_subtype216, !dbg !2106

check_subtype216:                                 ; preds = %parent_type_block218, %next_if215
  %137 = phi i64 [ %42, %next_if215 ], [ %typeid.parent220, %parent_type_block218 ], !dbg !2106
  %eq217 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %137, !dbg !2106
  br i1 %eq217, label %result_block221, label %parent_type_block218, !dbg !2106

parent_type_block218:                             ; preds = %check_subtype216
  %138 = inttoptr i64 %137 to ptr, !dbg !2106
  %ptradd219 = getelementptr inbounds i8, ptr %138, i64 8, !dbg !2106
  %typeid.parent220 = load i64, ptr %ptradd219, align 8, !dbg !2106
  %139 = icmp eq i64 %typeid.parent220, 0, !dbg !2106
  br i1 %139, label %result_block221, label %check_subtype216, !dbg !2106

result_block221:                                  ; preds = %parent_type_block218, %check_subtype216
  %140 = phi i1 [ false, %parent_type_block218 ], [ true, %check_subtype216 ], !dbg !2106
  br i1 %140, label %switch.case222, label %next_if228, !dbg !2106

switch.case222:                                   ; preds = %result_block221
  %141 = load ptr, ptr %arg, align 8, !dbg !2107
  %checknull224 = icmp eq ptr %141, null, !dbg !2107
  %142 = call i1 @llvm.expect.i1(i1 %checknull224, i1 false), !dbg !2107
  br i1 %142, label %panic225, label %checkok226, !dbg !2107

checkok226:                                       ; preds = %switch.case222
  %143 = load i8, ptr %141, align 1, !dbg !2107
  %zext227 = zext i8 %143 to i128, !dbg !2107
  store i128 %zext227, ptr %0, align 16, !dbg !2107
  ret i64 0, !dbg !2107

next_if228:                                       ; preds = %result_block221
  br label %check_subtype229, !dbg !2109

check_subtype229:                                 ; preds = %parent_type_block231, %next_if228
  %144 = phi i64 [ %42, %next_if228 ], [ %typeid.parent233, %parent_type_block231 ], !dbg !2109
  %eq230 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %144, !dbg !2109
  br i1 %eq230, label %result_block234, label %parent_type_block231, !dbg !2109

parent_type_block231:                             ; preds = %check_subtype229
  %145 = inttoptr i64 %144 to ptr, !dbg !2109
  %ptradd232 = getelementptr inbounds i8, ptr %145, i64 8, !dbg !2109
  %typeid.parent233 = load i64, ptr %ptradd232, align 8, !dbg !2109
  %146 = icmp eq i64 %typeid.parent233, 0, !dbg !2109
  br i1 %146, label %result_block234, label %check_subtype229, !dbg !2109

result_block234:                                  ; preds = %parent_type_block231, %check_subtype229
  %147 = phi i1 [ false, %parent_type_block231 ], [ true, %check_subtype229 ], !dbg !2109
  br i1 %147, label %switch.case235, label %next_if249, !dbg !2109

switch.case235:                                   ; preds = %result_block234
  %148 = load ptr, ptr %arg, align 8, !dbg !2110
  %checknull237 = icmp eq ptr %148, null, !dbg !2110
  %149 = call i1 @llvm.expect.i1(i1 %checknull237, i1 false), !dbg !2110
  br i1 %149, label %panic238, label %checkok239, !dbg !2110

checkok239:                                       ; preds = %switch.case235
  %150 = ptrtoint ptr %148 to i64, !dbg !2110
  %151 = urem i64 %150, 2, !dbg !2110
  %152 = icmp ne i64 %151, 0, !dbg !2110
  %153 = call i1 @llvm.expect.i1(i1 %152, i1 false), !dbg !2110
  br i1 %153, label %panic240, label %checkok247, !dbg !2110

checkok247:                                       ; preds = %checkok239
  %154 = load i16, ptr %148, align 2, !dbg !2110
  %zext248 = zext i16 %154 to i128, !dbg !2110
  store i128 %zext248, ptr %0, align 16, !dbg !2110
  ret i64 0, !dbg !2110

next_if249:                                       ; preds = %result_block234
  br label %check_subtype250, !dbg !2112

check_subtype250:                                 ; preds = %parent_type_block252, %next_if249
  %155 = phi i64 [ %42, %next_if249 ], [ %typeid.parent254, %parent_type_block252 ], !dbg !2112
  %eq251 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %155, !dbg !2112
  br i1 %eq251, label %result_block255, label %parent_type_block252, !dbg !2112

parent_type_block252:                             ; preds = %check_subtype250
  %156 = inttoptr i64 %155 to ptr, !dbg !2112
  %ptradd253 = getelementptr inbounds i8, ptr %156, i64 8, !dbg !2112
  %typeid.parent254 = load i64, ptr %ptradd253, align 8, !dbg !2112
  %157 = icmp eq i64 %typeid.parent254, 0, !dbg !2112
  br i1 %157, label %result_block255, label %check_subtype250, !dbg !2112

result_block255:                                  ; preds = %parent_type_block252, %check_subtype250
  %158 = phi i1 [ false, %parent_type_block252 ], [ true, %check_subtype250 ], !dbg !2112
  br i1 %158, label %switch.case256, label %next_if270, !dbg !2112

switch.case256:                                   ; preds = %result_block255
  %159 = load ptr, ptr %arg, align 8, !dbg !2113
  %checknull258 = icmp eq ptr %159, null, !dbg !2113
  %160 = call i1 @llvm.expect.i1(i1 %checknull258, i1 false), !dbg !2113
  br i1 %160, label %panic259, label %checkok260, !dbg !2113

checkok260:                                       ; preds = %switch.case256
  %161 = ptrtoint ptr %159 to i64, !dbg !2113
  %162 = urem i64 %161, 4, !dbg !2113
  %163 = icmp ne i64 %162, 0, !dbg !2113
  %164 = call i1 @llvm.expect.i1(i1 %163, i1 false), !dbg !2113
  br i1 %164, label %panic261, label %checkok268, !dbg !2113

checkok268:                                       ; preds = %checkok260
  %165 = load i32, ptr %159, align 4, !dbg !2113
  %zext269 = zext i32 %165 to i128, !dbg !2113
  store i128 %zext269, ptr %0, align 16, !dbg !2113
  ret i64 0, !dbg !2113

next_if270:                                       ; preds = %result_block255
  br label %check_subtype271, !dbg !2115

check_subtype271:                                 ; preds = %parent_type_block273, %next_if270
  %166 = phi i64 [ %42, %next_if270 ], [ %typeid.parent275, %parent_type_block273 ], !dbg !2115
  %eq272 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %166, !dbg !2115
  br i1 %eq272, label %result_block276, label %parent_type_block273, !dbg !2115

parent_type_block273:                             ; preds = %check_subtype271
  %167 = inttoptr i64 %166 to ptr, !dbg !2115
  %ptradd274 = getelementptr inbounds i8, ptr %167, i64 8, !dbg !2115
  %typeid.parent275 = load i64, ptr %ptradd274, align 8, !dbg !2115
  %168 = icmp eq i64 %typeid.parent275, 0, !dbg !2115
  br i1 %168, label %result_block276, label %check_subtype271, !dbg !2115

result_block276:                                  ; preds = %parent_type_block273, %check_subtype271
  %169 = phi i1 [ false, %parent_type_block273 ], [ true, %check_subtype271 ], !dbg !2115
  br i1 %169, label %switch.case277, label %next_if291, !dbg !2115

switch.case277:                                   ; preds = %result_block276
  %170 = load ptr, ptr %arg, align 8, !dbg !2116
  %checknull279 = icmp eq ptr %170, null, !dbg !2116
  %171 = call i1 @llvm.expect.i1(i1 %checknull279, i1 false), !dbg !2116
  br i1 %171, label %panic280, label %checkok281, !dbg !2116

checkok281:                                       ; preds = %switch.case277
  %172 = ptrtoint ptr %170 to i64, !dbg !2116
  %173 = urem i64 %172, 8, !dbg !2116
  %174 = icmp ne i64 %173, 0, !dbg !2116
  %175 = call i1 @llvm.expect.i1(i1 %174, i1 false), !dbg !2116
  br i1 %175, label %panic282, label %checkok289, !dbg !2116

checkok289:                                       ; preds = %checkok281
  %176 = load i64, ptr %170, align 8, !dbg !2116
  %zext290 = zext i64 %176 to i128, !dbg !2116
  store i128 %zext290, ptr %0, align 16, !dbg !2116
  ret i64 0, !dbg !2116

next_if291:                                       ; preds = %result_block276
  br label %check_subtype292, !dbg !2118

check_subtype292:                                 ; preds = %parent_type_block294, %next_if291
  %177 = phi i64 [ %42, %next_if291 ], [ %typeid.parent296, %parent_type_block294 ], !dbg !2118
  %eq293 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %177, !dbg !2118
  br i1 %eq293, label %result_block297, label %parent_type_block294, !dbg !2118

parent_type_block294:                             ; preds = %check_subtype292
  %178 = inttoptr i64 %177 to ptr, !dbg !2118
  %ptradd295 = getelementptr inbounds i8, ptr %178, i64 8, !dbg !2118
  %typeid.parent296 = load i64, ptr %ptradd295, align 8, !dbg !2118
  %179 = icmp eq i64 %typeid.parent296, 0, !dbg !2118
  br i1 %179, label %result_block297, label %check_subtype292, !dbg !2118

result_block297:                                  ; preds = %parent_type_block294, %check_subtype292
  %180 = phi i1 [ false, %parent_type_block294 ], [ true, %check_subtype292 ], !dbg !2118
  br i1 %180, label %switch.case298, label %next_if311, !dbg !2118

switch.case298:                                   ; preds = %result_block297
  %181 = load ptr, ptr %arg, align 8, !dbg !2119
  %checknull300 = icmp eq ptr %181, null, !dbg !2119
  %182 = call i1 @llvm.expect.i1(i1 %checknull300, i1 false), !dbg !2119
  br i1 %182, label %panic301, label %checkok302, !dbg !2119

checkok302:                                       ; preds = %switch.case298
  %183 = ptrtoint ptr %181 to i64, !dbg !2119
  %184 = urem i64 %183, 16, !dbg !2119
  %185 = icmp ne i64 %184, 0, !dbg !2119
  %186 = call i1 @llvm.expect.i1(i1 %185, i1 false), !dbg !2119
  br i1 %186, label %panic303, label %checkok310, !dbg !2119

checkok310:                                       ; preds = %checkok302
  %187 = load i128, ptr %181, align 16, !dbg !2119
  store i128 %187, ptr %0, align 16, !dbg !2119
  ret i64 0, !dbg !2119

next_if311:                                       ; preds = %result_block297
  br label %check_subtype312, !dbg !2121

check_subtype312:                                 ; preds = %parent_type_block314, %next_if311
  %188 = phi i64 [ %42, %next_if311 ], [ %typeid.parent316, %parent_type_block314 ], !dbg !2121
  %eq313 = icmp eq i64 ptrtoint (ptr @"$ct.float" to i64), %188, !dbg !2121
  br i1 %eq313, label %result_block317, label %parent_type_block314, !dbg !2121

parent_type_block314:                             ; preds = %check_subtype312
  %189 = inttoptr i64 %188 to ptr, !dbg !2121
  %ptradd315 = getelementptr inbounds i8, ptr %189, i64 8, !dbg !2121
  %typeid.parent316 = load i64, ptr %ptradd315, align 8, !dbg !2121
  %190 = icmp eq i64 %typeid.parent316, 0, !dbg !2121
  br i1 %190, label %result_block317, label %check_subtype312, !dbg !2121

result_block317:                                  ; preds = %parent_type_block314, %check_subtype312
  %191 = phi i1 [ false, %parent_type_block314 ], [ true, %check_subtype312 ], !dbg !2121
  br i1 %191, label %switch.case318, label %next_if339, !dbg !2121

switch.case318:                                   ; preds = %result_block317
    #dbg_declare(ptr %f, !2122, !DIExpression(), !2125)
  %192 = load ptr, ptr %arg, align 8, !dbg !2126
  %checknull319 = icmp eq ptr %192, null, !dbg !2126
  %193 = call i1 @llvm.expect.i1(i1 %checknull319, i1 false), !dbg !2126
  br i1 %193, label %panic320, label %checkok321, !dbg !2126

checkok321:                                       ; preds = %switch.case318
  %194 = ptrtoint ptr %192 to i64, !dbg !2126
  %195 = urem i64 %194, 4, !dbg !2126
  %196 = icmp ne i64 %195, 0, !dbg !2126
  %197 = call i1 @llvm.expect.i1(i1 %196, i1 false), !dbg !2126
  br i1 %197, label %panic322, label %checkok329, !dbg !2126

checkok329:                                       ; preds = %checkok321
  %198 = load float, ptr %192, align 4, !dbg !2126
  store float %198, ptr %f, align 4, !dbg !2126
  %199 = load ptr, ptr %is_neg, align 8, !dbg !2127
  %checknull331 = icmp eq ptr %199, null, !dbg !2127
  %200 = call i1 @llvm.expect.i1(i1 %checknull331, i1 false), !dbg !2127
  br i1 %200, label %panic332, label %checkok333, !dbg !2127

checkok333:                                       ; preds = %checkok329
  %201 = load float, ptr %f, align 4, !dbg !2128
  %lt334 = fcmp olt float %201, 0.000000e+00, !dbg !2128
  %202 = zext i1 %lt334 to i8, !dbg !2128
  store i8 %202, ptr %199, align 1, !dbg !2128
  %203 = trunc i8 %202 to i1, !dbg !2128
  br i1 %203, label %cond.lhs335, label %cond.rhs336, !dbg !2128

cond.lhs335:                                      ; preds = %checkok333
  %204 = load float, ptr %f, align 4, !dbg !2129
  %fneg = fneg float %204, !dbg !2129
  br label %cond.phi337, !dbg !2129

cond.rhs336:                                      ; preds = %checkok333
  %205 = load float, ptr %f, align 4, !dbg !2130
  br label %cond.phi337, !dbg !2130

cond.phi337:                                      ; preds = %cond.rhs336, %cond.lhs335
  %val338 = phi float [ %fneg, %cond.lhs335 ], [ %205, %cond.rhs336 ], !dbg !2130
  %fpui = fptoui float %val338 to i128, !dbg !2130
  store i128 %fpui, ptr %0, align 16, !dbg !2130
  ret i64 0, !dbg !2130

next_if339:                                       ; preds = %result_block317
  br label %check_subtype340, !dbg !2131

check_subtype340:                                 ; preds = %parent_type_block342, %next_if339
  %206 = phi i64 [ %42, %next_if339 ], [ %typeid.parent344, %parent_type_block342 ], !dbg !2131
  %eq341 = icmp eq i64 ptrtoint (ptr @"$ct.double" to i64), %206, !dbg !2131
  br i1 %eq341, label %result_block345, label %parent_type_block342, !dbg !2131

parent_type_block342:                             ; preds = %check_subtype340
  %207 = inttoptr i64 %206 to ptr, !dbg !2131
  %ptradd343 = getelementptr inbounds i8, ptr %207, i64 8, !dbg !2131
  %typeid.parent344 = load i64, ptr %ptradd343, align 8, !dbg !2131
  %208 = icmp eq i64 %typeid.parent344, 0, !dbg !2131
  br i1 %208, label %result_block345, label %check_subtype340, !dbg !2131

result_block345:                                  ; preds = %parent_type_block342, %check_subtype340
  %209 = phi i1 [ false, %parent_type_block342 ], [ true, %check_subtype340 ], !dbg !2131
  br i1 %209, label %switch.case346, label %next_if369, !dbg !2131

switch.case346:                                   ; preds = %result_block345
    #dbg_declare(ptr %d, !2132, !DIExpression(), !2134)
  %210 = load ptr, ptr %arg, align 8, !dbg !2135
  %checknull347 = icmp eq ptr %210, null, !dbg !2135
  %211 = call i1 @llvm.expect.i1(i1 %checknull347, i1 false), !dbg !2135
  br i1 %211, label %panic348, label %checkok349, !dbg !2135

checkok349:                                       ; preds = %switch.case346
  %212 = ptrtoint ptr %210 to i64, !dbg !2135
  %213 = urem i64 %212, 8, !dbg !2135
  %214 = icmp ne i64 %213, 0, !dbg !2135
  %215 = call i1 @llvm.expect.i1(i1 %214, i1 false), !dbg !2135
  br i1 %215, label %panic350, label %checkok357, !dbg !2135

checkok357:                                       ; preds = %checkok349
  %216 = load double, ptr %210, align 8, !dbg !2135
  store double %216, ptr %d, align 8, !dbg !2135
  %217 = load ptr, ptr %is_neg, align 8, !dbg !2136
  %checknull359 = icmp eq ptr %217, null, !dbg !2136
  %218 = call i1 @llvm.expect.i1(i1 %checknull359, i1 false), !dbg !2136
  br i1 %218, label %panic360, label %checkok361, !dbg !2136

checkok361:                                       ; preds = %checkok357
  %219 = load double, ptr %d, align 8, !dbg !2137
  %lt362 = fcmp olt double %219, 0.000000e+00, !dbg !2137
  %220 = zext i1 %lt362 to i8, !dbg !2137
  store i8 %220, ptr %217, align 1, !dbg !2137
  %221 = trunc i8 %220 to i1, !dbg !2137
  br i1 %221, label %cond.lhs363, label %cond.rhs365, !dbg !2137

cond.lhs363:                                      ; preds = %checkok361
  %222 = load double, ptr %d, align 8, !dbg !2138
  %fneg364 = fneg double %222, !dbg !2138
  br label %cond.phi366, !dbg !2138

cond.rhs365:                                      ; preds = %checkok361
  %223 = load double, ptr %d, align 8, !dbg !2139
  br label %cond.phi366, !dbg !2139

cond.phi366:                                      ; preds = %cond.rhs365, %cond.lhs363
  %val367 = phi double [ %fneg364, %cond.lhs363 ], [ %223, %cond.rhs365 ], !dbg !2139
  %fpui368 = fptoui double %val367 to i128, !dbg !2139
  store i128 %fpui368, ptr %0, align 16, !dbg !2139
  ret i64 0, !dbg !2139

next_if369:                                       ; preds = %result_block345
  br label %switch.default370, !dbg !2139

switch.default370:                                ; preds = %next_if369
  ret i64 ptrtoint (ptr @std.io.BAD_FORMAT to i64), !dbg !2140

panic:                                            ; preds = %switch.case
  %224 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2034
  call void %224(ptr @.panic_msg.46, i64 47, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 44) #5, !dbg !2034
  unreachable, !dbg !2034

panic3:                                           ; preds = %checkok
  %225 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2038
  call void %225(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 45) #5, !dbg !2038
  unreachable, !dbg !2038

panic5:                                           ; preds = %checkok4
  store i64 8, ptr %taddr, align 8
  %226 = insertvalue %any undef, ptr %taddr, 0
  %227 = insertvalue %any %226, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr6, align 8
  %228 = insertvalue %any undef, ptr %taddr6, 0
  %229 = insertvalue %any %228, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %227, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %229, ptr %ptradd7, align 16
  %230 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %230, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 45, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2038
  unreachable, !dbg !2038

panic12:                                          ; preds = %assert_ok
  %231 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2044
  call void %231(ptr @.panic_msg.2, i64 45, ptr @.file.15, i64 10, ptr @.func.47, i64 12, i32 241) #5, !dbg !2044
  unreachable, !dbg !2044

panic14:                                          ; preds = %checkok13
  store i64 8, ptr %taddr15, align 8
  %232 = insertvalue %any undef, ptr %taddr15, 0
  %233 = insertvalue %any %232, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr16, align 8
  %234 = insertvalue %any undef, ptr %taddr16, 0
  %235 = insertvalue %any %234, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %233, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %235, ptr %ptradd18, align 16
  %236 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %236, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.15, i64 10, ptr @.func.47, i64 12, i32 241, ptr byval(%"any[]") align 8 %indirectarg20) #5, !dbg !2044
  unreachable, !dbg !2044

panic23:                                          ; preds = %checkok21
  %237 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2045
  call void %237(ptr @.panic_msg.2, i64 45, ptr @.file.15, i64 10, ptr @.func.47, i64 12, i32 241) #5, !dbg !2045
  unreachable, !dbg !2045

panic25:                                          ; preds = %checkok24
  store i64 8, ptr %taddr26, align 8
  %238 = insertvalue %any undef, ptr %taddr26, 0
  %239 = insertvalue %any %238, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr27, align 8
  %240 = insertvalue %any undef, ptr %taddr27, 0
  %241 = insertvalue %any %240, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %239, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %241, ptr %ptradd29, align 16
  %242 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %242, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.15, i64 10, ptr @.func.47, i64 12, i32 241, ptr byval(%"any[]") align 8 %indirectarg31) #5, !dbg !2045
  unreachable, !dbg !2045

panic54:                                          ; preds = %switch.exit
  %243 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2049
  call void %243(ptr @.panic_msg.46, i64 47, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 51) #5, !dbg !2049
  unreachable, !dbg !2049

panic64:                                          ; preds = %switch.case61
  %244 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2054
  call void %244(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 55) #5, !dbg !2054
  unreachable, !dbg !2054

panic75:                                          ; preds = %switch.case73
  %245 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2060
  call void %245(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 57) #5, !dbg !2060
  unreachable, !dbg !2060

panic79:                                          ; preds = %checkok76
  %246 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2061
  call void %246(ptr @.panic_msg.46, i64 47, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 58) #5, !dbg !2061
  unreachable, !dbg !2061

panic94:                                          ; preds = %switch.case91
  %247 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2070
  call void %247(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 60) #5, !dbg !2070
  unreachable, !dbg !2070

panic96:                                          ; preds = %checkok95
  store i64 2, ptr %taddr97, align 8
  %248 = insertvalue %any undef, ptr %taddr97, 0
  %249 = insertvalue %any %248, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %72, ptr %taddr98, align 8
  %250 = insertvalue %any undef, ptr %taddr98, 0
  %251 = insertvalue %any %250, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %249, ptr %varargslots99, align 16
  %ptradd100 = getelementptr inbounds i8, ptr %varargslots99, i64 16
  store %any %251, ptr %ptradd100, align 16
  %252 = insertvalue %"any[]" undef, ptr %varargslots99, 0
  %"$$temp101" = insertvalue %"any[]" %252, i64 2, 1
  store %"any[]" %"$$temp101", ptr %indirectarg102, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 60, ptr byval(%"any[]") align 8 %indirectarg102) #5, !dbg !2070
  unreachable, !dbg !2070

panic107:                                         ; preds = %checkok103
  %253 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2071
  call void %253(ptr @.panic_msg.46, i64 47, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 61) #5, !dbg !2071
  unreachable, !dbg !2071

panic128:                                         ; preds = %switch.case125
  %254 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2080
  call void %254(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 63) #5, !dbg !2080
  unreachable, !dbg !2080

panic130:                                         ; preds = %checkok129
  store i64 4, ptr %taddr131, align 8
  %255 = insertvalue %any undef, ptr %taddr131, 0
  %256 = insertvalue %any %255, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %90, ptr %taddr132, align 8
  %257 = insertvalue %any undef, ptr %taddr132, 0
  %258 = insertvalue %any %257, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %256, ptr %varargslots133, align 16
  %ptradd134 = getelementptr inbounds i8, ptr %varargslots133, i64 16
  store %any %258, ptr %ptradd134, align 16
  %259 = insertvalue %"any[]" undef, ptr %varargslots133, 0
  %"$$temp135" = insertvalue %"any[]" %259, i64 2, 1
  store %"any[]" %"$$temp135", ptr %indirectarg136, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 63, ptr byval(%"any[]") align 8 %indirectarg136) #5, !dbg !2080
  unreachable, !dbg !2080

panic140:                                         ; preds = %checkok137
  %260 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2081
  call void %260(ptr @.panic_msg.46, i64 47, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 64) #5, !dbg !2081
  unreachable, !dbg !2081

panic161:                                         ; preds = %switch.case158
  %261 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2090
  call void %261(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 66) #5, !dbg !2090
  unreachable, !dbg !2090

panic163:                                         ; preds = %checkok162
  store i64 8, ptr %taddr164, align 8
  %262 = insertvalue %any undef, ptr %taddr164, 0
  %263 = insertvalue %any %262, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %108, ptr %taddr165, align 8
  %264 = insertvalue %any undef, ptr %taddr165, 0
  %265 = insertvalue %any %264, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %263, ptr %varargslots166, align 16
  %ptradd167 = getelementptr inbounds i8, ptr %varargslots166, i64 16
  store %any %265, ptr %ptradd167, align 16
  %266 = insertvalue %"any[]" undef, ptr %varargslots166, 0
  %"$$temp168" = insertvalue %"any[]" %266, i64 2, 1
  store %"any[]" %"$$temp168", ptr %indirectarg169, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 66, ptr byval(%"any[]") align 8 %indirectarg169) #5, !dbg !2090
  unreachable, !dbg !2090

panic173:                                         ; preds = %checkok170
  %267 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2091
  call void %267(ptr @.panic_msg.46, i64 47, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 67) #5, !dbg !2091
  unreachable, !dbg !2091

panic194:                                         ; preds = %switch.case191
  %268 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2100
  call void %268(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 69) #5, !dbg !2100
  unreachable, !dbg !2100

panic196:                                         ; preds = %checkok195
  store i64 16, ptr %taddr197, align 8
  %269 = insertvalue %any undef, ptr %taddr197, 0
  %270 = insertvalue %any %269, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %126, ptr %taddr198, align 8
  %271 = insertvalue %any undef, ptr %taddr198, 0
  %272 = insertvalue %any %271, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %270, ptr %varargslots199, align 16
  %ptradd200 = getelementptr inbounds i8, ptr %varargslots199, i64 16
  store %any %272, ptr %ptradd200, align 16
  %273 = insertvalue %"any[]" undef, ptr %varargslots199, 0
  %"$$temp201" = insertvalue %"any[]" %273, i64 2, 1
  store %"any[]" %"$$temp201", ptr %indirectarg202, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 69, ptr byval(%"any[]") align 8 %indirectarg202) #5, !dbg !2100
  unreachable, !dbg !2100

panic206:                                         ; preds = %checkok203
  %274 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2101
  call void %274(ptr @.panic_msg.46, i64 47, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 70) #5, !dbg !2101
  unreachable, !dbg !2101

panic225:                                         ; preds = %switch.case222
  %275 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2107
  call void %275(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 72) #5, !dbg !2107
  unreachable, !dbg !2107

panic238:                                         ; preds = %switch.case235
  %276 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2110
  call void %276(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 74) #5, !dbg !2110
  unreachable, !dbg !2110

panic240:                                         ; preds = %checkok239
  store i64 2, ptr %taddr241, align 8
  %277 = insertvalue %any undef, ptr %taddr241, 0
  %278 = insertvalue %any %277, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %151, ptr %taddr242, align 8
  %279 = insertvalue %any undef, ptr %taddr242, 0
  %280 = insertvalue %any %279, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %278, ptr %varargslots243, align 16
  %ptradd244 = getelementptr inbounds i8, ptr %varargslots243, i64 16
  store %any %280, ptr %ptradd244, align 16
  %281 = insertvalue %"any[]" undef, ptr %varargslots243, 0
  %"$$temp245" = insertvalue %"any[]" %281, i64 2, 1
  store %"any[]" %"$$temp245", ptr %indirectarg246, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 74, ptr byval(%"any[]") align 8 %indirectarg246) #5, !dbg !2110
  unreachable, !dbg !2110

panic259:                                         ; preds = %switch.case256
  %282 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2113
  call void %282(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 76) #5, !dbg !2113
  unreachable, !dbg !2113

panic261:                                         ; preds = %checkok260
  store i64 4, ptr %taddr262, align 8
  %283 = insertvalue %any undef, ptr %taddr262, 0
  %284 = insertvalue %any %283, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %162, ptr %taddr263, align 8
  %285 = insertvalue %any undef, ptr %taddr263, 0
  %286 = insertvalue %any %285, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %284, ptr %varargslots264, align 16
  %ptradd265 = getelementptr inbounds i8, ptr %varargslots264, i64 16
  store %any %286, ptr %ptradd265, align 16
  %287 = insertvalue %"any[]" undef, ptr %varargslots264, 0
  %"$$temp266" = insertvalue %"any[]" %287, i64 2, 1
  store %"any[]" %"$$temp266", ptr %indirectarg267, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 76, ptr byval(%"any[]") align 8 %indirectarg267) #5, !dbg !2113
  unreachable, !dbg !2113

panic280:                                         ; preds = %switch.case277
  %288 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2116
  call void %288(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 78) #5, !dbg !2116
  unreachable, !dbg !2116

panic282:                                         ; preds = %checkok281
  store i64 8, ptr %taddr283, align 8
  %289 = insertvalue %any undef, ptr %taddr283, 0
  %290 = insertvalue %any %289, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %173, ptr %taddr284, align 8
  %291 = insertvalue %any undef, ptr %taddr284, 0
  %292 = insertvalue %any %291, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %290, ptr %varargslots285, align 16
  %ptradd286 = getelementptr inbounds i8, ptr %varargslots285, i64 16
  store %any %292, ptr %ptradd286, align 16
  %293 = insertvalue %"any[]" undef, ptr %varargslots285, 0
  %"$$temp287" = insertvalue %"any[]" %293, i64 2, 1
  store %"any[]" %"$$temp287", ptr %indirectarg288, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 78, ptr byval(%"any[]") align 8 %indirectarg288) #5, !dbg !2116
  unreachable, !dbg !2116

panic301:                                         ; preds = %switch.case298
  %294 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2119
  call void %294(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 80) #5, !dbg !2119
  unreachable, !dbg !2119

panic303:                                         ; preds = %checkok302
  store i64 16, ptr %taddr304, align 8
  %295 = insertvalue %any undef, ptr %taddr304, 0
  %296 = insertvalue %any %295, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %184, ptr %taddr305, align 8
  %297 = insertvalue %any undef, ptr %taddr305, 0
  %298 = insertvalue %any %297, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %296, ptr %varargslots306, align 16
  %ptradd307 = getelementptr inbounds i8, ptr %varargslots306, i64 16
  store %any %298, ptr %ptradd307, align 16
  %299 = insertvalue %"any[]" undef, ptr %varargslots306, 0
  %"$$temp308" = insertvalue %"any[]" %299, i64 2, 1
  store %"any[]" %"$$temp308", ptr %indirectarg309, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 80, ptr byval(%"any[]") align 8 %indirectarg309) #5, !dbg !2119
  unreachable, !dbg !2119

panic320:                                         ; preds = %switch.case318
  %300 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2126
  call void %300(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 82) #5, !dbg !2126
  unreachable, !dbg !2126

panic322:                                         ; preds = %checkok321
  store i64 4, ptr %taddr323, align 8
  %301 = insertvalue %any undef, ptr %taddr323, 0
  %302 = insertvalue %any %301, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %195, ptr %taddr324, align 8
  %303 = insertvalue %any undef, ptr %taddr324, 0
  %304 = insertvalue %any %303, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %302, ptr %varargslots325, align 16
  %ptradd326 = getelementptr inbounds i8, ptr %varargslots325, i64 16
  store %any %304, ptr %ptradd326, align 16
  %305 = insertvalue %"any[]" undef, ptr %varargslots325, 0
  %"$$temp327" = insertvalue %"any[]" %305, i64 2, 1
  store %"any[]" %"$$temp327", ptr %indirectarg328, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 82, ptr byval(%"any[]") align 8 %indirectarg328) #5, !dbg !2126
  unreachable, !dbg !2126

panic332:                                         ; preds = %checkok329
  %306 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2127
  call void %306(ptr @.panic_msg.46, i64 47, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 83) #5, !dbg !2127
  unreachable, !dbg !2127

panic348:                                         ; preds = %switch.case346
  %307 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2135
  call void %307(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 85) #5, !dbg !2135
  unreachable, !dbg !2135

panic350:                                         ; preds = %checkok349
  store i64 8, ptr %taddr351, align 8
  %308 = insertvalue %any undef, ptr %taddr351, 0
  %309 = insertvalue %any %308, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %213, ptr %taddr352, align 8
  %310 = insertvalue %any undef, ptr %taddr352, 0
  %311 = insertvalue %any %310, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %309, ptr %varargslots353, align 16
  %ptradd354 = getelementptr inbounds i8, ptr %varargslots353, i64 16
  store %any %311, ptr %ptradd354, align 16
  %312 = insertvalue %"any[]" undef, ptr %varargslots353, 0
  %"$$temp355" = insertvalue %"any[]" %312, i64 2, 1
  store %"any[]" %"$$temp355", ptr %indirectarg356, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 85, ptr byval(%"any[]") align 8 %indirectarg356) #5, !dbg !2135
  unreachable, !dbg !2135

panic360:                                         ; preds = %checkok357
  %313 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2136
  call void %313(ptr @.panic_msg.46, i64 47, ptr @.file.44, i64 20, ptr @.func.47, i64 12, i32 86) #5, !dbg !2136
  unreachable, !dbg !2136
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.float_from_any(ptr %0, i64 %1, ptr %2) #0 !dbg !2142 {
entry:
  %arg = alloca %any, align 8
  %reterr = alloca i64, align 8
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %retparam = alloca double, align 8
  %taddr36 = alloca %any, align 8
  %switch = alloca i64, align 8
  %reterr41 = alloca i64, align 8
  %reterr52 = alloca i64, align 8
  %reterr64 = alloca i64, align 8
  %taddr69 = alloca i64, align 8
  %taddr70 = alloca i64, align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %reterr85 = alloca i64, align 8
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %varargslots92 = alloca [2 x %any], align 16
  %indirectarg95 = alloca %"any[]", align 8
  %reterr106 = alloca i64, align 8
  %taddr111 = alloca i64, align 8
  %taddr112 = alloca i64, align 8
  %varargslots113 = alloca [2 x %any], align 16
  %indirectarg116 = alloca %"any[]", align 8
  %reterr127 = alloca i64, align 8
  %taddr132 = alloca i64, align 8
  %taddr133 = alloca i64, align 8
  %varargslots134 = alloca [2 x %any], align 16
  %indirectarg137 = alloca %"any[]", align 8
  %reterr148 = alloca i64, align 8
  %reterr161 = alloca i64, align 8
  %taddr166 = alloca i64, align 8
  %taddr167 = alloca i64, align 8
  %varargslots168 = alloca [2 x %any], align 16
  %indirectarg171 = alloca %"any[]", align 8
  %reterr182 = alloca i64, align 8
  %taddr187 = alloca i64, align 8
  %taddr188 = alloca i64, align 8
  %varargslots189 = alloca [2 x %any], align 16
  %indirectarg192 = alloca %"any[]", align 8
  %reterr203 = alloca i64, align 8
  %taddr208 = alloca i64, align 8
  %taddr209 = alloca i64, align 8
  %varargslots210 = alloca [2 x %any], align 16
  %indirectarg213 = alloca %"any[]", align 8
  %reterr224 = alloca i64, align 8
  %taddr229 = alloca i64, align 8
  %taddr230 = alloca i64, align 8
  %varargslots231 = alloca [2 x %any], align 16
  %indirectarg234 = alloca %"any[]", align 8
  %reterr245 = alloca i64, align 8
  %taddr250 = alloca i64, align 8
  %taddr251 = alloca i64, align 8
  %varargslots252 = alloca [2 x %any], align 16
  %indirectarg255 = alloca %"any[]", align 8
  %reterr265 = alloca i64, align 8
  %taddr270 = alloca i64, align 8
  %taddr271 = alloca i64, align 8
  %varargslots272 = alloca [2 x %any], align 16
  %indirectarg275 = alloca %"any[]", align 8
  store i64 %1, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %arg, !2147, !DIExpression(), !2148)
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2149
  %3 = load i64, ptr %ptradd1, align 8, !dbg !2149
  %"introspect*" = inttoptr i64 %3 to ptr, !dbg !2149
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !2149
  %eq = icmp eq i8 %typeid.kind, 17, !dbg !2149
  br i1 %eq, label %if.then, label %if.exit, !dbg !2149

if.then:                                          ; preds = %entry
  store ptr %arg, ptr %self, align 8
  %4 = load ptr, ptr %self, align 8, !dbg !2150
  %neq = icmp ne ptr %4, null, !dbg !2150
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2150

assert_fail:                                      ; preds = %if.then
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2150
  call void %5(ptr @.panic_msg.48, i64 32, ptr @.file.15, i64 10, ptr @.func.50, i64 14, i32 239) #5, !dbg !2150
  unreachable, !dbg !2150

assert_ok:                                        ; preds = %if.then
  %6 = load ptr, ptr %self, align 8, !dbg !2155
  %checknull = icmp eq ptr %6, null, !dbg !2155
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2155
  br i1 %7, label %panic, label %checkok, !dbg !2155

checkok:                                          ; preds = %assert_ok
  %8 = ptrtoint ptr %6 to i64, !dbg !2155
  %9 = urem i64 %8, 8, !dbg !2155
  %10 = icmp ne i64 %9, 0, !dbg !2155
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false), !dbg !2155
  br i1 %11, label %panic2, label %checkok5, !dbg !2155

checkok5:                                         ; preds = %checkok
  %12 = load ptr, ptr %6, align 8, !dbg !2155
  %13 = load ptr, ptr %self, align 8, !dbg !2156
  %checknull6 = icmp eq ptr %13, null, !dbg !2156
  %14 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !2156
  br i1 %14, label %panic7, label %checkok8, !dbg !2156

checkok8:                                         ; preds = %checkok5
  %15 = ptrtoint ptr %13 to i64, !dbg !2156
  %16 = urem i64 %15, 8, !dbg !2156
  %17 = icmp ne i64 %16, 0, !dbg !2156
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false), !dbg !2156
  br i1 %18, label %panic9, label %checkok16, !dbg !2156

checkok16:                                        ; preds = %checkok8
  %ptradd17 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !2156
  %19 = load i64, ptr %ptradd17, align 8, !dbg !2156
  %"introspect*18" = inttoptr i64 %19 to ptr, !dbg !2156
  %typeid.kind19 = load i8, ptr %"introspect*18", align 8, !dbg !2156
  %eq20 = icmp eq i8 %typeid.kind19, 14, !dbg !2156
  br i1 %eq20, label %check_type_ok, label %check_next, !dbg !2156

check_next:                                       ; preds = %checkok16
  %eq21 = icmp eq i8 %typeid.kind19, 18, !dbg !2156
  br i1 %eq21, label %check_type_ok, label %check_next22, !dbg !2156

check_next22:                                     ; preds = %check_next
  %eq23 = icmp eq i8 %typeid.kind19, 16, !dbg !2156
  br i1 %eq23, label %check_type_ok, label %check_next24, !dbg !2156

check_next24:                                     ; preds = %check_next22
  %eq25 = icmp eq i8 %typeid.kind19, 8, !dbg !2156
  br i1 %eq25, label %check_type_ok, label %check_next26, !dbg !2156

check_next26:                                     ; preds = %check_next24
  %eq27 = icmp eq i8 %typeid.kind19, 15, !dbg !2156
  br i1 %eq27, label %check_type_ok, label %check_next28, !dbg !2156

check_next28:                                     ; preds = %check_next26
  %eq29 = icmp eq i8 %typeid.kind19, 17, !dbg !2156
  br i1 %eq29, label %check_type_ok, label %check_next30, !dbg !2156

check_next30:                                     ; preds = %check_next28
  %eq31 = icmp eq i8 %typeid.kind19, 13, !dbg !2156
  br i1 %eq31, label %check_type_ok, label %check_next32, !dbg !2156

check_next32:                                     ; preds = %check_next30
  %eq33 = icmp eq i8 %typeid.kind19, 11, !dbg !2156
  br i1 %eq33, label %check_type_ok, label %check_next34, !dbg !2156

check_next34:                                     ; preds = %check_next32
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2156
  call void %20(ptr @.panic_msg.49, i64 49, ptr @.file.15, i64 10, ptr @.func.50, i64 14, i32 241) #5, !dbg !2156
  unreachable, !dbg !2156

check_type_ok:                                    ; preds = %check_next32, %check_next30, %check_next28, %check_next26, %check_next24, %check_next22, %check_next, %checkok16
  %ptradd35 = getelementptr inbounds i8, ptr %"introspect*18", i64 32, !dbg !2156
  %typeid.inner = load i64, ptr %ptradd35, align 8, !dbg !2156
  %21 = insertvalue %any undef, ptr %12, 0, !dbg !2156
  %22 = insertvalue %any %21, i64 %typeid.inner, 1, !dbg !2156
  store %any %22, ptr %taddr36, align 8
  %lo = load i64, ptr %taddr36, align 8
  %ptradd37 = getelementptr inbounds i8, ptr %taddr36, i64 8
  %hi = load ptr, ptr %ptradd37, align 8
  %23 = call i64 @std.io.float_from_any(ptr %retparam, i64 %lo, ptr %hi), !dbg !2157
  %not_err = icmp eq i64 %23, 0, !dbg !2157
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2157
  br i1 %24, label %after_check, label %assign_optional, !dbg !2157

assign_optional:                                  ; preds = %check_type_ok
  store i64 %23, ptr %reterr, align 8, !dbg !2157
  br label %err_retblock, !dbg !2157

after_check:                                      ; preds = %check_type_ok
  %25 = load double, ptr %retparam, align 8, !dbg !2157
  store double %25, ptr %0, align 8, !dbg !2157
  ret i64 0, !dbg !2157

err_retblock:                                     ; preds = %assign_optional
  %26 = load i64, ptr %reterr, align 8, !dbg !2157
  ret i64 %26, !dbg !2157

if.exit:                                          ; preds = %entry
  %ptradd38 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2158
  %27 = load i64, ptr %ptradd38, align 8
  store i64 %27, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit
  %28 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !2160

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %29 = phi i64 [ %28, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !2160
  %eq39 = icmp eq i64 ptrtoint (ptr @"$ct.bool" to i64), %29, !dbg !2160
  br i1 %eq39, label %result_block, label %parent_type_block, !dbg !2160

parent_type_block:                                ; preds = %check_subtype
  %30 = inttoptr i64 %29 to ptr, !dbg !2160
  %ptradd40 = getelementptr inbounds i8, ptr %30, i64 8, !dbg !2160
  %typeid.parent = load i64, ptr %ptradd40, align 8, !dbg !2160
  %31 = icmp eq i64 %typeid.parent, 0, !dbg !2160
  br i1 %31, label %result_block, label %check_subtype, !dbg !2160

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %32 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !2160
  br i1 %32, label %switch.case, label %next_if, !dbg !2160

switch.case:                                      ; preds = %result_block
  %33 = load ptr, ptr %arg, align 8, !dbg !2161
  %checknull42 = icmp eq ptr %33, null, !dbg !2161
  %34 = call i1 @llvm.expect.i1(i1 %checknull42, i1 false), !dbg !2161
  br i1 %34, label %panic43, label %checkok44, !dbg !2161

checkok44:                                        ; preds = %switch.case
  %35 = load i8, ptr %33, align 1, !dbg !2161
  %36 = trunc i8 %35 to i1, !dbg !2161
  %uifp = uitofp i1 %36 to double, !dbg !2161
  store double %uifp, ptr %0, align 8, !dbg !2161
  ret i64 0, !dbg !2161

next_if:                                          ; preds = %result_block
  br label %check_subtype45, !dbg !2163

check_subtype45:                                  ; preds = %parent_type_block47, %next_if
  %37 = phi i64 [ %28, %next_if ], [ %typeid.parent49, %parent_type_block47 ], !dbg !2163
  %eq46 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %37, !dbg !2163
  br i1 %eq46, label %result_block50, label %parent_type_block47, !dbg !2163

parent_type_block47:                              ; preds = %check_subtype45
  %38 = inttoptr i64 %37 to ptr, !dbg !2163
  %ptradd48 = getelementptr inbounds i8, ptr %38, i64 8, !dbg !2163
  %typeid.parent49 = load i64, ptr %ptradd48, align 8, !dbg !2163
  %39 = icmp eq i64 %typeid.parent49, 0, !dbg !2163
  br i1 %39, label %result_block50, label %check_subtype45, !dbg !2163

result_block50:                                   ; preds = %parent_type_block47, %check_subtype45
  %40 = phi i1 [ false, %parent_type_block47 ], [ true, %check_subtype45 ], !dbg !2163
  br i1 %40, label %switch.case51, label %next_if56, !dbg !2163

switch.case51:                                    ; preds = %result_block50
  %41 = load ptr, ptr %arg, align 8, !dbg !2164
  %checknull53 = icmp eq ptr %41, null, !dbg !2164
  %42 = call i1 @llvm.expect.i1(i1 %checknull53, i1 false), !dbg !2164
  br i1 %42, label %panic54, label %checkok55, !dbg !2164

checkok55:                                        ; preds = %switch.case51
  %43 = load i8, ptr %41, align 1, !dbg !2164
  %sifp = sitofp i8 %43 to double, !dbg !2164
  store double %sifp, ptr %0, align 8, !dbg !2164
  ret i64 0, !dbg !2164

next_if56:                                        ; preds = %result_block50
  br label %check_subtype57, !dbg !2166

check_subtype57:                                  ; preds = %parent_type_block59, %next_if56
  %44 = phi i64 [ %28, %next_if56 ], [ %typeid.parent61, %parent_type_block59 ], !dbg !2166
  %eq58 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %44, !dbg !2166
  br i1 %eq58, label %result_block62, label %parent_type_block59, !dbg !2166

parent_type_block59:                              ; preds = %check_subtype57
  %45 = inttoptr i64 %44 to ptr, !dbg !2166
  %ptradd60 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !2166
  %typeid.parent61 = load i64, ptr %ptradd60, align 8, !dbg !2166
  %46 = icmp eq i64 %typeid.parent61, 0, !dbg !2166
  br i1 %46, label %result_block62, label %check_subtype57, !dbg !2166

result_block62:                                   ; preds = %parent_type_block59, %check_subtype57
  %47 = phi i1 [ false, %parent_type_block59 ], [ true, %check_subtype57 ], !dbg !2166
  br i1 %47, label %switch.case63, label %next_if77, !dbg !2166

switch.case63:                                    ; preds = %result_block62
  %48 = load ptr, ptr %arg, align 8, !dbg !2167
  %checknull65 = icmp eq ptr %48, null, !dbg !2167
  %49 = call i1 @llvm.expect.i1(i1 %checknull65, i1 false), !dbg !2167
  br i1 %49, label %panic66, label %checkok67, !dbg !2167

checkok67:                                        ; preds = %switch.case63
  %50 = ptrtoint ptr %48 to i64, !dbg !2167
  %51 = urem i64 %50, 2, !dbg !2167
  %52 = icmp ne i64 %51, 0, !dbg !2167
  %53 = call i1 @llvm.expect.i1(i1 %52, i1 false), !dbg !2167
  br i1 %53, label %panic68, label %checkok75, !dbg !2167

checkok75:                                        ; preds = %checkok67
  %54 = load i16, ptr %48, align 2, !dbg !2167
  %sifp76 = sitofp i16 %54 to double, !dbg !2167
  store double %sifp76, ptr %0, align 8, !dbg !2167
  ret i64 0, !dbg !2167

next_if77:                                        ; preds = %result_block62
  br label %check_subtype78, !dbg !2169

check_subtype78:                                  ; preds = %parent_type_block80, %next_if77
  %55 = phi i64 [ %28, %next_if77 ], [ %typeid.parent82, %parent_type_block80 ], !dbg !2169
  %eq79 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %55, !dbg !2169
  br i1 %eq79, label %result_block83, label %parent_type_block80, !dbg !2169

parent_type_block80:                              ; preds = %check_subtype78
  %56 = inttoptr i64 %55 to ptr, !dbg !2169
  %ptradd81 = getelementptr inbounds i8, ptr %56, i64 8, !dbg !2169
  %typeid.parent82 = load i64, ptr %ptradd81, align 8, !dbg !2169
  %57 = icmp eq i64 %typeid.parent82, 0, !dbg !2169
  br i1 %57, label %result_block83, label %check_subtype78, !dbg !2169

result_block83:                                   ; preds = %parent_type_block80, %check_subtype78
  %58 = phi i1 [ false, %parent_type_block80 ], [ true, %check_subtype78 ], !dbg !2169
  br i1 %58, label %switch.case84, label %next_if98, !dbg !2169

switch.case84:                                    ; preds = %result_block83
  %59 = load ptr, ptr %arg, align 8, !dbg !2170
  %checknull86 = icmp eq ptr %59, null, !dbg !2170
  %60 = call i1 @llvm.expect.i1(i1 %checknull86, i1 false), !dbg !2170
  br i1 %60, label %panic87, label %checkok88, !dbg !2170

checkok88:                                        ; preds = %switch.case84
  %61 = ptrtoint ptr %59 to i64, !dbg !2170
  %62 = urem i64 %61, 4, !dbg !2170
  %63 = icmp ne i64 %62, 0, !dbg !2170
  %64 = call i1 @llvm.expect.i1(i1 %63, i1 false), !dbg !2170
  br i1 %64, label %panic89, label %checkok96, !dbg !2170

checkok96:                                        ; preds = %checkok88
  %65 = load i32, ptr %59, align 4, !dbg !2170
  %sifp97 = sitofp i32 %65 to double, !dbg !2170
  store double %sifp97, ptr %0, align 8, !dbg !2170
  ret i64 0, !dbg !2170

next_if98:                                        ; preds = %result_block83
  br label %check_subtype99, !dbg !2172

check_subtype99:                                  ; preds = %parent_type_block101, %next_if98
  %66 = phi i64 [ %28, %next_if98 ], [ %typeid.parent103, %parent_type_block101 ], !dbg !2172
  %eq100 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %66, !dbg !2172
  br i1 %eq100, label %result_block104, label %parent_type_block101, !dbg !2172

parent_type_block101:                             ; preds = %check_subtype99
  %67 = inttoptr i64 %66 to ptr, !dbg !2172
  %ptradd102 = getelementptr inbounds i8, ptr %67, i64 8, !dbg !2172
  %typeid.parent103 = load i64, ptr %ptradd102, align 8, !dbg !2172
  %68 = icmp eq i64 %typeid.parent103, 0, !dbg !2172
  br i1 %68, label %result_block104, label %check_subtype99, !dbg !2172

result_block104:                                  ; preds = %parent_type_block101, %check_subtype99
  %69 = phi i1 [ false, %parent_type_block101 ], [ true, %check_subtype99 ], !dbg !2172
  br i1 %69, label %switch.case105, label %next_if119, !dbg !2172

switch.case105:                                   ; preds = %result_block104
  %70 = load ptr, ptr %arg, align 8, !dbg !2173
  %checknull107 = icmp eq ptr %70, null, !dbg !2173
  %71 = call i1 @llvm.expect.i1(i1 %checknull107, i1 false), !dbg !2173
  br i1 %71, label %panic108, label %checkok109, !dbg !2173

checkok109:                                       ; preds = %switch.case105
  %72 = ptrtoint ptr %70 to i64, !dbg !2173
  %73 = urem i64 %72, 8, !dbg !2173
  %74 = icmp ne i64 %73, 0, !dbg !2173
  %75 = call i1 @llvm.expect.i1(i1 %74, i1 false), !dbg !2173
  br i1 %75, label %panic110, label %checkok117, !dbg !2173

checkok117:                                       ; preds = %checkok109
  %76 = load i64, ptr %70, align 8, !dbg !2173
  %sifp118 = sitofp i64 %76 to double, !dbg !2173
  store double %sifp118, ptr %0, align 8, !dbg !2173
  ret i64 0, !dbg !2173

next_if119:                                       ; preds = %result_block104
  br label %check_subtype120, !dbg !2175

check_subtype120:                                 ; preds = %parent_type_block122, %next_if119
  %77 = phi i64 [ %28, %next_if119 ], [ %typeid.parent124, %parent_type_block122 ], !dbg !2175
  %eq121 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %77, !dbg !2175
  br i1 %eq121, label %result_block125, label %parent_type_block122, !dbg !2175

parent_type_block122:                             ; preds = %check_subtype120
  %78 = inttoptr i64 %77 to ptr, !dbg !2175
  %ptradd123 = getelementptr inbounds i8, ptr %78, i64 8, !dbg !2175
  %typeid.parent124 = load i64, ptr %ptradd123, align 8, !dbg !2175
  %79 = icmp eq i64 %typeid.parent124, 0, !dbg !2175
  br i1 %79, label %result_block125, label %check_subtype120, !dbg !2175

result_block125:                                  ; preds = %parent_type_block122, %check_subtype120
  %80 = phi i1 [ false, %parent_type_block122 ], [ true, %check_subtype120 ], !dbg !2175
  br i1 %80, label %switch.case126, label %next_if140, !dbg !2175

switch.case126:                                   ; preds = %result_block125
  %81 = load ptr, ptr %arg, align 8, !dbg !2176
  %checknull128 = icmp eq ptr %81, null, !dbg !2176
  %82 = call i1 @llvm.expect.i1(i1 %checknull128, i1 false), !dbg !2176
  br i1 %82, label %panic129, label %checkok130, !dbg !2176

checkok130:                                       ; preds = %switch.case126
  %83 = ptrtoint ptr %81 to i64, !dbg !2176
  %84 = urem i64 %83, 16, !dbg !2176
  %85 = icmp ne i64 %84, 0, !dbg !2176
  %86 = call i1 @llvm.expect.i1(i1 %85, i1 false), !dbg !2176
  br i1 %86, label %panic131, label %checkok138, !dbg !2176

checkok138:                                       ; preds = %checkok130
  %87 = load i128, ptr %81, align 16, !dbg !2176
  %sifp139 = sitofp i128 %87 to double, !dbg !2176
  store double %sifp139, ptr %0, align 8, !dbg !2176
  ret i64 0, !dbg !2176

next_if140:                                       ; preds = %result_block125
  br label %check_subtype141, !dbg !2178

check_subtype141:                                 ; preds = %parent_type_block143, %next_if140
  %88 = phi i64 [ %28, %next_if140 ], [ %typeid.parent145, %parent_type_block143 ], !dbg !2178
  %eq142 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %88, !dbg !2178
  br i1 %eq142, label %result_block146, label %parent_type_block143, !dbg !2178

parent_type_block143:                             ; preds = %check_subtype141
  %89 = inttoptr i64 %88 to ptr, !dbg !2178
  %ptradd144 = getelementptr inbounds i8, ptr %89, i64 8, !dbg !2178
  %typeid.parent145 = load i64, ptr %ptradd144, align 8, !dbg !2178
  %90 = icmp eq i64 %typeid.parent145, 0, !dbg !2178
  br i1 %90, label %result_block146, label %check_subtype141, !dbg !2178

result_block146:                                  ; preds = %parent_type_block143, %check_subtype141
  %91 = phi i1 [ false, %parent_type_block143 ], [ true, %check_subtype141 ], !dbg !2178
  br i1 %91, label %switch.case147, label %next_if153, !dbg !2178

switch.case147:                                   ; preds = %result_block146
  %92 = load ptr, ptr %arg, align 8, !dbg !2179
  %checknull149 = icmp eq ptr %92, null, !dbg !2179
  %93 = call i1 @llvm.expect.i1(i1 %checknull149, i1 false), !dbg !2179
  br i1 %93, label %panic150, label %checkok151, !dbg !2179

checkok151:                                       ; preds = %switch.case147
  %94 = load i8, ptr %92, align 1, !dbg !2179
  %uifp152 = uitofp i8 %94 to double, !dbg !2179
  store double %uifp152, ptr %0, align 8, !dbg !2179
  ret i64 0, !dbg !2179

next_if153:                                       ; preds = %result_block146
  br label %check_subtype154, !dbg !2181

check_subtype154:                                 ; preds = %parent_type_block156, %next_if153
  %95 = phi i64 [ %28, %next_if153 ], [ %typeid.parent158, %parent_type_block156 ], !dbg !2181
  %eq155 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %95, !dbg !2181
  br i1 %eq155, label %result_block159, label %parent_type_block156, !dbg !2181

parent_type_block156:                             ; preds = %check_subtype154
  %96 = inttoptr i64 %95 to ptr, !dbg !2181
  %ptradd157 = getelementptr inbounds i8, ptr %96, i64 8, !dbg !2181
  %typeid.parent158 = load i64, ptr %ptradd157, align 8, !dbg !2181
  %97 = icmp eq i64 %typeid.parent158, 0, !dbg !2181
  br i1 %97, label %result_block159, label %check_subtype154, !dbg !2181

result_block159:                                  ; preds = %parent_type_block156, %check_subtype154
  %98 = phi i1 [ false, %parent_type_block156 ], [ true, %check_subtype154 ], !dbg !2181
  br i1 %98, label %switch.case160, label %next_if174, !dbg !2181

switch.case160:                                   ; preds = %result_block159
  %99 = load ptr, ptr %arg, align 8, !dbg !2182
  %checknull162 = icmp eq ptr %99, null, !dbg !2182
  %100 = call i1 @llvm.expect.i1(i1 %checknull162, i1 false), !dbg !2182
  br i1 %100, label %panic163, label %checkok164, !dbg !2182

checkok164:                                       ; preds = %switch.case160
  %101 = ptrtoint ptr %99 to i64, !dbg !2182
  %102 = urem i64 %101, 2, !dbg !2182
  %103 = icmp ne i64 %102, 0, !dbg !2182
  %104 = call i1 @llvm.expect.i1(i1 %103, i1 false), !dbg !2182
  br i1 %104, label %panic165, label %checkok172, !dbg !2182

checkok172:                                       ; preds = %checkok164
  %105 = load i16, ptr %99, align 2, !dbg !2182
  %uifp173 = uitofp i16 %105 to double, !dbg !2182
  store double %uifp173, ptr %0, align 8, !dbg !2182
  ret i64 0, !dbg !2182

next_if174:                                       ; preds = %result_block159
  br label %check_subtype175, !dbg !2184

check_subtype175:                                 ; preds = %parent_type_block177, %next_if174
  %106 = phi i64 [ %28, %next_if174 ], [ %typeid.parent179, %parent_type_block177 ], !dbg !2184
  %eq176 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %106, !dbg !2184
  br i1 %eq176, label %result_block180, label %parent_type_block177, !dbg !2184

parent_type_block177:                             ; preds = %check_subtype175
  %107 = inttoptr i64 %106 to ptr, !dbg !2184
  %ptradd178 = getelementptr inbounds i8, ptr %107, i64 8, !dbg !2184
  %typeid.parent179 = load i64, ptr %ptradd178, align 8, !dbg !2184
  %108 = icmp eq i64 %typeid.parent179, 0, !dbg !2184
  br i1 %108, label %result_block180, label %check_subtype175, !dbg !2184

result_block180:                                  ; preds = %parent_type_block177, %check_subtype175
  %109 = phi i1 [ false, %parent_type_block177 ], [ true, %check_subtype175 ], !dbg !2184
  br i1 %109, label %switch.case181, label %next_if195, !dbg !2184

switch.case181:                                   ; preds = %result_block180
  %110 = load ptr, ptr %arg, align 8, !dbg !2185
  %checknull183 = icmp eq ptr %110, null, !dbg !2185
  %111 = call i1 @llvm.expect.i1(i1 %checknull183, i1 false), !dbg !2185
  br i1 %111, label %panic184, label %checkok185, !dbg !2185

checkok185:                                       ; preds = %switch.case181
  %112 = ptrtoint ptr %110 to i64, !dbg !2185
  %113 = urem i64 %112, 4, !dbg !2185
  %114 = icmp ne i64 %113, 0, !dbg !2185
  %115 = call i1 @llvm.expect.i1(i1 %114, i1 false), !dbg !2185
  br i1 %115, label %panic186, label %checkok193, !dbg !2185

checkok193:                                       ; preds = %checkok185
  %116 = load i32, ptr %110, align 4, !dbg !2185
  %uifp194 = uitofp i32 %116 to double, !dbg !2185
  store double %uifp194, ptr %0, align 8, !dbg !2185
  ret i64 0, !dbg !2185

next_if195:                                       ; preds = %result_block180
  br label %check_subtype196, !dbg !2187

check_subtype196:                                 ; preds = %parent_type_block198, %next_if195
  %117 = phi i64 [ %28, %next_if195 ], [ %typeid.parent200, %parent_type_block198 ], !dbg !2187
  %eq197 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %117, !dbg !2187
  br i1 %eq197, label %result_block201, label %parent_type_block198, !dbg !2187

parent_type_block198:                             ; preds = %check_subtype196
  %118 = inttoptr i64 %117 to ptr, !dbg !2187
  %ptradd199 = getelementptr inbounds i8, ptr %118, i64 8, !dbg !2187
  %typeid.parent200 = load i64, ptr %ptradd199, align 8, !dbg !2187
  %119 = icmp eq i64 %typeid.parent200, 0, !dbg !2187
  br i1 %119, label %result_block201, label %check_subtype196, !dbg !2187

result_block201:                                  ; preds = %parent_type_block198, %check_subtype196
  %120 = phi i1 [ false, %parent_type_block198 ], [ true, %check_subtype196 ], !dbg !2187
  br i1 %120, label %switch.case202, label %next_if216, !dbg !2187

switch.case202:                                   ; preds = %result_block201
  %121 = load ptr, ptr %arg, align 8, !dbg !2188
  %checknull204 = icmp eq ptr %121, null, !dbg !2188
  %122 = call i1 @llvm.expect.i1(i1 %checknull204, i1 false), !dbg !2188
  br i1 %122, label %panic205, label %checkok206, !dbg !2188

checkok206:                                       ; preds = %switch.case202
  %123 = ptrtoint ptr %121 to i64, !dbg !2188
  %124 = urem i64 %123, 8, !dbg !2188
  %125 = icmp ne i64 %124, 0, !dbg !2188
  %126 = call i1 @llvm.expect.i1(i1 %125, i1 false), !dbg !2188
  br i1 %126, label %panic207, label %checkok214, !dbg !2188

checkok214:                                       ; preds = %checkok206
  %127 = load i64, ptr %121, align 8, !dbg !2188
  %uifp215 = uitofp i64 %127 to double, !dbg !2188
  store double %uifp215, ptr %0, align 8, !dbg !2188
  ret i64 0, !dbg !2188

next_if216:                                       ; preds = %result_block201
  br label %check_subtype217, !dbg !2190

check_subtype217:                                 ; preds = %parent_type_block219, %next_if216
  %128 = phi i64 [ %28, %next_if216 ], [ %typeid.parent221, %parent_type_block219 ], !dbg !2190
  %eq218 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %128, !dbg !2190
  br i1 %eq218, label %result_block222, label %parent_type_block219, !dbg !2190

parent_type_block219:                             ; preds = %check_subtype217
  %129 = inttoptr i64 %128 to ptr, !dbg !2190
  %ptradd220 = getelementptr inbounds i8, ptr %129, i64 8, !dbg !2190
  %typeid.parent221 = load i64, ptr %ptradd220, align 8, !dbg !2190
  %130 = icmp eq i64 %typeid.parent221, 0, !dbg !2190
  br i1 %130, label %result_block222, label %check_subtype217, !dbg !2190

result_block222:                                  ; preds = %parent_type_block219, %check_subtype217
  %131 = phi i1 [ false, %parent_type_block219 ], [ true, %check_subtype217 ], !dbg !2190
  br i1 %131, label %switch.case223, label %next_if237, !dbg !2190

switch.case223:                                   ; preds = %result_block222
  %132 = load ptr, ptr %arg, align 8, !dbg !2191
  %checknull225 = icmp eq ptr %132, null, !dbg !2191
  %133 = call i1 @llvm.expect.i1(i1 %checknull225, i1 false), !dbg !2191
  br i1 %133, label %panic226, label %checkok227, !dbg !2191

checkok227:                                       ; preds = %switch.case223
  %134 = ptrtoint ptr %132 to i64, !dbg !2191
  %135 = urem i64 %134, 16, !dbg !2191
  %136 = icmp ne i64 %135, 0, !dbg !2191
  %137 = call i1 @llvm.expect.i1(i1 %136, i1 false), !dbg !2191
  br i1 %137, label %panic228, label %checkok235, !dbg !2191

checkok235:                                       ; preds = %checkok227
  %138 = load i128, ptr %132, align 16, !dbg !2191
  %uifp236 = uitofp i128 %138 to double, !dbg !2191
  store double %uifp236, ptr %0, align 8, !dbg !2191
  ret i64 0, !dbg !2191

next_if237:                                       ; preds = %result_block222
  br label %check_subtype238, !dbg !2193

check_subtype238:                                 ; preds = %parent_type_block240, %next_if237
  %139 = phi i64 [ %28, %next_if237 ], [ %typeid.parent242, %parent_type_block240 ], !dbg !2193
  %eq239 = icmp eq i64 ptrtoint (ptr @"$ct.float" to i64), %139, !dbg !2193
  br i1 %eq239, label %result_block243, label %parent_type_block240, !dbg !2193

parent_type_block240:                             ; preds = %check_subtype238
  %140 = inttoptr i64 %139 to ptr, !dbg !2193
  %ptradd241 = getelementptr inbounds i8, ptr %140, i64 8, !dbg !2193
  %typeid.parent242 = load i64, ptr %ptradd241, align 8, !dbg !2193
  %141 = icmp eq i64 %typeid.parent242, 0, !dbg !2193
  br i1 %141, label %result_block243, label %check_subtype238, !dbg !2193

result_block243:                                  ; preds = %parent_type_block240, %check_subtype238
  %142 = phi i1 [ false, %parent_type_block240 ], [ true, %check_subtype238 ], !dbg !2193
  br i1 %142, label %switch.case244, label %next_if257, !dbg !2193

switch.case244:                                   ; preds = %result_block243
  %143 = load ptr, ptr %arg, align 8, !dbg !2194
  %checknull246 = icmp eq ptr %143, null, !dbg !2194
  %144 = call i1 @llvm.expect.i1(i1 %checknull246, i1 false), !dbg !2194
  br i1 %144, label %panic247, label %checkok248, !dbg !2194

checkok248:                                       ; preds = %switch.case244
  %145 = ptrtoint ptr %143 to i64, !dbg !2194
  %146 = urem i64 %145, 4, !dbg !2194
  %147 = icmp ne i64 %146, 0, !dbg !2194
  %148 = call i1 @llvm.expect.i1(i1 %147, i1 false), !dbg !2194
  br i1 %148, label %panic249, label %checkok256, !dbg !2194

checkok256:                                       ; preds = %checkok248
  %149 = load float, ptr %143, align 4, !dbg !2194
  %fpfpext = fpext float %149 to double, !dbg !2194
  store double %fpfpext, ptr %0, align 8, !dbg !2194
  ret i64 0, !dbg !2194

next_if257:                                       ; preds = %result_block243
  br label %check_subtype258, !dbg !2196

check_subtype258:                                 ; preds = %parent_type_block260, %next_if257
  %150 = phi i64 [ %28, %next_if257 ], [ %typeid.parent262, %parent_type_block260 ], !dbg !2196
  %eq259 = icmp eq i64 ptrtoint (ptr @"$ct.double" to i64), %150, !dbg !2196
  br i1 %eq259, label %result_block263, label %parent_type_block260, !dbg !2196

parent_type_block260:                             ; preds = %check_subtype258
  %151 = inttoptr i64 %150 to ptr, !dbg !2196
  %ptradd261 = getelementptr inbounds i8, ptr %151, i64 8, !dbg !2196
  %typeid.parent262 = load i64, ptr %ptradd261, align 8, !dbg !2196
  %152 = icmp eq i64 %typeid.parent262, 0, !dbg !2196
  br i1 %152, label %result_block263, label %check_subtype258, !dbg !2196

result_block263:                                  ; preds = %parent_type_block260, %check_subtype258
  %153 = phi i1 [ false, %parent_type_block260 ], [ true, %check_subtype258 ], !dbg !2196
  br i1 %153, label %switch.case264, label %next_if277, !dbg !2196

switch.case264:                                   ; preds = %result_block263
  %154 = load ptr, ptr %arg, align 8, !dbg !2197
  %checknull266 = icmp eq ptr %154, null, !dbg !2197
  %155 = call i1 @llvm.expect.i1(i1 %checknull266, i1 false), !dbg !2197
  br i1 %155, label %panic267, label %checkok268, !dbg !2197

checkok268:                                       ; preds = %switch.case264
  %156 = ptrtoint ptr %154 to i64, !dbg !2197
  %157 = urem i64 %156, 8, !dbg !2197
  %158 = icmp ne i64 %157, 0, !dbg !2197
  %159 = call i1 @llvm.expect.i1(i1 %158, i1 false), !dbg !2197
  br i1 %159, label %panic269, label %checkok276, !dbg !2197

checkok276:                                       ; preds = %checkok268
  %160 = load double, ptr %154, align 8, !dbg !2197
  store double %160, ptr %0, align 8, !dbg !2197
  ret i64 0, !dbg !2197

next_if277:                                       ; preds = %result_block263
  br label %switch.default, !dbg !2197

switch.default:                                   ; preds = %next_if277
  ret i64 ptrtoint (ptr @std.io.BAD_FORMAT to i64), !dbg !2199

panic:                                            ; preds = %assert_ok
  %161 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2155
  call void %161(ptr @.panic_msg.2, i64 45, ptr @.file.15, i64 10, ptr @.func.50, i64 14, i32 241) #5, !dbg !2155
  unreachable, !dbg !2155

panic2:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %162 = insertvalue %any undef, ptr %taddr, 0
  %163 = insertvalue %any %162, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr3, align 8
  %164 = insertvalue %any undef, ptr %taddr3, 0
  %165 = insertvalue %any %164, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %163, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %165, ptr %ptradd4, align 16
  %166 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %166, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.15, i64 10, ptr @.func.50, i64 14, i32 241, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2155
  unreachable, !dbg !2155

panic7:                                           ; preds = %checkok5
  %167 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2156
  call void %167(ptr @.panic_msg.2, i64 45, ptr @.file.15, i64 10, ptr @.func.50, i64 14, i32 241) #5, !dbg !2156
  unreachable, !dbg !2156

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr10, align 8
  %168 = insertvalue %any undef, ptr %taddr10, 0
  %169 = insertvalue %any %168, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr11, align 8
  %170 = insertvalue %any undef, ptr %taddr11, 0
  %171 = insertvalue %any %170, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %169, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %171, ptr %ptradd13, align 16
  %172 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %172, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.15, i64 10, ptr @.func.50, i64 14, i32 241, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !2156
  unreachable, !dbg !2156

panic43:                                          ; preds = %switch.case
  %173 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2161
  call void %173(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 104) #5, !dbg !2161
  unreachable, !dbg !2161

panic54:                                          ; preds = %switch.case51
  %174 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2164
  call void %174(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 106) #5, !dbg !2164
  unreachable, !dbg !2164

panic66:                                          ; preds = %switch.case63
  %175 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2167
  call void %175(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 108) #5, !dbg !2167
  unreachable, !dbg !2167

panic68:                                          ; preds = %checkok67
  store i64 2, ptr %taddr69, align 8
  %176 = insertvalue %any undef, ptr %taddr69, 0
  %177 = insertvalue %any %176, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr70, align 8
  %178 = insertvalue %any undef, ptr %taddr70, 0
  %179 = insertvalue %any %178, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %177, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %179, ptr %ptradd72, align 16
  %180 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %180, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 108, ptr byval(%"any[]") align 8 %indirectarg74) #5, !dbg !2167
  unreachable, !dbg !2167

panic87:                                          ; preds = %switch.case84
  %181 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2170
  call void %181(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 110) #5, !dbg !2170
  unreachable, !dbg !2170

panic89:                                          ; preds = %checkok88
  store i64 4, ptr %taddr90, align 8
  %182 = insertvalue %any undef, ptr %taddr90, 0
  %183 = insertvalue %any %182, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %62, ptr %taddr91, align 8
  %184 = insertvalue %any undef, ptr %taddr91, 0
  %185 = insertvalue %any %184, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %183, ptr %varargslots92, align 16
  %ptradd93 = getelementptr inbounds i8, ptr %varargslots92, i64 16
  store %any %185, ptr %ptradd93, align 16
  %186 = insertvalue %"any[]" undef, ptr %varargslots92, 0
  %"$$temp94" = insertvalue %"any[]" %186, i64 2, 1
  store %"any[]" %"$$temp94", ptr %indirectarg95, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 110, ptr byval(%"any[]") align 8 %indirectarg95) #5, !dbg !2170
  unreachable, !dbg !2170

panic108:                                         ; preds = %switch.case105
  %187 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2173
  call void %187(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 112) #5, !dbg !2173
  unreachable, !dbg !2173

panic110:                                         ; preds = %checkok109
  store i64 8, ptr %taddr111, align 8
  %188 = insertvalue %any undef, ptr %taddr111, 0
  %189 = insertvalue %any %188, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %73, ptr %taddr112, align 8
  %190 = insertvalue %any undef, ptr %taddr112, 0
  %191 = insertvalue %any %190, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %189, ptr %varargslots113, align 16
  %ptradd114 = getelementptr inbounds i8, ptr %varargslots113, i64 16
  store %any %191, ptr %ptradd114, align 16
  %192 = insertvalue %"any[]" undef, ptr %varargslots113, 0
  %"$$temp115" = insertvalue %"any[]" %192, i64 2, 1
  store %"any[]" %"$$temp115", ptr %indirectarg116, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 112, ptr byval(%"any[]") align 8 %indirectarg116) #5, !dbg !2173
  unreachable, !dbg !2173

panic129:                                         ; preds = %switch.case126
  %193 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2176
  call void %193(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 114) #5, !dbg !2176
  unreachable, !dbg !2176

panic131:                                         ; preds = %checkok130
  store i64 16, ptr %taddr132, align 8
  %194 = insertvalue %any undef, ptr %taddr132, 0
  %195 = insertvalue %any %194, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %84, ptr %taddr133, align 8
  %196 = insertvalue %any undef, ptr %taddr133, 0
  %197 = insertvalue %any %196, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %195, ptr %varargslots134, align 16
  %ptradd135 = getelementptr inbounds i8, ptr %varargslots134, i64 16
  store %any %197, ptr %ptradd135, align 16
  %198 = insertvalue %"any[]" undef, ptr %varargslots134, 0
  %"$$temp136" = insertvalue %"any[]" %198, i64 2, 1
  store %"any[]" %"$$temp136", ptr %indirectarg137, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 114, ptr byval(%"any[]") align 8 %indirectarg137) #5, !dbg !2176
  unreachable, !dbg !2176

panic150:                                         ; preds = %switch.case147
  %199 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2179
  call void %199(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 116) #5, !dbg !2179
  unreachable, !dbg !2179

panic163:                                         ; preds = %switch.case160
  %200 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2182
  call void %200(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 118) #5, !dbg !2182
  unreachable, !dbg !2182

panic165:                                         ; preds = %checkok164
  store i64 2, ptr %taddr166, align 8
  %201 = insertvalue %any undef, ptr %taddr166, 0
  %202 = insertvalue %any %201, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %102, ptr %taddr167, align 8
  %203 = insertvalue %any undef, ptr %taddr167, 0
  %204 = insertvalue %any %203, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %202, ptr %varargslots168, align 16
  %ptradd169 = getelementptr inbounds i8, ptr %varargslots168, i64 16
  store %any %204, ptr %ptradd169, align 16
  %205 = insertvalue %"any[]" undef, ptr %varargslots168, 0
  %"$$temp170" = insertvalue %"any[]" %205, i64 2, 1
  store %"any[]" %"$$temp170", ptr %indirectarg171, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 118, ptr byval(%"any[]") align 8 %indirectarg171) #5, !dbg !2182
  unreachable, !dbg !2182

panic184:                                         ; preds = %switch.case181
  %206 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2185
  call void %206(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 120) #5, !dbg !2185
  unreachable, !dbg !2185

panic186:                                         ; preds = %checkok185
  store i64 4, ptr %taddr187, align 8
  %207 = insertvalue %any undef, ptr %taddr187, 0
  %208 = insertvalue %any %207, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %113, ptr %taddr188, align 8
  %209 = insertvalue %any undef, ptr %taddr188, 0
  %210 = insertvalue %any %209, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %208, ptr %varargslots189, align 16
  %ptradd190 = getelementptr inbounds i8, ptr %varargslots189, i64 16
  store %any %210, ptr %ptradd190, align 16
  %211 = insertvalue %"any[]" undef, ptr %varargslots189, 0
  %"$$temp191" = insertvalue %"any[]" %211, i64 2, 1
  store %"any[]" %"$$temp191", ptr %indirectarg192, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 120, ptr byval(%"any[]") align 8 %indirectarg192) #5, !dbg !2185
  unreachable, !dbg !2185

panic205:                                         ; preds = %switch.case202
  %212 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2188
  call void %212(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 122) #5, !dbg !2188
  unreachable, !dbg !2188

panic207:                                         ; preds = %checkok206
  store i64 8, ptr %taddr208, align 8
  %213 = insertvalue %any undef, ptr %taddr208, 0
  %214 = insertvalue %any %213, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %124, ptr %taddr209, align 8
  %215 = insertvalue %any undef, ptr %taddr209, 0
  %216 = insertvalue %any %215, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %214, ptr %varargslots210, align 16
  %ptradd211 = getelementptr inbounds i8, ptr %varargslots210, i64 16
  store %any %216, ptr %ptradd211, align 16
  %217 = insertvalue %"any[]" undef, ptr %varargslots210, 0
  %"$$temp212" = insertvalue %"any[]" %217, i64 2, 1
  store %"any[]" %"$$temp212", ptr %indirectarg213, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 122, ptr byval(%"any[]") align 8 %indirectarg213) #5, !dbg !2188
  unreachable, !dbg !2188

panic226:                                         ; preds = %switch.case223
  %218 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2191
  call void %218(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 124) #5, !dbg !2191
  unreachable, !dbg !2191

panic228:                                         ; preds = %checkok227
  store i64 16, ptr %taddr229, align 8
  %219 = insertvalue %any undef, ptr %taddr229, 0
  %220 = insertvalue %any %219, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %135, ptr %taddr230, align 8
  %221 = insertvalue %any undef, ptr %taddr230, 0
  %222 = insertvalue %any %221, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %220, ptr %varargslots231, align 16
  %ptradd232 = getelementptr inbounds i8, ptr %varargslots231, i64 16
  store %any %222, ptr %ptradd232, align 16
  %223 = insertvalue %"any[]" undef, ptr %varargslots231, 0
  %"$$temp233" = insertvalue %"any[]" %223, i64 2, 1
  store %"any[]" %"$$temp233", ptr %indirectarg234, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 124, ptr byval(%"any[]") align 8 %indirectarg234) #5, !dbg !2191
  unreachable, !dbg !2191

panic247:                                         ; preds = %switch.case244
  %224 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2194
  call void %224(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 126) #5, !dbg !2194
  unreachable, !dbg !2194

panic249:                                         ; preds = %checkok248
  store i64 4, ptr %taddr250, align 8
  %225 = insertvalue %any undef, ptr %taddr250, 0
  %226 = insertvalue %any %225, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %146, ptr %taddr251, align 8
  %227 = insertvalue %any undef, ptr %taddr251, 0
  %228 = insertvalue %any %227, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %226, ptr %varargslots252, align 16
  %ptradd253 = getelementptr inbounds i8, ptr %varargslots252, i64 16
  store %any %228, ptr %ptradd253, align 16
  %229 = insertvalue %"any[]" undef, ptr %varargslots252, 0
  %"$$temp254" = insertvalue %"any[]" %229, i64 2, 1
  store %"any[]" %"$$temp254", ptr %indirectarg255, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 126, ptr byval(%"any[]") align 8 %indirectarg255) #5, !dbg !2194
  unreachable, !dbg !2194

panic267:                                         ; preds = %switch.case264
  %230 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2197
  call void %230(ptr @.panic_msg.14, i64 42, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 128) #5, !dbg !2197
  unreachable, !dbg !2197

panic269:                                         ; preds = %checkok268
  store i64 8, ptr %taddr270, align 8
  %231 = insertvalue %any undef, ptr %taddr270, 0
  %232 = insertvalue %any %231, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %157, ptr %taddr271, align 8
  %233 = insertvalue %any undef, ptr %taddr271, 0
  %234 = insertvalue %any %233, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %232, ptr %varargslots272, align 16
  %ptradd273 = getelementptr inbounds i8, ptr %varargslots272, i64 16
  store %any %234, ptr %ptradd273, align 16
  %235 = insertvalue %"any[]" undef, ptr %varargslots272, 0
  %"$$temp274" = insertvalue %"any[]" %235, i64 2, 1
  store %"any[]" %"$$temp274", ptr %indirectarg275, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.50, i64 14, i32 128, ptr byval(%"any[]") align 8 %indirectarg275) #5, !dbg !2197
  unreachable, !dbg !2197
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @std.io.simple_atoi(ptr %0, i64 %1, ptr %2) #0 !dbg !2201 {
entry:
  %buf = alloca ptr, align 8
  %maxlen = alloca i64, align 8
  %len_ptr = alloca ptr, align 8
  %i = alloca i32, align 4
  %len = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %c5 = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots10 = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  store ptr %0, ptr %buf, align 8
    #dbg_declare(ptr %buf, !2205, !DIExpression(), !2206)
  store i64 %1, ptr %maxlen, align 8
    #dbg_declare(ptr %maxlen, !2207, !DIExpression(), !2208)
  store ptr %2, ptr %len_ptr, align 8
    #dbg_declare(ptr %len_ptr, !2209, !DIExpression(), !2210)
    #dbg_declare(ptr %i, !2211, !DIExpression(), !2212)
  store i32 0, ptr %i, align 4, !dbg !2213
    #dbg_declare(ptr %len, !2214, !DIExpression(), !2215)
  %3 = load ptr, ptr %len_ptr, align 8, !dbg !2216
  %checknull = icmp eq ptr %3, null, !dbg !2216
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2216
  br i1 %4, label %panic, label %checkok, !dbg !2216

checkok:                                          ; preds = %entry
  %5 = ptrtoint ptr %3 to i64, !dbg !2216
  %6 = urem i64 %5, 8, !dbg !2216
  %7 = icmp ne i64 %6, 0, !dbg !2216
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !2216
  br i1 %8, label %panic1, label %checkok3, !dbg !2216

checkok3:                                         ; preds = %checkok
  %9 = load i64, ptr %3, align 8, !dbg !2216
  store i64 %9, ptr %len, align 8, !dbg !2216
  br label %loop.cond, !dbg !2217

loop.cond:                                        ; preds = %if.exit, %checkok3
  %10 = load i64, ptr %len, align 8, !dbg !2218
  %11 = load i64, ptr %maxlen, align 8, !dbg !2220
  %lt = icmp ult i64 %10, %11, !dbg !2218
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2218

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !2221, !DIExpression(), !2223)
  %12 = load ptr, ptr %buf, align 8, !dbg !2224
  %13 = load i64, ptr %len, align 8, !dbg !2225
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !2225
  %14 = load i8, ptr %ptradd4, align 1, !dbg !2225
  store i8 %14, ptr %c, align 1, !dbg !2225
  %15 = load i8, ptr %c, align 1
  store i8 %15, ptr %c5, align 1
  %16 = load i8, ptr %c5, align 1
  store i8 %16, ptr %c6, align 1
  %17 = load i8, ptr %c6, align 1, !dbg !2226
  %zext = zext i8 %17 to i64, !dbg !2226
  %ge = icmp uge i64 %zext, 256, !dbg !2226
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2226
  br i1 %18, label %panic7, label %checkok14, !dbg !2226

checkok14:                                        ; preds = %loop.body
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !2226
  %19 = load i16, ptr %ptroffset, align 2, !dbg !2226
  %lshrl = lshr i16 %19, 2, !dbg !2226
  %20 = and i16 1, %lshrl, !dbg !2226
  %trunc = trunc i16 %20 to i8, !dbg !2226
  %21 = trunc i8 %trunc to i1, !dbg !2226
  %not = xor i1 %21, true, !dbg !2226
  br i1 %not, label %if.then, label %if.exit, !dbg !2226

if.then:                                          ; preds = %checkok14
  br label %loop.exit, !dbg !2232

if.exit:                                          ; preds = %checkok14
  %22 = load i32, ptr %i, align 4, !dbg !2233
  %mul = mul i32 %22, 10, !dbg !2233
  %23 = load i8, ptr %c, align 1, !dbg !2234
  %zext15 = zext i8 %23 to i32, !dbg !2234
  %add = add i32 %mul, %zext15, !dbg !2233
  %sub = sub i32 %add, 48, !dbg !2233
  store i32 %sub, ptr %i, align 4, !dbg !2233
  %24 = load i64, ptr %len, align 8, !dbg !2235
  %add16 = add i64 %24, 1, !dbg !2235
  store i64 %add16, ptr %len, align 8, !dbg !2235
  br label %loop.cond, !dbg !2235

loop.exit:                                        ; preds = %if.then, %loop.cond
  %25 = load ptr, ptr %len_ptr, align 8, !dbg !2236
  %checknull17 = icmp eq ptr %25, null, !dbg !2236
  %26 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !2236
  br i1 %26, label %panic18, label %checkok19, !dbg !2236

checkok19:                                        ; preds = %loop.exit
  %27 = ptrtoint ptr %25 to i64, !dbg !2236
  %28 = urem i64 %27, 8, !dbg !2236
  %29 = icmp ne i64 %28, 0, !dbg !2236
  %30 = call i1 @llvm.expect.i1(i1 %29, i1 false), !dbg !2236
  br i1 %30, label %panic20, label %checkok27, !dbg !2236

checkok27:                                        ; preds = %checkok19
  %31 = load i64, ptr %len, align 8, !dbg !2237
  store i64 %31, ptr %25, align 8, !dbg !2237
  %32 = load i32, ptr %i, align 4, !dbg !2238
  ret i32 %32, !dbg !2238

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2216
  call void %33(ptr @.panic_msg.51, i64 48, ptr @.file.44, i64 20, ptr @.func.52, i64 11, i32 146) #5, !dbg !2216
  unreachable, !dbg !2216

panic1:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %34 = insertvalue %any undef, ptr %taddr, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr2, align 8
  %36 = insertvalue %any undef, ptr %taddr2, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %35, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %37, ptr %ptradd, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.52, i64 11, i32 146, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2216
  unreachable, !dbg !2216

panic7:                                           ; preds = %loop.body
  store i64 256, ptr %taddr8, align 8
  %39 = insertvalue %any undef, ptr %taddr8, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr9, align 8
  %41 = insertvalue %any undef, ptr %taddr9, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %40, ptr %varargslots10, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots10, i64 16
  store %any %42, ptr %ptradd11, align 16
  %43 = insertvalue %"any[]" undef, ptr %varargslots10, 0
  %"$$temp12" = insertvalue %"any[]" %43, i64 2, 1
  store %"any[]" %"$$temp12", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.53, i64 8, ptr @.func.52, i64 11, i32 9, ptr byval(%"any[]") align 8 %indirectarg13) #5, !dbg !2226
  unreachable, !dbg !2226

panic18:                                          ; preds = %loop.exit
  %44 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2236
  call void %44(ptr @.panic_msg.51, i64 48, ptr @.file.44, i64 20, ptr @.func.52, i64 11, i32 154) #5, !dbg !2236
  unreachable, !dbg !2236

panic20:                                          ; preds = %checkok19
  store i64 8, ptr %taddr21, align 8
  %45 = insertvalue %any undef, ptr %taddr21, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %28, ptr %taddr22, align 8
  %47 = insertvalue %any undef, ptr %taddr22, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %46, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %48, ptr %ptradd24, align 16
  %49 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %49, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.52, i64 11, i32 154, ptr byval(%"any[]") align 8 %indirectarg26) #5, !dbg !2236
  unreachable, !dbg !2236
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.fmt_u(i64 %0, i64 %1, ptr %2) #0 comdat !dbg !2239 {
entry:
  %x = alloca i128, align 16
  %s = alloca ptr, align 8
  %y = alloca i64, align 8
  store i64 %0, ptr %x, align 16
  %ptradd = getelementptr inbounds i8, ptr %x, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %x, !2242, !DIExpression(), !2243)
  store ptr %2, ptr %s, align 8
    #dbg_declare(ptr %s, !2244, !DIExpression(), !2245)
  br label %loop.cond, !dbg !2246

loop.cond:                                        ; preds = %checkok, %entry
  %3 = load i128, ptr %x, align 16, !dbg !2247
  %gt = icmp ugt i128 %3, 18446744073709551615, !dbg !2247
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !2247

loop.body:                                        ; preds = %loop.cond
  %4 = load ptr, ptr %s, align 8, !dbg !2249
  %ptradd_any = getelementptr i8, ptr %4, i8 -1, !dbg !2249
  store ptr %ptradd_any, ptr %s, align 8, !dbg !2249
  %checknull = icmp eq ptr %ptradd_any, null, !dbg !2249
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2249
  br i1 %5, label %panic, label %checkok, !dbg !2249

checkok:                                          ; preds = %loop.body
  %6 = load i128, ptr %x, align 16, !dbg !2250
  %smod = srem i128 %6, 10, !dbg !2251
  %trunc = trunc i128 %smod to i8, !dbg !2251
  %zext = zext i8 %trunc to i32, !dbg !2251
  %add = add i32 48, %zext, !dbg !2252
  %trunc1 = trunc i32 %add to i8, !dbg !2252
  store i8 %trunc1, ptr %ptradd_any, align 1, !dbg !2252
  %7 = load i128, ptr %x, align 16, !dbg !2253
  %udiv = udiv i128 %7, 10, !dbg !2253
  store i128 %udiv, ptr %x, align 16, !dbg !2253
  br label %loop.cond, !dbg !2253

loop.exit:                                        ; preds = %loop.cond
    #dbg_declare(ptr %y, !2254, !DIExpression(), !2256)
  %8 = load i128, ptr %x, align 16, !dbg !2257
  %trunc2 = trunc i128 %8 to i64, !dbg !2257
  store i64 %trunc2, ptr %y, align 8, !dbg !2257
  br label %loop.cond3, !dbg !2257

loop.cond3:                                       ; preds = %checkok8, %loop.exit
  %9 = load i64, ptr %y, align 8, !dbg !2258
  %i2b = icmp ne i64 %9, 0, !dbg !2258
  br i1 %i2b, label %loop.body4, label %loop.exit15, !dbg !2258

loop.body4:                                       ; preds = %loop.cond3
  %10 = load ptr, ptr %s, align 8, !dbg !2259
  %ptradd_any5 = getelementptr i8, ptr %10, i8 -1, !dbg !2259
  store ptr %ptradd_any5, ptr %s, align 8, !dbg !2259
  %checknull6 = icmp eq ptr %ptradd_any5, null, !dbg !2259
  %11 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !2259
  br i1 %11, label %panic7, label %checkok8, !dbg !2259

checkok8:                                         ; preds = %loop.body4
  %12 = load i64, ptr %y, align 8, !dbg !2260
  %smod9 = srem i64 %12, 10, !dbg !2261
  %trunc10 = trunc i64 %smod9 to i8, !dbg !2261
  %zext11 = zext i8 %trunc10 to i32, !dbg !2261
  %add12 = add i32 48, %zext11, !dbg !2262
  %trunc13 = trunc i32 %add12 to i8, !dbg !2262
  store i8 %trunc13, ptr %ptradd_any5, align 1, !dbg !2262
  %13 = load i64, ptr %y, align 8, !dbg !2263
  %udiv14 = udiv i64 %13, 10, !dbg !2263
  store i64 %udiv14, ptr %y, align 8, !dbg !2263
  br label %loop.cond3, !dbg !2263

loop.exit15:                                      ; preds = %loop.cond3
  %14 = load ptr, ptr %s, align 8, !dbg !2264
  ret ptr %14, !dbg !2264

panic:                                            ; preds = %loop.body
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2265
  call void %15(ptr @.panic_msg.54, i64 44, ptr @.file.44, i64 20, ptr @.func.55, i64 5, i32 186) #5, !dbg !2265
  unreachable, !dbg !2265

panic7:                                           ; preds = %loop.body4
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2266
  call void %16(ptr @.panic_msg.54, i64 44, ptr @.file.44, i64 20, ptr @.func.55, i64 5, i32 187) #5, !dbg !2266
  unreachable, !dbg !2266
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.printf_parse_format_field(ptr %0, ptr %1, i64 %2, ptr %3, ptr %4, i64 %5, ptr %6) #0 !dbg !2267 {
entry:
  %args_ptr = alloca ptr, align 8
  %args_len = alloca i64, align 8
  %args_index_ptr = alloca ptr, align 8
  %format_ptr = alloca ptr, align 8
  %format_len = alloca i64, align 8
  %index_ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %c5 = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots10 = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %reterr16 = alloca i64, align 8
  %len = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %val = alloca %any, align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %intval = alloca i32, align 4
  %intval.f = alloca i64, align 8
  %v = alloca %any, align 8
  %blockret = alloca i32, align 4
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i32, align 4
  %min = alloca i32, align 4
  %switch = alloca i64, align 8
  %c74 = alloca i8, align 1
  %s = alloca i16, align 2
  %taddr93 = alloca i64, align 8
  %taddr94 = alloca i64, align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %i = alloca i32, align 4
  %taddr126 = alloca i64, align 8
  %taddr127 = alloca i64, align 8
  %varargslots128 = alloca [2 x %any], align 16
  %indirectarg131 = alloca %"any[]", align 8
  %l = alloca i64, align 8
  %taddr158 = alloca i64, align 8
  %taddr159 = alloca i64, align 8
  %varargslots160 = alloca [2 x %any], align 16
  %indirectarg163 = alloca %"any[]", align 8
  %i189 = alloca i128, align 16
  %taddr194 = alloca i64, align 8
  %taddr195 = alloca i64, align 8
  %varargslots196 = alloca [2 x %any], align 16
  %indirectarg199 = alloca %"any[]", align 8
  %c225 = alloca i8, align 1
  %s242 = alloca i16, align 2
  %taddr247 = alloca i64, align 8
  %taddr248 = alloca i64, align 8
  %varargslots249 = alloca [2 x %any], align 16
  %indirectarg252 = alloca %"any[]", align 8
  %i275 = alloca i32, align 4
  %taddr280 = alloca i64, align 8
  %taddr281 = alloca i64, align 8
  %varargslots282 = alloca [2 x %any], align 16
  %indirectarg285 = alloca %"any[]", align 8
  %l306 = alloca i64, align 8
  %taddr311 = alloca i64, align 8
  %taddr312 = alloca i64, align 8
  %varargslots313 = alloca [2 x %any], align 16
  %indirectarg316 = alloca %"any[]", align 8
  %i340 = alloca i128, align 16
  %taddr345 = alloca i64, align 8
  %taddr346 = alloca i64, align 8
  %varargslots347 = alloca [2 x %any], align 16
  %indirectarg350 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg368 = alloca %"any[]", align 8
  %reterr369 = alloca i64, align 8
  store ptr %1, ptr %args_ptr, align 8
    #dbg_declare(ptr %args_ptr, !2271, !DIExpression(), !2272)
  store i64 %2, ptr %args_len, align 8
    #dbg_declare(ptr %args_len, !2273, !DIExpression(), !2274)
  store ptr %3, ptr %args_index_ptr, align 8
    #dbg_declare(ptr %args_index_ptr, !2275, !DIExpression(), !2276)
  store ptr %4, ptr %format_ptr, align 8
    #dbg_declare(ptr %format_ptr, !2277, !DIExpression(), !2278)
  store i64 %5, ptr %format_len, align 8
    #dbg_declare(ptr %format_len, !2279, !DIExpression(), !2280)
  store ptr %6, ptr %index_ptr, align 8
    #dbg_declare(ptr %index_ptr, !2281, !DIExpression(), !2282)
    #dbg_declare(ptr %c, !2283, !DIExpression(), !2284)
  %7 = load ptr, ptr %format_ptr, align 8, !dbg !2285
  %8 = load ptr, ptr %index_ptr, align 8, !dbg !2286
  %checknull = icmp eq ptr %8, null, !dbg !2286
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2286
  br i1 %9, label %panic, label %checkok, !dbg !2286

checkok:                                          ; preds = %entry
  %10 = ptrtoint ptr %8 to i64, !dbg !2286
  %11 = urem i64 %10, 8, !dbg !2286
  %12 = icmp ne i64 %11, 0, !dbg !2286
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false), !dbg !2286
  br i1 %13, label %panic1, label %checkok3, !dbg !2286

checkok3:                                         ; preds = %checkok
  %14 = load i64, ptr %8, align 8, !dbg !2286
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 %14, !dbg !2286
  %15 = load i8, ptr %ptradd4, align 1, !dbg !2286
  store i8 %15, ptr %c, align 1, !dbg !2286
  %16 = load i8, ptr %c, align 1
  store i8 %16, ptr %c5, align 1
  %17 = load i8, ptr %c5, align 1
  store i8 %17, ptr %c6, align 1
  %18 = load i8, ptr %c6, align 1, !dbg !2287
  %zext = zext i8 %18 to i64, !dbg !2287
  %ge = icmp uge i64 %zext, 256, !dbg !2287
  %19 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2287
  br i1 %19, label %panic7, label %checkok14, !dbg !2287

checkok14:                                        ; preds = %checkok3
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !2287
  %20 = load i16, ptr %ptroffset, align 2, !dbg !2287
  %lshrl = lshr i16 %20, 2, !dbg !2287
  %21 = and i16 1, %lshrl, !dbg !2287
  %trunc = trunc i16 %21 to i8, !dbg !2287
  %22 = trunc i8 %trunc to i1, !dbg !2287
  br i1 %22, label %if.then, label %if.exit, !dbg !2287

if.then:                                          ; preds = %checkok14
  %23 = load ptr, ptr %format_ptr, align 8, !dbg !2292
  %24 = load i64, ptr %format_len, align 8, !dbg !2292
  %25 = load ptr, ptr %index_ptr, align 8, !dbg !2292
  %26 = call i32 @std.io.simple_atoi(ptr %23, i64 %24, ptr %25) #6, !dbg !2293
  store i32 %26, ptr %0, align 4, !dbg !2293
  ret i64 0, !dbg !2293

if.exit:                                          ; preds = %checkok14
  %27 = load i8, ptr %c, align 1, !dbg !2294
  %neq = icmp ne i8 %27, 42, !dbg !2294
  br i1 %neq, label %if.then15, label %if.exit17, !dbg !2294

if.then15:                                        ; preds = %if.exit
  store i32 0, ptr %0, align 4, !dbg !2295
  ret i64 0, !dbg !2295

if.exit17:                                        ; preds = %if.exit
    #dbg_declare(ptr %len, !2296, !DIExpression(), !2297)
  %28 = load ptr, ptr %index_ptr, align 8, !dbg !2298
  %checknull18 = icmp eq ptr %28, null, !dbg !2298
  %29 = call i1 @llvm.expect.i1(i1 %checknull18, i1 false), !dbg !2298
  br i1 %29, label %panic19, label %checkok20, !dbg !2298

checkok20:                                        ; preds = %if.exit17
  %30 = ptrtoint ptr %28 to i64, !dbg !2298
  %31 = urem i64 %30, 8, !dbg !2298
  %32 = icmp ne i64 %31, 0, !dbg !2298
  %33 = call i1 @llvm.expect.i1(i1 %32, i1 false), !dbg !2298
  br i1 %33, label %panic21, label %checkok28, !dbg !2298

checkok28:                                        ; preds = %checkok20
  %34 = load i64, ptr %28, align 8, !dbg !2299
  %add = add i64 %34, 1, !dbg !2299
  store i64 %add, ptr %28, align 8, !dbg !2299
  store i64 %add, ptr %len, align 8, !dbg !2299
  %35 = load i64, ptr %len, align 8, !dbg !2300
  %36 = load i64, ptr %format_len, align 8, !dbg !2301
  %ge29 = icmp uge i64 %35, %36, !dbg !2300
  br i1 %ge29, label %if.then30, label %if.exit31, !dbg !2300

if.then30:                                        ; preds = %checkok28
  ret i64 ptrtoint (ptr @std.io.BAD_FORMAT to i64), !dbg !2302

if.exit31:                                        ; preds = %checkok28
  %37 = load ptr, ptr %args_index_ptr, align 8, !dbg !2303
  %checknull32 = icmp eq ptr %37, null, !dbg !2303
  %38 = call i1 @llvm.expect.i1(i1 %checknull32, i1 false), !dbg !2303
  br i1 %38, label %panic33, label %checkok34, !dbg !2303

checkok34:                                        ; preds = %if.exit31
  %39 = ptrtoint ptr %37 to i64, !dbg !2303
  %40 = urem i64 %39, 8, !dbg !2303
  %41 = icmp ne i64 %40, 0, !dbg !2303
  %42 = call i1 @llvm.expect.i1(i1 %41, i1 false), !dbg !2303
  br i1 %42, label %panic35, label %checkok42, !dbg !2303

checkok42:                                        ; preds = %checkok34
  %43 = load i64, ptr %37, align 8, !dbg !2303
  %44 = load i64, ptr %args_len, align 8, !dbg !2304
  %ge43 = icmp uge i64 %43, %44, !dbg !2305
  br i1 %ge43, label %if.then44, label %if.exit45, !dbg !2305

if.then44:                                        ; preds = %checkok42
  ret i64 ptrtoint (ptr @std.io.BAD_FORMAT to i64), !dbg !2306

if.exit45:                                        ; preds = %checkok42
    #dbg_declare(ptr %val, !2307, !DIExpression(), !2308)
  %45 = load ptr, ptr %args_ptr, align 8, !dbg !2309
  %46 = load ptr, ptr %args_index_ptr, align 8, !dbg !2310
  %checknull46 = icmp eq ptr %46, null, !dbg !2310
  %47 = call i1 @llvm.expect.i1(i1 %checknull46, i1 false), !dbg !2310
  br i1 %47, label %panic47, label %checkok48, !dbg !2310

checkok48:                                        ; preds = %if.exit45
  %48 = ptrtoint ptr %46 to i64, !dbg !2310
  %49 = urem i64 %48, 8, !dbg !2310
  %50 = icmp ne i64 %49, 0, !dbg !2310
  %51 = call i1 @llvm.expect.i1(i1 %50, i1 false), !dbg !2310
  br i1 %51, label %panic49, label %checkok56, !dbg !2310

checkok56:                                        ; preds = %checkok48
  %52 = load i64, ptr %46, align 8, !dbg !2311
  %add57 = add i64 %52, 1, !dbg !2311
  store i64 %add57, ptr %46, align 8, !dbg !2311
  %ptroffset58 = getelementptr inbounds [16 x i8], ptr %45, i64 %52, !dbg !2311
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %val, ptr align 8 %ptroffset58, i32 16, i1 false), !dbg !2311
  %ptradd59 = getelementptr inbounds i8, ptr %val, i64 8, !dbg !2312
  %53 = load i64, ptr %ptradd59, align 8, !dbg !2312
  %"introspect*" = inttoptr i64 %53 to ptr, !dbg !2312
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !2312
  %54 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext %typeid.kind) #6, !dbg !2312
  %55 = trunc i8 %54 to i1, !dbg !2312
  %not = xor i1 %55, true, !dbg !2312
  br i1 %not, label %if.then60, label %if.exit61, !dbg !2312

if.then60:                                        ; preds = %checkok56
  ret i64 ptrtoint (ptr @std.io.BAD_FORMAT to i64), !dbg !2313

if.exit61:                                        ; preds = %checkok56
    #dbg_declare(ptr %intval, !2314, !DIExpression(), !2315)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %val, i32 16, i1 false)
  %56 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext 2) #6, !dbg !2316
  %57 = trunc i8 %56 to i1, !dbg !2316
  br i1 %57, label %assert_ok, label %assert_fail, !dbg !2316

assert_fail:                                      ; preds = %if.exit61
  %58 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2316
  call void %58(ptr @.panic_msg.59, i64 69, ptr @.file.44, i64 20, ptr @.func.57, i64 25, i32 684) #5, !dbg !2316
  unreachable, !dbg !2316

assert_ok:                                        ; preds = %if.exit61
  %ptradd62 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !2320
  %59 = load i64, ptr %ptradd62, align 8, !dbg !2320
  %"introspect*63" = inttoptr i64 %59 to ptr, !dbg !2320
  %typeid.kind64 = load i8, ptr %"introspect*63", align 8, !dbg !2320
  %60 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext %typeid.kind64) #6, !dbg !2316
  %61 = trunc i8 %60 to i1, !dbg !2316
  br i1 %61, label %assert_ok66, label %assert_fail65, !dbg !2316

assert_fail65:                                    ; preds = %assert_ok
  %62 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2316
  call void %62(ptr @.panic_msg.60, i64 71, ptr @.file.44, i64 20, ptr @.func.57, i64 25, i32 684) #5, !dbg !2316
  unreachable, !dbg !2316

assert_ok66:                                      ; preds = %assert_ok
    #dbg_declare(ptr %any_type, !2321, !DIExpression(), !2322)
  %ptradd67 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !2323
  %63 = load i64, ptr %ptradd67, align 8, !dbg !2323
  store i64 %63, ptr %any_type, align 8, !dbg !2323
    #dbg_declare(ptr %kind, !2324, !DIExpression(), !2325)
  %64 = load i64, ptr %any_type, align 8, !dbg !2326
  %"introspect*68" = inttoptr i64 %64 to ptr, !dbg !2326
  %typeid.kind69 = load i8, ptr %"introspect*68", align 8, !dbg !2326
  store i8 %typeid.kind69, ptr %kind, align 1, !dbg !2326
    #dbg_declare(ptr %is_mixed_signed, !2327, !DIExpression(), !2328)
  %65 = load i64, ptr %any_type, align 8, !dbg !2329
  %"introspect*70" = inttoptr i64 %65 to ptr, !dbg !2329
  %typeid.kind71 = load i8, ptr %"introspect*70", align 8, !dbg !2329
  %neq72 = icmp ne i8 2, %typeid.kind71, !dbg !2330
  %66 = zext i1 %neq72 to i8, !dbg !2330
  store i8 %66, ptr %is_mixed_signed, align 1, !dbg !2330
    #dbg_declare(ptr %max, !2331, !DIExpression(), !2332)
  store i32 2147483647, ptr %max, align 4, !dbg !2333
    #dbg_declare(ptr %min, !2334, !DIExpression(), !2335)
  store i32 -2147483648, ptr %min, align 4, !dbg !2336
  %67 = load i64, ptr %any_type, align 8
  store i64 %67, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %assert_ok66
  %68 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !2337

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %69 = phi i64 [ %68, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !2337
  %eq = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %69, !dbg !2337
  br i1 %eq, label %result_block, label %parent_type_block, !dbg !2337

parent_type_block:                                ; preds = %check_subtype
  %70 = inttoptr i64 %69 to ptr, !dbg !2337
  %ptradd73 = getelementptr inbounds i8, ptr %70, i64 8, !dbg !2337
  %typeid.parent = load i64, ptr %ptradd73, align 8, !dbg !2337
  %71 = icmp eq i64 %typeid.parent, 0, !dbg !2337
  br i1 %71, label %result_block, label %check_subtype, !dbg !2337

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %72 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !2337
  br i1 %72, label %switch.case, label %next_if, !dbg !2337

switch.case:                                      ; preds = %result_block
    #dbg_declare(ptr %c74, !2339, !DIExpression(), !2341)
  %73 = load ptr, ptr %v, align 8, !dbg !2342
  %checknull75 = icmp eq ptr %73, null, !dbg !2342
  %74 = call i1 @llvm.expect.i1(i1 %checknull75, i1 false), !dbg !2342
  br i1 %74, label %panic76, label %checkok77, !dbg !2342

checkok77:                                        ; preds = %switch.case
  %75 = load i8, ptr %73, align 1, !dbg !2343
  store i8 %75, ptr %c74, align 1, !dbg !2343
  %76 = load i8, ptr %is_mixed_signed, align 1, !dbg !2344
  %77 = trunc i8 %76 to i1, !dbg !2344
  br i1 %77, label %and.rhs, label %and.phi, !dbg !2344

and.rhs:                                          ; preds = %checkok77
  %78 = load i8, ptr %c74, align 1, !dbg !2345
  %sext = sext i8 %78 to i32, !dbg !2345
  %lt = icmp slt i32 %sext, 0, !dbg !2345
  br label %and.phi, !dbg !2345

and.phi:                                          ; preds = %and.rhs, %checkok77
  %val78 = phi i1 [ false, %checkok77 ], [ %lt, %and.rhs ], !dbg !2345
  br i1 %val78, label %if.then79, label %if.exit80, !dbg !2345

if.then79:                                        ; preds = %and.phi
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %intval.f, align 8, !dbg !2346
  br label %after_assign, !dbg !2346

if.exit80:                                        ; preds = %and.phi
  %79 = load i8, ptr %c74, align 1, !dbg !2347
  %sext81 = sext i8 %79 to i32, !dbg !2347
  store i32 %sext81, ptr %blockret, align 4, !dbg !2347
  br label %expr_block.exit, !dbg !2347

next_if:                                          ; preds = %result_block
  br label %check_subtype82, !dbg !2348

check_subtype82:                                  ; preds = %parent_type_block84, %next_if
  %80 = phi i64 [ %68, %next_if ], [ %typeid.parent86, %parent_type_block84 ], !dbg !2348
  %eq83 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %80, !dbg !2348
  br i1 %eq83, label %result_block87, label %parent_type_block84, !dbg !2348

parent_type_block84:                              ; preds = %check_subtype82
  %81 = inttoptr i64 %80 to ptr, !dbg !2348
  %ptradd85 = getelementptr inbounds i8, ptr %81, i64 8, !dbg !2348
  %typeid.parent86 = load i64, ptr %ptradd85, align 8, !dbg !2348
  %82 = icmp eq i64 %typeid.parent86, 0, !dbg !2348
  br i1 %82, label %result_block87, label %check_subtype82, !dbg !2348

result_block87:                                   ; preds = %parent_type_block84, %check_subtype82
  %83 = phi i1 [ false, %parent_type_block84 ], [ true, %check_subtype82 ], !dbg !2348
  br i1 %83, label %switch.case88, label %next_if114, !dbg !2348

switch.case88:                                    ; preds = %result_block87
    #dbg_declare(ptr %s, !2349, !DIExpression(), !2351)
  %84 = load ptr, ptr %v, align 8, !dbg !2352
  %checknull89 = icmp eq ptr %84, null, !dbg !2352
  %85 = call i1 @llvm.expect.i1(i1 %checknull89, i1 false), !dbg !2352
  br i1 %85, label %panic90, label %checkok91, !dbg !2352

checkok91:                                        ; preds = %switch.case88
  %86 = ptrtoint ptr %84 to i64, !dbg !2353
  %87 = urem i64 %86, 2, !dbg !2353
  %88 = icmp ne i64 %87, 0, !dbg !2353
  %89 = call i1 @llvm.expect.i1(i1 %88, i1 false), !dbg !2353
  br i1 %89, label %panic92, label %checkok99, !dbg !2353

checkok99:                                        ; preds = %checkok91
  %90 = load i16, ptr %84, align 2, !dbg !2353
  store i16 %90, ptr %s, align 2, !dbg !2353
  %91 = load i8, ptr %is_mixed_signed, align 1, !dbg !2354
  %92 = trunc i8 %91 to i1, !dbg !2354
  br i1 %92, label %and.rhs100, label %and.phi103, !dbg !2354

and.rhs100:                                       ; preds = %checkok99
  %93 = load i16, ptr %s, align 2, !dbg !2355
  %sext101 = sext i16 %93 to i32, !dbg !2355
  %lt102 = icmp slt i32 %sext101, 0, !dbg !2355
  br label %and.phi103, !dbg !2355

and.phi103:                                       ; preds = %and.rhs100, %checkok99
  %val104 = phi i1 [ false, %checkok99 ], [ %lt102, %and.rhs100 ], !dbg !2355
  br i1 %val104, label %if.then105, label %if.exit106, !dbg !2355

if.then105:                                       ; preds = %and.phi103
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %intval.f, align 8, !dbg !2356
  br label %after_assign, !dbg !2356

if.exit106:                                       ; preds = %and.phi103
  %94 = load i16, ptr %s, align 2, !dbg !2357
  %sext107 = sext i16 %94 to i32, !dbg !2357
  %95 = load i32, ptr %max, align 4, !dbg !2358
  %gt = icmp sgt i32 %sext107, %95, !dbg !2357
  br i1 %gt, label %or.phi, label %or.rhs, !dbg !2357

or.rhs:                                           ; preds = %if.exit106
  %96 = load i16, ptr %s, align 2, !dbg !2359
  %sext108 = sext i16 %96 to i32, !dbg !2359
  %97 = load i32, ptr %min, align 4, !dbg !2360
  %lt109 = icmp slt i32 %sext108, %97, !dbg !2359
  br label %or.phi, !dbg !2359

or.phi:                                           ; preds = %or.rhs, %if.exit106
  %val110 = phi i1 [ true, %if.exit106 ], [ %lt109, %or.rhs ], !dbg !2359
  br i1 %val110, label %if.then111, label %if.exit112, !dbg !2359

if.then111:                                       ; preds = %or.phi
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2361
  br label %after_assign, !dbg !2361

if.exit112:                                       ; preds = %or.phi
  %98 = load i16, ptr %s, align 2, !dbg !2362
  %sext113 = sext i16 %98 to i32, !dbg !2362
  store i32 %sext113, ptr %blockret, align 4, !dbg !2362
  br label %expr_block.exit, !dbg !2362

next_if114:                                       ; preds = %result_block87
  br label %check_subtype115, !dbg !2363

check_subtype115:                                 ; preds = %parent_type_block117, %next_if114
  %99 = phi i64 [ %68, %next_if114 ], [ %typeid.parent119, %parent_type_block117 ], !dbg !2363
  %eq116 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %99, !dbg !2363
  br i1 %eq116, label %result_block120, label %parent_type_block117, !dbg !2363

parent_type_block117:                             ; preds = %check_subtype115
  %100 = inttoptr i64 %99 to ptr, !dbg !2363
  %ptradd118 = getelementptr inbounds i8, ptr %100, i64 8, !dbg !2363
  %typeid.parent119 = load i64, ptr %ptradd118, align 8, !dbg !2363
  %101 = icmp eq i64 %typeid.parent119, 0, !dbg !2363
  br i1 %101, label %result_block120, label %check_subtype115, !dbg !2363

result_block120:                                  ; preds = %parent_type_block117, %check_subtype115
  %102 = phi i1 [ false, %parent_type_block117 ], [ true, %check_subtype115 ], !dbg !2363
  br i1 %102, label %switch.case121, label %next_if146, !dbg !2363

switch.case121:                                   ; preds = %result_block120
    #dbg_declare(ptr %i, !2364, !DIExpression(), !2366)
  %103 = load ptr, ptr %v, align 8, !dbg !2367
  %checknull122 = icmp eq ptr %103, null, !dbg !2367
  %104 = call i1 @llvm.expect.i1(i1 %checknull122, i1 false), !dbg !2367
  br i1 %104, label %panic123, label %checkok124, !dbg !2367

checkok124:                                       ; preds = %switch.case121
  %105 = ptrtoint ptr %103 to i64, !dbg !2368
  %106 = urem i64 %105, 4, !dbg !2368
  %107 = icmp ne i64 %106, 0, !dbg !2368
  %108 = call i1 @llvm.expect.i1(i1 %107, i1 false), !dbg !2368
  br i1 %108, label %panic125, label %checkok132, !dbg !2368

checkok132:                                       ; preds = %checkok124
  %109 = load i32, ptr %103, align 4, !dbg !2368
  store i32 %109, ptr %i, align 4, !dbg !2368
  %110 = load i8, ptr %is_mixed_signed, align 1, !dbg !2369
  %111 = trunc i8 %110 to i1, !dbg !2369
  br i1 %111, label %and.rhs133, label %and.phi135, !dbg !2369

and.rhs133:                                       ; preds = %checkok132
  %112 = load i32, ptr %i, align 4, !dbg !2370
  %lt134 = icmp slt i32 %112, 0, !dbg !2370
  br label %and.phi135, !dbg !2370

and.phi135:                                       ; preds = %and.rhs133, %checkok132
  %val136 = phi i1 [ false, %checkok132 ], [ %lt134, %and.rhs133 ], !dbg !2370
  br i1 %val136, label %if.then137, label %if.exit138, !dbg !2370

if.then137:                                       ; preds = %and.phi135
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %intval.f, align 8, !dbg !2371
  br label %after_assign, !dbg !2371

if.exit138:                                       ; preds = %and.phi135
  %113 = load i32, ptr %i, align 4, !dbg !2372
  %114 = load i32, ptr %max, align 4, !dbg !2373
  %gt139 = icmp sgt i32 %113, %114, !dbg !2372
  br i1 %gt139, label %or.phi142, label %or.rhs140, !dbg !2372

or.rhs140:                                        ; preds = %if.exit138
  %115 = load i32, ptr %i, align 4, !dbg !2374
  %116 = load i32, ptr %min, align 4, !dbg !2375
  %lt141 = icmp slt i32 %115, %116, !dbg !2374
  br label %or.phi142, !dbg !2374

or.phi142:                                        ; preds = %or.rhs140, %if.exit138
  %val143 = phi i1 [ true, %if.exit138 ], [ %lt141, %or.rhs140 ], !dbg !2374
  br i1 %val143, label %if.then144, label %if.exit145, !dbg !2374

if.then144:                                       ; preds = %or.phi142
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2376
  br label %after_assign, !dbg !2376

if.exit145:                                       ; preds = %or.phi142
  %117 = load i32, ptr %i, align 4, !dbg !2377
  store i32 %117, ptr %blockret, align 4, !dbg !2377
  br label %expr_block.exit, !dbg !2377

next_if146:                                       ; preds = %result_block120
  br label %check_subtype147, !dbg !2378

check_subtype147:                                 ; preds = %parent_type_block149, %next_if146
  %118 = phi i64 [ %68, %next_if146 ], [ %typeid.parent151, %parent_type_block149 ], !dbg !2378
  %eq148 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %118, !dbg !2378
  br i1 %eq148, label %result_block152, label %parent_type_block149, !dbg !2378

parent_type_block149:                             ; preds = %check_subtype147
  %119 = inttoptr i64 %118 to ptr, !dbg !2378
  %ptradd150 = getelementptr inbounds i8, ptr %119, i64 8, !dbg !2378
  %typeid.parent151 = load i64, ptr %ptradd150, align 8, !dbg !2378
  %120 = icmp eq i64 %typeid.parent151, 0, !dbg !2378
  br i1 %120, label %result_block152, label %check_subtype147, !dbg !2378

result_block152:                                  ; preds = %parent_type_block149, %check_subtype147
  %121 = phi i1 [ false, %parent_type_block149 ], [ true, %check_subtype147 ], !dbg !2378
  br i1 %121, label %switch.case153, label %next_if181, !dbg !2378

switch.case153:                                   ; preds = %result_block152
    #dbg_declare(ptr %l, !2379, !DIExpression(), !2381)
  %122 = load ptr, ptr %v, align 8, !dbg !2382
  %checknull154 = icmp eq ptr %122, null, !dbg !2382
  %123 = call i1 @llvm.expect.i1(i1 %checknull154, i1 false), !dbg !2382
  br i1 %123, label %panic155, label %checkok156, !dbg !2382

checkok156:                                       ; preds = %switch.case153
  %124 = ptrtoint ptr %122 to i64, !dbg !2383
  %125 = urem i64 %124, 8, !dbg !2383
  %126 = icmp ne i64 %125, 0, !dbg !2383
  %127 = call i1 @llvm.expect.i1(i1 %126, i1 false), !dbg !2383
  br i1 %127, label %panic157, label %checkok164, !dbg !2383

checkok164:                                       ; preds = %checkok156
  %128 = load i64, ptr %122, align 8, !dbg !2383
  store i64 %128, ptr %l, align 8, !dbg !2383
  %129 = load i8, ptr %is_mixed_signed, align 1, !dbg !2384
  %130 = trunc i8 %129 to i1, !dbg !2384
  br i1 %130, label %and.rhs165, label %and.phi167, !dbg !2384

and.rhs165:                                       ; preds = %checkok164
  %131 = load i64, ptr %l, align 8, !dbg !2385
  %lt166 = icmp slt i64 %131, 0, !dbg !2385
  br label %and.phi167, !dbg !2385

and.phi167:                                       ; preds = %and.rhs165, %checkok164
  %val168 = phi i1 [ false, %checkok164 ], [ %lt166, %and.rhs165 ], !dbg !2385
  br i1 %val168, label %if.then169, label %if.exit170, !dbg !2385

if.then169:                                       ; preds = %and.phi167
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %intval.f, align 8, !dbg !2386
  br label %after_assign, !dbg !2386

if.exit170:                                       ; preds = %and.phi167
  %132 = load i64, ptr %l, align 8, !dbg !2387
  %133 = load i32, ptr %max, align 4, !dbg !2388
  %sext171 = sext i32 %133 to i64, !dbg !2388
  %gt172 = icmp sgt i64 %132, %sext171, !dbg !2387
  br i1 %gt172, label %or.phi176, label %or.rhs173, !dbg !2387

or.rhs173:                                        ; preds = %if.exit170
  %134 = load i64, ptr %l, align 8, !dbg !2389
  %135 = load i32, ptr %min, align 4, !dbg !2390
  %sext174 = sext i32 %135 to i64, !dbg !2390
  %lt175 = icmp slt i64 %134, %sext174, !dbg !2389
  br label %or.phi176, !dbg !2389

or.phi176:                                        ; preds = %or.rhs173, %if.exit170
  %val177 = phi i1 [ true, %if.exit170 ], [ %lt175, %or.rhs173 ], !dbg !2389
  br i1 %val177, label %if.then178, label %if.exit179, !dbg !2389

if.then178:                                       ; preds = %or.phi176
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2391
  br label %after_assign, !dbg !2391

if.exit179:                                       ; preds = %or.phi176
  %136 = load i64, ptr %l, align 8, !dbg !2392
  %trunc180 = trunc i64 %136 to i32, !dbg !2392
  store i32 %trunc180, ptr %blockret, align 4, !dbg !2392
  br label %expr_block.exit, !dbg !2392

next_if181:                                       ; preds = %result_block152
  br label %check_subtype182, !dbg !2393

check_subtype182:                                 ; preds = %parent_type_block184, %next_if181
  %137 = phi i64 [ %68, %next_if181 ], [ %typeid.parent186, %parent_type_block184 ], !dbg !2393
  %eq183 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %137, !dbg !2393
  br i1 %eq183, label %result_block187, label %parent_type_block184, !dbg !2393

parent_type_block184:                             ; preds = %check_subtype182
  %138 = inttoptr i64 %137 to ptr, !dbg !2393
  %ptradd185 = getelementptr inbounds i8, ptr %138, i64 8, !dbg !2393
  %typeid.parent186 = load i64, ptr %ptradd185, align 8, !dbg !2393
  %139 = icmp eq i64 %typeid.parent186, 0, !dbg !2393
  br i1 %139, label %result_block187, label %check_subtype182, !dbg !2393

result_block187:                                  ; preds = %parent_type_block184, %check_subtype182
  %140 = phi i1 [ false, %parent_type_block184 ], [ true, %check_subtype182 ], !dbg !2393
  br i1 %140, label %switch.case188, label %next_if217, !dbg !2393

switch.case188:                                   ; preds = %result_block187
    #dbg_declare(ptr %i189, !2394, !DIExpression(), !2396)
  %141 = load ptr, ptr %v, align 8, !dbg !2397
  %checknull190 = icmp eq ptr %141, null, !dbg !2397
  %142 = call i1 @llvm.expect.i1(i1 %checknull190, i1 false), !dbg !2397
  br i1 %142, label %panic191, label %checkok192, !dbg !2397

checkok192:                                       ; preds = %switch.case188
  %143 = ptrtoint ptr %141 to i64, !dbg !2398
  %144 = urem i64 %143, 16, !dbg !2398
  %145 = icmp ne i64 %144, 0, !dbg !2398
  %146 = call i1 @llvm.expect.i1(i1 %145, i1 false), !dbg !2398
  br i1 %146, label %panic193, label %checkok200, !dbg !2398

checkok200:                                       ; preds = %checkok192
  %147 = load i128, ptr %141, align 16, !dbg !2398
  store i128 %147, ptr %i189, align 16, !dbg !2398
  %148 = load i8, ptr %is_mixed_signed, align 1, !dbg !2399
  %149 = trunc i8 %148 to i1, !dbg !2399
  br i1 %149, label %and.rhs201, label %and.phi203, !dbg !2399

and.rhs201:                                       ; preds = %checkok200
  %150 = load i128, ptr %i189, align 16, !dbg !2400
  %lt202 = icmp slt i128 %150, 0, !dbg !2400
  br label %and.phi203, !dbg !2400

and.phi203:                                       ; preds = %and.rhs201, %checkok200
  %val204 = phi i1 [ false, %checkok200 ], [ %lt202, %and.rhs201 ], !dbg !2400
  br i1 %val204, label %if.then205, label %if.exit206, !dbg !2400

if.then205:                                       ; preds = %and.phi203
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %intval.f, align 8, !dbg !2401
  br label %after_assign, !dbg !2401

if.exit206:                                       ; preds = %and.phi203
  %151 = load i128, ptr %i189, align 16, !dbg !2402
  %152 = load i32, ptr %max, align 4, !dbg !2403
  %sext207 = sext i32 %152 to i128, !dbg !2403
  %gt208 = icmp sgt i128 %151, %sext207, !dbg !2402
  br i1 %gt208, label %or.phi212, label %or.rhs209, !dbg !2402

or.rhs209:                                        ; preds = %if.exit206
  %153 = load i128, ptr %i189, align 16, !dbg !2404
  %154 = load i32, ptr %min, align 4, !dbg !2405
  %sext210 = sext i32 %154 to i128, !dbg !2405
  %lt211 = icmp slt i128 %153, %sext210, !dbg !2404
  br label %or.phi212, !dbg !2404

or.phi212:                                        ; preds = %or.rhs209, %if.exit206
  %val213 = phi i1 [ true, %if.exit206 ], [ %lt211, %or.rhs209 ], !dbg !2404
  br i1 %val213, label %if.then214, label %if.exit215, !dbg !2404

if.then214:                                       ; preds = %or.phi212
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2406
  br label %after_assign, !dbg !2406

if.exit215:                                       ; preds = %or.phi212
  %155 = load i128, ptr %i189, align 16, !dbg !2407
  %trunc216 = trunc i128 %155 to i32, !dbg !2407
  store i32 %trunc216, ptr %blockret, align 4, !dbg !2407
  br label %expr_block.exit, !dbg !2407

next_if217:                                       ; preds = %result_block187
  br label %check_subtype218, !dbg !2408

check_subtype218:                                 ; preds = %parent_type_block220, %next_if217
  %156 = phi i64 [ %68, %next_if217 ], [ %typeid.parent222, %parent_type_block220 ], !dbg !2408
  %eq219 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %156, !dbg !2408
  br i1 %eq219, label %result_block223, label %parent_type_block220, !dbg !2408

parent_type_block220:                             ; preds = %check_subtype218
  %157 = inttoptr i64 %156 to ptr, !dbg !2408
  %ptradd221 = getelementptr inbounds i8, ptr %157, i64 8, !dbg !2408
  %typeid.parent222 = load i64, ptr %ptradd221, align 8, !dbg !2408
  %158 = icmp eq i64 %typeid.parent222, 0, !dbg !2408
  br i1 %158, label %result_block223, label %check_subtype218, !dbg !2408

result_block223:                                  ; preds = %parent_type_block220, %check_subtype218
  %159 = phi i1 [ false, %parent_type_block220 ], [ true, %check_subtype218 ], !dbg !2408
  br i1 %159, label %switch.case224, label %next_if234, !dbg !2408

switch.case224:                                   ; preds = %result_block223
    #dbg_declare(ptr %c225, !2409, !DIExpression(), !2411)
  %160 = load ptr, ptr %v, align 8, !dbg !2412
  %checknull226 = icmp eq ptr %160, null, !dbg !2412
  %161 = call i1 @llvm.expect.i1(i1 %checknull226, i1 false), !dbg !2412
  br i1 %161, label %panic227, label %checkok228, !dbg !2412

checkok228:                                       ; preds = %switch.case224
  %162 = load i8, ptr %160, align 1, !dbg !2413
  store i8 %162, ptr %c225, align 1, !dbg !2413
  %163 = load i8, ptr %c225, align 1, !dbg !2414
  %zext229 = zext i8 %163 to i32, !dbg !2414
  %164 = load i32, ptr %max, align 4, !dbg !2415
  %lt230 = icmp slt i32 %164, %zext229, !dbg !2414
  %check = icmp slt i32 %zext229, 0, !dbg !2414
  %siui-lt = or i1 %check, %lt230, !dbg !2414
  br i1 %siui-lt, label %if.then231, label %if.exit232, !dbg !2414

if.then231:                                       ; preds = %checkok228
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2416
  br label %after_assign, !dbg !2416

if.exit232:                                       ; preds = %checkok228
  %165 = load i8, ptr %c225, align 1, !dbg !2417
  %zext233 = zext i8 %165 to i32, !dbg !2417
  store i32 %zext233, ptr %blockret, align 4, !dbg !2417
  br label %expr_block.exit, !dbg !2417

next_if234:                                       ; preds = %result_block223
  br label %check_subtype235, !dbg !2418

check_subtype235:                                 ; preds = %parent_type_block237, %next_if234
  %166 = phi i64 [ %68, %next_if234 ], [ %typeid.parent239, %parent_type_block237 ], !dbg !2418
  %eq236 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %166, !dbg !2418
  br i1 %eq236, label %result_block240, label %parent_type_block237, !dbg !2418

parent_type_block237:                             ; preds = %check_subtype235
  %167 = inttoptr i64 %166 to ptr, !dbg !2418
  %ptradd238 = getelementptr inbounds i8, ptr %167, i64 8, !dbg !2418
  %typeid.parent239 = load i64, ptr %ptradd238, align 8, !dbg !2418
  %168 = icmp eq i64 %typeid.parent239, 0, !dbg !2418
  br i1 %168, label %result_block240, label %check_subtype235, !dbg !2418

result_block240:                                  ; preds = %parent_type_block237, %check_subtype235
  %169 = phi i1 [ false, %parent_type_block237 ], [ true, %check_subtype235 ], !dbg !2418
  br i1 %169, label %switch.case241, label %next_if267, !dbg !2418

switch.case241:                                   ; preds = %result_block240
    #dbg_declare(ptr %s242, !2419, !DIExpression(), !2421)
  %170 = load ptr, ptr %v, align 8, !dbg !2422
  %checknull243 = icmp eq ptr %170, null, !dbg !2422
  %171 = call i1 @llvm.expect.i1(i1 %checknull243, i1 false), !dbg !2422
  br i1 %171, label %panic244, label %checkok245, !dbg !2422

checkok245:                                       ; preds = %switch.case241
  %172 = ptrtoint ptr %170 to i64, !dbg !2423
  %173 = urem i64 %172, 2, !dbg !2423
  %174 = icmp ne i64 %173, 0, !dbg !2423
  %175 = call i1 @llvm.expect.i1(i1 %174, i1 false), !dbg !2423
  br i1 %175, label %panic246, label %checkok253, !dbg !2423

checkok253:                                       ; preds = %checkok245
  %176 = load i16, ptr %170, align 2, !dbg !2423
  store i16 %176, ptr %s242, align 2, !dbg !2423
  %177 = load i16, ptr %s242, align 2, !dbg !2424
  %zext254 = zext i16 %177 to i32, !dbg !2424
  %178 = load i32, ptr %max, align 4, !dbg !2425
  %lt255 = icmp slt i32 %178, %zext254, !dbg !2424
  %check256 = icmp slt i32 %zext254, 0, !dbg !2424
  %siui-lt257 = or i1 %check256, %lt255, !dbg !2424
  br i1 %siui-lt257, label %or.phi262, label %or.rhs258, !dbg !2424

or.rhs258:                                        ; preds = %checkok253
  %179 = load i16, ptr %s242, align 2, !dbg !2426
  %zext259 = zext i16 %179 to i32, !dbg !2426
  %180 = load i32, ptr %min, align 4, !dbg !2427
  %gt260 = icmp sgt i32 %180, %zext259, !dbg !2426
  %check261 = icmp sge i32 %zext259, 0, !dbg !2426
  %siui-gt = and i1 %check261, %gt260, !dbg !2426
  br label %or.phi262, !dbg !2426

or.phi262:                                        ; preds = %or.rhs258, %checkok253
  %val263 = phi i1 [ true, %checkok253 ], [ %siui-gt, %or.rhs258 ], !dbg !2426
  br i1 %val263, label %if.then264, label %if.exit265, !dbg !2426

if.then264:                                       ; preds = %or.phi262
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2428
  br label %after_assign, !dbg !2428

if.exit265:                                       ; preds = %or.phi262
  %181 = load i16, ptr %s242, align 2, !dbg !2429
  %zext266 = zext i16 %181 to i32, !dbg !2429
  store i32 %zext266, ptr %blockret, align 4, !dbg !2429
  br label %expr_block.exit, !dbg !2429

next_if267:                                       ; preds = %result_block240
  br label %check_subtype268, !dbg !2430

check_subtype268:                                 ; preds = %parent_type_block270, %next_if267
  %182 = phi i64 [ %68, %next_if267 ], [ %typeid.parent272, %parent_type_block270 ], !dbg !2430
  %eq269 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %182, !dbg !2430
  br i1 %eq269, label %result_block273, label %parent_type_block270, !dbg !2430

parent_type_block270:                             ; preds = %check_subtype268
  %183 = inttoptr i64 %182 to ptr, !dbg !2430
  %ptradd271 = getelementptr inbounds i8, ptr %183, i64 8, !dbg !2430
  %typeid.parent272 = load i64, ptr %ptradd271, align 8, !dbg !2430
  %184 = icmp eq i64 %typeid.parent272, 0, !dbg !2430
  br i1 %184, label %result_block273, label %check_subtype268, !dbg !2430

result_block273:                                  ; preds = %parent_type_block270, %check_subtype268
  %185 = phi i1 [ false, %parent_type_block270 ], [ true, %check_subtype268 ], !dbg !2430
  br i1 %185, label %switch.case274, label %next_if298, !dbg !2430

switch.case274:                                   ; preds = %result_block273
    #dbg_declare(ptr %i275, !2431, !DIExpression(), !2433)
  %186 = load ptr, ptr %v, align 8, !dbg !2434
  %checknull276 = icmp eq ptr %186, null, !dbg !2434
  %187 = call i1 @llvm.expect.i1(i1 %checknull276, i1 false), !dbg !2434
  br i1 %187, label %panic277, label %checkok278, !dbg !2434

checkok278:                                       ; preds = %switch.case274
  %188 = ptrtoint ptr %186 to i64, !dbg !2435
  %189 = urem i64 %188, 4, !dbg !2435
  %190 = icmp ne i64 %189, 0, !dbg !2435
  %191 = call i1 @llvm.expect.i1(i1 %190, i1 false), !dbg !2435
  br i1 %191, label %panic279, label %checkok286, !dbg !2435

checkok286:                                       ; preds = %checkok278
  %192 = load i32, ptr %186, align 4, !dbg !2435
  store i32 %192, ptr %i275, align 4, !dbg !2435
  %193 = load i32, ptr %i275, align 4, !dbg !2436
  %194 = load i32, ptr %max, align 4, !dbg !2437
  %lt287 = icmp slt i32 %194, %193, !dbg !2436
  %check288 = icmp slt i32 %193, 0, !dbg !2436
  %siui-lt289 = or i1 %check288, %lt287, !dbg !2436
  br i1 %siui-lt289, label %or.phi294, label %or.rhs290, !dbg !2436

or.rhs290:                                        ; preds = %checkok286
  %195 = load i32, ptr %i275, align 4, !dbg !2438
  %196 = load i32, ptr %min, align 4, !dbg !2439
  %gt291 = icmp sgt i32 %196, %195, !dbg !2438
  %check292 = icmp sge i32 %195, 0, !dbg !2438
  %siui-gt293 = and i1 %check292, %gt291, !dbg !2438
  br label %or.phi294, !dbg !2438

or.phi294:                                        ; preds = %or.rhs290, %checkok286
  %val295 = phi i1 [ true, %checkok286 ], [ %siui-gt293, %or.rhs290 ], !dbg !2438
  br i1 %val295, label %if.then296, label %if.exit297, !dbg !2438

if.then296:                                       ; preds = %or.phi294
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2440
  br label %after_assign, !dbg !2440

if.exit297:                                       ; preds = %or.phi294
  %197 = load i32, ptr %i275, align 4, !dbg !2441
  store i32 %197, ptr %blockret, align 4, !dbg !2441
  br label %expr_block.exit, !dbg !2441

next_if298:                                       ; preds = %result_block273
  br label %check_subtype299, !dbg !2442

check_subtype299:                                 ; preds = %parent_type_block301, %next_if298
  %198 = phi i64 [ %68, %next_if298 ], [ %typeid.parent303, %parent_type_block301 ], !dbg !2442
  %eq300 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %198, !dbg !2442
  br i1 %eq300, label %result_block304, label %parent_type_block301, !dbg !2442

parent_type_block301:                             ; preds = %check_subtype299
  %199 = inttoptr i64 %198 to ptr, !dbg !2442
  %ptradd302 = getelementptr inbounds i8, ptr %199, i64 8, !dbg !2442
  %typeid.parent303 = load i64, ptr %ptradd302, align 8, !dbg !2442
  %200 = icmp eq i64 %typeid.parent303, 0, !dbg !2442
  br i1 %200, label %result_block304, label %check_subtype299, !dbg !2442

result_block304:                                  ; preds = %parent_type_block301, %check_subtype299
  %201 = phi i1 [ false, %parent_type_block301 ], [ true, %check_subtype299 ], !dbg !2442
  br i1 %201, label %switch.case305, label %next_if332, !dbg !2442

switch.case305:                                   ; preds = %result_block304
    #dbg_declare(ptr %l306, !2443, !DIExpression(), !2445)
  %202 = load ptr, ptr %v, align 8, !dbg !2446
  %checknull307 = icmp eq ptr %202, null, !dbg !2446
  %203 = call i1 @llvm.expect.i1(i1 %checknull307, i1 false), !dbg !2446
  br i1 %203, label %panic308, label %checkok309, !dbg !2446

checkok309:                                       ; preds = %switch.case305
  %204 = ptrtoint ptr %202 to i64, !dbg !2447
  %205 = urem i64 %204, 8, !dbg !2447
  %206 = icmp ne i64 %205, 0, !dbg !2447
  %207 = call i1 @llvm.expect.i1(i1 %206, i1 false), !dbg !2447
  br i1 %207, label %panic310, label %checkok317, !dbg !2447

checkok317:                                       ; preds = %checkok309
  %208 = load i64, ptr %202, align 8, !dbg !2447
  store i64 %208, ptr %l306, align 8, !dbg !2447
  %209 = load i64, ptr %l306, align 8, !dbg !2448
  %210 = load i32, ptr %max, align 4, !dbg !2449
  %sext318 = sext i32 %210 to i64, !dbg !2449
  %lt319 = icmp slt i64 %sext318, %209, !dbg !2448
  %check320 = icmp slt i64 %209, 0, !dbg !2448
  %siui-lt321 = or i1 %check320, %lt319, !dbg !2448
  br i1 %siui-lt321, label %or.phi327, label %or.rhs322, !dbg !2448

or.rhs322:                                        ; preds = %checkok317
  %211 = load i64, ptr %l306, align 8, !dbg !2450
  %212 = load i32, ptr %min, align 4, !dbg !2451
  %sext323 = sext i32 %212 to i64, !dbg !2451
  %gt324 = icmp sgt i64 %sext323, %211, !dbg !2450
  %check325 = icmp sge i64 %211, 0, !dbg !2450
  %siui-gt326 = and i1 %check325, %gt324, !dbg !2450
  br label %or.phi327, !dbg !2450

or.phi327:                                        ; preds = %or.rhs322, %checkok317
  %val328 = phi i1 [ true, %checkok317 ], [ %siui-gt326, %or.rhs322 ], !dbg !2450
  br i1 %val328, label %if.then329, label %if.exit330, !dbg !2450

if.then329:                                       ; preds = %or.phi327
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2452
  br label %after_assign, !dbg !2452

if.exit330:                                       ; preds = %or.phi327
  %213 = load i64, ptr %l306, align 8, !dbg !2453
  %trunc331 = trunc i64 %213 to i32, !dbg !2453
  store i32 %trunc331, ptr %blockret, align 4, !dbg !2453
  br label %expr_block.exit, !dbg !2453

next_if332:                                       ; preds = %result_block304
  br label %check_subtype333, !dbg !2454

check_subtype333:                                 ; preds = %parent_type_block335, %next_if332
  %214 = phi i64 [ %68, %next_if332 ], [ %typeid.parent337, %parent_type_block335 ], !dbg !2454
  %eq334 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %214, !dbg !2454
  br i1 %eq334, label %result_block338, label %parent_type_block335, !dbg !2454

parent_type_block335:                             ; preds = %check_subtype333
  %215 = inttoptr i64 %214 to ptr, !dbg !2454
  %ptradd336 = getelementptr inbounds i8, ptr %215, i64 8, !dbg !2454
  %typeid.parent337 = load i64, ptr %ptradd336, align 8, !dbg !2454
  %216 = icmp eq i64 %typeid.parent337, 0, !dbg !2454
  br i1 %216, label %result_block338, label %check_subtype333, !dbg !2454

result_block338:                                  ; preds = %parent_type_block335, %check_subtype333
  %217 = phi i1 [ false, %parent_type_block335 ], [ true, %check_subtype333 ], !dbg !2454
  br i1 %217, label %switch.case339, label %next_if366, !dbg !2454

switch.case339:                                   ; preds = %result_block338
    #dbg_declare(ptr %i340, !2455, !DIExpression(), !2457)
  %218 = load ptr, ptr %v, align 8, !dbg !2458
  %checknull341 = icmp eq ptr %218, null, !dbg !2458
  %219 = call i1 @llvm.expect.i1(i1 %checknull341, i1 false), !dbg !2458
  br i1 %219, label %panic342, label %checkok343, !dbg !2458

checkok343:                                       ; preds = %switch.case339
  %220 = ptrtoint ptr %218 to i64, !dbg !2459
  %221 = urem i64 %220, 16, !dbg !2459
  %222 = icmp ne i64 %221, 0, !dbg !2459
  %223 = call i1 @llvm.expect.i1(i1 %222, i1 false), !dbg !2459
  br i1 %223, label %panic344, label %checkok351, !dbg !2459

checkok351:                                       ; preds = %checkok343
  %224 = load i128, ptr %218, align 16, !dbg !2459
  store i128 %224, ptr %i340, align 16, !dbg !2459
  %225 = load i128, ptr %i340, align 16, !dbg !2460
  %226 = load i32, ptr %max, align 4, !dbg !2461
  %sext352 = sext i32 %226 to i128, !dbg !2461
  %lt353 = icmp slt i128 %sext352, %225, !dbg !2460
  %check354 = icmp slt i128 %225, 0, !dbg !2460
  %siui-lt355 = or i1 %check354, %lt353, !dbg !2460
  br i1 %siui-lt355, label %or.phi361, label %or.rhs356, !dbg !2460

or.rhs356:                                        ; preds = %checkok351
  %227 = load i128, ptr %i340, align 16, !dbg !2462
  %228 = load i32, ptr %min, align 4, !dbg !2463
  %sext357 = sext i32 %228 to i128, !dbg !2463
  %gt358 = icmp sgt i128 %sext357, %227, !dbg !2462
  %check359 = icmp sge i128 %227, 0, !dbg !2462
  %siui-gt360 = and i1 %check359, %gt358, !dbg !2462
  br label %or.phi361, !dbg !2462

or.phi361:                                        ; preds = %or.rhs356, %checkok351
  %val362 = phi i1 [ true, %checkok351 ], [ %siui-gt360, %or.rhs356 ], !dbg !2462
  br i1 %val362, label %if.then363, label %if.exit364, !dbg !2462

if.then363:                                       ; preds = %or.phi361
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %intval.f, align 8, !dbg !2464
  br label %after_assign, !dbg !2464

if.exit364:                                       ; preds = %or.phi361
  %229 = load i128, ptr %i340, align 16, !dbg !2465
  %trunc365 = trunc i128 %229 to i32, !dbg !2465
  store i32 %trunc365, ptr %blockret, align 4, !dbg !2465
  br label %expr_block.exit, !dbg !2465

next_if366:                                       ; preds = %result_block338
  br label %switch.default, !dbg !2465

switch.default:                                   ; preds = %next_if366
  store %"char[]" { ptr @.str, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2466
  %ptradd367 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2466
  %hi = load i64, ptr %ptradd367, align 8, !dbg !2466
  store %"any[]" zeroinitializer, ptr %indirectarg368, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.62, i64 20, ptr @.str.63, i64 25, i32 684, ptr byval(%"any[]") align 8 %indirectarg368), !dbg !2470
  unreachable, !dbg !2471

expr_block.exit:                                  ; preds = %if.exit364, %if.exit330, %if.exit297, %if.exit265, %if.exit232, %if.exit215, %if.exit179, %if.exit145, %if.exit112, %if.exit80
  %230 = load i32, ptr %blockret, align 4, !dbg !2471
  store i32 %230, ptr %intval, align 4, !dbg !2471
  store i64 0, ptr %intval.f, align 8, !dbg !2471
  br label %after_assign, !dbg !2471

after_assign:                                     ; preds = %expr_block.exit, %if.then363, %if.then329, %if.then296, %if.then264, %if.then231, %if.then214, %if.then205, %if.then178, %if.then169, %if.then144, %if.then137, %if.then111, %if.then105, %if.then79
  %optval = load i64, ptr %intval.f, align 8, !dbg !2472
  %not_err = icmp eq i64 %optval, 0, !dbg !2472
  %231 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2472
  br i1 %231, label %after_check, label %else_block, !dbg !2472

after_check:                                      ; preds = %after_assign
  %232 = load i32, ptr %intval, align 4, !dbg !2472
  br label %phi_block, !dbg !2472

else_block:                                       ; preds = %after_assign
  store i64 ptrtoint (ptr @std.io.BAD_FORMAT to i64), ptr %reterr369, align 8, !dbg !2473
  br label %err_retblock, !dbg !2473

phi_block:                                        ; preds = %after_check
  store i32 %232, ptr %0, align 4, !dbg !2473
  ret i64 0, !dbg !2473

err_retblock:                                     ; preds = %else_block
  %233 = load i64, ptr %reterr369, align 8, !dbg !2473
  ret i64 %233, !dbg !2473

panic:                                            ; preds = %entry
  %234 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2286
  call void %234(ptr @.panic_msg.56, i64 50, ptr @.file.44, i64 20, ptr @.func.57, i64 25, i32 676) #5, !dbg !2286
  unreachable, !dbg !2286

panic1:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %235 = insertvalue %any undef, ptr %taddr, 0
  %236 = insertvalue %any %235, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr2, align 8
  %237 = insertvalue %any undef, ptr %taddr2, 0
  %238 = insertvalue %any %237, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %236, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %238, ptr %ptradd, align 16
  %239 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %239, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.57, i64 25, i32 676, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2286
  unreachable, !dbg !2286

panic7:                                           ; preds = %checkok3
  store i64 256, ptr %taddr8, align 8
  %240 = insertvalue %any undef, ptr %taddr8, 0
  %241 = insertvalue %any %240, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr9, align 8
  %242 = insertvalue %any undef, ptr %taddr9, 0
  %243 = insertvalue %any %242, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %241, ptr %varargslots10, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots10, i64 16
  store %any %243, ptr %ptradd11, align 16
  %244 = insertvalue %"any[]" undef, ptr %varargslots10, 0
  %"$$temp12" = insertvalue %"any[]" %244, i64 2, 1
  store %"any[]" %"$$temp12", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.53, i64 8, ptr @.func.57, i64 25, i32 9, ptr byval(%"any[]") align 8 %indirectarg13) #5, !dbg !2287
  unreachable, !dbg !2287

panic19:                                          ; preds = %if.exit17
  %245 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2298
  call void %245(ptr @.panic_msg.56, i64 50, ptr @.file.44, i64 20, ptr @.func.57, i64 25, i32 679) #5, !dbg !2298
  unreachable, !dbg !2298

panic21:                                          ; preds = %checkok20
  store i64 8, ptr %taddr22, align 8
  %246 = insertvalue %any undef, ptr %taddr22, 0
  %247 = insertvalue %any %246, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %31, ptr %taddr23, align 8
  %248 = insertvalue %any undef, ptr %taddr23, 0
  %249 = insertvalue %any %248, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %247, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %249, ptr %ptradd25, align 16
  %250 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %250, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.57, i64 25, i32 679, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !2298
  unreachable, !dbg !2298

panic33:                                          ; preds = %if.exit31
  %251 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2303
  call void %251(ptr @.panic_msg.58, i64 55, ptr @.file.44, i64 20, ptr @.func.57, i64 25, i32 681) #5, !dbg !2303
  unreachable, !dbg !2303

panic35:                                          ; preds = %checkok34
  store i64 8, ptr %taddr36, align 8
  %252 = insertvalue %any undef, ptr %taddr36, 0
  %253 = insertvalue %any %252, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr37, align 8
  %254 = insertvalue %any undef, ptr %taddr37, 0
  %255 = insertvalue %any %254, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %253, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %255, ptr %ptradd39, align 16
  %256 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %256, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.57, i64 25, i32 681, ptr byval(%"any[]") align 8 %indirectarg41) #5, !dbg !2303
  unreachable, !dbg !2303

panic47:                                          ; preds = %if.exit45
  %257 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2310
  call void %257(ptr @.panic_msg.58, i64 55, ptr @.file.44, i64 20, ptr @.func.57, i64 25, i32 682) #5, !dbg !2310
  unreachable, !dbg !2310

panic49:                                          ; preds = %checkok48
  store i64 8, ptr %taddr50, align 8
  %258 = insertvalue %any undef, ptr %taddr50, 0
  %259 = insertvalue %any %258, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %49, ptr %taddr51, align 8
  %260 = insertvalue %any undef, ptr %taddr51, 0
  %261 = insertvalue %any %260, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %259, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %261, ptr %ptradd53, align 16
  %262 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %262, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.44, i64 20, ptr @.func.57, i64 25, i32 682, ptr byval(%"any[]") align 8 %indirectarg55) #5, !dbg !2310
  unreachable, !dbg !2310

panic76:                                          ; preds = %switch.case
  %263 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2343
  call void %263(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 31) #5, !dbg !2343
  unreachable, !dbg !2343

panic90:                                          ; preds = %switch.case88
  %264 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2353
  call void %264(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 35) #5, !dbg !2353
  unreachable, !dbg !2353

panic92:                                          ; preds = %checkok91
  store i64 2, ptr %taddr93, align 8
  %265 = insertvalue %any undef, ptr %taddr93, 0
  %266 = insertvalue %any %265, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %87, ptr %taddr94, align 8
  %267 = insertvalue %any undef, ptr %taddr94, 0
  %268 = insertvalue %any %267, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %266, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %268, ptr %ptradd96, align 16
  %269 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %269, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 35, ptr byval(%"any[]") align 8 %indirectarg98) #5, !dbg !2353
  unreachable, !dbg !2353

panic123:                                         ; preds = %switch.case121
  %270 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2368
  call void %270(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 40) #5, !dbg !2368
  unreachable, !dbg !2368

panic125:                                         ; preds = %checkok124
  store i64 4, ptr %taddr126, align 8
  %271 = insertvalue %any undef, ptr %taddr126, 0
  %272 = insertvalue %any %271, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %106, ptr %taddr127, align 8
  %273 = insertvalue %any undef, ptr %taddr127, 0
  %274 = insertvalue %any %273, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %272, ptr %varargslots128, align 16
  %ptradd129 = getelementptr inbounds i8, ptr %varargslots128, i64 16
  store %any %274, ptr %ptradd129, align 16
  %275 = insertvalue %"any[]" undef, ptr %varargslots128, 0
  %"$$temp130" = insertvalue %"any[]" %275, i64 2, 1
  store %"any[]" %"$$temp130", ptr %indirectarg131, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 40, ptr byval(%"any[]") align 8 %indirectarg131) #5, !dbg !2368
  unreachable, !dbg !2368

panic155:                                         ; preds = %switch.case153
  %276 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2383
  call void %276(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 45) #5, !dbg !2383
  unreachable, !dbg !2383

panic157:                                         ; preds = %checkok156
  store i64 8, ptr %taddr158, align 8
  %277 = insertvalue %any undef, ptr %taddr158, 0
  %278 = insertvalue %any %277, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %125, ptr %taddr159, align 8
  %279 = insertvalue %any undef, ptr %taddr159, 0
  %280 = insertvalue %any %279, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %278, ptr %varargslots160, align 16
  %ptradd161 = getelementptr inbounds i8, ptr %varargslots160, i64 16
  store %any %280, ptr %ptradd161, align 16
  %281 = insertvalue %"any[]" undef, ptr %varargslots160, 0
  %"$$temp162" = insertvalue %"any[]" %281, i64 2, 1
  store %"any[]" %"$$temp162", ptr %indirectarg163, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 45, ptr byval(%"any[]") align 8 %indirectarg163) #5, !dbg !2383
  unreachable, !dbg !2383

panic191:                                         ; preds = %switch.case188
  %282 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2398
  call void %282(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 50) #5, !dbg !2398
  unreachable, !dbg !2398

panic193:                                         ; preds = %checkok192
  store i64 16, ptr %taddr194, align 8
  %283 = insertvalue %any undef, ptr %taddr194, 0
  %284 = insertvalue %any %283, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %144, ptr %taddr195, align 8
  %285 = insertvalue %any undef, ptr %taddr195, 0
  %286 = insertvalue %any %285, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %284, ptr %varargslots196, align 16
  %ptradd197 = getelementptr inbounds i8, ptr %varargslots196, i64 16
  store %any %286, ptr %ptradd197, align 16
  %287 = insertvalue %"any[]" undef, ptr %varargslots196, 0
  %"$$temp198" = insertvalue %"any[]" %287, i64 2, 1
  store %"any[]" %"$$temp198", ptr %indirectarg199, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 50, ptr byval(%"any[]") align 8 %indirectarg199) #5, !dbg !2398
  unreachable, !dbg !2398

panic227:                                         ; preds = %switch.case224
  %288 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2413
  call void %288(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 55) #5, !dbg !2413
  unreachable, !dbg !2413

panic244:                                         ; preds = %switch.case241
  %289 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2423
  call void %289(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 59) #5, !dbg !2423
  unreachable, !dbg !2423

panic246:                                         ; preds = %checkok245
  store i64 2, ptr %taddr247, align 8
  %290 = insertvalue %any undef, ptr %taddr247, 0
  %291 = insertvalue %any %290, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %173, ptr %taddr248, align 8
  %292 = insertvalue %any undef, ptr %taddr248, 0
  %293 = insertvalue %any %292, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %291, ptr %varargslots249, align 16
  %ptradd250 = getelementptr inbounds i8, ptr %varargslots249, i64 16
  store %any %293, ptr %ptradd250, align 16
  %294 = insertvalue %"any[]" undef, ptr %varargslots249, 0
  %"$$temp251" = insertvalue %"any[]" %294, i64 2, 1
  store %"any[]" %"$$temp251", ptr %indirectarg252, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 59, ptr byval(%"any[]") align 8 %indirectarg252) #5, !dbg !2423
  unreachable, !dbg !2423

panic277:                                         ; preds = %switch.case274
  %295 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2435
  call void %295(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 63) #5, !dbg !2435
  unreachable, !dbg !2435

panic279:                                         ; preds = %checkok278
  store i64 4, ptr %taddr280, align 8
  %296 = insertvalue %any undef, ptr %taddr280, 0
  %297 = insertvalue %any %296, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %189, ptr %taddr281, align 8
  %298 = insertvalue %any undef, ptr %taddr281, 0
  %299 = insertvalue %any %298, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %297, ptr %varargslots282, align 16
  %ptradd283 = getelementptr inbounds i8, ptr %varargslots282, i64 16
  store %any %299, ptr %ptradd283, align 16
  %300 = insertvalue %"any[]" undef, ptr %varargslots282, 0
  %"$$temp284" = insertvalue %"any[]" %300, i64 2, 1
  store %"any[]" %"$$temp284", ptr %indirectarg285, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 63, ptr byval(%"any[]") align 8 %indirectarg285) #5, !dbg !2435
  unreachable, !dbg !2435

panic308:                                         ; preds = %switch.case305
  %301 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2447
  call void %301(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 67) #5, !dbg !2447
  unreachable, !dbg !2447

panic310:                                         ; preds = %checkok309
  store i64 8, ptr %taddr311, align 8
  %302 = insertvalue %any undef, ptr %taddr311, 0
  %303 = insertvalue %any %302, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %205, ptr %taddr312, align 8
  %304 = insertvalue %any undef, ptr %taddr312, 0
  %305 = insertvalue %any %304, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %303, ptr %varargslots313, align 16
  %ptradd314 = getelementptr inbounds i8, ptr %varargslots313, i64 16
  store %any %305, ptr %ptradd314, align 16
  %306 = insertvalue %"any[]" undef, ptr %varargslots313, 0
  %"$$temp315" = insertvalue %"any[]" %306, i64 2, 1
  store %"any[]" %"$$temp315", ptr %indirectarg316, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 67, ptr byval(%"any[]") align 8 %indirectarg316) #5, !dbg !2447
  unreachable, !dbg !2447

panic342:                                         ; preds = %switch.case339
  %307 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2459
  call void %307(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 71) #5, !dbg !2459
  unreachable, !dbg !2459

panic344:                                         ; preds = %checkok343
  store i64 16, ptr %taddr345, align 8
  %308 = insertvalue %any undef, ptr %taddr345, 0
  %309 = insertvalue %any %308, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %221, ptr %taddr346, align 8
  %310 = insertvalue %any undef, ptr %taddr346, 0
  %311 = insertvalue %any %310, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %309, ptr %varargslots347, align 16
  %ptradd348 = getelementptr inbounds i8, ptr %varargslots347, i64 16
  store %any %311, ptr %ptradd348, align 16
  %312 = insertvalue %"any[]" undef, ptr %varargslots347, 0
  %"$$temp349" = insertvalue %"any[]" %312, i64 2, 1
  store %"any[]" %"$$temp349", ptr %indirectarg350, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.57, i64 25, i32 71, ptr byval(%"any[]") align 8 %indirectarg350) #5, !dbg !2459
  unreachable, !dbg !2459
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.MultiWriter.init(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4) #0 comdat !dbg !2474 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %writers = alloca %"any[]", align 8
  %copy = alloca %"any[]", align 8
  %allocator6 = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator8 = alloca %any, align 8
  %elements9 = alloca i64, align 8
  %allocator10 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %taddr24 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %varargslots27 = alloca [1 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %taddr52 = alloca i64, align 8
  %taddr53 = alloca i64, align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr62 = alloca i64, align 8
  %taddr63 = alloca i64, align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %.assign_list = alloca %MultiWriter, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2491
  %5 = icmp eq ptr %0, null, !dbg !2491
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2491
  br i1 %6, label %panic, label %checkok, !dbg !2491

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2492, !DIExpression(), !2493)
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !2494, !DIExpression(), !2495)
  store ptr %3, ptr %writers, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %writers, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %writers, !2496, !DIExpression(), !2497)
  %ptradd2 = getelementptr inbounds i8, ptr %writers, i64 8, !dbg !2498
  %7 = load i64, ptr %ptradd2, align 8, !dbg !2498
  %lt = icmp ult i64 0, %7, !dbg !2498
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2498

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2498
  call void %8(ptr @.panic_msg.101, i64 36, ptr @.file.100, i64 14, ptr @.func, i64 4, i32 15) #5, !dbg !2498
  unreachable, !dbg !2498

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !2500
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !2500
  %10 = load i64, ptr %ptradd3, align 8, !dbg !2500
  %eq = icmp eq i64 0, %10, !dbg !2500
  br i1 %eq, label %assert_ok5, label %assert_fail4, !dbg !2500

assert_fail4:                                     ; preds = %assert_ok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2500
  call void %11(ptr @.panic_msg.102, i64 90, ptr @.file.100, i64 14, ptr @.func, i64 4, i32 16) #5, !dbg !2500
  unreachable, !dbg !2500

assert_ok5:                                       ; preds = %assert_ok
    #dbg_declare(ptr %copy, !2501, !DIExpression(), !2502)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator6, ptr align 8 %allocator, i32 16, i1 false)
  %ptradd7 = getelementptr inbounds i8, ptr %writers, i64 8, !dbg !2503
  %12 = load i64, ptr %ptradd7, align 8
  store i64 %12, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator8, ptr align 8 %allocator6, i32 16, i1 false)
  %13 = load i64, ptr %elements, align 8
  store i64 %13, ptr %elements9, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator10, ptr align 8 %allocator8, i32 16, i1 false)
  %14 = load i64, ptr %elements9, align 8, !dbg !2504
  %mul = mul i64 16, %14, !dbg !2510
  store i64 %mul, ptr %size, align 8
  %15 = load i64, ptr %size, align 8, !dbg !2511
  %i2nb = icmp eq i64 %15, 0, !dbg !2511
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2511

if.then:                                          ; preds = %assert_ok5
  store ptr null, ptr %blockret, align 8, !dbg !2514
  br label %expr_block.exit, !dbg !2514

if.exit:                                          ; preds = %assert_ok5
  %16 = load i64, ptr %size, align 8, !dbg !2515
  br i1 true, label %or.phi, label %or.rhs, !dbg !2516

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %17 = load i64, ptr %x, align 8, !dbg !2517
  %neq = icmp ne i64 0, %17, !dbg !2517
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !2517

and.rhs:                                          ; preds = %or.rhs
  %18 = load i64, ptr %x, align 8, !dbg !2520
  %19 = load i64, ptr %x, align 8, !dbg !2521
  %sub = sub i64 %19, 1, !dbg !2521
  %and = and i64 %18, %sub, !dbg !2520
  %eq11 = icmp eq i64 %and, 0, !dbg !2520
  br label %and.phi, !dbg !2520

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq11, %and.rhs ], !dbg !2520
  br label %or.phi, !dbg !2520

or.phi:                                           ; preds = %and.phi, %if.exit
  %val12 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !2520
  br i1 %val12, label %assert_ok14, label %assert_fail13, !dbg !2520

assert_fail13:                                    ; preds = %or.phi
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2522
  call void %20(ptr @.panic_msg.103, i64 65, ptr @.file.104, i64 16, ptr @.func, i64 4, i32 97) #5, !dbg !2522
  unreachable, !dbg !2522

assert_ok14:                                      ; preds = %or.phi
  br i1 true, label %assert_ok16, label %assert_fail15, !dbg !2522

assert_fail15:                                    ; preds = %assert_ok14
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2522
  call void %21(ptr @.panic_msg.105, i64 80, ptr @.file.104, i64 16, ptr @.func, i64 4, i32 97) #5, !dbg !2522
  unreachable, !dbg !2522

assert_ok16:                                      ; preds = %assert_ok14
  %lt17 = icmp ult i64 0, %16, !dbg !2522
  br i1 %lt17, label %assert_ok19, label %assert_fail18, !dbg !2522

assert_fail18:                                    ; preds = %assert_ok16
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2522
  call void %22(ptr @.panic_msg.106, i64 59, ptr @.file.104, i64 16, ptr @.func, i64 4, i32 97) #5, !dbg !2522
  unreachable, !dbg !2522

assert_ok19:                                      ; preds = %assert_ok16
  %ptradd20 = getelementptr inbounds i8, ptr %allocator10, i64 8, !dbg !2522
  %23 = load i64, ptr %ptradd20, align 8, !dbg !2522
  %24 = inttoptr i64 %23 to ptr, !dbg !2522
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2491
  %25 = icmp eq ptr %24, %type, !dbg !2491
  br i1 %25, label %cache_hit, label %cache_miss, !dbg !2491

cache_miss:                                       ; preds = %assert_ok19
  %ptradd21 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !2491
  %26 = load ptr, ptr %ptradd21, align 8, !dbg !2491
  %27 = call ptr @.dyn_search(ptr %26, ptr @"$sel.acquire"), !dbg !2491
  store ptr %27, ptr %.inlinecache, align 8, !dbg !2491
  store ptr %24, ptr %.cachedtype, align 8, !dbg !2491
  br label %28, !dbg !2491

cache_hit:                                        ; preds = %assert_ok19
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2491
  br label %28, !dbg !2491

28:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %27, %cache_miss ], !dbg !2491
  %29 = icmp eq ptr %fn_phi, null, !dbg !2491
  br i1 %29, label %missing_function, label %match, !dbg !2491

missing_function:                                 ; preds = %28
  %30 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2491
  call void %30(ptr @.panic_msg.107, i64 44, ptr @.file.104, i64 16, ptr @.func, i64 4, i32 97) #5, !dbg !2491
  unreachable, !dbg !2491

match:                                            ; preds = %28
  %31 = load ptr, ptr %allocator10, align 8
  %32 = call i64 %fn_phi(ptr %retparam, ptr %31, i64 %16, i32 1, i64 0), !dbg !2522
  %not_err = icmp eq i64 %32, 0, !dbg !2522
  %33 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2522
  br i1 %33, label %after_check, label %assign_optional, !dbg !2522

assign_optional:                                  ; preds = %match
  store i64 %32, ptr %error_var, align 8, !dbg !2522
  br label %panic_block, !dbg !2522

after_check:                                      ; preds = %match
  %34 = load ptr, ptr %retparam, align 8, !dbg !2522
  store ptr %34, ptr %blockret, align 8, !dbg !2522
  br label %expr_block.exit, !dbg !2522

expr_block.exit:                                  ; preds = %after_check, %if.then
  %35 = load ptr, ptr %blockret, align 8, !dbg !2522
  store ptr %35, ptr %taddr, align 8
  %36 = load ptr, ptr %taddr, align 8
  %37 = load i64, ptr %elements9, align 8, !dbg !2523
  %add = add i64 0, %37, !dbg !2523
  %gt = icmp ugt i64 0, %add, !dbg !2523
  %sub22 = sub i64 %add, 0, !dbg !2523
  %38 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2523
  br i1 %38, label %panic23, label %checkok25, !dbg !2523

checkok25:                                        ; preds = %expr_block.exit
  %size26 = sub i64 %add, 0, !dbg !2524
  %39 = insertvalue %"any[]" undef, ptr %36, 0, !dbg !2524
  %40 = insertvalue %"any[]" %39, i64 %size26, 1, !dbg !2524
  br label %noerr_block, !dbg !2524

panic_block:                                      ; preds = %assign_optional
  %41 = insertvalue %any undef, ptr %error_var, 0, !dbg !2524
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !2524
  store %any %42, ptr %varargslots27, align 16
  %43 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp28" = insertvalue %"any[]" %43, i64 1, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.93, i64 36, ptr @.file.104, i64 16, ptr @.func, i64 4, i32 261, ptr byval(%"any[]") align 8 %indirectarg29) #5, !dbg !2507
  unreachable, !dbg !2507

noerr_block:                                      ; preds = %checkok25
  store %"any[]" %40, ptr %copy, align 8, !dbg !2507
  %44 = load %"any[]", ptr %writers, align 8, !dbg !2525
  %45 = extractvalue %"any[]" %44, 0, !dbg !2525
  %46 = extractvalue %"any[]" %44, 1, !dbg !2526
  %gt30 = icmp ugt i64 0, %46, !dbg !2526
  %47 = call i1 @llvm.expect.i1(i1 %gt30, i1 false), !dbg !2526
  br i1 %47, label %panic31, label %checkok38, !dbg !2526

checkok38:                                        ; preds = %noerr_block
  %size39 = sub i64 %46, 0, !dbg !2525
  %48 = insertvalue %"any[]" undef, ptr %45, 0, !dbg !2525
  %49 = insertvalue %"any[]" %48, i64 %size39, 1, !dbg !2525
  %50 = load %"any[]", ptr %copy, align 8, !dbg !2527
  %51 = extractvalue %"any[]" %50, 0, !dbg !2527
  %52 = extractvalue %"any[]" %50, 1, !dbg !2528
  %gt40 = icmp ugt i64 0, %52, !dbg !2528
  %53 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !2528
  br i1 %53, label %panic41, label %checkok48, !dbg !2528

checkok48:                                        ; preds = %checkok38
  %size49 = sub i64 %52, 0, !dbg !2527
  %54 = insertvalue %"any[]" undef, ptr %51, 0, !dbg !2527
  %55 = insertvalue %"any[]" %54, i64 %size49, 1, !dbg !2527
  %56 = extractvalue %"any[]" %55, 0, !dbg !2527
  %57 = extractvalue %"any[]" %49, 0, !dbg !2527
  %58 = extractvalue %"any[]" %49, 1, !dbg !2527
  %59 = extractvalue %"any[]" %55, 1, !dbg !2527
  %neq50 = icmp ne i64 %59, %58, !dbg !2527
  %60 = call i1 @llvm.expect.i1(i1 %neq50, i1 false), !dbg !2527
  br i1 %60, label %panic51, label %checkok58, !dbg !2527

checkok58:                                        ; preds = %checkok48
  %61 = mul i64 %58, 16, !dbg !2527
  call void @llvm.memmove.p0.p0.i64(ptr align 8 %56, ptr align 8 %57, i64 %61, i1 false), !dbg !2527
  %62 = load ptr, ptr %self, align 8, !dbg !2529
  %checknull = icmp eq ptr %62, null, !dbg !2529
  %63 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2529
  br i1 %63, label %panic59, label %checkok60, !dbg !2529

checkok60:                                        ; preds = %checkok58
  %64 = ptrtoint ptr %62 to i64, !dbg !2529
  %65 = urem i64 %64, 8, !dbg !2529
  %66 = icmp ne i64 %65, 0, !dbg !2529
  %67 = call i1 @llvm.expect.i1(i1 %66, i1 false), !dbg !2529
  br i1 %67, label %panic61, label %checkok68, !dbg !2529

checkok68:                                        ; preds = %checkok60
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 32, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %copy, i32 16, i1 false), !dbg !2530
  %ptradd69 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !2530
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd69, ptr align 8 %allocator, i32 16, i1 false), !dbg !2531
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %62, ptr align 8 %.assign_list, i32 32, i1 false), !dbg !2531
  %68 = load ptr, ptr %self, align 8, !dbg !2532
  ret ptr %68, !dbg !2532

panic:                                            ; preds = %entry
  %69 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2493
  call void %69(ptr @.panic_msg, i64 62, ptr @.file.100, i64 14, ptr @.func, i64 4, i32 18) #5, !dbg !2493
  unreachable, !dbg !2493

panic23:                                          ; preds = %expr_block.exit
  store i64 %sub22, ptr %taddr24, align 8
  %70 = insertvalue %any undef, ptr %taddr24, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %72, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.104, i64 16, ptr @.func, i64 4, i32 269, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2524
  unreachable, !dbg !2524

panic31:                                          ; preds = %noerr_block
  store i64 %46, ptr %taddr32, align 8
  %73 = insertvalue %any undef, ptr %taddr32, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr33, align 8
  %75 = insertvalue %any undef, ptr %taddr33, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %76, ptr %ptradd35, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.100, i64 14, ptr @.func, i64 4, i32 21, ptr byval(%"any[]") align 8 %indirectarg37) #5, !dbg !2525
  unreachable, !dbg !2525

panic41:                                          ; preds = %checkok38
  store i64 %52, ptr %taddr42, align 8
  %78 = insertvalue %any undef, ptr %taddr42, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %80 = insertvalue %any undef, ptr %taddr43, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %79, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %81, ptr %ptradd45, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.100, i64 14, ptr @.func, i64 4, i32 21, ptr byval(%"any[]") align 8 %indirectarg47) #5, !dbg !2527
  unreachable, !dbg !2527

panic51:                                          ; preds = %checkok48
  store i64 %59, ptr %taddr52, align 8
  %83 = insertvalue %any undef, ptr %taddr52, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr53, align 8
  %85 = insertvalue %any undef, ptr %taddr53, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %84, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %86, ptr %ptradd55, align 16
  %87 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %87, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.108, i64 38, ptr @.file.100, i64 14, ptr @.func, i64 4, i32 21, ptr byval(%"any[]") align 8 %indirectarg57) #5, !dbg !2527
  unreachable, !dbg !2527

panic59:                                          ; preds = %checkok58
  %88 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2529
  call void %88(ptr @.panic_msg.2, i64 45, ptr @.file.100, i64 14, ptr @.func, i64 4, i32 22) #5, !dbg !2529
  unreachable, !dbg !2529

panic61:                                          ; preds = %checkok60
  store i64 8, ptr %taddr62, align 8
  %89 = insertvalue %any undef, ptr %taddr62, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %65, ptr %taddr63, align 8
  %91 = insertvalue %any undef, ptr %taddr63, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %92, ptr %ptradd65, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.100, i64 14, ptr @.func, i64 4, i32 22, ptr byval(%"any[]") align 8 %indirectarg67) #5, !dbg !2529
  unreachable, !dbg !2529
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.MultiWriter.tinit(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2533 {
entry:
  %self = alloca ptr, align 8
  %writers = alloca %"any[]", align 8
  %taddr = alloca %any, align 8
  %3 = icmp eq ptr %0, null, !dbg !2536
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2536
  br i1 %4, label %panic, label %checkok, !dbg !2536

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2537, !DIExpression(), !2538)
  store ptr %1, ptr %writers, align 8
  %ptradd = getelementptr inbounds i8, ptr %writers, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %writers, !2539, !DIExpression(), !2540)
  %ptradd1 = getelementptr inbounds i8, ptr %writers, i64 8, !dbg !2541
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2541
  %lt = icmp ult i64 0, %5, !dbg !2541
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2541

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2541
  call void %6(ptr @.panic_msg.101, i64 36, ptr @.file.100, i64 14, ptr @.func.109, i64 5, i32 28) #5, !dbg !2541
  unreachable, !dbg !2541

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !2543
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !2543
  %8 = load i64, ptr %ptradd2, align 8, !dbg !2543
  %eq = icmp eq i64 0, %8, !dbg !2543
  br i1 %eq, label %assert_ok4, label %assert_fail3, !dbg !2543

assert_fail3:                                     ; preds = %assert_ok
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2543
  call void %9(ptr @.panic_msg.102, i64 90, ptr @.file.100, i64 14, ptr @.func.109, i64 5, i32 29) #5, !dbg !2543
  unreachable, !dbg !2543

assert_ok4:                                       ; preds = %assert_ok
  %10 = load ptr, ptr %self, align 8, !dbg !2544
  %11 = load %any, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !2545
  %12 = load %"any[]", ptr %writers, align 8, !dbg !2546
  %13 = extractvalue %"any[]" %12, 1, !dbg !2547
  %lt5 = icmp ult i64 0, %13, !dbg !2544
  br i1 %lt5, label %assert_ok7, label %assert_fail6, !dbg !2544

assert_fail6:                                     ; preds = %assert_ok4
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2544
  call void %14(ptr @.panic_msg.101, i64 36, ptr @.file.100, i64 14, ptr @.func.109, i64 5, i32 33) #5, !dbg !2544
  unreachable, !dbg !2544

assert_ok7:                                       ; preds = %assert_ok4
  %ptradd8 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !2548
  %15 = load i64, ptr %ptradd8, align 8, !dbg !2548
  %eq9 = icmp eq i64 0, %15, !dbg !2544
  br i1 %eq9, label %assert_ok11, label %assert_fail10, !dbg !2544

assert_fail10:                                    ; preds = %assert_ok7
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2544
  call void %16(ptr @.panic_msg.102, i64 90, ptr @.file.100, i64 14, ptr @.func.109, i64 5, i32 33) #5, !dbg !2544
  unreachable, !dbg !2544

assert_ok11:                                      ; preds = %assert_ok7
  store %any %11, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd12, align 8
  %17 = extractvalue %"any[]" %12, 0
  %18 = extractvalue %"any[]" %12, 1
  %19 = call ptr @std.io.MultiWriter.init(ptr %10, i64 %lo, ptr %hi, ptr %17, i64 %18), !dbg !2544
  ret ptr %19, !dbg !2544

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2538
  call void %20(ptr @.panic_msg, i64 62, ptr @.file.100, i64 14, ptr @.func.109, i64 5, i32 31) #5, !dbg !2538
  unreachable, !dbg !2538
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.MultiWriter.free(ptr %0) #0 comdat !dbg !2549 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2552
  %1 = icmp eq ptr %0, null, !dbg !2552
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2552
  br i1 %2, label %panic, label %checkok, !dbg !2552

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2553, !DIExpression(), !2554)
  %3 = load ptr, ptr %self, align 8, !dbg !2555
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !2555
  %4 = load ptr, ptr %ptradd, align 8, !dbg !2555
  %i2nb = icmp eq ptr %4, null, !dbg !2555
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2555

if.then:                                          ; preds = %checkok
  ret void, !dbg !2556

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !2557
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2557
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd1, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !2558
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !2559
  %i2nb2 = icmp eq ptr %8, null, !dbg !2559
  br i1 %i2nb2, label %if.then3, label %if.exit4, !dbg !2559

if.then3:                                         ; preds = %if.exit
  br label %expr_block.exit, !dbg !2562

if.exit4:                                         ; preds = %if.exit
  %9 = load ptr, ptr %ptr, align 8, !dbg !2563
  %neq = icmp ne ptr %9, null, !dbg !2564
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2564

assert_fail:                                      ; preds = %if.exit4
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2564
  call void %10(ptr @.panic_msg.111, i64 75, ptr @.file.104, i64 16, ptr @.func.110, i64 4, i32 122) #5, !dbg !2564
  unreachable, !dbg !2564

assert_ok:                                        ; preds = %if.exit4
  %ptradd5 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2564
  %11 = load i64, ptr %ptradd5, align 8, !dbg !2564
  %12 = inttoptr i64 %11 to ptr, !dbg !2564
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2552
  %13 = icmp eq ptr %12, %type, !dbg !2552
  br i1 %13, label %cache_hit, label %cache_miss, !dbg !2552

cache_miss:                                       ; preds = %assert_ok
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2552
  %14 = load ptr, ptr %ptradd6, align 8, !dbg !2552
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.release"), !dbg !2552
  store ptr %15, ptr %.inlinecache, align 8, !dbg !2552
  store ptr %12, ptr %.cachedtype, align 8, !dbg !2552
  br label %16, !dbg !2552

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2552
  br label %16, !dbg !2552

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ], !dbg !2552
  %17 = icmp eq ptr %fn_phi, null, !dbg !2552
  br i1 %17, label %missing_function, label %match, !dbg !2552

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2552
  call void %18(ptr @.panic_msg.112, i64 44, ptr @.file.104, i64 16, ptr @.func.110, i64 4, i32 122) #5, !dbg !2552
  unreachable, !dbg !2552

match:                                            ; preds = %16
  %19 = load ptr, ptr %allocator, align 8, !dbg !2552
  call void %fn_phi(ptr %19, ptr %9, i8 zeroext 0), !dbg !2552
  br label %expr_block.exit, !dbg !2552

expr_block.exit:                                  ; preds = %match, %if.then3
  %20 = load ptr, ptr %self, align 8, !dbg !2565
  %checknull = icmp eq ptr %20, null, !dbg !2565
  %21 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2565
  br i1 %21, label %panic7, label %checkok8, !dbg !2565

checkok8:                                         ; preds = %expr_block.exit
  %22 = ptrtoint ptr %20 to i64, !dbg !2565
  %23 = urem i64 %22, 8, !dbg !2565
  %24 = icmp ne i64 %23, 0, !dbg !2565
  %25 = call i1 @llvm.expect.i1(i1 %24, i1 false), !dbg !2565
  br i1 %25, label %panic9, label %checkok12, !dbg !2565

checkok12:                                        ; preds = %checkok8
  call void @llvm.memset.p0.i64(ptr align 8 %20, i8 0, i64 32, i1 false), !dbg !2565
  ret void, !dbg !2565

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2554
  call void %26(ptr @.panic_msg, i64 62, ptr @.file.100, i64 14, ptr @.func.110, i64 4, i32 36) #5, !dbg !2554
  unreachable, !dbg !2554

panic7:                                           ; preds = %expr_block.exit
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2565
  call void %27(ptr @.panic_msg.2, i64 45, ptr @.file.100, i64 14, ptr @.func.110, i64 4, i32 40) #5, !dbg !2565
  unreachable, !dbg !2565

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr10, align 8
  %30 = insertvalue %any undef, ptr %taddr10, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd11, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.100, i64 14, ptr @.func.110, i64 4, i32 40, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2565
  unreachable, !dbg !2565
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.MultiWriter.write(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !2566 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.anon = alloca i64, align 8
  %w = alloca %any, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2569
  %4 = icmp eq ptr %1, null, !dbg !2569
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !2569
  br i1 %5, label %panic, label %checkok, !dbg !2569

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2570, !DIExpression(), !2571)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2572, !DIExpression(), !2573)
    #dbg_declare(ptr %n, !2574, !DIExpression(), !2575)
  store i64 0, ptr %n, align 8, !dbg !2575
  %6 = load ptr, ptr %self, align 8, !dbg !2576
  %checknull = icmp eq ptr %6, null, !dbg !2576
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2576
  br i1 %7, label %panic1, label %checkok2, !dbg !2576

checkok2:                                         ; preds = %checkok
  %8 = ptrtoint ptr %6 to i64, !dbg !2576
  %9 = urem i64 %8, 8, !dbg !2576
  %10 = icmp ne i64 %9, 0, !dbg !2576
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false), !dbg !2576
  br i1 %11, label %panic3, label %checkok6, !dbg !2576

checkok6:                                         ; preds = %checkok2
  %ptradd7 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !2576
  %12 = load i64, ptr %ptradd7, align 8, !dbg !2576
    #dbg_declare(ptr %.anon, !2578, !DIExpression(), !2576)
  store i64 0, ptr %.anon, align 8, !dbg !2576
  br label %loop.cond, !dbg !2576

loop.cond:                                        ; preds = %if.exit, %checkok6
  %13 = load i64, ptr %.anon, align 8, !dbg !2576
  %lt = icmp ult i64 %13, %12, !dbg !2576
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2576

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %w, !2579, !DIExpression(), !2581)
  %checknull8 = icmp eq ptr %6, null, !dbg !2582
  %14 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !2582
  br i1 %14, label %panic9, label %checkok10, !dbg !2582

checkok10:                                        ; preds = %loop.body
  %15 = ptrtoint ptr %6 to i64, !dbg !2582
  %16 = urem i64 %15, 8, !dbg !2582
  %17 = icmp ne i64 %16, 0, !dbg !2582
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false), !dbg !2582
  br i1 %18, label %panic11, label %checkok18, !dbg !2582

checkok18:                                        ; preds = %checkok10
  %ptradd19 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !2582
  %19 = load i64, ptr %ptradd19, align 8, !dbg !2582
  %20 = load ptr, ptr %6, align 8, !dbg !2582
  %21 = load i64, ptr %.anon, align 8, !dbg !2582
  %ge = icmp uge i64 %21, %19, !dbg !2582
  %22 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2582
  br i1 %22, label %panic20, label %checkok27, !dbg !2582

checkok27:                                        ; preds = %checkok18
  %ptroffset = getelementptr inbounds [16 x i8], ptr %20, i64 %21, !dbg !2582
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %w, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !2582
  %ptradd28 = getelementptr inbounds i8, ptr %w, i64 8, !dbg !2583
  %23 = load i64, ptr %ptradd28, align 8, !dbg !2583
  %24 = inttoptr i64 %23 to ptr, !dbg !2583
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2569
  %25 = icmp eq ptr %24, %type, !dbg !2569
  br i1 %25, label %cache_hit, label %cache_miss, !dbg !2569

cache_miss:                                       ; preds = %checkok27
  %ptradd29 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !2569
  %26 = load ptr, ptr %ptradd29, align 8, !dbg !2569
  %27 = call ptr @.dyn_search(ptr %26, ptr @"$sel.write"), !dbg !2569
  store ptr %27, ptr %.inlinecache, align 8, !dbg !2569
  store ptr %24, ptr %.cachedtype, align 8, !dbg !2569
  br label %28, !dbg !2569

cache_hit:                                        ; preds = %checkok27
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2569
  br label %28, !dbg !2569

28:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %27, %cache_miss ], !dbg !2569
  %29 = icmp eq ptr %fn_phi, null, !dbg !2569
  br i1 %29, label %missing_function, label %match, !dbg !2569

missing_function:                                 ; preds = %28
  %30 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2585
  call void %30(ptr @.panic_msg.18, i64 42, ptr @.file.100, i64 14, ptr @.func.113, i64 5, i32 48) #5, !dbg !2585
  unreachable, !dbg !2585

match:                                            ; preds = %28
  %31 = load ptr, ptr %w, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd30 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd30, align 8
  %32 = call i64 %fn_phi(ptr %retparam, ptr %31, ptr %lo, i64 %hi), !dbg !2585
  %not_err = icmp eq i64 %32, 0, !dbg !2585
  %33 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2585
  br i1 %33, label %after_check, label %assign_optional, !dbg !2585

assign_optional:                                  ; preds = %match
  store i64 %32, ptr %error_var, align 8, !dbg !2585
  br label %guard_block, !dbg !2585

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2585

guard_block:                                      ; preds = %assign_optional
  %34 = load i64, ptr %error_var, align 8, !dbg !2585
  ret i64 %34, !dbg !2585

noerr_block:                                      ; preds = %after_check
  %35 = load i64, ptr %retparam, align 8, !dbg !2585
  store i64 %35, ptr %n, align 8, !dbg !2585
  %36 = load i64, ptr %n, align 8, !dbg !2586
  %ptradd31 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2587
  %37 = load i64, ptr %ptradd31, align 8, !dbg !2587
  %neq = icmp ne i64 %36, %37, !dbg !2586
  br i1 %neq, label %if.then, label %if.exit, !dbg !2586

if.then:                                          ; preds = %noerr_block
  ret i64 ptrtoint (ptr @std.io.INCOMPLETE_WRITE to i64), !dbg !2588

if.exit:                                          ; preds = %noerr_block
  %38 = load i64, ptr %.anon, align 8, !dbg !2576
  %addnuw = add nuw i64 %38, 1, !dbg !2576
  store i64 %addnuw, ptr %.anon, align 8, !dbg !2576
  br label %loop.cond, !dbg !2576

loop.exit:                                        ; preds = %loop.cond
  %ptradd32 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2589
  %39 = load i64, ptr %ptradd32, align 8, !dbg !2589
  store i64 %39, ptr %0, align 8, !dbg !2589
  ret i64 0, !dbg !2589

panic:                                            ; preds = %entry
  %40 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2571
  call void %40(ptr @.panic_msg, i64 62, ptr @.file.100, i64 14, ptr @.func.113, i64 5, i32 43) #5, !dbg !2571
  unreachable, !dbg !2571

panic1:                                           ; preds = %checkok
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2576
  call void %41(ptr @.panic_msg.114, i64 53, ptr @.file.100, i64 14, ptr @.func.113, i64 5, i32 46) #5, !dbg !2576
  unreachable, !dbg !2576

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr4, align 8
  %44 = insertvalue %any undef, ptr %taddr4, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %43, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %45, ptr %ptradd5, align 16
  %46 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %46, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.100, i64 14, ptr @.func.113, i64 5, i32 46, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2576
  unreachable, !dbg !2576

panic9:                                           ; preds = %loop.body
  %47 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2582
  call void %47(ptr @.panic_msg.114, i64 53, ptr @.file.100, i64 14, ptr @.func.113, i64 5, i32 46) #5, !dbg !2582
  unreachable, !dbg !2582

panic11:                                          ; preds = %checkok10
  store i64 8, ptr %taddr12, align 8
  %48 = insertvalue %any undef, ptr %taddr12, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr13, align 8
  %50 = insertvalue %any undef, ptr %taddr13, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %49, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %51, ptr %ptradd15, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %52, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.100, i64 14, ptr @.func.113, i64 5, i32 46, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !2582
  unreachable, !dbg !2582

panic20:                                          ; preds = %checkok18
  store i64 %19, ptr %taddr21, align 8
  %53 = insertvalue %any undef, ptr %taddr21, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr22, align 8
  %55 = insertvalue %any undef, ptr %taddr22, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %56, ptr %ptradd24, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.100, i64 14, ptr @.func.113, i64 5, i32 46, ptr byval(%"any[]") align 8 %indirectarg26) #5, !dbg !2582
  unreachable, !dbg !2582
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.MultiWriter.write_byte(ptr %0, i8 zeroext %1) #0 comdat !dbg !2590 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %2 = icmp eq ptr %0, null, !dbg !2593
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2593
  br i1 %3, label %panic, label %checkok, !dbg !2593

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2594, !DIExpression(), !2595)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !2596, !DIExpression(), !2597)
    #dbg_declare(ptr %data, !2598, !DIExpression(), !2602)
  store i8 0, ptr %data, align 1, !dbg !2602
  %4 = load i8, ptr %c, align 1, !dbg !2603
  store i8 %4, ptr %data, align 1, !dbg !2603
  %5 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !2604
  %6 = insertvalue %"char[]" %5, i64 1, 1, !dbg !2604
  %7 = load ptr, ptr %self, align 8
  %8 = call i64 @std.io.MultiWriter.write(ptr %retparam, ptr %7, ptr %data, i64 1), !dbg !2605
  %not_err = icmp eq i64 %8, 0, !dbg !2605
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2605
  br i1 %9, label %after_check, label %assign_optional, !dbg !2605

assign_optional:                                  ; preds = %checkok
  store i64 %8, ptr %error_var, align 8, !dbg !2605
  br label %guard_block, !dbg !2605

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !2605

guard_block:                                      ; preds = %assign_optional
  %10 = load i64, ptr %error_var, align 8, !dbg !2605
  ret i64 %10, !dbg !2605

noerr_block:                                      ; preds = %after_check
  ret i64 0, !dbg !2605

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2595
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.100, i64 14, ptr @.func.115, i64 10, i32 54) #5, !dbg !2595
  unreachable, !dbg !2595
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.len(ptr %0) #0 comdat !dbg !2606 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2610
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2610
  br i1 %2, label %panic, label %checkok, !dbg !2610

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2611, !DIExpression(), !2612)
  %3 = load ptr, ptr %self, align 8, !dbg !2613
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !2613
  %4 = load i64, ptr %ptradd, align 8, !dbg !2613
  ret i64 %4, !dbg !2613

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2612
  call void %5(ptr @.panic_msg, i64 62, ptr @.file.116, i64 13, ptr @.func.117, i64 3, i32 9) #5, !dbg !2612
  unreachable, !dbg !2612
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteReader.init(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2614 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %ByteReader, align 8
  %3 = icmp eq ptr %0, null, !dbg !2617
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2617
  br i1 %4, label %panic, label %checkok, !dbg !2617

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2618, !DIExpression(), !2619)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2620, !DIExpression(), !2621)
  %5 = load ptr, ptr %self, align 8, !dbg !2622
  %checknull = icmp eq ptr %5, null, !dbg !2622
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2622
  br i1 %6, label %panic1, label %checkok2, !dbg !2622

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2622
  %8 = urem i64 %7, 8, !dbg !2622
  %9 = icmp ne i64 %8, 0, !dbg !2622
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2622
  br i1 %10, label %panic3, label %checkok6, !dbg !2622

checkok6:                                         ; preds = %checkok2
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %bytes, i32 16, i1 false), !dbg !2623
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !2623
  %11 = load ptr, ptr %self, align 8, !dbg !2624
  ret ptr %11, !dbg !2624

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2619
  call void %12(ptr @.panic_msg, i64 62, ptr @.file.116, i64 13, ptr @.func, i64 4, i32 14) #5, !dbg !2619
  unreachable, !dbg !2619

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2622
  call void %13(ptr @.panic_msg.2, i64 45, ptr @.file.116, i64 13, ptr @.func, i64 4, i32 16) #5, !dbg !2622
  unreachable, !dbg !2622

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %14 = insertvalue %any undef, ptr %taddr, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %16 = insertvalue %any undef, ptr %taddr4, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %15, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %17, ptr %ptradd5, align 16
  %18 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %18, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.116, i64 13, ptr @.func, i64 4, i32 16, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2622
  unreachable, !dbg !2622
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !2625 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %reterr = alloca i64, align 8
  %dst = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %src = alloca ptr, align 8
  %len16 = alloca i64, align 8
  %reterr34 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !2628
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !2628
  br i1 %5, label %panic, label %checkok, !dbg !2628

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2629, !DIExpression(), !2630)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2631, !DIExpression(), !2632)
  %6 = load ptr, ptr %self, align 8, !dbg !2633
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2633
  %7 = load i64, ptr %ptradd1, align 8, !dbg !2633
  %8 = load ptr, ptr %self, align 8, !dbg !2634
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !2634
  %9 = load i64, ptr %ptradd2, align 8, !dbg !2634
  %ge = icmp uge i64 %7, %9, !dbg !2633
  br i1 %ge, label %if.then, label %if.exit, !dbg !2633

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !2635

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %len, !2636, !DIExpression(), !2637)
  %10 = load ptr, ptr %self, align 8, !dbg !2638
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !2638
  %11 = load i64, ptr %ptradd3, align 8, !dbg !2638
  %12 = load ptr, ptr %self, align 8, !dbg !2639
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2639
  %13 = load i64, ptr %ptradd4, align 8, !dbg !2639
  %sub = sub i64 %11, %13, !dbg !2638
  store i64 %sub, ptr %x, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2640
  %14 = load i64, ptr %ptradd5, align 8
  store i64 %14, ptr %.anon, align 8
  %15 = load i64, ptr %x, align 8
  store i64 %15, ptr %a, align 8
  %16 = load i64, ptr %.anon, align 8
  store i64 %16, ptr %b, align 8
  %17 = load i64, ptr %a, align 8, !dbg !2641
  %18 = load i64, ptr %b, align 8, !dbg !2646
  %lt = icmp ult i64 %17, %18, !dbg !2641
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !2641

cond.lhs:                                         ; preds = %if.exit
  %19 = load i64, ptr %x, align 8, !dbg !2647
  br label %cond.phi, !dbg !2647

cond.rhs:                                         ; preds = %if.exit
  %20 = load i64, ptr %.anon, align 8, !dbg !2648
  br label %cond.phi, !dbg !2648

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %19, %cond.lhs ], [ %20, %cond.rhs ], !dbg !2648
  store i64 %val, ptr %len, align 8, !dbg !2648
  %21 = load i64, ptr %len, align 8, !dbg !2649
  %eq = icmp eq i64 0, %21, !dbg !2649
  br i1 %eq, label %if.then6, label %if.exit7, !dbg !2649

if.then6:                                         ; preds = %cond.phi
  store i64 0, ptr %0, align 8, !dbg !2650
  ret i64 0, !dbg !2650

if.exit7:                                         ; preds = %cond.phi
  %22 = load ptr, ptr %bytes, align 8, !dbg !2651
  store ptr %22, ptr %dst, align 8
  %23 = load ptr, ptr %self, align 8, !dbg !2652
  %ptradd8 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !2652
  %24 = load i64, ptr %ptradd8, align 8, !dbg !2652
  %25 = load ptr, ptr %23, align 8, !dbg !2652
  %26 = load ptr, ptr %self, align 8, !dbg !2653
  %ptradd9 = getelementptr inbounds i8, ptr %26, i64 16, !dbg !2653
  %27 = load i64, ptr %ptradd9, align 8, !dbg !2653
  %ge10 = icmp uge i64 %27, %24, !dbg !2653
  %28 = call i1 @llvm.expect.i1(i1 %ge10, i1 false), !dbg !2653
  br i1 %28, label %panic11, label %checkok14, !dbg !2653

checkok14:                                        ; preds = %if.exit7
  %ptradd15 = getelementptr inbounds i8, ptr %25, i64 %27, !dbg !2653
  store ptr %ptradd15, ptr %src, align 8
  %29 = load i64, ptr %len, align 8
  store i64 %29, ptr %len16, align 8
  %30 = load ptr, ptr %dst, align 8, !dbg !2654
  %neq = icmp ne ptr %30, null, !dbg !2654
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2654

assert_fail:                                      ; preds = %checkok14
  %31 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2654
  call void %31(ptr @.panic_msg.119, i64 37, ptr @.file.120, i64 6, ptr @.func.118, i64 4, i32 329) #5, !dbg !2654
  unreachable, !dbg !2654

assert_ok:                                        ; preds = %checkok14
  %32 = load ptr, ptr %src, align 8, !dbg !2659
  %neq17 = icmp ne ptr %32, null, !dbg !2659
  br i1 %neq17, label %or.phi, label %or.rhs, !dbg !2659

or.rhs:                                           ; preds = %assert_ok
  %33 = load i64, ptr %len16, align 8, !dbg !2660
  %eq18 = icmp eq i64 0, %33, !dbg !2660
  br label %or.phi, !dbg !2660

or.phi:                                           ; preds = %or.rhs, %assert_ok
  %val19 = phi i1 [ true, %assert_ok ], [ %eq18, %or.rhs ], !dbg !2660
  br i1 %val19, label %assert_ok21, label %assert_fail20, !dbg !2660

assert_fail20:                                    ; preds = %or.phi
  %34 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2661
  call void %34(ptr @.panic_msg.121, i64 94, ptr @.file.116, i64 13, ptr @.func.118, i64 4, i32 25) #5, !dbg !2661
  unreachable, !dbg !2661

assert_ok21:                                      ; preds = %or.phi
  %35 = load i64, ptr %len16, align 8, !dbg !2662
  %eq22 = icmp eq i64 0, %35, !dbg !2662
  br i1 %eq22, label %or.phi24, label %or.rhs23, !dbg !2662

or.rhs23:                                         ; preds = %assert_ok21
  %36 = load ptr, ptr %dst, align 8, !dbg !2663
  %37 = load i64, ptr %len16, align 8, !dbg !2664
  %ptradd_any = getelementptr i8, ptr %36, i64 %37, !dbg !2664
  %38 = load ptr, ptr %src, align 8, !dbg !2665
  %le = icmp ule ptr %ptradd_any, %38, !dbg !2663
  br label %or.phi24, !dbg !2663

or.phi24:                                         ; preds = %or.rhs23, %assert_ok21
  %val25 = phi i1 [ true, %assert_ok21 ], [ %le, %or.rhs23 ], !dbg !2663
  br i1 %val25, label %or.phi29, label %or.rhs26, !dbg !2663

or.rhs26:                                         ; preds = %or.phi24
  %39 = load ptr, ptr %src, align 8, !dbg !2666
  %40 = load i64, ptr %len16, align 8, !dbg !2667
  %ptradd_any27 = getelementptr i8, ptr %39, i64 %40, !dbg !2667
  %41 = load ptr, ptr %dst, align 8, !dbg !2668
  %le28 = icmp ule ptr %ptradd_any27, %41, !dbg !2666
  br label %or.phi29, !dbg !2666

or.phi29:                                         ; preds = %or.rhs26, %or.phi24
  %val30 = phi i1 [ true, %or.phi24 ], [ %le28, %or.rhs26 ], !dbg !2666
  br i1 %val30, label %assert_ok32, label %assert_fail31, !dbg !2666

assert_fail31:                                    ; preds = %or.phi29
  %42 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2661
  call void %42(ptr @.panic_msg.122, i64 95, ptr @.file.116, i64 13, ptr @.func.118, i64 4, i32 25) #5, !dbg !2661
  unreachable, !dbg !2661

assert_ok32:                                      ; preds = %or.phi29
  %43 = load ptr, ptr %dst, align 8, !dbg !2669
  %44 = load ptr, ptr %src, align 8, !dbg !2670
  %45 = load i64, ptr %len16, align 8, !dbg !2671
  call void @llvm.memcpy.p0.p0.i64(ptr %43, ptr %44, i64 %45, i1 false), !dbg !2672
  %46 = load ptr, ptr %self, align 8, !dbg !2673
  %ptradd33 = getelementptr inbounds i8, ptr %46, i64 16, !dbg !2673
  %47 = load i64, ptr %ptradd33, align 8, !dbg !2673
  %48 = load i64, ptr %len, align 8, !dbg !2674
  %add = add i64 %47, %48, !dbg !2673
  store i64 %add, ptr %ptradd33, align 8, !dbg !2673
  %49 = load i64, ptr %len, align 8, !dbg !2675
  store i64 %49, ptr %0, align 8, !dbg !2675
  ret i64 0, !dbg !2675

panic:                                            ; preds = %entry
  %50 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2630
  call void %50(ptr @.panic_msg, i64 62, ptr @.file.116, i64 13, ptr @.func.118, i64 4, i32 20) #5, !dbg !2630
  unreachable, !dbg !2630

panic11:                                          ; preds = %if.exit7
  store i64 %24, ptr %taddr, align 8
  %51 = insertvalue %any undef, ptr %taddr, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr12, align 8
  %53 = insertvalue %any undef, ptr %taddr12, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %52, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd13, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.116, i64 13, ptr @.func.118, i64 4, i32 25, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2653
  unreachable, !dbg !2653
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !2676 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %2 = icmp eq ptr %1, null, !dbg !2679
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2679
  br i1 %3, label %panic, label %checkok, !dbg !2679

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2680, !DIExpression(), !2681)
  %4 = load ptr, ptr %self, align 8, !dbg !2682
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !2682
  %5 = load i64, ptr %ptradd, align 8, !dbg !2682
  %6 = load ptr, ptr %self, align 8, !dbg !2683
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !2683
  %7 = load i64, ptr %ptradd1, align 8, !dbg !2683
  %ge = icmp uge i64 %5, %7, !dbg !2682
  br i1 %ge, label %if.then, label %if.exit, !dbg !2682

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !2684

if.exit:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !2685
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !2685
  %9 = load i64, ptr %ptradd2, align 8, !dbg !2685
  %10 = load ptr, ptr %8, align 8, !dbg !2685
  %11 = load ptr, ptr %self, align 8, !dbg !2686
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !2686
  %12 = load i64, ptr %ptradd3, align 8, !dbg !2686
  %add = add i64 %12, 1, !dbg !2686
  store i64 %add, ptr %ptradd3, align 8, !dbg !2686
  %ge4 = icmp uge i64 %12, %9, !dbg !2686
  %13 = call i1 @llvm.expect.i1(i1 %ge4, i1 false), !dbg !2686
  br i1 %13, label %panic5, label %checkok8, !dbg !2686

checkok8:                                         ; preds = %if.exit
  %ptradd9 = getelementptr inbounds i8, ptr %10, i64 %12, !dbg !2686
  %14 = load i8, ptr %ptradd9, align 1, !dbg !2686
  store i8 %14, ptr %0, align 1, !dbg !2686
  ret i64 0, !dbg !2686

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2681
  call void %15(ptr @.panic_msg, i64 62, ptr @.file.116, i64 13, ptr @.func.123, i64 9, i32 30) #5, !dbg !2681
  unreachable, !dbg !2681

panic5:                                           ; preds = %if.exit
  store i64 %9, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr6, align 8
  %18 = insertvalue %any undef, ptr %taddr6, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd7, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.116, i64 13, ptr @.func.123, i64 9, i32 33, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2686
  unreachable, !dbg !2686
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.pushback_byte(ptr %0) #0 comdat !dbg !2687 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2690
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2690
  br i1 %2, label %panic, label %checkok, !dbg !2690

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2691, !DIExpression(), !2692)
  %3 = load ptr, ptr %self, align 8, !dbg !2693
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !2693
  %4 = load i64, ptr %ptradd, align 8, !dbg !2693
  %i2nb = icmp eq i64 %4, 0, !dbg !2693
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2693

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @std.io.INVALID_PUSHBACK to i64), !dbg !2694

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !2695
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2695
  %6 = load i64, ptr %ptradd1, align 8, !dbg !2695
  %sub = sub i64 %6, 1, !dbg !2695
  store i64 %sub, ptr %ptradd1, align 8, !dbg !2695
  ret i64 0, !dbg !2695

panic:                                            ; preds = %entry
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2692
  call void %7(ptr @.panic_msg, i64 62, ptr @.file.116, i64 13, ptr @.func.124, i64 13, i32 36) #5, !dbg !2692
  unreachable, !dbg !2692
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.seek(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !2696 {
entry:
  %self = alloca ptr, align 8
  %offset = alloca i64, align 8
  %seek = alloca i32, align 4
  %new_index = alloca i64, align 8
  %switch = alloca i32, align 4
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !2699
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !2699
  br i1 %5, label %panic, label %checkok, !dbg !2699

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2700, !DIExpression(), !2701)
  store i64 %2, ptr %offset, align 8
    #dbg_declare(ptr %offset, !2702, !DIExpression(), !2703)
  store i32 %3, ptr %seek, align 4
    #dbg_declare(ptr %seek, !2704, !DIExpression(), !2705)
    #dbg_declare(ptr %new_index, !2706, !DIExpression(), !2707)
  store i64 0, ptr %new_index, align 8, !dbg !2707
  %6 = load i32, ptr %seek, align 4
  store i32 %6, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i32, ptr %switch, align 4
  switch i32 %7, label %switch.exit [
    i32 0, label %switch.case
    i32 1, label %switch.case1
    i32 2, label %switch.case2
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load i64, ptr %offset, align 8, !dbg !2708
  store i64 %8, ptr %new_index, align 8, !dbg !2708
  br label %switch.exit, !dbg !2708

switch.case1:                                     ; preds = %switch.entry
  %9 = load ptr, ptr %self, align 8, !dbg !2711
  %ptradd = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2711
  %10 = load i64, ptr %ptradd, align 8, !dbg !2711
  %11 = load i64, ptr %offset, align 8, !dbg !2713
  %add = add i64 %10, %11, !dbg !2711
  store i64 %add, ptr %new_index, align 8, !dbg !2711
  br label %switch.exit, !dbg !2711

switch.case2:                                     ; preds = %switch.entry
  %12 = load ptr, ptr %self, align 8, !dbg !2714
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 8, !dbg !2714
  %13 = load i64, ptr %ptradd3, align 8, !dbg !2714
  %14 = load i64, ptr %offset, align 8, !dbg !2716
  %add4 = add i64 %13, %14, !dbg !2714
  store i64 %add4, ptr %new_index, align 8, !dbg !2714
  br label %switch.exit, !dbg !2714

switch.exit:                                      ; preds = %switch.case2, %switch.case1, %switch.case, %switch.entry
  %15 = load i64, ptr %new_index, align 8, !dbg !2717
  %lt = icmp slt i64 %15, 0, !dbg !2717
  br i1 %lt, label %if.then, label %if.exit, !dbg !2717

if.then:                                          ; preds = %switch.exit
  ret i64 ptrtoint (ptr @std.io.INVALID_POSITION to i64), !dbg !2718

if.exit:                                          ; preds = %switch.exit
  %16 = load ptr, ptr %self, align 8, !dbg !2719
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !2719
  %17 = load i64, ptr %new_index, align 8, !dbg !2720
  store i64 %17, ptr %ptradd5, align 8, !dbg !2720
  %18 = load i64, ptr %new_index, align 8, !dbg !2721
  store i64 %18, ptr %0, align 8, !dbg !2721
  ret i64 0, !dbg !2721

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2701
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.116, i64 13, ptr @.func.125, i64 4, i32 42) #5, !dbg !2701
  unreachable, !dbg !2701
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.write_to(ptr %0, ptr %1, i64 %2, ptr %3) #0 comdat !dbg !2722 {
entry:
  %self = alloca ptr, align 8
  %writer = alloca %any, align 8
  %reterr = alloca i64, align 8
  %written = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %reterr14 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2725
  %4 = icmp eq ptr %1, null, !dbg !2725
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !2725
  br i1 %5, label %panic, label %checkok, !dbg !2725

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2726, !DIExpression(), !2727)
  store i64 %2, ptr %writer, align 8
  %ptradd = getelementptr inbounds i8, ptr %writer, i64 8
  store ptr %3, ptr %ptradd, align 8
    #dbg_declare(ptr %writer, !2728, !DIExpression(), !2729)
  %6 = load ptr, ptr %self, align 8, !dbg !2730
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2730
  %7 = load i64, ptr %ptradd1, align 8, !dbg !2730
  %8 = load ptr, ptr %self, align 8, !dbg !2731
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !2731
  %9 = load i64, ptr %ptradd2, align 8, !dbg !2731
  %ge = icmp uge i64 %7, %9, !dbg !2730
  br i1 %ge, label %if.then, label %if.exit, !dbg !2730

if.then:                                          ; preds = %checkok
  store i64 0, ptr %0, align 8, !dbg !2732
  ret i64 0, !dbg !2732

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %written, !2733, !DIExpression(), !2734)
  %10 = load ptr, ptr %self, align 8, !dbg !2735
  %11 = load %"char[]", ptr %10, align 8, !dbg !2735
  %12 = extractvalue %"char[]" %11, 0, !dbg !2735
  %13 = load ptr, ptr %self, align 8, !dbg !2736
  %ptradd3 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2736
  %14 = load i64, ptr %ptradd3, align 8, !dbg !2736
  %15 = extractvalue %"char[]" %11, 1, !dbg !2736
  %gt = icmp ugt i64 %14, %15, !dbg !2736
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2736
  br i1 %16, label %panic4, label %checkok7, !dbg !2736

checkok7:                                         ; preds = %if.exit
  %size = sub i64 %15, %14, !dbg !2735
  %ptradd8 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !2735
  %17 = insertvalue %"char[]" undef, ptr %ptradd8, 0, !dbg !2735
  %18 = insertvalue %"char[]" %17, i64 %size, 1, !dbg !2735
  %ptradd9 = getelementptr inbounds i8, ptr %writer, i64 8, !dbg !2735
  %19 = load i64, ptr %ptradd9, align 8, !dbg !2735
  %20 = inttoptr i64 %19 to ptr, !dbg !2735
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2725
  %21 = icmp eq ptr %20, %type, !dbg !2725
  br i1 %21, label %cache_hit, label %cache_miss, !dbg !2725

cache_miss:                                       ; preds = %checkok7
  %ptradd10 = getelementptr inbounds i8, ptr %20, i64 16, !dbg !2725
  %22 = load ptr, ptr %ptradd10, align 8, !dbg !2725
  %23 = call ptr @.dyn_search(ptr %22, ptr @"$sel.write"), !dbg !2725
  store ptr %23, ptr %.inlinecache, align 8, !dbg !2725
  store ptr %20, ptr %.cachedtype, align 8, !dbg !2725
  br label %24, !dbg !2725

cache_hit:                                        ; preds = %checkok7
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2725
  br label %24, !dbg !2725

24:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %23, %cache_miss ], !dbg !2725
  %25 = icmp eq ptr %fn_phi, null, !dbg !2725
  br i1 %25, label %missing_function, label %match, !dbg !2725

missing_function:                                 ; preds = %24
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2737
  call void %26(ptr @.panic_msg.18, i64 42, ptr @.file.116, i64 13, ptr @.func.126, i64 8, i32 59) #5, !dbg !2737
  unreachable, !dbg !2737

match:                                            ; preds = %24
  %27 = load ptr, ptr %writer, align 8
  %28 = call i64 %fn_phi(ptr %retparam, ptr %27, ptr %ptradd8, i64 %size), !dbg !2737
  %not_err = icmp eq i64 %28, 0, !dbg !2737
  %29 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2737
  br i1 %29, label %after_check, label %assign_optional, !dbg !2737

assign_optional:                                  ; preds = %match
  store i64 %28, ptr %error_var, align 8, !dbg !2737
  br label %guard_block, !dbg !2737

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2737

guard_block:                                      ; preds = %assign_optional
  %30 = load i64, ptr %error_var, align 8, !dbg !2737
  ret i64 %30, !dbg !2737

noerr_block:                                      ; preds = %after_check
  %31 = load i64, ptr %retparam, align 8, !dbg !2737
  store i64 %31, ptr %written, align 8, !dbg !2737
  %32 = load ptr, ptr %self, align 8, !dbg !2738
  %ptradd11 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !2738
  %33 = load i64, ptr %ptradd11, align 8, !dbg !2738
  %34 = load i64, ptr %written, align 8, !dbg !2739
  %add = add i64 %33, %34, !dbg !2738
  store i64 %add, ptr %ptradd11, align 8, !dbg !2738
  %35 = load ptr, ptr %self, align 8, !dbg !2740
  %ptradd12 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !2740
  %36 = load i64, ptr %ptradd12, align 8, !dbg !2740
  %37 = load ptr, ptr %self, align 8, !dbg !2741
  %ptradd13 = getelementptr inbounds i8, ptr %37, i64 8, !dbg !2741
  %38 = load i64, ptr %ptradd13, align 8, !dbg !2741
  %le = icmp ule i64 %36, %38, !dbg !2740
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !2740

assert_fail:                                      ; preds = %noerr_block
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2740
  call void %39(ptr @.panic_msg.127, i64 45, ptr @.file.116, i64 13, ptr @.func.126, i64 8, i32 61) #5, !dbg !2740
  unreachable, !dbg !2740

assert_ok:                                        ; preds = %noerr_block
  %40 = load i64, ptr %written, align 8, !dbg !2742
  store i64 %40, ptr %0, align 8, !dbg !2742
  ret i64 0, !dbg !2742

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2727
  call void %41(ptr @.panic_msg, i64 62, ptr @.file.116, i64 13, ptr @.func.126, i64 8, i32 56) #5, !dbg !2727
  unreachable, !dbg !2727

panic4:                                           ; preds = %if.exit
  store i64 %15, ptr %taddr, align 8
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr5, align 8
  %44 = insertvalue %any undef, ptr %taddr5, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %43, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %45, ptr %ptradd6, align 16
  %46 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %46, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.116, i64 13, ptr @.func.126, i64 8, i32 59, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2735
  unreachable, !dbg !2735
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.available(ptr %0, ptr %1) #0 comdat !dbg !2743 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %x = alloca i32, align 4
  %.anon = alloca i64, align 8
  %a = alloca i32, align 4
  %b = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !2746
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2746
  br i1 %3, label %panic, label %checkok, !dbg !2746

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2747, !DIExpression(), !2748)
  store i32 0, ptr %x, align 4
  %4 = load ptr, ptr %self, align 8, !dbg !2749
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !2749
  %5 = load i64, ptr %ptradd, align 8, !dbg !2749
  %6 = load ptr, ptr %self, align 8, !dbg !2750
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2750
  %7 = load i64, ptr %ptradd1, align 8, !dbg !2750
  %sub = sub i64 %5, %7, !dbg !2749
  store i64 %sub, ptr %.anon, align 8
  %8 = load i32, ptr %x, align 4
  store i32 %8, ptr %a, align 4
  %9 = load i64, ptr %.anon, align 8
  store i64 %9, ptr %b, align 8
  %10 = load i32, ptr %a, align 4, !dbg !2751
  %sext = sext i32 %10 to i64, !dbg !2751
  %11 = load i64, ptr %b, align 8, !dbg !2756
  %gt = icmp sgt i64 %sext, %11, !dbg !2751
  %check = icmp sge i64 %11, 0, !dbg !2751
  %siui-gt = and i1 %check, %gt, !dbg !2751
  br i1 %siui-gt, label %cond.lhs, label %cond.rhs, !dbg !2751

cond.lhs:                                         ; preds = %checkok
  %12 = load i32, ptr %x, align 4, !dbg !2757
  %sext2 = sext i32 %12 to i64, !dbg !2757
  br label %cond.phi, !dbg !2757

cond.rhs:                                         ; preds = %checkok
  %13 = load i64, ptr %.anon, align 8, !dbg !2758
  br label %cond.phi, !dbg !2758

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %sext2, %cond.lhs ], [ %13, %cond.rhs ], !dbg !2758
  store i64 %val, ptr %0, align 8, !dbg !2758
  ret i64 0, !dbg !2758

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2748
  call void %14(ptr @.panic_msg, i64 62, ptr @.file.116, i64 13, ptr @.func.37, i64 9, i32 65) #5, !dbg !2748
  unreachable, !dbg !2748
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.MultiReader.init(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4) #0 comdat !dbg !2759 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %readers = alloca %"any[]", align 8
  %copy = alloca %"any[]", align 8
  %allocator3 = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator5 = alloca %any, align 8
  %elements6 = alloca i64, align 8
  %allocator7 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %taddr20 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %varargslots23 = alloca [1 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %varargslots60 = alloca [2 x %any], align 16
  %indirectarg63 = alloca %"any[]", align 8
  %.assign_list = alloca %MultiReader, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2774
  %5 = icmp eq ptr %0, null, !dbg !2774
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2774
  br i1 %6, label %panic, label %checkok, !dbg !2774

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2775, !DIExpression(), !2776)
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !2777, !DIExpression(), !2778)
  store ptr %3, ptr %readers, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %readers, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %readers, !2779, !DIExpression(), !2780)
  %7 = load ptr, ptr %self, align 8, !dbg !2781
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !2781
  %8 = load i64, ptr %ptradd2, align 8, !dbg !2781
  %eq = icmp eq i64 0, %8, !dbg !2781
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !2781

assert_fail:                                      ; preds = %checkok
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2781
  call void %9(ptr @.panic_msg.129, i64 90, ptr @.file.128, i64 14, ptr @.func, i64 4, i32 18) #5, !dbg !2781
  unreachable, !dbg !2781

assert_ok:                                        ; preds = %checkok
    #dbg_declare(ptr %copy, !2783, !DIExpression(), !2784)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %ptradd4 = getelementptr inbounds i8, ptr %readers, i64 8, !dbg !2785
  %10 = load i64, ptr %ptradd4, align 8
  store i64 %10, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator3, i32 16, i1 false)
  %11 = load i64, ptr %elements, align 8
  store i64 %11, ptr %elements6, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator7, ptr align 8 %allocator5, i32 16, i1 false)
  %12 = load i64, ptr %elements6, align 8, !dbg !2786
  %mul = mul i64 16, %12, !dbg !2791
  store i64 %mul, ptr %size, align 8
  %13 = load i64, ptr %size, align 8, !dbg !2792
  %i2nb = icmp eq i64 %13, 0, !dbg !2792
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2792

if.then:                                          ; preds = %assert_ok
  store ptr null, ptr %blockret, align 8, !dbg !2795
  br label %expr_block.exit, !dbg !2795

if.exit:                                          ; preds = %assert_ok
  %14 = load i64, ptr %size, align 8, !dbg !2796
  br i1 true, label %or.phi, label %or.rhs, !dbg !2797

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %15 = load i64, ptr %x, align 8, !dbg !2798
  %neq = icmp ne i64 0, %15, !dbg !2798
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !2798

and.rhs:                                          ; preds = %or.rhs
  %16 = load i64, ptr %x, align 8, !dbg !2801
  %17 = load i64, ptr %x, align 8, !dbg !2802
  %sub = sub i64 %17, 1, !dbg !2802
  %and = and i64 %16, %sub, !dbg !2801
  %eq8 = icmp eq i64 %and, 0, !dbg !2801
  br label %and.phi, !dbg !2801

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq8, %and.rhs ], !dbg !2801
  br label %or.phi, !dbg !2801

or.phi:                                           ; preds = %and.phi, %if.exit
  %val9 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !2801
  br i1 %val9, label %assert_ok11, label %assert_fail10, !dbg !2801

assert_fail10:                                    ; preds = %or.phi
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2803
  call void %18(ptr @.panic_msg.103, i64 65, ptr @.file.104, i64 16, ptr @.func, i64 4, i32 97) #5, !dbg !2803
  unreachable, !dbg !2803

assert_ok11:                                      ; preds = %or.phi
  br i1 true, label %assert_ok13, label %assert_fail12, !dbg !2803

assert_fail12:                                    ; preds = %assert_ok11
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2803
  call void %19(ptr @.panic_msg.105, i64 80, ptr @.file.104, i64 16, ptr @.func, i64 4, i32 97) #5, !dbg !2803
  unreachable, !dbg !2803

assert_ok13:                                      ; preds = %assert_ok11
  %lt = icmp ult i64 0, %14, !dbg !2803
  br i1 %lt, label %assert_ok15, label %assert_fail14, !dbg !2803

assert_fail14:                                    ; preds = %assert_ok13
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2803
  call void %20(ptr @.panic_msg.106, i64 59, ptr @.file.104, i64 16, ptr @.func, i64 4, i32 97) #5, !dbg !2803
  unreachable, !dbg !2803

assert_ok15:                                      ; preds = %assert_ok13
  %ptradd16 = getelementptr inbounds i8, ptr %allocator7, i64 8, !dbg !2803
  %21 = load i64, ptr %ptradd16, align 8, !dbg !2803
  %22 = inttoptr i64 %21 to ptr, !dbg !2803
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2774
  %23 = icmp eq ptr %22, %type, !dbg !2774
  br i1 %23, label %cache_hit, label %cache_miss, !dbg !2774

cache_miss:                                       ; preds = %assert_ok15
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !2774
  %24 = load ptr, ptr %ptradd17, align 8, !dbg !2774
  %25 = call ptr @.dyn_search(ptr %24, ptr @"$sel.acquire"), !dbg !2774
  store ptr %25, ptr %.inlinecache, align 8, !dbg !2774
  store ptr %22, ptr %.cachedtype, align 8, !dbg !2774
  br label %26, !dbg !2774

cache_hit:                                        ; preds = %assert_ok15
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2774
  br label %26, !dbg !2774

26:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %25, %cache_miss ], !dbg !2774
  %27 = icmp eq ptr %fn_phi, null, !dbg !2774
  br i1 %27, label %missing_function, label %match, !dbg !2774

missing_function:                                 ; preds = %26
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2774
  call void %28(ptr @.panic_msg.107, i64 44, ptr @.file.104, i64 16, ptr @.func, i64 4, i32 97) #5, !dbg !2774
  unreachable, !dbg !2774

match:                                            ; preds = %26
  %29 = load ptr, ptr %allocator7, align 8
  %30 = call i64 %fn_phi(ptr %retparam, ptr %29, i64 %14, i32 1, i64 0), !dbg !2803
  %not_err = icmp eq i64 %30, 0, !dbg !2803
  %31 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2803
  br i1 %31, label %after_check, label %assign_optional, !dbg !2803

assign_optional:                                  ; preds = %match
  store i64 %30, ptr %error_var, align 8, !dbg !2803
  br label %panic_block, !dbg !2803

after_check:                                      ; preds = %match
  %32 = load ptr, ptr %retparam, align 8, !dbg !2803
  store ptr %32, ptr %blockret, align 8, !dbg !2803
  br label %expr_block.exit, !dbg !2803

expr_block.exit:                                  ; preds = %after_check, %if.then
  %33 = load ptr, ptr %blockret, align 8, !dbg !2803
  store ptr %33, ptr %taddr, align 8
  %34 = load ptr, ptr %taddr, align 8
  %35 = load i64, ptr %elements6, align 8, !dbg !2804
  %add = add i64 0, %35, !dbg !2804
  %gt = icmp ugt i64 0, %add, !dbg !2804
  %sub18 = sub i64 %add, 0, !dbg !2804
  %36 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2804
  br i1 %36, label %panic19, label %checkok21, !dbg !2804

checkok21:                                        ; preds = %expr_block.exit
  %size22 = sub i64 %add, 0, !dbg !2805
  %37 = insertvalue %"any[]" undef, ptr %34, 0, !dbg !2805
  %38 = insertvalue %"any[]" %37, i64 %size22, 1, !dbg !2805
  br label %noerr_block, !dbg !2805

panic_block:                                      ; preds = %assign_optional
  %39 = insertvalue %any undef, ptr %error_var, 0, !dbg !2805
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !2805
  store %any %40, ptr %varargslots23, align 16
  %41 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp24" = insertvalue %"any[]" %41, i64 1, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.93, i64 36, ptr @.file.104, i64 16, ptr @.func, i64 4, i32 261, ptr byval(%"any[]") align 8 %indirectarg25) #5, !dbg !2788
  unreachable, !dbg !2788

noerr_block:                                      ; preds = %checkok21
  store %"any[]" %38, ptr %copy, align 8, !dbg !2788
  %42 = load %"any[]", ptr %readers, align 8, !dbg !2806
  %43 = extractvalue %"any[]" %42, 0, !dbg !2806
  %44 = extractvalue %"any[]" %42, 1, !dbg !2807
  %gt26 = icmp ugt i64 0, %44, !dbg !2807
  %45 = call i1 @llvm.expect.i1(i1 %gt26, i1 false), !dbg !2807
  br i1 %45, label %panic27, label %checkok34, !dbg !2807

checkok34:                                        ; preds = %noerr_block
  %size35 = sub i64 %44, 0, !dbg !2806
  %46 = insertvalue %"any[]" undef, ptr %43, 0, !dbg !2806
  %47 = insertvalue %"any[]" %46, i64 %size35, 1, !dbg !2806
  %48 = load %"any[]", ptr %copy, align 8, !dbg !2808
  %49 = extractvalue %"any[]" %48, 0, !dbg !2808
  %50 = extractvalue %"any[]" %48, 1, !dbg !2809
  %gt36 = icmp ugt i64 0, %50, !dbg !2809
  %51 = call i1 @llvm.expect.i1(i1 %gt36, i1 false), !dbg !2809
  br i1 %51, label %panic37, label %checkok44, !dbg !2809

checkok44:                                        ; preds = %checkok34
  %size45 = sub i64 %50, 0, !dbg !2808
  %52 = insertvalue %"any[]" undef, ptr %49, 0, !dbg !2808
  %53 = insertvalue %"any[]" %52, i64 %size45, 1, !dbg !2808
  %54 = extractvalue %"any[]" %53, 0, !dbg !2808
  %55 = extractvalue %"any[]" %47, 0, !dbg !2808
  %56 = extractvalue %"any[]" %47, 1, !dbg !2808
  %57 = extractvalue %"any[]" %53, 1, !dbg !2808
  %neq46 = icmp ne i64 %57, %56, !dbg !2808
  %58 = call i1 @llvm.expect.i1(i1 %neq46, i1 false), !dbg !2808
  br i1 %58, label %panic47, label %checkok54, !dbg !2808

checkok54:                                        ; preds = %checkok44
  %59 = mul i64 %56, 16, !dbg !2808
  call void @llvm.memmove.p0.p0.i64(ptr align 8 %54, ptr align 8 %55, i64 %59, i1 false), !dbg !2808
  %60 = load ptr, ptr %self, align 8, !dbg !2810
  %checknull = icmp eq ptr %60, null, !dbg !2810
  %61 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2810
  br i1 %61, label %panic55, label %checkok56, !dbg !2810

checkok56:                                        ; preds = %checkok54
  %62 = ptrtoint ptr %60 to i64, !dbg !2810
  %63 = urem i64 %62, 8, !dbg !2810
  %64 = icmp ne i64 %63, 0, !dbg !2810
  %65 = call i1 @llvm.expect.i1(i1 %64, i1 false), !dbg !2810
  br i1 %65, label %panic57, label %checkok64, !dbg !2810

checkok64:                                        ; preds = %checkok56
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %copy, i32 16, i1 false), !dbg !2811
  %ptradd65 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !2811
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd65, ptr align 8 %allocator, i32 16, i1 false), !dbg !2812
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %60, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !2812
  %66 = load ptr, ptr %self, align 8, !dbg !2813
  %67 = load ptr, ptr %self, align 8, !dbg !2814
  %ptradd66 = getelementptr inbounds i8, ptr %67, i64 16, !dbg !2814
  %68 = load i64, ptr %ptradd66, align 8, !dbg !2814
  %eq67 = icmp eq i64 0, %68, !dbg !2813
  br i1 %eq67, label %assert_ok69, label %assert_fail68, !dbg !2813

assert_fail68:                                    ; preds = %checkok64
  %69 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2813
  call void %69(ptr @.panic_msg.130, i64 35, ptr @.file.128, i64 14, ptr @.func, i64 4, i32 26) #5, !dbg !2813
  unreachable, !dbg !2813

assert_ok69:                                      ; preds = %checkok64
  ret ptr %66, !dbg !2813

panic:                                            ; preds = %entry
  %70 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2776
  call void %70(ptr @.panic_msg, i64 62, ptr @.file.128, i64 14, ptr @.func, i64 4, i32 21) #5, !dbg !2776
  unreachable, !dbg !2776

panic19:                                          ; preds = %expr_block.exit
  store i64 %sub18, ptr %taddr20, align 8
  %71 = insertvalue %any undef, ptr %taddr20, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %72, ptr %varargslots, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %73, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.104, i64 16, ptr @.func, i64 4, i32 269, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2805
  unreachable, !dbg !2805

panic27:                                          ; preds = %noerr_block
  store i64 %44, ptr %taddr28, align 8
  %74 = insertvalue %any undef, ptr %taddr28, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr29, align 8
  %76 = insertvalue %any undef, ptr %taddr29, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %75, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %77, ptr %ptradd31, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.128, i64 14, ptr @.func, i64 4, i32 24, ptr byval(%"any[]") align 8 %indirectarg33) #5, !dbg !2806
  unreachable, !dbg !2806

panic37:                                          ; preds = %checkok34
  store i64 %50, ptr %taddr38, align 8
  %79 = insertvalue %any undef, ptr %taddr38, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr39, align 8
  %81 = insertvalue %any undef, ptr %taddr39, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %80, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %82, ptr %ptradd41, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.128, i64 14, ptr @.func, i64 4, i32 24, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !2808
  unreachable, !dbg !2808

panic47:                                          ; preds = %checkok44
  store i64 %57, ptr %taddr48, align 8
  %84 = insertvalue %any undef, ptr %taddr48, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr49, align 8
  %86 = insertvalue %any undef, ptr %taddr49, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %85, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %87, ptr %ptradd51, align 16
  %88 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %88, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.108, i64 38, ptr @.file.128, i64 14, ptr @.func, i64 4, i32 24, ptr byval(%"any[]") align 8 %indirectarg53) #5, !dbg !2808
  unreachable, !dbg !2808

panic55:                                          ; preds = %checkok54
  %89 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2810
  call void %89(ptr @.panic_msg.2, i64 45, ptr @.file.128, i64 14, ptr @.func, i64 4, i32 25) #5, !dbg !2810
  unreachable, !dbg !2810

panic57:                                          ; preds = %checkok56
  store i64 8, ptr %taddr58, align 8
  %90 = insertvalue %any undef, ptr %taddr58, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %63, ptr %taddr59, align 8
  %92 = insertvalue %any undef, ptr %taddr59, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots60, align 16
  %ptradd61 = getelementptr inbounds i8, ptr %varargslots60, i64 16
  store %any %93, ptr %ptradd61, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots60, 0
  %"$$temp62" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp62", ptr %indirectarg63, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.128, i64 14, ptr @.func, i64 4, i32 25, ptr byval(%"any[]") align 8 %indirectarg63) #5, !dbg !2810
  unreachable, !dbg !2810
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.MultiReader.tinit(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2815 {
entry:
  %self = alloca ptr, align 8
  %readers = alloca %"any[]", align 8
  %taddr = alloca %any, align 8
  %3 = icmp eq ptr %0, null, !dbg !2818
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2818
  br i1 %4, label %panic, label %checkok, !dbg !2818

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2819, !DIExpression(), !2820)
  store ptr %1, ptr %readers, align 8
  %ptradd = getelementptr inbounds i8, ptr %readers, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %readers, !2821, !DIExpression(), !2822)
  %5 = load ptr, ptr %self, align 8, !dbg !2823
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !2823
  %6 = load i64, ptr %ptradd1, align 8, !dbg !2823
  %eq = icmp eq i64 0, %6, !dbg !2823
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !2823

assert_fail:                                      ; preds = %checkok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2823
  call void %7(ptr @.panic_msg.129, i64 90, ptr @.file.128, i64 14, ptr @.func.109, i64 5, i32 31) #5, !dbg !2823
  unreachable, !dbg !2823

assert_ok:                                        ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !2825
  %9 = load %any, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !2826
  %10 = load %"any[]", ptr %readers, align 8, !dbg !2827
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !2828
  %11 = load i64, ptr %ptradd2, align 8, !dbg !2828
  %eq3 = icmp eq i64 0, %11, !dbg !2825
  br i1 %eq3, label %assert_ok5, label %assert_fail4, !dbg !2825

assert_fail4:                                     ; preds = %assert_ok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2825
  call void %12(ptr @.panic_msg.129, i64 90, ptr @.file.128, i64 14, ptr @.func.109, i64 5, i32 36) #5, !dbg !2825
  unreachable, !dbg !2825

assert_ok5:                                       ; preds = %assert_ok
  store %any %9, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd6, align 8
  %13 = extractvalue %"any[]" %10, 0
  %14 = extractvalue %"any[]" %10, 1
  %15 = call ptr @std.io.MultiReader.init(ptr %8, i64 %lo, ptr %hi, ptr %13, i64 %14), !dbg !2825
  %16 = load ptr, ptr %self, align 8, !dbg !2829
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !2829
  %17 = load i64, ptr %ptradd7, align 8, !dbg !2829
  %eq8 = icmp eq i64 0, %17, !dbg !2825
  br i1 %eq8, label %assert_ok10, label %assert_fail9, !dbg !2825

assert_fail9:                                     ; preds = %assert_ok5
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2825
  call void %18(ptr @.panic_msg.130, i64 35, ptr @.file.128, i64 14, ptr @.func.109, i64 5, i32 36) #5, !dbg !2825
  unreachable, !dbg !2825

assert_ok10:                                      ; preds = %assert_ok5
  ret ptr %15, !dbg !2825

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2820
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.128, i64 14, ptr @.func.109, i64 5, i32 34) #5, !dbg !2820
  unreachable, !dbg !2820
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.MultiReader.free(ptr %0) #0 comdat !dbg !2830 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2833
  %1 = icmp eq ptr %0, null, !dbg !2833
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2833
  br i1 %2, label %panic, label %checkok, !dbg !2833

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2834, !DIExpression(), !2835)
  %3 = load ptr, ptr %self, align 8, !dbg !2836
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !2836
  %4 = load ptr, ptr %ptradd, align 8, !dbg !2836
  %i2nb = icmp eq ptr %4, null, !dbg !2836
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2836

if.then:                                          ; preds = %checkok
  ret void, !dbg !2837

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !2838
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 24, !dbg !2838
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd1, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !2839
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !2840
  %i2nb2 = icmp eq ptr %8, null, !dbg !2840
  br i1 %i2nb2, label %if.then3, label %if.exit4, !dbg !2840

if.then3:                                         ; preds = %if.exit
  br label %expr_block.exit, !dbg !2843

if.exit4:                                         ; preds = %if.exit
  %9 = load ptr, ptr %ptr, align 8, !dbg !2844
  %neq = icmp ne ptr %9, null, !dbg !2845
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2845

assert_fail:                                      ; preds = %if.exit4
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2845
  call void %10(ptr @.panic_msg.111, i64 75, ptr @.file.104, i64 16, ptr @.func.110, i64 4, i32 122) #5, !dbg !2845
  unreachable, !dbg !2845

assert_ok:                                        ; preds = %if.exit4
  %ptradd5 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2845
  %11 = load i64, ptr %ptradd5, align 8, !dbg !2845
  %12 = inttoptr i64 %11 to ptr, !dbg !2845
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2833
  %13 = icmp eq ptr %12, %type, !dbg !2833
  br i1 %13, label %cache_hit, label %cache_miss, !dbg !2833

cache_miss:                                       ; preds = %assert_ok
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2833
  %14 = load ptr, ptr %ptradd6, align 8, !dbg !2833
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.release"), !dbg !2833
  store ptr %15, ptr %.inlinecache, align 8, !dbg !2833
  store ptr %12, ptr %.cachedtype, align 8, !dbg !2833
  br label %16, !dbg !2833

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2833
  br label %16, !dbg !2833

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ], !dbg !2833
  %17 = icmp eq ptr %fn_phi, null, !dbg !2833
  br i1 %17, label %missing_function, label %match, !dbg !2833

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2833
  call void %18(ptr @.panic_msg.112, i64 44, ptr @.file.104, i64 16, ptr @.func.110, i64 4, i32 122) #5, !dbg !2833
  unreachable, !dbg !2833

match:                                            ; preds = %16
  %19 = load ptr, ptr %allocator, align 8, !dbg !2833
  call void %fn_phi(ptr %19, ptr %9, i8 zeroext 0), !dbg !2833
  br label %expr_block.exit, !dbg !2833

expr_block.exit:                                  ; preds = %match, %if.then3
  %20 = load ptr, ptr %self, align 8, !dbg !2846
  %checknull = icmp eq ptr %20, null, !dbg !2846
  %21 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2846
  br i1 %21, label %panic7, label %checkok8, !dbg !2846

checkok8:                                         ; preds = %expr_block.exit
  %22 = ptrtoint ptr %20 to i64, !dbg !2846
  %23 = urem i64 %22, 8, !dbg !2846
  %24 = icmp ne i64 %23, 0, !dbg !2846
  %25 = call i1 @llvm.expect.i1(i1 %24, i1 false), !dbg !2846
  br i1 %25, label %panic9, label %checkok12, !dbg !2846

checkok12:                                        ; preds = %checkok8
  call void @llvm.memset.p0.i64(ptr align 8 %20, i8 0, i64 40, i1 false), !dbg !2846
  ret void, !dbg !2846

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2835
  call void %26(ptr @.panic_msg, i64 62, ptr @.file.128, i64 14, ptr @.func.110, i64 4, i32 39) #5, !dbg !2835
  unreachable, !dbg !2835

panic7:                                           ; preds = %expr_block.exit
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2846
  call void %27(ptr @.panic_msg.2, i64 45, ptr @.file.128, i64 14, ptr @.func.110, i64 4, i32 43) #5, !dbg !2846
  unreachable, !dbg !2846

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr10, align 8
  %30 = insertvalue %any undef, ptr %taddr10, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd11, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.128, i64 14, ptr @.func.110, i64 4, i32 43, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2846
  unreachable, !dbg !2846
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.MultiReader.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !2847 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %r = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %err = alloca i64, align 8
  %reterr = alloca i64, align 8
  %retparam20 = alloca i64, align 8
  %reterr28 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2850
  %4 = icmp eq ptr %1, null, !dbg !2850
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !2850
  br i1 %5, label %panic, label %checkok, !dbg !2850

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2851, !DIExpression(), !2852)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2853, !DIExpression(), !2854)
    #dbg_declare(ptr %r, !2855, !DIExpression(), !2856)
  %6 = load ptr, ptr %self, align 8, !dbg !2857
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !2857
  %7 = load i64, ptr %ptradd1, align 8, !dbg !2857
  %8 = load ptr, ptr %6, align 8, !dbg !2857
  %9 = load ptr, ptr %self, align 8, !dbg !2858
  %ptradd2 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2858
  %10 = load i64, ptr %ptradd2, align 8, !dbg !2858
  %ge = icmp uge i64 %10, %7, !dbg !2858
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2858
  br i1 %11, label %panic3, label %checkok6, !dbg !2858

checkok6:                                         ; preds = %checkok
  %ptroffset = getelementptr inbounds [16 x i8], ptr %8, i64 %10, !dbg !2858
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %r, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !2858
    #dbg_declare(ptr %n, !2859, !DIExpression(), !2860)
  %ptradd7 = getelementptr inbounds i8, ptr %r, i64 8, !dbg !2861
  %12 = load i64, ptr %ptradd7, align 8, !dbg !2861
  %13 = inttoptr i64 %12 to ptr, !dbg !2861
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2850
  %14 = icmp eq ptr %13, %type, !dbg !2850
  br i1 %14, label %cache_hit, label %cache_miss, !dbg !2850

cache_miss:                                       ; preds = %checkok6
  %ptradd8 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2850
  %15 = load ptr, ptr %ptradd8, align 8, !dbg !2850
  %16 = call ptr @.dyn_search(ptr %15, ptr @"$sel.read"), !dbg !2850
  store ptr %16, ptr %.inlinecache, align 8, !dbg !2850
  store ptr %13, ptr %.cachedtype, align 8, !dbg !2850
  br label %17, !dbg !2850

cache_hit:                                        ; preds = %checkok6
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2850
  br label %17, !dbg !2850

17:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %16, %cache_miss ], !dbg !2850
  %18 = icmp eq ptr %fn_phi, null, !dbg !2850
  br i1 %18, label %missing_function, label %match, !dbg !2850

missing_function:                                 ; preds = %17
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2862
  call void %19(ptr @.panic_msg.39, i64 41, ptr @.file.128, i64 14, ptr @.func.118, i64 4, i32 49) #5, !dbg !2862
  unreachable, !dbg !2862

match:                                            ; preds = %17
  %20 = load ptr, ptr %r, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  %21 = call i64 %fn_phi(ptr %retparam, ptr %20, ptr %lo, i64 %hi), !dbg !2862
  %not_err = icmp eq i64 %21, 0, !dbg !2862
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2862
  br i1 %22, label %after_check, label %assign_optional, !dbg !2862

assign_optional:                                  ; preds = %match
  store i64 %21, ptr %n.f, align 8, !dbg !2862
  br label %after_assign, !dbg !2862

after_check:                                      ; preds = %match
  %23 = load i64, ptr %retparam, align 8, !dbg !2862
  store i64 %23, ptr %n, align 8, !dbg !2862
  store i64 0, ptr %n.f, align 8, !dbg !2862
  br label %after_assign, !dbg !2862

after_assign:                                     ; preds = %after_check, %assign_optional
    #dbg_declare(ptr %err, !2863, !DIExpression(), !2864)
  br label %testblock, !dbg !2864

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %n.f, align 8, !dbg !2865
  %not_err10 = icmp eq i64 %optval, 0, !dbg !2865
  %24 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !2865
  br i1 %24, label %after_check12, label %assign_optional11, !dbg !2865

assign_optional11:                                ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !2865
  br label %end_block, !dbg !2865

after_check12:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !2865
  br label %end_block, !dbg !2865

end_block:                                        ; preds = %after_check12, %assign_optional11
  %25 = load i64, ptr %err, align 8, !dbg !2865
  %i2b = icmp ne i64 %25, 0, !dbg !2865
  br i1 %i2b, label %if.then, label %if.exit27, !dbg !2865

if.then:                                          ; preds = %end_block
  %26 = load i64, ptr %err, align 8, !dbg !2866
  %neq = icmp ne i64 %26, ptrtoint (ptr @std.io.EOF to i64), !dbg !2866
  br i1 %neq, label %if.then13, label %if.exit, !dbg !2866

if.then13:                                        ; preds = %if.then
  %27 = load i64, ptr %err, align 8, !dbg !2868
  ret i64 %27, !dbg !2868

if.exit:                                          ; preds = %if.then
  %28 = load ptr, ptr %self, align 8, !dbg !2869
  %ptradd14 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !2869
  %29 = load i64, ptr %ptradd14, align 8, !dbg !2869
  %add = add i64 %29, 1, !dbg !2869
  store i64 %add, ptr %ptradd14, align 8, !dbg !2869
  %30 = load ptr, ptr %self, align 8, !dbg !2870
  %ptradd15 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !2870
  %31 = load i64, ptr %ptradd15, align 8, !dbg !2870
  %32 = load ptr, ptr %self, align 8, !dbg !2871
  %ptradd16 = getelementptr inbounds i8, ptr %32, i64 8, !dbg !2871
  %33 = load i64, ptr %ptradd16, align 8, !dbg !2871
  %ge17 = icmp uge i64 %31, %33, !dbg !2870
  br i1 %ge17, label %if.then18, label %if.exit19, !dbg !2870

if.then18:                                        ; preds = %if.exit
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !2872

if.exit19:                                        ; preds = %if.exit
  %34 = load ptr, ptr %self, align 8
  %lo21 = load ptr, ptr %bytes, align 8
  %ptradd22 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi23 = load i64, ptr %ptradd22, align 8
  %35 = call i64 @std.io.MultiReader.read(ptr %retparam20, ptr %34, ptr %lo21, i64 %hi23), !dbg !2874
  %not_err24 = icmp eq i64 %35, 0, !dbg !2874
  %36 = call i1 @llvm.expect.i1(i1 %not_err24, i1 true), !dbg !2874
  br i1 %36, label %after_check26, label %assign_optional25, !dbg !2874

assign_optional25:                                ; preds = %if.exit19
  store i64 %35, ptr %reterr, align 8, !dbg !2874
  br label %err_retblock, !dbg !2874

after_check26:                                    ; preds = %if.exit19
  %37 = load i64, ptr %retparam20, align 8, !dbg !2874
  store i64 %37, ptr %0, align 8, !dbg !2874
  ret i64 0, !dbg !2874

err_retblock:                                     ; preds = %assign_optional25
  %38 = load i64, ptr %reterr, align 8, !dbg !2874
  ret i64 %38, !dbg !2874

if.exit27:                                        ; preds = %end_block
  %39 = load i64, ptr %n, align 8, !dbg !2875
  store i64 %39, ptr %0, align 8, !dbg !2875
  ret i64 0, !dbg !2875

panic:                                            ; preds = %entry
  %40 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2852
  call void %40(ptr @.panic_msg, i64 62, ptr @.file.128, i64 14, ptr @.func.118, i64 4, i32 46) #5, !dbg !2852
  unreachable, !dbg !2852

panic3:                                           ; preds = %checkok
  store i64 %7, ptr %taddr, align 8
  %41 = insertvalue %any undef, ptr %taddr, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr4, align 8
  %43 = insertvalue %any undef, ptr %taddr4, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %42, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %44, ptr %ptradd5, align 16
  %45 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %45, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.128, i64 14, ptr @.func.118, i64 4, i32 48, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2858
  unreachable, !dbg !2858
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.MultiReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !2876 {
entry:
  %self = alloca ptr, align 8
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !2879
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2879
  br i1 %3, label %panic, label %checkok, !dbg !2879

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2880, !DIExpression(), !2881)
    #dbg_declare(ptr %data, !2882, !DIExpression(), !2883)
  store i8 0, ptr %data, align 1, !dbg !2883
  %4 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !2884
  %5 = insertvalue %"char[]" %4, i64 1, 1, !dbg !2884
  %6 = load ptr, ptr %self, align 8
  %7 = call i64 @std.io.MultiReader.read(ptr %retparam, ptr %6, ptr %data, i64 1), !dbg !2885
  %not_err = icmp eq i64 %7, 0, !dbg !2885
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2885
  br i1 %8, label %after_check, label %assign_optional, !dbg !2885

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !2885
  br label %guard_block, !dbg !2885

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !2885

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !2885
  ret i64 %9, !dbg !2885

noerr_block:                                      ; preds = %after_check
  %10 = load i8, ptr %data, align 1, !dbg !2886
  store i8 %10, ptr %0, align 1, !dbg !2886
  ret i64 0, !dbg !2886

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2881
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.128, i64 14, ptr @.func.123, i64 9, i32 63) #5, !dbg !2881
  unreachable, !dbg !2881
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteWriter.init(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !2887 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %ByteWriter, align 8
  %3 = icmp eq ptr %0, null, !dbg !2897
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2897
  br i1 %4, label %panic, label %checkok, !dbg !2897

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2898, !DIExpression(), !2899)
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !2900, !DIExpression(), !2901)
  %5 = load ptr, ptr %self, align 8, !dbg !2902
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !2902
  %6 = load i64, ptr %ptradd1, align 8, !dbg !2902
  %eq = icmp eq i64 0, %6, !dbg !2902
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !2902

assert_fail:                                      ; preds = %checkok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2902
  call void %7(ptr @.panic_msg.132, i64 88, ptr @.file.131, i64 13, ptr @.func, i64 4, i32 14) #5, !dbg !2902
  unreachable, !dbg !2902

assert_ok:                                        ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !2904
  %checknull = icmp eq ptr %8, null, !dbg !2904
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2904
  br i1 %9, label %panic2, label %checkok3, !dbg !2904

checkok3:                                         ; preds = %assert_ok
  %10 = ptrtoint ptr %8 to i64, !dbg !2904
  %11 = urem i64 %10, 8, !dbg !2904
  %12 = icmp ne i64 %11, 0, !dbg !2904
  %13 = call i1 @llvm.expect.i1(i1 %12, i1 false), !dbg !2904
  br i1 %13, label %panic4, label %checkok7, !dbg !2904

checkok7:                                         ; preds = %checkok3
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  store %"char[]" zeroinitializer, ptr %.assign_list, align 8, !dbg !2905
  %ptradd8 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !2905
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd8, ptr align 8 %allocator, i32 16, i1 false), !dbg !2906
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %8, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !2906
  %14 = load ptr, ptr %self, align 8, !dbg !2907
  %15 = load ptr, ptr %allocator, align 8, !dbg !2908
  %i2b = icmp ne ptr %15, null, !dbg !2908
  br i1 %i2b, label %assert_ok10, label %assert_fail9, !dbg !2908

assert_fail9:                                     ; preds = %checkok7
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2907
  call void %16(ptr @.panic_msg.133, i64 52, ptr @.file.131, i64 13, ptr @.func, i64 4, i32 20) #5, !dbg !2907
  unreachable, !dbg !2907

assert_ok10:                                      ; preds = %checkok7
  %17 = load ptr, ptr %self, align 8, !dbg !2909
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !2909
  %18 = load i64, ptr %ptradd11, align 8, !dbg !2909
  %eq12 = icmp eq i64 0, %18, !dbg !2907
  br i1 %eq12, label %assert_ok14, label %assert_fail13, !dbg !2907

assert_fail13:                                    ; preds = %assert_ok10
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2907
  call void %19(ptr @.panic_msg.133, i64 52, ptr @.file.131, i64 13, ptr @.func, i64 4, i32 20) #5, !dbg !2907
  unreachable, !dbg !2907

assert_ok14:                                      ; preds = %assert_ok10
  ret ptr %14, !dbg !2907

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2899
  call void %20(ptr @.panic_msg, i64 62, ptr @.file.131, i64 13, ptr @.func, i64 4, i32 17) #5, !dbg !2899
  unreachable, !dbg !2899

panic2:                                           ; preds = %assert_ok
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2904
  call void %21(ptr @.panic_msg.2, i64 45, ptr @.file.131, i64 13, ptr @.func, i64 4, i32 19) #5, !dbg !2904
  unreachable, !dbg !2904

panic4:                                           ; preds = %checkok3
  store i64 8, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr5, align 8
  %24 = insertvalue %any undef, ptr %taddr5, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd6, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.131, i64 13, ptr @.func, i64 4, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2904
  unreachable, !dbg !2904
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteWriter.tinit(ptr %0) #0 comdat !dbg !2910 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca %any, align 8
  %1 = icmp eq ptr %0, null, !dbg !2913
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2913
  br i1 %2, label %panic, label %checkok, !dbg !2913

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2914, !DIExpression(), !2915)
  %3 = load ptr, ptr %self, align 8, !dbg !2916
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !2916
  %4 = load i64, ptr %ptradd, align 8, !dbg !2916
  %eq = icmp eq i64 0, %4, !dbg !2916
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !2916

assert_fail:                                      ; preds = %checkok
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2916
  call void %5(ptr @.panic_msg.132, i64 88, ptr @.file.131, i64 13, ptr @.func.109, i64 5, i32 25) #5, !dbg !2916
  unreachable, !dbg !2916

assert_ok:                                        ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !2918
  %7 = load %any, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !2919
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !2920
  %8 = load i64, ptr %ptradd1, align 8, !dbg !2920
  %eq2 = icmp eq i64 0, %8, !dbg !2918
  br i1 %eq2, label %assert_ok4, label %assert_fail3, !dbg !2918

assert_fail3:                                     ; preds = %assert_ok
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2918
  call void %9(ptr @.panic_msg.132, i64 88, ptr @.file.131, i64 13, ptr @.func.109, i64 5, i32 30) #5, !dbg !2918
  unreachable, !dbg !2918

assert_ok4:                                       ; preds = %assert_ok
  store %any %7, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd5, align 8
  %10 = call ptr @std.io.ByteWriter.init(ptr %6, i64 %lo, ptr %hi) #6, !dbg !2918
  %11 = load ptr, ptr %self, align 8, !dbg !2921
  %ptradd6 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !2921
  %12 = load i64, ptr %ptradd6, align 8, !dbg !2921
  %eq7 = icmp eq i64 0, %12, !dbg !2918
  br i1 %eq7, label %assert_ok9, label %assert_fail8, !dbg !2918

assert_fail8:                                     ; preds = %assert_ok4
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2918
  call void %13(ptr @.panic_msg.130, i64 35, ptr @.file.131, i64 13, ptr @.func.109, i64 5, i32 30) #5, !dbg !2918
  unreachable, !dbg !2918

assert_ok9:                                       ; preds = %assert_ok4
  ret ptr %10, !dbg !2918

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2915
  call void %14(ptr @.panic_msg, i64 62, ptr @.file.131, i64 13, ptr @.func.109, i64 5, i32 28) #5, !dbg !2915
  unreachable, !dbg !2915
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteWriter.init_with_buffer(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2922 {
entry:
  %self = alloca ptr, align 8
  %data = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %ByteWriter, align 8
  %3 = icmp eq ptr %0, null, !dbg !2925
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2925
  br i1 %4, label %panic, label %checkok, !dbg !2925

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2926, !DIExpression(), !2927)
  store ptr %1, ptr %data, align 8
  %ptradd = getelementptr inbounds i8, ptr %data, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %data, !2928, !DIExpression(), !2929)
  %5 = load ptr, ptr %self, align 8, !dbg !2930
  %checknull = icmp eq ptr %5, null, !dbg !2930
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2930
  br i1 %6, label %panic1, label %checkok2, !dbg !2930

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2930
  %8 = urem i64 %7, 8, !dbg !2930
  %9 = icmp ne i64 %8, 0, !dbg !2930
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2930
  br i1 %10, label %panic3, label %checkok6, !dbg !2930

checkok6:                                         ; preds = %checkok2
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %data, i32 16, i1 false), !dbg !2931
  %ptradd7 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !2931
  store %any { ptr null, i64 ptrtoint (ptr @"$ct.void" to i64) }, ptr %ptradd7, align 8, !dbg !2932
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !2932
  %11 = load ptr, ptr %self, align 8, !dbg !2933
  ret ptr %11, !dbg !2933

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2927
  call void %12(ptr @.panic_msg, i64 62, ptr @.file.131, i64 13, ptr @.func.134, i64 16, i32 33) #5, !dbg !2927
  unreachable, !dbg !2927

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2930
  call void %13(ptr @.panic_msg.2, i64 45, ptr @.file.131, i64 13, ptr @.func.134, i64 16, i32 35) #5, !dbg !2930
  unreachable, !dbg !2930

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %14 = insertvalue %any undef, ptr %taddr, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %16 = insertvalue %any undef, ptr %taddr4, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %15, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %17, ptr %ptradd5, align 16
  %18 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %18, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.131, i64 13, ptr @.func.134, i64 16, i32 35, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2930
  unreachable, !dbg !2930
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.destroy(ptr %0) #0 comdat !dbg !2934 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr3 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2937
  %1 = icmp eq ptr %0, null, !dbg !2937
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2937
  br i1 %2, label %panic, label %checkok, !dbg !2937

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2938, !DIExpression(), !2939)
  %3 = load ptr, ptr %self, align 8, !dbg !2940
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !2940
  %4 = load ptr, ptr %ptradd, align 8, !dbg !2940
  %i2nb = icmp eq ptr %4, null, !dbg !2940
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2940

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %ptr, !2941, !DIExpression(), !2942)
  %5 = load ptr, ptr %self, align 8, !dbg !2943
  %6 = load ptr, ptr %5, align 8, !dbg !2943
  store ptr %6, ptr %ptr, align 8, !dbg !2943
  %i2b = icmp ne ptr %6, null, !dbg !2943
  br i1 %i2b, label %if.then1, label %if.exit9, !dbg !2943

if.then1:                                         ; preds = %if.exit
  %7 = load ptr, ptr %self, align 8, !dbg !2944
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !2944
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd2, i32 16, i1 false)
  %8 = load ptr, ptr %ptr, align 8
  store ptr %8, ptr %ptr3, align 8
  %9 = load ptr, ptr %ptr3, align 8, !dbg !2945
  %i2nb4 = icmp eq ptr %9, null, !dbg !2945
  br i1 %i2nb4, label %if.then5, label %if.exit6, !dbg !2945

if.then5:                                         ; preds = %if.then1
  br label %expr_block.exit, !dbg !2948

if.exit6:                                         ; preds = %if.then1
  %10 = load ptr, ptr %ptr3, align 8, !dbg !2949
  %neq = icmp ne ptr %10, null, !dbg !2950
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2950

assert_fail:                                      ; preds = %if.exit6
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2950
  call void %11(ptr @.panic_msg.111, i64 75, ptr @.file.104, i64 16, ptr @.func.135, i64 7, i32 122) #5, !dbg !2950
  unreachable, !dbg !2950

assert_ok:                                        ; preds = %if.exit6
  %ptradd7 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2950
  %12 = load i64, ptr %ptradd7, align 8, !dbg !2950
  %13 = inttoptr i64 %12 to ptr, !dbg !2950
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2937
  %14 = icmp eq ptr %13, %type, !dbg !2937
  br i1 %14, label %cache_hit, label %cache_miss, !dbg !2937

cache_miss:                                       ; preds = %assert_ok
  %ptradd8 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2937
  %15 = load ptr, ptr %ptradd8, align 8, !dbg !2937
  %16 = call ptr @.dyn_search(ptr %15, ptr @"$sel.release"), !dbg !2937
  store ptr %16, ptr %.inlinecache, align 8, !dbg !2937
  store ptr %13, ptr %.cachedtype, align 8, !dbg !2937
  br label %17, !dbg !2937

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2937
  br label %17, !dbg !2937

17:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %16, %cache_miss ], !dbg !2937
  %18 = icmp eq ptr %fn_phi, null, !dbg !2937
  br i1 %18, label %missing_function, label %match, !dbg !2937

missing_function:                                 ; preds = %17
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2937
  call void %19(ptr @.panic_msg.112, i64 44, ptr @.file.104, i64 16, ptr @.func.135, i64 7, i32 122) #5, !dbg !2937
  unreachable, !dbg !2937

match:                                            ; preds = %17
  %20 = load ptr, ptr %allocator, align 8, !dbg !2937
  call void %fn_phi(ptr %20, ptr %10, i8 zeroext 0), !dbg !2937
  br label %expr_block.exit, !dbg !2937

expr_block.exit:                                  ; preds = %match, %if.then5
  br label %if.exit9, !dbg !2937

if.exit9:                                         ; preds = %expr_block.exit, %if.exit
  %21 = load ptr, ptr %self, align 8, !dbg !2951
  %checknull = icmp eq ptr %21, null, !dbg !2951
  %22 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2951
  br i1 %22, label %panic10, label %checkok11, !dbg !2951

checkok11:                                        ; preds = %if.exit9
  %23 = ptrtoint ptr %21 to i64, !dbg !2951
  %24 = urem i64 %23, 8, !dbg !2951
  %25 = icmp ne i64 %24, 0, !dbg !2951
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false), !dbg !2951
  br i1 %26, label %panic12, label %checkok15, !dbg !2951

checkok15:                                        ; preds = %checkok11
  call void @llvm.memset.p0.i64(ptr align 8 %21, i8 0, i64 40, i1 false), !dbg !2951
  ret i64 0, !dbg !2951

panic:                                            ; preds = %entry
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2939
  call void %27(ptr @.panic_msg, i64 62, ptr @.file.131, i64 13, ptr @.func.135, i64 7, i32 39) #5, !dbg !2939
  unreachable, !dbg !2939

panic10:                                          ; preds = %if.exit9
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2951
  call void %28(ptr @.panic_msg.2, i64 45, ptr @.file.131, i64 13, ptr @.func.135, i64 7, i32 43) #5, !dbg !2951
  unreachable, !dbg !2951

panic12:                                          ; preds = %checkok11
  store i64 8, ptr %taddr, align 8
  %29 = insertvalue %any undef, ptr %taddr, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr13, align 8
  %31 = insertvalue %any undef, ptr %taddr13, 0
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %30, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %32, ptr %ptradd14, align 16
  %33 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %33, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.131, i64 13, ptr @.func.135, i64 7, i32 43, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2951
  unreachable, !dbg !2951
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.io.ByteWriter.str_view(ptr %0) #0 comdat !dbg !2952 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr7 = alloca i64, align 8
  %varargslots8 = alloca [1 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr21 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2955
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2955
  br i1 %2, label %panic, label %checkok, !dbg !2955

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2956, !DIExpression(), !2957)
  %3 = load ptr, ptr %self, align 8, !dbg !2958
  %4 = load %"char[]", ptr %3, align 8, !dbg !2958
  %5 = extractvalue %"char[]" %4, 0, !dbg !2958
  %6 = extractvalue %"char[]" %4, 1, !dbg !2959
  %gt = icmp ugt i64 0, %6, !dbg !2959
  %7 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2959
  br i1 %7, label %panic1, label %checkok3, !dbg !2959

checkok3:                                         ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !2960
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !2960
  %9 = load i64, ptr %ptradd4, align 8, !dbg !2960
  %add = add i64 0, %9, !dbg !2960
  %gt5 = icmp ugt i64 0, %add, !dbg !2960
  %sub = sub i64 %add, 0, !dbg !2960
  %10 = call i1 @llvm.expect.i1(i1 %gt5, i1 false), !dbg !2960
  br i1 %10, label %panic6, label %checkok11, !dbg !2960

checkok11:                                        ; preds = %checkok3
  %lt = icmp ult i64 %6, %add, !dbg !2961
  %sub12 = sub i64 %add, 1, !dbg !2961
  %11 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2961
  br i1 %11, label %panic13, label %checkok20, !dbg !2961

checkok20:                                        ; preds = %checkok11
  %size = sub i64 %add, 0, !dbg !2961
  %12 = insertvalue %"char[]" undef, ptr %5, 0, !dbg !2961
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !2961
  store %"char[]" %13, ptr %taddr21, align 8
  %14 = load { ptr, i64 }, ptr %taddr21, align 8
  ret { ptr, i64 } %14

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2957
  call void %15(ptr @.panic_msg, i64 62, ptr @.file.131, i64 13, ptr @.func.136, i64 8, i32 46) #5, !dbg !2957
  unreachable, !dbg !2957

panic1:                                           ; preds = %checkok
  store i64 %6, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %18 = insertvalue %any undef, ptr %taddr2, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.131, i64 13, ptr @.func.136, i64 8, i32 48, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2961
  unreachable, !dbg !2961

panic6:                                           ; preds = %checkok3
  store i64 %sub, ptr %taddr7, align 8
  %21 = insertvalue %any undef, ptr %taddr7, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots8, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots8, 0
  %"$$temp9" = insertvalue %"any[]" %23, i64 1, 1
  store %"any[]" %"$$temp9", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.131, i64 13, ptr @.func.136, i64 8, i32 48, ptr byval(%"any[]") align 8 %indirectarg10) #5, !dbg !2961
  unreachable, !dbg !2961

panic13:                                          ; preds = %checkok11
  store i64 %sub12, ptr %taddr14, align 8
  %24 = insertvalue %any undef, ptr %taddr14, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr15, align 8
  %26 = insertvalue %any undef, ptr %taddr15, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %25, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %27, ptr %ptradd17, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.131, i64 13, ptr @.func.136, i64 8, i32 48, ptr byval(%"any[]") align 8 %indirectarg19) #5, !dbg !2961
  unreachable, !dbg !2961
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.ensure_capacity(ptr %0, i64 %1) #0 comdat !dbg !2962 {
entry:
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %new_capacity = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %new_ptr = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %allocator10 = alloca %any, align 8
  %ptr11 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %x20 = alloca i64, align 8
  %.inlinecache31 = alloca ptr, align 8
  %.cachedtype32 = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %x43 = alloca i64, align 8
  %.inlinecache64 = alloca ptr, align 8
  %.cachedtype65 = alloca ptr, align 8
  %retparam74 = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype65, align 8, !dbg !2965
  store ptr null, ptr %.cachedtype32, align 8, !dbg !2965
  store ptr null, ptr %.cachedtype, align 8, !dbg !2965
  %2 = icmp eq ptr %0, null, !dbg !2965
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2965
  br i1 %3, label %panic, label %checkok, !dbg !2965

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2966, !DIExpression(), !2967)
  store i64 %1, ptr %len, align 8
    #dbg_declare(ptr %len, !2968, !DIExpression(), !2969)
  %4 = load ptr, ptr %self, align 8, !dbg !2970
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !2970
  %5 = load i64, ptr %ptradd, align 8, !dbg !2970
  %6 = load i64, ptr %len, align 8, !dbg !2971
  %gt = icmp ugt i64 %5, %6, !dbg !2970
  br i1 %gt, label %if.then, label %if.exit, !dbg !2970

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !2972
  %ptradd1 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !2972
  %8 = load ptr, ptr %ptradd1, align 8, !dbg !2972
  %i2nb = icmp eq ptr %8, null, !dbg !2972
  br i1 %i2nb, label %if.then2, label %if.exit3, !dbg !2972

if.then2:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @std.io.OUT_OF_SPACE to i64), !dbg !2973

if.exit3:                                         ; preds = %if.exit
  %9 = load i64, ptr %len, align 8, !dbg !2974
  %gt4 = icmp ugt i64 16, %9, !dbg !2974
  br i1 %gt4, label %if.then5, label %if.exit6, !dbg !2974

if.then5:                                         ; preds = %if.exit3
  store i64 16, ptr %len, align 8, !dbg !2975
  br label %if.exit6, !dbg !2975

if.exit6:                                         ; preds = %if.then5, %if.exit3
    #dbg_declare(ptr %new_capacity, !2976, !DIExpression(), !2977)
  %10 = load i64, ptr %len, align 8
  store i64 %10, ptr %x, align 8
    #dbg_declare(ptr %y, !2978, !DIExpression(), !2980)
  store i64 1, ptr %y, align 8, !dbg !2982
  br label %loop.cond, !dbg !2983

loop.cond:                                        ; preds = %loop.body, %if.exit6
  %11 = load i64, ptr %y, align 8, !dbg !2984
  %12 = load i64, ptr %x, align 8, !dbg !2986
  %lt = icmp ult i64 %11, %12, !dbg !2984
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2984

loop.body:                                        ; preds = %loop.cond
  %13 = load i64, ptr %y, align 8, !dbg !2987
  %14 = load i64, ptr %y, align 8, !dbg !2988
  %add = add i64 %13, %14, !dbg !2987
  store i64 %add, ptr %y, align 8, !dbg !2987
  br label %loop.cond, !dbg !2987

loop.exit:                                        ; preds = %loop.cond
  %15 = load i64, ptr %y, align 8, !dbg !2989
  store i64 %15, ptr %new_capacity, align 8, !dbg !2989
    #dbg_declare(ptr %new_ptr, !2990, !DIExpression(), !2991)
  %16 = load ptr, ptr %self, align 8, !dbg !2992
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 24, !dbg !2992
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd7, i32 16, i1 false)
  %17 = load ptr, ptr %self, align 8, !dbg !2993
  %18 = load ptr, ptr %17, align 8, !dbg !2993
  store ptr %18, ptr %ptr, align 8
  %19 = load i64, ptr %new_capacity, align 8
  store i64 %19, ptr %new_size, align 8
  %20 = load i64, ptr %new_size, align 8, !dbg !2994
  %i2nb8 = icmp eq i64 %20, 0, !dbg !2994
  br i1 %i2nb8, label %if.then9, label %if.exit17, !dbg !2994

if.then9:                                         ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator10, ptr align 8 %allocator, i32 16, i1 false)
  %21 = load ptr, ptr %ptr, align 8
  store ptr %21, ptr %ptr11, align 8
  %22 = load ptr, ptr %ptr11, align 8, !dbg !2997
  %i2nb12 = icmp eq ptr %22, null, !dbg !2997
  br i1 %i2nb12, label %if.then13, label %if.exit14, !dbg !2997

if.then13:                                        ; preds = %if.then9
  br label %expr_block.exit, !dbg !3001

if.exit14:                                        ; preds = %if.then9
  %23 = load ptr, ptr %ptr11, align 8, !dbg !3002
  %neq = icmp ne ptr %23, null, !dbg !3003
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !3003

assert_fail:                                      ; preds = %if.exit14
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3003
  call void %24(ptr @.panic_msg.111, i64 75, ptr @.file.104, i64 16, ptr @.func.137, i64 15, i32 122) #5, !dbg !3003
  unreachable, !dbg !3003

assert_ok:                                        ; preds = %if.exit14
  %ptradd15 = getelementptr inbounds i8, ptr %allocator10, i64 8, !dbg !3003
  %25 = load i64, ptr %ptradd15, align 8, !dbg !3003
  %26 = inttoptr i64 %25 to ptr, !dbg !3003
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2965
  %27 = icmp eq ptr %26, %type, !dbg !2965
  br i1 %27, label %cache_hit, label %cache_miss, !dbg !2965

cache_miss:                                       ; preds = %assert_ok
  %ptradd16 = getelementptr inbounds i8, ptr %26, i64 16, !dbg !2965
  %28 = load ptr, ptr %ptradd16, align 8, !dbg !2965
  %29 = call ptr @.dyn_search(ptr %28, ptr @"$sel.release"), !dbg !2965
  store ptr %29, ptr %.inlinecache, align 8, !dbg !2965
  store ptr %26, ptr %.cachedtype, align 8, !dbg !2965
  br label %30, !dbg !2965

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2965
  br label %30, !dbg !2965

30:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %29, %cache_miss ], !dbg !2965
  %31 = icmp eq ptr %fn_phi, null, !dbg !2965
  br i1 %31, label %missing_function, label %match, !dbg !2965

missing_function:                                 ; preds = %30
  %32 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2965
  call void %32(ptr @.panic_msg.112, i64 44, ptr @.file.104, i64 16, ptr @.func.137, i64 15, i32 122) #5, !dbg !2965
  unreachable, !dbg !2965

match:                                            ; preds = %30
  %33 = load ptr, ptr %allocator10, align 8, !dbg !2965
  call void %fn_phi(ptr %33, ptr %23, i8 zeroext 0), !dbg !2965
  br label %expr_block.exit, !dbg !2965

expr_block.exit:                                  ; preds = %match, %if.then13
  store ptr null, ptr %blockret, align 8, !dbg !3004
  br label %expr_block.exit78, !dbg !3004

if.exit17:                                        ; preds = %loop.exit
  %34 = load ptr, ptr %ptr, align 8, !dbg !3005
  %i2nb18 = icmp eq ptr %34, null, !dbg !3005
  br i1 %i2nb18, label %if.then19, label %if.exit41, !dbg !3005

if.then19:                                        ; preds = %if.exit17
  %35 = load i64, ptr %new_size, align 8, !dbg !3006
  br i1 true, label %or.phi, label %or.rhs, !dbg !3007

or.rhs:                                           ; preds = %if.then19
  store i64 0, ptr %x20, align 8
  %36 = load i64, ptr %x20, align 8, !dbg !3008
  %neq21 = icmp ne i64 0, %36, !dbg !3008
  br i1 %neq21, label %and.rhs, label %and.phi, !dbg !3008

and.rhs:                                          ; preds = %or.rhs
  %37 = load i64, ptr %x20, align 8, !dbg !3011
  %38 = load i64, ptr %x20, align 8, !dbg !3012
  %sub = sub i64 %38, 1, !dbg !3012
  %and = and i64 %37, %sub, !dbg !3011
  %eq = icmp eq i64 %and, 0, !dbg !3011
  br label %and.phi, !dbg !3011

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !3011
  br label %or.phi, !dbg !3011

or.phi:                                           ; preds = %and.phi, %if.then19
  %val22 = phi i1 [ true, %if.then19 ], [ %val, %and.phi ], !dbg !3011
  br i1 %val22, label %assert_ok24, label %assert_fail23, !dbg !3011

assert_fail23:                                    ; preds = %or.phi
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3013
  call void %39(ptr @.panic_msg.103, i64 65, ptr @.file.104, i64 16, ptr @.func.137, i64 15, i32 112) #5, !dbg !3013
  unreachable, !dbg !3013

assert_ok24:                                      ; preds = %or.phi
  br i1 true, label %assert_ok26, label %assert_fail25, !dbg !3013

assert_fail25:                                    ; preds = %assert_ok24
  %40 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3013
  call void %40(ptr @.panic_msg.105, i64 80, ptr @.file.104, i64 16, ptr @.func.137, i64 15, i32 112) #5, !dbg !3013
  unreachable, !dbg !3013

assert_ok26:                                      ; preds = %assert_ok24
  %lt27 = icmp ult i64 0, %35, !dbg !3013
  br i1 %lt27, label %assert_ok29, label %assert_fail28, !dbg !3013

assert_fail28:                                    ; preds = %assert_ok26
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3013
  call void %41(ptr @.panic_msg.106, i64 59, ptr @.file.104, i64 16, ptr @.func.137, i64 15, i32 112) #5, !dbg !3013
  unreachable, !dbg !3013

assert_ok29:                                      ; preds = %assert_ok26
  %ptradd30 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !3013
  %42 = load i64, ptr %ptradd30, align 8, !dbg !3013
  %43 = inttoptr i64 %42 to ptr, !dbg !3013
  %type33 = load ptr, ptr %.cachedtype32, align 8, !dbg !2965
  %44 = icmp eq ptr %43, %type33, !dbg !2965
  br i1 %44, label %cache_hit36, label %cache_miss34, !dbg !2965

cache_miss34:                                     ; preds = %assert_ok29
  %ptradd35 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !2965
  %45 = load ptr, ptr %ptradd35, align 8, !dbg !2965
  %46 = call ptr @.dyn_search(ptr %45, ptr @"$sel.acquire"), !dbg !2965
  store ptr %46, ptr %.inlinecache31, align 8, !dbg !2965
  store ptr %43, ptr %.cachedtype32, align 8, !dbg !2965
  br label %47, !dbg !2965

cache_hit36:                                      ; preds = %assert_ok29
  %cache_hit_fn37 = load ptr, ptr %.inlinecache31, align 8, !dbg !2965
  br label %47, !dbg !2965

47:                                               ; preds = %cache_hit36, %cache_miss34
  %fn_phi38 = phi ptr [ %cache_hit_fn37, %cache_hit36 ], [ %46, %cache_miss34 ], !dbg !2965
  %48 = icmp eq ptr %fn_phi38, null, !dbg !2965
  br i1 %48, label %missing_function39, label %match40, !dbg !2965

missing_function39:                               ; preds = %47
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2965
  call void %49(ptr @.panic_msg.107, i64 44, ptr @.file.104, i64 16, ptr @.func.137, i64 15, i32 112) #5, !dbg !2965
  unreachable, !dbg !2965

match40:                                          ; preds = %47
  %50 = load ptr, ptr %allocator, align 8
  %51 = call i64 %fn_phi38(ptr %retparam, ptr %50, i64 %35, i32 0, i64 0), !dbg !3013
  %not_err = icmp eq i64 %51, 0, !dbg !3013
  %52 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3013
  br i1 %52, label %after_check, label %assign_optional, !dbg !3013

assign_optional:                                  ; preds = %match40
  store i64 %51, ptr %error_var, align 8, !dbg !3013
  br label %guard_block, !dbg !3013

after_check:                                      ; preds = %match40
  %53 = load ptr, ptr %retparam, align 8, !dbg !3013
  store ptr %53, ptr %blockret, align 8, !dbg !3013
  br label %expr_block.exit78, !dbg !3013

if.exit41:                                        ; preds = %if.exit17
  %54 = load ptr, ptr %ptr, align 8, !dbg !3014
  %55 = load i64, ptr %new_size, align 8, !dbg !3015
  br i1 true, label %or.phi51, label %or.rhs42, !dbg !3016

or.rhs42:                                         ; preds = %if.exit41
  store i64 0, ptr %x43, align 8
  %56 = load i64, ptr %x43, align 8, !dbg !3017
  %neq44 = icmp ne i64 0, %56, !dbg !3017
  br i1 %neq44, label %and.rhs45, label %and.phi49, !dbg !3017

and.rhs45:                                        ; preds = %or.rhs42
  %57 = load i64, ptr %x43, align 8, !dbg !3020
  %58 = load i64, ptr %x43, align 8, !dbg !3021
  %sub46 = sub i64 %58, 1, !dbg !3021
  %and47 = and i64 %57, %sub46, !dbg !3020
  %eq48 = icmp eq i64 %and47, 0, !dbg !3020
  br label %and.phi49, !dbg !3020

and.phi49:                                        ; preds = %and.rhs45, %or.rhs42
  %val50 = phi i1 [ false, %or.rhs42 ], [ %eq48, %and.rhs45 ], !dbg !3020
  br label %or.phi51, !dbg !3020

or.phi51:                                         ; preds = %and.phi49, %if.exit41
  %val52 = phi i1 [ true, %if.exit41 ], [ %val50, %and.phi49 ], !dbg !3020
  br i1 %val52, label %assert_ok54, label %assert_fail53, !dbg !3020

assert_fail53:                                    ; preds = %or.phi51
  %59 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3022
  call void %59(ptr @.panic_msg.103, i64 65, ptr @.file.104, i64 16, ptr @.func.137, i64 15, i32 113) #5, !dbg !3022
  unreachable, !dbg !3022

assert_ok54:                                      ; preds = %or.phi51
  br i1 true, label %assert_ok56, label %assert_fail55, !dbg !3022

assert_fail55:                                    ; preds = %assert_ok54
  %60 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3022
  call void %60(ptr @.panic_msg.105, i64 80, ptr @.file.104, i64 16, ptr @.func.137, i64 15, i32 113) #5, !dbg !3022
  unreachable, !dbg !3022

assert_ok56:                                      ; preds = %assert_ok54
  %neq57 = icmp ne ptr %54, null, !dbg !3022
  br i1 %neq57, label %assert_ok59, label %assert_fail58, !dbg !3022

assert_fail58:                                    ; preds = %assert_ok56
  %61 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3022
  call void %61(ptr @.panic_msg.138, i64 32, ptr @.file.104, i64 16, ptr @.func.137, i64 15, i32 113) #5, !dbg !3022
  unreachable, !dbg !3022

assert_ok59:                                      ; preds = %assert_ok56
  %lt60 = icmp ult i64 0, %55, !dbg !3022
  br i1 %lt60, label %assert_ok62, label %assert_fail61, !dbg !3022

assert_fail61:                                    ; preds = %assert_ok59
  %62 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3022
  call void %62(ptr @.panic_msg.139, i64 33, ptr @.file.104, i64 16, ptr @.func.137, i64 15, i32 113) #5, !dbg !3022
  unreachable, !dbg !3022

assert_ok62:                                      ; preds = %assert_ok59
  %ptradd63 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !3022
  %63 = load i64, ptr %ptradd63, align 8, !dbg !3022
  %64 = inttoptr i64 %63 to ptr, !dbg !3022
  %type66 = load ptr, ptr %.cachedtype65, align 8, !dbg !2965
  %65 = icmp eq ptr %64, %type66, !dbg !2965
  br i1 %65, label %cache_hit69, label %cache_miss67, !dbg !2965

cache_miss67:                                     ; preds = %assert_ok62
  %ptradd68 = getelementptr inbounds i8, ptr %64, i64 16, !dbg !2965
  %66 = load ptr, ptr %ptradd68, align 8, !dbg !2965
  %67 = call ptr @.dyn_search(ptr %66, ptr @"$sel.resize"), !dbg !2965
  store ptr %67, ptr %.inlinecache64, align 8, !dbg !2965
  store ptr %64, ptr %.cachedtype65, align 8, !dbg !2965
  br label %68, !dbg !2965

cache_hit69:                                      ; preds = %assert_ok62
  %cache_hit_fn70 = load ptr, ptr %.inlinecache64, align 8, !dbg !2965
  br label %68, !dbg !2965

68:                                               ; preds = %cache_hit69, %cache_miss67
  %fn_phi71 = phi ptr [ %cache_hit_fn70, %cache_hit69 ], [ %67, %cache_miss67 ], !dbg !2965
  %69 = icmp eq ptr %fn_phi71, null, !dbg !2965
  br i1 %69, label %missing_function72, label %match73, !dbg !2965

missing_function72:                               ; preds = %68
  %70 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2965
  call void %70(ptr @.panic_msg.140, i64 43, ptr @.file.104, i64 16, ptr @.func.137, i64 15, i32 113) #5, !dbg !2965
  unreachable, !dbg !2965

match73:                                          ; preds = %68
  %71 = load ptr, ptr %allocator, align 8
  %72 = call i64 %fn_phi71(ptr %retparam74, ptr %71, ptr %54, i64 %55, i64 0), !dbg !3022
  %not_err75 = icmp eq i64 %72, 0, !dbg !3022
  %73 = call i1 @llvm.expect.i1(i1 %not_err75, i1 true), !dbg !3022
  br i1 %73, label %after_check77, label %assign_optional76, !dbg !3022

assign_optional76:                                ; preds = %match73
  store i64 %72, ptr %error_var, align 8, !dbg !3022
  br label %guard_block, !dbg !3022

after_check77:                                    ; preds = %match73
  %74 = load ptr, ptr %retparam74, align 8, !dbg !3022
  store ptr %74, ptr %blockret, align 8, !dbg !3022
  br label %expr_block.exit78, !dbg !3022

expr_block.exit78:                                ; preds = %after_check77, %after_check, %expr_block.exit
  br label %noerr_block, !dbg !3022

guard_block:                                      ; preds = %assign_optional76, %assign_optional
  %75 = load i64, ptr %error_var, align 8, !dbg !3022
  ret i64 %75, !dbg !3022

noerr_block:                                      ; preds = %expr_block.exit78
  %76 = load ptr, ptr %blockret, align 8, !dbg !3022
  store ptr %76, ptr %new_ptr, align 8, !dbg !3022
  %77 = load ptr, ptr %self, align 8, !dbg !3023
  %78 = load ptr, ptr %new_ptr, align 8, !dbg !3024
  %79 = load i64, ptr %new_capacity, align 8, !dbg !3025
  %add79 = add i64 0, %79, !dbg !3025
  %gt80 = icmp ugt i64 0, %add79, !dbg !3025
  %sub81 = sub i64 %add79, 0, !dbg !3025
  %80 = call i1 @llvm.expect.i1(i1 %gt80, i1 false), !dbg !3025
  br i1 %80, label %panic82, label %checkok83, !dbg !3025

checkok83:                                        ; preds = %noerr_block
  %size = sub i64 %add79, 0, !dbg !3024
  %81 = insertvalue %"char[]" undef, ptr %78, 0, !dbg !3024
  %82 = insertvalue %"char[]" %81, i64 %size, 1, !dbg !3024
  store %"char[]" %82, ptr %77, align 8, !dbg !3024
  ret i64 0, !dbg !3024

panic:                                            ; preds = %entry
  %83 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2967
  call void %83(ptr @.panic_msg, i64 62, ptr @.file.131, i64 13, ptr @.func.137, i64 15, i32 51) #5, !dbg !2967
  unreachable, !dbg !2967

panic82:                                          ; preds = %noerr_block
  store i64 %sub81, ptr %taddr, align 8
  %84 = insertvalue %any undef, ptr %taddr, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %85, ptr %varargslots, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %86, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.131, i64 13, ptr @.func.137, i64 15, i32 58, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3024
  unreachable, !dbg !3024
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.write(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !3026 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !3029
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3029
  br i1 %5, label %panic, label %checkok, !dbg !3029

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3030, !DIExpression(), !3031)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !3032, !DIExpression(), !3033)
  %6 = load ptr, ptr %self, align 8, !dbg !3034
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !3034
  %7 = load i64, ptr %ptradd1, align 8, !dbg !3034
  %ptradd2 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3035
  %8 = load i64, ptr %ptradd2, align 8, !dbg !3035
  %add = add i64 %7, %8, !dbg !3034
  %9 = load ptr, ptr %self, align 8, !dbg !3034
  %10 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %9, i64 %add) #6, !dbg !3036
  %not_err = icmp eq i64 %10, 0, !dbg !3036
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3036
  br i1 %11, label %after_check, label %assign_optional, !dbg !3036

assign_optional:                                  ; preds = %checkok
  store i64 %10, ptr %error_var, align 8, !dbg !3036
  br label %guard_block, !dbg !3036

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !3036

guard_block:                                      ; preds = %assign_optional
  %12 = load i64, ptr %error_var, align 8, !dbg !3036
  ret i64 %12, !dbg !3036

noerr_block:                                      ; preds = %after_check
  %13 = load ptr, ptr %self, align 8, !dbg !3037
  %ptradd3 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !3037
  %14 = load i64, ptr %ptradd3, align 8, !dbg !3037
  %15 = load ptr, ptr %13, align 8, !dbg !3037
  %16 = load ptr, ptr %self, align 8, !dbg !3038
  %ptradd4 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !3038
  %17 = load i64, ptr %ptradd4, align 8, !dbg !3038
  %ge = icmp uge i64 %17, %14, !dbg !3038
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3038
  br i1 %18, label %panic5, label %checkok8, !dbg !3038

checkok8:                                         ; preds = %noerr_block
  %ptradd9 = getelementptr inbounds i8, ptr %15, i64 %17, !dbg !3038
  store ptr %ptradd9, ptr %dst, align 8
  %19 = load ptr, ptr %bytes, align 8, !dbg !3039
  store ptr %19, ptr %src, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3040
  %20 = load i64, ptr %ptradd10, align 8
  store i64 %20, ptr %len, align 8
  %21 = load ptr, ptr %dst, align 8, !dbg !3041
  %neq = icmp ne ptr %21, null, !dbg !3041
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !3041

assert_fail:                                      ; preds = %checkok8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3041
  call void %22(ptr @.panic_msg.119, i64 37, ptr @.file.120, i64 6, ptr @.func.113, i64 5, i32 329) #5, !dbg !3041
  unreachable, !dbg !3041

assert_ok:                                        ; preds = %checkok8
  %23 = load ptr, ptr %src, align 8, !dbg !3045
  %neq11 = icmp ne ptr %23, null, !dbg !3045
  br i1 %neq11, label %or.phi, label %or.rhs, !dbg !3045

or.rhs:                                           ; preds = %assert_ok
  %24 = load i64, ptr %len, align 8, !dbg !3046
  %eq = icmp eq i64 0, %24, !dbg !3046
  br label %or.phi, !dbg !3046

or.phi:                                           ; preds = %or.rhs, %assert_ok
  %val = phi i1 [ true, %assert_ok ], [ %eq, %or.rhs ], !dbg !3046
  br i1 %val, label %assert_ok13, label %assert_fail12, !dbg !3046

assert_fail12:                                    ; preds = %or.phi
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3047
  call void %25(ptr @.panic_msg.121, i64 94, ptr @.file.131, i64 13, ptr @.func.113, i64 5, i32 64) #5, !dbg !3047
  unreachable, !dbg !3047

assert_ok13:                                      ; preds = %or.phi
  %26 = load i64, ptr %len, align 8, !dbg !3048
  %eq14 = icmp eq i64 0, %26, !dbg !3048
  br i1 %eq14, label %or.phi16, label %or.rhs15, !dbg !3048

or.rhs15:                                         ; preds = %assert_ok13
  %27 = load ptr, ptr %dst, align 8, !dbg !3049
  %28 = load i64, ptr %len, align 8, !dbg !3050
  %ptradd_any = getelementptr i8, ptr %27, i64 %28, !dbg !3050
  %29 = load ptr, ptr %src, align 8, !dbg !3051
  %le = icmp ule ptr %ptradd_any, %29, !dbg !3049
  br label %or.phi16, !dbg !3049

or.phi16:                                         ; preds = %or.rhs15, %assert_ok13
  %val17 = phi i1 [ true, %assert_ok13 ], [ %le, %or.rhs15 ], !dbg !3049
  br i1 %val17, label %or.phi21, label %or.rhs18, !dbg !3049

or.rhs18:                                         ; preds = %or.phi16
  %30 = load ptr, ptr %src, align 8, !dbg !3052
  %31 = load i64, ptr %len, align 8, !dbg !3053
  %ptradd_any19 = getelementptr i8, ptr %30, i64 %31, !dbg !3053
  %32 = load ptr, ptr %dst, align 8, !dbg !3054
  %le20 = icmp ule ptr %ptradd_any19, %32, !dbg !3052
  br label %or.phi21, !dbg !3052

or.phi21:                                         ; preds = %or.rhs18, %or.phi16
  %val22 = phi i1 [ true, %or.phi16 ], [ %le20, %or.rhs18 ], !dbg !3052
  br i1 %val22, label %assert_ok24, label %assert_fail23, !dbg !3052

assert_fail23:                                    ; preds = %or.phi21
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3047
  call void %33(ptr @.panic_msg.122, i64 95, ptr @.file.131, i64 13, ptr @.func.113, i64 5, i32 64) #5, !dbg !3047
  unreachable, !dbg !3047

assert_ok24:                                      ; preds = %or.phi21
  %34 = load ptr, ptr %dst, align 8, !dbg !3055
  %35 = load ptr, ptr %src, align 8, !dbg !3056
  %36 = load i64, ptr %len, align 8, !dbg !3057
  call void @llvm.memcpy.p0.p0.i64(ptr %34, ptr %35, i64 %36, i1 false), !dbg !3058
  %37 = load ptr, ptr %self, align 8, !dbg !3059
  %ptradd25 = getelementptr inbounds i8, ptr %37, i64 16, !dbg !3059
  %38 = load i64, ptr %ptradd25, align 8, !dbg !3059
  %ptradd26 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3060
  %39 = load i64, ptr %ptradd26, align 8, !dbg !3060
  %add27 = add i64 %38, %39, !dbg !3059
  store i64 %add27, ptr %ptradd25, align 8, !dbg !3059
  %ptradd28 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3061
  %40 = load i64, ptr %ptradd28, align 8, !dbg !3061
  store i64 %40, ptr %0, align 8, !dbg !3061
  ret i64 0, !dbg !3061

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3031
  call void %41(ptr @.panic_msg, i64 62, ptr @.file.131, i64 13, ptr @.func.113, i64 5, i32 61) #5, !dbg !3031
  unreachable, !dbg !3031

panic5:                                           ; preds = %noerr_block
  store i64 %14, ptr %taddr, align 8
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr6, align 8
  %44 = insertvalue %any undef, ptr %taddr6, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %43, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %45, ptr %ptradd7, align 16
  %46 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %46, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.131, i64 13, ptr @.func.113, i64 5, i32 64, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3038
  unreachable, !dbg !3038
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.write_byte(ptr %0, i8 zeroext %1) #0 comdat !dbg !3062 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3065
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3065
  br i1 %3, label %panic, label %checkok, !dbg !3065

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3066, !DIExpression(), !3067)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !3068, !DIExpression(), !3069)
  %4 = load ptr, ptr %self, align 8, !dbg !3070
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !3070
  %5 = load i64, ptr %ptradd, align 8, !dbg !3070
  %add = add i64 %5, 1, !dbg !3070
  %6 = load ptr, ptr %self, align 8, !dbg !3070
  %7 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %6, i64 %add) #6, !dbg !3071
  %not_err = icmp eq i64 %7, 0, !dbg !3071
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3071
  br i1 %8, label %after_check, label %assign_optional, !dbg !3071

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !3071
  br label %guard_block, !dbg !3071

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !3071

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !3071
  ret i64 %9, !dbg !3071

noerr_block:                                      ; preds = %after_check
  %10 = load ptr, ptr %self, align 8, !dbg !3072
  %ptradd1 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !3072
  %11 = load i64, ptr %ptradd1, align 8, !dbg !3072
  %12 = load ptr, ptr %10, align 8, !dbg !3072
  %13 = load ptr, ptr %self, align 8, !dbg !3073
  %ptradd2 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !3073
  %14 = load i64, ptr %ptradd2, align 8, !dbg !3073
  %add3 = add i64 %14, 1, !dbg !3073
  store i64 %add3, ptr %ptradd2, align 8, !dbg !3073
  %ge = icmp uge i64 %14, %11, !dbg !3073
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3073
  br i1 %15, label %panic4, label %checkok7, !dbg !3073

checkok7:                                         ; preds = %noerr_block
  %ptradd8 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !3073
  %16 = load i8, ptr %c, align 1, !dbg !3074
  store i8 %16, ptr %ptradd8, align 1, !dbg !3074
  ret i64 0, !dbg !3074

panic:                                            ; preds = %entry
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3067
  call void %17(ptr @.panic_msg, i64 62, ptr @.file.131, i64 13, ptr @.func.115, i64 10, i32 69) #5, !dbg !3067
  unreachable, !dbg !3067

panic4:                                           ; preds = %noerr_block
  store i64 %11, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr5, align 8
  %20 = insertvalue %any undef, ptr %taddr5, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %19, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd6, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.131, i64 13, ptr @.func.115, i64 10, i32 72, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3073
  unreachable, !dbg !3073
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.read_from(ptr %0, ptr %1, i64 %2, ptr %3) #0 comdat !dbg !3075 {
entry:
  %self = alloca ptr, align 8
  %reader = alloca %any, align 8
  %start_index = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %available = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache5 = alloca ptr, align 8
  %.cachedtype6 = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %error_var14 = alloca i64, align 8
  %read = alloca i64, align 8
  %error_var21 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.inlinecache29 = alloca ptr, align 8
  %.cachedtype30 = alloca ptr, align 8
  %retparam39 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %error_var50 = alloca i64, align 8
  %len_to_read = alloca i64, align 8
  %error_var63 = alloca i64, align 8
  %read74 = alloca i64, align 8
  %error_var75 = alloca i64, align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %.inlinecache89 = alloca ptr, align 8
  %.cachedtype90 = alloca ptr, align 8
  %retparam99 = alloca i64, align 8
  %reterr108 = alloca i64, align 8
  store ptr null, ptr %.cachedtype90, align 8, !dbg !3078
  store ptr null, ptr %.cachedtype30, align 8, !dbg !3078
  store ptr null, ptr %.cachedtype6, align 8, !dbg !3078
  store ptr null, ptr %.cachedtype, align 8, !dbg !3078
  %4 = icmp eq ptr %1, null, !dbg !3078
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3078
  br i1 %5, label %panic, label %checkok, !dbg !3078

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3079, !DIExpression(), !3080)
  store i64 %2, ptr %reader, align 8
  %ptradd = getelementptr inbounds i8, ptr %reader, i64 8
  store ptr %3, ptr %ptradd, align 8
    #dbg_declare(ptr %reader, !3081, !DIExpression(), !3082)
    #dbg_declare(ptr %start_index, !3083, !DIExpression(), !3084)
  %6 = load ptr, ptr %self, align 8, !dbg !3085
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !3085
  %7 = load i64, ptr %ptradd1, align 8, !dbg !3085
  store i64 %7, ptr %start_index, align 8, !dbg !3085
  %ptradd2 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !3086
  %8 = load i64, ptr %ptradd2, align 8, !dbg !3086
  %9 = inttoptr i64 %8 to ptr, !dbg !3086
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3078
  %10 = icmp eq ptr %9, %type, !dbg !3078
  br i1 %10, label %cache_hit, label %cache_miss, !dbg !3078

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !3078
  %11 = load ptr, ptr %ptradd3, align 8, !dbg !3078
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.available"), !dbg !3078
  store ptr %12, ptr %.inlinecache, align 8, !dbg !3078
  store ptr %9, ptr %.cachedtype, align 8, !dbg !3078
  br label %13, !dbg !3078

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3078
  br label %13, !dbg !3078

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ], !dbg !3078
  %i2b = icmp ne ptr %fn_phi, null, !dbg !3078
  br i1 %i2b, label %if.then, label %if.exit, !dbg !3078

if.then:                                          ; preds = %13
  br label %loop.cond, !dbg !3087

loop.cond:                                        ; preds = %noerr_block44, %if.then
    #dbg_declare(ptr %available, !3089, !DIExpression(), !3091)
  %ptradd4 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !3092
  %14 = load i64, ptr %ptradd4, align 8, !dbg !3092
  %15 = inttoptr i64 %14 to ptr, !dbg !3092
  %type7 = load ptr, ptr %.cachedtype6, align 8, !dbg !3078
  %16 = icmp eq ptr %15, %type7, !dbg !3078
  br i1 %16, label %cache_hit10, label %cache_miss8, !dbg !3078

cache_miss8:                                      ; preds = %loop.cond
  %ptradd9 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !3078
  %17 = load ptr, ptr %ptradd9, align 8, !dbg !3078
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.available"), !dbg !3078
  store ptr %18, ptr %.inlinecache5, align 8, !dbg !3078
  store ptr %15, ptr %.cachedtype6, align 8, !dbg !3078
  br label %19, !dbg !3078

cache_hit10:                                      ; preds = %loop.cond
  %cache_hit_fn11 = load ptr, ptr %.inlinecache5, align 8, !dbg !3078
  br label %19, !dbg !3078

19:                                               ; preds = %cache_hit10, %cache_miss8
  %fn_phi12 = phi ptr [ %cache_hit_fn11, %cache_hit10 ], [ %18, %cache_miss8 ], !dbg !3078
  %20 = icmp eq ptr %fn_phi12, null, !dbg !3078
  br i1 %20, label %missing_function, label %match, !dbg !3078

missing_function:                                 ; preds = %19
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3092
  call void %21(ptr @.panic_msg.36, i64 46, ptr @.file.131, i64 13, ptr @.func.141, i64 9, i32 84) #5, !dbg !3092
  unreachable, !dbg !3092

match:                                            ; preds = %19
  %22 = load ptr, ptr %reader, align 8
  %23 = call i64 %fn_phi12(ptr %retparam, ptr %22), !dbg !3092
  %not_err = icmp eq i64 %23, 0, !dbg !3092
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3092
  br i1 %24, label %after_check, label %assign_optional, !dbg !3092

assign_optional:                                  ; preds = %match
  store i64 %23, ptr %error_var, align 8, !dbg !3092
  br label %guard_block, !dbg !3092

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !3092

guard_block:                                      ; preds = %assign_optional
  %25 = load i64, ptr %error_var, align 8, !dbg !3092
  ret i64 %25, !dbg !3092

noerr_block:                                      ; preds = %after_check
  %26 = load i64, ptr %retparam, align 8, !dbg !3092
  store i64 %26, ptr %available, align 8, !dbg !3092
  %i2b13 = icmp ne i64 %26, 0, !dbg !3092
  br i1 %i2b13, label %loop.body, label %loop.exit, !dbg !3092

loop.body:                                        ; preds = %noerr_block
  %27 = load ptr, ptr %self, align 8, !dbg !3093
  %ptradd15 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !3093
  %28 = load i64, ptr %ptradd15, align 8, !dbg !3093
  %29 = load i64, ptr %available, align 8, !dbg !3095
  %add = add i64 %28, %29, !dbg !3093
  %30 = load ptr, ptr %self, align 8, !dbg !3093
  %31 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %30, i64 %add) #6, !dbg !3096
  %not_err16 = icmp eq i64 %31, 0, !dbg !3096
  %32 = call i1 @llvm.expect.i1(i1 %not_err16, i1 true), !dbg !3096
  br i1 %32, label %after_check18, label %assign_optional17, !dbg !3096

assign_optional17:                                ; preds = %loop.body
  store i64 %31, ptr %error_var14, align 8, !dbg !3096
  br label %guard_block19, !dbg !3096

after_check18:                                    ; preds = %loop.body
  br label %noerr_block20, !dbg !3096

guard_block19:                                    ; preds = %assign_optional17
  %33 = load i64, ptr %error_var14, align 8, !dbg !3096
  ret i64 %33, !dbg !3096

noerr_block20:                                    ; preds = %after_check18
    #dbg_declare(ptr %read, !3097, !DIExpression(), !3098)
  %34 = load ptr, ptr %self, align 8, !dbg !3099
  %35 = load %"char[]", ptr %34, align 8, !dbg !3099
  %36 = extractvalue %"char[]" %35, 0, !dbg !3099
  %37 = load ptr, ptr %self, align 8, !dbg !3100
  %ptradd22 = getelementptr inbounds i8, ptr %37, i64 16, !dbg !3100
  %38 = load i64, ptr %ptradd22, align 8, !dbg !3100
  %39 = extractvalue %"char[]" %35, 1, !dbg !3100
  %gt = icmp ugt i64 %38, %39, !dbg !3100
  %40 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3100
  br i1 %40, label %panic23, label %checkok26, !dbg !3100

checkok26:                                        ; preds = %noerr_block20
  %size = sub i64 %39, %38, !dbg !3099
  %ptradd27 = getelementptr inbounds i8, ptr %36, i64 %38, !dbg !3099
  %41 = insertvalue %"char[]" undef, ptr %ptradd27, 0, !dbg !3099
  %42 = insertvalue %"char[]" %41, i64 %size, 1, !dbg !3099
  %ptradd28 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !3099
  %43 = load i64, ptr %ptradd28, align 8, !dbg !3099
  %44 = inttoptr i64 %43 to ptr, !dbg !3099
  %type31 = load ptr, ptr %.cachedtype30, align 8, !dbg !3078
  %45 = icmp eq ptr %44, %type31, !dbg !3078
  br i1 %45, label %cache_hit34, label %cache_miss32, !dbg !3078

cache_miss32:                                     ; preds = %checkok26
  %ptradd33 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !3078
  %46 = load ptr, ptr %ptradd33, align 8, !dbg !3078
  %47 = call ptr @.dyn_search(ptr %46, ptr @"$sel.read"), !dbg !3078
  store ptr %47, ptr %.inlinecache29, align 8, !dbg !3078
  store ptr %44, ptr %.cachedtype30, align 8, !dbg !3078
  br label %48, !dbg !3078

cache_hit34:                                      ; preds = %checkok26
  %cache_hit_fn35 = load ptr, ptr %.inlinecache29, align 8, !dbg !3078
  br label %48, !dbg !3078

48:                                               ; preds = %cache_hit34, %cache_miss32
  %fn_phi36 = phi ptr [ %cache_hit_fn35, %cache_hit34 ], [ %47, %cache_miss32 ], !dbg !3078
  %49 = icmp eq ptr %fn_phi36, null, !dbg !3078
  br i1 %49, label %missing_function37, label %match38, !dbg !3078

missing_function37:                               ; preds = %48
  %50 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3101
  call void %50(ptr @.panic_msg.39, i64 41, ptr @.file.131, i64 13, ptr @.func.141, i64 9, i32 87) #5, !dbg !3101
  unreachable, !dbg !3101

match38:                                          ; preds = %48
  %51 = load ptr, ptr %reader, align 8
  %52 = call i64 %fn_phi36(ptr %retparam39, ptr %51, ptr %ptradd27, i64 %size), !dbg !3101
  %not_err40 = icmp eq i64 %52, 0, !dbg !3101
  %53 = call i1 @llvm.expect.i1(i1 %not_err40, i1 true), !dbg !3101
  br i1 %53, label %after_check42, label %assign_optional41, !dbg !3101

assign_optional41:                                ; preds = %match38
  store i64 %52, ptr %error_var21, align 8, !dbg !3101
  br label %guard_block43, !dbg !3101

after_check42:                                    ; preds = %match38
  br label %noerr_block44, !dbg !3101

guard_block43:                                    ; preds = %assign_optional41
  %54 = load i64, ptr %error_var21, align 8, !dbg !3101
  ret i64 %54, !dbg !3101

noerr_block44:                                    ; preds = %after_check42
  %55 = load i64, ptr %retparam39, align 8, !dbg !3101
  store i64 %55, ptr %read, align 8, !dbg !3101
  %56 = load ptr, ptr %self, align 8, !dbg !3102
  %ptradd45 = getelementptr inbounds i8, ptr %56, i64 16, !dbg !3102
  %57 = load i64, ptr %ptradd45, align 8, !dbg !3102
  %58 = load i64, ptr %read, align 8, !dbg !3103
  %add46 = add i64 %57, %58, !dbg !3102
  store i64 %add46, ptr %ptradd45, align 8, !dbg !3102
  br label %loop.cond, !dbg !3102

loop.exit:                                        ; preds = %noerr_block
  %59 = load ptr, ptr %self, align 8, !dbg !3104
  %ptradd47 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !3104
  %60 = load i64, ptr %ptradd47, align 8, !dbg !3104
  %61 = load i64, ptr %start_index, align 8, !dbg !3105
  %sub = sub i64 %60, %61, !dbg !3104
  store i64 %sub, ptr %0, align 8, !dbg !3104
  ret i64 0, !dbg !3104

if.exit:                                          ; preds = %13
  %62 = load ptr, ptr %self, align 8, !dbg !3106
  %ptradd48 = getelementptr inbounds i8, ptr %62, i64 8, !dbg !3106
  %63 = load i64, ptr %ptradd48, align 8, !dbg !3106
  %eq = icmp eq i64 0, %63, !dbg !3106
  br i1 %eq, label %if.then49, label %if.exit56, !dbg !3106

if.then49:                                        ; preds = %if.exit
  %64 = load ptr, ptr %self, align 8, !dbg !3107
  %65 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %64, i64 16) #6, !dbg !3109
  %not_err51 = icmp eq i64 %65, 0, !dbg !3109
  %66 = call i1 @llvm.expect.i1(i1 %not_err51, i1 true), !dbg !3109
  br i1 %66, label %after_check53, label %assign_optional52, !dbg !3109

assign_optional52:                                ; preds = %if.then49
  store i64 %65, ptr %error_var50, align 8, !dbg !3109
  br label %guard_block54, !dbg !3109

after_check53:                                    ; preds = %if.then49
  br label %noerr_block55, !dbg !3109

guard_block54:                                    ; preds = %assign_optional52
  %67 = load i64, ptr %error_var50, align 8, !dbg !3109
  ret i64 %67, !dbg !3109

noerr_block55:                                    ; preds = %after_check53
  br label %if.exit56, !dbg !3109

if.exit56:                                        ; preds = %noerr_block55, %if.exit
  br label %loop.body57, !dbg !3110

loop.body57:                                      ; preds = %if.exit111, %if.exit56
    #dbg_declare(ptr %len_to_read, !3111, !DIExpression(), !3114)
  %68 = load ptr, ptr %self, align 8, !dbg !3115
  %ptradd58 = getelementptr inbounds i8, ptr %68, i64 8, !dbg !3115
  %69 = load i64, ptr %ptradd58, align 8, !dbg !3115
  %70 = load ptr, ptr %self, align 8, !dbg !3116
  %ptradd59 = getelementptr inbounds i8, ptr %70, i64 16, !dbg !3116
  %71 = load i64, ptr %ptradd59, align 8, !dbg !3116
  %sub60 = sub i64 %69, %71, !dbg !3115
  store i64 %sub60, ptr %len_to_read, align 8, !dbg !3115
  %72 = load i64, ptr %len_to_read, align 8, !dbg !3117
  %gt61 = icmp ugt i64 16, %72, !dbg !3117
  br i1 %gt61, label %if.then62, label %if.exit73, !dbg !3117

if.then62:                                        ; preds = %loop.body57
  %73 = load ptr, ptr %self, align 8, !dbg !3118
  %ptradd64 = getelementptr inbounds i8, ptr %73, i64 8, !dbg !3118
  %74 = load i64, ptr %ptradd64, align 8, !dbg !3118
  %mul = mul i64 %74, 2, !dbg !3118
  %75 = load ptr, ptr %self, align 8, !dbg !3118
  %76 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %75, i64 %mul) #6, !dbg !3120
  %not_err65 = icmp eq i64 %76, 0, !dbg !3120
  %77 = call i1 @llvm.expect.i1(i1 %not_err65, i1 true), !dbg !3120
  br i1 %77, label %after_check67, label %assign_optional66, !dbg !3120

assign_optional66:                                ; preds = %if.then62
  store i64 %76, ptr %error_var63, align 8, !dbg !3120
  br label %guard_block68, !dbg !3120

after_check67:                                    ; preds = %if.then62
  br label %noerr_block69, !dbg !3120

guard_block68:                                    ; preds = %assign_optional66
  %78 = load i64, ptr %error_var63, align 8, !dbg !3120
  ret i64 %78, !dbg !3120

noerr_block69:                                    ; preds = %after_check67
  %79 = load ptr, ptr %self, align 8, !dbg !3121
  %ptradd70 = getelementptr inbounds i8, ptr %79, i64 8, !dbg !3121
  %80 = load i64, ptr %ptradd70, align 8, !dbg !3121
  %81 = load ptr, ptr %self, align 8, !dbg !3122
  %ptradd71 = getelementptr inbounds i8, ptr %81, i64 16, !dbg !3122
  %82 = load i64, ptr %ptradd71, align 8, !dbg !3122
  %sub72 = sub i64 %80, %82, !dbg !3121
  store i64 %sub72, ptr %len_to_read, align 8, !dbg !3121
  br label %if.exit73, !dbg !3121

if.exit73:                                        ; preds = %noerr_block69, %loop.body57
    #dbg_declare(ptr %read74, !3123, !DIExpression(), !3124)
  %83 = load ptr, ptr %self, align 8, !dbg !3125
  %84 = load %"char[]", ptr %83, align 8, !dbg !3125
  %85 = extractvalue %"char[]" %84, 0, !dbg !3125
  %86 = load ptr, ptr %self, align 8, !dbg !3126
  %ptradd76 = getelementptr inbounds i8, ptr %86, i64 16, !dbg !3126
  %87 = load i64, ptr %ptradd76, align 8, !dbg !3126
  %88 = extractvalue %"char[]" %84, 1, !dbg !3126
  %gt77 = icmp ugt i64 %87, %88, !dbg !3126
  %89 = call i1 @llvm.expect.i1(i1 %gt77, i1 false), !dbg !3126
  br i1 %89, label %panic78, label %checkok85, !dbg !3126

checkok85:                                        ; preds = %if.exit73
  %size86 = sub i64 %88, %87, !dbg !3125
  %ptradd87 = getelementptr inbounds i8, ptr %85, i64 %87, !dbg !3125
  %90 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !3125
  %91 = insertvalue %"char[]" %90, i64 %size86, 1, !dbg !3125
  %ptradd88 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !3125
  %92 = load i64, ptr %ptradd88, align 8, !dbg !3125
  %93 = inttoptr i64 %92 to ptr, !dbg !3125
  %type91 = load ptr, ptr %.cachedtype90, align 8, !dbg !3078
  %94 = icmp eq ptr %93, %type91, !dbg !3078
  br i1 %94, label %cache_hit94, label %cache_miss92, !dbg !3078

cache_miss92:                                     ; preds = %checkok85
  %ptradd93 = getelementptr inbounds i8, ptr %93, i64 16, !dbg !3078
  %95 = load ptr, ptr %ptradd93, align 8, !dbg !3078
  %96 = call ptr @.dyn_search(ptr %95, ptr @"$sel.read"), !dbg !3078
  store ptr %96, ptr %.inlinecache89, align 8, !dbg !3078
  store ptr %93, ptr %.cachedtype90, align 8, !dbg !3078
  br label %97, !dbg !3078

cache_hit94:                                      ; preds = %checkok85
  %cache_hit_fn95 = load ptr, ptr %.inlinecache89, align 8, !dbg !3078
  br label %97, !dbg !3078

97:                                               ; preds = %cache_hit94, %cache_miss92
  %fn_phi96 = phi ptr [ %cache_hit_fn95, %cache_hit94 ], [ %96, %cache_miss92 ], !dbg !3078
  %98 = icmp eq ptr %fn_phi96, null, !dbg !3078
  br i1 %98, label %missing_function97, label %match98, !dbg !3078

missing_function97:                               ; preds = %97
  %99 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3127
  call void %99(ptr @.panic_msg.39, i64 41, ptr @.file.131, i64 13, ptr @.func.141, i64 9, i32 107) #5, !dbg !3127
  unreachable, !dbg !3127

match98:                                          ; preds = %97
  %100 = load ptr, ptr %reader, align 8
  %101 = call i64 %fn_phi96(ptr %retparam99, ptr %100, ptr %ptradd87, i64 %size86), !dbg !3127
  %not_err100 = icmp eq i64 %101, 0, !dbg !3127
  %102 = call i1 @llvm.expect.i1(i1 %not_err100, i1 true), !dbg !3127
  br i1 %102, label %after_check102, label %assign_optional101, !dbg !3127

assign_optional101:                               ; preds = %match98
  store i64 %101, ptr %error_var75, align 8, !dbg !3127
  br label %guard_block103, !dbg !3127

after_check102:                                   ; preds = %match98
  br label %noerr_block104, !dbg !3127

guard_block103:                                   ; preds = %assign_optional101
  %103 = load i64, ptr %error_var75, align 8, !dbg !3127
  ret i64 %103, !dbg !3127

noerr_block104:                                   ; preds = %after_check102
  %104 = load i64, ptr %retparam99, align 8, !dbg !3127
  store i64 %104, ptr %read74, align 8, !dbg !3127
  %105 = load ptr, ptr %self, align 8, !dbg !3128
  %ptradd105 = getelementptr inbounds i8, ptr %105, i64 16, !dbg !3128
  %106 = load i64, ptr %ptradd105, align 8, !dbg !3128
  %107 = load i64, ptr %read74, align 8, !dbg !3129
  %add106 = add i64 %106, %107, !dbg !3128
  store i64 %add106, ptr %ptradd105, align 8, !dbg !3128
  %108 = load i64, ptr %read74, align 8, !dbg !3130
  %109 = load i64, ptr %len_to_read, align 8, !dbg !3131
  %lt = icmp ult i64 %108, %109, !dbg !3130
  br i1 %lt, label %if.then107, label %if.exit111, !dbg !3130

if.then107:                                       ; preds = %noerr_block104
  %110 = load ptr, ptr %self, align 8, !dbg !3132
  %ptradd109 = getelementptr inbounds i8, ptr %110, i64 16, !dbg !3132
  %111 = load i64, ptr %ptradd109, align 8, !dbg !3132
  %112 = load i64, ptr %start_index, align 8, !dbg !3133
  %sub110 = sub i64 %111, %112, !dbg !3132
  store i64 %sub110, ptr %0, align 8, !dbg !3132
  ret i64 0, !dbg !3132

if.exit111:                                       ; preds = %noerr_block104
  br label %loop.body57, !dbg !3132

panic:                                            ; preds = %entry
  %113 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3080
  call void %113(ptr @.panic_msg, i64 62, ptr @.file.131, i64 13, ptr @.func.141, i64 9, i32 79) #5, !dbg !3080
  unreachable, !dbg !3080

panic23:                                          ; preds = %noerr_block20
  store i64 %39, ptr %taddr, align 8
  %114 = insertvalue %any undef, ptr %taddr, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr24, align 8
  %116 = insertvalue %any undef, ptr %taddr24, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %115, ptr %varargslots, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %117, ptr %ptradd25, align 16
  %118 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %118, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.131, i64 13, ptr @.func.141, i64 9, i32 87, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3099
  unreachable, !dbg !3099

panic78:                                          ; preds = %if.exit73
  store i64 %88, ptr %taddr79, align 8
  %119 = insertvalue %any undef, ptr %taddr79, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %87, ptr %taddr80, align 8
  %121 = insertvalue %any undef, ptr %taddr80, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %120, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %122, ptr %ptradd82, align 16
  %123 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %123, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.131, i64 13, ptr @.func.141, i64 9, i32 107, ptr byval(%"any[]") align 8 %indirectarg84) #5, !dbg !3125
  unreachable, !dbg !3125
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ReadBuffer.init(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4) #0 comdat !dbg !3134 {
entry:
  %self = alloca ptr, align 8
  %wrapped_stream = alloca %any, align 8
  %bytes = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %ReadBuffer, align 8
  %5 = icmp eq ptr %0, null, !dbg !3145
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !3145
  br i1 %6, label %panic, label %checkok, !dbg !3145

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3146, !DIExpression(), !3147)
  store i64 %1, ptr %wrapped_stream, align 8
  %ptradd = getelementptr inbounds i8, ptr %wrapped_stream, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %wrapped_stream, !3148, !DIExpression(), !3149)
  store ptr %3, ptr %bytes, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %bytes, !3150, !DIExpression(), !3151)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3152
  %7 = load i64, ptr %ptradd2, align 8, !dbg !3152
  %lt = icmp ult i64 0, %7, !dbg !3152
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3152

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3152
  call void %8(ptr @.panic_msg.143, i64 34, ptr @.file.142, i64 9, ptr @.func, i64 4, i32 14) #5, !dbg !3152
  unreachable, !dbg !3152

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !3154
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !3154
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !3154
  %10 = load i64, ptr %ptradd4, align 8, !dbg !3154
  %eq = icmp eq i64 0, %10, !dbg !3154
  br i1 %eq, label %assert_ok6, label %assert_fail5, !dbg !3154

assert_fail5:                                     ; preds = %assert_ok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3154
  call void %11(ptr @.panic_msg.132, i64 88, ptr @.file.142, i64 9, ptr @.func, i64 4, i32 15) #5, !dbg !3154
  unreachable, !dbg !3154

assert_ok6:                                       ; preds = %assert_ok
  %12 = load ptr, ptr %self, align 8, !dbg !3155
  %checknull = icmp eq ptr %12, null, !dbg !3155
  %13 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3155
  br i1 %13, label %panic7, label %checkok8, !dbg !3155

checkok8:                                         ; preds = %assert_ok6
  %14 = ptrtoint ptr %12 to i64, !dbg !3155
  %15 = urem i64 %14, 8, !dbg !3155
  %16 = icmp ne i64 %15, 0, !dbg !3155
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !3155
  br i1 %17, label %panic9, label %checkok12, !dbg !3155

checkok12:                                        ; preds = %checkok8
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %wrapped_stream, i32 16, i1 false), !dbg !3156
  %ptradd13 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !3156
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd13, ptr align 8 %bytes, i32 16, i1 false), !dbg !3157
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %12, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !3157
  %18 = load ptr, ptr %self, align 8, !dbg !3158
  ret ptr %18, !dbg !3158

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3147
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.142, i64 9, ptr @.func, i64 4, i32 17) #5, !dbg !3147
  unreachable, !dbg !3147

panic7:                                           ; preds = %assert_ok6
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3155
  call void %20(ptr @.panic_msg.2, i64 45, ptr @.file.142, i64 9, ptr @.func, i64 4, i32 19) #5, !dbg !3155
  unreachable, !dbg !3155

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr10, align 8
  %23 = insertvalue %any undef, ptr %taddr10, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd11, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.142, i64 9, ptr @.func, i64 4, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3155
  unreachable, !dbg !3155
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.io.ReadBuffer.str_view(ptr %0) #0 comdat !dbg !3159 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [1 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %taddr26 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !3162
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3162
  br i1 %2, label %panic, label %checkok, !dbg !3162

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3163, !DIExpression(), !3164)
  %3 = load ptr, ptr %self, align 8, !dbg !3165
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !3165
  %4 = load %"char[]", ptr %ptradd, align 8, !dbg !3165
  %5 = extractvalue %"char[]" %4, 0, !dbg !3165
  %6 = load ptr, ptr %self, align 8, !dbg !3166
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !3166
  %7 = load i64, ptr %ptradd1, align 8, !dbg !3166
  %8 = extractvalue %"char[]" %4, 1, !dbg !3166
  %gt = icmp ugt i64 %7, %8, !dbg !3166
  %9 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3166
  br i1 %9, label %panic2, label %checkok5, !dbg !3166

checkok5:                                         ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !3167
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 40, !dbg !3167
  %11 = load i64, ptr %ptradd6, align 8, !dbg !3167
  %12 = load ptr, ptr %self, align 8, !dbg !3168
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 32, !dbg !3168
  %13 = load i64, ptr %ptradd7, align 8, !dbg !3168
  %sub = sub i64 %11, %13, !dbg !3167
  %add = add i64 %7, %sub, !dbg !3167
  %gt8 = icmp ugt i64 %7, %add, !dbg !3167
  %sub9 = sub i64 %add, %7, !dbg !3167
  %14 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !3167
  br i1 %14, label %panic10, label %checkok15, !dbg !3167

checkok15:                                        ; preds = %checkok5
  %lt = icmp ult i64 %8, %add, !dbg !3169
  %sub16 = sub i64 %add, 1, !dbg !3169
  %15 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3169
  br i1 %15, label %panic17, label %checkok24, !dbg !3169

checkok24:                                        ; preds = %checkok15
  %size = sub i64 %add, %7, !dbg !3169
  %ptradd25 = getelementptr inbounds i8, ptr %5, i64 %7, !dbg !3169
  %16 = insertvalue %"char[]" undef, ptr %ptradd25, 0, !dbg !3169
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !3169
  store %"char[]" %17, ptr %taddr26, align 8
  %18 = load { ptr, i64 }, ptr %taddr26, align 8
  ret { ptr, i64 } %18

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3164
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.142, i64 9, ptr @.func.136, i64 8, i32 22) #5, !dbg !3164
  unreachable, !dbg !3164

panic2:                                           ; preds = %checkok
  store i64 %8, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr3, align 8
  %22 = insertvalue %any undef, ptr %taddr3, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %21, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd4, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.142, i64 9, ptr @.func.136, i64 8, i32 24, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3169
  unreachable, !dbg !3169

panic10:                                          ; preds = %checkok5
  store i64 %sub9, ptr %taddr11, align 8
  %25 = insertvalue %any undef, ptr %taddr11, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %26, ptr %varargslots12, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp13" = insertvalue %"any[]" %27, i64 1, 1
  store %"any[]" %"$$temp13", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.142, i64 9, ptr @.func.136, i64 8, i32 24, ptr byval(%"any[]") align 8 %indirectarg14) #5, !dbg !3169
  unreachable, !dbg !3169

panic17:                                          ; preds = %checkok15
  store i64 %sub16, ptr %taddr18, align 8
  %28 = insertvalue %any undef, ptr %taddr18, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr19, align 8
  %30 = insertvalue %any undef, ptr %taddr19, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %31, ptr %ptradd21, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.142, i64 9, ptr @.func.136, i64 8, i32 24, ptr byval(%"any[]") align 8 %indirectarg23) #5, !dbg !3169
  unreachable, !dbg !3169
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ReadBuffer.close(ptr %0) #0 comdat !dbg !3170 {
entry:
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache3 = alloca ptr, align 8
  %.cachedtype4 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype4, align 8, !dbg !3173
  store ptr null, ptr %.cachedtype, align 8, !dbg !3173
  %1 = icmp eq ptr %0, null, !dbg !3173
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3173
  br i1 %2, label %panic, label %checkok, !dbg !3173

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3174, !DIExpression(), !3175)
  %3 = load ptr, ptr %self, align 8, !dbg !3176
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !3176
  %4 = load i64, ptr %ptradd, align 8, !dbg !3176
  %5 = inttoptr i64 %4 to ptr, !dbg !3176
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3173
  %6 = icmp eq ptr %5, %type, !dbg !3173
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !3173

cache_miss:                                       ; preds = %checkok
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !3173
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !3173
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !3173
  store ptr %8, ptr %.inlinecache, align 8, !dbg !3173
  store ptr %5, ptr %.cachedtype, align 8, !dbg !3173
  br label %9, !dbg !3173

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3173
  br label %9, !dbg !3173

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !3173
  %i2b = icmp ne ptr %fn_phi, null, !dbg !3173
  br i1 %i2b, label %if.then, label %if.exit, !dbg !3173

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !3177
  %ptradd2 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !3177
  %11 = load i64, ptr %ptradd2, align 8, !dbg !3177
  %12 = inttoptr i64 %11 to ptr, !dbg !3177
  %type5 = load ptr, ptr %.cachedtype4, align 8, !dbg !3173
  %13 = icmp eq ptr %12, %type5, !dbg !3173
  br i1 %13, label %cache_hit8, label %cache_miss6, !dbg !3173

cache_miss6:                                      ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !3173
  %14 = load ptr, ptr %ptradd7, align 8, !dbg !3173
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !3173
  store ptr %15, ptr %.inlinecache3, align 8, !dbg !3173
  store ptr %12, ptr %.cachedtype4, align 8, !dbg !3173
  br label %16, !dbg !3173

cache_hit8:                                       ; preds = %if.then
  %cache_hit_fn9 = load ptr, ptr %.inlinecache3, align 8, !dbg !3173
  br label %16, !dbg !3173

16:                                               ; preds = %cache_hit8, %cache_miss6
  %fn_phi10 = phi ptr [ %cache_hit_fn9, %cache_hit8 ], [ %15, %cache_miss6 ], !dbg !3173
  %17 = icmp eq ptr %fn_phi10, null, !dbg !3173
  br i1 %17, label %missing_function, label %match, !dbg !3173

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3177
  call void %18(ptr @.panic_msg.145, i64 42, ptr @.file.142, i64 9, ptr @.func.144, i64 5, i32 29) #5, !dbg !3177
  unreachable, !dbg !3177

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !3177
  %20 = call i64 %fn_phi10(ptr %19), !dbg !3177
  %not_err = icmp eq i64 %20, 0, !dbg !3177
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3177
  br i1 %21, label %after_check, label %assign_optional, !dbg !3177

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %error_var, align 8, !dbg !3177
  br label %guard_block, !dbg !3177

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !3177

guard_block:                                      ; preds = %assign_optional
  %22 = load i64, ptr %error_var, align 8, !dbg !3177
  ret i64 %22, !dbg !3177

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !3177

if.exit:                                          ; preds = %noerr_block, %9
  ret i64 0, !dbg !3177

panic:                                            ; preds = %entry
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3175
  call void %23(ptr @.panic_msg, i64 62, ptr @.file.142, i64 9, ptr @.func.144, i64 5, i32 27) #5, !dbg !3175
  unreachable, !dbg !3175
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ReadBuffer.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !3178 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %error_var12 = alloca i64, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [1 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %taddr61 = alloca i64, align 8
  %varargslots62 = alloca [1 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
  %taddr69 = alloca i64, align 8
  %taddr70 = alloca i64, align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr78 = alloca i64, align 8
  %taddr79 = alloca i64, align 8
  %varargslots80 = alloca [2 x %any], align 16
  %indirectarg83 = alloca %"any[]", align 8
  %reterr87 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3181
  %4 = icmp eq ptr %1, null, !dbg !3181
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3181
  br i1 %5, label %panic, label %checkok, !dbg !3181

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3182, !DIExpression(), !3183)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !3184, !DIExpression(), !3185)
  %6 = load ptr, ptr %self, align 8, !dbg !3186
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !3186
  %7 = load i64, ptr %ptradd1, align 8, !dbg !3186
  %8 = load ptr, ptr %self, align 8, !dbg !3187
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 40, !dbg !3187
  %9 = load i64, ptr %ptradd2, align 8, !dbg !3187
  %eq = icmp eq i64 %7, %9, !dbg !3186
  br i1 %eq, label %if.then, label %if.exit18, !dbg !3186

if.then:                                          ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !3188
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 32, !dbg !3188
  %11 = load i64, ptr %ptradd3, align 8, !dbg !3188
  %eq4 = icmp eq i64 0, %11, !dbg !3188
  br i1 %eq4, label %and.rhs, label %and.phi, !dbg !3188

and.rhs:                                          ; preds = %if.then
  %ptradd5 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3190
  %12 = load i64, ptr %ptradd5, align 8, !dbg !3190
  %13 = load ptr, ptr %self, align 8, !dbg !3191
  %ptradd6 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !3191
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !3191
  %14 = load i64, ptr %ptradd7, align 8, !dbg !3191
  %ge = icmp uge i64 %12, %14, !dbg !3190
  br label %and.phi, !dbg !3190

and.phi:                                          ; preds = %and.rhs, %if.then
  %val = phi i1 [ false, %if.then ], [ %ge, %and.rhs ], !dbg !3190
  br i1 %val, label %if.then8, label %if.exit, !dbg !3190

if.then8:                                         ; preds = %and.phi
  %15 = load ptr, ptr %self, align 8, !dbg !3192
  %ptradd9 = getelementptr inbounds i8, ptr %15, i64 8, !dbg !3194
  %16 = load i64, ptr %ptradd9, align 8, !dbg !3194
  %17 = inttoptr i64 %16 to ptr, !dbg !3194
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3181
  %18 = icmp eq ptr %17, %type, !dbg !3181
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !3181

cache_miss:                                       ; preds = %if.then8
  %ptradd10 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !3181
  %19 = load ptr, ptr %ptradd10, align 8, !dbg !3181
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.read"), !dbg !3181
  store ptr %20, ptr %.inlinecache, align 8, !dbg !3181
  store ptr %17, ptr %.cachedtype, align 8, !dbg !3181
  br label %21, !dbg !3181

cache_hit:                                        ; preds = %if.then8
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3181
  br label %21, !dbg !3181

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !3181
  %22 = icmp eq ptr %fn_phi, null, !dbg !3181
  br i1 %22, label %missing_function, label %match, !dbg !3181

missing_function:                                 ; preds = %21
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3192
  call void %23(ptr @.panic_msg.39, i64 41, ptr @.file.142, i64 9, ptr @.func.118, i64 4, i32 39) #5, !dbg !3192
  unreachable, !dbg !3192

match:                                            ; preds = %21
  %24 = load ptr, ptr %15, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd11, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24, ptr %lo, i64 %hi), !dbg !3192
  %not_err = icmp eq i64 %25, 0, !dbg !3192
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3192
  br i1 %26, label %after_check, label %assign_optional, !dbg !3192

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %error_var, align 8, !dbg !3192
  br label %guard_block, !dbg !3192

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !3192

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var, align 8, !dbg !3192
  ret i64 %27, !dbg !3192

noerr_block:                                      ; preds = %after_check
  %28 = load i64, ptr %retparam, align 8, !dbg !3192
  store i64 %28, ptr %0, align 8, !dbg !3192
  ret i64 0, !dbg !3192

if.exit:                                          ; preds = %and.phi
  %29 = load ptr, ptr %self, align 8, !dbg !3195
  %30 = call i64 @std.io.ReadBuffer.refill(ptr %29) #6, !dbg !3195
  %not_err13 = icmp eq i64 %30, 0, !dbg !3195
  %31 = call i1 @llvm.expect.i1(i1 %not_err13, i1 true), !dbg !3195
  br i1 %31, label %after_check15, label %assign_optional14, !dbg !3195

assign_optional14:                                ; preds = %if.exit
  store i64 %30, ptr %error_var12, align 8, !dbg !3195
  br label %guard_block16, !dbg !3195

after_check15:                                    ; preds = %if.exit
  br label %noerr_block17, !dbg !3195

guard_block16:                                    ; preds = %assign_optional14
  %32 = load i64, ptr %error_var12, align 8, !dbg !3195
  ret i64 %32, !dbg !3195

noerr_block17:                                    ; preds = %after_check15
  br label %if.exit18, !dbg !3195

if.exit18:                                        ; preds = %noerr_block17, %checkok
    #dbg_declare(ptr %n, !3196, !DIExpression(), !3197)
  %33 = load ptr, ptr %self, align 8, !dbg !3198
  %ptradd19 = getelementptr inbounds i8, ptr %33, i64 40, !dbg !3198
  %34 = load i64, ptr %ptradd19, align 8, !dbg !3198
  %35 = load ptr, ptr %self, align 8, !dbg !3199
  %ptradd20 = getelementptr inbounds i8, ptr %35, i64 32, !dbg !3199
  %36 = load i64, ptr %ptradd20, align 8, !dbg !3199
  %sub = sub i64 %34, %36, !dbg !3198
  store i64 %sub, ptr %x, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3200
  %37 = load i64, ptr %ptradd21, align 8
  store i64 %37, ptr %.anon, align 8
  %38 = load i64, ptr %x, align 8
  store i64 %38, ptr %a, align 8
  %39 = load i64, ptr %.anon, align 8
  store i64 %39, ptr %b, align 8
  %40 = load i64, ptr %a, align 8, !dbg !3201
  %41 = load i64, ptr %b, align 8, !dbg !3206
  %lt = icmp ult i64 %40, %41, !dbg !3201
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !3201

cond.lhs:                                         ; preds = %if.exit18
  %42 = load i64, ptr %x, align 8, !dbg !3207
  br label %cond.phi, !dbg !3207

cond.rhs:                                         ; preds = %if.exit18
  %43 = load i64, ptr %.anon, align 8, !dbg !3208
  br label %cond.phi, !dbg !3208

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val22 = phi i64 [ %42, %cond.lhs ], [ %43, %cond.rhs ], !dbg !3208
  store i64 %val22, ptr %n, align 8, !dbg !3208
  %44 = load ptr, ptr %self, align 8, !dbg !3209
  %ptradd23 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !3209
  %45 = load %"char[]", ptr %ptradd23, align 8, !dbg !3209
  %46 = extractvalue %"char[]" %45, 0, !dbg !3209
  %47 = load ptr, ptr %self, align 8, !dbg !3210
  %ptradd24 = getelementptr inbounds i8, ptr %47, i64 32, !dbg !3210
  %48 = load i64, ptr %ptradd24, align 8, !dbg !3210
  %49 = extractvalue %"char[]" %45, 1, !dbg !3210
  %gt = icmp ugt i64 %48, %49, !dbg !3210
  %50 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3210
  br i1 %50, label %panic25, label %checkok28, !dbg !3210

checkok28:                                        ; preds = %cond.phi
  %51 = load i64, ptr %n, align 8, !dbg !3211
  %add = add i64 %48, %51, !dbg !3211
  %gt29 = icmp ugt i64 %48, %add, !dbg !3211
  %sub30 = sub i64 %add, %48, !dbg !3211
  %52 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !3211
  br i1 %52, label %panic31, label %checkok36, !dbg !3211

checkok36:                                        ; preds = %checkok28
  %lt37 = icmp ult i64 %49, %add, !dbg !3209
  %sub38 = sub i64 %add, 1, !dbg !3209
  %53 = call i1 @llvm.expect.i1(i1 %lt37, i1 false), !dbg !3209
  br i1 %53, label %panic39, label %checkok46, !dbg !3209

checkok46:                                        ; preds = %checkok36
  %size = sub i64 %add, %48, !dbg !3209
  %ptradd47 = getelementptr inbounds i8, ptr %46, i64 %48, !dbg !3209
  %54 = insertvalue %"char[]" undef, ptr %ptradd47, 0, !dbg !3209
  %55 = insertvalue %"char[]" %54, i64 %size, 1, !dbg !3209
  %56 = load %"char[]", ptr %bytes, align 8, !dbg !3212
  %57 = extractvalue %"char[]" %56, 0, !dbg !3212
  %58 = extractvalue %"char[]" %56, 1, !dbg !3213
  %gt48 = icmp ugt i64 0, %58, !dbg !3213
  %59 = call i1 @llvm.expect.i1(i1 %gt48, i1 false), !dbg !3213
  br i1 %59, label %panic49, label %checkok56, !dbg !3213

checkok56:                                        ; preds = %checkok46
  %60 = load i64, ptr %n, align 8, !dbg !3214
  %add57 = add i64 0, %60, !dbg !3214
  %gt58 = icmp ugt i64 0, %add57, !dbg !3214
  %sub59 = sub i64 %add57, 0, !dbg !3214
  %61 = call i1 @llvm.expect.i1(i1 %gt58, i1 false), !dbg !3214
  br i1 %61, label %panic60, label %checkok65, !dbg !3214

checkok65:                                        ; preds = %checkok56
  %lt66 = icmp ult i64 %58, %add57, !dbg !3212
  %sub67 = sub i64 %add57, 1, !dbg !3212
  %62 = call i1 @llvm.expect.i1(i1 %lt66, i1 false), !dbg !3212
  br i1 %62, label %panic68, label %checkok75, !dbg !3212

checkok75:                                        ; preds = %checkok65
  %size76 = sub i64 %add57, 0, !dbg !3212
  %63 = insertvalue %"char[]" undef, ptr %57, 0, !dbg !3212
  %64 = insertvalue %"char[]" %63, i64 %size76, 1, !dbg !3212
  %65 = extractvalue %"char[]" %64, 0, !dbg !3212
  %66 = extractvalue %"char[]" %55, 0, !dbg !3212
  %67 = extractvalue %"char[]" %55, 1, !dbg !3212
  %68 = extractvalue %"char[]" %64, 1, !dbg !3212
  %neq = icmp ne i64 %68, %67, !dbg !3212
  %69 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !3212
  br i1 %69, label %panic77, label %checkok84, !dbg !3212

checkok84:                                        ; preds = %checkok75
  %70 = mul i64 %67, 1, !dbg !3212
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %65, ptr align 1 %66, i64 %70, i1 false), !dbg !3212
  %71 = load ptr, ptr %self, align 8, !dbg !3215
  %ptradd85 = getelementptr inbounds i8, ptr %71, i64 32, !dbg !3215
  %72 = load i64, ptr %ptradd85, align 8, !dbg !3215
  %73 = load i64, ptr %n, align 8, !dbg !3216
  %add86 = add i64 %72, %73, !dbg !3215
  store i64 %add86, ptr %ptradd85, align 8, !dbg !3215
  %74 = load i64, ptr %n, align 8, !dbg !3217
  store i64 %74, ptr %0, align 8, !dbg !3217
  ret i64 0, !dbg !3217

panic:                                            ; preds = %entry
  %75 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3183
  call void %75(ptr @.panic_msg, i64 62, ptr @.file.142, i64 9, ptr @.func.118, i64 4, i32 32) #5, !dbg !3183
  unreachable, !dbg !3183

panic25:                                          ; preds = %cond.phi
  store i64 %49, ptr %taddr, align 8
  %76 = insertvalue %any undef, ptr %taddr, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %48, ptr %taddr26, align 8
  %78 = insertvalue %any undef, ptr %taddr26, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %79, ptr %ptradd27, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.142, i64 9, ptr @.func.118, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3209
  unreachable, !dbg !3209

panic31:                                          ; preds = %checkok28
  store i64 %sub30, ptr %taddr32, align 8
  %81 = insertvalue %any undef, ptr %taddr32, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots33, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp34" = insertvalue %"any[]" %83, i64 1, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.142, i64 9, ptr @.func.118, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg35) #5, !dbg !3209
  unreachable, !dbg !3209

panic39:                                          ; preds = %checkok36
  store i64 %sub38, ptr %taddr40, align 8
  %84 = insertvalue %any undef, ptr %taddr40, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %49, ptr %taddr41, align 8
  %86 = insertvalue %any undef, ptr %taddr41, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %85, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %87, ptr %ptradd43, align 16
  %88 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %88, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.142, i64 9, ptr @.func.118, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg45) #5, !dbg !3209
  unreachable, !dbg !3209

panic49:                                          ; preds = %checkok46
  store i64 %58, ptr %taddr50, align 8
  %89 = insertvalue %any undef, ptr %taddr50, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr51, align 8
  %91 = insertvalue %any undef, ptr %taddr51, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %92, ptr %ptradd53, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.142, i64 9, ptr @.func.118, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg55) #5, !dbg !3212
  unreachable, !dbg !3212

panic60:                                          ; preds = %checkok56
  store i64 %sub59, ptr %taddr61, align 8
  %94 = insertvalue %any undef, ptr %taddr61, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots62, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp63" = insertvalue %"any[]" %96, i64 1, 1
  store %"any[]" %"$$temp63", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.142, i64 9, ptr @.func.118, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg64) #5, !dbg !3212
  unreachable, !dbg !3212

panic68:                                          ; preds = %checkok65
  store i64 %sub67, ptr %taddr69, align 8
  %97 = insertvalue %any undef, ptr %taddr69, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr70, align 8
  %99 = insertvalue %any undef, ptr %taddr70, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %98, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %100, ptr %ptradd72, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.142, i64 9, ptr @.func.118, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg74) #5, !dbg !3212
  unreachable, !dbg !3212

panic77:                                          ; preds = %checkok75
  store i64 %68, ptr %taddr78, align 8
  %102 = insertvalue %any undef, ptr %taddr78, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %67, ptr %taddr79, align 8
  %104 = insertvalue %any undef, ptr %taddr79, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %103, ptr %varargslots80, align 16
  %ptradd81 = getelementptr inbounds i8, ptr %varargslots80, i64 16
  store %any %105, ptr %ptradd81, align 16
  %106 = insertvalue %"any[]" undef, ptr %varargslots80, 0
  %"$$temp82" = insertvalue %"any[]" %106, i64 2, 1
  store %"any[]" %"$$temp82", ptr %indirectarg83, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.108, i64 38, ptr @.file.142, i64 9, ptr @.func.118, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg83) #5, !dbg !3212
  unreachable, !dbg !3212
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ReadBuffer.read_byte(ptr %0, ptr %1) #0 comdat !dbg !3218 {
entry:
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !3221
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3221
  br i1 %3, label %panic, label %checkok, !dbg !3221

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3222, !DIExpression(), !3223)
  %4 = load ptr, ptr %self, align 8, !dbg !3224
  %ptradd = getelementptr inbounds i8, ptr %4, i64 32, !dbg !3224
  %5 = load i64, ptr %ptradd, align 8, !dbg !3224
  %6 = load ptr, ptr %self, align 8, !dbg !3225
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !3225
  %7 = load i64, ptr %ptradd1, align 8, !dbg !3225
  %eq = icmp eq i64 %5, %7, !dbg !3224
  br i1 %eq, label %if.then, label %if.exit, !dbg !3224

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !3226
  %9 = call i64 @std.io.ReadBuffer.refill(ptr %8) #6, !dbg !3226
  %not_err = icmp eq i64 %9, 0, !dbg !3226
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3226
  br i1 %10, label %after_check, label %assign_optional, !dbg !3226

assign_optional:                                  ; preds = %if.then
  store i64 %9, ptr %error_var, align 8, !dbg !3226
  br label %guard_block, !dbg !3226

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !3226

guard_block:                                      ; preds = %assign_optional
  %11 = load i64, ptr %error_var, align 8, !dbg !3226
  ret i64 %11, !dbg !3226

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !3226

if.exit:                                          ; preds = %noerr_block, %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !3227
  %ptradd2 = getelementptr inbounds i8, ptr %12, i64 32, !dbg !3227
  %13 = load i64, ptr %ptradd2, align 8, !dbg !3227
  %14 = load ptr, ptr %self, align 8, !dbg !3228
  %ptradd3 = getelementptr inbounds i8, ptr %14, i64 40, !dbg !3228
  %15 = load i64, ptr %ptradd3, align 8, !dbg !3228
  %eq4 = icmp eq i64 %13, %15, !dbg !3227
  br i1 %eq4, label %if.then5, label %if.exit6, !dbg !3227

if.then5:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !3229

if.exit6:                                         ; preds = %if.exit
    #dbg_declare(ptr %c, !3230, !DIExpression(), !3231)
  %16 = load ptr, ptr %self, align 8, !dbg !3232
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !3232
  %ptradd8 = getelementptr inbounds i8, ptr %ptradd7, i64 8, !dbg !3232
  %17 = load i64, ptr %ptradd8, align 8, !dbg !3232
  %18 = load ptr, ptr %ptradd7, align 8, !dbg !3232
  %19 = load ptr, ptr %self, align 8, !dbg !3233
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !3233
  %20 = load i64, ptr %ptradd9, align 8, !dbg !3233
  %ge = icmp uge i64 %20, %17, !dbg !3233
  %21 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3233
  br i1 %21, label %panic10, label %checkok13, !dbg !3233

checkok13:                                        ; preds = %if.exit6
  %ptradd14 = getelementptr inbounds i8, ptr %18, i64 %20, !dbg !3233
  %22 = load i8, ptr %ptradd14, align 1, !dbg !3233
  store i8 %22, ptr %c, align 1, !dbg !3233
  %23 = load ptr, ptr %self, align 8, !dbg !3234
  %ptradd15 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !3234
  %24 = load i64, ptr %ptradd15, align 8, !dbg !3234
  %add = add i64 %24, 1, !dbg !3234
  store i64 %add, ptr %ptradd15, align 8, !dbg !3234
  %25 = load i8, ptr %c, align 1, !dbg !3235
  store i8 %25, ptr %0, align 1, !dbg !3235
  ret i64 0, !dbg !3235

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3223
  call void %26(ptr @.panic_msg, i64 62, ptr @.file.142, i64 9, ptr @.func.123, i64 9, i32 49) #5, !dbg !3223
  unreachable, !dbg !3223

panic10:                                          ; preds = %if.exit6
  store i64 %17, ptr %taddr, align 8
  %27 = insertvalue %any undef, ptr %taddr, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr11, align 8
  %29 = insertvalue %any undef, ptr %taddr11, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd12, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.142, i64 9, ptr @.func.123, i64 9, i32 53, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3233
  unreachable, !dbg !3233
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.ReadBuffer.refill(ptr %0) #0 !dbg !3236 {
entry:
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3237
  %1 = icmp eq ptr %0, null, !dbg !3237
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3237
  br i1 %2, label %panic, label %checkok, !dbg !3237

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3238, !DIExpression(), !3239)
  %3 = load ptr, ptr %self, align 8, !dbg !3240
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !3240
  store i64 0, ptr %ptradd, align 8, !dbg !3241
  %4 = load ptr, ptr %self, align 8, !dbg !3242
  %ptradd1 = getelementptr inbounds i8, ptr %4, i64 40, !dbg !3242
  %5 = load ptr, ptr %self, align 8, !dbg !3243
  %6 = load ptr, ptr %self, align 8, !dbg !3244
  %ptradd2 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !3244
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3244
  %7 = load i64, ptr %ptradd3, align 8, !dbg !3244
  %8 = inttoptr i64 %7 to ptr, !dbg !3244
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3237
  %9 = icmp eq ptr %8, %type, !dbg !3237
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !3237

cache_miss:                                       ; preds = %checkok
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !3237
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !3237
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read"), !dbg !3237
  store ptr %11, ptr %.inlinecache, align 8, !dbg !3237
  store ptr %8, ptr %.cachedtype, align 8, !dbg !3237
  br label %12, !dbg !3237

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3237
  br label %12, !dbg !3237

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !3237
  %13 = icmp eq ptr %fn_phi, null, !dbg !3237
  br i1 %13, label %missing_function, label %match, !dbg !3237

missing_function:                                 ; preds = %12
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3243
  call void %14(ptr @.panic_msg.39, i64 41, ptr @.file.142, i64 9, ptr @.func.146, i64 6, i32 61) #5, !dbg !3243
  unreachable, !dbg !3243

match:                                            ; preds = %12
  %15 = load ptr, ptr %5, align 8
  %lo = load ptr, ptr %ptradd2, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %ptradd2, i64 8
  %hi = load i64, ptr %ptradd5, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %15, ptr %lo, i64 %hi), !dbg !3243
  %not_err = icmp eq i64 %16, 0, !dbg !3243
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3243
  br i1 %17, label %after_check, label %assign_optional, !dbg !3243

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %error_var, align 8, !dbg !3243
  br label %guard_block, !dbg !3243

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !3243

guard_block:                                      ; preds = %assign_optional
  %18 = load i64, ptr %error_var, align 8, !dbg !3243
  ret i64 %18, !dbg !3243

noerr_block:                                      ; preds = %after_check
  %19 = load i64, ptr %retparam, align 8, !dbg !3243
  store i64 %19, ptr %ptradd1, align 8, !dbg !3243
  ret i64 0, !dbg !3243

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3239
  call void %20(ptr @.panic_msg, i64 62, ptr @.file.142, i64 9, ptr @.func.146, i64 6, i32 58) #5, !dbg !3239
  unreachable, !dbg !3239
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.WriteBuffer.init(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4) #0 comdat !dbg !3245 {
entry:
  %self = alloca ptr, align 8
  %wrapped_stream = alloca %any, align 8
  %bytes = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %WriteBuffer, align 8
  %5 = icmp eq ptr %0, null, !dbg !3254
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !3254
  br i1 %6, label %panic, label %checkok, !dbg !3254

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3255, !DIExpression(), !3256)
  store i64 %1, ptr %wrapped_stream, align 8
  %ptradd = getelementptr inbounds i8, ptr %wrapped_stream, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %wrapped_stream, !3257, !DIExpression(), !3258)
  store ptr %3, ptr %bytes, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %bytes, !3259, !DIExpression(), !3260)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3261
  %7 = load i64, ptr %ptradd2, align 8, !dbg !3261
  %lt = icmp ult i64 0, %7, !dbg !3261
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3261

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3261
  call void %8(ptr @.panic_msg.147, i64 63, ptr @.file.142, i64 9, ptr @.func, i64 4, i32 74) #5, !dbg !3261
  unreachable, !dbg !3261

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !3263
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !3263
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !3263
  %10 = load i64, ptr %ptradd4, align 8, !dbg !3263
  %eq = icmp eq i64 0, %10, !dbg !3263
  br i1 %eq, label %assert_ok6, label %assert_fail5, !dbg !3263

assert_fail5:                                     ; preds = %assert_ok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3263
  call void %11(ptr @.panic_msg.132, i64 88, ptr @.file.142, i64 9, ptr @.func, i64 4, i32 75) #5, !dbg !3263
  unreachable, !dbg !3263

assert_ok6:                                       ; preds = %assert_ok
  %12 = load ptr, ptr %self, align 8, !dbg !3264
  %checknull = icmp eq ptr %12, null, !dbg !3264
  %13 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3264
  br i1 %13, label %panic7, label %checkok8, !dbg !3264

checkok8:                                         ; preds = %assert_ok6
  %14 = ptrtoint ptr %12 to i64, !dbg !3264
  %15 = urem i64 %14, 8, !dbg !3264
  %16 = icmp ne i64 %15, 0, !dbg !3264
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !3264
  br i1 %17, label %panic9, label %checkok12, !dbg !3264

checkok12:                                        ; preds = %checkok8
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %wrapped_stream, i32 16, i1 false), !dbg !3265
  %ptradd13 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !3265
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd13, ptr align 8 %bytes, i32 16, i1 false), !dbg !3266
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %12, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !3266
  %18 = load ptr, ptr %self, align 8, !dbg !3267
  ret ptr %18, !dbg !3267

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3256
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.142, i64 9, ptr @.func, i64 4, i32 77) #5, !dbg !3256
  unreachable, !dbg !3256

panic7:                                           ; preds = %assert_ok6
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3264
  call void %20(ptr @.panic_msg.2, i64 45, ptr @.file.142, i64 9, ptr @.func, i64 4, i32 79) #5, !dbg !3264
  unreachable, !dbg !3264

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr10, align 8
  %23 = insertvalue %any undef, ptr %taddr10, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd11, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.142, i64 9, ptr @.func, i64 4, i32 79, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3264
  unreachable, !dbg !3264
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.io.WriteBuffer.str_view(ptr %0) #0 comdat !dbg !3268 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %varargslots9 = alloca [1 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr22 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !3271
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3271
  br i1 %2, label %panic, label %checkok, !dbg !3271

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3272, !DIExpression(), !3273)
  %3 = load ptr, ptr %self, align 8, !dbg !3274
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !3274
  %4 = load %"char[]", ptr %ptradd, align 8, !dbg !3274
  %5 = extractvalue %"char[]" %4, 0, !dbg !3274
  %6 = extractvalue %"char[]" %4, 1, !dbg !3275
  %gt = icmp ugt i64 0, %6, !dbg !3275
  %7 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3275
  br i1 %7, label %panic1, label %checkok4, !dbg !3275

checkok4:                                         ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !3276
  %ptradd5 = getelementptr inbounds i8, ptr %8, i64 32, !dbg !3276
  %9 = load i64, ptr %ptradd5, align 8, !dbg !3276
  %add = add i64 0, %9, !dbg !3276
  %gt6 = icmp ugt i64 0, %add, !dbg !3276
  %sub = sub i64 %add, 0, !dbg !3276
  %10 = call i1 @llvm.expect.i1(i1 %gt6, i1 false), !dbg !3276
  br i1 %10, label %panic7, label %checkok12, !dbg !3276

checkok12:                                        ; preds = %checkok4
  %lt = icmp ult i64 %6, %add, !dbg !3277
  %sub13 = sub i64 %add, 1, !dbg !3277
  %11 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3277
  br i1 %11, label %panic14, label %checkok21, !dbg !3277

checkok21:                                        ; preds = %checkok12
  %size = sub i64 %add, 0, !dbg !3277
  %12 = insertvalue %"char[]" undef, ptr %5, 0, !dbg !3277
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !3277
  store %"char[]" %13, ptr %taddr22, align 8
  %14 = load { ptr, i64 }, ptr %taddr22, align 8
  ret { ptr, i64 } %14

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3273
  call void %15(ptr @.panic_msg, i64 62, ptr @.file.142, i64 9, ptr @.func.136, i64 8, i32 83) #5, !dbg !3273
  unreachable, !dbg !3273

panic1:                                           ; preds = %checkok
  store i64 %6, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %18 = insertvalue %any undef, ptr %taddr2, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd3 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd3, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.142, i64 9, ptr @.func.136, i64 8, i32 85, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3277
  unreachable, !dbg !3277

panic7:                                           ; preds = %checkok4
  store i64 %sub, ptr %taddr8, align 8
  %21 = insertvalue %any undef, ptr %taddr8, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots9, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots9, 0
  %"$$temp10" = insertvalue %"any[]" %23, i64 1, 1
  store %"any[]" %"$$temp10", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.142, i64 9, ptr @.func.136, i64 8, i32 85, ptr byval(%"any[]") align 8 %indirectarg11) #5, !dbg !3277
  unreachable, !dbg !3277

panic14:                                          ; preds = %checkok12
  store i64 %sub13, ptr %taddr15, align 8
  %24 = insertvalue %any undef, ptr %taddr15, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr16, align 8
  %26 = insertvalue %any undef, ptr %taddr16, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %25, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %27, ptr %ptradd18, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.142, i64 9, ptr @.func.136, i64 8, i32 85, ptr byval(%"any[]") align 8 %indirectarg20) #5, !dbg !3277
  unreachable, !dbg !3277
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.WriteBuffer.close(ptr %0) #0 comdat !dbg !3278 {
entry:
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache3 = alloca ptr, align 8
  %.cachedtype4 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype4, align 8, !dbg !3281
  store ptr null, ptr %.cachedtype, align 8, !dbg !3281
  %1 = icmp eq ptr %0, null, !dbg !3281
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3281
  br i1 %2, label %panic, label %checkok, !dbg !3281

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3282, !DIExpression(), !3283)
  %3 = load ptr, ptr %self, align 8, !dbg !3284
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !3284
  %4 = load i64, ptr %ptradd, align 8, !dbg !3284
  %5 = inttoptr i64 %4 to ptr, !dbg !3284
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3281
  %6 = icmp eq ptr %5, %type, !dbg !3281
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !3281

cache_miss:                                       ; preds = %checkok
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !3281
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !3281
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !3281
  store ptr %8, ptr %.inlinecache, align 8, !dbg !3281
  store ptr %5, ptr %.cachedtype, align 8, !dbg !3281
  br label %9, !dbg !3281

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3281
  br label %9, !dbg !3281

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !3281
  %i2b = icmp ne ptr %fn_phi, null, !dbg !3281
  br i1 %i2b, label %if.then, label %if.exit, !dbg !3281

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !3285
  %ptradd2 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !3285
  %11 = load i64, ptr %ptradd2, align 8, !dbg !3285
  %12 = inttoptr i64 %11 to ptr, !dbg !3285
  %type5 = load ptr, ptr %.cachedtype4, align 8, !dbg !3281
  %13 = icmp eq ptr %12, %type5, !dbg !3281
  br i1 %13, label %cache_hit8, label %cache_miss6, !dbg !3281

cache_miss6:                                      ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !3281
  %14 = load ptr, ptr %ptradd7, align 8, !dbg !3281
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !3281
  store ptr %15, ptr %.inlinecache3, align 8, !dbg !3281
  store ptr %12, ptr %.cachedtype4, align 8, !dbg !3281
  br label %16, !dbg !3281

cache_hit8:                                       ; preds = %if.then
  %cache_hit_fn9 = load ptr, ptr %.inlinecache3, align 8, !dbg !3281
  br label %16, !dbg !3281

16:                                               ; preds = %cache_hit8, %cache_miss6
  %fn_phi10 = phi ptr [ %cache_hit_fn9, %cache_hit8 ], [ %15, %cache_miss6 ], !dbg !3281
  %17 = icmp eq ptr %fn_phi10, null, !dbg !3281
  br i1 %17, label %missing_function, label %match, !dbg !3281

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3285
  call void %18(ptr @.panic_msg.145, i64 42, ptr @.file.142, i64 9, ptr @.func.144, i64 5, i32 90) #5, !dbg !3285
  unreachable, !dbg !3285

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !3285
  %20 = call i64 %fn_phi10(ptr %19), !dbg !3285
  %not_err = icmp eq i64 %20, 0, !dbg !3285
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3285
  br i1 %21, label %after_check, label %assign_optional, !dbg !3285

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %reterr, align 8, !dbg !3285
  br label %err_retblock, !dbg !3285

after_check:                                      ; preds = %match
  ret i64 0, !dbg !3285

err_retblock:                                     ; preds = %assign_optional
  %22 = load i64, ptr %reterr, align 8, !dbg !3285
  ret i64 %22, !dbg !3285

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !3285

panic:                                            ; preds = %entry
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3283
  call void %23(ptr @.panic_msg, i64 62, ptr @.file.142, i64 9, ptr @.func.144, i64 5, i32 88) #5, !dbg !3283
  unreachable, !dbg !3283
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.WriteBuffer.flush(ptr %0) #0 comdat !dbg !3286 {
entry:
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %error_var2 = alloca i64, align 8
  %.inlinecache4 = alloca ptr, align 8
  %.cachedtype5 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype5, align 8, !dbg !3287
  store ptr null, ptr %.cachedtype, align 8, !dbg !3287
  %1 = icmp eq ptr %0, null, !dbg !3287
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3287
  br i1 %2, label %panic, label %checkok, !dbg !3287

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3288, !DIExpression(), !3289)
  %3 = load ptr, ptr %self, align 8, !dbg !3290
  %4 = call i64 @std.io.WriteBuffer.write_pending(ptr %3), !dbg !3290
  %not_err = icmp eq i64 %4, 0, !dbg !3290
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3290
  br i1 %5, label %after_check, label %assign_optional, !dbg !3290

assign_optional:                                  ; preds = %checkok
  store i64 %4, ptr %error_var, align 8, !dbg !3290
  br label %guard_block, !dbg !3290

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !3290

guard_block:                                      ; preds = %assign_optional
  %6 = load i64, ptr %error_var, align 8, !dbg !3290
  ret i64 %6, !dbg !3290

noerr_block:                                      ; preds = %after_check
  %7 = load ptr, ptr %self, align 8, !dbg !3291
  %ptradd = getelementptr inbounds i8, ptr %7, i64 8, !dbg !3291
  %8 = load i64, ptr %ptradd, align 8, !dbg !3291
  %9 = inttoptr i64 %8 to ptr, !dbg !3291
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3287
  %10 = icmp eq ptr %9, %type, !dbg !3287
  br i1 %10, label %cache_hit, label %cache_miss, !dbg !3287

cache_miss:                                       ; preds = %noerr_block
  %ptradd1 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !3287
  %11 = load ptr, ptr %ptradd1, align 8, !dbg !3287
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.flush"), !dbg !3287
  store ptr %12, ptr %.inlinecache, align 8, !dbg !3287
  store ptr %9, ptr %.cachedtype, align 8, !dbg !3287
  br label %13, !dbg !3287

cache_hit:                                        ; preds = %noerr_block
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3287
  br label %13, !dbg !3287

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ], !dbg !3287
  %i2b = icmp ne ptr %fn_phi, null, !dbg !3287
  br i1 %i2b, label %if.then, label %if.exit, !dbg !3287

if.then:                                          ; preds = %13
  %14 = load ptr, ptr %self, align 8, !dbg !3292
  %ptradd3 = getelementptr inbounds i8, ptr %14, i64 8, !dbg !3292
  %15 = load i64, ptr %ptradd3, align 8, !dbg !3292
  %16 = inttoptr i64 %15 to ptr, !dbg !3292
  %type6 = load ptr, ptr %.cachedtype5, align 8, !dbg !3287
  %17 = icmp eq ptr %16, %type6, !dbg !3287
  br i1 %17, label %cache_hit9, label %cache_miss7, !dbg !3287

cache_miss7:                                      ; preds = %if.then
  %ptradd8 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !3287
  %18 = load ptr, ptr %ptradd8, align 8, !dbg !3287
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.flush"), !dbg !3287
  store ptr %19, ptr %.inlinecache4, align 8, !dbg !3287
  store ptr %16, ptr %.cachedtype5, align 8, !dbg !3287
  br label %20, !dbg !3287

cache_hit9:                                       ; preds = %if.then
  %cache_hit_fn10 = load ptr, ptr %.inlinecache4, align 8, !dbg !3287
  br label %20, !dbg !3287

20:                                               ; preds = %cache_hit9, %cache_miss7
  %fn_phi11 = phi ptr [ %cache_hit_fn10, %cache_hit9 ], [ %19, %cache_miss7 ], !dbg !3287
  %21 = icmp eq ptr %fn_phi11, null, !dbg !3287
  br i1 %21, label %missing_function, label %match, !dbg !3287

missing_function:                                 ; preds = %20
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3292
  call void %22(ptr @.panic_msg.25, i64 42, ptr @.file.142, i64 9, ptr @.func.10, i64 5, i32 96) #5, !dbg !3292
  unreachable, !dbg !3292

match:                                            ; preds = %20
  %23 = load ptr, ptr %14, align 8, !dbg !3292
  %24 = call i64 %fn_phi11(ptr %23), !dbg !3292
  %not_err12 = icmp eq i64 %24, 0, !dbg !3292
  %25 = call i1 @llvm.expect.i1(i1 %not_err12, i1 true), !dbg !3292
  br i1 %25, label %after_check14, label %assign_optional13, !dbg !3292

assign_optional13:                                ; preds = %match
  store i64 %24, ptr %error_var2, align 8, !dbg !3292
  br label %guard_block15, !dbg !3292

after_check14:                                    ; preds = %match
  br label %noerr_block16, !dbg !3292

guard_block15:                                    ; preds = %assign_optional13
  %26 = load i64, ptr %error_var2, align 8, !dbg !3292
  ret i64 %26, !dbg !3292

noerr_block16:                                    ; preds = %after_check14
  br label %if.exit, !dbg !3292

if.exit:                                          ; preds = %noerr_block16, %13
  ret i64 0, !dbg !3292

panic:                                            ; preds = %entry
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3289
  call void %27(ptr @.panic_msg, i64 62, ptr @.file.142, i64 9, ptr @.func.10, i64 5, i32 93) #5, !dbg !3289
  unreachable, !dbg !3289
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.WriteBuffer.write(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !3293 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %varargslots15 = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %varargslots25 = alloca [1 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %reterr57 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %taddr68 = alloca i64, align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr78 = alloca i64, align 8
  %taddr79 = alloca i64, align 8
  %varargslots80 = alloca [2 x %any], align 16
  %indirectarg83 = alloca %"any[]", align 8
  %taddr90 = alloca i64, align 8
  %varargslots91 = alloca [1 x %any], align 16
  %indirectarg93 = alloca %"any[]", align 8
  %taddr98 = alloca i64, align 8
  %taddr99 = alloca i64, align 8
  %varargslots100 = alloca [2 x %any], align 16
  %indirectarg103 = alloca %"any[]", align 8
  %taddr108 = alloca i64, align 8
  %taddr109 = alloca i64, align 8
  %varargslots110 = alloca [2 x %any], align 16
  %indirectarg113 = alloca %"any[]", align 8
  %reterr117 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3296
  %4 = icmp eq ptr %1, null, !dbg !3296
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3296
  br i1 %5, label %panic, label %checkok, !dbg !3296

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3297, !DIExpression(), !3298)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !3299, !DIExpression(), !3300)
    #dbg_declare(ptr %n, !3301, !DIExpression(), !3302)
  %6 = load ptr, ptr %self, align 8, !dbg !3303
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !3303
  %ptradd2 = getelementptr inbounds i8, ptr %ptradd1, i64 8, !dbg !3303
  %7 = load i64, ptr %ptradd2, align 8, !dbg !3303
  %8 = load ptr, ptr %self, align 8, !dbg !3304
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 32, !dbg !3304
  %9 = load i64, ptr %ptradd3, align 8, !dbg !3304
  %sub = sub i64 %7, %9, !dbg !3303
  store i64 %sub, ptr %n, align 8, !dbg !3303
  %ptradd4 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3305
  %10 = load i64, ptr %ptradd4, align 8, !dbg !3305
  %11 = load i64, ptr %n, align 8, !dbg !3306
  %lt = icmp ult i64 %10, %11, !dbg !3305
  br i1 %lt, label %if.then, label %if.exit, !dbg !3305

if.then:                                          ; preds = %checkok
  %12 = load %"char[]", ptr %bytes, align 8, !dbg !3307
  %13 = extractvalue %"char[]" %12, 0, !dbg !3307
  %14 = extractvalue %"char[]" %12, 1, !dbg !3309
  %gt = icmp ugt i64 0, %14, !dbg !3309
  %15 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3309
  br i1 %15, label %panic5, label %checkok8, !dbg !3309

checkok8:                                         ; preds = %if.then
  %size = sub i64 %14, 0, !dbg !3307
  %16 = insertvalue %"char[]" undef, ptr %13, 0, !dbg !3307
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !3307
  %18 = load ptr, ptr %self, align 8, !dbg !3310
  %ptradd9 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !3310
  %19 = load %"char[]", ptr %ptradd9, align 8, !dbg !3310
  %20 = extractvalue %"char[]" %19, 0, !dbg !3310
  %21 = load ptr, ptr %self, align 8, !dbg !3311
  %ptradd10 = getelementptr inbounds i8, ptr %21, i64 32, !dbg !3311
  %22 = load i64, ptr %ptradd10, align 8, !dbg !3311
  %23 = extractvalue %"char[]" %19, 1, !dbg !3311
  %gt11 = icmp ugt i64 %22, %23, !dbg !3311
  %24 = call i1 @llvm.expect.i1(i1 %gt11, i1 false), !dbg !3311
  br i1 %24, label %panic12, label %checkok19, !dbg !3311

checkok19:                                        ; preds = %checkok8
  %ptradd20 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3312
  %25 = load i64, ptr %ptradd20, align 8, !dbg !3312
  %add = add i64 %22, %25, !dbg !3312
  %gt21 = icmp ugt i64 %22, %add, !dbg !3312
  %sub22 = sub i64 %add, %22, !dbg !3312
  %26 = call i1 @llvm.expect.i1(i1 %gt21, i1 false), !dbg !3312
  br i1 %26, label %panic23, label %checkok28, !dbg !3312

checkok28:                                        ; preds = %checkok19
  %lt29 = icmp ult i64 %23, %add, !dbg !3310
  %sub30 = sub i64 %add, 1, !dbg !3310
  %27 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !3310
  br i1 %27, label %panic31, label %checkok38, !dbg !3310

checkok38:                                        ; preds = %checkok28
  %size39 = sub i64 %add, %22, !dbg !3310
  %ptradd40 = getelementptr inbounds i8, ptr %20, i64 %22, !dbg !3310
  %28 = insertvalue %"char[]" undef, ptr %ptradd40, 0, !dbg !3310
  %29 = insertvalue %"char[]" %28, i64 %size39, 1, !dbg !3310
  %30 = extractvalue %"char[]" %29, 0, !dbg !3310
  %31 = extractvalue %"char[]" %17, 0, !dbg !3310
  %32 = extractvalue %"char[]" %17, 1, !dbg !3310
  %33 = extractvalue %"char[]" %29, 1, !dbg !3310
  %neq = icmp ne i64 %33, %32, !dbg !3310
  %34 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !3310
  br i1 %34, label %panic41, label %checkok48, !dbg !3310

checkok48:                                        ; preds = %checkok38
  %35 = mul i64 %32, 1, !dbg !3310
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %30, ptr align 1 %31, i64 %35, i1 false), !dbg !3310
  %36 = load ptr, ptr %self, align 8, !dbg !3313
  %ptradd49 = getelementptr inbounds i8, ptr %36, i64 32, !dbg !3313
  %37 = load i64, ptr %ptradd49, align 8, !dbg !3313
  %ptradd50 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3314
  %38 = load i64, ptr %ptradd50, align 8, !dbg !3314
  %add51 = add i64 %37, %38, !dbg !3313
  store i64 %add51, ptr %ptradd49, align 8, !dbg !3313
  %ptradd52 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3315
  %39 = load i64, ptr %ptradd52, align 8, !dbg !3315
  store i64 %39, ptr %0, align 8, !dbg !3315
  ret i64 0, !dbg !3315

if.exit:                                          ; preds = %checkok
  %40 = load ptr, ptr %self, align 8, !dbg !3316
  %41 = call i64 @std.io.WriteBuffer.write_pending(ptr %40), !dbg !3316
  %not_err = icmp eq i64 %41, 0, !dbg !3316
  %42 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3316
  br i1 %42, label %after_check, label %assign_optional, !dbg !3316

assign_optional:                                  ; preds = %if.exit
  store i64 %41, ptr %error_var, align 8, !dbg !3316
  br label %guard_block, !dbg !3316

after_check:                                      ; preds = %if.exit
  br label %noerr_block, !dbg !3316

guard_block:                                      ; preds = %assign_optional
  %43 = load i64, ptr %error_var, align 8, !dbg !3316
  ret i64 %43, !dbg !3316

noerr_block:                                      ; preds = %after_check
  %ptradd53 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3317
  %44 = load i64, ptr %ptradd53, align 8, !dbg !3317
  %45 = load ptr, ptr %self, align 8, !dbg !3318
  %ptradd54 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !3318
  %ptradd55 = getelementptr inbounds i8, ptr %ptradd54, i64 8, !dbg !3318
  %46 = load i64, ptr %ptradd55, align 8, !dbg !3318
  %ge = icmp uge i64 %44, %46, !dbg !3317
  br i1 %ge, label %if.then56, label %if.exit64, !dbg !3317

if.then56:                                        ; preds = %noerr_block
  %47 = load ptr, ptr %self, align 8, !dbg !3319
  %ptradd58 = getelementptr inbounds i8, ptr %47, i64 8, !dbg !3321
  %48 = load i64, ptr %ptradd58, align 8, !dbg !3321
  %49 = inttoptr i64 %48 to ptr, !dbg !3321
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3296
  %50 = icmp eq ptr %49, %type, !dbg !3296
  br i1 %50, label %cache_hit, label %cache_miss, !dbg !3296

cache_miss:                                       ; preds = %if.then56
  %ptradd59 = getelementptr inbounds i8, ptr %49, i64 16, !dbg !3296
  %51 = load ptr, ptr %ptradd59, align 8, !dbg !3296
  %52 = call ptr @.dyn_search(ptr %51, ptr @"$sel.write"), !dbg !3296
  store ptr %52, ptr %.inlinecache, align 8, !dbg !3296
  store ptr %49, ptr %.cachedtype, align 8, !dbg !3296
  br label %53, !dbg !3296

cache_hit:                                        ; preds = %if.then56
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3296
  br label %53, !dbg !3296

53:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %52, %cache_miss ], !dbg !3296
  %54 = icmp eq ptr %fn_phi, null, !dbg !3296
  br i1 %54, label %missing_function, label %match, !dbg !3296

missing_function:                                 ; preds = %53
  %55 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3319
  call void %55(ptr @.panic_msg.18, i64 42, ptr @.file.142, i64 9, ptr @.func.113, i64 5, i32 113) #5, !dbg !3319
  unreachable, !dbg !3319

match:                                            ; preds = %53
  %56 = load ptr, ptr %47, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd60 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd60, align 8
  %57 = call i64 %fn_phi(ptr %retparam, ptr %56, ptr %lo, i64 %hi), !dbg !3319
  %not_err61 = icmp eq i64 %57, 0, !dbg !3319
  %58 = call i1 @llvm.expect.i1(i1 %not_err61, i1 true), !dbg !3319
  br i1 %58, label %after_check63, label %assign_optional62, !dbg !3319

assign_optional62:                                ; preds = %match
  store i64 %57, ptr %reterr57, align 8, !dbg !3319
  br label %err_retblock, !dbg !3319

after_check63:                                    ; preds = %match
  %59 = load i64, ptr %retparam, align 8, !dbg !3319
  store i64 %59, ptr %0, align 8, !dbg !3319
  ret i64 0, !dbg !3319

err_retblock:                                     ; preds = %assign_optional62
  %60 = load i64, ptr %reterr57, align 8, !dbg !3319
  ret i64 %60, !dbg !3319

if.exit64:                                        ; preds = %noerr_block
  %61 = load %"char[]", ptr %bytes, align 8, !dbg !3322
  %62 = extractvalue %"char[]" %61, 0, !dbg !3322
  %63 = extractvalue %"char[]" %61, 1, !dbg !3323
  %gt65 = icmp ugt i64 0, %63, !dbg !3323
  %64 = call i1 @llvm.expect.i1(i1 %gt65, i1 false), !dbg !3323
  br i1 %64, label %panic66, label %checkok73, !dbg !3323

checkok73:                                        ; preds = %if.exit64
  %size74 = sub i64 %63, 0, !dbg !3322
  %65 = insertvalue %"char[]" undef, ptr %62, 0, !dbg !3322
  %66 = insertvalue %"char[]" %65, i64 %size74, 1, !dbg !3322
  %67 = load ptr, ptr %self, align 8, !dbg !3324
  %ptradd75 = getelementptr inbounds i8, ptr %67, i64 16, !dbg !3324
  %68 = load %"char[]", ptr %ptradd75, align 8, !dbg !3324
  %69 = extractvalue %"char[]" %68, 0, !dbg !3324
  %70 = extractvalue %"char[]" %68, 1, !dbg !3325
  %gt76 = icmp ugt i64 0, %70, !dbg !3325
  %71 = call i1 @llvm.expect.i1(i1 %gt76, i1 false), !dbg !3325
  br i1 %71, label %panic77, label %checkok84, !dbg !3325

checkok84:                                        ; preds = %checkok73
  %ptradd85 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3326
  %72 = load i64, ptr %ptradd85, align 8, !dbg !3326
  %add86 = add i64 0, %72, !dbg !3326
  %gt87 = icmp ugt i64 0, %add86, !dbg !3326
  %sub88 = sub i64 %add86, 0, !dbg !3326
  %73 = call i1 @llvm.expect.i1(i1 %gt87, i1 false), !dbg !3326
  br i1 %73, label %panic89, label %checkok94, !dbg !3326

checkok94:                                        ; preds = %checkok84
  %lt95 = icmp ult i64 %70, %add86, !dbg !3324
  %sub96 = sub i64 %add86, 1, !dbg !3324
  %74 = call i1 @llvm.expect.i1(i1 %lt95, i1 false), !dbg !3324
  br i1 %74, label %panic97, label %checkok104, !dbg !3324

checkok104:                                       ; preds = %checkok94
  %size105 = sub i64 %add86, 0, !dbg !3324
  %75 = insertvalue %"char[]" undef, ptr %69, 0, !dbg !3324
  %76 = insertvalue %"char[]" %75, i64 %size105, 1, !dbg !3324
  %77 = extractvalue %"char[]" %76, 0, !dbg !3324
  %78 = extractvalue %"char[]" %66, 0, !dbg !3324
  %79 = extractvalue %"char[]" %66, 1, !dbg !3324
  %80 = extractvalue %"char[]" %76, 1, !dbg !3324
  %neq106 = icmp ne i64 %80, %79, !dbg !3324
  %81 = call i1 @llvm.expect.i1(i1 %neq106, i1 false), !dbg !3324
  br i1 %81, label %panic107, label %checkok114, !dbg !3324

checkok114:                                       ; preds = %checkok104
  %82 = mul i64 %79, 1, !dbg !3324
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %77, ptr align 1 %78, i64 %82, i1 false), !dbg !3324
  %83 = load ptr, ptr %self, align 8, !dbg !3327
  %ptradd115 = getelementptr inbounds i8, ptr %83, i64 32, !dbg !3327
  %ptradd116 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3328
  %84 = load i64, ptr %ptradd116, align 8, !dbg !3328
  store i64 %84, ptr %ptradd115, align 8, !dbg !3328
  %ptradd118 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3329
  %85 = load i64, ptr %ptradd118, align 8, !dbg !3329
  store i64 %85, ptr %0, align 8, !dbg !3329
  ret i64 0, !dbg !3329

panic:                                            ; preds = %entry
  %86 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3298
  call void %86(ptr @.panic_msg, i64 62, ptr @.file.142, i64 9, ptr @.func.113, i64 5, i32 99) #5, !dbg !3298
  unreachable, !dbg !3298

panic5:                                           ; preds = %if.then
  store i64 %14, ptr %taddr, align 8
  %87 = insertvalue %any undef, ptr %taddr, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %89 = insertvalue %any undef, ptr %taddr6, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %88, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %90, ptr %ptradd7, align 16
  %91 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %91, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.142, i64 9, ptr @.func.113, i64 5, i32 105, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3307
  unreachable, !dbg !3307

panic12:                                          ; preds = %checkok8
  store i64 %23, ptr %taddr13, align 8
  %92 = insertvalue %any undef, ptr %taddr13, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr14, align 8
  %94 = insertvalue %any undef, ptr %taddr14, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %93, ptr %varargslots15, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots15, i64 16
  store %any %95, ptr %ptradd16, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots15, 0
  %"$$temp17" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp17", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.142, i64 9, ptr @.func.113, i64 5, i32 105, ptr byval(%"any[]") align 8 %indirectarg18) #5, !dbg !3310
  unreachable, !dbg !3310

panic23:                                          ; preds = %checkok19
  store i64 %sub22, ptr %taddr24, align 8
  %97 = insertvalue %any undef, ptr %taddr24, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %98, ptr %varargslots25, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots25, 0
  %"$$temp26" = insertvalue %"any[]" %99, i64 1, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.142, i64 9, ptr @.func.113, i64 5, i32 105, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !3310
  unreachable, !dbg !3310

panic31:                                          ; preds = %checkok28
  store i64 %sub30, ptr %taddr32, align 8
  %100 = insertvalue %any undef, ptr %taddr32, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr33, align 8
  %102 = insertvalue %any undef, ptr %taddr33, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %103, ptr %ptradd35, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.142, i64 9, ptr @.func.113, i64 5, i32 105, ptr byval(%"any[]") align 8 %indirectarg37) #5, !dbg !3310
  unreachable, !dbg !3310

panic41:                                          ; preds = %checkok38
  store i64 %33, ptr %taddr42, align 8
  %105 = insertvalue %any undef, ptr %taddr42, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr43, align 8
  %107 = insertvalue %any undef, ptr %taddr43, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %108, ptr %ptradd45, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.108, i64 38, ptr @.file.142, i64 9, ptr @.func.113, i64 5, i32 105, ptr byval(%"any[]") align 8 %indirectarg47) #5, !dbg !3310
  unreachable, !dbg !3310

panic66:                                          ; preds = %if.exit64
  store i64 %63, ptr %taddr67, align 8
  %110 = insertvalue %any undef, ptr %taddr67, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr68, align 8
  %112 = insertvalue %any undef, ptr %taddr68, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %111, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %113, ptr %ptradd70, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.142, i64 9, ptr @.func.113, i64 5, i32 116, ptr byval(%"any[]") align 8 %indirectarg72) #5, !dbg !3322
  unreachable, !dbg !3322

panic77:                                          ; preds = %checkok73
  store i64 %70, ptr %taddr78, align 8
  %115 = insertvalue %any undef, ptr %taddr78, 0
  %116 = insertvalue %any %115, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr79, align 8
  %117 = insertvalue %any undef, ptr %taddr79, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %116, ptr %varargslots80, align 16
  %ptradd81 = getelementptr inbounds i8, ptr %varargslots80, i64 16
  store %any %118, ptr %ptradd81, align 16
  %119 = insertvalue %"any[]" undef, ptr %varargslots80, 0
  %"$$temp82" = insertvalue %"any[]" %119, i64 2, 1
  store %"any[]" %"$$temp82", ptr %indirectarg83, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.142, i64 9, ptr @.func.113, i64 5, i32 116, ptr byval(%"any[]") align 8 %indirectarg83) #5, !dbg !3324
  unreachable, !dbg !3324

panic89:                                          ; preds = %checkok84
  store i64 %sub88, ptr %taddr90, align 8
  %120 = insertvalue %any undef, ptr %taddr90, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %121, ptr %varargslots91, align 16
  %122 = insertvalue %"any[]" undef, ptr %varargslots91, 0
  %"$$temp92" = insertvalue %"any[]" %122, i64 1, 1
  store %"any[]" %"$$temp92", ptr %indirectarg93, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.142, i64 9, ptr @.func.113, i64 5, i32 116, ptr byval(%"any[]") align 8 %indirectarg93) #5, !dbg !3324
  unreachable, !dbg !3324

panic97:                                          ; preds = %checkok94
  store i64 %sub96, ptr %taddr98, align 8
  %123 = insertvalue %any undef, ptr %taddr98, 0
  %124 = insertvalue %any %123, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %70, ptr %taddr99, align 8
  %125 = insertvalue %any undef, ptr %taddr99, 0
  %126 = insertvalue %any %125, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %124, ptr %varargslots100, align 16
  %ptradd101 = getelementptr inbounds i8, ptr %varargslots100, i64 16
  store %any %126, ptr %ptradd101, align 16
  %127 = insertvalue %"any[]" undef, ptr %varargslots100, 0
  %"$$temp102" = insertvalue %"any[]" %127, i64 2, 1
  store %"any[]" %"$$temp102", ptr %indirectarg103, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.142, i64 9, ptr @.func.113, i64 5, i32 116, ptr byval(%"any[]") align 8 %indirectarg103) #5, !dbg !3324
  unreachable, !dbg !3324

panic107:                                         ; preds = %checkok104
  store i64 %80, ptr %taddr108, align 8
  %128 = insertvalue %any undef, ptr %taddr108, 0
  %129 = insertvalue %any %128, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %79, ptr %taddr109, align 8
  %130 = insertvalue %any undef, ptr %taddr109, 0
  %131 = insertvalue %any %130, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %129, ptr %varargslots110, align 16
  %ptradd111 = getelementptr inbounds i8, ptr %varargslots110, i64 16
  store %any %131, ptr %ptradd111, align 16
  %132 = insertvalue %"any[]" undef, ptr %varargslots110, 0
  %"$$temp112" = insertvalue %"any[]" %132, i64 2, 1
  store %"any[]" %"$$temp112", ptr %indirectarg113, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.108, i64 38, ptr @.file.142, i64 9, ptr @.func.113, i64 5, i32 116, ptr byval(%"any[]") align 8 %indirectarg113) #5, !dbg !3324
  unreachable, !dbg !3324
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.WriteBuffer.write_byte(ptr %0, i8 zeroext %1) #0 comdat !dbg !3330 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %n = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3333
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3333
  br i1 %3, label %panic, label %checkok, !dbg !3333

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3334, !DIExpression(), !3335)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !3336, !DIExpression(), !3337)
    #dbg_declare(ptr %n, !3338, !DIExpression(), !3339)
  %4 = load ptr, ptr %self, align 8, !dbg !3340
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !3340
  %ptradd1 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !3340
  %5 = load i64, ptr %ptradd1, align 8, !dbg !3340
  %6 = load ptr, ptr %self, align 8, !dbg !3341
  %ptradd2 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !3341
  %7 = load i64, ptr %ptradd2, align 8, !dbg !3341
  %sub = sub i64 %5, %7, !dbg !3340
  store i64 %sub, ptr %n, align 8, !dbg !3340
  %8 = load i64, ptr %n, align 8, !dbg !3342
  %eq = icmp eq i64 0, %8, !dbg !3342
  br i1 %eq, label %if.then, label %if.exit, !dbg !3342

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !3343
  %10 = call i64 @std.io.WriteBuffer.write_pending(ptr %9), !dbg !3343
  %not_err = icmp eq i64 %10, 0, !dbg !3343
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3343
  br i1 %11, label %after_check, label %assign_optional, !dbg !3343

assign_optional:                                  ; preds = %if.then
  store i64 %10, ptr %error_var, align 8, !dbg !3343
  br label %guard_block, !dbg !3343

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !3343

guard_block:                                      ; preds = %assign_optional
  %12 = load i64, ptr %error_var, align 8, !dbg !3343
  ret i64 %12, !dbg !3343

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !3343

if.exit:                                          ; preds = %noerr_block, %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !3345
  %ptradd3 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !3345
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !3345
  %14 = load i64, ptr %ptradd4, align 8, !dbg !3345
  %15 = load ptr, ptr %ptradd3, align 8, !dbg !3345
  %16 = load ptr, ptr %self, align 8, !dbg !3346
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 32, !dbg !3346
  %17 = load i64, ptr %ptradd5, align 8, !dbg !3346
  %ge = icmp uge i64 %17, %14, !dbg !3346
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3346
  br i1 %18, label %panic6, label %checkok9, !dbg !3346

checkok9:                                         ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %15, i64 %17, !dbg !3346
  %19 = load i8, ptr %c, align 1, !dbg !3347
  store i8 %19, ptr %ptradd10, align 1, !dbg !3347
  %20 = load ptr, ptr %self, align 8, !dbg !3348
  %ptradd11 = getelementptr inbounds i8, ptr %20, i64 32, !dbg !3348
  %21 = load i64, ptr %ptradd11, align 8, !dbg !3348
  %add = add i64 %21, 1, !dbg !3348
  store i64 %add, ptr %ptradd11, align 8, !dbg !3348
  ret i64 0, !dbg !3348

panic:                                            ; preds = %entry
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3335
  call void %22(ptr @.panic_msg, i64 62, ptr @.file.142, i64 9, ptr @.func.115, i64 10, i32 121) #5, !dbg !3335
  unreachable, !dbg !3335

panic6:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr7, align 8
  %25 = insertvalue %any undef, ptr %taddr7, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %24, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd8, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.142, i64 9, ptr @.func.115, i64 10, i32 128, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3346
  unreachable, !dbg !3346
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.WriteBuffer.write_pending(ptr %0) #0 !dbg !3349 {
entry:
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr9 = alloca i64, align 8
  %varargslots10 = alloca [1 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3350
  %1 = icmp eq ptr %0, null, !dbg !3350
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3350
  br i1 %2, label %panic, label %checkok, !dbg !3350

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3351, !DIExpression(), !3352)
  %3 = load ptr, ptr %self, align 8, !dbg !3353
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !3353
  %4 = load i64, ptr %ptradd, align 8, !dbg !3353
  %5 = load ptr, ptr %self, align 8, !dbg !3354
  %6 = load ptr, ptr %self, align 8, !dbg !3355
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !3355
  %7 = load %"char[]", ptr %ptradd1, align 8, !dbg !3355
  %8 = extractvalue %"char[]" %7, 0, !dbg !3355
  %9 = extractvalue %"char[]" %7, 1, !dbg !3356
  %gt = icmp ugt i64 0, %9, !dbg !3356
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3356
  br i1 %10, label %panic2, label %checkok5, !dbg !3356

checkok5:                                         ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !3357
  %ptradd6 = getelementptr inbounds i8, ptr %11, i64 32, !dbg !3357
  %12 = load i64, ptr %ptradd6, align 8, !dbg !3357
  %add = add i64 0, %12, !dbg !3357
  %gt7 = icmp ugt i64 0, %add, !dbg !3357
  %sub = sub i64 %add, 0, !dbg !3357
  %13 = call i1 @llvm.expect.i1(i1 %gt7, i1 false), !dbg !3357
  br i1 %13, label %panic8, label %checkok13, !dbg !3357

checkok13:                                        ; preds = %checkok5
  %lt = icmp ult i64 %9, %add, !dbg !3355
  %sub14 = sub i64 %add, 1, !dbg !3355
  %14 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3355
  br i1 %14, label %panic15, label %checkok22, !dbg !3355

checkok22:                                        ; preds = %checkok13
  %size = sub i64 %add, 0, !dbg !3355
  %15 = insertvalue %"char[]" undef, ptr %8, 0, !dbg !3355
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !3355
  %ptradd23 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3355
  %17 = load i64, ptr %ptradd23, align 8, !dbg !3355
  %18 = inttoptr i64 %17 to ptr, !dbg !3355
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3350
  %19 = icmp eq ptr %18, %type, !dbg !3350
  br i1 %19, label %cache_hit, label %cache_miss, !dbg !3350

cache_miss:                                       ; preds = %checkok22
  %ptradd24 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !3350
  %20 = load ptr, ptr %ptradd24, align 8, !dbg !3350
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.write"), !dbg !3350
  store ptr %21, ptr %.inlinecache, align 8, !dbg !3350
  store ptr %18, ptr %.cachedtype, align 8, !dbg !3350
  br label %22, !dbg !3350

cache_hit:                                        ; preds = %checkok22
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3350
  br label %22, !dbg !3350

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ], !dbg !3350
  %23 = icmp eq ptr %fn_phi, null, !dbg !3350
  br i1 %23, label %missing_function, label %match, !dbg !3350

missing_function:                                 ; preds = %22
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3354
  call void %24(ptr @.panic_msg.18, i64 42, ptr @.file.142, i64 9, ptr @.func.148, i64 13, i32 134) #5, !dbg !3354
  unreachable, !dbg !3354

match:                                            ; preds = %22
  %25 = load ptr, ptr %5, align 8
  %26 = call i64 %fn_phi(ptr %retparam, ptr %25, ptr %8, i64 %size), !dbg !3354
  %not_err = icmp eq i64 %26, 0, !dbg !3354
  %27 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3354
  br i1 %27, label %after_check, label %assign_optional, !dbg !3354

assign_optional:                                  ; preds = %match
  store i64 %26, ptr %error_var, align 8, !dbg !3354
  br label %guard_block, !dbg !3354

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !3354

guard_block:                                      ; preds = %assign_optional
  %28 = load i64, ptr %error_var, align 8, !dbg !3354
  ret i64 %28, !dbg !3354

noerr_block:                                      ; preds = %after_check
  %29 = load i64, ptr %retparam, align 8, !dbg !3354
  %sub25 = sub i64 %4, %29, !dbg !3353
  store i64 %sub25, ptr %ptradd, align 8, !dbg !3353
  %30 = load ptr, ptr %self, align 8, !dbg !3358
  %ptradd26 = getelementptr inbounds i8, ptr %30, i64 32, !dbg !3358
  %31 = load i64, ptr %ptradd26, align 8, !dbg !3358
  %neq = icmp ne i64 0, %31, !dbg !3358
  br i1 %neq, label %if.then, label %if.exit, !dbg !3358

if.then:                                          ; preds = %noerr_block
  ret i64 ptrtoint (ptr @std.io.INCOMPLETE_WRITE to i64), !dbg !3359

if.exit:                                          ; preds = %noerr_block
  ret i64 0, !dbg !3359

panic:                                            ; preds = %entry
  %32 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3352
  call void %32(ptr @.panic_msg, i64 62, ptr @.file.142, i64 9, ptr @.func.148, i64 13, i32 132) #5, !dbg !3352
  unreachable, !dbg !3352

panic2:                                           ; preds = %checkok
  store i64 %9, ptr %taddr, align 8
  %33 = insertvalue %any undef, ptr %taddr, 0
  %34 = insertvalue %any %33, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr3, align 8
  %35 = insertvalue %any undef, ptr %taddr3, 0
  %36 = insertvalue %any %35, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %34, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %36, ptr %ptradd4, align 16
  %37 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %37, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.142, i64 9, ptr @.func.148, i64 13, i32 134, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3355
  unreachable, !dbg !3355

panic8:                                           ; preds = %checkok5
  store i64 %sub, ptr %taddr9, align 8
  %38 = insertvalue %any undef, ptr %taddr9, 0
  %39 = insertvalue %any %38, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %39, ptr %varargslots10, align 16
  %40 = insertvalue %"any[]" undef, ptr %varargslots10, 0
  %"$$temp11" = insertvalue %"any[]" %40, i64 1, 1
  store %"any[]" %"$$temp11", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.142, i64 9, ptr @.func.148, i64 13, i32 134, ptr byval(%"any[]") align 8 %indirectarg12) #5, !dbg !3355
  unreachable, !dbg !3355

panic15:                                          ; preds = %checkok13
  store i64 %sub14, ptr %taddr16, align 8
  %41 = insertvalue %any undef, ptr %taddr16, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr17, align 8
  %43 = insertvalue %any undef, ptr %taddr17, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %42, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %44, ptr %ptradd19, align 16
  %45 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %45, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.142, i64 9, ptr @.func.148, i64 13, i32 134, ptr byval(%"any[]") align 8 %indirectarg21) #5, !dbg !3355
  unreachable, !dbg !3355
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.TeeReader.init(ptr %0, i64 %1, ptr %2, i64 %3, ptr %4) #0 comdat !dbg !3360 {
entry:
  %self = alloca ptr, align 8
  %r = alloca %any, align 8
  %w = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %r8 = alloca %any, align 8
  %w9 = alloca %any, align 8
  %literal = alloca %TeeReader, align 8
  %5 = icmp eq ptr %0, null, !dbg !3369
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !3369
  br i1 %6, label %panic, label %checkok, !dbg !3369

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3370, !DIExpression(), !3371)
  store i64 %1, ptr %r, align 8
  %ptradd = getelementptr inbounds i8, ptr %r, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %r, !3372, !DIExpression(), !3373)
  store i64 %3, ptr %w, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %w, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %w, !3374, !DIExpression(), !3375)
  %7 = load ptr, ptr %self, align 8, !dbg !3376
  %checknull = icmp eq ptr %7, null, !dbg !3376
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3376
  br i1 %8, label %panic2, label %checkok3, !dbg !3376

checkok3:                                         ; preds = %checkok
  %9 = ptrtoint ptr %7 to i64, !dbg !3376
  %10 = urem i64 %9, 8, !dbg !3376
  %11 = icmp ne i64 %10, 0, !dbg !3376
  %12 = call i1 @llvm.expect.i1(i1 %11, i1 false), !dbg !3376
  br i1 %12, label %panic4, label %checkok7, !dbg !3376

checkok7:                                         ; preds = %checkok3
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %r8, ptr align 8 %r, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %w9, ptr align 8 %w, i32 16, i1 false)
  %13 = load ptr, ptr %r8, align 8, !dbg !3377
  %neq = icmp ne ptr %13, null, !dbg !3377
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !3377

assert_fail:                                      ; preds = %checkok7
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3377
  call void %14(ptr @.panic_msg.119, i64 37, ptr @.file.149, i64 12, ptr @.func, i64 4, i32 15) #5, !dbg !3377
  unreachable, !dbg !3377

assert_ok:                                        ; preds = %checkok7
  %15 = load ptr, ptr %w9, align 8, !dbg !3381
  %neq10 = icmp ne ptr %15, null, !dbg !3381
  br i1 %neq10, label %assert_ok12, label %assert_fail11, !dbg !3381

assert_fail11:                                    ; preds = %assert_ok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3381
  call void %16(ptr @.panic_msg.119, i64 37, ptr @.file.149, i64 12, ptr @.func, i64 4, i32 15) #5, !dbg !3381
  unreachable, !dbg !3381

assert_ok12:                                      ; preds = %assert_ok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %r8, i32 16, i1 false), !dbg !3382
  %ptradd13 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !3382
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd13, ptr align 8 %w9, i32 16, i1 false), !dbg !3383
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %7, ptr align 8 %literal, i32 32, i1 false), !dbg !3383
  %17 = load ptr, ptr %self, align 8, !dbg !3384
  ret ptr %17, !dbg !3384

panic:                                            ; preds = %entry
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3371
  call void %18(ptr @.panic_msg, i64 62, ptr @.file.149, i64 12, ptr @.func, i64 4, i32 22) #5, !dbg !3371
  unreachable, !dbg !3371

panic2:                                           ; preds = %checkok
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3376
  call void %19(ptr @.panic_msg.2, i64 45, ptr @.file.149, i64 12, ptr @.func, i64 4, i32 24) #5, !dbg !3376
  unreachable, !dbg !3376

panic4:                                           ; preds = %checkok3
  store i64 8, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr5, align 8
  %22 = insertvalue %any undef, ptr %taddr5, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %21, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd6, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.149, i64 12, ptr @.func, i64 4, i32 24, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3376
  unreachable, !dbg !3376
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.TeeReader.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !3385 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %nr = alloca i64, align 8
  %nw = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %error_var4 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %varargslots13 = alloca [1 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %.inlinecache27 = alloca ptr, align 8
  %.cachedtype28 = alloca ptr, align 8
  %retparam37 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype28, align 8, !dbg !3388
  store ptr null, ptr %.cachedtype, align 8, !dbg !3388
  %4 = icmp eq ptr %1, null, !dbg !3388
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3388
  br i1 %5, label %panic, label %checkok, !dbg !3388

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3389, !DIExpression(), !3390)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !3391, !DIExpression(), !3392)
    #dbg_declare(ptr %nr, !3393, !DIExpression(), !3394)
  store i64 0, ptr %nr, align 8, !dbg !3394
    #dbg_declare(ptr %nw, !3395, !DIExpression(), !3396)
  store i64 0, ptr %nw, align 8, !dbg !3396
  %6 = load ptr, ptr %self, align 8, !dbg !3397
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !3398
  %7 = load i64, ptr %ptradd1, align 8, !dbg !3398
  %8 = inttoptr i64 %7 to ptr, !dbg !3398
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3388
  %9 = icmp eq ptr %8, %type, !dbg !3388
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !3388

cache_miss:                                       ; preds = %checkok
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !3388
  %10 = load ptr, ptr %ptradd2, align 8, !dbg !3388
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read"), !dbg !3388
  store ptr %11, ptr %.inlinecache, align 8, !dbg !3388
  store ptr %8, ptr %.cachedtype, align 8, !dbg !3388
  br label %12, !dbg !3388

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3388
  br label %12, !dbg !3388

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !3388
  %13 = icmp eq ptr %fn_phi, null, !dbg !3388
  br i1 %13, label %missing_function, label %match, !dbg !3388

missing_function:                                 ; preds = %12
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3397
  call void %14(ptr @.panic_msg.39, i64 41, ptr @.file.149, i64 12, ptr @.func.118, i64 4, i32 31) #5, !dbg !3397
  unreachable, !dbg !3397

match:                                            ; preds = %12
  %15 = load ptr, ptr %6, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd3, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %15, ptr %lo, i64 %hi), !dbg !3397
  %not_err = icmp eq i64 %16, 0, !dbg !3397
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3397
  br i1 %17, label %after_check, label %assign_optional, !dbg !3397

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %error_var, align 8, !dbg !3397
  br label %guard_block, !dbg !3397

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !3397

guard_block:                                      ; preds = %assign_optional
  %18 = load i64, ptr %error_var, align 8, !dbg !3397
  ret i64 %18, !dbg !3397

noerr_block:                                      ; preds = %after_check
  %19 = load i64, ptr %retparam, align 8, !dbg !3397
  store i64 %19, ptr %nr, align 8, !dbg !3397
  %20 = load ptr, ptr %self, align 8, !dbg !3399
  %ptradd5 = getelementptr inbounds i8, ptr %20, i64 16, !dbg !3399
  %21 = load %"char[]", ptr %bytes, align 8, !dbg !3400
  %22 = extractvalue %"char[]" %21, 0, !dbg !3400
  %23 = extractvalue %"char[]" %21, 1, !dbg !3401
  %gt = icmp ugt i64 0, %23, !dbg !3401
  %24 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3401
  br i1 %24, label %panic6, label %checkok9, !dbg !3401

checkok9:                                         ; preds = %noerr_block
  %25 = load i64, ptr %nr, align 8, !dbg !3402
  %add = add i64 0, %25, !dbg !3402
  %gt10 = icmp ugt i64 0, %add, !dbg !3402
  %sub = sub i64 %add, 0, !dbg !3402
  %26 = call i1 @llvm.expect.i1(i1 %gt10, i1 false), !dbg !3402
  br i1 %26, label %panic11, label %checkok16, !dbg !3402

checkok16:                                        ; preds = %checkok9
  %lt = icmp ult i64 %23, %add, !dbg !3400
  %sub17 = sub i64 %add, 1, !dbg !3400
  %27 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3400
  br i1 %27, label %panic18, label %checkok25, !dbg !3400

checkok25:                                        ; preds = %checkok16
  %size = sub i64 %add, 0, !dbg !3400
  %28 = insertvalue %"char[]" undef, ptr %22, 0, !dbg !3400
  %29 = insertvalue %"char[]" %28, i64 %size, 1, !dbg !3400
  %ptradd26 = getelementptr inbounds i8, ptr %ptradd5, i64 8, !dbg !3400
  %30 = load i64, ptr %ptradd26, align 8, !dbg !3400
  %31 = inttoptr i64 %30 to ptr, !dbg !3400
  %type29 = load ptr, ptr %.cachedtype28, align 8, !dbg !3388
  %32 = icmp eq ptr %31, %type29, !dbg !3388
  br i1 %32, label %cache_hit32, label %cache_miss30, !dbg !3388

cache_miss30:                                     ; preds = %checkok25
  %ptradd31 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !3388
  %33 = load ptr, ptr %ptradd31, align 8, !dbg !3388
  %34 = call ptr @.dyn_search(ptr %33, ptr @"$sel.write"), !dbg !3388
  store ptr %34, ptr %.inlinecache27, align 8, !dbg !3388
  store ptr %31, ptr %.cachedtype28, align 8, !dbg !3388
  br label %35, !dbg !3388

cache_hit32:                                      ; preds = %checkok25
  %cache_hit_fn33 = load ptr, ptr %.inlinecache27, align 8, !dbg !3388
  br label %35, !dbg !3388

35:                                               ; preds = %cache_hit32, %cache_miss30
  %fn_phi34 = phi ptr [ %cache_hit_fn33, %cache_hit32 ], [ %34, %cache_miss30 ], !dbg !3388
  %36 = icmp eq ptr %fn_phi34, null, !dbg !3388
  br i1 %36, label %missing_function35, label %match36, !dbg !3388

missing_function35:                               ; preds = %35
  %37 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3399
  call void %37(ptr @.panic_msg.18, i64 42, ptr @.file.149, i64 12, ptr @.func.118, i64 4, i32 32) #5, !dbg !3399
  unreachable, !dbg !3399

match36:                                          ; preds = %35
  %38 = load ptr, ptr %ptradd5, align 8
  %39 = call i64 %fn_phi34(ptr %retparam37, ptr %38, ptr %22, i64 %size), !dbg !3399
  %not_err38 = icmp eq i64 %39, 0, !dbg !3399
  %40 = call i1 @llvm.expect.i1(i1 %not_err38, i1 true), !dbg !3399
  br i1 %40, label %after_check40, label %assign_optional39, !dbg !3399

assign_optional39:                                ; preds = %match36
  store i64 %39, ptr %error_var4, align 8, !dbg !3399
  br label %guard_block41, !dbg !3399

after_check40:                                    ; preds = %match36
  br label %noerr_block42, !dbg !3399

guard_block41:                                    ; preds = %assign_optional39
  %41 = load i64, ptr %error_var4, align 8, !dbg !3399
  ret i64 %41, !dbg !3399

noerr_block42:                                    ; preds = %after_check40
  %42 = load i64, ptr %retparam37, align 8, !dbg !3399
  store i64 %42, ptr %nw, align 8, !dbg !3399
  %43 = load i64, ptr %nr, align 8, !dbg !3403
  %44 = load i64, ptr %nw, align 8, !dbg !3404
  %neq = icmp ne i64 %43, %44, !dbg !3403
  br i1 %neq, label %if.then, label %if.exit, !dbg !3403

if.then:                                          ; preds = %noerr_block42
  ret i64 ptrtoint (ptr @std.io.GENERAL_ERROR to i64), !dbg !3405

if.exit:                                          ; preds = %noerr_block42
  %45 = load i64, ptr %nr, align 8, !dbg !3406
  store i64 %45, ptr %0, align 8, !dbg !3406
  ret i64 0, !dbg !3406

panic:                                            ; preds = %entry
  %46 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3390
  call void %46(ptr @.panic_msg, i64 62, ptr @.file.149, i64 12, ptr @.func.118, i64 4, i32 28) #5, !dbg !3390
  unreachable, !dbg !3390

panic6:                                           ; preds = %noerr_block
  store i64 %23, ptr %taddr, align 8
  %47 = insertvalue %any undef, ptr %taddr, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %49 = insertvalue %any undef, ptr %taddr7, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %48, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %50, ptr %ptradd8, align 16
  %51 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %51, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.149, i64 12, ptr @.func.118, i64 4, i32 32, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3400
  unreachable, !dbg !3400

panic11:                                          ; preds = %checkok9
  store i64 %sub, ptr %taddr12, align 8
  %52 = insertvalue %any undef, ptr %taddr12, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots13, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp14" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.149, i64 12, ptr @.func.118, i64 4, i32 32, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !3400
  unreachable, !dbg !3400

panic18:                                          ; preds = %checkok16
  store i64 %sub17, ptr %taddr19, align 8
  %55 = insertvalue %any undef, ptr %taddr19, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr20, align 8
  %57 = insertvalue %any undef, ptr %taddr20, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %58, ptr %ptradd22, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.149, i64 12, ptr @.func.118, i64 4, i32 32, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !3400
  unreachable, !dbg !3400
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.TeeReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !3407 {
entry:
  %self = alloca ptr, align 8
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !3410
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3410
  br i1 %3, label %panic, label %checkok, !dbg !3410

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3411, !DIExpression(), !3412)
    #dbg_declare(ptr %data, !3413, !DIExpression(), !3414)
  store i8 0, ptr %data, align 1, !dbg !3414
  %4 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !3415
  %5 = insertvalue %"char[]" %4, i64 1, 1, !dbg !3415
  %6 = load ptr, ptr %self, align 8
  %7 = call i64 @std.io.TeeReader.read(ptr %retparam, ptr %6, ptr %data, i64 1), !dbg !3416
  %not_err = icmp eq i64 %7, 0, !dbg !3416
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3416
  br i1 %8, label %after_check, label %assign_optional, !dbg !3416

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !3416
  br label %guard_block, !dbg !3416

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !3416

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !3416
  ret i64 %9, !dbg !3416

noerr_block:                                      ; preds = %after_check
  %10 = load i8, ptr %data, align 1, !dbg !3417
  store i8 %10, ptr %0, align 1, !dbg !3417
  ret i64 0, !dbg !3417

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3412
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.149, i64 12, ptr @.func.123, i64 9, i32 37) #5, !dbg !3412
  unreachable, !dbg !3412
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.LimitReader.init(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !3418 {
entry:
  %self = alloca ptr, align 8
  %wrapped_stream = alloca %any, align 8
  %limit = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %LimitReader, align 8
  %4 = icmp eq ptr %0, null, !dbg !3427
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3427
  br i1 %5, label %panic, label %checkok, !dbg !3427

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3428, !DIExpression(), !3429)
  store i64 %1, ptr %wrapped_stream, align 8
  %ptradd = getelementptr inbounds i8, ptr %wrapped_stream, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %wrapped_stream, !3430, !DIExpression(), !3431)
  store i64 %3, ptr %limit, align 8
    #dbg_declare(ptr %limit, !3432, !DIExpression(), !3433)
  %6 = load ptr, ptr %self, align 8, !dbg !3434
  %checknull = icmp eq ptr %6, null, !dbg !3434
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3434
  br i1 %7, label %panic1, label %checkok2, !dbg !3434

checkok2:                                         ; preds = %checkok
  %8 = ptrtoint ptr %6 to i64, !dbg !3434
  %9 = urem i64 %8, 8, !dbg !3434
  %10 = icmp ne i64 %9, 0, !dbg !3434
  %11 = call i1 @llvm.expect.i1(i1 %10, i1 false), !dbg !3434
  br i1 %11, label %panic3, label %checkok6, !dbg !3434

checkok6:                                         ; preds = %checkok2
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %wrapped_stream, i32 16, i1 false), !dbg !3435
  %ptradd7 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !3435
  %12 = load i64, ptr %limit, align 8, !dbg !3436
  store i64 %12, ptr %ptradd7, align 8, !dbg !3436
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %6, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !3436
  %13 = load ptr, ptr %self, align 8, !dbg !3437
  ret ptr %13, !dbg !3437

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3429
  call void %14(ptr @.panic_msg, i64 62, ptr @.file.150, i64 14, ptr @.func, i64 4, i32 13) #5, !dbg !3429
  unreachable, !dbg !3429

panic1:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3434
  call void %15(ptr @.panic_msg.2, i64 45, ptr @.file.150, i64 14, ptr @.func, i64 4, i32 15) #5, !dbg !3434
  unreachable, !dbg !3434

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr4, align 8
  %18 = insertvalue %any undef, ptr %taddr4, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd5, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.150, i64 14, ptr @.func, i64 4, i32 15, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3434
  unreachable, !dbg !3434
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.LimitReader.close(ptr %0) #0 comdat !dbg !3438 {
entry:
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache3 = alloca ptr, align 8
  %.cachedtype4 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype4, align 8, !dbg !3441
  store ptr null, ptr %.cachedtype, align 8, !dbg !3441
  %1 = icmp eq ptr %0, null, !dbg !3441
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3441
  br i1 %2, label %panic, label %checkok, !dbg !3441

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3442, !DIExpression(), !3443)
  %3 = load ptr, ptr %self, align 8, !dbg !3444
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !3444
  %4 = load i64, ptr %ptradd, align 8, !dbg !3444
  %5 = inttoptr i64 %4 to ptr, !dbg !3444
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3441
  %6 = icmp eq ptr %5, %type, !dbg !3441
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !3441

cache_miss:                                       ; preds = %checkok
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !3441
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !3441
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !3441
  store ptr %8, ptr %.inlinecache, align 8, !dbg !3441
  store ptr %5, ptr %.cachedtype, align 8, !dbg !3441
  br label %9, !dbg !3441

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3441
  br label %9, !dbg !3441

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !3441
  %i2b = icmp ne ptr %fn_phi, null, !dbg !3441
  br i1 %i2b, label %if.then, label %if.exit, !dbg !3441

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !3445
  %ptradd2 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !3445
  %11 = load i64, ptr %ptradd2, align 8, !dbg !3445
  %12 = inttoptr i64 %11 to ptr, !dbg !3445
  %type5 = load ptr, ptr %.cachedtype4, align 8, !dbg !3441
  %13 = icmp eq ptr %12, %type5, !dbg !3441
  br i1 %13, label %cache_hit8, label %cache_miss6, !dbg !3441

cache_miss6:                                      ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !3441
  %14 = load ptr, ptr %ptradd7, align 8, !dbg !3441
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !3441
  store ptr %15, ptr %.inlinecache3, align 8, !dbg !3441
  store ptr %12, ptr %.cachedtype4, align 8, !dbg !3441
  br label %16, !dbg !3441

cache_hit8:                                       ; preds = %if.then
  %cache_hit_fn9 = load ptr, ptr %.inlinecache3, align 8, !dbg !3441
  br label %16, !dbg !3441

16:                                               ; preds = %cache_hit8, %cache_miss6
  %fn_phi10 = phi ptr [ %cache_hit_fn9, %cache_hit8 ], [ %15, %cache_miss6 ], !dbg !3441
  %17 = icmp eq ptr %fn_phi10, null, !dbg !3441
  br i1 %17, label %missing_function, label %match, !dbg !3441

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3445
  call void %18(ptr @.panic_msg.145, i64 42, ptr @.file.150, i64 14, ptr @.func.144, i64 5, i32 21) #5, !dbg !3445
  unreachable, !dbg !3445

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !3445
  %20 = call i64 %fn_phi10(ptr %19), !dbg !3445
  %not_err = icmp eq i64 %20, 0, !dbg !3445
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3445
  br i1 %21, label %after_check, label %assign_optional, !dbg !3445

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %reterr, align 8, !dbg !3445
  br label %err_retblock, !dbg !3445

after_check:                                      ; preds = %match
  ret i64 0, !dbg !3445

err_retblock:                                     ; preds = %assign_optional
  %22 = load i64, ptr %reterr, align 8, !dbg !3445
  ret i64 %22, !dbg !3445

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !3445

panic:                                            ; preds = %entry
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3443
  call void %23(ptr @.panic_msg, i64 62, ptr @.file.150, i64 14, ptr @.func.144, i64 5, i32 19) #5, !dbg !3443
  unreachable, !dbg !3443
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.LimitReader.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !3446 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %m = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %n = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %varargslots11 = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3449
  %4 = icmp eq ptr %1, null, !dbg !3449
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3449
  br i1 %5, label %panic, label %checkok, !dbg !3449

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3450, !DIExpression(), !3451)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !3452, !DIExpression(), !3453)
  %6 = load ptr, ptr %self, align 8, !dbg !3454
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !3454
  %7 = load i64, ptr %ptradd1, align 8, !dbg !3454
  %eq = icmp eq i64 0, %7, !dbg !3454
  br i1 %eq, label %if.then, label %if.exit, !dbg !3454

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !3455

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %m, !3456, !DIExpression(), !3457)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3458
  %8 = load i64, ptr %ptradd2, align 8
  store i64 %8, ptr %x, align 8
  %9 = load ptr, ptr %self, align 8, !dbg !3459
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !3459
  %10 = load i64, ptr %ptradd3, align 8
  store i64 %10, ptr %.anon, align 8
  %11 = load i64, ptr %x, align 8
  store i64 %11, ptr %a, align 8
  %12 = load i64, ptr %.anon, align 8
  store i64 %12, ptr %b, align 8
  %13 = load i64, ptr %a, align 8, !dbg !3460
  %14 = load i64, ptr %b, align 8, !dbg !3465
  %lt = icmp ult i64 %13, %14, !dbg !3460
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !3460

cond.lhs:                                         ; preds = %if.exit
  %15 = load i64, ptr %x, align 8, !dbg !3466
  br label %cond.phi, !dbg !3466

cond.rhs:                                         ; preds = %if.exit
  %16 = load i64, ptr %.anon, align 8, !dbg !3467
  br label %cond.phi, !dbg !3467

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %15, %cond.lhs ], [ %16, %cond.rhs ], !dbg !3467
  store i64 %val, ptr %m, align 8, !dbg !3467
    #dbg_declare(ptr %n, !3468, !DIExpression(), !3469)
  %17 = load ptr, ptr %self, align 8, !dbg !3470
  %18 = load %"char[]", ptr %bytes, align 8, !dbg !3471
  %19 = extractvalue %"char[]" %18, 0, !dbg !3471
  %20 = extractvalue %"char[]" %18, 1, !dbg !3472
  %gt = icmp ugt i64 0, %20, !dbg !3472
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3472
  br i1 %21, label %panic4, label %checkok7, !dbg !3472

checkok7:                                         ; preds = %cond.phi
  %22 = load i64, ptr %m, align 8, !dbg !3473
  %add = add i64 0, %22, !dbg !3473
  %gt8 = icmp ugt i64 0, %add, !dbg !3473
  %sub = sub i64 %add, 0, !dbg !3473
  %23 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !3473
  br i1 %23, label %panic9, label %checkok14, !dbg !3473

checkok14:                                        ; preds = %checkok7
  %lt15 = icmp ult i64 %20, %add, !dbg !3471
  %sub16 = sub i64 %add, 1, !dbg !3471
  %24 = call i1 @llvm.expect.i1(i1 %lt15, i1 false), !dbg !3471
  br i1 %24, label %panic17, label %checkok24, !dbg !3471

checkok24:                                        ; preds = %checkok14
  %size = sub i64 %add, 0, !dbg !3471
  %25 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !3471
  %26 = insertvalue %"char[]" %25, i64 %size, 1, !dbg !3471
  %ptradd25 = getelementptr inbounds i8, ptr %17, i64 8, !dbg !3471
  %27 = load i64, ptr %ptradd25, align 8, !dbg !3471
  %28 = inttoptr i64 %27 to ptr, !dbg !3471
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3449
  %29 = icmp eq ptr %28, %type, !dbg !3449
  br i1 %29, label %cache_hit, label %cache_miss, !dbg !3449

cache_miss:                                       ; preds = %checkok24
  %ptradd26 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !3449
  %30 = load ptr, ptr %ptradd26, align 8, !dbg !3449
  %31 = call ptr @.dyn_search(ptr %30, ptr @"$sel.read"), !dbg !3449
  store ptr %31, ptr %.inlinecache, align 8, !dbg !3449
  store ptr %28, ptr %.cachedtype, align 8, !dbg !3449
  br label %32, !dbg !3449

cache_hit:                                        ; preds = %checkok24
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3449
  br label %32, !dbg !3449

32:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %31, %cache_miss ], !dbg !3449
  %33 = icmp eq ptr %fn_phi, null, !dbg !3449
  br i1 %33, label %missing_function, label %match, !dbg !3449

missing_function:                                 ; preds = %32
  %34 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3470
  call void %34(ptr @.panic_msg.39, i64 41, ptr @.file.150, i64 14, ptr @.func.118, i64 4, i32 29) #5, !dbg !3470
  unreachable, !dbg !3470

match:                                            ; preds = %32
  %35 = load ptr, ptr %17, align 8
  %36 = call i64 %fn_phi(ptr %retparam, ptr %35, ptr %19, i64 %size), !dbg !3470
  %not_err = icmp eq i64 %36, 0, !dbg !3470
  %37 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3470
  br i1 %37, label %after_check, label %assign_optional, !dbg !3470

assign_optional:                                  ; preds = %match
  store i64 %36, ptr %error_var, align 8, !dbg !3470
  br label %guard_block, !dbg !3470

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !3470

guard_block:                                      ; preds = %assign_optional
  %38 = load i64, ptr %error_var, align 8, !dbg !3470
  ret i64 %38, !dbg !3470

noerr_block:                                      ; preds = %after_check
  %39 = load i64, ptr %retparam, align 8, !dbg !3470
  store i64 %39, ptr %n, align 8, !dbg !3470
  %40 = load ptr, ptr %self, align 8, !dbg !3474
  %ptradd27 = getelementptr inbounds i8, ptr %40, i64 16, !dbg !3474
  %41 = load i64, ptr %ptradd27, align 8, !dbg !3474
  %42 = load i64, ptr %n, align 8, !dbg !3475
  %sub28 = sub i64 %41, %42, !dbg !3474
  store i64 %sub28, ptr %ptradd27, align 8, !dbg !3474
  %43 = load i64, ptr %n, align 8, !dbg !3476
  store i64 %43, ptr %0, align 8, !dbg !3476
  ret i64 0, !dbg !3476

panic:                                            ; preds = %entry
  %44 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3451
  call void %44(ptr @.panic_msg, i64 62, ptr @.file.150, i64 14, ptr @.func.118, i64 4, i32 25) #5, !dbg !3451
  unreachable, !dbg !3451

panic4:                                           ; preds = %cond.phi
  store i64 %20, ptr %taddr, align 8
  %45 = insertvalue %any undef, ptr %taddr, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %47 = insertvalue %any undef, ptr %taddr5, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %46, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %48, ptr %ptradd6, align 16
  %49 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %49, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.150, i64 14, ptr @.func.118, i64 4, i32 29, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3471
  unreachable, !dbg !3471

panic9:                                           ; preds = %checkok7
  store i64 %sub, ptr %taddr10, align 8
  %50 = insertvalue %any undef, ptr %taddr10, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots11, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots11, 0
  %"$$temp12" = insertvalue %"any[]" %52, i64 1, 1
  store %"any[]" %"$$temp12", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.150, i64 14, ptr @.func.118, i64 4, i32 29, ptr byval(%"any[]") align 8 %indirectarg13) #5, !dbg !3471
  unreachable, !dbg !3471

panic17:                                          ; preds = %checkok14
  store i64 %sub16, ptr %taddr18, align 8
  %53 = insertvalue %any undef, ptr %taddr18, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr19, align 8
  %55 = insertvalue %any undef, ptr %taddr19, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %56, ptr %ptradd21, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.150, i64 14, ptr @.func.118, i64 4, i32 29, ptr byval(%"any[]") align 8 %indirectarg23) #5, !dbg !3471
  unreachable, !dbg !3471
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.LimitReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !3477 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i8, align 1
  store ptr null, ptr %.cachedtype, align 8, !dbg !3480
  %2 = icmp eq ptr %1, null, !dbg !3480
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3480
  br i1 %3, label %panic, label %checkok, !dbg !3480

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3481, !DIExpression(), !3482)
  %4 = load ptr, ptr %self, align 8, !dbg !3483
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !3483
  %5 = load i64, ptr %ptradd, align 8, !dbg !3483
  %eq = icmp eq i64 0, %5, !dbg !3483
  br i1 %eq, label %if.then, label %if.exit, !dbg !3483

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !3484

if.exit:                                          ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !3485
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !3485
  %7 = load i64, ptr %ptradd1, align 8, !dbg !3485
  %8 = inttoptr i64 %7 to ptr, !dbg !3485
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3480
  %9 = icmp eq ptr %8, %type, !dbg !3480
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !3480

cache_miss:                                       ; preds = %if.exit
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !3480
  %10 = load ptr, ptr %ptradd2, align 8, !dbg !3480
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read_byte"), !dbg !3480
  store ptr %11, ptr %.inlinecache, align 8, !dbg !3480
  store ptr %8, ptr %.cachedtype, align 8, !dbg !3480
  br label %12, !dbg !3480

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3480
  br label %12, !dbg !3480

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !3480
  %13 = icmp eq ptr %fn_phi, null, !dbg !3480
  br i1 %13, label %missing_function, label %match, !dbg !3480

missing_function:                                 ; preds = %12
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3485
  call void %14(ptr @.panic_msg.8, i64 46, ptr @.file.150, i64 14, ptr @.func.123, i64 9, i32 38) #5, !dbg !3485
  unreachable, !dbg !3485

match:                                            ; preds = %12
  %15 = load ptr, ptr %6, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %15), !dbg !3485
  %not_err = icmp eq i64 %16, 0, !dbg !3485
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3485
  br i1 %17, label %after_check, label %assign_optional, !dbg !3485

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %reterr, align 8, !dbg !3485
  br label %err_retblock, !dbg !3485

after_check:                                      ; preds = %match
  %18 = load i8, ptr %retparam, align 1, !dbg !3485
  %19 = load ptr, ptr %self, align 8, !dbg !3486
  %ptradd3 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !3486
  %20 = load i64, ptr %ptradd3, align 8, !dbg !3486
  %sub = sub i64 %20, 1, !dbg !3486
  store i64 %sub, ptr %ptradd3, align 8, !dbg !3486
  store i8 %18, ptr %0, align 1, !dbg !3486
  ret i64 0, !dbg !3486

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !3486
  ret i64 %21, !dbg !3486

panic:                                            ; preds = %entry
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3482
  call void %22(ptr @.panic_msg, i64 62, ptr @.file.150, i64 14, ptr @.func.123, i64 9, i32 34) #5, !dbg !3482
  unreachable, !dbg !3482
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.LimitReader.available(ptr %0, ptr %1) #0 comdat !dbg !3488 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !3491
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3491
  br i1 %3, label %panic, label %checkok, !dbg !3491

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3492, !DIExpression(), !3493)
  %4 = load ptr, ptr %self, align 8, !dbg !3494
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !3494
  %5 = load i64, ptr %ptradd, align 8, !dbg !3494
  store i64 %5, ptr %0, align 8, !dbg !3494
  ret i64 0, !dbg !3494

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3493
  call void %6(ptr @.panic_msg, i64 62, ptr @.file.150, i64 14, ptr @.func.37, i64 9, i32 41) #5, !dbg !3493
  unreachable, !dbg !3493
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteBuffer.init(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !3495 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %max_read = alloca i64, align 8
  %initial_capacity = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %ByteBuffer, align 8
  %x = alloca i64, align 8
  %.anon = alloca i32, align 4
  %a = alloca i64, align 8
  %b = alloca i32, align 4
  %5 = icmp eq ptr %0, null, !dbg !3508
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !3508
  br i1 %6, label %panic, label %checkok, !dbg !3508

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3509, !DIExpression(), !3510)
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !3511, !DIExpression(), !3512)
  store i64 %3, ptr %max_read, align 8
    #dbg_declare(ptr %max_read, !3513, !DIExpression(), !3514)
  store i64 %4, ptr %initial_capacity, align 8
    #dbg_declare(ptr %initial_capacity, !3515, !DIExpression(), !3516)
  %7 = load ptr, ptr %self, align 8, !dbg !3517
  %ptradd1 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !3517
  %ptradd2 = getelementptr inbounds i8, ptr %ptradd1, i64 8, !dbg !3517
  %8 = load i64, ptr %ptradd2, align 8, !dbg !3517
  %eq = icmp eq i64 0, %8, !dbg !3517
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !3517

assert_fail:                                      ; preds = %checkok
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3517
  call void %9(ptr @.panic_msg.152, i64 71, ptr @.file.151, i64 13, ptr @.func, i64 4, i32 17) #5, !dbg !3517
  unreachable, !dbg !3517

assert_ok:                                        ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !3519
  %checknull = icmp eq ptr %10, null, !dbg !3519
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3519
  br i1 %11, label %panic3, label %checkok4, !dbg !3519

checkok4:                                         ; preds = %assert_ok
  %12 = ptrtoint ptr %10 to i64, !dbg !3519
  %13 = urem i64 %12, 8, !dbg !3519
  %14 = icmp ne i64 %13, 0, !dbg !3519
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !3519
  br i1 %15, label %panic5, label %checkok8, !dbg !3519

checkok8:                                         ; preds = %checkok4
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 64, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %allocator, i32 16, i1 false), !dbg !3520
  %ptradd9 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !3520
  %16 = load i64, ptr %max_read, align 8, !dbg !3521
  store i64 %16, ptr %ptradd9, align 8, !dbg !3521
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %10, ptr align 8 %.assign_list, i32 64, i1 false), !dbg !3521
  %17 = load i64, ptr %initial_capacity, align 8
  store i64 %17, ptr %x, align 8
  store i32 16, ptr %.anon, align 4
  %18 = load i64, ptr %x, align 8
  store i64 %18, ptr %a, align 8
  %19 = load i32, ptr %.anon, align 4
  store i32 %19, ptr %b, align 4
  %20 = load i64, ptr %a, align 8, !dbg !3522
  %21 = load i32, ptr %b, align 4, !dbg !3527
  %sext = sext i32 %21 to i64, !dbg !3527
  %lt = icmp slt i64 %sext, %20, !dbg !3522
  %check = icmp slt i64 %20, 0, !dbg !3522
  %siui-lt = or i1 %check, %lt, !dbg !3522
  br i1 %siui-lt, label %cond.lhs, label %cond.rhs, !dbg !3522

cond.lhs:                                         ; preds = %checkok8
  %22 = load i64, ptr %x, align 8, !dbg !3528
  br label %cond.phi, !dbg !3528

cond.rhs:                                         ; preds = %checkok8
  %23 = load i32, ptr %.anon, align 4, !dbg !3529
  %sext10 = sext i32 %23 to i64, !dbg !3529
  br label %cond.phi, !dbg !3529

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %22, %cond.lhs ], [ %sext10, %cond.rhs ], !dbg !3529
  store i64 %val, ptr %initial_capacity, align 8, !dbg !3529
  %24 = load ptr, ptr %self, align 8, !dbg !3530
  %25 = load i64, ptr %initial_capacity, align 8, !dbg !3530
  call void @std.io.ByteBuffer.grow(ptr %24, i64 %25), !dbg !3531
  %26 = load ptr, ptr %self, align 8, !dbg !3532
  ret ptr %26, !dbg !3532

panic:                                            ; preds = %entry
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3510
  call void %27(ptr @.panic_msg, i64 62, ptr @.file.151, i64 13, ptr @.func, i64 4, i32 19) #5, !dbg !3510
  unreachable, !dbg !3510

panic3:                                           ; preds = %assert_ok
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3519
  call void %28(ptr @.panic_msg.2, i64 45, ptr @.file.151, i64 13, ptr @.func, i64 4, i32 21) #5, !dbg !3519
  unreachable, !dbg !3519

panic5:                                           ; preds = %checkok4
  store i64 8, ptr %taddr, align 8
  %29 = insertvalue %any undef, ptr %taddr, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr6, align 8
  %31 = insertvalue %any undef, ptr %taddr6, 0
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %30, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %32, ptr %ptradd7, align 16
  %33 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %33, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.151, i64 13, ptr @.func, i64 4, i32 21, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3519
  unreachable, !dbg !3519
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteBuffer.tinit(ptr %0, i64 %1, i64 %2) #0 comdat !dbg !3533 {
entry:
  %self = alloca ptr, align 8
  %max_read = alloca i64, align 8
  %initial_capacity = alloca i64, align 8
  %taddr = alloca %any, align 8
  %3 = icmp eq ptr %0, null, !dbg !3536
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3536
  br i1 %4, label %panic, label %checkok, !dbg !3536

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3537, !DIExpression(), !3538)
  store i64 %1, ptr %max_read, align 8
    #dbg_declare(ptr %max_read, !3539, !DIExpression(), !3540)
  store i64 %2, ptr %initial_capacity, align 8
    #dbg_declare(ptr %initial_capacity, !3541, !DIExpression(), !3542)
  %5 = load ptr, ptr %self, align 8, !dbg !3543
  %6 = load %any, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !3544
  %7 = load i64, ptr %max_read, align 8, !dbg !3545
  %8 = load i64, ptr %initial_capacity, align 8, !dbg !3546
  %ptradd = getelementptr inbounds i8, ptr %5, i64 24, !dbg !3547
  %ptradd1 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !3547
  %9 = load i64, ptr %ptradd1, align 8, !dbg !3547
  %eq = icmp eq i64 0, %9, !dbg !3543
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !3543

assert_fail:                                      ; preds = %checkok
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3543
  call void %10(ptr @.panic_msg.152, i64 71, ptr @.file.151, i64 13, ptr @.func.109, i64 5, i32 29) #5, !dbg !3543
  unreachable, !dbg !3543

assert_ok:                                        ; preds = %checkok
  store %any %6, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd2, align 8
  %11 = call ptr @std.io.ByteBuffer.init(ptr %5, i64 %lo, ptr %hi, i64 %7, i64 %8), !dbg !3543
  ret ptr %11, !dbg !3543

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3538
  call void %12(ptr @.panic_msg, i64 62, ptr @.file.151, i64 13, ptr @.func.109, i64 5, i32 27) #5, !dbg !3538
  unreachable, !dbg !3538
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteBuffer.init_with_buffer(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3548 {
entry:
  %self = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %ByteBuffer, align 8
  %3 = icmp eq ptr %0, null, !dbg !3551
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3551
  br i1 %4, label %panic, label %checkok, !dbg !3551

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3552, !DIExpression(), !3553)
  store ptr %1, ptr %buf, align 8
  %ptradd = getelementptr inbounds i8, ptr %buf, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %buf, !3554, !DIExpression(), !3555)
  %ptradd1 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !3556
  %5 = load i64, ptr %ptradd1, align 8, !dbg !3556
  %lt = icmp ult i64 0, %5, !dbg !3556
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3556

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3556
  call void %6(ptr @.panic_msg.153, i64 32, ptr @.file.151, i64 13, ptr @.func.134, i64 16, i32 33) #5, !dbg !3556
  unreachable, !dbg !3556

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !3558
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !3558
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 8, !dbg !3558
  %8 = load i64, ptr %ptradd3, align 8, !dbg !3558
  %eq = icmp eq i64 0, %8, !dbg !3558
  br i1 %eq, label %assert_ok5, label %assert_fail4, !dbg !3558

assert_fail4:                                     ; preds = %assert_ok
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3558
  call void %9(ptr @.panic_msg.152, i64 71, ptr @.file.151, i64 13, ptr @.func.134, i64 16, i32 34) #5, !dbg !3558
  unreachable, !dbg !3558

assert_ok5:                                       ; preds = %assert_ok
  %10 = load ptr, ptr %self, align 8, !dbg !3559
  %checknull = icmp eq ptr %10, null, !dbg !3559
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3559
  br i1 %11, label %panic6, label %checkok7, !dbg !3559

checkok7:                                         ; preds = %assert_ok5
  %12 = ptrtoint ptr %10 to i64, !dbg !3559
  %13 = urem i64 %12, 8, !dbg !3559
  %14 = icmp ne i64 %13, 0, !dbg !3559
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !3559
  br i1 %15, label %panic8, label %checkok11, !dbg !3559

checkok11:                                        ; preds = %checkok7
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 64, i1 false)
  %ptradd12 = getelementptr inbounds i8, ptr %.assign_list, i64 16
  %ptradd13 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !3560
  %16 = load i64, ptr %ptradd13, align 8, !dbg !3560
  store i64 %16, ptr %ptradd12, align 8, !dbg !3560
  %ptradd14 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !3560
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd14, ptr align 8 %buf, i32 16, i1 false), !dbg !3561
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %10, ptr align 8 %.assign_list, i32 64, i1 false), !dbg !3561
  %17 = load ptr, ptr %self, align 8, !dbg !3562
  ret ptr %17, !dbg !3562

panic:                                            ; preds = %entry
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3553
  call void %18(ptr @.panic_msg, i64 62, ptr @.file.151, i64 13, ptr @.func.134, i64 16, i32 36) #5, !dbg !3553
  unreachable, !dbg !3553

panic6:                                           ; preds = %assert_ok5
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3559
  call void %19(ptr @.panic_msg.2, i64 45, ptr @.file.151, i64 13, ptr @.func.134, i64 16, i32 38) #5, !dbg !3559
  unreachable, !dbg !3559

panic8:                                           ; preds = %checkok7
  store i64 8, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr9, align 8
  %22 = insertvalue %any undef, ptr %taddr9, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %21, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd10, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.151, i64 13, ptr @.func.134, i64 16, i32 38, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3559
  unreachable, !dbg !3559
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.ByteBuffer.free(ptr %0) #0 comdat !dbg !3563 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3566
  %1 = icmp eq ptr %0, null, !dbg !3566
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3566
  br i1 %2, label %panic, label %checkok, !dbg !3566

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3567, !DIExpression(), !3568)
  %3 = load ptr, ptr %self, align 8, !dbg !3569
  %4 = load ptr, ptr %3, align 8, !dbg !3569
  %i2b = icmp ne ptr %4, null, !dbg !3569
  br i1 %i2b, label %if.then, label %if.exit4, !dbg !3569

if.then:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !3570
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %5, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !3571
  %ptradd = getelementptr inbounds i8, ptr %6, i64 24, !dbg !3571
  %7 = load ptr, ptr %ptradd, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !3572
  %i2nb = icmp eq ptr %8, null, !dbg !3572
  br i1 %i2nb, label %if.then1, label %if.exit, !dbg !3572

if.then1:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !3575

if.exit:                                          ; preds = %if.then
  %9 = load ptr, ptr %ptr, align 8, !dbg !3576
  %neq = icmp ne ptr %9, null, !dbg !3577
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !3577

assert_fail:                                      ; preds = %if.exit
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3577
  call void %10(ptr @.panic_msg.111, i64 75, ptr @.file.104, i64 16, ptr @.func.110, i64 4, i32 122) #5, !dbg !3577
  unreachable, !dbg !3577

assert_ok:                                        ; preds = %if.exit
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !3577
  %11 = load i64, ptr %ptradd2, align 8, !dbg !3577
  %12 = inttoptr i64 %11 to ptr, !dbg !3577
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3566
  %13 = icmp eq ptr %12, %type, !dbg !3566
  br i1 %13, label %cache_hit, label %cache_miss, !dbg !3566

cache_miss:                                       ; preds = %assert_ok
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !3566
  %14 = load ptr, ptr %ptradd3, align 8, !dbg !3566
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.release"), !dbg !3566
  store ptr %15, ptr %.inlinecache, align 8, !dbg !3566
  store ptr %12, ptr %.cachedtype, align 8, !dbg !3566
  br label %16, !dbg !3566

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3566
  br label %16, !dbg !3566

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ], !dbg !3566
  %17 = icmp eq ptr %fn_phi, null, !dbg !3566
  br i1 %17, label %missing_function, label %match, !dbg !3566

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3566
  call void %18(ptr @.panic_msg.112, i64 44, ptr @.file.104, i64 16, ptr @.func.110, i64 4, i32 122) #5, !dbg !3566
  unreachable, !dbg !3566

match:                                            ; preds = %16
  %19 = load ptr, ptr %allocator, align 8, !dbg !3566
  call void %fn_phi(ptr %19, ptr %9, i8 zeroext 0), !dbg !3566
  br label %expr_block.exit, !dbg !3566

expr_block.exit:                                  ; preds = %match, %if.then1
  br label %if.exit4, !dbg !3566

if.exit4:                                         ; preds = %expr_block.exit, %checkok
  %20 = load ptr, ptr %self, align 8, !dbg !3578
  %checknull = icmp eq ptr %20, null, !dbg !3578
  %21 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3578
  br i1 %21, label %panic5, label %checkok6, !dbg !3578

checkok6:                                         ; preds = %if.exit4
  %22 = ptrtoint ptr %20 to i64, !dbg !3578
  %23 = urem i64 %22, 8, !dbg !3578
  %24 = icmp ne i64 %23, 0, !dbg !3578
  %25 = call i1 @llvm.expect.i1(i1 %24, i1 false), !dbg !3578
  br i1 %25, label %panic7, label %checkok10, !dbg !3578

checkok10:                                        ; preds = %checkok6
  call void @llvm.memset.p0.i64(ptr align 8 %20, i8 0, i64 64, i1 false), !dbg !3578
  ret void, !dbg !3578

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3568
  call void %26(ptr @.panic_msg, i64 62, ptr @.file.151, i64 13, ptr @.func.110, i64 4, i32 42) #5, !dbg !3568
  unreachable, !dbg !3568

panic5:                                           ; preds = %if.exit4
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3578
  call void %27(ptr @.panic_msg.2, i64 45, ptr @.file.151, i64 13, ptr @.func.110, i64 4, i32 45) #5, !dbg !3578
  unreachable, !dbg !3578

panic7:                                           ; preds = %checkok6
  store i64 8, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr8, align 8
  %30 = insertvalue %any undef, ptr %taddr8, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd9, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.151, i64 13, ptr @.func.110, i64 4, i32 45, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3578
  unreachable, !dbg !3578
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.write(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !3579 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %cap = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [1 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %varargslots45 = alloca [2 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !3582
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3582
  br i1 %5, label %panic, label %checkok, !dbg !3582

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3583, !DIExpression(), !3584)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !3585, !DIExpression(), !3586)
    #dbg_declare(ptr %cap, !3587, !DIExpression(), !3588)
  %6 = load ptr, ptr %self, align 8, !dbg !3589
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 24, !dbg !3589
  %ptradd2 = getelementptr inbounds i8, ptr %ptradd1, i64 8, !dbg !3589
  %7 = load i64, ptr %ptradd2, align 8, !dbg !3589
  %8 = load ptr, ptr %self, align 8, !dbg !3590
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 48, !dbg !3590
  %9 = load i64, ptr %ptradd3, align 8, !dbg !3590
  %sub = sub i64 %7, %9, !dbg !3589
  store i64 %sub, ptr %cap, align 8, !dbg !3589
  %10 = load i64, ptr %cap, align 8, !dbg !3591
  %ptradd4 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3592
  %11 = load i64, ptr %ptradd4, align 8, !dbg !3592
  %lt = icmp ult i64 %10, %11, !dbg !3591
  br i1 %lt, label %if.then, label %if.exit, !dbg !3591

if.then:                                          ; preds = %checkok
  %ptradd5 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3593
  %12 = load ptr, ptr %self, align 8, !dbg !3593
  %13 = load i64, ptr %ptradd5, align 8, !dbg !3593
  call void @std.io.ByteBuffer.grow(ptr %12, i64 %13), !dbg !3594
  br label %if.exit, !dbg !3594

if.exit:                                          ; preds = %if.then, %checkok
  %14 = load %"char[]", ptr %bytes, align 8, !dbg !3595
  %15 = extractvalue %"char[]" %14, 0, !dbg !3595
  %16 = extractvalue %"char[]" %14, 1, !dbg !3596
  %gt = icmp ugt i64 0, %16, !dbg !3596
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3596
  br i1 %17, label %panic6, label %checkok9, !dbg !3596

checkok9:                                         ; preds = %if.exit
  %size = sub i64 %16, 0, !dbg !3595
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !3595
  %19 = insertvalue %"char[]" %18, i64 %size, 1, !dbg !3595
  %20 = load ptr, ptr %self, align 8, !dbg !3597
  %ptradd10 = getelementptr inbounds i8, ptr %20, i64 24, !dbg !3597
  %21 = load %"char[]", ptr %ptradd10, align 8, !dbg !3597
  %22 = extractvalue %"char[]" %21, 0, !dbg !3597
  %23 = load ptr, ptr %self, align 8, !dbg !3598
  %ptradd11 = getelementptr inbounds i8, ptr %23, i64 48, !dbg !3598
  %24 = load i64, ptr %ptradd11, align 8, !dbg !3598
  %25 = extractvalue %"char[]" %21, 1, !dbg !3598
  %gt12 = icmp ugt i64 %24, %25, !dbg !3598
  %26 = call i1 @llvm.expect.i1(i1 %gt12, i1 false), !dbg !3598
  br i1 %26, label %panic13, label %checkok20, !dbg !3598

checkok20:                                        ; preds = %checkok9
  %ptradd21 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3599
  %27 = load i64, ptr %ptradd21, align 8, !dbg !3599
  %add = add i64 %24, %27, !dbg !3599
  %gt22 = icmp ugt i64 %24, %add, !dbg !3599
  %sub23 = sub i64 %add, %24, !dbg !3599
  %28 = call i1 @llvm.expect.i1(i1 %gt22, i1 false), !dbg !3599
  br i1 %28, label %panic24, label %checkok29, !dbg !3599

checkok29:                                        ; preds = %checkok20
  %lt30 = icmp ult i64 %25, %add, !dbg !3597
  %sub31 = sub i64 %add, 1, !dbg !3597
  %29 = call i1 @llvm.expect.i1(i1 %lt30, i1 false), !dbg !3597
  br i1 %29, label %panic32, label %checkok39, !dbg !3597

checkok39:                                        ; preds = %checkok29
  %size40 = sub i64 %add, %24, !dbg !3597
  %ptradd41 = getelementptr inbounds i8, ptr %22, i64 %24, !dbg !3597
  %30 = insertvalue %"char[]" undef, ptr %ptradd41, 0, !dbg !3597
  %31 = insertvalue %"char[]" %30, i64 %size40, 1, !dbg !3597
  %32 = extractvalue %"char[]" %31, 0, !dbg !3597
  %33 = extractvalue %"char[]" %19, 0, !dbg !3597
  %34 = extractvalue %"char[]" %19, 1, !dbg !3597
  %35 = extractvalue %"char[]" %31, 1, !dbg !3597
  %neq = icmp ne i64 %35, %34, !dbg !3597
  %36 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !3597
  br i1 %36, label %panic42, label %checkok49, !dbg !3597

checkok49:                                        ; preds = %checkok39
  %37 = mul i64 %34, 1, !dbg !3597
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %32, ptr align 1 %33, i64 %37, i1 false), !dbg !3597
  %38 = load ptr, ptr %self, align 8, !dbg !3600
  %ptradd50 = getelementptr inbounds i8, ptr %38, i64 48, !dbg !3600
  %39 = load i64, ptr %ptradd50, align 8, !dbg !3600
  %ptradd51 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3601
  %40 = load i64, ptr %ptradd51, align 8, !dbg !3601
  %add52 = add i64 %39, %40, !dbg !3600
  store i64 %add52, ptr %ptradd50, align 8, !dbg !3600
  %ptradd53 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3602
  %41 = load i64, ptr %ptradd53, align 8, !dbg !3602
  store i64 %41, ptr %0, align 8, !dbg !3602
  ret i64 0, !dbg !3602

panic:                                            ; preds = %entry
  %42 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3584
  call void %42(ptr @.panic_msg, i64 62, ptr @.file.151, i64 13, ptr @.func.113, i64 5, i32 48) #5, !dbg !3584
  unreachable, !dbg !3584

panic6:                                           ; preds = %if.exit
  store i64 %16, ptr %taddr, align 8
  %43 = insertvalue %any undef, ptr %taddr, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %45 = insertvalue %any undef, ptr %taddr7, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %44, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %46, ptr %ptradd8, align 16
  %47 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %47, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.151, i64 13, ptr @.func.113, i64 5, i32 52, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3595
  unreachable, !dbg !3595

panic13:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr14, align 8
  %48 = insertvalue %any undef, ptr %taddr14, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr15, align 8
  %50 = insertvalue %any undef, ptr %taddr15, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %49, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %51, ptr %ptradd17, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %52, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.151, i64 13, ptr @.func.113, i64 5, i32 52, ptr byval(%"any[]") align 8 %indirectarg19) #5, !dbg !3597
  unreachable, !dbg !3597

panic24:                                          ; preds = %checkok20
  store i64 %sub23, ptr %taddr25, align 8
  %53 = insertvalue %any undef, ptr %taddr25, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots26, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp27" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp27", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.151, i64 13, ptr @.func.113, i64 5, i32 52, ptr byval(%"any[]") align 8 %indirectarg28) #5, !dbg !3597
  unreachable, !dbg !3597

panic32:                                          ; preds = %checkok29
  store i64 %sub31, ptr %taddr33, align 8
  %56 = insertvalue %any undef, ptr %taddr33, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr34, align 8
  %58 = insertvalue %any undef, ptr %taddr34, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %59, ptr %ptradd36, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.151, i64 13, ptr @.func.113, i64 5, i32 52, ptr byval(%"any[]") align 8 %indirectarg38) #5, !dbg !3597
  unreachable, !dbg !3597

panic42:                                          ; preds = %checkok39
  store i64 %35, ptr %taddr43, align 8
  %61 = insertvalue %any undef, ptr %taddr43, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr44, align 8
  %63 = insertvalue %any undef, ptr %taddr44, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots45, align 16
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %64, ptr %ptradd46, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.108, i64 38, ptr @.file.151, i64 13, ptr @.func.113, i64 5, i32 52, ptr byval(%"any[]") align 8 %indirectarg48) #5, !dbg !3597
  unreachable, !dbg !3597
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.write_byte(ptr %0, i8 zeroext %1) #0 comdat !dbg !3603 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %cap = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3606
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3606
  br i1 %3, label %panic, label %checkok, !dbg !3606

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3607, !DIExpression(), !3608)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !3609, !DIExpression(), !3610)
    #dbg_declare(ptr %cap, !3611, !DIExpression(), !3612)
  %4 = load ptr, ptr %self, align 8, !dbg !3613
  %ptradd = getelementptr inbounds i8, ptr %4, i64 24, !dbg !3613
  %ptradd1 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !3613
  %5 = load i64, ptr %ptradd1, align 8, !dbg !3613
  %6 = load ptr, ptr %self, align 8, !dbg !3614
  %ptradd2 = getelementptr inbounds i8, ptr %6, i64 48, !dbg !3614
  %7 = load i64, ptr %ptradd2, align 8, !dbg !3614
  %sub = sub i64 %5, %7, !dbg !3613
  store i64 %sub, ptr %cap, align 8, !dbg !3613
  %8 = load i64, ptr %cap, align 8, !dbg !3615
  %eq = icmp eq i64 0, %8, !dbg !3615
  br i1 %eq, label %if.then, label %if.exit, !dbg !3615

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !3616
  call void @std.io.ByteBuffer.grow(ptr %9, i64 1), !dbg !3617
  br label %if.exit, !dbg !3617

if.exit:                                          ; preds = %if.then, %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !3618
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 24, !dbg !3618
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !3618
  %11 = load i64, ptr %ptradd4, align 8, !dbg !3618
  %12 = load ptr, ptr %ptradd3, align 8, !dbg !3618
  %13 = load ptr, ptr %self, align 8, !dbg !3619
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 48, !dbg !3619
  %14 = load i64, ptr %ptradd5, align 8, !dbg !3619
  %ge = icmp uge i64 %14, %11, !dbg !3619
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3619
  br i1 %15, label %panic6, label %checkok9, !dbg !3619

checkok9:                                         ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !3619
  %16 = load i8, ptr %c, align 1, !dbg !3620
  store i8 %16, ptr %ptradd10, align 1, !dbg !3620
  %17 = load ptr, ptr %self, align 8, !dbg !3621
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 48, !dbg !3621
  %18 = load i64, ptr %ptradd11, align 8, !dbg !3621
  %add = add i64 %18, 1, !dbg !3621
  store i64 %add, ptr %ptradd11, align 8, !dbg !3621
  ret i64 0, !dbg !3621

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3608
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.151, i64 13, ptr @.func.115, i64 10, i32 57) #5, !dbg !3608
  unreachable, !dbg !3608

panic6:                                           ; preds = %if.exit
  store i64 %11, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr7, align 8
  %22 = insertvalue %any undef, ptr %taddr7, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %21, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd8, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.151, i64 13, ptr @.func.115, i64 10, i32 61, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3619
  unreachable, !dbg !3619
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !3622 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %readable = alloca i64, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %varargslots15 = alloca [1 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %varargslots44 = alloca [1 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %taddr51 = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr60 = alloca i64, align 8
  %taddr61 = alloca i64, align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %self71 = alloca ptr, align 8
  %readable76 = alloca i64, align 8
  %taddr85 = alloca i64, align 8
  %taddr86 = alloca i64, align 8
  %varargslots87 = alloca [2 x %any], align 16
  %indirectarg90 = alloca %"any[]", align 8
  %taddr93 = alloca i64, align 8
  %varargslots94 = alloca [1 x %any], align 16
  %indirectarg96 = alloca %"any[]", align 8
  %taddr103 = alloca i64, align 8
  %varargslots104 = alloca [1 x %any], align 16
  %indirectarg106 = alloca %"any[]", align 8
  %taddr111 = alloca i64, align 8
  %taddr112 = alloca i64, align 8
  %varargslots113 = alloca [2 x %any], align 16
  %indirectarg116 = alloca %"any[]", align 8
  %taddr123 = alloca i64, align 8
  %taddr124 = alloca i64, align 8
  %varargslots125 = alloca [2 x %any], align 16
  %indirectarg128 = alloca %"any[]", align 8
  %taddr135 = alloca i64, align 8
  %varargslots136 = alloca [1 x %any], align 16
  %indirectarg138 = alloca %"any[]", align 8
  %taddr143 = alloca i64, align 8
  %taddr144 = alloca i64, align 8
  %varargslots145 = alloca [2 x %any], align 16
  %indirectarg148 = alloca %"any[]", align 8
  %taddr153 = alloca i64, align 8
  %taddr154 = alloca i64, align 8
  %varargslots155 = alloca [2 x %any], align 16
  %indirectarg158 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !3623
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3623
  br i1 %5, label %panic, label %checkok, !dbg !3623

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3624, !DIExpression(), !3625)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !3626, !DIExpression(), !3627)
    #dbg_declare(ptr %readable, !3628, !DIExpression(), !3629)
  %6 = load ptr, ptr %self, align 8, !dbg !3630
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 48, !dbg !3630
  %7 = load i64, ptr %ptradd1, align 8, !dbg !3630
  %8 = load ptr, ptr %self, align 8, !dbg !3631
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 40, !dbg !3631
  %9 = load i64, ptr %ptradd2, align 8, !dbg !3631
  %sub = sub i64 %7, %9, !dbg !3630
  store i64 %sub, ptr %readable, align 8, !dbg !3630
  %10 = load i64, ptr %readable, align 8, !dbg !3632
  %eq = icmp eq i64 0, %10, !dbg !3632
  br i1 %eq, label %if.then, label %if.exit, !dbg !3632

if.then:                                          ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !3633
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 56, !dbg !3633
  store i8 0, ptr %ptradd3, align 8, !dbg !3635
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !3636

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %n, !3637, !DIExpression(), !3638)
  %12 = load i64, ptr %readable, align 8
  store i64 %12, ptr %x, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3639
  %13 = load i64, ptr %ptradd4, align 8
  store i64 %13, ptr %.anon, align 8
  %14 = load i64, ptr %x, align 8
  store i64 %14, ptr %a, align 8
  %15 = load i64, ptr %.anon, align 8
  store i64 %15, ptr %b, align 8
  %16 = load i64, ptr %a, align 8, !dbg !3640
  %17 = load i64, ptr %b, align 8, !dbg !3645
  %lt = icmp ult i64 %16, %17, !dbg !3640
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !3640

cond.lhs:                                         ; preds = %if.exit
  %18 = load i64, ptr %x, align 8, !dbg !3646
  br label %cond.phi, !dbg !3646

cond.rhs:                                         ; preds = %if.exit
  %19 = load i64, ptr %.anon, align 8, !dbg !3647
  br label %cond.phi, !dbg !3647

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %18, %cond.lhs ], [ %19, %cond.rhs ], !dbg !3647
  store i64 %val, ptr %n, align 8, !dbg !3647
  %20 = load ptr, ptr %self, align 8, !dbg !3648
  %ptradd5 = getelementptr inbounds i8, ptr %20, i64 24, !dbg !3648
  %21 = load %"char[]", ptr %ptradd5, align 8, !dbg !3648
  %22 = extractvalue %"char[]" %21, 0, !dbg !3648
  %23 = load ptr, ptr %self, align 8, !dbg !3649
  %ptradd6 = getelementptr inbounds i8, ptr %23, i64 40, !dbg !3649
  %24 = load i64, ptr %ptradd6, align 8, !dbg !3649
  %25 = extractvalue %"char[]" %21, 1, !dbg !3649
  %gt = icmp ugt i64 %24, %25, !dbg !3649
  %26 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3649
  br i1 %26, label %panic7, label %checkok10, !dbg !3649

checkok10:                                        ; preds = %cond.phi
  %27 = load i64, ptr %n, align 8, !dbg !3650
  %add = add i64 %24, %27, !dbg !3650
  %gt11 = icmp ugt i64 %24, %add, !dbg !3650
  %sub12 = sub i64 %add, %24, !dbg !3650
  %28 = call i1 @llvm.expect.i1(i1 %gt11, i1 false), !dbg !3650
  br i1 %28, label %panic13, label %checkok18, !dbg !3650

checkok18:                                        ; preds = %checkok10
  %lt19 = icmp ult i64 %25, %add, !dbg !3648
  %sub20 = sub i64 %add, 1, !dbg !3648
  %29 = call i1 @llvm.expect.i1(i1 %lt19, i1 false), !dbg !3648
  br i1 %29, label %panic21, label %checkok28, !dbg !3648

checkok28:                                        ; preds = %checkok18
  %size = sub i64 %add, %24, !dbg !3648
  %ptradd29 = getelementptr inbounds i8, ptr %22, i64 %24, !dbg !3648
  %30 = insertvalue %"char[]" undef, ptr %ptradd29, 0, !dbg !3648
  %31 = insertvalue %"char[]" %30, i64 %size, 1, !dbg !3648
  %32 = load %"char[]", ptr %bytes, align 8, !dbg !3651
  %33 = extractvalue %"char[]" %32, 0, !dbg !3651
  %34 = extractvalue %"char[]" %32, 1, !dbg !3652
  %gt30 = icmp ugt i64 0, %34, !dbg !3652
  %35 = call i1 @llvm.expect.i1(i1 %gt30, i1 false), !dbg !3652
  br i1 %35, label %panic31, label %checkok38, !dbg !3652

checkok38:                                        ; preds = %checkok28
  %36 = load i64, ptr %n, align 8, !dbg !3653
  %add39 = add i64 0, %36, !dbg !3653
  %gt40 = icmp ugt i64 0, %add39, !dbg !3653
  %sub41 = sub i64 %add39, 0, !dbg !3653
  %37 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !3653
  br i1 %37, label %panic42, label %checkok47, !dbg !3653

checkok47:                                        ; preds = %checkok38
  %lt48 = icmp ult i64 %34, %add39, !dbg !3651
  %sub49 = sub i64 %add39, 1, !dbg !3651
  %38 = call i1 @llvm.expect.i1(i1 %lt48, i1 false), !dbg !3651
  br i1 %38, label %panic50, label %checkok57, !dbg !3651

checkok57:                                        ; preds = %checkok47
  %size58 = sub i64 %add39, 0, !dbg !3651
  %39 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !3651
  %40 = insertvalue %"char[]" %39, i64 %size58, 1, !dbg !3651
  %41 = extractvalue %"char[]" %40, 0, !dbg !3651
  %42 = extractvalue %"char[]" %31, 0, !dbg !3651
  %43 = extractvalue %"char[]" %31, 1, !dbg !3651
  %44 = extractvalue %"char[]" %40, 1, !dbg !3651
  %neq = icmp ne i64 %44, %43, !dbg !3651
  %45 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !3651
  br i1 %45, label %panic59, label %checkok66, !dbg !3651

checkok66:                                        ; preds = %checkok57
  %46 = mul i64 %43, 1, !dbg !3651
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %41, ptr align 1 %42, i64 %46, i1 false), !dbg !3651
  %47 = load ptr, ptr %self, align 8, !dbg !3654
  %ptradd67 = getelementptr inbounds i8, ptr %47, i64 40, !dbg !3654
  %48 = load i64, ptr %ptradd67, align 8, !dbg !3654
  %49 = load i64, ptr %n, align 8, !dbg !3655
  %add68 = add i64 %48, %49, !dbg !3654
  store i64 %add68, ptr %ptradd67, align 8, !dbg !3654
  %50 = load ptr, ptr %self, align 8, !dbg !3656
  %ptradd69 = getelementptr inbounds i8, ptr %50, i64 56, !dbg !3656
  %51 = load i64, ptr %n, align 8, !dbg !3657
  %lt70 = icmp ult i64 0, %51, !dbg !3657
  %52 = zext i1 %lt70 to i8, !dbg !3657
  store i8 %52, ptr %ptradd69, align 8, !dbg !3657
  %53 = load ptr, ptr %self, align 8
  store ptr %53, ptr %self71, align 8
  %54 = load ptr, ptr %self71, align 8, !dbg !3658
  %neq72 = icmp ne ptr %54, null, !dbg !3658
  br i1 %neq72, label %assert_ok, label %assert_fail, !dbg !3658

assert_fail:                                      ; preds = %checkok66
  %55 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3658
  call void %55(ptr @.panic_msg.48, i64 32, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 138) #5, !dbg !3658
  unreachable, !dbg !3658

assert_ok:                                        ; preds = %checkok66
  %56 = load ptr, ptr %self71, align 8, !dbg !3662
  %ptradd73 = getelementptr inbounds i8, ptr %56, i64 40, !dbg !3662
  %57 = load i64, ptr %ptradd73, align 8, !dbg !3662
  %58 = load ptr, ptr %self71, align 8, !dbg !3663
  %ptradd74 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !3663
  %59 = load i64, ptr %ptradd74, align 8, !dbg !3663
  %ge = icmp uge i64 %57, %59, !dbg !3662
  br i1 %ge, label %if.then75, label %if.exit163, !dbg !3662

if.then75:                                        ; preds = %assert_ok
    #dbg_declare(ptr %readable76, !3664, !DIExpression(), !3666)
  %60 = load ptr, ptr %self71, align 8, !dbg !3667
  %ptradd77 = getelementptr inbounds i8, ptr %60, i64 48, !dbg !3667
  %61 = load i64, ptr %ptradd77, align 8, !dbg !3667
  %62 = load ptr, ptr %self71, align 8, !dbg !3668
  %ptradd78 = getelementptr inbounds i8, ptr %62, i64 40, !dbg !3668
  %63 = load i64, ptr %ptradd78, align 8, !dbg !3668
  %sub79 = sub i64 %61, %63, !dbg !3667
  store i64 %sub79, ptr %readable76, align 8, !dbg !3667
  %64 = load ptr, ptr %self71, align 8, !dbg !3669
  %ptradd80 = getelementptr inbounds i8, ptr %64, i64 24, !dbg !3669
  %65 = load %"char[]", ptr %ptradd80, align 8, !dbg !3669
  %66 = extractvalue %"char[]" %65, 0, !dbg !3669
  %67 = load ptr, ptr %self71, align 8, !dbg !3670
  %ptradd81 = getelementptr inbounds i8, ptr %67, i64 40, !dbg !3670
  %68 = load i64, ptr %ptradd81, align 8, !dbg !3670
  %sub82 = sub i64 %68, 1, !dbg !3670
  %69 = extractvalue %"char[]" %65, 1, !dbg !3670
  %gt83 = icmp sgt i64 %sub82, %69, !dbg !3670
  %70 = call i1 @llvm.expect.i1(i1 %gt83, i1 false), !dbg !3670
  br i1 %70, label %panic84, label %checkok91, !dbg !3670

checkok91:                                        ; preds = %if.then75
  %underflow = icmp slt i64 %sub82, 0, !dbg !3669
  %71 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !3669
  br i1 %71, label %panic92, label %checkok97, !dbg !3669

checkok97:                                        ; preds = %checkok91
  %72 = load i64, ptr %readable76, align 8, !dbg !3671
  %add98 = add i64 1, %72, !dbg !3672
  %add99 = add i64 %sub82, %add98, !dbg !3672
  %gt100 = icmp sgt i64 %sub82, %add99, !dbg !3672
  %sub101 = sub i64 %add99, %sub82, !dbg !3672
  %73 = call i1 @llvm.expect.i1(i1 %gt100, i1 false), !dbg !3672
  br i1 %73, label %panic102, label %checkok107, !dbg !3672

checkok107:                                       ; preds = %checkok97
  %lt108 = icmp slt i64 %69, %add99, !dbg !3669
  %sub109 = sub i64 %add99, 1, !dbg !3669
  %74 = call i1 @llvm.expect.i1(i1 %lt108, i1 false), !dbg !3669
  br i1 %74, label %panic110, label %checkok117, !dbg !3669

checkok117:                                       ; preds = %checkok107
  %size118 = sub i64 %add99, %sub82, !dbg !3669
  %ptradd119 = getelementptr inbounds i8, ptr %66, i64 %sub82, !dbg !3669
  %75 = insertvalue %"char[]" undef, ptr %ptradd119, 0, !dbg !3669
  %76 = insertvalue %"char[]" %75, i64 %size118, 1, !dbg !3669
  %77 = load ptr, ptr %self71, align 8, !dbg !3673
  %ptradd120 = getelementptr inbounds i8, ptr %77, i64 24, !dbg !3673
  %78 = load %"char[]", ptr %ptradd120, align 8, !dbg !3673
  %79 = extractvalue %"char[]" %78, 0, !dbg !3673
  %80 = extractvalue %"char[]" %78, 1, !dbg !3674
  %gt121 = icmp sgt i64 0, %80, !dbg !3674
  %81 = call i1 @llvm.expect.i1(i1 %gt121, i1 false), !dbg !3674
  br i1 %81, label %panic122, label %checkok129, !dbg !3674

checkok129:                                       ; preds = %checkok117
  %82 = load i64, ptr %readable76, align 8, !dbg !3675
  %add130 = add i64 1, %82, !dbg !3676
  %add131 = add i64 0, %add130, !dbg !3676
  %gt132 = icmp sgt i64 0, %add131, !dbg !3676
  %sub133 = sub i64 %add131, 0, !dbg !3676
  %83 = call i1 @llvm.expect.i1(i1 %gt132, i1 false), !dbg !3676
  br i1 %83, label %panic134, label %checkok139, !dbg !3676

checkok139:                                       ; preds = %checkok129
  %lt140 = icmp slt i64 %80, %add131, !dbg !3673
  %sub141 = sub i64 %add131, 1, !dbg !3673
  %84 = call i1 @llvm.expect.i1(i1 %lt140, i1 false), !dbg !3673
  br i1 %84, label %panic142, label %checkok149, !dbg !3673

checkok149:                                       ; preds = %checkok139
  %size150 = sub i64 %add131, 0, !dbg !3673
  %85 = insertvalue %"char[]" undef, ptr %79, 0, !dbg !3673
  %86 = insertvalue %"char[]" %85, i64 %size150, 1, !dbg !3673
  %87 = extractvalue %"char[]" %86, 0, !dbg !3673
  %88 = extractvalue %"char[]" %76, 0, !dbg !3673
  %89 = extractvalue %"char[]" %76, 1, !dbg !3673
  %90 = extractvalue %"char[]" %86, 1, !dbg !3673
  %neq151 = icmp ne i64 %90, %89, !dbg !3673
  %91 = call i1 @llvm.expect.i1(i1 %neq151, i1 false), !dbg !3673
  br i1 %91, label %panic152, label %checkok159, !dbg !3673

checkok159:                                       ; preds = %checkok149
  %92 = mul i64 %89, 1, !dbg !3673
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %87, ptr align 1 %88, i64 %92, i1 false), !dbg !3673
  %93 = load ptr, ptr %self71, align 8, !dbg !3677
  %ptradd160 = getelementptr inbounds i8, ptr %93, i64 48, !dbg !3677
  %94 = load i64, ptr %readable76, align 8, !dbg !3678
  %add161 = add i64 1, %94, !dbg !3679
  store i64 %add161, ptr %ptradd160, align 8, !dbg !3679
  %95 = load ptr, ptr %self71, align 8, !dbg !3680
  %ptradd162 = getelementptr inbounds i8, ptr %95, i64 40, !dbg !3680
  store i64 1, ptr %ptradd162, align 8, !dbg !3681
  br label %if.exit163, !dbg !3681

if.exit163:                                       ; preds = %checkok159, %assert_ok
  %96 = load i64, ptr %n, align 8, !dbg !3682
  store i64 %96, ptr %0, align 8, !dbg !3682
  ret i64 0, !dbg !3682

panic:                                            ; preds = %entry
  %97 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3625
  call void %97(ptr @.panic_msg, i64 62, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 65) #5, !dbg !3625
  unreachable, !dbg !3625

panic7:                                           ; preds = %cond.phi
  store i64 %25, ptr %taddr, align 8
  %98 = insertvalue %any undef, ptr %taddr, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr8, align 8
  %100 = insertvalue %any undef, ptr %taddr8, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %99, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %101, ptr %ptradd9, align 16
  %102 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3648
  unreachable, !dbg !3648

panic13:                                          ; preds = %checkok10
  store i64 %sub12, ptr %taddr14, align 8
  %103 = insertvalue %any undef, ptr %taddr14, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %104, ptr %varargslots15, align 16
  %105 = insertvalue %"any[]" undef, ptr %varargslots15, 0
  %"$$temp16" = insertvalue %"any[]" %105, i64 1, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg17) #5, !dbg !3648
  unreachable, !dbg !3648

panic21:                                          ; preds = %checkok18
  store i64 %sub20, ptr %taddr22, align 8
  %106 = insertvalue %any undef, ptr %taddr22, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr23, align 8
  %108 = insertvalue %any undef, ptr %taddr23, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %107, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %109, ptr %ptradd25, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !3648
  unreachable, !dbg !3648

panic31:                                          ; preds = %checkok28
  store i64 %34, ptr %taddr32, align 8
  %111 = insertvalue %any undef, ptr %taddr32, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr33, align 8
  %113 = insertvalue %any undef, ptr %taddr33, 0
  %114 = insertvalue %any %113, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %112, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %114, ptr %ptradd35, align 16
  %115 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %115, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg37) #5, !dbg !3651
  unreachable, !dbg !3651

panic42:                                          ; preds = %checkok38
  store i64 %sub41, ptr %taddr43, align 8
  %116 = insertvalue %any undef, ptr %taddr43, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %117, ptr %varargslots44, align 16
  %118 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp45" = insertvalue %"any[]" %118, i64 1, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg46) #5, !dbg !3651
  unreachable, !dbg !3651

panic50:                                          ; preds = %checkok47
  store i64 %sub49, ptr %taddr51, align 8
  %119 = insertvalue %any undef, ptr %taddr51, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr52, align 8
  %121 = insertvalue %any undef, ptr %taddr52, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %120, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %122, ptr %ptradd54, align 16
  %123 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %123, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg56) #5, !dbg !3651
  unreachable, !dbg !3651

panic59:                                          ; preds = %checkok57
  store i64 %44, ptr %taddr60, align 8
  %124 = insertvalue %any undef, ptr %taddr60, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr61, align 8
  %126 = insertvalue %any undef, ptr %taddr61, 0
  %127 = insertvalue %any %126, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %125, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %127, ptr %ptradd63, align 16
  %128 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %128, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.108, i64 38, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg65) #5, !dbg !3651
  unreachable, !dbg !3651

panic84:                                          ; preds = %if.then75
  store i64 %69, ptr %taddr85, align 8
  %129 = insertvalue %any undef, ptr %taddr85, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub82, ptr %taddr86, align 8
  %131 = insertvalue %any undef, ptr %taddr86, 0
  %132 = insertvalue %any %131, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %130, ptr %varargslots87, align 16
  %ptradd88 = getelementptr inbounds i8, ptr %varargslots87, i64 16
  store %any %132, ptr %ptradd88, align 16
  %133 = insertvalue %"any[]" undef, ptr %varargslots87, 0
  %"$$temp89" = insertvalue %"any[]" %133, i64 2, 1
  store %"any[]" %"$$temp89", ptr %indirectarg90, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg90) #5, !dbg !3669
  unreachable, !dbg !3669

panic92:                                          ; preds = %checkok91
  store i64 %sub82, ptr %taddr93, align 8
  %134 = insertvalue %any undef, ptr %taddr93, 0
  %135 = insertvalue %any %134, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %135, ptr %varargslots94, align 16
  %136 = insertvalue %"any[]" undef, ptr %varargslots94, 0
  %"$$temp95" = insertvalue %"any[]" %136, i64 1, 1
  store %"any[]" %"$$temp95", ptr %indirectarg96, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.154, i64 22, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg96) #5, !dbg !3670
  unreachable, !dbg !3670

panic102:                                         ; preds = %checkok97
  store i64 %sub101, ptr %taddr103, align 8
  %137 = insertvalue %any undef, ptr %taddr103, 0
  %138 = insertvalue %any %137, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %138, ptr %varargslots104, align 16
  %139 = insertvalue %"any[]" undef, ptr %varargslots104, 0
  %"$$temp105" = insertvalue %"any[]" %139, i64 1, 1
  store %"any[]" %"$$temp105", ptr %indirectarg106, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg106) #5, !dbg !3669
  unreachable, !dbg !3669

panic110:                                         ; preds = %checkok107
  store i64 %sub109, ptr %taddr111, align 8
  %140 = insertvalue %any undef, ptr %taddr111, 0
  %141 = insertvalue %any %140, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %69, ptr %taddr112, align 8
  %142 = insertvalue %any undef, ptr %taddr112, 0
  %143 = insertvalue %any %142, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %141, ptr %varargslots113, align 16
  %ptradd114 = getelementptr inbounds i8, ptr %varargslots113, i64 16
  store %any %143, ptr %ptradd114, align 16
  %144 = insertvalue %"any[]" undef, ptr %varargslots113, 0
  %"$$temp115" = insertvalue %"any[]" %144, i64 2, 1
  store %"any[]" %"$$temp115", ptr %indirectarg116, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg116) #5, !dbg !3669
  unreachable, !dbg !3669

panic122:                                         ; preds = %checkok117
  store i64 %80, ptr %taddr123, align 8
  %145 = insertvalue %any undef, ptr %taddr123, 0
  %146 = insertvalue %any %145, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr124, align 8
  %147 = insertvalue %any undef, ptr %taddr124, 0
  %148 = insertvalue %any %147, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %146, ptr %varargslots125, align 16
  %ptradd126 = getelementptr inbounds i8, ptr %varargslots125, i64 16
  store %any %148, ptr %ptradd126, align 16
  %149 = insertvalue %"any[]" undef, ptr %varargslots125, 0
  %"$$temp127" = insertvalue %"any[]" %149, i64 2, 1
  store %"any[]" %"$$temp127", ptr %indirectarg128, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg128) #5, !dbg !3673
  unreachable, !dbg !3673

panic134:                                         ; preds = %checkok129
  store i64 %sub133, ptr %taddr135, align 8
  %150 = insertvalue %any undef, ptr %taddr135, 0
  %151 = insertvalue %any %150, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %151, ptr %varargslots136, align 16
  %152 = insertvalue %"any[]" undef, ptr %varargslots136, 0
  %"$$temp137" = insertvalue %"any[]" %152, i64 1, 1
  store %"any[]" %"$$temp137", ptr %indirectarg138, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg138) #5, !dbg !3673
  unreachable, !dbg !3673

panic142:                                         ; preds = %checkok139
  store i64 %sub141, ptr %taddr143, align 8
  %153 = insertvalue %any undef, ptr %taddr143, 0
  %154 = insertvalue %any %153, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %80, ptr %taddr144, align 8
  %155 = insertvalue %any undef, ptr %taddr144, 0
  %156 = insertvalue %any %155, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %154, ptr %varargslots145, align 16
  %ptradd146 = getelementptr inbounds i8, ptr %varargslots145, i64 16
  store %any %156, ptr %ptradd146, align 16
  %157 = insertvalue %"any[]" undef, ptr %varargslots145, 0
  %"$$temp147" = insertvalue %"any[]" %157, i64 2, 1
  store %"any[]" %"$$temp147", ptr %indirectarg148, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg148) #5, !dbg !3673
  unreachable, !dbg !3673

panic152:                                         ; preds = %checkok149
  store i64 %90, ptr %taddr153, align 8
  %158 = insertvalue %any undef, ptr %taddr153, 0
  %159 = insertvalue %any %158, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %89, ptr %taddr154, align 8
  %160 = insertvalue %any undef, ptr %taddr154, 0
  %161 = insertvalue %any %160, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %159, ptr %varargslots155, align 16
  %ptradd156 = getelementptr inbounds i8, ptr %varargslots155, i64 16
  store %any %161, ptr %ptradd156, align 16
  %162 = insertvalue %"any[]" undef, ptr %varargslots155, 0
  %"$$temp157" = insertvalue %"any[]" %162, i64 2, 1
  store %"any[]" %"$$temp157", ptr %indirectarg158, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.108, i64 38, ptr @.file.151, i64 13, ptr @.func.118, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg158) #5, !dbg !3673
  unreachable, !dbg !3673
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.read_byte(ptr %0, ptr %1) #0 comdat !dbg !3683 {
entry:
  %self = alloca ptr, align 8
  %readable = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %self13 = alloca ptr, align 8
  %readable18 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %varargslots35 = alloca [1 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr44 = alloca i64, align 8
  %varargslots45 = alloca [1 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %taddr51 = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr62 = alloca i64, align 8
  %taddr63 = alloca i64, align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr74 = alloca i64, align 8
  %varargslots75 = alloca [1 x %any], align 16
  %indirectarg77 = alloca %"any[]", align 8
  %taddr82 = alloca i64, align 8
  %taddr83 = alloca i64, align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca i64, align 8
  %varargslots94 = alloca [2 x %any], align 16
  %indirectarg97 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !3686
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3686
  br i1 %3, label %panic, label %checkok, !dbg !3686

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3687, !DIExpression(), !3688)
    #dbg_declare(ptr %readable, !3689, !DIExpression(), !3690)
  %4 = load ptr, ptr %self, align 8, !dbg !3691
  %ptradd = getelementptr inbounds i8, ptr %4, i64 48, !dbg !3691
  %5 = load i64, ptr %ptradd, align 8, !dbg !3691
  %6 = load ptr, ptr %self, align 8, !dbg !3692
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !3692
  %7 = load i64, ptr %ptradd1, align 8, !dbg !3692
  %sub = sub i64 %5, %7, !dbg !3691
  store i64 %sub, ptr %readable, align 8, !dbg !3691
  %8 = load i64, ptr %readable, align 8, !dbg !3693
  %eq = icmp eq i64 0, %8, !dbg !3693
  br i1 %eq, label %if.then, label %if.exit, !dbg !3693

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !3694
  %ptradd2 = getelementptr inbounds i8, ptr %9, i64 56, !dbg !3694
  store i8 0, ptr %ptradd2, align 8, !dbg !3696
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !3697

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %c, !3698, !DIExpression(), !3699)
  %10 = load ptr, ptr %self, align 8, !dbg !3700
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 24, !dbg !3700
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !3700
  %11 = load i64, ptr %ptradd4, align 8, !dbg !3700
  %12 = load ptr, ptr %ptradd3, align 8, !dbg !3700
  %13 = load ptr, ptr %self, align 8, !dbg !3701
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 40, !dbg !3701
  %14 = load i64, ptr %ptradd5, align 8, !dbg !3701
  %ge = icmp uge i64 %14, %11, !dbg !3701
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3701
  br i1 %15, label %panic6, label %checkok9, !dbg !3701

checkok9:                                         ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !3701
  %16 = load i8, ptr %ptradd10, align 1, !dbg !3701
  store i8 %16, ptr %c, align 1, !dbg !3701
  %17 = load ptr, ptr %self, align 8, !dbg !3702
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 40, !dbg !3702
  %18 = load i64, ptr %ptradd11, align 8, !dbg !3702
  %add = add i64 %18, 1, !dbg !3702
  store i64 %add, ptr %ptradd11, align 8, !dbg !3702
  %19 = load ptr, ptr %self, align 8, !dbg !3703
  %ptradd12 = getelementptr inbounds i8, ptr %19, i64 56, !dbg !3703
  store i8 1, ptr %ptradd12, align 8, !dbg !3704
  %20 = load ptr, ptr %self, align 8
  store ptr %20, ptr %self13, align 8
  %21 = load ptr, ptr %self13, align 8, !dbg !3705
  %neq = icmp ne ptr %21, null, !dbg !3705
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !3705

assert_fail:                                      ; preds = %checkok9
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3705
  call void %22(ptr @.panic_msg.48, i64 32, ptr @.file.151, i64 13, ptr @.func.123, i64 9, i32 138) #5, !dbg !3705
  unreachable, !dbg !3705

assert_ok:                                        ; preds = %checkok9
  %23 = load ptr, ptr %self13, align 8, !dbg !3709
  %ptradd14 = getelementptr inbounds i8, ptr %23, i64 40, !dbg !3709
  %24 = load i64, ptr %ptradd14, align 8, !dbg !3709
  %25 = load ptr, ptr %self13, align 8, !dbg !3710
  %ptradd15 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !3710
  %26 = load i64, ptr %ptradd15, align 8, !dbg !3710
  %ge16 = icmp uge i64 %24, %26, !dbg !3709
  br i1 %ge16, label %if.then17, label %if.exit102, !dbg !3709

if.then17:                                        ; preds = %assert_ok
    #dbg_declare(ptr %readable18, !3711, !DIExpression(), !3713)
  %27 = load ptr, ptr %self13, align 8, !dbg !3714
  %ptradd19 = getelementptr inbounds i8, ptr %27, i64 48, !dbg !3714
  %28 = load i64, ptr %ptradd19, align 8, !dbg !3714
  %29 = load ptr, ptr %self13, align 8, !dbg !3715
  %ptradd20 = getelementptr inbounds i8, ptr %29, i64 40, !dbg !3715
  %30 = load i64, ptr %ptradd20, align 8, !dbg !3715
  %sub21 = sub i64 %28, %30, !dbg !3714
  store i64 %sub21, ptr %readable18, align 8, !dbg !3714
  %31 = load ptr, ptr %self13, align 8, !dbg !3716
  %ptradd22 = getelementptr inbounds i8, ptr %31, i64 24, !dbg !3716
  %32 = load %"char[]", ptr %ptradd22, align 8, !dbg !3716
  %33 = extractvalue %"char[]" %32, 0, !dbg !3716
  %34 = load ptr, ptr %self13, align 8, !dbg !3717
  %ptradd23 = getelementptr inbounds i8, ptr %34, i64 40, !dbg !3717
  %35 = load i64, ptr %ptradd23, align 8, !dbg !3717
  %sub24 = sub i64 %35, 1, !dbg !3717
  %36 = extractvalue %"char[]" %32, 1, !dbg !3717
  %gt = icmp sgt i64 %sub24, %36, !dbg !3717
  %37 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3717
  br i1 %37, label %panic25, label %checkok32, !dbg !3717

checkok32:                                        ; preds = %if.then17
  %underflow = icmp slt i64 %sub24, 0, !dbg !3716
  %38 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !3716
  br i1 %38, label %panic33, label %checkok38, !dbg !3716

checkok38:                                        ; preds = %checkok32
  %39 = load i64, ptr %readable18, align 8, !dbg !3718
  %add39 = add i64 1, %39, !dbg !3719
  %add40 = add i64 %sub24, %add39, !dbg !3719
  %gt41 = icmp sgt i64 %sub24, %add40, !dbg !3719
  %sub42 = sub i64 %add40, %sub24, !dbg !3719
  %40 = call i1 @llvm.expect.i1(i1 %gt41, i1 false), !dbg !3719
  br i1 %40, label %panic43, label %checkok48, !dbg !3719

checkok48:                                        ; preds = %checkok38
  %lt = icmp slt i64 %36, %add40, !dbg !3716
  %sub49 = sub i64 %add40, 1, !dbg !3716
  %41 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3716
  br i1 %41, label %panic50, label %checkok57, !dbg !3716

checkok57:                                        ; preds = %checkok48
  %size = sub i64 %add40, %sub24, !dbg !3716
  %ptradd58 = getelementptr inbounds i8, ptr %33, i64 %sub24, !dbg !3716
  %42 = insertvalue %"char[]" undef, ptr %ptradd58, 0, !dbg !3716
  %43 = insertvalue %"char[]" %42, i64 %size, 1, !dbg !3716
  %44 = load ptr, ptr %self13, align 8, !dbg !3720
  %ptradd59 = getelementptr inbounds i8, ptr %44, i64 24, !dbg !3720
  %45 = load %"char[]", ptr %ptradd59, align 8, !dbg !3720
  %46 = extractvalue %"char[]" %45, 0, !dbg !3720
  %47 = extractvalue %"char[]" %45, 1, !dbg !3721
  %gt60 = icmp sgt i64 0, %47, !dbg !3721
  %48 = call i1 @llvm.expect.i1(i1 %gt60, i1 false), !dbg !3721
  br i1 %48, label %panic61, label %checkok68, !dbg !3721

checkok68:                                        ; preds = %checkok57
  %49 = load i64, ptr %readable18, align 8, !dbg !3722
  %add69 = add i64 1, %49, !dbg !3723
  %add70 = add i64 0, %add69, !dbg !3723
  %gt71 = icmp sgt i64 0, %add70, !dbg !3723
  %sub72 = sub i64 %add70, 0, !dbg !3723
  %50 = call i1 @llvm.expect.i1(i1 %gt71, i1 false), !dbg !3723
  br i1 %50, label %panic73, label %checkok78, !dbg !3723

checkok78:                                        ; preds = %checkok68
  %lt79 = icmp slt i64 %47, %add70, !dbg !3720
  %sub80 = sub i64 %add70, 1, !dbg !3720
  %51 = call i1 @llvm.expect.i1(i1 %lt79, i1 false), !dbg !3720
  br i1 %51, label %panic81, label %checkok88, !dbg !3720

checkok88:                                        ; preds = %checkok78
  %size89 = sub i64 %add70, 0, !dbg !3720
  %52 = insertvalue %"char[]" undef, ptr %46, 0, !dbg !3720
  %53 = insertvalue %"char[]" %52, i64 %size89, 1, !dbg !3720
  %54 = extractvalue %"char[]" %53, 0, !dbg !3720
  %55 = extractvalue %"char[]" %43, 0, !dbg !3720
  %56 = extractvalue %"char[]" %43, 1, !dbg !3720
  %57 = extractvalue %"char[]" %53, 1, !dbg !3720
  %neq90 = icmp ne i64 %57, %56, !dbg !3720
  %58 = call i1 @llvm.expect.i1(i1 %neq90, i1 false), !dbg !3720
  br i1 %58, label %panic91, label %checkok98, !dbg !3720

checkok98:                                        ; preds = %checkok88
  %59 = mul i64 %56, 1, !dbg !3720
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %54, ptr align 1 %55, i64 %59, i1 false), !dbg !3720
  %60 = load ptr, ptr %self13, align 8, !dbg !3724
  %ptradd99 = getelementptr inbounds i8, ptr %60, i64 48, !dbg !3724
  %61 = load i64, ptr %readable18, align 8, !dbg !3725
  %add100 = add i64 1, %61, !dbg !3726
  store i64 %add100, ptr %ptradd99, align 8, !dbg !3726
  %62 = load ptr, ptr %self13, align 8, !dbg !3727
  %ptradd101 = getelementptr inbounds i8, ptr %62, i64 40, !dbg !3727
  store i64 1, ptr %ptradd101, align 8, !dbg !3728
  br label %if.exit102, !dbg !3728

if.exit102:                                       ; preds = %checkok98, %assert_ok
  %63 = load i8, ptr %c, align 1, !dbg !3729
  store i8 %63, ptr %0, align 1, !dbg !3729
  ret i64 0, !dbg !3729

panic:                                            ; preds = %entry
  %64 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3688
  call void %64(ptr @.panic_msg, i64 62, ptr @.file.151, i64 13, ptr @.func.123, i64 9, i32 81) #5, !dbg !3688
  unreachable, !dbg !3688

panic6:                                           ; preds = %if.exit
  store i64 %11, ptr %taddr, align 8
  %65 = insertvalue %any undef, ptr %taddr, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr7, align 8
  %67 = insertvalue %any undef, ptr %taddr7, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %66, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %68, ptr %ptradd8, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.151, i64 13, ptr @.func.123, i64 9, i32 89, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3701
  unreachable, !dbg !3701

panic25:                                          ; preds = %if.then17
  store i64 %36, ptr %taddr26, align 8
  %70 = insertvalue %any undef, ptr %taddr26, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub24, ptr %taddr27, align 8
  %72 = insertvalue %any undef, ptr %taddr27, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %71, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %73, ptr %ptradd29, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.151, i64 13, ptr @.func.123, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg31) #5, !dbg !3716
  unreachable, !dbg !3716

panic33:                                          ; preds = %checkok32
  store i64 %sub24, ptr %taddr34, align 8
  %75 = insertvalue %any undef, ptr %taddr34, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %76, ptr %varargslots35, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp36" = insertvalue %"any[]" %77, i64 1, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.154, i64 22, ptr @.file.151, i64 13, ptr @.func.123, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg37) #5, !dbg !3717
  unreachable, !dbg !3717

panic43:                                          ; preds = %checkok38
  store i64 %sub42, ptr %taddr44, align 8
  %78 = insertvalue %any undef, ptr %taddr44, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %79, ptr %varargslots45, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp46" = insertvalue %"any[]" %80, i64 1, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.151, i64 13, ptr @.func.123, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg47) #5, !dbg !3716
  unreachable, !dbg !3716

panic50:                                          ; preds = %checkok48
  store i64 %sub49, ptr %taddr51, align 8
  %81 = insertvalue %any undef, ptr %taddr51, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %36, ptr %taddr52, align 8
  %83 = insertvalue %any undef, ptr %taddr52, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %82, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %84, ptr %ptradd54, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.151, i64 13, ptr @.func.123, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg56) #5, !dbg !3716
  unreachable, !dbg !3716

panic61:                                          ; preds = %checkok57
  store i64 %47, ptr %taddr62, align 8
  %86 = insertvalue %any undef, ptr %taddr62, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr63, align 8
  %88 = insertvalue %any undef, ptr %taddr63, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %87, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %89, ptr %ptradd65, align 16
  %90 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %90, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.151, i64 13, ptr @.func.123, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg67) #5, !dbg !3720
  unreachable, !dbg !3720

panic73:                                          ; preds = %checkok68
  store i64 %sub72, ptr %taddr74, align 8
  %91 = insertvalue %any undef, ptr %taddr74, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %92, ptr %varargslots75, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp76" = insertvalue %"any[]" %93, i64 1, 1
  store %"any[]" %"$$temp76", ptr %indirectarg77, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.151, i64 13, ptr @.func.123, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg77) #5, !dbg !3720
  unreachable, !dbg !3720

panic81:                                          ; preds = %checkok78
  store i64 %sub80, ptr %taddr82, align 8
  %94 = insertvalue %any undef, ptr %taddr82, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %47, ptr %taddr83, align 8
  %96 = insertvalue %any undef, ptr %taddr83, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %95, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %97, ptr %ptradd85, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.151, i64 13, ptr @.func.123, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg87) #5, !dbg !3720
  unreachable, !dbg !3720

panic91:                                          ; preds = %checkok88
  store i64 %57, ptr %taddr92, align 8
  %99 = insertvalue %any undef, ptr %taddr92, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr93, align 8
  %101 = insertvalue %any undef, ptr %taddr93, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %100, ptr %varargslots94, align 16
  %ptradd95 = getelementptr inbounds i8, ptr %varargslots94, i64 16
  store %any %102, ptr %ptradd95, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots94, 0
  %"$$temp96" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp96", ptr %indirectarg97, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.108, i64 38, ptr @.file.151, i64 13, ptr @.func.123, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg97) #5, !dbg !3720
  unreachable, !dbg !3720
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.pushback_byte(ptr %0) #0 comdat !dbg !3730 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3733
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3733
  br i1 %2, label %panic, label %checkok, !dbg !3733

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3734, !DIExpression(), !3735)
  %3 = load ptr, ptr %self, align 8, !dbg !3736
  %ptradd = getelementptr inbounds i8, ptr %3, i64 56, !dbg !3736
  %4 = load i8, ptr %ptradd, align 8, !dbg !3736
  %5 = trunc i8 %4 to i1, !dbg !3736
  %not = xor i1 %5, true, !dbg !3736
  br i1 %not, label %if.then, label %if.exit, !dbg !3736

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @std.io.EOF to i64), !dbg !3737

if.exit:                                          ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !3738
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !3738
  %7 = load i64, ptr %ptradd1, align 8, !dbg !3738
  %lt = icmp ult i64 0, %7, !dbg !3738
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3738

assert_fail:                                      ; preds = %if.exit
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3738
  call void %8(ptr @.panic_msg.155, i64 34, ptr @.file.151, i64 13, ptr @.func.124, i64 13, i32 102) #5, !dbg !3738
  unreachable, !dbg !3738

assert_ok:                                        ; preds = %if.exit
  %9 = load ptr, ptr %self, align 8, !dbg !3739
  %ptradd2 = getelementptr inbounds i8, ptr %9, i64 40, !dbg !3739
  %10 = load i64, ptr %ptradd2, align 8, !dbg !3739
  %sub = sub i64 %10, 1, !dbg !3739
  store i64 %sub, ptr %ptradd2, align 8, !dbg !3739
  %11 = load ptr, ptr %self, align 8, !dbg !3740
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 56, !dbg !3740
  store i8 0, ptr %ptradd3, align 8, !dbg !3741
  ret i64 0, !dbg !3741

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3735
  call void %12(ptr @.panic_msg, i64 62, ptr @.file.151, i64 13, ptr @.func.124, i64 13, i32 99) #5, !dbg !3735
  unreachable, !dbg !3735
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.seek(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !3742 {
entry:
  %self = alloca ptr, align 8
  %offset = alloca i64, align 8
  %seek = alloca i32, align 4
  %switch = alloca i32, align 4
  %reterr = alloca i64, align 8
  %reterr38 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !3745
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3745
  br i1 %5, label %panic, label %checkok, !dbg !3745

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3746, !DIExpression(), !3747)
  store i64 %2, ptr %offset, align 8
    #dbg_declare(ptr %offset, !3748, !DIExpression(), !3749)
  store i32 %3, ptr %seek, align 4
    #dbg_declare(ptr %seek, !3750, !DIExpression(), !3751)
  %6 = load i32, ptr %seek, align 4
  store i32 %6, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i32, ptr %switch, align 4
  switch i32 %7, label %switch.exit [
    i32 0, label %switch.case
    i32 1, label %switch.case2
    i32 2, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load i64, ptr %offset, align 8, !dbg !3752
  %lt = icmp slt i64 %8, 0, !dbg !3752
  br i1 %lt, label %or.phi, label %or.rhs, !dbg !3752

or.rhs:                                           ; preds = %switch.case
  %9 = load i64, ptr %offset, align 8, !dbg !3755
  %10 = load ptr, ptr %self, align 8, !dbg !3756
  %ptradd = getelementptr inbounds i8, ptr %10, i64 48, !dbg !3756
  %11 = load i64, ptr %ptradd, align 8, !dbg !3756
  %gt = icmp sgt i64 %9, %11, !dbg !3755
  %check = icmp sge i64 %11, 0, !dbg !3755
  %siui-gt = and i1 %check, %gt, !dbg !3755
  br label %or.phi, !dbg !3755

or.phi:                                           ; preds = %or.rhs, %switch.case
  %val = phi i1 [ true, %switch.case ], [ %siui-gt, %or.rhs ], !dbg !3755
  br i1 %val, label %if.then, label %if.exit, !dbg !3755

if.then:                                          ; preds = %or.phi
  ret i64 ptrtoint (ptr @std.io.INVALID_POSITION to i64), !dbg !3757

if.exit:                                          ; preds = %or.phi
  %12 = load ptr, ptr %self, align 8, !dbg !3758
  %ptradd1 = getelementptr inbounds i8, ptr %12, i64 40, !dbg !3758
  %13 = load i64, ptr %offset, align 8, !dbg !3759
  store i64 %13, ptr %ptradd1, align 8, !dbg !3759
  %14 = load i64, ptr %offset, align 8, !dbg !3760
  store i64 %14, ptr %0, align 8, !dbg !3760
  ret i64 0, !dbg !3760

switch.case2:                                     ; preds = %switch.entry
  %15 = load i64, ptr %offset, align 8, !dbg !3761
  %lt3 = icmp slt i64 %15, 0, !dbg !3761
  br i1 %lt3, label %and.rhs, label %and.phi, !dbg !3761

and.rhs:                                          ; preds = %switch.case2
  %16 = load ptr, ptr %self, align 8, !dbg !3763
  %ptradd4 = getelementptr inbounds i8, ptr %16, i64 40, !dbg !3763
  %17 = load i64, ptr %ptradd4, align 8, !dbg !3763
  %18 = load i64, ptr %offset, align 8, !dbg !3764
  %neg = sub i64 0, %18, !dbg !3764
  %gt5 = icmp sgt i64 %neg, %17, !dbg !3763
  %check6 = icmp sge i64 %17, 0, !dbg !3763
  %siui-gt7 = and i1 %check6, %gt5, !dbg !3763
  br label %and.phi, !dbg !3763

and.phi:                                          ; preds = %and.rhs, %switch.case2
  %val8 = phi i1 [ false, %switch.case2 ], [ %siui-gt7, %and.rhs ], !dbg !3763
  br i1 %val8, label %or.phi19, label %or.rhs9, !dbg !3763

or.rhs9:                                          ; preds = %and.phi
  %19 = load i64, ptr %offset, align 8, !dbg !3765
  %gt10 = icmp sgt i64 %19, 0, !dbg !3765
  br i1 %gt10, label %and.rhs11, label %and.phi17, !dbg !3765

and.rhs11:                                        ; preds = %or.rhs9
  %20 = load ptr, ptr %self, align 8, !dbg !3766
  %ptradd12 = getelementptr inbounds i8, ptr %20, i64 40, !dbg !3766
  %21 = load i64, ptr %ptradd12, align 8, !dbg !3766
  %22 = load i64, ptr %offset, align 8, !dbg !3767
  %add = add i64 %21, %22, !dbg !3766
  %23 = load ptr, ptr %self, align 8, !dbg !3768
  %ptradd13 = getelementptr inbounds i8, ptr %23, i64 48, !dbg !3768
  %24 = load i64, ptr %ptradd13, align 8, !dbg !3768
  %gt14 = icmp sgt i64 %add, %24, !dbg !3766
  %check15 = icmp sge i64 %24, 0, !dbg !3766
  %siui-gt16 = and i1 %check15, %gt14, !dbg !3766
  br label %and.phi17, !dbg !3766

and.phi17:                                        ; preds = %and.rhs11, %or.rhs9
  %val18 = phi i1 [ false, %or.rhs9 ], [ %siui-gt16, %and.rhs11 ], !dbg !3766
  br label %or.phi19, !dbg !3766

or.phi19:                                         ; preds = %and.phi17, %and.phi
  %val20 = phi i1 [ true, %and.phi ], [ %val18, %and.phi17 ], !dbg !3766
  br i1 %val20, label %if.then21, label %if.exit22, !dbg !3766

if.then21:                                        ; preds = %or.phi19
  ret i64 ptrtoint (ptr @std.io.INVALID_POSITION to i64), !dbg !3769

if.exit22:                                        ; preds = %or.phi19
  %25 = load ptr, ptr %self, align 8, !dbg !3770
  %ptradd23 = getelementptr inbounds i8, ptr %25, i64 40, !dbg !3770
  %26 = load i64, ptr %ptradd23, align 8, !dbg !3770
  %27 = load i64, ptr %offset, align 8, !dbg !3771
  %add24 = add i64 %26, %27, !dbg !3770
  store i64 %add24, ptr %ptradd23, align 8, !dbg !3770
  br label %switch.exit, !dbg !3770

switch.case25:                                    ; preds = %switch.entry
  %28 = load i64, ptr %offset, align 8, !dbg !3772
  %lt26 = icmp slt i64 %28, 0, !dbg !3772
  br i1 %lt26, label %or.phi32, label %or.rhs27, !dbg !3772

or.rhs27:                                         ; preds = %switch.case25
  %29 = load i64, ptr %offset, align 8, !dbg !3774
  %30 = load ptr, ptr %self, align 8, !dbg !3775
  %ptradd28 = getelementptr inbounds i8, ptr %30, i64 48, !dbg !3775
  %31 = load i64, ptr %ptradd28, align 8, !dbg !3775
  %gt29 = icmp sgt i64 %29, %31, !dbg !3774
  %check30 = icmp sge i64 %31, 0, !dbg !3774
  %siui-gt31 = and i1 %check30, %gt29, !dbg !3774
  br label %or.phi32, !dbg !3774

or.phi32:                                         ; preds = %or.rhs27, %switch.case25
  %val33 = phi i1 [ true, %switch.case25 ], [ %siui-gt31, %or.rhs27 ], !dbg !3774
  br i1 %val33, label %if.then34, label %if.exit35, !dbg !3774

if.then34:                                        ; preds = %or.phi32
  ret i64 ptrtoint (ptr @std.io.INVALID_POSITION to i64), !dbg !3776

if.exit35:                                        ; preds = %or.phi32
  %32 = load ptr, ptr %self, align 8, !dbg !3777
  %ptradd36 = getelementptr inbounds i8, ptr %32, i64 40, !dbg !3777
  %33 = load ptr, ptr %self, align 8, !dbg !3778
  %ptradd37 = getelementptr inbounds i8, ptr %33, i64 48, !dbg !3778
  %34 = load i64, ptr %ptradd37, align 8, !dbg !3778
  %35 = load i64, ptr %offset, align 8, !dbg !3779
  %sub = sub i64 %34, %35, !dbg !3778
  store i64 %sub, ptr %ptradd36, align 8, !dbg !3778
  br label %switch.exit, !dbg !3778

switch.exit:                                      ; preds = %if.exit35, %if.exit22, %switch.entry
  %36 = load ptr, ptr %self, align 8, !dbg !3780
  %ptradd39 = getelementptr inbounds i8, ptr %36, i64 40, !dbg !3780
  %37 = load i64, ptr %ptradd39, align 8, !dbg !3780
  store i64 %37, ptr %0, align 8, !dbg !3780
  ret i64 0, !dbg !3780

panic:                                            ; preds = %entry
  %38 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3747
  call void %38(ptr @.panic_msg, i64 62, ptr @.file.151, i64 13, ptr @.func.125, i64 4, i32 107) #5, !dbg !3747
  unreachable, !dbg !3747
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.available(ptr %0, ptr %1) #0 comdat !dbg !3781 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !3784
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3784
  br i1 %3, label %panic, label %checkok, !dbg !3784

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3785, !DIExpression(), !3786)
  %4 = load ptr, ptr %self, align 8, !dbg !3787
  %ptradd = getelementptr inbounds i8, ptr %4, i64 48, !dbg !3787
  %5 = load i64, ptr %ptradd, align 8, !dbg !3787
  %6 = load ptr, ptr %self, align 8, !dbg !3788
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !3788
  %7 = load i64, ptr %ptradd1, align 8, !dbg !3788
  %sub = sub i64 %5, %7, !dbg !3787
  store i64 %sub, ptr %0, align 8, !dbg !3787
  ret i64 0, !dbg !3787

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3786
  call void %8(ptr @.panic_msg, i64 62, ptr @.file.151, i64 13, ptr @.func.37, i64 9, i32 126) #5, !dbg !3786
  unreachable, !dbg !3786
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.ByteBuffer.grow(ptr %0, i64 %1) #0 comdat !dbg !3789 {
entry:
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %p = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %ptr2 = alloca ptr, align 8
  %new_size3 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %allocator4 = alloca %any, align 8
  %ptr5 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %x13 = alloca i64, align 8
  %.inlinecache24 = alloca ptr, align 8
  %.cachedtype25 = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %x36 = alloca i64, align 8
  %.inlinecache57 = alloca ptr, align 8
  %.cachedtype58 = alloca ptr, align 8
  %retparam67 = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr = alloca i64, align 8
  %varargslots76 = alloca [1 x %any], align 16
  %indirectarg78 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype58, align 8, !dbg !3792
  store ptr null, ptr %.cachedtype25, align 8, !dbg !3792
  store ptr null, ptr %.cachedtype, align 8, !dbg !3792
  %2 = icmp eq ptr %0, null, !dbg !3792
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3792
  br i1 %3, label %panic, label %checkok, !dbg !3792

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3793, !DIExpression(), !3794)
  store i64 %1, ptr %n, align 8
    #dbg_declare(ptr %n, !3795, !DIExpression(), !3796)
  %4 = load i64, ptr %n, align 8
  store i64 %4, ptr %x, align 8
    #dbg_declare(ptr %y, !3797, !DIExpression(), !3799)
  store i64 1, ptr %y, align 8, !dbg !3801
  br label %loop.cond, !dbg !3802

loop.cond:                                        ; preds = %loop.body, %checkok
  %5 = load i64, ptr %y, align 8, !dbg !3803
  %6 = load i64, ptr %x, align 8, !dbg !3805
  %lt = icmp ult i64 %5, %6, !dbg !3803
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3803

loop.body:                                        ; preds = %loop.cond
  %7 = load i64, ptr %y, align 8, !dbg !3806
  %8 = load i64, ptr %y, align 8, !dbg !3807
  %add = add i64 %7, %8, !dbg !3806
  store i64 %add, ptr %y, align 8, !dbg !3806
  br label %loop.cond, !dbg !3806

loop.exit:                                        ; preds = %loop.cond
  %9 = load i64, ptr %y, align 8, !dbg !3808
  store i64 %9, ptr %n, align 8, !dbg !3808
    #dbg_declare(ptr %p, !3809, !DIExpression(), !3810)
  %10 = load ptr, ptr %self, align 8, !dbg !3811
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %10, i32 16, i1 false)
  %11 = load ptr, ptr %self, align 8, !dbg !3812
  %ptradd = getelementptr inbounds i8, ptr %11, i64 24, !dbg !3812
  %12 = load ptr, ptr %ptradd, align 8
  store ptr %12, ptr %ptr, align 8
  %13 = load i64, ptr %n, align 8
  store i64 %13, ptr %new_size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %14 = load ptr, ptr %ptr, align 8
  store ptr %14, ptr %ptr2, align 8
  %15 = load i64, ptr %new_size, align 8
  store i64 %15, ptr %new_size3, align 8
  %16 = load i64, ptr %new_size3, align 8, !dbg !3813
  %i2nb = icmp eq i64 %16, 0, !dbg !3813
  br i1 %i2nb, label %if.then, label %if.exit10, !dbg !3813

if.then:                                          ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator1, i32 16, i1 false)
  %17 = load ptr, ptr %ptr2, align 8
  store ptr %17, ptr %ptr5, align 8
  %18 = load ptr, ptr %ptr5, align 8, !dbg !3818
  %i2nb6 = icmp eq ptr %18, null, !dbg !3818
  br i1 %i2nb6, label %if.then7, label %if.exit, !dbg !3818

if.then7:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !3822

if.exit:                                          ; preds = %if.then
  %19 = load ptr, ptr %ptr5, align 8, !dbg !3823
  %neq = icmp ne ptr %19, null, !dbg !3824
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !3824

assert_fail:                                      ; preds = %if.exit
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3824
  call void %20(ptr @.panic_msg.111, i64 75, ptr @.file.104, i64 16, ptr @.func.156, i64 4, i32 122) #5, !dbg !3824
  unreachable, !dbg !3824

assert_ok:                                        ; preds = %if.exit
  %ptradd8 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !3824
  %21 = load i64, ptr %ptradd8, align 8, !dbg !3824
  %22 = inttoptr i64 %21 to ptr, !dbg !3824
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3792
  %23 = icmp eq ptr %22, %type, !dbg !3792
  br i1 %23, label %cache_hit, label %cache_miss, !dbg !3792

cache_miss:                                       ; preds = %assert_ok
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !3792
  %24 = load ptr, ptr %ptradd9, align 8, !dbg !3792
  %25 = call ptr @.dyn_search(ptr %24, ptr @"$sel.release"), !dbg !3792
  store ptr %25, ptr %.inlinecache, align 8, !dbg !3792
  store ptr %22, ptr %.cachedtype, align 8, !dbg !3792
  br label %26, !dbg !3792

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3792
  br label %26, !dbg !3792

26:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %25, %cache_miss ], !dbg !3792
  %27 = icmp eq ptr %fn_phi, null, !dbg !3792
  br i1 %27, label %missing_function, label %match, !dbg !3792

missing_function:                                 ; preds = %26
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3792
  call void %28(ptr @.panic_msg.112, i64 44, ptr @.file.104, i64 16, ptr @.func.156, i64 4, i32 122) #5, !dbg !3792
  unreachable, !dbg !3792

match:                                            ; preds = %26
  %29 = load ptr, ptr %allocator4, align 8, !dbg !3792
  call void %fn_phi(ptr %29, ptr %19, i8 zeroext 0), !dbg !3792
  br label %expr_block.exit, !dbg !3792

expr_block.exit:                                  ; preds = %match, %if.then7
  store ptr null, ptr %blockret, align 8, !dbg !3825
  br label %expr_block.exit71, !dbg !3825

if.exit10:                                        ; preds = %loop.exit
  %30 = load ptr, ptr %ptr2, align 8, !dbg !3826
  %i2nb11 = icmp eq ptr %30, null, !dbg !3826
  br i1 %i2nb11, label %if.then12, label %if.exit34, !dbg !3826

if.then12:                                        ; preds = %if.exit10
  %31 = load i64, ptr %new_size3, align 8, !dbg !3827
  br i1 true, label %or.phi, label %or.rhs, !dbg !3828

or.rhs:                                           ; preds = %if.then12
  store i64 0, ptr %x13, align 8
  %32 = load i64, ptr %x13, align 8, !dbg !3829
  %neq14 = icmp ne i64 0, %32, !dbg !3829
  br i1 %neq14, label %and.rhs, label %and.phi, !dbg !3829

and.rhs:                                          ; preds = %or.rhs
  %33 = load i64, ptr %x13, align 8, !dbg !3832
  %34 = load i64, ptr %x13, align 8, !dbg !3833
  %sub = sub i64 %34, 1, !dbg !3833
  %and = and i64 %33, %sub, !dbg !3832
  %eq = icmp eq i64 %and, 0, !dbg !3832
  br label %and.phi, !dbg !3832

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !3832
  br label %or.phi, !dbg !3832

or.phi:                                           ; preds = %and.phi, %if.then12
  %val15 = phi i1 [ true, %if.then12 ], [ %val, %and.phi ], !dbg !3832
  br i1 %val15, label %assert_ok17, label %assert_fail16, !dbg !3832

assert_fail16:                                    ; preds = %or.phi
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3834
  call void %35(ptr @.panic_msg.103, i64 65, ptr @.file.104, i64 16, ptr @.func.156, i64 4, i32 112) #5, !dbg !3834
  unreachable, !dbg !3834

assert_ok17:                                      ; preds = %or.phi
  br i1 true, label %assert_ok19, label %assert_fail18, !dbg !3834

assert_fail18:                                    ; preds = %assert_ok17
  %36 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3834
  call void %36(ptr @.panic_msg.105, i64 80, ptr @.file.104, i64 16, ptr @.func.156, i64 4, i32 112) #5, !dbg !3834
  unreachable, !dbg !3834

assert_ok19:                                      ; preds = %assert_ok17
  %lt20 = icmp ult i64 0, %31, !dbg !3834
  br i1 %lt20, label %assert_ok22, label %assert_fail21, !dbg !3834

assert_fail21:                                    ; preds = %assert_ok19
  %37 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3834
  call void %37(ptr @.panic_msg.106, i64 59, ptr @.file.104, i64 16, ptr @.func.156, i64 4, i32 112) #5, !dbg !3834
  unreachable, !dbg !3834

assert_ok22:                                      ; preds = %assert_ok19
  %ptradd23 = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !3834
  %38 = load i64, ptr %ptradd23, align 8, !dbg !3834
  %39 = inttoptr i64 %38 to ptr, !dbg !3834
  %type26 = load ptr, ptr %.cachedtype25, align 8, !dbg !3792
  %40 = icmp eq ptr %39, %type26, !dbg !3792
  br i1 %40, label %cache_hit29, label %cache_miss27, !dbg !3792

cache_miss27:                                     ; preds = %assert_ok22
  %ptradd28 = getelementptr inbounds i8, ptr %39, i64 16, !dbg !3792
  %41 = load ptr, ptr %ptradd28, align 8, !dbg !3792
  %42 = call ptr @.dyn_search(ptr %41, ptr @"$sel.acquire"), !dbg !3792
  store ptr %42, ptr %.inlinecache24, align 8, !dbg !3792
  store ptr %39, ptr %.cachedtype25, align 8, !dbg !3792
  br label %43, !dbg !3792

cache_hit29:                                      ; preds = %assert_ok22
  %cache_hit_fn30 = load ptr, ptr %.inlinecache24, align 8, !dbg !3792
  br label %43, !dbg !3792

43:                                               ; preds = %cache_hit29, %cache_miss27
  %fn_phi31 = phi ptr [ %cache_hit_fn30, %cache_hit29 ], [ %42, %cache_miss27 ], !dbg !3792
  %44 = icmp eq ptr %fn_phi31, null, !dbg !3792
  br i1 %44, label %missing_function32, label %match33, !dbg !3792

missing_function32:                               ; preds = %43
  %45 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3792
  call void %45(ptr @.panic_msg.107, i64 44, ptr @.file.104, i64 16, ptr @.func.156, i64 4, i32 112) #5, !dbg !3792
  unreachable, !dbg !3792

match33:                                          ; preds = %43
  %46 = load ptr, ptr %allocator1, align 8
  %47 = call i64 %fn_phi31(ptr %retparam, ptr %46, i64 %31, i32 0, i64 0), !dbg !3834
  %not_err = icmp eq i64 %47, 0, !dbg !3834
  %48 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3834
  br i1 %48, label %after_check, label %assign_optional, !dbg !3834

assign_optional:                                  ; preds = %match33
  store i64 %47, ptr %error_var, align 8, !dbg !3834
  br label %panic_block, !dbg !3834

after_check:                                      ; preds = %match33
  %49 = load ptr, ptr %retparam, align 8, !dbg !3834
  store ptr %49, ptr %blockret, align 8, !dbg !3834
  br label %expr_block.exit71, !dbg !3834

if.exit34:                                        ; preds = %if.exit10
  %50 = load ptr, ptr %ptr2, align 8, !dbg !3835
  %51 = load i64, ptr %new_size3, align 8, !dbg !3836
  br i1 true, label %or.phi44, label %or.rhs35, !dbg !3837

or.rhs35:                                         ; preds = %if.exit34
  store i64 0, ptr %x36, align 8
  %52 = load i64, ptr %x36, align 8, !dbg !3838
  %neq37 = icmp ne i64 0, %52, !dbg !3838
  br i1 %neq37, label %and.rhs38, label %and.phi42, !dbg !3838

and.rhs38:                                        ; preds = %or.rhs35
  %53 = load i64, ptr %x36, align 8, !dbg !3841
  %54 = load i64, ptr %x36, align 8, !dbg !3842
  %sub39 = sub i64 %54, 1, !dbg !3842
  %and40 = and i64 %53, %sub39, !dbg !3841
  %eq41 = icmp eq i64 %and40, 0, !dbg !3841
  br label %and.phi42, !dbg !3841

and.phi42:                                        ; preds = %and.rhs38, %or.rhs35
  %val43 = phi i1 [ false, %or.rhs35 ], [ %eq41, %and.rhs38 ], !dbg !3841
  br label %or.phi44, !dbg !3841

or.phi44:                                         ; preds = %and.phi42, %if.exit34
  %val45 = phi i1 [ true, %if.exit34 ], [ %val43, %and.phi42 ], !dbg !3841
  br i1 %val45, label %assert_ok47, label %assert_fail46, !dbg !3841

assert_fail46:                                    ; preds = %or.phi44
  %55 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3843
  call void %55(ptr @.panic_msg.103, i64 65, ptr @.file.104, i64 16, ptr @.func.156, i64 4, i32 113) #5, !dbg !3843
  unreachable, !dbg !3843

assert_ok47:                                      ; preds = %or.phi44
  br i1 true, label %assert_ok49, label %assert_fail48, !dbg !3843

assert_fail48:                                    ; preds = %assert_ok47
  %56 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3843
  call void %56(ptr @.panic_msg.105, i64 80, ptr @.file.104, i64 16, ptr @.func.156, i64 4, i32 113) #5, !dbg !3843
  unreachable, !dbg !3843

assert_ok49:                                      ; preds = %assert_ok47
  %neq50 = icmp ne ptr %50, null, !dbg !3843
  br i1 %neq50, label %assert_ok52, label %assert_fail51, !dbg !3843

assert_fail51:                                    ; preds = %assert_ok49
  %57 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3843
  call void %57(ptr @.panic_msg.138, i64 32, ptr @.file.104, i64 16, ptr @.func.156, i64 4, i32 113) #5, !dbg !3843
  unreachable, !dbg !3843

assert_ok52:                                      ; preds = %assert_ok49
  %lt53 = icmp ult i64 0, %51, !dbg !3843
  br i1 %lt53, label %assert_ok55, label %assert_fail54, !dbg !3843

assert_fail54:                                    ; preds = %assert_ok52
  %58 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3843
  call void %58(ptr @.panic_msg.139, i64 33, ptr @.file.104, i64 16, ptr @.func.156, i64 4, i32 113) #5, !dbg !3843
  unreachable, !dbg !3843

assert_ok55:                                      ; preds = %assert_ok52
  %ptradd56 = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !3843
  %59 = load i64, ptr %ptradd56, align 8, !dbg !3843
  %60 = inttoptr i64 %59 to ptr, !dbg !3843
  %type59 = load ptr, ptr %.cachedtype58, align 8, !dbg !3792
  %61 = icmp eq ptr %60, %type59, !dbg !3792
  br i1 %61, label %cache_hit62, label %cache_miss60, !dbg !3792

cache_miss60:                                     ; preds = %assert_ok55
  %ptradd61 = getelementptr inbounds i8, ptr %60, i64 16, !dbg !3792
  %62 = load ptr, ptr %ptradd61, align 8, !dbg !3792
  %63 = call ptr @.dyn_search(ptr %62, ptr @"$sel.resize"), !dbg !3792
  store ptr %63, ptr %.inlinecache57, align 8, !dbg !3792
  store ptr %60, ptr %.cachedtype58, align 8, !dbg !3792
  br label %64, !dbg !3792

cache_hit62:                                      ; preds = %assert_ok55
  %cache_hit_fn63 = load ptr, ptr %.inlinecache57, align 8, !dbg !3792
  br label %64, !dbg !3792

64:                                               ; preds = %cache_hit62, %cache_miss60
  %fn_phi64 = phi ptr [ %cache_hit_fn63, %cache_hit62 ], [ %63, %cache_miss60 ], !dbg !3792
  %65 = icmp eq ptr %fn_phi64, null, !dbg !3792
  br i1 %65, label %missing_function65, label %match66, !dbg !3792

missing_function65:                               ; preds = %64
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3792
  call void %66(ptr @.panic_msg.140, i64 43, ptr @.file.104, i64 16, ptr @.func.156, i64 4, i32 113) #5, !dbg !3792
  unreachable, !dbg !3792

match66:                                          ; preds = %64
  %67 = load ptr, ptr %allocator1, align 8
  %68 = call i64 %fn_phi64(ptr %retparam67, ptr %67, ptr %50, i64 %51, i64 0), !dbg !3843
  %not_err68 = icmp eq i64 %68, 0, !dbg !3843
  %69 = call i1 @llvm.expect.i1(i1 %not_err68, i1 true), !dbg !3843
  br i1 %69, label %after_check70, label %assign_optional69, !dbg !3843

assign_optional69:                                ; preds = %match66
  store i64 %68, ptr %error_var, align 8, !dbg !3843
  br label %panic_block, !dbg !3843

after_check70:                                    ; preds = %match66
  %70 = load ptr, ptr %retparam67, align 8, !dbg !3843
  store ptr %70, ptr %blockret, align 8, !dbg !3843
  br label %expr_block.exit71, !dbg !3843

expr_block.exit71:                                ; preds = %after_check70, %after_check, %expr_block.exit
  br label %noerr_block, !dbg !3843

panic_block:                                      ; preds = %assign_optional69, %assign_optional
  %71 = insertvalue %any undef, ptr %error_var, 0, !dbg !3843
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !3843
  store %any %72, ptr %varargslots, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %73, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.93, i64 36, ptr @.file.104, i64 16, ptr @.func.156, i64 4, i32 102, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3815
  unreachable, !dbg !3815

noerr_block:                                      ; preds = %expr_block.exit71
  %74 = load ptr, ptr %blockret, align 8, !dbg !3815
  store ptr %74, ptr %p, align 8, !dbg !3815
  %75 = load ptr, ptr %self, align 8, !dbg !3844
  %ptradd72 = getelementptr inbounds i8, ptr %75, i64 24, !dbg !3844
  %76 = load ptr, ptr %p, align 8, !dbg !3845
  %77 = load i64, ptr %n, align 8, !dbg !3846
  %add73 = add i64 0, %77, !dbg !3846
  %gt = icmp ugt i64 0, %add73, !dbg !3846
  %sub74 = sub i64 %add73, 0, !dbg !3846
  %78 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3846
  br i1 %78, label %panic75, label %checkok79, !dbg !3846

checkok79:                                        ; preds = %noerr_block
  %size = sub i64 %add73, 0, !dbg !3845
  %79 = insertvalue %"char[]" undef, ptr %76, 0, !dbg !3845
  %80 = insertvalue %"char[]" %79, i64 %size, 1, !dbg !3845
  store %"char[]" %80, ptr %ptradd72, align 8, !dbg !3845
  ret void, !dbg !3845

panic:                                            ; preds = %entry
  %81 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3794
  call void %81(ptr @.panic_msg, i64 62, ptr @.file.151, i64 13, ptr @.func.156, i64 4, i32 131) #5, !dbg !3794
  unreachable, !dbg !3794

panic75:                                          ; preds = %noerr_block
  store i64 %sub74, ptr %taddr, align 8
  %82 = insertvalue %any undef, ptr %taddr, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %83, ptr %varargslots76, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp77" = insertvalue %"any[]" %84, i64 1, 1
  store %"any[]" %"$$temp77", ptr %indirectarg78, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.151, i64 13, ptr @.func.156, i64 4, i32 135, ptr byval(%"any[]") align 8 %indirectarg78) #5, !dbg !3845
  unreachable, !dbg !3845
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.Scanner.init(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4) #0 comdat !dbg !3847 {
entry:
  %self = alloca ptr, align 8
  %stream = alloca %any, align 8
  %buffer = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %Scanner, align 8
  %5 = icmp eq ptr %0, null, !dbg !3858
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !3858
  br i1 %6, label %panic, label %checkok, !dbg !3858

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3859, !DIExpression(), !3860)
  store i64 %1, ptr %stream, align 8
  %ptradd = getelementptr inbounds i8, ptr %stream, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %stream, !3861, !DIExpression(), !3862)
  store ptr %3, ptr %buffer, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %buffer, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %buffer, !3863, !DIExpression(), !3864)
  %ptradd2 = getelementptr inbounds i8, ptr %buffer, i64 8, !dbg !3865
  %7 = load i64, ptr %ptradd2, align 8, !dbg !3865
  %lt = icmp ult i64 0, %7, !dbg !3865
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3865

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3865
  call void %8(ptr @.panic_msg.158, i64 65, ptr @.file.157, i64 10, ptr @.func, i64 4, i32 17) #5, !dbg !3865
  unreachable, !dbg !3865

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !3867
  %checknull = icmp eq ptr %9, null, !dbg !3867
  %10 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3867
  br i1 %10, label %panic3, label %checkok4, !dbg !3867

checkok4:                                         ; preds = %assert_ok
  %11 = ptrtoint ptr %9 to i64, !dbg !3867
  %12 = urem i64 %11, 8, !dbg !3867
  %13 = icmp ne i64 %12, 0, !dbg !3867
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false), !dbg !3867
  br i1 %14, label %panic5, label %checkok8, !dbg !3867

checkok8:                                         ; preds = %checkok4
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %stream, i32 16, i1 false), !dbg !3868
  %ptradd9 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !3868
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd9, ptr align 8 %buffer, i32 16, i1 false), !dbg !3869
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %9, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !3869
  ret void, !dbg !3869

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3860
  call void %15(ptr @.panic_msg, i64 62, ptr @.file.157, i64 10, ptr @.func, i64 4, i32 19) #5, !dbg !3860
  unreachable, !dbg !3860

panic3:                                           ; preds = %assert_ok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3867
  call void %16(ptr @.panic_msg.2, i64 45, ptr @.file.157, i64 10, ptr @.func, i64 4, i32 21) #5, !dbg !3867
  unreachable, !dbg !3867

panic5:                                           ; preds = %checkok4
  store i64 8, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr6, align 8
  %19 = insertvalue %any undef, ptr %taddr6, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd7, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.157, i64 10, ptr @.func, i64 4, i32 21, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3867
  unreachable, !dbg !3867
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.io.Scanner.flush(ptr %0) #0 comdat !dbg !3870 {
entry:
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %buf = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [1 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !3873
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3873
  br i1 %2, label %panic, label %checkok, !dbg !3873

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3874, !DIExpression(), !3875)
  %3 = load ptr, ptr %self, align 8, !dbg !3876
  %ptradd = getelementptr inbounds i8, ptr %3, i64 40, !dbg !3876
  %4 = load i64, ptr %ptradd, align 8, !dbg !3876
  %5 = load ptr, ptr %self, align 8, !dbg !3877
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 32, !dbg !3877
  %6 = load i64, ptr %ptradd1, align 8, !dbg !3877
  %ge = icmp uge i64 %4, %6, !dbg !3876
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !3876

assert_fail:                                      ; preds = %checkok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3876
  call void %7(ptr @.panic_msg.159, i64 50, ptr @.file.157, i64 10, ptr @.func.10, i64 5, i32 30) #5, !dbg !3876
  unreachable, !dbg !3876

assert_ok:                                        ; preds = %checkok
    #dbg_declare(ptr %n, !3878, !DIExpression(), !3879)
  %8 = load ptr, ptr %self, align 8, !dbg !3880
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 40, !dbg !3880
  %9 = load i64, ptr %ptradd2, align 8, !dbg !3880
  %10 = load ptr, ptr %self, align 8, !dbg !3881
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 32, !dbg !3881
  %11 = load i64, ptr %ptradd3, align 8, !dbg !3881
  %sub = sub i64 %9, %11, !dbg !3880
  store i64 %sub, ptr %n, align 8, !dbg !3880
    #dbg_declare(ptr %buf, !3882, !DIExpression(), !3883)
  %12 = load ptr, ptr %self, align 8, !dbg !3884
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !3884
  %13 = load %"char[]", ptr %ptradd4, align 8, !dbg !3884
  %14 = extractvalue %"char[]" %13, 0, !dbg !3884
  %15 = load ptr, ptr %self, align 8, !dbg !3885
  %ptradd5 = getelementptr inbounds i8, ptr %15, i64 32, !dbg !3885
  %16 = load i64, ptr %ptradd5, align 8, !dbg !3885
  %17 = extractvalue %"char[]" %13, 1, !dbg !3885
  %gt = icmp ugt i64 %16, %17, !dbg !3885
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3885
  br i1 %18, label %panic6, label %checkok9, !dbg !3885

checkok9:                                         ; preds = %assert_ok
  %19 = load i64, ptr %n, align 8, !dbg !3886
  %add = add i64 %16, %19, !dbg !3886
  %gt10 = icmp ugt i64 %16, %add, !dbg !3886
  %sub11 = sub i64 %add, %16, !dbg !3886
  %20 = call i1 @llvm.expect.i1(i1 %gt10, i1 false), !dbg !3886
  br i1 %20, label %panic12, label %checkok17, !dbg !3886

checkok17:                                        ; preds = %checkok9
  %lt = icmp ult i64 %17, %add, !dbg !3884
  %sub18 = sub i64 %add, 1, !dbg !3884
  %21 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3884
  br i1 %21, label %panic19, label %checkok26, !dbg !3884

checkok26:                                        ; preds = %checkok17
  %size = sub i64 %add, %16, !dbg !3884
  %ptradd27 = getelementptr inbounds i8, ptr %14, i64 %16, !dbg !3884
  %22 = insertvalue %"char[]" undef, ptr %ptradd27, 0, !dbg !3884
  %23 = insertvalue %"char[]" %22, i64 %size, 1, !dbg !3884
  store %"char[]" %23, ptr %buf, align 8, !dbg !3884
  %24 = load ptr, ptr %self, align 8, !dbg !3887
  %ptradd28 = getelementptr inbounds i8, ptr %24, i64 32, !dbg !3887
  store i64 0, ptr %ptradd28, align 8, !dbg !3888
  %25 = load ptr, ptr %self, align 8, !dbg !3889
  %ptradd29 = getelementptr inbounds i8, ptr %25, i64 40, !dbg !3889
  store i64 0, ptr %ptradd29, align 8, !dbg !3890
  %26 = load { ptr, i64 }, ptr %buf, align 8, !dbg !3891
  ret { ptr, i64 } %26, !dbg !3891

panic:                                            ; preds = %entry
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3875
  call void %27(ptr @.panic_msg, i64 62, ptr @.file.157, i64 10, ptr @.func.10, i64 5, i32 28) #5, !dbg !3875
  unreachable, !dbg !3875

panic6:                                           ; preds = %assert_ok
  store i64 %17, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr7, align 8
  %30 = insertvalue %any undef, ptr %taddr7, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd8, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.157, i64 10, ptr @.func.10, i64 5, i32 32, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3884
  unreachable, !dbg !3884

panic12:                                          ; preds = %checkok9
  store i64 %sub11, ptr %taddr13, align 8
  %33 = insertvalue %any undef, ptr %taddr13, 0
  %34 = insertvalue %any %33, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %34, ptr %varargslots14, align 16
  %35 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp15" = insertvalue %"any[]" %35, i64 1, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.157, i64 10, ptr @.func.10, i64 5, i32 32, ptr byval(%"any[]") align 8 %indirectarg16) #5, !dbg !3884
  unreachable, !dbg !3884

panic19:                                          ; preds = %checkok17
  store i64 %sub18, ptr %taddr20, align 8
  %36 = insertvalue %any undef, ptr %taddr20, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr21, align 8
  %38 = insertvalue %any undef, ptr %taddr21, 0
  %39 = insertvalue %any %38, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %37, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %39, ptr %ptradd23, align 16
  %40 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %40, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.157, i64 10, ptr @.func.10, i64 5, i32 32, ptr byval(%"any[]") align 8 %indirectarg25) #5, !dbg !3884
  unreachable, !dbg !3884
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Scanner.close(ptr %0) #0 comdat !dbg !3892 {
entry:
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache3 = alloca ptr, align 8
  %.cachedtype4 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype4, align 8, !dbg !3895
  store ptr null, ptr %.cachedtype, align 8, !dbg !3895
  %1 = icmp eq ptr %0, null, !dbg !3895
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3895
  br i1 %2, label %panic, label %checkok, !dbg !3895

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3896, !DIExpression(), !3897)
  %3 = load ptr, ptr %self, align 8, !dbg !3898
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !3898
  %4 = load i64, ptr %ptradd, align 8, !dbg !3898
  %5 = inttoptr i64 %4 to ptr, !dbg !3898
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3895
  %6 = icmp eq ptr %5, %type, !dbg !3895
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !3895

cache_miss:                                       ; preds = %checkok
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !3895
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !3895
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !3895
  store ptr %8, ptr %.inlinecache, align 8, !dbg !3895
  store ptr %5, ptr %.cachedtype, align 8, !dbg !3895
  br label %9, !dbg !3895

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3895
  br label %9, !dbg !3895

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !3895
  %i2b = icmp ne ptr %fn_phi, null, !dbg !3895
  br i1 %i2b, label %if.then, label %if.exit, !dbg !3895

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !3899
  %ptradd2 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !3899
  %11 = load i64, ptr %ptradd2, align 8, !dbg !3899
  %12 = inttoptr i64 %11 to ptr, !dbg !3899
  %type5 = load ptr, ptr %.cachedtype4, align 8, !dbg !3895
  %13 = icmp eq ptr %12, %type5, !dbg !3895
  br i1 %13, label %cache_hit8, label %cache_miss6, !dbg !3895

cache_miss6:                                      ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !3895
  %14 = load ptr, ptr %ptradd7, align 8, !dbg !3895
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !3895
  store ptr %15, ptr %.inlinecache3, align 8, !dbg !3895
  store ptr %12, ptr %.cachedtype4, align 8, !dbg !3895
  br label %16, !dbg !3895

cache_hit8:                                       ; preds = %if.then
  %cache_hit_fn9 = load ptr, ptr %.inlinecache3, align 8, !dbg !3895
  br label %16, !dbg !3895

16:                                               ; preds = %cache_hit8, %cache_miss6
  %fn_phi10 = phi ptr [ %cache_hit_fn9, %cache_hit8 ], [ %15, %cache_miss6 ], !dbg !3895
  %17 = icmp eq ptr %fn_phi10, null, !dbg !3895
  br i1 %17, label %missing_function, label %match, !dbg !3895

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3899
  call void %18(ptr @.panic_msg.145, i64 42, ptr @.file.157, i64 10, ptr @.func.144, i64 5, i32 40) #5, !dbg !3899
  unreachable, !dbg !3899

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !3899
  %20 = call i64 %fn_phi10(ptr %19), !dbg !3899
  %not_err = icmp eq i64 %20, 0, !dbg !3899
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3899
  br i1 %21, label %after_check, label %assign_optional, !dbg !3899

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %reterr, align 8, !dbg !3899
  br label %err_retblock, !dbg !3899

after_check:                                      ; preds = %match
  ret i64 0, !dbg !3899

err_retblock:                                     ; preds = %assign_optional
  %22 = load i64, ptr %reterr, align 8, !dbg !3899
  ret i64 %22, !dbg !3899

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !3899

panic:                                            ; preds = %entry
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3897
  call void %23(ptr @.panic_msg, i64 62, ptr @.file.157, i64 10, ptr @.func.144, i64 5, i32 38) #5, !dbg !3897
  unreachable, !dbg !3897
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Scanner.scan(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !3900 {
entry:
  %self = alloca ptr, align 8
  %pattern = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %self9 = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %err = alloca i64, align 8
  %n29 = alloca i64, align 8
  %buf32 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %varargslots44 = alloca [1 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %taddr51 = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %i = alloca i64, align 8
  %self59 = alloca ptr, align 8
  %buf60 = alloca %"char[]", align 8
  %pattern61 = alloca %"char[]", align 8
  %retparam68 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr78 = alloca i64, align 8
  %taddr79 = alloca i64, align 8
  %varargslots80 = alloca [2 x %any], align 16
  %indirectarg83 = alloca %"any[]", align 8
  %taddr89 = alloca i64, align 8
  %varargslots90 = alloca [1 x %any], align 16
  %indirectarg92 = alloca %"any[]", align 8
  %taddr97 = alloca i64, align 8
  %taddr98 = alloca i64, align 8
  %varargslots99 = alloca [2 x %any], align 16
  %indirectarg102 = alloca %"any[]", align 8
  %taddr117 = alloca i64, align 8
  %taddr118 = alloca i64, align 8
  %varargslots119 = alloca [2 x %any], align 16
  %indirectarg122 = alloca %"any[]", align 8
  %taddr128 = alloca i64, align 8
  %taddr129 = alloca i64, align 8
  %varargslots130 = alloca [2 x %any], align 16
  %indirectarg133 = alloca %"any[]", align 8
  %taddr139 = alloca i64, align 8
  %varargslots140 = alloca [1 x %any], align 16
  %indirectarg142 = alloca %"any[]", align 8
  %taddr147 = alloca i64, align 8
  %taddr148 = alloca i64, align 8
  %varargslots149 = alloca [2 x %any], align 16
  %indirectarg152 = alloca %"any[]", align 8
  %taddr157 = alloca i64, align 8
  %taddr158 = alloca i64, align 8
  %varargslots159 = alloca [2 x %any], align 16
  %indirectarg162 = alloca %"any[]", align 8
  %taddr168 = alloca i64, align 8
  %taddr169 = alloca i64, align 8
  %varargslots170 = alloca [2 x %any], align 16
  %indirectarg173 = alloca %"any[]", align 8
  %p = alloca i64, align 8
  %error_var177 = alloca i64, align 8
  %self178 = alloca ptr, align 8
  %buf179 = alloca %"char[]", align 8
  %n183 = alloca i64, align 8
  %n.f184 = alloca i64, align 8
  %.inlinecache186 = alloca ptr, align 8
  %.cachedtype187 = alloca ptr, align 8
  %retparam196 = alloca i64, align 8
  %err204 = alloca i64, align 8
  %taddr223 = alloca i64, align 8
  %taddr224 = alloca i64, align 8
  %varargslots225 = alloca [2 x %any], align 16
  %indirectarg228 = alloca %"any[]", align 8
  %taddr234 = alloca i64, align 8
  %varargslots235 = alloca [1 x %any], align 16
  %indirectarg237 = alloca %"any[]", align 8
  %taddr242 = alloca i64, align 8
  %taddr243 = alloca i64, align 8
  %varargslots244 = alloca [2 x %any], align 16
  %indirectarg247 = alloca %"any[]", align 8
  %i250 = alloca i64, align 8
  %error_var251 = alloca i64, align 8
  %self252 = alloca ptr, align 8
  %buf253 = alloca %"char[]", align 8
  %pattern254 = alloca %"char[]", align 8
  %retparam261 = alloca i64, align 8
  %reterr271 = alloca i64, align 8
  %taddr275 = alloca i64, align 8
  %taddr276 = alloca i64, align 8
  %varargslots277 = alloca [2 x %any], align 16
  %indirectarg280 = alloca %"any[]", align 8
  %taddr287 = alloca i64, align 8
  %varargslots288 = alloca [1 x %any], align 16
  %indirectarg290 = alloca %"any[]", align 8
  %taddr295 = alloca i64, align 8
  %taddr296 = alloca i64, align 8
  %varargslots297 = alloca [2 x %any], align 16
  %indirectarg300 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype187, align 8, !dbg !3903
  store ptr null, ptr %.cachedtype, align 8, !dbg !3903
  %4 = icmp eq ptr %1, null, !dbg !3903
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3903
  br i1 %5, label %panic, label %checkok, !dbg !3903

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3904, !DIExpression(), !3905)
  store ptr %2, ptr %pattern, align 8
  %ptradd = getelementptr inbounds i8, ptr %pattern, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %pattern, !3906, !DIExpression(), !3907)
  %ptradd1 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !3908
  %6 = load i64, ptr %ptradd1, align 8, !dbg !3908
  %lt = icmp ult i64 0, %6, !dbg !3908
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3908

assert_fail:                                      ; preds = %checkok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3908
  call void %7(ptr @.panic_msg.161, i64 67, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 45) #5, !dbg !3908
  unreachable, !dbg !3908

assert_ok:                                        ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !3910
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !3910
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 8, !dbg !3910
  %9 = load i64, ptr %ptradd3, align 8, !dbg !3910
  %ptradd4 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !3911
  %10 = load i64, ptr %ptradd4, align 8, !dbg !3911
  %gt = icmp ugt i64 %9, %10, !dbg !3910
  br i1 %gt, label %assert_ok6, label %assert_fail5, !dbg !3910

assert_fail5:                                     ; preds = %assert_ok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3910
  call void %11(ptr @.panic_msg.162, i64 69, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 46) #5, !dbg !3910
  unreachable, !dbg !3910

assert_ok6:                                       ; preds = %assert_ok
  %12 = load ptr, ptr %self, align 8, !dbg !3912
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 40, !dbg !3912
  %13 = load i64, ptr %ptradd7, align 8, !dbg !3912
  %eq = icmp eq i64 0, %13, !dbg !3912
  br i1 %eq, label %if.then, label %if.exit24, !dbg !3912

if.then:                                          ; preds = %assert_ok6
  %14 = load ptr, ptr %self, align 8, !dbg !3913
  %ptradd8 = getelementptr inbounds i8, ptr %14, i64 40, !dbg !3913
  %15 = load ptr, ptr %self, align 8
  store ptr %15, ptr %self9, align 8
  %16 = load ptr, ptr %self, align 8, !dbg !3915
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !3915
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf, ptr align 8 %ptradd10, i32 16, i1 false)
  %17 = load ptr, ptr %self9, align 8, !dbg !3916
  %neq = icmp ne ptr %17, null, !dbg !3916
  br i1 %neq, label %assert_ok12, label %assert_fail11, !dbg !3916

assert_fail11:                                    ; preds = %if.then
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3916
  call void %18(ptr @.panic_msg.48, i64 32, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 90) #5, !dbg !3916
  unreachable, !dbg !3916

assert_ok12:                                      ; preds = %if.then
    #dbg_declare(ptr %n, !3920, !DIExpression(), !3921)
  %19 = load ptr, ptr %self9, align 8, !dbg !3922
  %ptradd13 = getelementptr inbounds i8, ptr %19, i64 8, !dbg !3923
  %20 = load i64, ptr %ptradd13, align 8, !dbg !3923
  %21 = inttoptr i64 %20 to ptr, !dbg !3923
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3903
  %22 = icmp eq ptr %21, %type, !dbg !3903
  br i1 %22, label %cache_hit, label %cache_miss, !dbg !3903

cache_miss:                                       ; preds = %assert_ok12
  %ptradd14 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !3903
  %23 = load ptr, ptr %ptradd14, align 8, !dbg !3903
  %24 = call ptr @.dyn_search(ptr %23, ptr @"$sel.read"), !dbg !3903
  store ptr %24, ptr %.inlinecache, align 8, !dbg !3903
  store ptr %21, ptr %.cachedtype, align 8, !dbg !3903
  br label %25, !dbg !3903

cache_hit:                                        ; preds = %assert_ok12
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3903
  br label %25, !dbg !3903

25:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %24, %cache_miss ], !dbg !3903
  %26 = icmp eq ptr %fn_phi, null, !dbg !3903
  br i1 %26, label %missing_function, label %match, !dbg !3903

missing_function:                                 ; preds = %25
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3922
  call void %27(ptr @.panic_msg.39, i64 41, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 92) #5, !dbg !3922
  unreachable, !dbg !3922

match:                                            ; preds = %25
  %28 = load ptr, ptr %19, align 8
  %lo = load ptr, ptr %buf, align 8
  %ptradd15 = getelementptr inbounds i8, ptr %buf, i64 8
  %hi = load i64, ptr %ptradd15, align 8
  %29 = call i64 %fn_phi(ptr %retparam, ptr %28, ptr %lo, i64 %hi), !dbg !3922
  %not_err = icmp eq i64 %29, 0, !dbg !3922
  %30 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3922
  br i1 %30, label %after_check, label %assign_optional, !dbg !3922

assign_optional:                                  ; preds = %match
  store i64 %29, ptr %n.f, align 8, !dbg !3922
  br label %after_assign, !dbg !3922

after_check:                                      ; preds = %match
  %31 = load i64, ptr %retparam, align 8, !dbg !3922
  store i64 %31, ptr %n, align 8, !dbg !3922
  store i64 0, ptr %n.f, align 8, !dbg !3922
  br label %after_assign, !dbg !3922

after_assign:                                     ; preds = %after_check, %assign_optional
    #dbg_declare(ptr %err, !3924, !DIExpression(), !3925)
  br label %testblock, !dbg !3925

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %n.f, align 8, !dbg !3926
  %not_err16 = icmp eq i64 %optval, 0, !dbg !3926
  %32 = call i1 @llvm.expect.i1(i1 %not_err16, i1 true), !dbg !3926
  br i1 %32, label %after_check18, label %assign_optional17, !dbg !3926

assign_optional17:                                ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !3926
  br label %end_block, !dbg !3926

after_check18:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !3926
  br label %end_block, !dbg !3926

end_block:                                        ; preds = %after_check18, %assign_optional17
  %33 = load i64, ptr %err, align 8, !dbg !3926
  %i2b = icmp ne i64 %33, 0, !dbg !3926
  br i1 %i2b, label %if.then19, label %if.exit22, !dbg !3926

if.then19:                                        ; preds = %end_block
  %34 = load i64, ptr %err, align 8, !dbg !3927
  %eq20 = icmp eq i64 %34, ptrtoint (ptr @std.io.EOF to i64), !dbg !3927
  br i1 %eq20, label %if.then21, label %if.exit, !dbg !3927

if.then21:                                        ; preds = %if.then19
  store i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), ptr %error_var, align 8, !dbg !3929
  br label %guard_block, !dbg !3929

if.exit:                                          ; preds = %if.then19
  %35 = load i64, ptr %err, align 8, !dbg !3930
  store i64 %35, ptr %error_var, align 8, !dbg !3930
  br label %guard_block, !dbg !3930

if.exit22:                                        ; preds = %end_block
  br label %noerr_block, !dbg !3931

guard_block:                                      ; preds = %if.exit, %if.then21
  %36 = load i64, ptr %error_var, align 8, !dbg !3931
  ret i64 %36, !dbg !3931

noerr_block:                                      ; preds = %if.exit22
  %37 = load i64, ptr %n, align 8, !dbg !3931
  store i64 %37, ptr %ptradd8, align 8, !dbg !3931
  %38 = load ptr, ptr %self, align 8, !dbg !3932
  %ptradd23 = getelementptr inbounds i8, ptr %38, i64 32, !dbg !3932
  store i64 0, ptr %ptradd23, align 8, !dbg !3933
  br label %if.exit24, !dbg !3933

if.exit24:                                        ; preds = %noerr_block, %assert_ok6
  %39 = load ptr, ptr %self, align 8, !dbg !3934
  %ptradd25 = getelementptr inbounds i8, ptr %39, i64 40, !dbg !3934
  %40 = load i64, ptr %ptradd25, align 8, !dbg !3934
  %41 = load ptr, ptr %self, align 8, !dbg !3935
  %ptradd26 = getelementptr inbounds i8, ptr %41, i64 32, !dbg !3935
  %42 = load i64, ptr %ptradd26, align 8, !dbg !3935
  %ge = icmp uge i64 %40, %42, !dbg !3934
  br i1 %ge, label %assert_ok28, label %assert_fail27, !dbg !3934

assert_fail27:                                    ; preds = %if.exit24
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3934
  call void %43(ptr @.panic_msg.159, i64 50, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 56) #5, !dbg !3934
  unreachable, !dbg !3934

assert_ok28:                                      ; preds = %if.exit24
    #dbg_declare(ptr %n29, !3936, !DIExpression(), !3937)
  %44 = load ptr, ptr %self, align 8, !dbg !3938
  %ptradd30 = getelementptr inbounds i8, ptr %44, i64 40, !dbg !3938
  %45 = load i64, ptr %ptradd30, align 8, !dbg !3938
  %46 = load ptr, ptr %self, align 8, !dbg !3939
  %ptradd31 = getelementptr inbounds i8, ptr %46, i64 32, !dbg !3939
  %47 = load i64, ptr %ptradd31, align 8, !dbg !3939
  %sub = sub i64 %45, %47, !dbg !3938
  store i64 %sub, ptr %n29, align 8, !dbg !3938
    #dbg_declare(ptr %buf32, !3940, !DIExpression(), !3941)
  %48 = load ptr, ptr %self, align 8, !dbg !3942
  %ptradd33 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !3942
  %49 = load %"char[]", ptr %ptradd33, align 8, !dbg !3942
  %50 = extractvalue %"char[]" %49, 0, !dbg !3942
  %51 = load ptr, ptr %self, align 8, !dbg !3943
  %ptradd34 = getelementptr inbounds i8, ptr %51, i64 32, !dbg !3943
  %52 = load i64, ptr %ptradd34, align 8, !dbg !3943
  %53 = extractvalue %"char[]" %49, 1, !dbg !3943
  %gt35 = icmp ugt i64 %52, %53, !dbg !3943
  %54 = call i1 @llvm.expect.i1(i1 %gt35, i1 false), !dbg !3943
  br i1 %54, label %panic36, label %checkok39, !dbg !3943

checkok39:                                        ; preds = %assert_ok28
  %55 = load i64, ptr %n29, align 8, !dbg !3944
  %add = add i64 %52, %55, !dbg !3944
  %gt40 = icmp ugt i64 %52, %add, !dbg !3944
  %sub41 = sub i64 %add, %52, !dbg !3944
  %56 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !3944
  br i1 %56, label %panic42, label %checkok47, !dbg !3944

checkok47:                                        ; preds = %checkok39
  %lt48 = icmp ult i64 %53, %add, !dbg !3942
  %sub49 = sub i64 %add, 1, !dbg !3942
  %57 = call i1 @llvm.expect.i1(i1 %lt48, i1 false), !dbg !3942
  br i1 %57, label %panic50, label %checkok57, !dbg !3942

checkok57:                                        ; preds = %checkok47
  %size = sub i64 %add, %52, !dbg !3942
  %ptradd58 = getelementptr inbounds i8, ptr %50, i64 %52, !dbg !3942
  %58 = insertvalue %"char[]" undef, ptr %ptradd58, 0, !dbg !3942
  %59 = insertvalue %"char[]" %58, i64 %size, 1, !dbg !3942
  store %"char[]" %59, ptr %buf32, align 8, !dbg !3942
    #dbg_declare(ptr %i, !3945, !DIExpression(), !3946)
  store i64 0, ptr %i, align 8, !dbg !3946
  %60 = load ptr, ptr %self, align 8
  store ptr %60, ptr %self59, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf60, ptr align 8 %buf32, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %pattern61, ptr align 8 %pattern, i32 16, i1 false)
  %61 = load ptr, ptr %self59, align 8, !dbg !3947
  %neq62 = icmp ne ptr %61, null, !dbg !3947
  br i1 %neq62, label %assert_ok64, label %assert_fail63, !dbg !3947

assert_fail63:                                    ; preds = %checkok57
  %62 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3947
  call void %62(ptr @.panic_msg.48, i64 32, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 85) #5, !dbg !3947
  unreachable, !dbg !3947

assert_ok64:                                      ; preds = %checkok57
  %63 = load %"char[]", ptr %buf60, align 8, !dbg !3951
  %64 = load %"char[]", ptr %pattern61, align 8, !dbg !3952
  %65 = extractvalue %"char[]" %64, 1, !dbg !3953
  %lt65 = icmp ult i64 0, %65, !dbg !3951
  br i1 %lt65, label %assert_ok67, label %assert_fail66, !dbg !3951

assert_fail66:                                    ; preds = %assert_ok64
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3951
  call void %66(ptr @.panic_msg.163, i64 71, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 87) #5, !dbg !3951
  unreachable, !dbg !3951

assert_ok67:                                      ; preds = %assert_ok64
  %67 = extractvalue %"char[]" %63, 0
  %68 = extractvalue %"char[]" %63, 1
  %69 = extractvalue %"char[]" %64, 0
  %70 = extractvalue %"char[]" %64, 1
  %71 = call i64 @std.core.String.index_of(ptr %retparam68, ptr %67, i64 %68, ptr %69, i64 %70), !dbg !3951
  %not_err69 = icmp eq i64 %71, 0, !dbg !3951
  %72 = call i1 @llvm.expect.i1(i1 %not_err69, i1 true), !dbg !3951
  br i1 %72, label %after_check70, label %catch_landing, !dbg !3951

after_check70:                                    ; preds = %assert_ok67
  %73 = load i64, ptr %retparam68, align 8, !dbg !3951
  store i64 %73, ptr %i, align 8, !dbg !3951
  br label %phi_try_catch, !dbg !3951

catch_landing:                                    ; preds = %assert_ok67
  br label %phi_try_catch, !dbg !3951

phi_try_catch:                                    ; preds = %catch_landing, %after_check70
  %val = phi i1 [ true, %after_check70 ], [ false, %catch_landing ], !dbg !3951
  br i1 %val, label %if.then71, label %if.exit105, !dbg !3951

if.then71:                                        ; preds = %phi_try_catch
  %74 = load ptr, ptr %self, align 8, !dbg !3954
  %ptradd72 = getelementptr inbounds i8, ptr %74, i64 32, !dbg !3954
  %75 = load i64, ptr %ptradd72, align 8, !dbg !3954
  %76 = load i64, ptr %i, align 8, !dbg !3956
  %ptradd73 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !3957
  %77 = load i64, ptr %ptradd73, align 8, !dbg !3957
  %add74 = add i64 %76, %77, !dbg !3956
  %add75 = add i64 %75, %add74, !dbg !3954
  store i64 %add75, ptr %ptradd72, align 8, !dbg !3954
  %78 = load %"char[]", ptr %buf32, align 8, !dbg !3958
  %79 = extractvalue %"char[]" %78, 0, !dbg !3958
  %80 = extractvalue %"char[]" %78, 1, !dbg !3959
  %gt76 = icmp ugt i64 0, %80, !dbg !3959
  %81 = call i1 @llvm.expect.i1(i1 %gt76, i1 false), !dbg !3959
  br i1 %81, label %panic77, label %checkok84, !dbg !3959

checkok84:                                        ; preds = %if.then71
  %82 = load i64, ptr %i, align 8, !dbg !3960
  %add85 = add i64 0, %82, !dbg !3960
  %gt86 = icmp ugt i64 0, %add85, !dbg !3960
  %sub87 = sub i64 %add85, 0, !dbg !3960
  %83 = call i1 @llvm.expect.i1(i1 %gt86, i1 false), !dbg !3960
  br i1 %83, label %panic88, label %checkok93, !dbg !3960

checkok93:                                        ; preds = %checkok84
  %lt94 = icmp ult i64 %80, %add85, !dbg !3958
  %sub95 = sub i64 %add85, 1, !dbg !3958
  %84 = call i1 @llvm.expect.i1(i1 %lt94, i1 false), !dbg !3958
  br i1 %84, label %panic96, label %checkok103, !dbg !3958

checkok103:                                       ; preds = %checkok93
  %size104 = sub i64 %add85, 0, !dbg !3958
  %85 = insertvalue %"char[]" undef, ptr %79, 0, !dbg !3958
  %86 = insertvalue %"char[]" %85, i64 %size104, 1, !dbg !3958
  store %"char[]" %86, ptr %0, align 8, !dbg !3958
  ret i64 0, !dbg !3958

if.exit105:                                       ; preds = %phi_try_catch
  %87 = load ptr, ptr %self, align 8, !dbg !3961
  %ptradd106 = getelementptr inbounds i8, ptr %87, i64 32, !dbg !3961
  %88 = load i64, ptr %ptradd106, align 8, !dbg !3961
  %eq107 = icmp eq i64 0, %88, !dbg !3961
  br i1 %eq107, label %or.phi, label %or.rhs, !dbg !3961

or.rhs:                                           ; preds = %if.exit105
  %89 = load ptr, ptr %self, align 8, !dbg !3962
  %ptradd108 = getelementptr inbounds i8, ptr %89, i64 40, !dbg !3962
  %90 = load i64, ptr %ptradd108, align 8, !dbg !3962
  %91 = load ptr, ptr %self, align 8, !dbg !3963
  %ptradd109 = getelementptr inbounds i8, ptr %91, i64 16, !dbg !3963
  %ptradd110 = getelementptr inbounds i8, ptr %ptradd109, i64 8, !dbg !3963
  %92 = load i64, ptr %ptradd110, align 8, !dbg !3963
  %lt111 = icmp ult i64 %90, %92, !dbg !3962
  br label %or.phi, !dbg !3962

or.phi:                                           ; preds = %or.rhs, %if.exit105
  %val112 = phi i1 [ true, %if.exit105 ], [ %lt111, %or.rhs ], !dbg !3962
  br i1 %val112, label %if.then113, label %if.exit114, !dbg !3962

if.then113:                                       ; preds = %or.phi
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !3964

if.exit114:                                       ; preds = %or.phi
  %93 = load %"char[]", ptr %buf32, align 8, !dbg !3966
  %94 = extractvalue %"char[]" %93, 0, !dbg !3966
  %95 = extractvalue %"char[]" %93, 1, !dbg !3967
  %gt115 = icmp ugt i64 0, %95, !dbg !3967
  %96 = call i1 @llvm.expect.i1(i1 %gt115, i1 false), !dbg !3967
  br i1 %96, label %panic116, label %checkok123, !dbg !3967

checkok123:                                       ; preds = %if.exit114
  %size124 = sub i64 %95, 0, !dbg !3966
  %97 = insertvalue %"char[]" undef, ptr %94, 0, !dbg !3966
  %98 = insertvalue %"char[]" %97, i64 %size124, 1, !dbg !3966
  %99 = load ptr, ptr %self, align 8, !dbg !3968
  %ptradd125 = getelementptr inbounds i8, ptr %99, i64 16, !dbg !3968
  %100 = load %"char[]", ptr %ptradd125, align 8, !dbg !3968
  %101 = extractvalue %"char[]" %100, 0, !dbg !3968
  %102 = extractvalue %"char[]" %100, 1, !dbg !3969
  %gt126 = icmp ugt i64 0, %102, !dbg !3969
  %103 = call i1 @llvm.expect.i1(i1 %gt126, i1 false), !dbg !3969
  br i1 %103, label %panic127, label %checkok134, !dbg !3969

checkok134:                                       ; preds = %checkok123
  %104 = load i64, ptr %n29, align 8, !dbg !3970
  %add135 = add i64 0, %104, !dbg !3970
  %gt136 = icmp ugt i64 0, %add135, !dbg !3970
  %sub137 = sub i64 %add135, 0, !dbg !3970
  %105 = call i1 @llvm.expect.i1(i1 %gt136, i1 false), !dbg !3970
  br i1 %105, label %panic138, label %checkok143, !dbg !3970

checkok143:                                       ; preds = %checkok134
  %lt144 = icmp ult i64 %102, %add135, !dbg !3968
  %sub145 = sub i64 %add135, 1, !dbg !3968
  %106 = call i1 @llvm.expect.i1(i1 %lt144, i1 false), !dbg !3968
  br i1 %106, label %panic146, label %checkok153, !dbg !3968

checkok153:                                       ; preds = %checkok143
  %size154 = sub i64 %add135, 0, !dbg !3968
  %107 = insertvalue %"char[]" undef, ptr %101, 0, !dbg !3968
  %108 = insertvalue %"char[]" %107, i64 %size154, 1, !dbg !3968
  %109 = extractvalue %"char[]" %108, 0, !dbg !3968
  %110 = extractvalue %"char[]" %98, 0, !dbg !3968
  %111 = extractvalue %"char[]" %98, 1, !dbg !3968
  %112 = extractvalue %"char[]" %108, 1, !dbg !3968
  %neq155 = icmp ne i64 %112, %111, !dbg !3968
  %113 = call i1 @llvm.expect.i1(i1 %neq155, i1 false), !dbg !3968
  br i1 %113, label %panic156, label %checkok163, !dbg !3968

checkok163:                                       ; preds = %checkok153
  %114 = mul i64 %111, 1, !dbg !3968
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %109, ptr align 1 %110, i64 %114, i1 false), !dbg !3968
  %115 = load ptr, ptr %self, align 8, !dbg !3971
  %ptradd164 = getelementptr inbounds i8, ptr %115, i64 32, !dbg !3971
  store i64 0, ptr %ptradd164, align 8, !dbg !3972
  %116 = load ptr, ptr %self, align 8, !dbg !3973
  %ptradd165 = getelementptr inbounds i8, ptr %116, i64 16, !dbg !3973
  %117 = load %"char[]", ptr %ptradd165, align 8, !dbg !3973
  %118 = extractvalue %"char[]" %117, 0, !dbg !3973
  %119 = load i64, ptr %n29, align 8, !dbg !3974
  %120 = extractvalue %"char[]" %117, 1, !dbg !3974
  %gt166 = icmp ugt i64 %119, %120, !dbg !3974
  %121 = call i1 @llvm.expect.i1(i1 %gt166, i1 false), !dbg !3974
  br i1 %121, label %panic167, label %checkok174, !dbg !3974

checkok174:                                       ; preds = %checkok163
  %size175 = sub i64 %120, %119, !dbg !3973
  %ptradd176 = getelementptr inbounds i8, ptr %118, i64 %119, !dbg !3973
  %122 = insertvalue %"char[]" undef, ptr %ptradd176, 0, !dbg !3973
  %123 = insertvalue %"char[]" %122, i64 %size175, 1, !dbg !3973
  store %"char[]" %123, ptr %buf32, align 8, !dbg !3973
    #dbg_declare(ptr %p, !3975, !DIExpression(), !3976)
  %124 = load ptr, ptr %self, align 8
  store ptr %124, ptr %self178, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf179, ptr align 8 %buf32, i32 16, i1 false)
  %125 = load ptr, ptr %self178, align 8, !dbg !3977
  %neq180 = icmp ne ptr %125, null, !dbg !3977
  br i1 %neq180, label %assert_ok182, label %assert_fail181, !dbg !3977

assert_fail181:                                   ; preds = %checkok174
  %126 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3977
  call void %126(ptr @.panic_msg.48, i64 32, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 90) #5, !dbg !3977
  unreachable, !dbg !3977

assert_ok182:                                     ; preds = %checkok174
    #dbg_declare(ptr %n183, !3981, !DIExpression(), !3982)
  %127 = load ptr, ptr %self178, align 8, !dbg !3983
  %ptradd185 = getelementptr inbounds i8, ptr %127, i64 8, !dbg !3984
  %128 = load i64, ptr %ptradd185, align 8, !dbg !3984
  %129 = inttoptr i64 %128 to ptr, !dbg !3984
  %type188 = load ptr, ptr %.cachedtype187, align 8, !dbg !3903
  %130 = icmp eq ptr %129, %type188, !dbg !3903
  br i1 %130, label %cache_hit191, label %cache_miss189, !dbg !3903

cache_miss189:                                    ; preds = %assert_ok182
  %ptradd190 = getelementptr inbounds i8, ptr %129, i64 16, !dbg !3903
  %131 = load ptr, ptr %ptradd190, align 8, !dbg !3903
  %132 = call ptr @.dyn_search(ptr %131, ptr @"$sel.read"), !dbg !3903
  store ptr %132, ptr %.inlinecache186, align 8, !dbg !3903
  store ptr %129, ptr %.cachedtype187, align 8, !dbg !3903
  br label %133, !dbg !3903

cache_hit191:                                     ; preds = %assert_ok182
  %cache_hit_fn192 = load ptr, ptr %.inlinecache186, align 8, !dbg !3903
  br label %133, !dbg !3903

133:                                              ; preds = %cache_hit191, %cache_miss189
  %fn_phi193 = phi ptr [ %cache_hit_fn192, %cache_hit191 ], [ %132, %cache_miss189 ], !dbg !3903
  %134 = icmp eq ptr %fn_phi193, null, !dbg !3903
  br i1 %134, label %missing_function194, label %match195, !dbg !3903

missing_function194:                              ; preds = %133
  %135 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3983
  call void %135(ptr @.panic_msg.39, i64 41, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 92) #5, !dbg !3983
  unreachable, !dbg !3983

match195:                                         ; preds = %133
  %136 = load ptr, ptr %127, align 8
  %lo197 = load ptr, ptr %buf179, align 8
  %ptradd198 = getelementptr inbounds i8, ptr %buf179, i64 8
  %hi199 = load i64, ptr %ptradd198, align 8
  %137 = call i64 %fn_phi193(ptr %retparam196, ptr %136, ptr %lo197, i64 %hi199), !dbg !3983
  %not_err200 = icmp eq i64 %137, 0, !dbg !3983
  %138 = call i1 @llvm.expect.i1(i1 %not_err200, i1 true), !dbg !3983
  br i1 %138, label %after_check202, label %assign_optional201, !dbg !3983

assign_optional201:                               ; preds = %match195
  store i64 %137, ptr %n.f184, align 8, !dbg !3983
  br label %after_assign203, !dbg !3983

after_check202:                                   ; preds = %match195
  %139 = load i64, ptr %retparam196, align 8, !dbg !3983
  store i64 %139, ptr %n183, align 8, !dbg !3983
  store i64 0, ptr %n.f184, align 8, !dbg !3983
  br label %after_assign203, !dbg !3983

after_assign203:                                  ; preds = %after_check202, %assign_optional201
    #dbg_declare(ptr %err204, !3985, !DIExpression(), !3986)
  br label %testblock205, !dbg !3986

testblock205:                                     ; preds = %after_assign203
  %optval206 = load i64, ptr %n.f184, align 8, !dbg !3987
  %not_err207 = icmp eq i64 %optval206, 0, !dbg !3987
  %140 = call i1 @llvm.expect.i1(i1 %not_err207, i1 true), !dbg !3987
  br i1 %140, label %after_check209, label %assign_optional208, !dbg !3987

assign_optional208:                               ; preds = %testblock205
  store i64 %optval206, ptr %err204, align 8, !dbg !3987
  br label %end_block210, !dbg !3987

after_check209:                                   ; preds = %testblock205
  store i64 0, ptr %err204, align 8, !dbg !3987
  br label %end_block210, !dbg !3987

end_block210:                                     ; preds = %after_check209, %assign_optional208
  %141 = load i64, ptr %err204, align 8, !dbg !3987
  %i2b211 = icmp ne i64 %141, 0, !dbg !3987
  br i1 %i2b211, label %if.then212, label %if.exit216, !dbg !3987

if.then212:                                       ; preds = %end_block210
  %142 = load i64, ptr %err204, align 8, !dbg !3988
  %eq213 = icmp eq i64 %142, ptrtoint (ptr @std.io.EOF to i64), !dbg !3988
  br i1 %eq213, label %if.then214, label %if.exit215, !dbg !3988

if.then214:                                       ; preds = %if.then212
  store i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), ptr %error_var177, align 8, !dbg !3990
  br label %guard_block217, !dbg !3990

if.exit215:                                       ; preds = %if.then212
  %143 = load i64, ptr %err204, align 8, !dbg !3991
  store i64 %143, ptr %error_var177, align 8, !dbg !3991
  br label %guard_block217, !dbg !3991

if.exit216:                                       ; preds = %end_block210
  br label %noerr_block218, !dbg !3992

guard_block217:                                   ; preds = %if.exit215, %if.then214
  %144 = load i64, ptr %error_var177, align 8, !dbg !3992
  ret i64 %144, !dbg !3992

noerr_block218:                                   ; preds = %if.exit216
  %145 = load i64, ptr %n183, align 8, !dbg !3992
  store i64 %145, ptr %p, align 8, !dbg !3992
  %146 = load ptr, ptr %self, align 8, !dbg !3993
  %ptradd219 = getelementptr inbounds i8, ptr %146, i64 40, !dbg !3993
  %147 = load i64, ptr %n29, align 8, !dbg !3994
  %148 = load i64, ptr %p, align 8, !dbg !3995
  %add220 = add i64 %147, %148, !dbg !3994
  store i64 %add220, ptr %ptradd219, align 8, !dbg !3994
  %149 = load %"char[]", ptr %buf32, align 8, !dbg !3996
  %150 = extractvalue %"char[]" %149, 0, !dbg !3996
  %151 = extractvalue %"char[]" %149, 1, !dbg !3997
  %gt221 = icmp ugt i64 0, %151, !dbg !3997
  %152 = call i1 @llvm.expect.i1(i1 %gt221, i1 false), !dbg !3997
  br i1 %152, label %panic222, label %checkok229, !dbg !3997

checkok229:                                       ; preds = %noerr_block218
  %153 = load i64, ptr %p, align 8, !dbg !3998
  %add230 = add i64 0, %153, !dbg !3998
  %gt231 = icmp ugt i64 0, %add230, !dbg !3998
  %sub232 = sub i64 %add230, 0, !dbg !3998
  %154 = call i1 @llvm.expect.i1(i1 %gt231, i1 false), !dbg !3998
  br i1 %154, label %panic233, label %checkok238, !dbg !3998

checkok238:                                       ; preds = %checkok229
  %lt239 = icmp ult i64 %151, %add230, !dbg !3996
  %sub240 = sub i64 %add230, 1, !dbg !3996
  %155 = call i1 @llvm.expect.i1(i1 %lt239, i1 false), !dbg !3996
  br i1 %155, label %panic241, label %checkok248, !dbg !3996

checkok248:                                       ; preds = %checkok238
  %size249 = sub i64 %add230, 0, !dbg !3996
  %156 = insertvalue %"char[]" undef, ptr %150, 0, !dbg !3996
  %157 = insertvalue %"char[]" %156, i64 %size249, 1, !dbg !3996
  store %"char[]" %157, ptr %buf32, align 8, !dbg !3996
    #dbg_declare(ptr %i250, !3999, !DIExpression(), !4000)
  %158 = load ptr, ptr %self, align 8
  store ptr %158, ptr %self252, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf253, ptr align 8 %buf32, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %pattern254, ptr align 8 %pattern, i32 16, i1 false)
  %159 = load ptr, ptr %self252, align 8, !dbg !4001
  %neq255 = icmp ne ptr %159, null, !dbg !4001
  br i1 %neq255, label %assert_ok257, label %assert_fail256, !dbg !4001

assert_fail256:                                   ; preds = %checkok248
  %160 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4001
  call void %160(ptr @.panic_msg.48, i64 32, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 85) #5, !dbg !4001
  unreachable, !dbg !4001

assert_ok257:                                     ; preds = %checkok248
  %161 = load %"char[]", ptr %buf253, align 8, !dbg !4005
  %162 = load %"char[]", ptr %pattern254, align 8, !dbg !4006
  %163 = extractvalue %"char[]" %162, 1, !dbg !4007
  %lt258 = icmp ult i64 0, %163, !dbg !4005
  br i1 %lt258, label %assert_ok260, label %assert_fail259, !dbg !4005

assert_fail259:                                   ; preds = %assert_ok257
  %164 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4005
  call void %164(ptr @.panic_msg.163, i64 71, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 87) #5, !dbg !4005
  unreachable, !dbg !4005

assert_ok260:                                     ; preds = %assert_ok257
  %165 = extractvalue %"char[]" %161, 0
  %166 = extractvalue %"char[]" %161, 1
  %167 = extractvalue %"char[]" %162, 0
  %168 = extractvalue %"char[]" %162, 1
  %169 = call i64 @std.core.String.index_of(ptr %retparam261, ptr %165, i64 %166, ptr %167, i64 %168), !dbg !4005
  %not_err262 = icmp eq i64 %169, 0, !dbg !4005
  %170 = call i1 @llvm.expect.i1(i1 %not_err262, i1 true), !dbg !4005
  br i1 %170, label %after_check264, label %assign_optional263, !dbg !4005

assign_optional263:                               ; preds = %assert_ok260
  store i64 %169, ptr %error_var251, align 8, !dbg !4005
  br label %guard_block265, !dbg !4005

after_check264:                                   ; preds = %assert_ok260
  br label %noerr_block266, !dbg !4005

guard_block265:                                   ; preds = %assign_optional263
  %171 = load i64, ptr %error_var251, align 8, !dbg !4005
  ret i64 %171, !dbg !4005

noerr_block266:                                   ; preds = %after_check264
  %172 = load i64, ptr %retparam261, align 8, !dbg !4005
  store i64 %172, ptr %i250, align 8, !dbg !4005
  %173 = load ptr, ptr %self, align 8, !dbg !4008
  %ptradd267 = getelementptr inbounds i8, ptr %173, i64 32, !dbg !4008
  %174 = load i64, ptr %n29, align 8, !dbg !4009
  %175 = load i64, ptr %i250, align 8, !dbg !4010
  %add268 = add i64 %174, %175, !dbg !4009
  %ptradd269 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !4011
  %176 = load i64, ptr %ptradd269, align 8, !dbg !4011
  %add270 = add i64 %add268, %176, !dbg !4009
  store i64 %add270, ptr %ptradd267, align 8, !dbg !4009
  %177 = load ptr, ptr %self, align 8, !dbg !4012
  %ptradd272 = getelementptr inbounds i8, ptr %177, i64 16, !dbg !4012
  %178 = load %"char[]", ptr %ptradd272, align 8, !dbg !4012
  %179 = extractvalue %"char[]" %178, 0, !dbg !4012
  %180 = extractvalue %"char[]" %178, 1, !dbg !4013
  %gt273 = icmp ugt i64 0, %180, !dbg !4013
  %181 = call i1 @llvm.expect.i1(i1 %gt273, i1 false), !dbg !4013
  br i1 %181, label %panic274, label %checkok281, !dbg !4013

checkok281:                                       ; preds = %noerr_block266
  %182 = load i64, ptr %n29, align 8, !dbg !4014
  %183 = load i64, ptr %i250, align 8, !dbg !4015
  %add282 = add i64 %182, %183, !dbg !4014
  %add283 = add i64 0, %add282, !dbg !4014
  %gt284 = icmp ugt i64 0, %add283, !dbg !4014
  %sub285 = sub i64 %add283, 0, !dbg !4014
  %184 = call i1 @llvm.expect.i1(i1 %gt284, i1 false), !dbg !4014
  br i1 %184, label %panic286, label %checkok291, !dbg !4014

checkok291:                                       ; preds = %checkok281
  %lt292 = icmp ult i64 %180, %add283, !dbg !4012
  %sub293 = sub i64 %add283, 1, !dbg !4012
  %185 = call i1 @llvm.expect.i1(i1 %lt292, i1 false), !dbg !4012
  br i1 %185, label %panic294, label %checkok301, !dbg !4012

checkok301:                                       ; preds = %checkok291
  %size302 = sub i64 %add283, 0, !dbg !4012
  %186 = insertvalue %"char[]" undef, ptr %179, 0, !dbg !4012
  %187 = insertvalue %"char[]" %186, i64 %size302, 1, !dbg !4012
  store %"char[]" %187, ptr %0, align 8, !dbg !4012
  ret i64 0, !dbg !4012

panic:                                            ; preds = %entry
  %188 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3905
  call void %188(ptr @.panic_msg, i64 62, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 48) #5, !dbg !3905
  unreachable, !dbg !3905

panic36:                                          ; preds = %assert_ok28
  store i64 %53, ptr %taddr, align 8
  %189 = insertvalue %any undef, ptr %taddr, 0
  %190 = insertvalue %any %189, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %52, ptr %taddr37, align 8
  %191 = insertvalue %any undef, ptr %taddr37, 0
  %192 = insertvalue %any %191, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %190, ptr %varargslots, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %192, ptr %ptradd38, align 16
  %193 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %193, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 58, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3942
  unreachable, !dbg !3942

panic42:                                          ; preds = %checkok39
  store i64 %sub41, ptr %taddr43, align 8
  %194 = insertvalue %any undef, ptr %taddr43, 0
  %195 = insertvalue %any %194, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %195, ptr %varargslots44, align 16
  %196 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp45" = insertvalue %"any[]" %196, i64 1, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 58, ptr byval(%"any[]") align 8 %indirectarg46) #5, !dbg !3942
  unreachable, !dbg !3942

panic50:                                          ; preds = %checkok47
  store i64 %sub49, ptr %taddr51, align 8
  %197 = insertvalue %any undef, ptr %taddr51, 0
  %198 = insertvalue %any %197, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %53, ptr %taddr52, align 8
  %199 = insertvalue %any undef, ptr %taddr52, 0
  %200 = insertvalue %any %199, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %198, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %200, ptr %ptradd54, align 16
  %201 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %201, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 58, ptr byval(%"any[]") align 8 %indirectarg56) #5, !dbg !3942
  unreachable, !dbg !3942

panic77:                                          ; preds = %if.then71
  store i64 %80, ptr %taddr78, align 8
  %202 = insertvalue %any undef, ptr %taddr78, 0
  %203 = insertvalue %any %202, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr79, align 8
  %204 = insertvalue %any undef, ptr %taddr79, 0
  %205 = insertvalue %any %204, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %203, ptr %varargslots80, align 16
  %ptradd81 = getelementptr inbounds i8, ptr %varargslots80, i64 16
  store %any %205, ptr %ptradd81, align 16
  %206 = insertvalue %"any[]" undef, ptr %varargslots80, 0
  %"$$temp82" = insertvalue %"any[]" %206, i64 2, 1
  store %"any[]" %"$$temp82", ptr %indirectarg83, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 62, ptr byval(%"any[]") align 8 %indirectarg83) #5, !dbg !3958
  unreachable, !dbg !3958

panic88:                                          ; preds = %checkok84
  store i64 %sub87, ptr %taddr89, align 8
  %207 = insertvalue %any undef, ptr %taddr89, 0
  %208 = insertvalue %any %207, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %208, ptr %varargslots90, align 16
  %209 = insertvalue %"any[]" undef, ptr %varargslots90, 0
  %"$$temp91" = insertvalue %"any[]" %209, i64 1, 1
  store %"any[]" %"$$temp91", ptr %indirectarg92, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 62, ptr byval(%"any[]") align 8 %indirectarg92) #5, !dbg !3958
  unreachable, !dbg !3958

panic96:                                          ; preds = %checkok93
  store i64 %sub95, ptr %taddr97, align 8
  %210 = insertvalue %any undef, ptr %taddr97, 0
  %211 = insertvalue %any %210, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %80, ptr %taddr98, align 8
  %212 = insertvalue %any undef, ptr %taddr98, 0
  %213 = insertvalue %any %212, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %211, ptr %varargslots99, align 16
  %ptradd100 = getelementptr inbounds i8, ptr %varargslots99, i64 16
  store %any %213, ptr %ptradd100, align 16
  %214 = insertvalue %"any[]" undef, ptr %varargslots99, 0
  %"$$temp101" = insertvalue %"any[]" %214, i64 2, 1
  store %"any[]" %"$$temp101", ptr %indirectarg102, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 62, ptr byval(%"any[]") align 8 %indirectarg102) #5, !dbg !3958
  unreachable, !dbg !3958

panic116:                                         ; preds = %if.exit114
  store i64 %95, ptr %taddr117, align 8
  %215 = insertvalue %any undef, ptr %taddr117, 0
  %216 = insertvalue %any %215, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr118, align 8
  %217 = insertvalue %any undef, ptr %taddr118, 0
  %218 = insertvalue %any %217, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %216, ptr %varargslots119, align 16
  %ptradd120 = getelementptr inbounds i8, ptr %varargslots119, i64 16
  store %any %218, ptr %ptradd120, align 16
  %219 = insertvalue %"any[]" undef, ptr %varargslots119, 0
  %"$$temp121" = insertvalue %"any[]" %219, i64 2, 1
  store %"any[]" %"$$temp121", ptr %indirectarg122, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 71, ptr byval(%"any[]") align 8 %indirectarg122) #5, !dbg !3966
  unreachable, !dbg !3966

panic127:                                         ; preds = %checkok123
  store i64 %102, ptr %taddr128, align 8
  %220 = insertvalue %any undef, ptr %taddr128, 0
  %221 = insertvalue %any %220, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr129, align 8
  %222 = insertvalue %any undef, ptr %taddr129, 0
  %223 = insertvalue %any %222, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %221, ptr %varargslots130, align 16
  %ptradd131 = getelementptr inbounds i8, ptr %varargslots130, i64 16
  store %any %223, ptr %ptradd131, align 16
  %224 = insertvalue %"any[]" undef, ptr %varargslots130, 0
  %"$$temp132" = insertvalue %"any[]" %224, i64 2, 1
  store %"any[]" %"$$temp132", ptr %indirectarg133, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 71, ptr byval(%"any[]") align 8 %indirectarg133) #5, !dbg !3968
  unreachable, !dbg !3968

panic138:                                         ; preds = %checkok134
  store i64 %sub137, ptr %taddr139, align 8
  %225 = insertvalue %any undef, ptr %taddr139, 0
  %226 = insertvalue %any %225, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %226, ptr %varargslots140, align 16
  %227 = insertvalue %"any[]" undef, ptr %varargslots140, 0
  %"$$temp141" = insertvalue %"any[]" %227, i64 1, 1
  store %"any[]" %"$$temp141", ptr %indirectarg142, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 71, ptr byval(%"any[]") align 8 %indirectarg142) #5, !dbg !3968
  unreachable, !dbg !3968

panic146:                                         ; preds = %checkok143
  store i64 %sub145, ptr %taddr147, align 8
  %228 = insertvalue %any undef, ptr %taddr147, 0
  %229 = insertvalue %any %228, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %102, ptr %taddr148, align 8
  %230 = insertvalue %any undef, ptr %taddr148, 0
  %231 = insertvalue %any %230, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %229, ptr %varargslots149, align 16
  %ptradd150 = getelementptr inbounds i8, ptr %varargslots149, i64 16
  store %any %231, ptr %ptradd150, align 16
  %232 = insertvalue %"any[]" undef, ptr %varargslots149, 0
  %"$$temp151" = insertvalue %"any[]" %232, i64 2, 1
  store %"any[]" %"$$temp151", ptr %indirectarg152, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 71, ptr byval(%"any[]") align 8 %indirectarg152) #5, !dbg !3968
  unreachable, !dbg !3968

panic156:                                         ; preds = %checkok153
  store i64 %112, ptr %taddr157, align 8
  %233 = insertvalue %any undef, ptr %taddr157, 0
  %234 = insertvalue %any %233, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %111, ptr %taddr158, align 8
  %235 = insertvalue %any undef, ptr %taddr158, 0
  %236 = insertvalue %any %235, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %234, ptr %varargslots159, align 16
  %ptradd160 = getelementptr inbounds i8, ptr %varargslots159, i64 16
  store %any %236, ptr %ptradd160, align 16
  %237 = insertvalue %"any[]" undef, ptr %varargslots159, 0
  %"$$temp161" = insertvalue %"any[]" %237, i64 2, 1
  store %"any[]" %"$$temp161", ptr %indirectarg162, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.108, i64 38, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 71, ptr byval(%"any[]") align 8 %indirectarg162) #5, !dbg !3968
  unreachable, !dbg !3968

panic167:                                         ; preds = %checkok163
  store i64 %120, ptr %taddr168, align 8
  %238 = insertvalue %any undef, ptr %taddr168, 0
  %239 = insertvalue %any %238, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %119, ptr %taddr169, align 8
  %240 = insertvalue %any undef, ptr %taddr169, 0
  %241 = insertvalue %any %240, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %239, ptr %varargslots170, align 16
  %ptradd171 = getelementptr inbounds i8, ptr %varargslots170, i64 16
  store %any %241, ptr %ptradd171, align 16
  %242 = insertvalue %"any[]" undef, ptr %varargslots170, 0
  %"$$temp172" = insertvalue %"any[]" %242, i64 2, 1
  store %"any[]" %"$$temp172", ptr %indirectarg173, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg173) #5, !dbg !3973
  unreachable, !dbg !3973

panic222:                                         ; preds = %noerr_block218
  store i64 %151, ptr %taddr223, align 8
  %243 = insertvalue %any undef, ptr %taddr223, 0
  %244 = insertvalue %any %243, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr224, align 8
  %245 = insertvalue %any undef, ptr %taddr224, 0
  %246 = insertvalue %any %245, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %244, ptr %varargslots225, align 16
  %ptradd226 = getelementptr inbounds i8, ptr %varargslots225, i64 16
  store %any %246, ptr %ptradd226, align 16
  %247 = insertvalue %"any[]" undef, ptr %varargslots225, 0
  %"$$temp227" = insertvalue %"any[]" %247, i64 2, 1
  store %"any[]" %"$$temp227", ptr %indirectarg228, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 78, ptr byval(%"any[]") align 8 %indirectarg228) #5, !dbg !3996
  unreachable, !dbg !3996

panic233:                                         ; preds = %checkok229
  store i64 %sub232, ptr %taddr234, align 8
  %248 = insertvalue %any undef, ptr %taddr234, 0
  %249 = insertvalue %any %248, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %249, ptr %varargslots235, align 16
  %250 = insertvalue %"any[]" undef, ptr %varargslots235, 0
  %"$$temp236" = insertvalue %"any[]" %250, i64 1, 1
  store %"any[]" %"$$temp236", ptr %indirectarg237, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 78, ptr byval(%"any[]") align 8 %indirectarg237) #5, !dbg !3996
  unreachable, !dbg !3996

panic241:                                         ; preds = %checkok238
  store i64 %sub240, ptr %taddr242, align 8
  %251 = insertvalue %any undef, ptr %taddr242, 0
  %252 = insertvalue %any %251, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %151, ptr %taddr243, align 8
  %253 = insertvalue %any undef, ptr %taddr243, 0
  %254 = insertvalue %any %253, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %252, ptr %varargslots244, align 16
  %ptradd245 = getelementptr inbounds i8, ptr %varargslots244, i64 16
  store %any %254, ptr %ptradd245, align 16
  %255 = insertvalue %"any[]" undef, ptr %varargslots244, 0
  %"$$temp246" = insertvalue %"any[]" %255, i64 2, 1
  store %"any[]" %"$$temp246", ptr %indirectarg247, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 78, ptr byval(%"any[]") align 8 %indirectarg247) #5, !dbg !3996
  unreachable, !dbg !3996

panic274:                                         ; preds = %noerr_block266
  store i64 %180, ptr %taddr275, align 8
  %256 = insertvalue %any undef, ptr %taddr275, 0
  %257 = insertvalue %any %256, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr276, align 8
  %258 = insertvalue %any undef, ptr %taddr276, 0
  %259 = insertvalue %any %258, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %257, ptr %varargslots277, align 16
  %ptradd278 = getelementptr inbounds i8, ptr %varargslots277, i64 16
  store %any %259, ptr %ptradd278, align 16
  %260 = insertvalue %"any[]" undef, ptr %varargslots277, 0
  %"$$temp279" = insertvalue %"any[]" %260, i64 2, 1
  store %"any[]" %"$$temp279", ptr %indirectarg280, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 82, ptr byval(%"any[]") align 8 %indirectarg280) #5, !dbg !4012
  unreachable, !dbg !4012

panic286:                                         ; preds = %checkok281
  store i64 %sub285, ptr %taddr287, align 8
  %261 = insertvalue %any undef, ptr %taddr287, 0
  %262 = insertvalue %any %261, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %262, ptr %varargslots288, align 16
  %263 = insertvalue %"any[]" undef, ptr %varargslots288, 0
  %"$$temp289" = insertvalue %"any[]" %263, i64 1, 1
  store %"any[]" %"$$temp289", ptr %indirectarg290, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 82, ptr byval(%"any[]") align 8 %indirectarg290) #5, !dbg !4012
  unreachable, !dbg !4012

panic294:                                         ; preds = %checkok291
  store i64 %sub293, ptr %taddr295, align 8
  %264 = insertvalue %any undef, ptr %taddr295, 0
  %265 = insertvalue %any %264, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %180, ptr %taddr296, align 8
  %266 = insertvalue %any undef, ptr %taddr296, 0
  %267 = insertvalue %any %266, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %265, ptr %varargslots297, align 16
  %ptradd298 = getelementptr inbounds i8, ptr %varargslots297, i64 16
  store %any %267, ptr %ptradd298, align 16
  %268 = insertvalue %"any[]" undef, ptr %varargslots297, 0
  %"$$temp299" = insertvalue %"any[]" %268, i64 2, 1
  store %"any[]" %"$$temp299", ptr %indirectarg300, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.157, i64 10, ptr @.func.160, i64 4, i32 82, ptr byval(%"any[]") align 8 %indirectarg300) #5, !dbg !4012
  unreachable, !dbg !4012
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Scanner.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !4016 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr16 = alloca i64, align 8
  %varargslots17 = alloca [1 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %varargslots46 = alloca [1 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %taddr62 = alloca i64, align 8
  %taddr63 = alloca i64, align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr73 = alloca i64, align 8
  %taddr74 = alloca i64, align 8
  %varargslots75 = alloca [2 x %any], align 16
  %indirectarg78 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !4019
  %4 = icmp eq ptr %1, null, !dbg !4019
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !4019
  br i1 %5, label %panic, label %checkok, !dbg !4019

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4020, !DIExpression(), !4021)
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !4022, !DIExpression(), !4023)
    #dbg_declare(ptr %n, !4024, !DIExpression(), !4025)
  store i64 0, ptr %n, align 8, !dbg !4025
  %6 = load ptr, ptr %self, align 8, !dbg !4026
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !4026
  %7 = load i64, ptr %ptradd1, align 8, !dbg !4026
  %8 = load ptr, ptr %self, align 8, !dbg !4027
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 40, !dbg !4027
  %9 = load i64, ptr %ptradd2, align 8, !dbg !4027
  %lt = icmp ult i64 %7, %9, !dbg !4026
  br i1 %lt, label %if.then, label %if.exit, !dbg !4026

if.then:                                          ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !4028
  %10 = load i64, ptr %ptradd3, align 8
  store i64 %10, ptr %x, align 8
  %11 = load ptr, ptr %self, align 8, !dbg !4030
  %ptradd4 = getelementptr inbounds i8, ptr %11, i64 40, !dbg !4030
  %12 = load i64, ptr %ptradd4, align 8, !dbg !4030
  %13 = load ptr, ptr %self, align 8, !dbg !4031
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 32, !dbg !4031
  %14 = load i64, ptr %ptradd5, align 8, !dbg !4031
  %sub = sub i64 %12, %14, !dbg !4030
  store i64 %sub, ptr %.anon, align 8
  %15 = load i64, ptr %x, align 8
  store i64 %15, ptr %a, align 8
  %16 = load i64, ptr %.anon, align 8
  store i64 %16, ptr %b, align 8
  %17 = load i64, ptr %a, align 8, !dbg !4032
  %18 = load i64, ptr %b, align 8, !dbg !4037
  %lt6 = icmp ult i64 %17, %18, !dbg !4032
  br i1 %lt6, label %cond.lhs, label %cond.rhs, !dbg !4032

cond.lhs:                                         ; preds = %if.then
  %19 = load i64, ptr %x, align 8, !dbg !4038
  br label %cond.phi, !dbg !4038

cond.rhs:                                         ; preds = %if.then
  %20 = load i64, ptr %.anon, align 8, !dbg !4039
  br label %cond.phi, !dbg !4039

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %19, %cond.lhs ], [ %20, %cond.rhs ], !dbg !4039
  store i64 %val, ptr %n, align 8, !dbg !4039
  %21 = load ptr, ptr %self, align 8, !dbg !4040
  %ptradd7 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !4040
  %22 = load %"char[]", ptr %ptradd7, align 8, !dbg !4040
  %23 = extractvalue %"char[]" %22, 0, !dbg !4040
  %24 = load ptr, ptr %self, align 8, !dbg !4041
  %ptradd8 = getelementptr inbounds i8, ptr %24, i64 32, !dbg !4041
  %25 = load i64, ptr %ptradd8, align 8, !dbg !4041
  %26 = extractvalue %"char[]" %22, 1, !dbg !4041
  %gt = icmp ugt i64 %25, %26, !dbg !4041
  %27 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !4041
  br i1 %27, label %panic9, label %checkok12, !dbg !4041

checkok12:                                        ; preds = %cond.phi
  %28 = load i64, ptr %n, align 8, !dbg !4042
  %add = add i64 %25, %28, !dbg !4042
  %gt13 = icmp ugt i64 %25, %add, !dbg !4042
  %sub14 = sub i64 %add, %25, !dbg !4042
  %29 = call i1 @llvm.expect.i1(i1 %gt13, i1 false), !dbg !4042
  br i1 %29, label %panic15, label %checkok20, !dbg !4042

checkok20:                                        ; preds = %checkok12
  %lt21 = icmp ult i64 %26, %add, !dbg !4040
  %sub22 = sub i64 %add, 1, !dbg !4040
  %30 = call i1 @llvm.expect.i1(i1 %lt21, i1 false), !dbg !4040
  br i1 %30, label %panic23, label %checkok30, !dbg !4040

checkok30:                                        ; preds = %checkok20
  %size = sub i64 %add, %25, !dbg !4040
  %ptradd31 = getelementptr inbounds i8, ptr %23, i64 %25, !dbg !4040
  %31 = insertvalue %"char[]" undef, ptr %ptradd31, 0, !dbg !4040
  %32 = insertvalue %"char[]" %31, i64 %size, 1, !dbg !4040
  %33 = load %"char[]", ptr %bytes, align 8, !dbg !4043
  %34 = extractvalue %"char[]" %33, 0, !dbg !4043
  %35 = extractvalue %"char[]" %33, 1, !dbg !4044
  %gt32 = icmp ugt i64 0, %35, !dbg !4044
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !4044
  br i1 %36, label %panic33, label %checkok40, !dbg !4044

checkok40:                                        ; preds = %checkok30
  %37 = load i64, ptr %n, align 8, !dbg !4045
  %add41 = add i64 0, %37, !dbg !4045
  %gt42 = icmp ugt i64 0, %add41, !dbg !4045
  %sub43 = sub i64 %add41, 0, !dbg !4045
  %38 = call i1 @llvm.expect.i1(i1 %gt42, i1 false), !dbg !4045
  br i1 %38, label %panic44, label %checkok49, !dbg !4045

checkok49:                                        ; preds = %checkok40
  %lt50 = icmp ult i64 %35, %add41, !dbg !4043
  %sub51 = sub i64 %add41, 1, !dbg !4043
  %39 = call i1 @llvm.expect.i1(i1 %lt50, i1 false), !dbg !4043
  br i1 %39, label %panic52, label %checkok59, !dbg !4043

checkok59:                                        ; preds = %checkok49
  %size60 = sub i64 %add41, 0, !dbg !4043
  %40 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !4043
  %41 = insertvalue %"char[]" %40, i64 %size60, 1, !dbg !4043
  %42 = extractvalue %"char[]" %41, 0, !dbg !4043
  %43 = extractvalue %"char[]" %32, 0, !dbg !4043
  %44 = extractvalue %"char[]" %32, 1, !dbg !4043
  %45 = extractvalue %"char[]" %41, 1, !dbg !4043
  %neq = icmp ne i64 %45, %44, !dbg !4043
  %46 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !4043
  br i1 %46, label %panic61, label %checkok68, !dbg !4043

checkok68:                                        ; preds = %checkok59
  %47 = mul i64 %44, 1, !dbg !4043
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %42, ptr align 1 %43, i64 %47, i1 false), !dbg !4043
  %48 = load ptr, ptr %self, align 8, !dbg !4046
  %ptradd69 = getelementptr inbounds i8, ptr %48, i64 32, !dbg !4046
  %49 = load i64, ptr %ptradd69, align 8, !dbg !4046
  %50 = load i64, ptr %n, align 8, !dbg !4047
  %add70 = add i64 %49, %50, !dbg !4046
  store i64 %add70, ptr %ptradd69, align 8, !dbg !4046
  %51 = load %"char[]", ptr %bytes, align 8, !dbg !4048
  %52 = extractvalue %"char[]" %51, 0, !dbg !4048
  %53 = load i64, ptr %n, align 8, !dbg !4049
  %54 = extractvalue %"char[]" %51, 1, !dbg !4049
  %gt71 = icmp ugt i64 %53, %54, !dbg !4049
  %55 = call i1 @llvm.expect.i1(i1 %gt71, i1 false), !dbg !4049
  br i1 %55, label %panic72, label %checkok79, !dbg !4049

checkok79:                                        ; preds = %checkok68
  %size80 = sub i64 %54, %53, !dbg !4048
  %ptradd81 = getelementptr inbounds i8, ptr %52, i64 %53, !dbg !4048
  %56 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !4048
  %57 = insertvalue %"char[]" %56, i64 %size80, 1, !dbg !4048
  store %"char[]" %57, ptr %bytes, align 8, !dbg !4048
  br label %if.exit, !dbg !4048

if.exit:                                          ; preds = %checkok79, %checkok
  %58 = load i64, ptr %n, align 8, !dbg !4050
  %59 = load ptr, ptr %self, align 8, !dbg !4051
  %ptradd82 = getelementptr inbounds i8, ptr %59, i64 8, !dbg !4052
  %60 = load i64, ptr %ptradd82, align 8, !dbg !4052
  %61 = inttoptr i64 %60 to ptr, !dbg !4052
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !4019
  %62 = icmp eq ptr %61, %type, !dbg !4019
  br i1 %62, label %cache_hit, label %cache_miss, !dbg !4019

cache_miss:                                       ; preds = %if.exit
  %ptradd83 = getelementptr inbounds i8, ptr %61, i64 16, !dbg !4019
  %63 = load ptr, ptr %ptradd83, align 8, !dbg !4019
  %64 = call ptr @.dyn_search(ptr %63, ptr @"$sel.read"), !dbg !4019
  store ptr %64, ptr %.inlinecache, align 8, !dbg !4019
  store ptr %61, ptr %.cachedtype, align 8, !dbg !4019
  br label %65, !dbg !4019

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !4019
  br label %65, !dbg !4019

65:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %64, %cache_miss ], !dbg !4019
  %66 = icmp eq ptr %fn_phi, null, !dbg !4019
  br i1 %66, label %missing_function, label %match, !dbg !4019

missing_function:                                 ; preds = %65
  %67 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4051
  call void %67(ptr @.panic_msg.39, i64 41, ptr @.file.157, i64 10, ptr @.func.118, i64 4, i32 111) #5, !dbg !4051
  unreachable, !dbg !4051

match:                                            ; preds = %65
  %68 = load ptr, ptr %59, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd84 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd84, align 8
  %69 = call i64 %fn_phi(ptr %retparam, ptr %68, ptr %lo, i64 %hi), !dbg !4051
  %not_err = icmp eq i64 %69, 0, !dbg !4051
  %70 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4051
  br i1 %70, label %after_check, label %assign_optional, !dbg !4051

assign_optional:                                  ; preds = %match
  store i64 %69, ptr %error_var, align 8, !dbg !4051
  br label %guard_block, !dbg !4051

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !4051

guard_block:                                      ; preds = %assign_optional
  %71 = load i64, ptr %error_var, align 8, !dbg !4051
  ret i64 %71, !dbg !4051

noerr_block:                                      ; preds = %after_check
  %72 = load i64, ptr %retparam, align 8, !dbg !4051
  %add85 = add i64 %58, %72, !dbg !4050
  store i64 %add85, ptr %n, align 8, !dbg !4050
  %73 = load i64, ptr %n, align 8, !dbg !4053
  store i64 %73, ptr %0, align 8, !dbg !4053
  ret i64 0, !dbg !4053

panic:                                            ; preds = %entry
  %74 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4021
  call void %74(ptr @.panic_msg, i64 62, ptr @.file.157, i64 10, ptr @.func.118, i64 4, i32 101) #5, !dbg !4021
  unreachable, !dbg !4021

panic9:                                           ; preds = %cond.phi
  store i64 %26, ptr %taddr, align 8
  %75 = insertvalue %any undef, ptr %taddr, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr10, align 8
  %77 = insertvalue %any undef, ptr %taddr10, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %76, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %78, ptr %ptradd11, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.157, i64 10, ptr @.func.118, i64 4, i32 107, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !4040
  unreachable, !dbg !4040

panic15:                                          ; preds = %checkok12
  store i64 %sub14, ptr %taddr16, align 8
  %80 = insertvalue %any undef, ptr %taddr16, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %81, ptr %varargslots17, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp18" = insertvalue %"any[]" %82, i64 1, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.157, i64 10, ptr @.func.118, i64 4, i32 107, ptr byval(%"any[]") align 8 %indirectarg19) #5, !dbg !4040
  unreachable, !dbg !4040

panic23:                                          ; preds = %checkok20
  store i64 %sub22, ptr %taddr24, align 8
  %83 = insertvalue %any undef, ptr %taddr24, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr25, align 8
  %85 = insertvalue %any undef, ptr %taddr25, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %84, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %86, ptr %ptradd27, align 16
  %87 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %87, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.157, i64 10, ptr @.func.118, i64 4, i32 107, ptr byval(%"any[]") align 8 %indirectarg29) #5, !dbg !4040
  unreachable, !dbg !4040

panic33:                                          ; preds = %checkok30
  store i64 %35, ptr %taddr34, align 8
  %88 = insertvalue %any undef, ptr %taddr34, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %90 = insertvalue %any undef, ptr %taddr35, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %89, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %91, ptr %ptradd37, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.157, i64 10, ptr @.func.118, i64 4, i32 107, ptr byval(%"any[]") align 8 %indirectarg39) #5, !dbg !4043
  unreachable, !dbg !4043

panic44:                                          ; preds = %checkok40
  store i64 %sub43, ptr %taddr45, align 8
  %93 = insertvalue %any undef, ptr %taddr45, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %94, ptr %varargslots46, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp47" = insertvalue %"any[]" %95, i64 1, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.157, i64 10, ptr @.func.118, i64 4, i32 107, ptr byval(%"any[]") align 8 %indirectarg48) #5, !dbg !4043
  unreachable, !dbg !4043

panic52:                                          ; preds = %checkok49
  store i64 %sub51, ptr %taddr53, align 8
  %96 = insertvalue %any undef, ptr %taddr53, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr54, align 8
  %98 = insertvalue %any undef, ptr %taddr54, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %97, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %99, ptr %ptradd56, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.157, i64 10, ptr @.func.118, i64 4, i32 107, ptr byval(%"any[]") align 8 %indirectarg58) #5, !dbg !4043
  unreachable, !dbg !4043

panic61:                                          ; preds = %checkok59
  store i64 %45, ptr %taddr62, align 8
  %101 = insertvalue %any undef, ptr %taddr62, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr63, align 8
  %103 = insertvalue %any undef, ptr %taddr63, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %102, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %104, ptr %ptradd65, align 16
  %105 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.108, i64 38, ptr @.file.157, i64 10, ptr @.func.118, i64 4, i32 107, ptr byval(%"any[]") align 8 %indirectarg67) #5, !dbg !4043
  unreachable, !dbg !4043

panic72:                                          ; preds = %checkok68
  store i64 %54, ptr %taddr73, align 8
  %106 = insertvalue %any undef, ptr %taddr73, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %53, ptr %taddr74, align 8
  %108 = insertvalue %any undef, ptr %taddr74, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %107, ptr %varargslots75, align 16
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp77", ptr %indirectarg78, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 61, ptr @.file.157, i64 10, ptr @.func.118, i64 4, i32 109, ptr byval(%"any[]") align 8 %indirectarg78) #5, !dbg !4048
  unreachable, !dbg !4048
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Scanner.read_byte(ptr %0, ptr %1) #0 comdat !dbg !4054 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr10 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i8, align 1
  store ptr null, ptr %.cachedtype, align 8, !dbg !4057
  %2 = icmp eq ptr %1, null, !dbg !4057
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !4057
  br i1 %3, label %panic, label %checkok, !dbg !4057

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4058, !DIExpression(), !4059)
  %4 = load ptr, ptr %self, align 8, !dbg !4060
  %ptradd = getelementptr inbounds i8, ptr %4, i64 32, !dbg !4060
  %5 = load i64, ptr %ptradd, align 8, !dbg !4060
  %6 = load ptr, ptr %self, align 8, !dbg !4061
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !4061
  %7 = load i64, ptr %ptradd1, align 8, !dbg !4061
  %lt = icmp ult i64 %5, %7, !dbg !4060
  br i1 %lt, label %if.then, label %if.exit, !dbg !4060

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !4062
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !4062
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 8, !dbg !4062
  %9 = load i64, ptr %ptradd3, align 8, !dbg !4062
  %10 = load ptr, ptr %ptradd2, align 8, !dbg !4062
  %11 = load ptr, ptr %self, align 8, !dbg !4064
  %ptradd4 = getelementptr inbounds i8, ptr %11, i64 32, !dbg !4064
  %12 = load i64, ptr %ptradd4, align 8, !dbg !4064
  %add = add i64 %12, 1, !dbg !4064
  store i64 %add, ptr %ptradd4, align 8, !dbg !4064
  %ge = icmp uge i64 %12, %9, !dbg !4064
  %13 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4064
  br i1 %13, label %panic5, label %checkok8, !dbg !4064

checkok8:                                         ; preds = %if.then
  %ptradd9 = getelementptr inbounds i8, ptr %10, i64 %12, !dbg !4064
  %14 = load i8, ptr %ptradd9, align 1, !dbg !4064
  store i8 %14, ptr %0, align 1, !dbg !4064
  ret i64 0, !dbg !4064

if.exit:                                          ; preds = %checkok
  %15 = load ptr, ptr %self, align 8, !dbg !4065
  %ptradd11 = getelementptr inbounds i8, ptr %15, i64 8, !dbg !4065
  %16 = load i64, ptr %ptradd11, align 8, !dbg !4065
  %17 = inttoptr i64 %16 to ptr, !dbg !4065
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !4057
  %18 = icmp eq ptr %17, %type, !dbg !4057
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !4057

cache_miss:                                       ; preds = %if.exit
  %ptradd12 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !4057
  %19 = load ptr, ptr %ptradd12, align 8, !dbg !4057
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.read_byte"), !dbg !4057
  store ptr %20, ptr %.inlinecache, align 8, !dbg !4057
  store ptr %17, ptr %.cachedtype, align 8, !dbg !4057
  br label %21, !dbg !4057

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !4057
  br label %21, !dbg !4057

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !4057
  %22 = icmp eq ptr %fn_phi, null, !dbg !4057
  br i1 %22, label %missing_function, label %match, !dbg !4057

missing_function:                                 ; preds = %21
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4065
  call void %23(ptr @.panic_msg.8, i64 46, ptr @.file.157, i64 10, ptr @.func.123, i64 9, i32 121) #5, !dbg !4065
  unreachable, !dbg !4065

match:                                            ; preds = %21
  %24 = load ptr, ptr %15, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24), !dbg !4065
  %not_err = icmp eq i64 %25, 0, !dbg !4065
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4065
  br i1 %26, label %after_check, label %assign_optional, !dbg !4065

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %reterr10, align 8, !dbg !4065
  br label %err_retblock, !dbg !4065

after_check:                                      ; preds = %match
  %27 = load i8, ptr %retparam, align 1, !dbg !4065
  store i8 %27, ptr %0, align 1, !dbg !4065
  ret i64 0, !dbg !4065

err_retblock:                                     ; preds = %assign_optional
  %28 = load i64, ptr %reterr10, align 8, !dbg !4065
  ret i64 %28, !dbg !4065

panic:                                            ; preds = %entry
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4059
  call void %29(ptr @.panic_msg, i64 62, ptr @.file.157, i64 10, ptr @.func.123, i64 9, i32 115) #5, !dbg !4059
  unreachable, !dbg !4059

panic5:                                           ; preds = %if.then
  store i64 %9, ptr %taddr, align 8
  %30 = insertvalue %any undef, ptr %taddr, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr6, align 8
  %32 = insertvalue %any undef, ptr %taddr6, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %31, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %33, ptr %ptradd7, align 16
  %34 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %34, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.157, i64 10, ptr @.func.123, i64 9, i32 119, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !4064
  unreachable, !dbg !4064
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.ReflectedParam.to_format(ptr %0, ptr %1, ptr %2) #0 comdat !dbg !4066 {
entry:
  %self = alloca ptr, align 8
  %f = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !4074
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !4074
  br i1 %4, label %panic, label %checkok, !dbg !4074

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4075, !DIExpression(), !4076)
  store ptr %2, ptr %f, align 8
    #dbg_declare(ptr %f, !4077, !DIExpression(), !4078)
  %5 = load ptr, ptr %self, align 8, !dbg !4079
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !4079
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.String" to i64), 1, !dbg !4079
  store %any %7, ptr %varargslots, align 16, !dbg !4079
  %8 = load ptr, ptr %f, align 8
  %9 = call i64 @std.io.Formatter.printf(ptr %retparam, ptr %8, ptr @.str.166, i64 16, ptr %varargslots, i64 1), !dbg !4080
  %not_err = icmp eq i64 %9, 0, !dbg !4080
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4080
  br i1 %10, label %after_check, label %assign_optional, !dbg !4080

assign_optional:                                  ; preds = %checkok
  store i64 %9, ptr %reterr, align 8, !dbg !4080
  br label %err_retblock, !dbg !4080

after_check:                                      ; preds = %checkok
  %11 = load i64, ptr %retparam, align 8, !dbg !4080
  store i64 %11, ptr %0, align 8, !dbg !4080
  ret i64 0, !dbg !4080

err_retblock:                                     ; preds = %assign_optional
  %12 = load i64, ptr %reterr, align 8, !dbg !4080
  ret i64 %12, !dbg !4080

panic:                                            ; preds = %entry
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4076
  call void %13(ptr @.panic_msg, i64 62, ptr @.file.164, i64 12, ptr @.func.165, i64 9, i32 53) #5, !dbg !4076
  unreachable, !dbg !4076
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.printf(ptr %0, ptr %1, ptr %2, i64 %3, ptr %4, i64 %5) #0 comdat !dbg !4081 {
entry:
  %self = alloca ptr, align 8
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %6 = icmp eq ptr %1, null, !dbg !4084
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !4084
  br i1 %7, label %panic, label %checkok, !dbg !4084

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4085, !DIExpression(), !4086)
  store ptr %2, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %format, !4087, !DIExpression(), !4088)
  store ptr %4, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %5, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !4089, !DIExpression(), !4090)
  %8 = load ptr, ptr %self, align 8
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %9 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %8, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5) #6, !dbg !4091
  %not_err = icmp eq i64 %9, 0, !dbg !4091
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4091
  br i1 %10, label %after_check, label %assign_optional, !dbg !4091

assign_optional:                                  ; preds = %checkok
  store i64 %9, ptr %reterr, align 8, !dbg !4091
  br label %err_retblock, !dbg !4091

after_check:                                      ; preds = %checkok
  %11 = load i64, ptr %retparam, align 8, !dbg !4091
  store i64 %11, ptr %0, align 8, !dbg !4091
  ret i64 0, !dbg !4091

err_retblock:                                     ; preds = %assign_optional
  %12 = load i64, ptr %reterr, align 8, !dbg !4091
  ret i64 %12, !dbg !4091

panic:                                            ; preds = %entry
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4086
  call void %13(ptr @.panic_msg, i64 62, ptr @.file.164, i64 12, ptr @.func.167, i64 6, i32 58) #5, !dbg !4086
  unreachable, !dbg !4086
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.Formatter.init(ptr %0, ptr %1, ptr %2) #0 comdat !dbg !4092 {
entry:
  %self = alloca ptr, align 8
  %out_fn = alloca ptr, align 8
  %data = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %Formatter, align 8
  %3 = icmp eq ptr %0, null, !dbg !4095
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !4095
  br i1 %4, label %panic, label %checkok, !dbg !4095

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !4096, !DIExpression(), !4097)
  store ptr %1, ptr %out_fn, align 8
    #dbg_declare(ptr %out_fn, !4098, !DIExpression(), !4099)
  store ptr %2, ptr %data, align 8
    #dbg_declare(ptr %data, !4100, !DIExpression(), !4101)
  %5 = load ptr, ptr %self, align 8, !dbg !4102
  %checknull = icmp eq ptr %5, null, !dbg !4102
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !4102
  br i1 %6, label %panic1, label %checkok2, !dbg !4102

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !4102
  %8 = urem i64 %7, 8, !dbg !4102
  %9 = icmp ne i64 %8, 0, !dbg !4102
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !4102
  br i1 %10, label %panic3, label %checkok5, !dbg !4102

checkok5:                                         ; preds = %checkok2
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  %11 = load ptr, ptr %data, align 8, !dbg !4103
  store ptr %11, ptr %.assign_list, align 8, !dbg !4103
  %ptradd6 = getelementptr inbounds i8, ptr %.assign_list, i64 8, !dbg !4103
  %12 = load ptr, ptr %out_fn, align 8, !dbg !4104
  store ptr %12, ptr %ptradd6, align 8, !dbg !4104
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !4104
  ret void, !dbg !4104

panic:                                            ; preds = %entry
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4097
  call void %13(ptr @.panic_msg, i64 62, ptr @.file.164, i64 12, ptr @.func, i64 4, i32 88) #5, !dbg !4097
  unreachable, !dbg !4097

panic1:                                           ; preds = %checkok
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4102
  call void %14(ptr @.panic_msg.2, i64 45, ptr @.file.164, i64 12, ptr @.func, i64 4, i32 90) #5, !dbg !4102
  unreachable, !dbg !4102

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %15 = insertvalue %any undef, ptr %taddr, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %17 = insertvalue %any undef, ptr %taddr4, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %16, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.164, i64 12, ptr @.func, i64 4, i32 90, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !4102
  unreachable, !dbg !4102
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out(ptr %0, ptr %1, i8 zeroext %2) #0 !dbg !4105 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %err = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !4108
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !4108
  br i1 %4, label %panic, label %checkok, !dbg !4108

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4109, !DIExpression(), !4110)
  store i8 %2, ptr %c, align 1
    #dbg_declare(ptr %c, !4111, !DIExpression(), !4112)
    #dbg_declare(ptr %err, !4113, !DIExpression(), !4114)
  br label %testblock, !dbg !4114

testblock:                                        ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !4115
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !4115
  %6 = load ptr, ptr %ptradd, align 8, !dbg !4115
  %checknull = icmp eq ptr %6, null, !dbg !4115
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !4115
  br i1 %7, label %panic1, label %checkok2, !dbg !4115

checkok2:                                         ; preds = %testblock
  %8 = load ptr, ptr %self, align 8, !dbg !4116
  %9 = load ptr, ptr %8, align 8, !dbg !4117
  %10 = load i8, ptr %c, align 1, !dbg !4117
  %11 = call i64 %6(ptr %9, i8 zeroext %10), !dbg !4115
  %not_err = icmp eq i64 %11, 0, !dbg !4115
  %12 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4115
  br i1 %12, label %after_check, label %assign_optional, !dbg !4115

assign_optional:                                  ; preds = %checkok2
  store i64 %11, ptr %err, align 8, !dbg !4115
  br label %end_block, !dbg !4115

after_check:                                      ; preds = %checkok2
  store i64 0, ptr %err, align 8, !dbg !4115
  br label %end_block, !dbg !4115

end_block:                                        ; preds = %after_check, %assign_optional
  %13 = load i64, ptr %err, align 8, !dbg !4115
  %i2b = icmp ne i64 %13, 0, !dbg !4115
  br i1 %i2b, label %if.then, label %if.exit11, !dbg !4115

if.then:                                          ; preds = %end_block
  %14 = load ptr, ptr %self, align 8, !dbg !4118
  %ptradd3 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !4118
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 24, !dbg !4118
  %15 = load i64, ptr %ptradd4, align 8, !dbg !4118
  %i2b5 = icmp ne i64 %15, 0, !dbg !4118
  br i1 %i2b5, label %if.then6, label %if.exit, !dbg !4118

if.then6:                                         ; preds = %if.then
  %16 = load ptr, ptr %self, align 8, !dbg !4120
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !4120
  %ptradd8 = getelementptr inbounds i8, ptr %ptradd7, i64 24, !dbg !4120
  %17 = load i64, ptr %ptradd8, align 8, !dbg !4120
  ret i64 %17, !dbg !4120

if.exit:                                          ; preds = %if.then
  %18 = load ptr, ptr %self, align 8, !dbg !4121
  %ptradd9 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !4121
  %ptradd10 = getelementptr inbounds i8, ptr %ptradd9, i64 24, !dbg !4121
  %19 = load i64, ptr %err, align 8, !dbg !4122
  store i64 %19, ptr %ptradd10, align 8, !dbg !4122
  %20 = load i64, ptr %err, align 8, !dbg !4123
  ret i64 %20, !dbg !4123

if.exit11:                                        ; preds = %end_block
  store i64 1, ptr %0, align 8, !dbg !4124
  ret i64 0, !dbg !4124

panic:                                            ; preds = %entry
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4110
  call void %21(ptr @.panic_msg, i64 62, ptr @.file.164, i64 12, ptr @.func.168, i64 3, i32 93) #5, !dbg !4110
  unreachable, !dbg !4110

panic1:                                           ; preds = %testblock
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4115
  call void %22(ptr @.panic_msg.169, i64 54, ptr @.file.164, i64 12, ptr @.func.168, i64 3, i32 95) #5, !dbg !4115
  unreachable, !dbg !4115
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.print_with_function(ptr %0, ptr %1, i64 %2, ptr %3) #0 comdat !dbg !4125 {
entry:
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %old = alloca i32, align 4
  %old_width = alloca i32, align 4
  %old_prec = alloca i32, align 4
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr19 = alloca i64, align 8
  %.inlinecache21 = alloca ptr, align 8
  %.cachedtype22 = alloca ptr, align 8
  %retparam29 = alloca i64, align 8
  %.inlinecache46 = alloca ptr, align 8
  %.cachedtype47 = alloca ptr, align 8
  %old56 = alloca i32, align 4
  %old_width58 = alloca i32, align 4
  %old_prec61 = alloca i32, align 4
  %reterr66 = alloca i64, align 8
  %retparam67 = alloca i64, align 8
  %reterr83 = alloca i64, align 8
  %.inlinecache85 = alloca ptr, align 8
  %.cachedtype86 = alloca ptr, align 8
  %result = alloca %"char[]", align 8
  %retparam95 = alloca i64, align 8
  store ptr null, ptr %.cachedtype86, align 8, !dbg !4132
  store ptr null, ptr %.cachedtype47, align 8, !dbg !4132
  store ptr null, ptr %.cachedtype22, align 8, !dbg !4132
  store ptr null, ptr %.cachedtype, align 8, !dbg !4132
  %4 = icmp eq ptr %1, null, !dbg !4132
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !4132
  br i1 %5, label %panic, label %checkok, !dbg !4132

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4133, !DIExpression(), !4134)
  store i64 %2, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %3, ptr %ptradd, align 8
    #dbg_declare(ptr %arg, !4135, !DIExpression(), !4136)
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4137
  %6 = load i64, ptr %ptradd1, align 8, !dbg !4137
  %7 = inttoptr i64 %6 to ptr, !dbg !4137
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !4132
  %8 = icmp eq ptr %7, %type, !dbg !4132
  br i1 %8, label %cache_hit, label %cache_miss, !dbg !4132

cache_miss:                                       ; preds = %checkok
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !4132
  %9 = load ptr, ptr %ptradd2, align 8, !dbg !4132
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.to_format"), !dbg !4132
  store ptr %10, ptr %.inlinecache, align 8, !dbg !4132
  store ptr %7, ptr %.cachedtype, align 8, !dbg !4132
  br label %11, !dbg !4132

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !4132
  br label %11, !dbg !4132

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ], !dbg !4132
  %i2b = icmp ne ptr %fn_phi, null, !dbg !4132
  br i1 %i2b, label %if.then, label %if.exit44, !dbg !4132

if.then:                                          ; preds = %11
    #dbg_declare(ptr %old, !4138, !DIExpression(), !4140)
  %12 = load ptr, ptr %self, align 8, !dbg !4141
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !4141
  %13 = load i32, ptr %ptradd3, align 8, !dbg !4141
  store i32 %13, ptr %old, align 4, !dbg !4141
    #dbg_declare(ptr %old_width, !4142, !DIExpression(), !4143)
  %14 = load ptr, ptr %self, align 8, !dbg !4144
  %ptradd4 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !4144
  %ptradd5 = getelementptr inbounds i8, ptr %ptradd4, i64 4, !dbg !4144
  %15 = load i32, ptr %ptradd5, align 4, !dbg !4144
  store i32 %15, ptr %old_width, align 4, !dbg !4144
    #dbg_declare(ptr %old_prec, !4145, !DIExpression(), !4146)
  %16 = load ptr, ptr %self, align 8, !dbg !4147
  %ptradd6 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !4147
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !4147
  %17 = load i32, ptr %ptradd7, align 8, !dbg !4147
  store i32 %17, ptr %old_prec, align 4, !dbg !4147
  %18 = load ptr, ptr %arg, align 8, !dbg !4148
  %i2nb = icmp eq ptr %18, null, !dbg !4148
  br i1 %i2nb, label %if.then8, label %if.exit, !dbg !4148

if.then8:                                         ; preds = %if.then
  %19 = load ptr, ptr %self, align 8
  %20 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %19, ptr @.str.171, i64 6), !dbg !4149
  %not_err = icmp eq i64 %20, 0, !dbg !4149
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4149
  br i1 %21, label %after_check, label %assign_optional, !dbg !4149

assign_optional:                                  ; preds = %if.then8
  store i64 %20, ptr %reterr, align 8, !dbg !4149
  br label %err_retblock, !dbg !4149

after_check:                                      ; preds = %if.then8
  %22 = load i64, ptr %retparam, align 8, !dbg !4149
  %23 = load ptr, ptr %self, align 8, !dbg !4150
  %ptradd9 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !4150
  %24 = load i32, ptr %old, align 4, !dbg !4152
  store i32 %24, ptr %ptradd9, align 8, !dbg !4152
  %25 = load ptr, ptr %self, align 8, !dbg !4153
  %ptradd10 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !4153
  %ptradd11 = getelementptr inbounds i8, ptr %ptradd10, i64 4, !dbg !4153
  %26 = load i32, ptr %old_width, align 4, !dbg !4154
  store i32 %26, ptr %ptradd11, align 4, !dbg !4154
  %27 = load ptr, ptr %self, align 8, !dbg !4155
  %ptradd12 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !4155
  %ptradd13 = getelementptr inbounds i8, ptr %ptradd12, i64 8, !dbg !4155
  %28 = load i32, ptr %old_prec, align 4, !dbg !4156
  store i32 %28, ptr %ptradd13, align 8, !dbg !4156
  store i64 %22, ptr %0, align 8, !dbg !4156
  ret i64 0, !dbg !4156

err_retblock:                                     ; preds = %assign_optional
  %29 = load ptr, ptr %self, align 8, !dbg !4157
  %ptradd14 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !4157
  %30 = load i32, ptr %old, align 4, !dbg !4159
  store i32 %30, ptr %ptradd14, align 8, !dbg !4159
  %31 = load ptr, ptr %self, align 8, !dbg !4160
  %ptradd15 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !4160
  %ptradd16 = getelementptr inbounds i8, ptr %ptradd15, i64 4, !dbg !4160
  %32 = load i32, ptr %old_width, align 4, !dbg !4161
  store i32 %32, ptr %ptradd16, align 4, !dbg !4161
  %33 = load ptr, ptr %self, align 8, !dbg !4162
  %ptradd17 = getelementptr inbounds i8, ptr %33, i64 16, !dbg !4162
  %ptradd18 = getelementptr inbounds i8, ptr %ptradd17, i64 8, !dbg !4162
  %34 = load i32, ptr %old_prec, align 4, !dbg !4163
  store i32 %34, ptr %ptradd18, align 8, !dbg !4163
  %35 = load i64, ptr %reterr, align 8, !dbg !4163
  ret i64 %35, !dbg !4163

if.exit:                                          ; preds = %if.then
  %ptradd20 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4164
  %36 = load i64, ptr %ptradd20, align 8, !dbg !4164
  %37 = inttoptr i64 %36 to ptr, !dbg !4164
  %type23 = load ptr, ptr %.cachedtype22, align 8, !dbg !4132
  %38 = icmp eq ptr %37, %type23, !dbg !4132
  br i1 %38, label %cache_hit26, label %cache_miss24, !dbg !4132

cache_miss24:                                     ; preds = %if.exit
  %ptradd25 = getelementptr inbounds i8, ptr %37, i64 16, !dbg !4132
  %39 = load ptr, ptr %ptradd25, align 8, !dbg !4132
  %40 = call ptr @.dyn_search(ptr %39, ptr @"$sel.to_format"), !dbg !4132
  store ptr %40, ptr %.inlinecache21, align 8, !dbg !4132
  store ptr %37, ptr %.cachedtype22, align 8, !dbg !4132
  br label %41, !dbg !4132

cache_hit26:                                      ; preds = %if.exit
  %cache_hit_fn27 = load ptr, ptr %.inlinecache21, align 8, !dbg !4132
  br label %41, !dbg !4132

41:                                               ; preds = %cache_hit26, %cache_miss24
  %fn_phi28 = phi ptr [ %cache_hit_fn27, %cache_hit26 ], [ %40, %cache_miss24 ], !dbg !4132
  %42 = icmp eq ptr %fn_phi28, null, !dbg !4132
  br i1 %42, label %missing_function, label %match, !dbg !4132

missing_function:                                 ; preds = %41
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4165
  call void %43(ptr @.panic_msg.172, i64 46, ptr @.file.164, i64 12, ptr @.func.170, i64 19, i32 118) #5, !dbg !4165
  unreachable, !dbg !4165

match:                                            ; preds = %41
  %44 = load ptr, ptr %arg, align 8
  %45 = load ptr, ptr %self, align 8
  %46 = call i64 %fn_phi28(ptr %retparam29, ptr %44, ptr %45), !dbg !4165
  %not_err30 = icmp eq i64 %46, 0, !dbg !4165
  %47 = call i1 @llvm.expect.i1(i1 %not_err30, i1 true), !dbg !4165
  br i1 %47, label %after_check32, label %assign_optional31, !dbg !4165

assign_optional31:                                ; preds = %match
  store i64 %46, ptr %reterr19, align 8, !dbg !4165
  br label %err_retblock38, !dbg !4165

after_check32:                                    ; preds = %match
  %48 = load i64, ptr %retparam29, align 8, !dbg !4165
  %49 = load ptr, ptr %self, align 8, !dbg !4166
  %ptradd33 = getelementptr inbounds i8, ptr %49, i64 16, !dbg !4166
  %50 = load i32, ptr %old, align 4, !dbg !4168
  store i32 %50, ptr %ptradd33, align 8, !dbg !4168
  %51 = load ptr, ptr %self, align 8, !dbg !4169
  %ptradd34 = getelementptr inbounds i8, ptr %51, i64 16, !dbg !4169
  %ptradd35 = getelementptr inbounds i8, ptr %ptradd34, i64 4, !dbg !4169
  %52 = load i32, ptr %old_width, align 4, !dbg !4170
  store i32 %52, ptr %ptradd35, align 4, !dbg !4170
  %53 = load ptr, ptr %self, align 8, !dbg !4171
  %ptradd36 = getelementptr inbounds i8, ptr %53, i64 16, !dbg !4171
  %ptradd37 = getelementptr inbounds i8, ptr %ptradd36, i64 8, !dbg !4171
  %54 = load i32, ptr %old_prec, align 4, !dbg !4172
  store i32 %54, ptr %ptradd37, align 8, !dbg !4172
  store i64 %48, ptr %0, align 8, !dbg !4172
  ret i64 0, !dbg !4172

err_retblock38:                                   ; preds = %assign_optional31
  %55 = load ptr, ptr %self, align 8, !dbg !4173
  %ptradd39 = getelementptr inbounds i8, ptr %55, i64 16, !dbg !4173
  %56 = load i32, ptr %old, align 4, !dbg !4175
  store i32 %56, ptr %ptradd39, align 8, !dbg !4175
  %57 = load ptr, ptr %self, align 8, !dbg !4176
  %ptradd40 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !4176
  %ptradd41 = getelementptr inbounds i8, ptr %ptradd40, i64 4, !dbg !4176
  %58 = load i32, ptr %old_width, align 4, !dbg !4177
  store i32 %58, ptr %ptradd41, align 4, !dbg !4177
  %59 = load ptr, ptr %self, align 8, !dbg !4178
  %ptradd42 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !4178
  %ptradd43 = getelementptr inbounds i8, ptr %ptradd42, i64 8, !dbg !4178
  %60 = load i32, ptr %old_prec, align 4, !dbg !4179
  store i32 %60, ptr %ptradd43, align 8, !dbg !4179
  %61 = load i64, ptr %reterr19, align 8, !dbg !4179
  ret i64 %61, !dbg !4179

if.exit44:                                        ; preds = %11
  %ptradd45 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4180
  %62 = load i64, ptr %ptradd45, align 8, !dbg !4180
  %63 = inttoptr i64 %62 to ptr, !dbg !4180
  %type48 = load ptr, ptr %.cachedtype47, align 8, !dbg !4132
  %64 = icmp eq ptr %63, %type48, !dbg !4132
  br i1 %64, label %cache_hit51, label %cache_miss49, !dbg !4132

cache_miss49:                                     ; preds = %if.exit44
  %ptradd50 = getelementptr inbounds i8, ptr %63, i64 16, !dbg !4132
  %65 = load ptr, ptr %ptradd50, align 8, !dbg !4132
  %66 = call ptr @.dyn_search(ptr %65, ptr @"$sel.to_constant_string"), !dbg !4132
  store ptr %66, ptr %.inlinecache46, align 8, !dbg !4132
  store ptr %63, ptr %.cachedtype47, align 8, !dbg !4132
  br label %67, !dbg !4132

cache_hit51:                                      ; preds = %if.exit44
  %cache_hit_fn52 = load ptr, ptr %.inlinecache46, align 8, !dbg !4132
  br label %67, !dbg !4132

67:                                               ; preds = %cache_hit51, %cache_miss49
  %fn_phi53 = phi ptr [ %cache_hit_fn52, %cache_hit51 ], [ %66, %cache_miss49 ], !dbg !4132
  %i2b54 = icmp ne ptr %fn_phi53, null, !dbg !4132
  br i1 %i2b54, label %if.then55, label %if.exit111, !dbg !4132

if.then55:                                        ; preds = %67
    #dbg_declare(ptr %old56, !4181, !DIExpression(), !4183)
  %68 = load ptr, ptr %self, align 8, !dbg !4184
  %ptradd57 = getelementptr inbounds i8, ptr %68, i64 16, !dbg !4184
  %69 = load i32, ptr %ptradd57, align 8, !dbg !4184
  store i32 %69, ptr %old56, align 4, !dbg !4184
    #dbg_declare(ptr %old_width58, !4185, !DIExpression(), !4186)
  %70 = load ptr, ptr %self, align 8, !dbg !4187
  %ptradd59 = getelementptr inbounds i8, ptr %70, i64 16, !dbg !4187
  %ptradd60 = getelementptr inbounds i8, ptr %ptradd59, i64 4, !dbg !4187
  %71 = load i32, ptr %ptradd60, align 4, !dbg !4187
  store i32 %71, ptr %old_width58, align 4, !dbg !4187
    #dbg_declare(ptr %old_prec61, !4188, !DIExpression(), !4189)
  %72 = load ptr, ptr %self, align 8, !dbg !4190
  %ptradd62 = getelementptr inbounds i8, ptr %72, i64 16, !dbg !4190
  %ptradd63 = getelementptr inbounds i8, ptr %ptradd62, i64 8, !dbg !4190
  %73 = load i32, ptr %ptradd63, align 8, !dbg !4190
  store i32 %73, ptr %old_prec61, align 4, !dbg !4190
  %74 = load ptr, ptr %arg, align 8, !dbg !4191
  %i2nb64 = icmp eq ptr %74, null, !dbg !4191
  br i1 %i2nb64, label %if.then65, label %if.exit82, !dbg !4191

if.then65:                                        ; preds = %if.then55
  %75 = load ptr, ptr %self, align 8
  %76 = call i64 @std.io.Formatter.out_substr(ptr %retparam67, ptr %75, ptr @.str.173, i64 6), !dbg !4192
  %not_err68 = icmp eq i64 %76, 0, !dbg !4192
  %77 = call i1 @llvm.expect.i1(i1 %not_err68, i1 true), !dbg !4192
  br i1 %77, label %after_check70, label %assign_optional69, !dbg !4192

assign_optional69:                                ; preds = %if.then65
  store i64 %76, ptr %reterr66, align 8, !dbg !4192
  br label %err_retblock76, !dbg !4192

after_check70:                                    ; preds = %if.then65
  %78 = load i64, ptr %retparam67, align 8, !dbg !4192
  %79 = load ptr, ptr %self, align 8, !dbg !4193
  %ptradd71 = getelementptr inbounds i8, ptr %79, i64 16, !dbg !4193
  %80 = load i32, ptr %old56, align 4, !dbg !4195
  store i32 %80, ptr %ptradd71, align 8, !dbg !4195
  %81 = load ptr, ptr %self, align 8, !dbg !4196
  %ptradd72 = getelementptr inbounds i8, ptr %81, i64 16, !dbg !4196
  %ptradd73 = getelementptr inbounds i8, ptr %ptradd72, i64 4, !dbg !4196
  %82 = load i32, ptr %old_width58, align 4, !dbg !4197
  store i32 %82, ptr %ptradd73, align 4, !dbg !4197
  %83 = load ptr, ptr %self, align 8, !dbg !4198
  %ptradd74 = getelementptr inbounds i8, ptr %83, i64 16, !dbg !4198
  %ptradd75 = getelementptr inbounds i8, ptr %ptradd74, i64 8, !dbg !4198
  %84 = load i32, ptr %old_prec61, align 4, !dbg !4199
  store i32 %84, ptr %ptradd75, align 8, !dbg !4199
  store i64 %78, ptr %0, align 8, !dbg !4199
  ret i64 0, !dbg !4199

err_retblock76:                                   ; preds = %assign_optional69
  %85 = load ptr, ptr %self, align 8, !dbg !4200
  %ptradd77 = getelementptr inbounds i8, ptr %85, i64 16, !dbg !4200
  %86 = load i32, ptr %old56, align 4, !dbg !4202
  store i32 %86, ptr %ptradd77, align 8, !dbg !4202
  %87 = load ptr, ptr %self, align 8, !dbg !4203
  %ptradd78 = getelementptr inbounds i8, ptr %87, i64 16, !dbg !4203
  %ptradd79 = getelementptr inbounds i8, ptr %ptradd78, i64 4, !dbg !4203
  %88 = load i32, ptr %old_width58, align 4, !dbg !4204
  store i32 %88, ptr %ptradd79, align 4, !dbg !4204
  %89 = load ptr, ptr %self, align 8, !dbg !4205
  %ptradd80 = getelementptr inbounds i8, ptr %89, i64 16, !dbg !4205
  %ptradd81 = getelementptr inbounds i8, ptr %ptradd80, i64 8, !dbg !4205
  %90 = load i32, ptr %old_prec61, align 4, !dbg !4206
  store i32 %90, ptr %ptradd81, align 8, !dbg !4206
  %91 = load i64, ptr %reterr66, align 8, !dbg !4206
  ret i64 %91, !dbg !4206

if.exit82:                                        ; preds = %if.then55
  %ptradd84 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4207
  %92 = load i64, ptr %ptradd84, align 8, !dbg !4207
  %93 = inttoptr i64 %92 to ptr, !dbg !4207
  %type87 = load ptr, ptr %.cachedtype86, align 8, !dbg !4132
  %94 = icmp eq ptr %93, %type87, !dbg !4132
  br i1 %94, label %cache_hit90, label %cache_miss88, !dbg !4132

cache_miss88:                                     ; preds = %if.exit82
  %ptradd89 = getelementptr inbounds i8, ptr %93, i64 16, !dbg !4132
  %95 = load ptr, ptr %ptradd89, align 8, !dbg !4132
  %96 = call ptr @.dyn_search(ptr %95, ptr @"$sel.to_constant_string"), !dbg !4132
  store ptr %96, ptr %.inlinecache85, align 8, !dbg !4132
  store ptr %93, ptr %.cachedtype86, align 8, !dbg !4132
  br label %97, !dbg !4132

cache_hit90:                                      ; preds = %if.exit82
  %cache_hit_fn91 = load ptr, ptr %.inlinecache85, align 8, !dbg !4132
  br label %97, !dbg !4132

97:                                               ; preds = %cache_hit90, %cache_miss88
  %fn_phi92 = phi ptr [ %cache_hit_fn91, %cache_hit90 ], [ %96, %cache_miss88 ], !dbg !4132
  %98 = icmp eq ptr %fn_phi92, null, !dbg !4132
  br i1 %98, label %missing_function93, label %match94, !dbg !4132

missing_function93:                               ; preds = %97
  %99 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4207
  call void %99(ptr @.panic_msg.174, i64 55, ptr @.file.164, i64 12, ptr @.func.170, i64 19, i32 132) #5, !dbg !4207
  unreachable, !dbg !4207

match94:                                          ; preds = %97
  %100 = load ptr, ptr %arg, align 8, !dbg !4207
  %101 = call { ptr, i64 } %fn_phi92(ptr %100), !dbg !4207
  store { ptr, i64 } %101, ptr %result, align 8
  %102 = load ptr, ptr %self, align 8
  %lo = load ptr, ptr %result, align 8
  %ptradd96 = getelementptr inbounds i8, ptr %result, i64 8
  %hi = load i64, ptr %ptradd96, align 8
  %103 = call i64 @std.io.Formatter.out_substr(ptr %retparam95, ptr %102, ptr %lo, i64 %hi), !dbg !4208
  %not_err97 = icmp eq i64 %103, 0, !dbg !4208
  %104 = call i1 @llvm.expect.i1(i1 %not_err97, i1 true), !dbg !4208
  br i1 %104, label %after_check99, label %assign_optional98, !dbg !4208

assign_optional98:                                ; preds = %match94
  store i64 %103, ptr %reterr83, align 8, !dbg !4208
  br label %err_retblock105, !dbg !4208

after_check99:                                    ; preds = %match94
  %105 = load i64, ptr %retparam95, align 8, !dbg !4208
  %106 = load ptr, ptr %self, align 8, !dbg !4209
  %ptradd100 = getelementptr inbounds i8, ptr %106, i64 16, !dbg !4209
  %107 = load i32, ptr %old56, align 4, !dbg !4211
  store i32 %107, ptr %ptradd100, align 8, !dbg !4211
  %108 = load ptr, ptr %self, align 8, !dbg !4212
  %ptradd101 = getelementptr inbounds i8, ptr %108, i64 16, !dbg !4212
  %ptradd102 = getelementptr inbounds i8, ptr %ptradd101, i64 4, !dbg !4212
  %109 = load i32, ptr %old_width58, align 4, !dbg !4213
  store i32 %109, ptr %ptradd102, align 4, !dbg !4213
  %110 = load ptr, ptr %self, align 8, !dbg !4214
  %ptradd103 = getelementptr inbounds i8, ptr %110, i64 16, !dbg !4214
  %ptradd104 = getelementptr inbounds i8, ptr %ptradd103, i64 8, !dbg !4214
  %111 = load i32, ptr %old_prec61, align 4, !dbg !4215
  store i32 %111, ptr %ptradd104, align 8, !dbg !4215
  store i64 %105, ptr %0, align 8, !dbg !4215
  ret i64 0, !dbg !4215

err_retblock105:                                  ; preds = %assign_optional98
  %112 = load ptr, ptr %self, align 8, !dbg !4216
  %ptradd106 = getelementptr inbounds i8, ptr %112, i64 16, !dbg !4216
  %113 = load i32, ptr %old56, align 4, !dbg !4218
  store i32 %113, ptr %ptradd106, align 8, !dbg !4218
  %114 = load ptr, ptr %self, align 8, !dbg !4219
  %ptradd107 = getelementptr inbounds i8, ptr %114, i64 16, !dbg !4219
  %ptradd108 = getelementptr inbounds i8, ptr %ptradd107, i64 4, !dbg !4219
  %115 = load i32, ptr %old_width58, align 4, !dbg !4220
  store i32 %115, ptr %ptradd108, align 4, !dbg !4220
  %116 = load ptr, ptr %self, align 8, !dbg !4221
  %ptradd109 = getelementptr inbounds i8, ptr %116, i64 16, !dbg !4221
  %ptradd110 = getelementptr inbounds i8, ptr %ptradd109, i64 8, !dbg !4221
  %117 = load i32, ptr %old_prec61, align 4, !dbg !4222
  store i32 %117, ptr %ptradd110, align 8, !dbg !4222
  %118 = load i64, ptr %reterr83, align 8, !dbg !4222
  ret i64 %118, !dbg !4222

if.exit111:                                       ; preds = %67
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !4223

panic:                                            ; preds = %entry
  %119 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4134
  call void %119(ptr @.panic_msg, i64 62, ptr @.file.164, i64 12, ptr @.func.170, i64 19, i32 104) #5, !dbg !4134
  unreachable, !dbg !4134
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_unknown(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4, ptr %5) #0 !dbg !4224 {
entry:
  %self = alloca ptr, align 8
  %category = alloca %"char[]", align 8
  %arg = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %retparam2 = alloca i64, align 8
  %retparam7 = alloca i64, align 8
  %retparam13 = alloca i64, align 8
  %taddr = alloca i128, align 16
  %retparam21 = alloca i64, align 8
  %retparam27 = alloca i64, align 8
  %taddr28 = alloca i128, align 16
  %retparam36 = alloca i64, align 8
  %6 = icmp eq ptr %1, null, !dbg !4227
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !4227
  br i1 %7, label %panic, label %checkok, !dbg !4227

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4228, !DIExpression(), !4229)
  store ptr %2, ptr %category, align 8
  %ptradd = getelementptr inbounds i8, ptr %category, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %category, !4230, !DIExpression(), !4231)
  store i64 %4, ptr %arg, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %5, ptr %ptradd1, align 8
    #dbg_declare(ptr %arg, !4232, !DIExpression(), !4233)
  %8 = load ptr, ptr %self, align 8
  %9 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %8, ptr @.str.176, i64 1), !dbg !4234
  %not_err = icmp eq i64 %9, 0, !dbg !4234
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4234
  br i1 %10, label %after_check, label %assign_optional, !dbg !4234

assign_optional:                                  ; preds = %checkok
  store i64 %9, ptr %reterr, align 8, !dbg !4234
  br label %err_retblock, !dbg !4234

after_check:                                      ; preds = %checkok
  %11 = load i64, ptr %retparam, align 8, !dbg !4234
  %12 = load ptr, ptr %self, align 8
  %lo = load ptr, ptr %category, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %category, i64 8
  %hi = load i64, ptr %ptradd3, align 8
  %13 = call i64 @std.io.Formatter.out_substr(ptr %retparam2, ptr %12, ptr %lo, i64 %hi), !dbg !4235
  %not_err4 = icmp eq i64 %13, 0, !dbg !4235
  %14 = call i1 @llvm.expect.i1(i1 %not_err4, i1 true), !dbg !4235
  br i1 %14, label %after_check6, label %assign_optional5, !dbg !4235

assign_optional5:                                 ; preds = %after_check
  store i64 %13, ptr %reterr, align 8, !dbg !4235
  br label %err_retblock, !dbg !4235

after_check6:                                     ; preds = %after_check
  %15 = load i64, ptr %retparam2, align 8, !dbg !4235
  %add = add i64 %11, %15, !dbg !4234
  %16 = load ptr, ptr %self, align 8
  %17 = call i64 @std.io.Formatter.out_substr(ptr %retparam7, ptr %16, ptr @.str.177, i64 6), !dbg !4236
  %not_err8 = icmp eq i64 %17, 0, !dbg !4236
  %18 = call i1 @llvm.expect.i1(i1 %not_err8, i1 true), !dbg !4236
  br i1 %18, label %after_check10, label %assign_optional9, !dbg !4236

assign_optional9:                                 ; preds = %after_check6
  store i64 %17, ptr %reterr, align 8, !dbg !4236
  br label %err_retblock, !dbg !4236

after_check10:                                    ; preds = %after_check6
  %19 = load i64, ptr %retparam7, align 8, !dbg !4236
  %add11 = add i64 %add, %19, !dbg !4234
  %ptradd12 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4237
  %20 = load i64, ptr %ptradd12, align 8, !dbg !4237
  %sext = sext i64 %20 to i128, !dbg !4237
  %21 = load ptr, ptr %self, align 8
  store i128 %sext, ptr %taddr, align 16
  %lo14 = load i64, ptr %taddr, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi16 = load i64, ptr %ptradd15, align 8
  %22 = call i64 @std.io.Formatter.ntoa(ptr %retparam13, ptr %21, i64 %lo14, i64 %hi16, i8 zeroext 0, i32 16), !dbg !4238
  %not_err17 = icmp eq i64 %22, 0, !dbg !4238
  %23 = call i1 @llvm.expect.i1(i1 %not_err17, i1 true), !dbg !4238
  br i1 %23, label %after_check19, label %assign_optional18, !dbg !4238

assign_optional18:                                ; preds = %after_check10
  store i64 %22, ptr %reterr, align 8, !dbg !4238
  br label %err_retblock, !dbg !4238

after_check19:                                    ; preds = %after_check10
  %24 = load i64, ptr %retparam13, align 8, !dbg !4238
  %add20 = add i64 %add11, %24, !dbg !4234
  %25 = load ptr, ptr %self, align 8
  %26 = call i64 @std.io.Formatter.out_substr(ptr %retparam21, ptr %25, ptr @.str.178, i64 7), !dbg !4239
  %not_err22 = icmp eq i64 %26, 0, !dbg !4239
  %27 = call i1 @llvm.expect.i1(i1 %not_err22, i1 true), !dbg !4239
  br i1 %27, label %after_check24, label %assign_optional23, !dbg !4239

assign_optional23:                                ; preds = %after_check19
  store i64 %26, ptr %reterr, align 8, !dbg !4239
  br label %err_retblock, !dbg !4239

after_check24:                                    ; preds = %after_check19
  %28 = load i64, ptr %retparam21, align 8, !dbg !4239
  %add25 = add i64 %add20, %28, !dbg !4234
  %29 = load ptr, ptr %arg, align 8, !dbg !4240
  %ptrxi = ptrtoint ptr %29 to i64, !dbg !4240
  %sext26 = sext i64 %ptrxi to i128, !dbg !4240
  %30 = load ptr, ptr %self, align 8
  store i128 %sext26, ptr %taddr28, align 16
  %lo29 = load i64, ptr %taddr28, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %taddr28, i64 8
  %hi31 = load i64, ptr %ptradd30, align 8
  %31 = call i64 @std.io.Formatter.ntoa(ptr %retparam27, ptr %30, i64 %lo29, i64 %hi31, i8 zeroext 0, i32 16), !dbg !4241
  %not_err32 = icmp eq i64 %31, 0, !dbg !4241
  %32 = call i1 @llvm.expect.i1(i1 %not_err32, i1 true), !dbg !4241
  br i1 %32, label %after_check34, label %assign_optional33, !dbg !4241

assign_optional33:                                ; preds = %after_check24
  store i64 %31, ptr %reterr, align 8, !dbg !4241
  br label %err_retblock, !dbg !4241

after_check34:                                    ; preds = %after_check24
  %33 = load i64, ptr %retparam27, align 8, !dbg !4241
  %add35 = add i64 %add25, %33, !dbg !4234
  %34 = load ptr, ptr %self, align 8
  %35 = call i64 @std.io.Formatter.out_substr(ptr %retparam36, ptr %34, ptr @.str.179, i64 1), !dbg !4242
  %not_err37 = icmp eq i64 %35, 0, !dbg !4242
  %36 = call i1 @llvm.expect.i1(i1 %not_err37, i1 true), !dbg !4242
  br i1 %36, label %after_check39, label %assign_optional38, !dbg !4242

assign_optional38:                                ; preds = %after_check34
  store i64 %35, ptr %reterr, align 8, !dbg !4242
  br label %err_retblock, !dbg !4242

after_check39:                                    ; preds = %after_check34
  %37 = load i64, ptr %retparam36, align 8, !dbg !4242
  %add40 = add i64 %add35, %37, !dbg !4234
  store i64 %add40, ptr %0, align 8, !dbg !4234
  ret i64 0, !dbg !4234

err_retblock:                                     ; preds = %assign_optional38, %assign_optional33, %assign_optional23, %assign_optional18, %assign_optional9, %assign_optional5, %assign_optional
  %38 = load i64, ptr %reterr, align 8, !dbg !4234
  ret i64 %38, !dbg !4234

panic:                                            ; preds = %entry
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4229
  call void %39(ptr @.panic_msg, i64 62, ptr @.file.164, i64 12, ptr @.func.175, i64 11, i32 137) #5, !dbg !4229
  unreachable, !dbg !4229
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_str(ptr %0, ptr %1, i64 %2, ptr %3) #0 !dbg !4243 {
entry:
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %switch = alloca i8, align 1
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr3 = alloca i64, align 8
  %retparam4 = alloca i64, align 8
  %reterr10 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %faultname_zero = alloca %"char[]", align 8
  %retparam17 = alloca i64, align 8
  %reterr24 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %retparam36 = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %indirectarg48 = alloca %"any[]", align 8
  %flags = alloca i32, align 4
  %width = alloca i32, align 4
  %reterr56 = alloca i64, align 8
  %retparam57 = alloca i64, align 8
  %retparam63 = alloca i64, align 8
  %flags75 = alloca i32, align 4
  %width77 = alloca i32, align 4
  %reterr83 = alloca i64, align 8
  %retparam84 = alloca double, align 8
  %retparam90 = alloca i64, align 8
  %retparam94 = alloca i64, align 8
  %reterr108 = alloca i64, align 8
  %retparam112 = alloca i64, align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %retparam117 = alloca i64, align 8
  %taddr118 = alloca %any, align 8
  %reterr125 = alloca i64, align 8
  %blockret = alloca i64, align 8
  %f = alloca i64, align 8
  %error_var = alloca i64, align 8
  %switch140 = alloca i8, align 1
  %i = alloca i64, align 8
  %error_var143 = alloca i64, align 8
  %v = alloca %any, align 8
  %self151 = alloca ptr, align 8
  %taddr160 = alloca i64, align 8
  %taddr161 = alloca i64, align 8
  %varargslots162 = alloca [2 x %any], align 16
  %indirectarg165 = alloca %"any[]", align 8
  %taddr171 = alloca i64, align 8
  %taddr172 = alloca i64, align 8
  %varargslots173 = alloca [2 x %any], align 16
  %indirectarg176 = alloca %"any[]", align 8
  %v197 = alloca %any, align 8
  %blockret198 = alloca i64, align 8
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i64, align 8
  %min = alloca i64, align 8
  %switch212 = alloca i64, align 8
  %c = alloca i8, align 1
  %s = alloca i16, align 2
  %taddr235 = alloca i64, align 8
  %taddr236 = alloca i64, align 8
  %varargslots237 = alloca [2 x %any], align 16
  %indirectarg240 = alloca %"any[]", align 8
  %i265 = alloca i32, align 4
  %taddr270 = alloca i64, align 8
  %taddr271 = alloca i64, align 8
  %varargslots272 = alloca [2 x %any], align 16
  %indirectarg275 = alloca %"any[]", align 8
  %l = alloca i64, align 8
  %taddr309 = alloca i64, align 8
  %taddr310 = alloca i64, align 8
  %varargslots311 = alloca [2 x %any], align 16
  %indirectarg314 = alloca %"any[]", align 8
  %i341 = alloca i128, align 16
  %taddr346 = alloca i64, align 8
  %taddr347 = alloca i64, align 8
  %varargslots348 = alloca [2 x %any], align 16
  %indirectarg351 = alloca %"any[]", align 8
  %c379 = alloca i8, align 1
  %s396 = alloca i16, align 2
  %taddr401 = alloca i64, align 8
  %taddr402 = alloca i64, align 8
  %varargslots403 = alloca [2 x %any], align 16
  %indirectarg406 = alloca %"any[]", align 8
  %i426 = alloca i32, align 4
  %taddr431 = alloca i64, align 8
  %taddr432 = alloca i64, align 8
  %varargslots433 = alloca [2 x %any], align 16
  %indirectarg436 = alloca %"any[]", align 8
  %l456 = alloca i64, align 8
  %taddr461 = alloca i64, align 8
  %taddr462 = alloca i64, align 8
  %varargslots463 = alloca [2 x %any], align 16
  %indirectarg466 = alloca %"any[]", align 8
  %i483 = alloca i128, align 16
  %taddr488 = alloca i64, align 8
  %taddr489 = alloca i64, align 8
  %varargslots490 = alloca [2 x %any], align 16
  %indirectarg493 = alloca %"any[]", align 8
  %string506 = alloca %"char[]", align 8
  %indirectarg510 = alloca %"any[]", align 8
  %varargslots513 = alloca [1 x %any], align 16
  %indirectarg515 = alloca %"any[]", align 8
  %varargslots527 = alloca [1 x %any], align 16
  %indirectarg529 = alloca %"any[]", align 8
  %reterr531 = alloca i64, align 8
  %taddr542 = alloca i64, align 8
  %taddr543 = alloca i64, align 8
  %varargslots544 = alloca [2 x %any], align 16
  %indirectarg547 = alloca %"any[]", align 8
  %retparam549 = alloca i64, align 8
  %reterr558 = alloca i64, align 8
  %retparam559 = alloca i64, align 8
  %reterr568 = alloca i64, align 8
  %retparam569 = alloca i64, align 8
  %reterr578 = alloca i64, align 8
  %retparam579 = alloca i64, align 8
  %flags588 = alloca i32, align 4
  %width590 = alloca i32, align 4
  %reterr595 = alloca i64, align 8
  %error_var596 = alloca i64, align 8
  %retparam597 = alloca i64, align 8
  %retparam606 = alloca i64, align 8
  %reterr624 = alloca i64, align 8
  %taddr629 = alloca i64, align 8
  %taddr630 = alloca i64, align 8
  %varargslots631 = alloca [2 x %any], align 16
  %indirectarg634 = alloca %"any[]", align 8
  %retparam636 = alloca i64, align 8
  %reterr648 = alloca i64, align 8
  %taddr653 = alloca i64, align 8
  %taddr654 = alloca i64, align 8
  %varargslots655 = alloca [2 x %any], align 16
  %indirectarg658 = alloca %"any[]", align 8
  %taddr665 = alloca i64, align 8
  %taddr666 = alloca i64, align 8
  %varargslots667 = alloca [2 x %any], align 16
  %indirectarg670 = alloca %"any[]", align 8
  %result672 = alloca %"char[]", align 8
  %retparam674 = alloca i64, align 8
  %reterr683 = alloca i64, align 8
  %taddr688 = alloca i64, align 8
  %taddr689 = alloca i64, align 8
  %varargslots690 = alloca [2 x %any], align 16
  %indirectarg693 = alloca %"any[]", align 8
  %taddr701 = alloca i64, align 8
  %taddr702 = alloca i64, align 8
  %varargslots703 = alloca [2 x %any], align 16
  %indirectarg706 = alloca %"any[]", align 8
  %result708 = alloca %"char[]", align 8
  %retparam712 = alloca i64, align 8
  %reterr718 = alloca i64, align 8
  %self719 = alloca ptr, align 8
  %taddr728 = alloca i64, align 8
  %taddr729 = alloca i64, align 8
  %varargslots730 = alloca [2 x %any], align 16
  %indirectarg733 = alloca %"any[]", align 8
  %taddr739 = alloca i64, align 8
  %taddr740 = alloca i64, align 8
  %varargslots741 = alloca [2 x %any], align 16
  %indirectarg744 = alloca %"any[]", align 8
  %retparam768 = alloca i64, align 8
  %taddr769 = alloca %any, align 8
  %inner = alloca i64, align 8
  %pointer = alloca ptr, align 8
  %deref = alloca %any, align 8
  %taddr828 = alloca i64, align 8
  %taddr829 = alloca i64, align 8
  %varargslots830 = alloca [2 x %any], align 16
  %indirectarg833 = alloca %"any[]", align 8
  %ptr = alloca ptr, align 8
  %type = alloca i64, align 8
  %retparam835 = alloca i64, align 8
  %taddr836 = alloca %any, align 8
  %reterr847 = alloca i64, align 8
  %blockret849 = alloca i64, align 8
  %f850 = alloca i64, align 8
  %error_var863 = alloca i64, align 8
  %flags872 = alloca i32, align 4
  %width874 = alloca i32, align 4
  %reterr879 = alloca i64, align 8
  %error_var880 = alloca i64, align 8
  %retparam881 = alloca i64, align 8
  %retparam890 = alloca i64, align 8
  %flags906 = alloca i32, align 4
  %width908 = alloca i32, align 4
  %inner914 = alloca i64, align 8
  %size = alloca i64, align 8
  %alen = alloca i64, align 8
  %ptr953 = alloca ptr, align 8
  %len = alloca i64, align 8
  %error_var954 = alloca i64, align 8
  %retparam955 = alloca i64, align 8
  %i964 = alloca i64, align 8
  %error_var968 = alloca i64, align 8
  %retparam969 = alloca i64, align 8
  %error_var980 = alloca i64, align 8
  %ptr981 = alloca ptr, align 8
  %type982 = alloca i64, align 8
  %retparam983 = alloca i64, align 8
  %taddr984 = alloca %any, align 8
  %error_var998 = alloca i64, align 8
  %retparam999 = alloca i64, align 8
  %reterr1009 = alloca i64, align 8
  %flags1014 = alloca i32, align 4
  %width1016 = alloca i32, align 4
  %inner1022 = alloca i64, align 8
  %size1045 = alloca i64, align 8
  %vlen = alloca i64, align 8
  %ptr1064 = alloca ptr, align 8
  %len1065 = alloca i64, align 8
  %error_var1066 = alloca i64, align 8
  %retparam1067 = alloca i64, align 8
  %i1076 = alloca i64, align 8
  %error_var1082 = alloca i64, align 8
  %retparam1083 = alloca i64, align 8
  %error_var1094 = alloca i64, align 8
  %ptr1095 = alloca ptr, align 8
  %type1096 = alloca i64, align 8
  %retparam1097 = alloca i64, align 8
  %taddr1098 = alloca %any, align 8
  %error_var1114 = alloca i64, align 8
  %retparam1115 = alloca i64, align 8
  %reterr1125 = alloca i64, align 8
  %inner1130 = alloca i64, align 8
  %flags1156 = alloca i32, align 4
  %width1158 = alloca i32, align 4
  %size1164 = alloca i64, align 8
  %temp = alloca ptr, align 8
  %ptr1169 = alloca ptr, align 8
  %taddr1174 = alloca i64, align 8
  %taddr1175 = alloca i64, align 8
  %varargslots1176 = alloca [2 x %any], align 16
  %indirectarg1179 = alloca %"any[]", align 8
  %slen = alloca i64, align 8
  %taddr1185 = alloca i64, align 8
  %taddr1186 = alloca i64, align 8
  %varargslots1187 = alloca [2 x %any], align 16
  %indirectarg1190 = alloca %"any[]", align 8
  %len1193 = alloca i64, align 8
  %error_var1194 = alloca i64, align 8
  %retparam1195 = alloca i64, align 8
  %i1204 = alloca i64, align 8
  %error_var1210 = alloca i64, align 8
  %retparam1211 = alloca i64, align 8
  %error_var1222 = alloca i64, align 8
  %ptr1223 = alloca ptr, align 8
  %type1224 = alloca i64, align 8
  %retparam1225 = alloca i64, align 8
  %taddr1226 = alloca %any, align 8
  %error_var1242 = alloca i64, align 8
  %retparam1243 = alloca i64, align 8
  %reterr1253 = alloca i64, align 8
  %string1258 = alloca %"char[]", align 8
  %indirectarg1262 = alloca %"any[]", align 8
  %reterr1264 = alloca i64, align 8
  %retparam1265 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !4244
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !4244
  br i1 %5, label %panic, label %checkok, !dbg !4244

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4245, !DIExpression(), !4246)
  store i64 %2, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %3, ptr %ptradd, align 8
    #dbg_declare(ptr %arg, !4247, !DIExpression(), !4248)
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4249
  %6 = load i64, ptr %ptradd1, align 8, !dbg !4249
  %"introspect*" = inttoptr i64 %6 to ptr, !dbg !4249
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !4249
  store i8 %typeid.kind, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i8, ptr %switch, align 1
  switch i8 %7, label %switch.exit [
    i8 5, label %switch.case
    i8 0, label %switch.case2
    i8 6, label %switch.case9
    i8 19, label %switch.case23
    i8 7, label %switch.case23
    i8 13, label %switch.case44
    i8 2, label %switch.case49
    i8 3, label %switch.case49
    i8 4, label %switch.case74
    i8 1, label %switch.case107
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load ptr, ptr %self, align 8
  %9 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %8, ptr @.str.181, i64 6), !dbg !4251
  %not_err = icmp eq i64 %9, 0, !dbg !4251
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4251
  br i1 %10, label %after_check, label %assign_optional, !dbg !4251

assign_optional:                                  ; preds = %switch.case
  store i64 %9, ptr %reterr, align 8, !dbg !4251
  br label %err_retblock, !dbg !4251

after_check:                                      ; preds = %switch.case
  %11 = load i64, ptr %retparam, align 8, !dbg !4251
  store i64 %11, ptr %0, align 8, !dbg !4251
  ret i64 0, !dbg !4251

err_retblock:                                     ; preds = %assign_optional
  %12 = load i64, ptr %reterr, align 8, !dbg !4251
  ret i64 %12, !dbg !4251

switch.case2:                                     ; preds = %switch.entry
  %13 = load ptr, ptr %self, align 8
  %14 = call i64 @std.io.Formatter.out_substr(ptr %retparam4, ptr %13, ptr @.str.182, i64 4), !dbg !4253
  %not_err5 = icmp eq i64 %14, 0, !dbg !4253
  %15 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true), !dbg !4253
  br i1 %15, label %after_check7, label %assign_optional6, !dbg !4253

assign_optional6:                                 ; preds = %switch.case2
  store i64 %14, ptr %reterr3, align 8, !dbg !4253
  br label %err_retblock8, !dbg !4253

after_check7:                                     ; preds = %switch.case2
  %16 = load i64, ptr %retparam4, align 8, !dbg !4253
  store i64 %16, ptr %0, align 8, !dbg !4253
  ret i64 0, !dbg !4253

err_retblock8:                                    ; preds = %assign_optional6
  %17 = load i64, ptr %reterr3, align 8, !dbg !4253
  ret i64 %17, !dbg !4253

switch.case9:                                     ; preds = %switch.entry
  %18 = load ptr, ptr %arg, align 8, !dbg !4255
  %checknull = icmp eq ptr %18, null, !dbg !4255
  %19 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !4255
  br i1 %19, label %panic11, label %checkok12, !dbg !4255

checkok12:                                        ; preds = %switch.case9
  %20 = ptrtoint ptr %18 to i64, !dbg !4257
  %21 = urem i64 %20, 8, !dbg !4257
  %22 = icmp ne i64 %21, 0, !dbg !4257
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false), !dbg !4257
  br i1 %23, label %panic13, label %checkok16, !dbg !4257

checkok16:                                        ; preds = %checkok12
  %24 = load i64, ptr %18, align 8, !dbg !4257
  %eq = icmp eq i64 %24, 0
  br i1 %eq, label %faultname_no, label %faultname_ok

faultname_no:                                     ; preds = %checkok16
  call void @llvm.memset.p0.i64(ptr align 8 %faultname_zero, i8 0, i64 16, i1 false)
  br label %faultname_exit

faultname_ok:                                     ; preds = %checkok16
  %25 = inttoptr i64 %24 to ptr
  br label %faultname_exit

faultname_exit:                                   ; preds = %faultname_ok, %faultname_no
  %faultname = phi ptr [ %faultname_zero, %faultname_no ], [ %25, %faultname_ok ]
  %26 = load ptr, ptr %self, align 8
  %lo = load ptr, ptr %faultname, align 8
  %ptradd18 = getelementptr inbounds i8, ptr %faultname, i64 8
  %hi = load i64, ptr %ptradd18, align 8
  %27 = call i64 @std.io.Formatter.out_substr(ptr %retparam17, ptr %26, ptr %lo, i64 %hi), !dbg !4258
  %not_err19 = icmp eq i64 %27, 0, !dbg !4258
  %28 = call i1 @llvm.expect.i1(i1 %not_err19, i1 true), !dbg !4258
  br i1 %28, label %after_check21, label %assign_optional20, !dbg !4258

assign_optional20:                                ; preds = %faultname_exit
  store i64 %27, ptr %reterr10, align 8, !dbg !4258
  br label %err_retblock22, !dbg !4258

after_check21:                                    ; preds = %faultname_exit
  %29 = load i64, ptr %retparam17, align 8, !dbg !4258
  store i64 %29, ptr %0, align 8, !dbg !4258
  ret i64 0, !dbg !4258

err_retblock22:                                   ; preds = %assign_optional20
  %30 = load i64, ptr %reterr10, align 8, !dbg !4258
  ret i64 %30, !dbg !4258

switch.case23:                                    ; preds = %switch.entry, %switch.entry
  %31 = load ptr, ptr %arg, align 8, !dbg !4259
  %checknull25 = icmp eq ptr %31, null, !dbg !4259
  %32 = call i1 @llvm.expect.i1(i1 %checknull25, i1 false), !dbg !4259
  br i1 %32, label %panic26, label %checkok27, !dbg !4259

checkok27:                                        ; preds = %switch.case23
  %33 = ptrtoint ptr %31 to i64, !dbg !4259
  %34 = urem i64 %33, 8, !dbg !4259
  %35 = icmp ne i64 %34, 0, !dbg !4259
  %36 = call i1 @llvm.expect.i1(i1 %35, i1 false), !dbg !4259
  br i1 %36, label %panic28, label %checkok35, !dbg !4259

checkok35:                                        ; preds = %checkok27
  %37 = load ptr, ptr %self, align 8
  %lo37 = load i64, ptr %31, align 8
  %ptradd38 = getelementptr inbounds i8, ptr %31, i64 8
  %hi39 = load ptr, ptr %ptradd38, align 8
  %38 = call i64 @std.io.Formatter.out_str(ptr %retparam36, ptr %37, i64 %lo37, ptr %hi39), !dbg !4261
  %not_err40 = icmp eq i64 %38, 0, !dbg !4261
  %39 = call i1 @llvm.expect.i1(i1 %not_err40, i1 true), !dbg !4261
  br i1 %39, label %after_check42, label %assign_optional41, !dbg !4261

assign_optional41:                                ; preds = %checkok35
  store i64 %38, ptr %reterr24, align 8, !dbg !4261
  br label %err_retblock43, !dbg !4261

after_check42:                                    ; preds = %checkok35
  %40 = load i64, ptr %retparam36, align 8, !dbg !4261
  store i64 %40, ptr %0, align 8, !dbg !4261
  ret i64 0, !dbg !4261

err_retblock43:                                   ; preds = %assign_optional41
  %41 = load i64, ptr %reterr24, align 8, !dbg !4261
  ret i64 %41, !dbg !4261

switch.case44:                                    ; preds = %switch.entry
  store %"char[]" { ptr @.str.183, i64 30 }, ptr %string, align 8
  %lo45 = load ptr, ptr %string, align 8, !dbg !4262
  %ptradd46 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !4262
  %hi47 = load i64, ptr %ptradd46, align 8, !dbg !4262
  store %"any[]" zeroinitializer, ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr %lo45, i64 %hi47, ptr @.str.184, i64 12, ptr @.str.185, i64 17, i32 155, ptr byval(%"any[]") align 8 %indirectarg48), !dbg !4266
  unreachable, !dbg !4267

switch.case49:                                    ; preds = %switch.entry, %switch.entry
    #dbg_declare(ptr %flags, !4268, !DIExpression(), !4270)
  %42 = load ptr, ptr %self, align 8, !dbg !4271
  %ptradd50 = getelementptr inbounds i8, ptr %42, i64 16, !dbg !4271
  %43 = load i32, ptr %ptradd50, align 8, !dbg !4271
  store i32 %43, ptr %flags, align 4, !dbg !4271
    #dbg_declare(ptr %width, !4272, !DIExpression(), !4273)
  %44 = load ptr, ptr %self, align 8, !dbg !4274
  %ptradd51 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !4274
  %ptradd52 = getelementptr inbounds i8, ptr %ptradd51, i64 4, !dbg !4274
  %45 = load i32, ptr %ptradd52, align 4, !dbg !4274
  store i32 %45, ptr %width, align 4, !dbg !4274
  %46 = load ptr, ptr %self, align 8, !dbg !4275
  %ptradd53 = getelementptr inbounds i8, ptr %46, i64 16, !dbg !4275
  store i32 0, ptr %ptradd53, align 8, !dbg !4275
  %47 = load ptr, ptr %self, align 8, !dbg !4276
  %ptradd54 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !4276
  %ptradd55 = getelementptr inbounds i8, ptr %ptradd54, i64 4, !dbg !4276
  store i32 0, ptr %ptradd55, align 4, !dbg !4277
  %48 = load ptr, ptr %self, align 8
  %lo58 = load i64, ptr %arg, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi60 = load ptr, ptr %ptradd59, align 8
  %49 = call i64 @std.io.Formatter.ntoa_any(ptr %retparam57, ptr %48, i64 %lo58, ptr %hi60, i32 10), !dbg !4278
  %not_err61 = icmp eq i64 %49, 0, !dbg !4278
  %50 = call i1 @llvm.expect.i1(i1 %not_err61, i1 true), !dbg !4278
  br i1 %50, label %after_check62, label %else_block, !dbg !4278

after_check62:                                    ; preds = %switch.case49
  %51 = load i64, ptr %retparam57, align 8, !dbg !4278
  br label %phi_block, !dbg !4278

else_block:                                       ; preds = %switch.case49
  %52 = load ptr, ptr %self, align 8
  %53 = call i64 @std.io.Formatter.out_substr(ptr %retparam63, ptr %52, ptr @.str.186, i64 9), !dbg !4279
  %not_err64 = icmp eq i64 %53, 0, !dbg !4279
  %54 = call i1 @llvm.expect.i1(i1 %not_err64, i1 true), !dbg !4279
  br i1 %54, label %after_check66, label %assign_optional65, !dbg !4279

assign_optional65:                                ; preds = %else_block
  store i64 %53, ptr %reterr56, align 8, !dbg !4279
  br label %err_retblock70, !dbg !4279

after_check66:                                    ; preds = %else_block
  %55 = load i64, ptr %retparam63, align 8, !dbg !4279
  br label %phi_block, !dbg !4279

phi_block:                                        ; preds = %after_check66, %after_check62
  %val = phi i64 [ %51, %after_check62 ], [ %55, %after_check66 ], !dbg !4279
  %56 = load ptr, ptr %self, align 8, !dbg !4280
  %ptradd67 = getelementptr inbounds i8, ptr %56, i64 16, !dbg !4280
  %57 = load i32, ptr %flags, align 4, !dbg !4282
  store i32 %57, ptr %ptradd67, align 8, !dbg !4282
  %58 = load ptr, ptr %self, align 8, !dbg !4283
  %ptradd68 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !4283
  %ptradd69 = getelementptr inbounds i8, ptr %ptradd68, i64 4, !dbg !4283
  %59 = load i32, ptr %width, align 4, !dbg !4284
  store i32 %59, ptr %ptradd69, align 4, !dbg !4284
  store i64 %val, ptr %0, align 8, !dbg !4284
  ret i64 0, !dbg !4284

err_retblock70:                                   ; preds = %assign_optional65
  %60 = load ptr, ptr %self, align 8, !dbg !4285
  %ptradd71 = getelementptr inbounds i8, ptr %60, i64 16, !dbg !4285
  %61 = load i32, ptr %flags, align 4, !dbg !4287
  store i32 %61, ptr %ptradd71, align 8, !dbg !4287
  %62 = load ptr, ptr %self, align 8, !dbg !4288
  %ptradd72 = getelementptr inbounds i8, ptr %62, i64 16, !dbg !4288
  %ptradd73 = getelementptr inbounds i8, ptr %ptradd72, i64 4, !dbg !4288
  %63 = load i32, ptr %width, align 4, !dbg !4289
  store i32 %63, ptr %ptradd73, align 4, !dbg !4289
  %64 = load i64, ptr %reterr56, align 8, !dbg !4289
  ret i64 %64, !dbg !4289

switch.case74:                                    ; preds = %switch.entry
    #dbg_declare(ptr %flags75, !4290, !DIExpression(), !4292)
  %65 = load ptr, ptr %self, align 8, !dbg !4293
  %ptradd76 = getelementptr inbounds i8, ptr %65, i64 16, !dbg !4293
  %66 = load i32, ptr %ptradd76, align 8, !dbg !4293
  store i32 %66, ptr %flags75, align 4, !dbg !4293
    #dbg_declare(ptr %width77, !4294, !DIExpression(), !4295)
  %67 = load ptr, ptr %self, align 8, !dbg !4296
  %ptradd78 = getelementptr inbounds i8, ptr %67, i64 16, !dbg !4296
  %ptradd79 = getelementptr inbounds i8, ptr %ptradd78, i64 4, !dbg !4296
  %68 = load i32, ptr %ptradd79, align 4, !dbg !4296
  store i32 %68, ptr %width77, align 4, !dbg !4296
  %69 = load ptr, ptr %self, align 8, !dbg !4297
  %ptradd80 = getelementptr inbounds i8, ptr %69, i64 16, !dbg !4297
  store i32 0, ptr %ptradd80, align 8, !dbg !4297
  %70 = load ptr, ptr %self, align 8, !dbg !4298
  %ptradd81 = getelementptr inbounds i8, ptr %70, i64 16, !dbg !4298
  %ptradd82 = getelementptr inbounds i8, ptr %ptradd81, i64 4, !dbg !4298
  store i32 0, ptr %ptradd82, align 4, !dbg !4299
  %lo85 = load i64, ptr %arg, align 8
  %ptradd86 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi87 = load ptr, ptr %ptradd86, align 8
  %71 = call i64 @std.io.float_from_any(ptr %retparam84, i64 %lo85, ptr %hi87), !dbg !4300
  %not_err88 = icmp eq i64 %71, 0, !dbg !4300
  %72 = call i1 @llvm.expect.i1(i1 %not_err88, i1 true), !dbg !4300
  br i1 %72, label %after_check89, label %else_block93, !dbg !4300

after_check89:                                    ; preds = %switch.case74
  %73 = load ptr, ptr %self, align 8
  %74 = load double, ptr %retparam84, align 8
  %75 = call i64 @std.io.Formatter.ftoa(ptr %retparam90, ptr %73, double %74), !dbg !4301
  %not_err91 = icmp eq i64 %75, 0, !dbg !4301
  %76 = call i1 @llvm.expect.i1(i1 %not_err91, i1 true), !dbg !4301
  br i1 %76, label %after_check92, label %else_block93, !dbg !4301

after_check92:                                    ; preds = %after_check89
  %77 = load i64, ptr %retparam90, align 8, !dbg !4301
  br label %phi_block98, !dbg !4301

else_block93:                                     ; preds = %after_check89, %switch.case74
  %78 = load ptr, ptr %self, align 8
  %79 = call i64 @std.io.Formatter.out_substr(ptr %retparam94, ptr %78, ptr @.str.187, i64 3), !dbg !4302
  %not_err95 = icmp eq i64 %79, 0, !dbg !4302
  %80 = call i1 @llvm.expect.i1(i1 %not_err95, i1 true), !dbg !4302
  br i1 %80, label %after_check97, label %assign_optional96, !dbg !4302

assign_optional96:                                ; preds = %else_block93
  store i64 %79, ptr %reterr83, align 8, !dbg !4302
  br label %err_retblock103, !dbg !4302

after_check97:                                    ; preds = %else_block93
  %81 = load i64, ptr %retparam94, align 8, !dbg !4302
  br label %phi_block98, !dbg !4302

phi_block98:                                      ; preds = %after_check97, %after_check92
  %val99 = phi i64 [ %77, %after_check92 ], [ %81, %after_check97 ], !dbg !4302
  %82 = load ptr, ptr %self, align 8, !dbg !4303
  %ptradd100 = getelementptr inbounds i8, ptr %82, i64 16, !dbg !4303
  %83 = load i32, ptr %flags75, align 4, !dbg !4305
  store i32 %83, ptr %ptradd100, align 8, !dbg !4305
  %84 = load ptr, ptr %self, align 8, !dbg !4306
  %ptradd101 = getelementptr inbounds i8, ptr %84, i64 16, !dbg !4306
  %ptradd102 = getelementptr inbounds i8, ptr %ptradd101, i64 4, !dbg !4306
  %85 = load i32, ptr %width77, align 4, !dbg !4307
  store i32 %85, ptr %ptradd102, align 4, !dbg !4307
  store i64 %val99, ptr %0, align 8, !dbg !4307
  ret i64 0, !dbg !4307

err_retblock103:                                  ; preds = %assign_optional96
  %86 = load ptr, ptr %self, align 8, !dbg !4308
  %ptradd104 = getelementptr inbounds i8, ptr %86, i64 16, !dbg !4308
  %87 = load i32, ptr %flags75, align 4, !dbg !4310
  store i32 %87, ptr %ptradd104, align 8, !dbg !4310
  %88 = load ptr, ptr %self, align 8, !dbg !4311
  %ptradd105 = getelementptr inbounds i8, ptr %88, i64 16, !dbg !4311
  %ptradd106 = getelementptr inbounds i8, ptr %ptradd105, i64 4, !dbg !4311
  %89 = load i32, ptr %width77, align 4, !dbg !4312
  store i32 %89, ptr %ptradd106, align 4, !dbg !4312
  %90 = load i64, ptr %reterr83, align 8, !dbg !4312
  ret i64 %90, !dbg !4312

switch.case107:                                   ; preds = %switch.entry
  %91 = load ptr, ptr %arg, align 8, !dbg !4313
  %checknull109 = icmp eq ptr %91, null, !dbg !4313
  %92 = call i1 @llvm.expect.i1(i1 %checknull109, i1 false), !dbg !4313
  br i1 %92, label %panic110, label %checkok111, !dbg !4313

checkok111:                                       ; preds = %switch.case107
  %93 = load i8, ptr %91, align 1, !dbg !4315
  %94 = trunc i8 %93 to i1, !dbg !4315
  %ternary = select i1 %94, %"char[]" { ptr @.str.188, i64 4 }, %"char[]" { ptr @.str.189, i64 5 }, !dbg !4316
  %95 = load ptr, ptr %self, align 8
  %96 = extractvalue %"char[]" %ternary, 0
  %97 = extractvalue %"char[]" %ternary, 1
  %98 = call i64 @std.io.Formatter.out_substr(ptr %retparam112, ptr %95, ptr %96, i64 %97), !dbg !4317
  %not_err113 = icmp eq i64 %98, 0, !dbg !4317
  %99 = call i1 @llvm.expect.i1(i1 %not_err113, i1 true), !dbg !4317
  br i1 %99, label %after_check115, label %assign_optional114, !dbg !4317

assign_optional114:                               ; preds = %checkok111
  store i64 %98, ptr %reterr108, align 8, !dbg !4317
  br label %err_retblock116, !dbg !4317

after_check115:                                   ; preds = %checkok111
  %100 = load i64, ptr %retparam112, align 8, !dbg !4317
  store i64 %100, ptr %0, align 8, !dbg !4317
  ret i64 0, !dbg !4317

err_retblock116:                                  ; preds = %assign_optional114
  %101 = load i64, ptr %reterr108, align 8, !dbg !4317
  ret i64 %101, !dbg !4317

switch.exit:                                      ; preds = %switch.entry
    #dbg_declare(ptr %n, !4318, !DIExpression(), !4319)
  %102 = load %any, ptr %arg, align 8, !dbg !4320
  %103 = load ptr, ptr %self, align 8
  store %any %102, ptr %taddr118, align 8
  %lo119 = load i64, ptr %taddr118, align 8
  %ptradd120 = getelementptr inbounds i8, ptr %taddr118, i64 8
  %hi121 = load ptr, ptr %ptradd120, align 8
  %104 = call i64 @std.io.Formatter.print_with_function(ptr %retparam117, ptr %103, i64 %lo119, ptr %hi121), !dbg !4321
  %not_err122 = icmp eq i64 %104, 0, !dbg !4321
  %105 = call i1 @llvm.expect.i1(i1 %not_err122, i1 true), !dbg !4321
  br i1 %105, label %after_check124, label %assign_optional123, !dbg !4321

assign_optional123:                               ; preds = %switch.exit
  store i64 %104, ptr %n.f, align 8, !dbg !4321
  br label %after_assign, !dbg !4321

after_check124:                                   ; preds = %switch.exit
  %106 = load i64, ptr %retparam117, align 8, !dbg !4321
  store i64 %106, ptr %n, align 8, !dbg !4321
  store i64 0, ptr %n.f, align 8, !dbg !4321
  br label %after_assign, !dbg !4321

after_assign:                                     ; preds = %after_check124, %assign_optional123
  %load.err = load i64, ptr %n.f, align 8, !dbg !4322
  %result = icmp eq i64 %load.err, 0, !dbg !4322
  br i1 %result, label %if.then, label %if.exit, !dbg !4322

if.then:                                          ; preds = %after_assign
  %107 = load i64, ptr %n, align 8, !dbg !4323
  store i64 %107, ptr %0, align 8, !dbg !4323
  ret i64 0, !dbg !4323

if.exit:                                          ; preds = %after_assign
    #dbg_declare(ptr %f, !4324, !DIExpression(), !4326)
  br label %testblock, !dbg !4326

testblock:                                        ; preds = %if.exit
  %optval = load i64, ptr %n.f, align 8, !dbg !4328
  %not_err126 = icmp eq i64 %optval, 0, !dbg !4328
  %108 = call i1 @llvm.expect.i1(i1 %not_err126, i1 true), !dbg !4328
  br i1 %108, label %after_check128, label %assign_optional127, !dbg !4328

assign_optional127:                               ; preds = %testblock
  store i64 %optval, ptr %f, align 8, !dbg !4328
  br label %end_block, !dbg !4328

after_check128:                                   ; preds = %testblock
  store i64 0, ptr %f, align 8, !dbg !4328
  br label %end_block, !dbg !4328

end_block:                                        ; preds = %after_check128, %assign_optional127
  %109 = load i64, ptr %f, align 8, !dbg !4328
  %i2b = icmp ne i64 %109, 0, !dbg !4328
  br i1 %i2b, label %if.then129, label %if.exit130, !dbg !4328

if.then129:                                       ; preds = %end_block
  %110 = load i64, ptr %f, align 8, !dbg !4329
  store i64 %110, ptr %blockret, align 8, !dbg !4329
  br label %expr_block.exit, !dbg !4329

if.exit130:                                       ; preds = %end_block
  store i64 0, ptr %blockret, align 8, !dbg !4330
  br label %expr_block.exit, !dbg !4330

expr_block.exit:                                  ; preds = %if.exit130, %if.then129
  %111 = load i64, ptr %blockret, align 8, !dbg !4330
  %neq = icmp ne i64 %111, ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !4327
  br i1 %neq, label %if.then131, label %if.exit136, !dbg !4327

if.then131:                                       ; preds = %expr_block.exit
  %optval132 = load i64, ptr %n.f, align 8, !dbg !4331
  %not_err133 = icmp eq i64 %optval132, 0, !dbg !4331
  %112 = call i1 @llvm.expect.i1(i1 %not_err133, i1 true), !dbg !4331
  br i1 %112, label %after_check135, label %assign_optional134, !dbg !4331

assign_optional134:                               ; preds = %if.then131
  store i64 %optval132, ptr %error_var, align 8, !dbg !4331
  br label %guard_block, !dbg !4331

after_check135:                                   ; preds = %if.then131
  br label %noerr_block, !dbg !4331

guard_block:                                      ; preds = %assign_optional134
  %113 = load i64, ptr %error_var, align 8, !dbg !4331
  ret i64 %113, !dbg !4331

noerr_block:                                      ; preds = %after_check135
  br label %if.exit136, !dbg !4331

if.exit136:                                       ; preds = %noerr_block, %expr_block.exit
  %ptradd137 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4332
  %114 = load i64, ptr %ptradd137, align 8, !dbg !4332
  %"introspect*138" = inttoptr i64 %114 to ptr, !dbg !4332
  %typeid.kind139 = load i8, ptr %"introspect*138", align 8, !dbg !4332
  store i8 %typeid.kind139, ptr %switch140, align 1
  br label %switch.entry141

switch.entry141:                                  ; preds = %if.exit136
  %115 = load i8, ptr %switch140, align 1
  switch i8 %115, label %switch.exit1263 [
    i8 8, label %switch.case142
    i8 9, label %switch.case557
    i8 10, label %switch.case567
    i8 11, label %switch.case577
    i8 12, label %switch.case587
    i8 17, label %switch.case620
    i8 18, label %switch.case777
    i8 14, label %switch.case905
    i8 16, label %switch.case1013
    i8 15, label %switch.case1129
    i8 7, label %switch.case1257
    i8 19, label %switch.case1257
  ]

switch.case142:                                   ; preds = %switch.entry141
    #dbg_declare(ptr %i, !4334, !DIExpression(), !4336)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %arg, i32 16, i1 false)
  %116 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext 3) #6, !dbg !4337
  %117 = trunc i8 %116 to i1, !dbg !4337
  br i1 %117, label %assert_ok, label %assert_fail, !dbg !4337

assert_fail:                                      ; preds = %switch.case142
  %118 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4337
  call void %118(ptr @.panic_msg.59, i64 69, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 189) #5, !dbg !4337
  unreachable, !dbg !4337

assert_ok:                                        ; preds = %switch.case142
  %ptradd145 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !4341
  %119 = load i64, ptr %ptradd145, align 8, !dbg !4341
  %"introspect*146" = inttoptr i64 %119 to ptr, !dbg !4341
  %typeid.kind147 = load i8, ptr %"introspect*146", align 8, !dbg !4341
  %eq148 = icmp eq i8 %typeid.kind147, 8, !dbg !4337
  br i1 %eq148, label %assert_ok150, label %assert_fail149, !dbg !4337

assert_fail149:                                   ; preds = %assert_ok
  %120 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4337
  call void %120(ptr @.panic_msg.190, i64 67, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 189) #5, !dbg !4337
  unreachable, !dbg !4337

assert_ok150:                                     ; preds = %assert_ok
  store ptr %v, ptr %self151, align 8
  %121 = load ptr, ptr %self151, align 8, !dbg !4342
  %neq153 = icmp ne ptr %121, null, !dbg !4342
  br i1 %neq153, label %assert_ok155, label %assert_fail154, !dbg !4342

assert_fail154:                                   ; preds = %assert_ok150
  %122 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4342
  call void %122(ptr @.panic_msg.48, i64 32, ptr @.file.15, i64 10, ptr @.func.180, i64 7, i32 239) #5, !dbg !4342
  unreachable, !dbg !4342

assert_ok155:                                     ; preds = %assert_ok150
  %123 = load ptr, ptr %self151, align 8, !dbg !4346
  %checknull156 = icmp eq ptr %123, null, !dbg !4346
  %124 = call i1 @llvm.expect.i1(i1 %checknull156, i1 false), !dbg !4346
  br i1 %124, label %panic157, label %checkok158, !dbg !4346

checkok158:                                       ; preds = %assert_ok155
  %125 = ptrtoint ptr %123 to i64, !dbg !4346
  %126 = urem i64 %125, 8, !dbg !4346
  %127 = icmp ne i64 %126, 0, !dbg !4346
  %128 = call i1 @llvm.expect.i1(i1 %127, i1 false), !dbg !4346
  br i1 %128, label %panic159, label %checkok166, !dbg !4346

checkok166:                                       ; preds = %checkok158
  %129 = load ptr, ptr %123, align 8, !dbg !4346
  %130 = load ptr, ptr %self151, align 8, !dbg !4347
  %checknull167 = icmp eq ptr %130, null, !dbg !4347
  %131 = call i1 @llvm.expect.i1(i1 %checknull167, i1 false), !dbg !4347
  br i1 %131, label %panic168, label %checkok169, !dbg !4347

checkok169:                                       ; preds = %checkok166
  %132 = ptrtoint ptr %130 to i64, !dbg !4347
  %133 = urem i64 %132, 8, !dbg !4347
  %134 = icmp ne i64 %133, 0, !dbg !4347
  %135 = call i1 @llvm.expect.i1(i1 %134, i1 false), !dbg !4347
  br i1 %135, label %panic170, label %checkok177, !dbg !4347

checkok177:                                       ; preds = %checkok169
  %ptradd178 = getelementptr inbounds i8, ptr %130, i64 8, !dbg !4347
  %136 = load i64, ptr %ptradd178, align 8, !dbg !4347
  %"introspect*179" = inttoptr i64 %136 to ptr, !dbg !4347
  %typeid.kind180 = load i8, ptr %"introspect*179", align 8, !dbg !4347
  %eq181 = icmp eq i8 %typeid.kind180, 14, !dbg !4347
  br i1 %eq181, label %check_type_ok, label %check_next, !dbg !4347

check_next:                                       ; preds = %checkok177
  %eq182 = icmp eq i8 %typeid.kind180, 18, !dbg !4347
  br i1 %eq182, label %check_type_ok, label %check_next183, !dbg !4347

check_next183:                                    ; preds = %check_next
  %eq184 = icmp eq i8 %typeid.kind180, 16, !dbg !4347
  br i1 %eq184, label %check_type_ok, label %check_next185, !dbg !4347

check_next185:                                    ; preds = %check_next183
  %eq186 = icmp eq i8 %typeid.kind180, 8, !dbg !4347
  br i1 %eq186, label %check_type_ok, label %check_next187, !dbg !4347

check_next187:                                    ; preds = %check_next185
  %eq188 = icmp eq i8 %typeid.kind180, 15, !dbg !4347
  br i1 %eq188, label %check_type_ok, label %check_next189, !dbg !4347

check_next189:                                    ; preds = %check_next187
  %eq190 = icmp eq i8 %typeid.kind180, 17, !dbg !4347
  br i1 %eq190, label %check_type_ok, label %check_next191, !dbg !4347

check_next191:                                    ; preds = %check_next189
  %eq192 = icmp eq i8 %typeid.kind180, 13, !dbg !4347
  br i1 %eq192, label %check_type_ok, label %check_next193, !dbg !4347

check_next193:                                    ; preds = %check_next191
  %eq194 = icmp eq i8 %typeid.kind180, 11, !dbg !4347
  br i1 %eq194, label %check_type_ok, label %check_next195, !dbg !4347

check_next195:                                    ; preds = %check_next193
  %137 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4347
  call void %137(ptr @.panic_msg.49, i64 49, ptr @.file.15, i64 10, ptr @.func.180, i64 7, i32 241) #5, !dbg !4347
  unreachable, !dbg !4347

check_type_ok:                                    ; preds = %check_next193, %check_next191, %check_next189, %check_next187, %check_next185, %check_next183, %check_next, %checkok177
  %ptradd196 = getelementptr inbounds i8, ptr %"introspect*179", i64 32, !dbg !4347
  %typeid.inner = load i64, ptr %ptradd196, align 8, !dbg !4347
  %138 = insertvalue %any undef, ptr %129, 0, !dbg !4347
  %139 = insertvalue %any %138, i64 %typeid.inner, 1, !dbg !4347
  store %any %139, ptr %v197, align 8
  %140 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext 3) #6, !dbg !4348
  %141 = trunc i8 %140 to i1, !dbg !4348
  br i1 %141, label %assert_ok200, label %assert_fail199, !dbg !4348

assert_fail199:                                   ; preds = %check_type_ok
  %142 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4348
  call void %142(ptr @.panic_msg.59, i64 69, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 14) #5, !dbg !4348
  unreachable, !dbg !4348

assert_ok200:                                     ; preds = %check_type_ok
  %ptradd201 = getelementptr inbounds i8, ptr %v197, i64 8, !dbg !4352
  %143 = load i64, ptr %ptradd201, align 8, !dbg !4352
  %"introspect*202" = inttoptr i64 %143 to ptr, !dbg !4352
  %typeid.kind203 = load i8, ptr %"introspect*202", align 8, !dbg !4352
  %144 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext %typeid.kind203) #6, !dbg !4348
  %145 = trunc i8 %144 to i1, !dbg !4348
  br i1 %145, label %assert_ok205, label %assert_fail204, !dbg !4348

assert_fail204:                                   ; preds = %assert_ok200
  %146 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4348
  call void %146(ptr @.panic_msg.60, i64 71, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 14) #5, !dbg !4348
  unreachable, !dbg !4348

assert_ok205:                                     ; preds = %assert_ok200
    #dbg_declare(ptr %any_type, !4353, !DIExpression(), !4354)
  %ptradd206 = getelementptr inbounds i8, ptr %v197, i64 8, !dbg !4355
  %147 = load i64, ptr %ptradd206, align 8, !dbg !4355
  store i64 %147, ptr %any_type, align 8, !dbg !4355
    #dbg_declare(ptr %kind, !4356, !DIExpression(), !4357)
  %148 = load i64, ptr %any_type, align 8, !dbg !4358
  %"introspect*207" = inttoptr i64 %148 to ptr, !dbg !4358
  %typeid.kind208 = load i8, ptr %"introspect*207", align 8, !dbg !4358
  store i8 %typeid.kind208, ptr %kind, align 1, !dbg !4358
    #dbg_declare(ptr %is_mixed_signed, !4359, !DIExpression(), !4360)
  %149 = load i64, ptr %any_type, align 8, !dbg !4361
  %"introspect*209" = inttoptr i64 %149 to ptr, !dbg !4361
  %typeid.kind210 = load i8, ptr %"introspect*209", align 8, !dbg !4361
  %neq211 = icmp ne i8 3, %typeid.kind210, !dbg !4362
  %150 = zext i1 %neq211 to i8, !dbg !4362
  store i8 %150, ptr %is_mixed_signed, align 1, !dbg !4362
    #dbg_declare(ptr %max, !4363, !DIExpression(), !4364)
  store i64 -1, ptr %max, align 8, !dbg !4365
    #dbg_declare(ptr %min, !4366, !DIExpression(), !4367)
  store i64 0, ptr %min, align 8, !dbg !4368
  %151 = load i64, ptr %any_type, align 8
  store i64 %151, ptr %switch212, align 8
  br label %switch.entry213

switch.entry213:                                  ; preds = %assert_ok205
  %152 = load i64, ptr %switch212, align 8
  br label %check_subtype, !dbg !4369

check_subtype:                                    ; preds = %parent_type_block, %switch.entry213
  %153 = phi i64 [ %152, %switch.entry213 ], [ %typeid.parent, %parent_type_block ], !dbg !4369
  %eq214 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %153, !dbg !4369
  br i1 %eq214, label %result_block, label %parent_type_block, !dbg !4369

parent_type_block:                                ; preds = %check_subtype
  %154 = inttoptr i64 %153 to ptr, !dbg !4369
  %ptradd215 = getelementptr inbounds i8, ptr %154, i64 8, !dbg !4369
  %typeid.parent = load i64, ptr %ptradd215, align 8, !dbg !4369
  %155 = icmp eq i64 %typeid.parent, 0, !dbg !4369
  br i1 %155, label %result_block, label %check_subtype, !dbg !4369

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %156 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !4369
  br i1 %156, label %switch.case216, label %next_if, !dbg !4369

switch.case216:                                   ; preds = %result_block
    #dbg_declare(ptr %c, !4371, !DIExpression(), !4373)
  %157 = load ptr, ptr %v197, align 8, !dbg !4374
  %checknull217 = icmp eq ptr %157, null, !dbg !4374
  %158 = call i1 @llvm.expect.i1(i1 %checknull217, i1 false), !dbg !4374
  br i1 %158, label %panic218, label %checkok219, !dbg !4374

checkok219:                                       ; preds = %switch.case216
  %159 = load i8, ptr %157, align 1, !dbg !4375
  store i8 %159, ptr %c, align 1, !dbg !4375
  %160 = load i8, ptr %is_mixed_signed, align 1, !dbg !4376
  %161 = trunc i8 %160 to i1, !dbg !4376
  br i1 %161, label %and.rhs, label %and.phi, !dbg !4376

and.rhs:                                          ; preds = %checkok219
  %162 = load i8, ptr %c, align 1, !dbg !4377
  %sext = sext i8 %162 to i32, !dbg !4377
  %lt = icmp slt i32 %sext, 0, !dbg !4377
  br label %and.phi, !dbg !4377

and.phi:                                          ; preds = %and.rhs, %checkok219
  %val220 = phi i1 [ false, %checkok219 ], [ %lt, %and.rhs ], !dbg !4377
  br i1 %val220, label %if.then221, label %if.exit222, !dbg !4377

if.then221:                                       ; preds = %and.phi
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %error_var143, align 8, !dbg !4378
  br label %panic_block, !dbg !4378

if.exit222:                                       ; preds = %and.phi
  %163 = load i8, ptr %c, align 1, !dbg !4379
  %sext223 = sext i8 %163 to i64, !dbg !4379
  store i64 %sext223, ptr %blockret198, align 8, !dbg !4379
  br label %expr_block.exit512, !dbg !4379

next_if:                                          ; preds = %result_block
  br label %check_subtype224, !dbg !4380

check_subtype224:                                 ; preds = %parent_type_block226, %next_if
  %164 = phi i64 [ %152, %next_if ], [ %typeid.parent228, %parent_type_block226 ], !dbg !4380
  %eq225 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %164, !dbg !4380
  br i1 %eq225, label %result_block229, label %parent_type_block226, !dbg !4380

parent_type_block226:                             ; preds = %check_subtype224
  %165 = inttoptr i64 %164 to ptr, !dbg !4380
  %ptradd227 = getelementptr inbounds i8, ptr %165, i64 8, !dbg !4380
  %typeid.parent228 = load i64, ptr %ptradd227, align 8, !dbg !4380
  %166 = icmp eq i64 %typeid.parent228, 0, !dbg !4380
  br i1 %166, label %result_block229, label %check_subtype224, !dbg !4380

result_block229:                                  ; preds = %parent_type_block226, %check_subtype224
  %167 = phi i1 [ false, %parent_type_block226 ], [ true, %check_subtype224 ], !dbg !4380
  br i1 %167, label %switch.case230, label %next_if257, !dbg !4380

switch.case230:                                   ; preds = %result_block229
    #dbg_declare(ptr %s, !4381, !DIExpression(), !4383)
  %168 = load ptr, ptr %v197, align 8, !dbg !4384
  %checknull231 = icmp eq ptr %168, null, !dbg !4384
  %169 = call i1 @llvm.expect.i1(i1 %checknull231, i1 false), !dbg !4384
  br i1 %169, label %panic232, label %checkok233, !dbg !4384

checkok233:                                       ; preds = %switch.case230
  %170 = ptrtoint ptr %168 to i64, !dbg !4385
  %171 = urem i64 %170, 2, !dbg !4385
  %172 = icmp ne i64 %171, 0, !dbg !4385
  %173 = call i1 @llvm.expect.i1(i1 %172, i1 false), !dbg !4385
  br i1 %173, label %panic234, label %checkok241, !dbg !4385

checkok241:                                       ; preds = %checkok233
  %174 = load i16, ptr %168, align 2, !dbg !4385
  store i16 %174, ptr %s, align 2, !dbg !4385
  %175 = load i8, ptr %is_mixed_signed, align 1, !dbg !4386
  %176 = trunc i8 %175 to i1, !dbg !4386
  br i1 %176, label %and.rhs242, label %and.phi245, !dbg !4386

and.rhs242:                                       ; preds = %checkok241
  %177 = load i16, ptr %s, align 2, !dbg !4387
  %sext243 = sext i16 %177 to i32, !dbg !4387
  %lt244 = icmp slt i32 %sext243, 0, !dbg !4387
  br label %and.phi245, !dbg !4387

and.phi245:                                       ; preds = %and.rhs242, %checkok241
  %val246 = phi i1 [ false, %checkok241 ], [ %lt244, %and.rhs242 ], !dbg !4387
  br i1 %val246, label %if.then247, label %if.exit248, !dbg !4387

if.then247:                                       ; preds = %and.phi245
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %error_var143, align 8, !dbg !4388
  br label %panic_block, !dbg !4388

if.exit248:                                       ; preds = %and.phi245
  %178 = load i16, ptr %s, align 2, !dbg !4389
  %sext249 = sext i16 %178 to i64, !dbg !4389
  %179 = load i64, ptr %max, align 8, !dbg !4390
  %gt = icmp sgt i64 %sext249, %179, !dbg !4389
  %check = icmp sge i64 %179, 0, !dbg !4389
  %siui-gt = and i1 %check, %gt, !dbg !4389
  br i1 %siui-gt, label %or.phi, label %or.rhs, !dbg !4389

or.rhs:                                           ; preds = %if.exit248
  %180 = load i16, ptr %s, align 2, !dbg !4391
  %sext250 = sext i16 %180 to i64, !dbg !4391
  %181 = load i64, ptr %min, align 8, !dbg !4392
  %lt251 = icmp slt i64 %sext250, %181, !dbg !4391
  %check252 = icmp slt i64 %181, 0, !dbg !4391
  %siui-lt = or i1 %check252, %lt251, !dbg !4391
  br label %or.phi, !dbg !4391

or.phi:                                           ; preds = %or.rhs, %if.exit248
  %val253 = phi i1 [ true, %if.exit248 ], [ %siui-lt, %or.rhs ], !dbg !4391
  br i1 %val253, label %if.then254, label %if.exit255, !dbg !4391

if.then254:                                       ; preds = %or.phi
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var143, align 8, !dbg !4393
  br label %panic_block, !dbg !4393

if.exit255:                                       ; preds = %or.phi
  %182 = load i16, ptr %s, align 2, !dbg !4394
  %sext256 = sext i16 %182 to i64, !dbg !4394
  store i64 %sext256, ptr %blockret198, align 8, !dbg !4394
  br label %expr_block.exit512, !dbg !4394

next_if257:                                       ; preds = %result_block229
  br label %check_subtype258, !dbg !4395

check_subtype258:                                 ; preds = %parent_type_block260, %next_if257
  %183 = phi i64 [ %152, %next_if257 ], [ %typeid.parent262, %parent_type_block260 ], !dbg !4395
  %eq259 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %183, !dbg !4395
  br i1 %eq259, label %result_block263, label %parent_type_block260, !dbg !4395

parent_type_block260:                             ; preds = %check_subtype258
  %184 = inttoptr i64 %183 to ptr, !dbg !4395
  %ptradd261 = getelementptr inbounds i8, ptr %184, i64 8, !dbg !4395
  %typeid.parent262 = load i64, ptr %ptradd261, align 8, !dbg !4395
  %185 = icmp eq i64 %typeid.parent262, 0, !dbg !4395
  br i1 %185, label %result_block263, label %check_subtype258, !dbg !4395

result_block263:                                  ; preds = %parent_type_block260, %check_subtype258
  %186 = phi i1 [ false, %parent_type_block260 ], [ true, %check_subtype258 ], !dbg !4395
  br i1 %186, label %switch.case264, label %next_if297, !dbg !4395

switch.case264:                                   ; preds = %result_block263
    #dbg_declare(ptr %i265, !4396, !DIExpression(), !4398)
  %187 = load ptr, ptr %v197, align 8, !dbg !4399
  %checknull266 = icmp eq ptr %187, null, !dbg !4399
  %188 = call i1 @llvm.expect.i1(i1 %checknull266, i1 false), !dbg !4399
  br i1 %188, label %panic267, label %checkok268, !dbg !4399

checkok268:                                       ; preds = %switch.case264
  %189 = ptrtoint ptr %187 to i64, !dbg !4400
  %190 = urem i64 %189, 4, !dbg !4400
  %191 = icmp ne i64 %190, 0, !dbg !4400
  %192 = call i1 @llvm.expect.i1(i1 %191, i1 false), !dbg !4400
  br i1 %192, label %panic269, label %checkok276, !dbg !4400

checkok276:                                       ; preds = %checkok268
  %193 = load i32, ptr %187, align 4, !dbg !4400
  store i32 %193, ptr %i265, align 4, !dbg !4400
  %194 = load i8, ptr %is_mixed_signed, align 1, !dbg !4401
  %195 = trunc i8 %194 to i1, !dbg !4401
  br i1 %195, label %and.rhs277, label %and.phi279, !dbg !4401

and.rhs277:                                       ; preds = %checkok276
  %196 = load i32, ptr %i265, align 4, !dbg !4402
  %lt278 = icmp slt i32 %196, 0, !dbg !4402
  br label %and.phi279, !dbg !4402

and.phi279:                                       ; preds = %and.rhs277, %checkok276
  %val280 = phi i1 [ false, %checkok276 ], [ %lt278, %and.rhs277 ], !dbg !4402
  br i1 %val280, label %if.then281, label %if.exit282, !dbg !4402

if.then281:                                       ; preds = %and.phi279
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %error_var143, align 8, !dbg !4403
  br label %panic_block, !dbg !4403

if.exit282:                                       ; preds = %and.phi279
  %197 = load i32, ptr %i265, align 4, !dbg !4404
  %sext283 = sext i32 %197 to i64, !dbg !4404
  %198 = load i64, ptr %max, align 8, !dbg !4405
  %gt284 = icmp sgt i64 %sext283, %198, !dbg !4404
  %check285 = icmp sge i64 %198, 0, !dbg !4404
  %siui-gt286 = and i1 %check285, %gt284, !dbg !4404
  br i1 %siui-gt286, label %or.phi292, label %or.rhs287, !dbg !4404

or.rhs287:                                        ; preds = %if.exit282
  %199 = load i32, ptr %i265, align 4, !dbg !4406
  %sext288 = sext i32 %199 to i64, !dbg !4406
  %200 = load i64, ptr %min, align 8, !dbg !4407
  %lt289 = icmp slt i64 %sext288, %200, !dbg !4406
  %check290 = icmp slt i64 %200, 0, !dbg !4406
  %siui-lt291 = or i1 %check290, %lt289, !dbg !4406
  br label %or.phi292, !dbg !4406

or.phi292:                                        ; preds = %or.rhs287, %if.exit282
  %val293 = phi i1 [ true, %if.exit282 ], [ %siui-lt291, %or.rhs287 ], !dbg !4406
  br i1 %val293, label %if.then294, label %if.exit295, !dbg !4406

if.then294:                                       ; preds = %or.phi292
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var143, align 8, !dbg !4408
  br label %panic_block, !dbg !4408

if.exit295:                                       ; preds = %or.phi292
  %201 = load i32, ptr %i265, align 4, !dbg !4409
  %sext296 = sext i32 %201 to i64, !dbg !4409
  store i64 %sext296, ptr %blockret198, align 8, !dbg !4409
  br label %expr_block.exit512, !dbg !4409

next_if297:                                       ; preds = %result_block263
  br label %check_subtype298, !dbg !4410

check_subtype298:                                 ; preds = %parent_type_block300, %next_if297
  %202 = phi i64 [ %152, %next_if297 ], [ %typeid.parent302, %parent_type_block300 ], !dbg !4410
  %eq299 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %202, !dbg !4410
  br i1 %eq299, label %result_block303, label %parent_type_block300, !dbg !4410

parent_type_block300:                             ; preds = %check_subtype298
  %203 = inttoptr i64 %202 to ptr, !dbg !4410
  %ptradd301 = getelementptr inbounds i8, ptr %203, i64 8, !dbg !4410
  %typeid.parent302 = load i64, ptr %ptradd301, align 8, !dbg !4410
  %204 = icmp eq i64 %typeid.parent302, 0, !dbg !4410
  br i1 %204, label %result_block303, label %check_subtype298, !dbg !4410

result_block303:                                  ; preds = %parent_type_block300, %check_subtype298
  %205 = phi i1 [ false, %parent_type_block300 ], [ true, %check_subtype298 ], !dbg !4410
  br i1 %205, label %switch.case304, label %next_if333, !dbg !4410

switch.case304:                                   ; preds = %result_block303
    #dbg_declare(ptr %l, !4411, !DIExpression(), !4413)
  %206 = load ptr, ptr %v197, align 8, !dbg !4414
  %checknull305 = icmp eq ptr %206, null, !dbg !4414
  %207 = call i1 @llvm.expect.i1(i1 %checknull305, i1 false), !dbg !4414
  br i1 %207, label %panic306, label %checkok307, !dbg !4414

checkok307:                                       ; preds = %switch.case304
  %208 = ptrtoint ptr %206 to i64, !dbg !4415
  %209 = urem i64 %208, 8, !dbg !4415
  %210 = icmp ne i64 %209, 0, !dbg !4415
  %211 = call i1 @llvm.expect.i1(i1 %210, i1 false), !dbg !4415
  br i1 %211, label %panic308, label %checkok315, !dbg !4415

checkok315:                                       ; preds = %checkok307
  %212 = load i64, ptr %206, align 8, !dbg !4415
  store i64 %212, ptr %l, align 8, !dbg !4415
  %213 = load i8, ptr %is_mixed_signed, align 1, !dbg !4416
  %214 = trunc i8 %213 to i1, !dbg !4416
  br i1 %214, label %and.rhs316, label %and.phi318, !dbg !4416

and.rhs316:                                       ; preds = %checkok315
  %215 = load i64, ptr %l, align 8, !dbg !4417
  %lt317 = icmp slt i64 %215, 0, !dbg !4417
  br label %and.phi318, !dbg !4417

and.phi318:                                       ; preds = %and.rhs316, %checkok315
  %val319 = phi i1 [ false, %checkok315 ], [ %lt317, %and.rhs316 ], !dbg !4417
  br i1 %val319, label %if.then320, label %if.exit321, !dbg !4417

if.then320:                                       ; preds = %and.phi318
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %error_var143, align 8, !dbg !4418
  br label %panic_block, !dbg !4418

if.exit321:                                       ; preds = %and.phi318
  %216 = load i64, ptr %l, align 8, !dbg !4419
  %217 = load i64, ptr %max, align 8, !dbg !4420
  %gt322 = icmp sgt i64 %216, %217, !dbg !4419
  %check323 = icmp sge i64 %217, 0, !dbg !4419
  %siui-gt324 = and i1 %check323, %gt322, !dbg !4419
  br i1 %siui-gt324, label %or.phi329, label %or.rhs325, !dbg !4419

or.rhs325:                                        ; preds = %if.exit321
  %218 = load i64, ptr %l, align 8, !dbg !4421
  %219 = load i64, ptr %min, align 8, !dbg !4422
  %lt326 = icmp slt i64 %218, %219, !dbg !4421
  %check327 = icmp slt i64 %219, 0, !dbg !4421
  %siui-lt328 = or i1 %check327, %lt326, !dbg !4421
  br label %or.phi329, !dbg !4421

or.phi329:                                        ; preds = %or.rhs325, %if.exit321
  %val330 = phi i1 [ true, %if.exit321 ], [ %siui-lt328, %or.rhs325 ], !dbg !4421
  br i1 %val330, label %if.then331, label %if.exit332, !dbg !4421

if.then331:                                       ; preds = %or.phi329
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var143, align 8, !dbg !4423
  br label %panic_block, !dbg !4423

if.exit332:                                       ; preds = %or.phi329
  %220 = load i64, ptr %l, align 8, !dbg !4424
  store i64 %220, ptr %blockret198, align 8, !dbg !4424
  br label %expr_block.exit512, !dbg !4424

next_if333:                                       ; preds = %result_block303
  br label %check_subtype334, !dbg !4425

check_subtype334:                                 ; preds = %parent_type_block336, %next_if333
  %221 = phi i64 [ %152, %next_if333 ], [ %typeid.parent338, %parent_type_block336 ], !dbg !4425
  %eq335 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %221, !dbg !4425
  br i1 %eq335, label %result_block339, label %parent_type_block336, !dbg !4425

parent_type_block336:                             ; preds = %check_subtype334
  %222 = inttoptr i64 %221 to ptr, !dbg !4425
  %ptradd337 = getelementptr inbounds i8, ptr %222, i64 8, !dbg !4425
  %typeid.parent338 = load i64, ptr %ptradd337, align 8, !dbg !4425
  %223 = icmp eq i64 %typeid.parent338, 0, !dbg !4425
  br i1 %223, label %result_block339, label %check_subtype334, !dbg !4425

result_block339:                                  ; preds = %parent_type_block336, %check_subtype334
  %224 = phi i1 [ false, %parent_type_block336 ], [ true, %check_subtype334 ], !dbg !4425
  br i1 %224, label %switch.case340, label %next_if371, !dbg !4425

switch.case340:                                   ; preds = %result_block339
    #dbg_declare(ptr %i341, !4426, !DIExpression(), !4428)
  %225 = load ptr, ptr %v197, align 8, !dbg !4429
  %checknull342 = icmp eq ptr %225, null, !dbg !4429
  %226 = call i1 @llvm.expect.i1(i1 %checknull342, i1 false), !dbg !4429
  br i1 %226, label %panic343, label %checkok344, !dbg !4429

checkok344:                                       ; preds = %switch.case340
  %227 = ptrtoint ptr %225 to i64, !dbg !4430
  %228 = urem i64 %227, 16, !dbg !4430
  %229 = icmp ne i64 %228, 0, !dbg !4430
  %230 = call i1 @llvm.expect.i1(i1 %229, i1 false), !dbg !4430
  br i1 %230, label %panic345, label %checkok352, !dbg !4430

checkok352:                                       ; preds = %checkok344
  %231 = load i128, ptr %225, align 16, !dbg !4430
  store i128 %231, ptr %i341, align 16, !dbg !4430
  %232 = load i8, ptr %is_mixed_signed, align 1, !dbg !4431
  %233 = trunc i8 %232 to i1, !dbg !4431
  br i1 %233, label %and.rhs353, label %and.phi355, !dbg !4431

and.rhs353:                                       ; preds = %checkok352
  %234 = load i128, ptr %i341, align 16, !dbg !4432
  %lt354 = icmp slt i128 %234, 0, !dbg !4432
  br label %and.phi355, !dbg !4432

and.phi355:                                       ; preds = %and.rhs353, %checkok352
  %val356 = phi i1 [ false, %checkok352 ], [ %lt354, %and.rhs353 ], !dbg !4432
  br i1 %val356, label %if.then357, label %if.exit358, !dbg !4432

if.then357:                                       ; preds = %and.phi355
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE to i64), ptr %error_var143, align 8, !dbg !4433
  br label %panic_block, !dbg !4433

if.exit358:                                       ; preds = %and.phi355
  %235 = load i128, ptr %i341, align 16, !dbg !4434
  %236 = load i64, ptr %max, align 8, !dbg !4435
  %zext = zext i64 %236 to i128, !dbg !4435
  %gt359 = icmp sgt i128 %235, %zext, !dbg !4434
  %check360 = icmp sge i128 %zext, 0, !dbg !4434
  %siui-gt361 = and i1 %check360, %gt359, !dbg !4434
  br i1 %siui-gt361, label %or.phi367, label %or.rhs362, !dbg !4434

or.rhs362:                                        ; preds = %if.exit358
  %237 = load i128, ptr %i341, align 16, !dbg !4436
  %238 = load i64, ptr %min, align 8, !dbg !4437
  %zext363 = zext i64 %238 to i128, !dbg !4437
  %lt364 = icmp slt i128 %237, %zext363, !dbg !4436
  %check365 = icmp slt i128 %zext363, 0, !dbg !4436
  %siui-lt366 = or i1 %check365, %lt364, !dbg !4436
  br label %or.phi367, !dbg !4436

or.phi367:                                        ; preds = %or.rhs362, %if.exit358
  %val368 = phi i1 [ true, %if.exit358 ], [ %siui-lt366, %or.rhs362 ], !dbg !4436
  br i1 %val368, label %if.then369, label %if.exit370, !dbg !4436

if.then369:                                       ; preds = %or.phi367
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var143, align 8, !dbg !4438
  br label %panic_block, !dbg !4438

if.exit370:                                       ; preds = %or.phi367
  %239 = load i128, ptr %i341, align 16, !dbg !4439
  %trunc = trunc i128 %239 to i64, !dbg !4439
  store i64 %trunc, ptr %blockret198, align 8, !dbg !4439
  br label %expr_block.exit512, !dbg !4439

next_if371:                                       ; preds = %result_block339
  br label %check_subtype372, !dbg !4440

check_subtype372:                                 ; preds = %parent_type_block374, %next_if371
  %240 = phi i64 [ %152, %next_if371 ], [ %typeid.parent376, %parent_type_block374 ], !dbg !4440
  %eq373 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %240, !dbg !4440
  br i1 %eq373, label %result_block377, label %parent_type_block374, !dbg !4440

parent_type_block374:                             ; preds = %check_subtype372
  %241 = inttoptr i64 %240 to ptr, !dbg !4440
  %ptradd375 = getelementptr inbounds i8, ptr %241, i64 8, !dbg !4440
  %typeid.parent376 = load i64, ptr %ptradd375, align 8, !dbg !4440
  %242 = icmp eq i64 %typeid.parent376, 0, !dbg !4440
  br i1 %242, label %result_block377, label %check_subtype372, !dbg !4440

result_block377:                                  ; preds = %parent_type_block374, %check_subtype372
  %243 = phi i1 [ false, %parent_type_block374 ], [ true, %check_subtype372 ], !dbg !4440
  br i1 %243, label %switch.case378, label %next_if388, !dbg !4440

switch.case378:                                   ; preds = %result_block377
    #dbg_declare(ptr %c379, !4441, !DIExpression(), !4443)
  %244 = load ptr, ptr %v197, align 8, !dbg !4444
  %checknull380 = icmp eq ptr %244, null, !dbg !4444
  %245 = call i1 @llvm.expect.i1(i1 %checknull380, i1 false), !dbg !4444
  br i1 %245, label %panic381, label %checkok382, !dbg !4444

checkok382:                                       ; preds = %switch.case378
  %246 = load i8, ptr %244, align 1, !dbg !4445
  store i8 %246, ptr %c379, align 1, !dbg !4445
  %247 = load i8, ptr %c379, align 1, !dbg !4446
  %zext383 = zext i8 %247 to i64, !dbg !4446
  %248 = load i64, ptr %max, align 8, !dbg !4447
  %gt384 = icmp ugt i64 %zext383, %248, !dbg !4446
  br i1 %gt384, label %if.then385, label %if.exit386, !dbg !4446

if.then385:                                       ; preds = %checkok382
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var143, align 8, !dbg !4448
  br label %panic_block, !dbg !4448

if.exit386:                                       ; preds = %checkok382
  %249 = load i8, ptr %c379, align 1, !dbg !4449
  %zext387 = zext i8 %249 to i64, !dbg !4449
  store i64 %zext387, ptr %blockret198, align 8, !dbg !4449
  br label %expr_block.exit512, !dbg !4449

next_if388:                                       ; preds = %result_block377
  br label %check_subtype389, !dbg !4450

check_subtype389:                                 ; preds = %parent_type_block391, %next_if388
  %250 = phi i64 [ %152, %next_if388 ], [ %typeid.parent393, %parent_type_block391 ], !dbg !4450
  %eq390 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %250, !dbg !4450
  br i1 %eq390, label %result_block394, label %parent_type_block391, !dbg !4450

parent_type_block391:                             ; preds = %check_subtype389
  %251 = inttoptr i64 %250 to ptr, !dbg !4450
  %ptradd392 = getelementptr inbounds i8, ptr %251, i64 8, !dbg !4450
  %typeid.parent393 = load i64, ptr %ptradd392, align 8, !dbg !4450
  %252 = icmp eq i64 %typeid.parent393, 0, !dbg !4450
  br i1 %252, label %result_block394, label %check_subtype389, !dbg !4450

result_block394:                                  ; preds = %parent_type_block391, %check_subtype389
  %253 = phi i1 [ false, %parent_type_block391 ], [ true, %check_subtype389 ], !dbg !4450
  br i1 %253, label %switch.case395, label %next_if418, !dbg !4450

switch.case395:                                   ; preds = %result_block394
    #dbg_declare(ptr %s396, !4451, !DIExpression(), !4453)
  %254 = load ptr, ptr %v197, align 8, !dbg !4454
  %checknull397 = icmp eq ptr %254, null, !dbg !4454
  %255 = call i1 @llvm.expect.i1(i1 %checknull397, i1 false), !dbg !4454
  br i1 %255, label %panic398, label %checkok399, !dbg !4454

checkok399:                                       ; preds = %switch.case395
  %256 = ptrtoint ptr %254 to i64, !dbg !4455
  %257 = urem i64 %256, 2, !dbg !4455
  %258 = icmp ne i64 %257, 0, !dbg !4455
  %259 = call i1 @llvm.expect.i1(i1 %258, i1 false), !dbg !4455
  br i1 %259, label %panic400, label %checkok407, !dbg !4455

checkok407:                                       ; preds = %checkok399
  %260 = load i16, ptr %254, align 2, !dbg !4455
  store i16 %260, ptr %s396, align 2, !dbg !4455
  %261 = load i16, ptr %s396, align 2, !dbg !4456
  %zext408 = zext i16 %261 to i64, !dbg !4456
  %262 = load i64, ptr %max, align 8, !dbg !4457
  %gt409 = icmp ugt i64 %zext408, %262, !dbg !4456
  br i1 %gt409, label %or.phi413, label %or.rhs410, !dbg !4456

or.rhs410:                                        ; preds = %checkok407
  %263 = load i16, ptr %s396, align 2, !dbg !4458
  %zext411 = zext i16 %263 to i64, !dbg !4458
  %264 = load i64, ptr %min, align 8, !dbg !4459
  %lt412 = icmp ult i64 %zext411, %264, !dbg !4458
  br label %or.phi413, !dbg !4458

or.phi413:                                        ; preds = %or.rhs410, %checkok407
  %val414 = phi i1 [ true, %checkok407 ], [ %lt412, %or.rhs410 ], !dbg !4458
  br i1 %val414, label %if.then415, label %if.exit416, !dbg !4458

if.then415:                                       ; preds = %or.phi413
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var143, align 8, !dbg !4460
  br label %panic_block, !dbg !4460

if.exit416:                                       ; preds = %or.phi413
  %265 = load i16, ptr %s396, align 2, !dbg !4461
  %zext417 = zext i16 %265 to i64, !dbg !4461
  store i64 %zext417, ptr %blockret198, align 8, !dbg !4461
  br label %expr_block.exit512, !dbg !4461

next_if418:                                       ; preds = %result_block394
  br label %check_subtype419, !dbg !4462

check_subtype419:                                 ; preds = %parent_type_block421, %next_if418
  %266 = phi i64 [ %152, %next_if418 ], [ %typeid.parent423, %parent_type_block421 ], !dbg !4462
  %eq420 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %266, !dbg !4462
  br i1 %eq420, label %result_block424, label %parent_type_block421, !dbg !4462

parent_type_block421:                             ; preds = %check_subtype419
  %267 = inttoptr i64 %266 to ptr, !dbg !4462
  %ptradd422 = getelementptr inbounds i8, ptr %267, i64 8, !dbg !4462
  %typeid.parent423 = load i64, ptr %ptradd422, align 8, !dbg !4462
  %268 = icmp eq i64 %typeid.parent423, 0, !dbg !4462
  br i1 %268, label %result_block424, label %check_subtype419, !dbg !4462

result_block424:                                  ; preds = %parent_type_block421, %check_subtype419
  %269 = phi i1 [ false, %parent_type_block421 ], [ true, %check_subtype419 ], !dbg !4462
  br i1 %269, label %switch.case425, label %next_if448, !dbg !4462

switch.case425:                                   ; preds = %result_block424
    #dbg_declare(ptr %i426, !4463, !DIExpression(), !4465)
  %270 = load ptr, ptr %v197, align 8, !dbg !4466
  %checknull427 = icmp eq ptr %270, null, !dbg !4466
  %271 = call i1 @llvm.expect.i1(i1 %checknull427, i1 false), !dbg !4466
  br i1 %271, label %panic428, label %checkok429, !dbg !4466

checkok429:                                       ; preds = %switch.case425
  %272 = ptrtoint ptr %270 to i64, !dbg !4467
  %273 = urem i64 %272, 4, !dbg !4467
  %274 = icmp ne i64 %273, 0, !dbg !4467
  %275 = call i1 @llvm.expect.i1(i1 %274, i1 false), !dbg !4467
  br i1 %275, label %panic430, label %checkok437, !dbg !4467

checkok437:                                       ; preds = %checkok429
  %276 = load i32, ptr %270, align 4, !dbg !4467
  store i32 %276, ptr %i426, align 4, !dbg !4467
  %277 = load i32, ptr %i426, align 4, !dbg !4468
  %zext438 = zext i32 %277 to i64, !dbg !4468
  %278 = load i64, ptr %max, align 8, !dbg !4469
  %gt439 = icmp ugt i64 %zext438, %278, !dbg !4468
  br i1 %gt439, label %or.phi443, label %or.rhs440, !dbg !4468

or.rhs440:                                        ; preds = %checkok437
  %279 = load i32, ptr %i426, align 4, !dbg !4470
  %zext441 = zext i32 %279 to i64, !dbg !4470
  %280 = load i64, ptr %min, align 8, !dbg !4471
  %lt442 = icmp ult i64 %zext441, %280, !dbg !4470
  br label %or.phi443, !dbg !4470

or.phi443:                                        ; preds = %or.rhs440, %checkok437
  %val444 = phi i1 [ true, %checkok437 ], [ %lt442, %or.rhs440 ], !dbg !4470
  br i1 %val444, label %if.then445, label %if.exit446, !dbg !4470

if.then445:                                       ; preds = %or.phi443
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var143, align 8, !dbg !4472
  br label %panic_block, !dbg !4472

if.exit446:                                       ; preds = %or.phi443
  %281 = load i32, ptr %i426, align 4, !dbg !4473
  %zext447 = zext i32 %281 to i64, !dbg !4473
  store i64 %zext447, ptr %blockret198, align 8, !dbg !4473
  br label %expr_block.exit512, !dbg !4473

next_if448:                                       ; preds = %result_block424
  br label %check_subtype449, !dbg !4474

check_subtype449:                                 ; preds = %parent_type_block451, %next_if448
  %282 = phi i64 [ %152, %next_if448 ], [ %typeid.parent453, %parent_type_block451 ], !dbg !4474
  %eq450 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %282, !dbg !4474
  br i1 %eq450, label %result_block454, label %parent_type_block451, !dbg !4474

parent_type_block451:                             ; preds = %check_subtype449
  %283 = inttoptr i64 %282 to ptr, !dbg !4474
  %ptradd452 = getelementptr inbounds i8, ptr %283, i64 8, !dbg !4474
  %typeid.parent453 = load i64, ptr %ptradd452, align 8, !dbg !4474
  %284 = icmp eq i64 %typeid.parent453, 0, !dbg !4474
  br i1 %284, label %result_block454, label %check_subtype449, !dbg !4474

result_block454:                                  ; preds = %parent_type_block451, %check_subtype449
  %285 = phi i1 [ false, %parent_type_block451 ], [ true, %check_subtype449 ], !dbg !4474
  br i1 %285, label %switch.case455, label %next_if475, !dbg !4474

switch.case455:                                   ; preds = %result_block454
    #dbg_declare(ptr %l456, !4475, !DIExpression(), !4477)
  %286 = load ptr, ptr %v197, align 8, !dbg !4478
  %checknull457 = icmp eq ptr %286, null, !dbg !4478
  %287 = call i1 @llvm.expect.i1(i1 %checknull457, i1 false), !dbg !4478
  br i1 %287, label %panic458, label %checkok459, !dbg !4478

checkok459:                                       ; preds = %switch.case455
  %288 = ptrtoint ptr %286 to i64, !dbg !4479
  %289 = urem i64 %288, 8, !dbg !4479
  %290 = icmp ne i64 %289, 0, !dbg !4479
  %291 = call i1 @llvm.expect.i1(i1 %290, i1 false), !dbg !4479
  br i1 %291, label %panic460, label %checkok467, !dbg !4479

checkok467:                                       ; preds = %checkok459
  %292 = load i64, ptr %286, align 8, !dbg !4479
  store i64 %292, ptr %l456, align 8, !dbg !4479
  %293 = load i64, ptr %l456, align 8, !dbg !4480
  %294 = load i64, ptr %max, align 8, !dbg !4481
  %gt468 = icmp ugt i64 %293, %294, !dbg !4480
  br i1 %gt468, label %or.phi471, label %or.rhs469, !dbg !4480

or.rhs469:                                        ; preds = %checkok467
  %295 = load i64, ptr %l456, align 8, !dbg !4482
  %296 = load i64, ptr %min, align 8, !dbg !4483
  %lt470 = icmp ult i64 %295, %296, !dbg !4482
  br label %or.phi471, !dbg !4482

or.phi471:                                        ; preds = %or.rhs469, %checkok467
  %val472 = phi i1 [ true, %checkok467 ], [ %lt470, %or.rhs469 ], !dbg !4482
  br i1 %val472, label %if.then473, label %if.exit474, !dbg !4482

if.then473:                                       ; preds = %or.phi471
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var143, align 8, !dbg !4484
  br label %panic_block, !dbg !4484

if.exit474:                                       ; preds = %or.phi471
  %297 = load i64, ptr %l456, align 8, !dbg !4485
  store i64 %297, ptr %blockret198, align 8, !dbg !4485
  br label %expr_block.exit512, !dbg !4485

next_if475:                                       ; preds = %result_block454
  br label %check_subtype476, !dbg !4486

check_subtype476:                                 ; preds = %parent_type_block478, %next_if475
  %298 = phi i64 [ %152, %next_if475 ], [ %typeid.parent480, %parent_type_block478 ], !dbg !4486
  %eq477 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %298, !dbg !4486
  br i1 %eq477, label %result_block481, label %parent_type_block478, !dbg !4486

parent_type_block478:                             ; preds = %check_subtype476
  %299 = inttoptr i64 %298 to ptr, !dbg !4486
  %ptradd479 = getelementptr inbounds i8, ptr %299, i64 8, !dbg !4486
  %typeid.parent480 = load i64, ptr %ptradd479, align 8, !dbg !4486
  %300 = icmp eq i64 %typeid.parent480, 0, !dbg !4486
  br i1 %300, label %result_block481, label %check_subtype476, !dbg !4486

result_block481:                                  ; preds = %parent_type_block478, %check_subtype476
  %301 = phi i1 [ false, %parent_type_block478 ], [ true, %check_subtype476 ], !dbg !4486
  br i1 %301, label %switch.case482, label %next_if505, !dbg !4486

switch.case482:                                   ; preds = %result_block481
    #dbg_declare(ptr %i483, !4487, !DIExpression(), !4489)
  %302 = load ptr, ptr %v197, align 8, !dbg !4490
  %checknull484 = icmp eq ptr %302, null, !dbg !4490
  %303 = call i1 @llvm.expect.i1(i1 %checknull484, i1 false), !dbg !4490
  br i1 %303, label %panic485, label %checkok486, !dbg !4490

checkok486:                                       ; preds = %switch.case482
  %304 = ptrtoint ptr %302 to i64, !dbg !4491
  %305 = urem i64 %304, 16, !dbg !4491
  %306 = icmp ne i64 %305, 0, !dbg !4491
  %307 = call i1 @llvm.expect.i1(i1 %306, i1 false), !dbg !4491
  br i1 %307, label %panic487, label %checkok494, !dbg !4491

checkok494:                                       ; preds = %checkok486
  %308 = load i128, ptr %302, align 16, !dbg !4491
  store i128 %308, ptr %i483, align 16, !dbg !4491
  %309 = load i128, ptr %i483, align 16, !dbg !4492
  %310 = load i64, ptr %max, align 8, !dbg !4493
  %zext495 = zext i64 %310 to i128, !dbg !4493
  %gt496 = icmp ugt i128 %309, %zext495, !dbg !4492
  br i1 %gt496, label %or.phi500, label %or.rhs497, !dbg !4492

or.rhs497:                                        ; preds = %checkok494
  %311 = load i128, ptr %i483, align 16, !dbg !4494
  %312 = load i64, ptr %min, align 8, !dbg !4495
  %zext498 = zext i64 %312 to i128, !dbg !4495
  %lt499 = icmp ult i128 %311, %zext498, !dbg !4494
  br label %or.phi500, !dbg !4494

or.phi500:                                        ; preds = %or.rhs497, %checkok494
  %val501 = phi i1 [ true, %checkok494 ], [ %lt499, %or.rhs497 ], !dbg !4494
  br i1 %val501, label %if.then502, label %if.exit503, !dbg !4494

if.then502:                                       ; preds = %or.phi500
  store i64 ptrtoint (ptr @std.core.types.VALUE_OUT_OF_RANGE to i64), ptr %error_var143, align 8, !dbg !4496
  br label %panic_block, !dbg !4496

if.exit503:                                       ; preds = %or.phi500
  %313 = load i128, ptr %i483, align 16, !dbg !4497
  %trunc504 = trunc i128 %313 to i64, !dbg !4497
  store i64 %trunc504, ptr %blockret198, align 8, !dbg !4497
  br label %expr_block.exit512, !dbg !4497

next_if505:                                       ; preds = %result_block481
  br label %switch.default, !dbg !4497

switch.default:                                   ; preds = %next_if505
  store %"char[]" { ptr @.str.191, i64 30 }, ptr %string506, align 8
  %lo507 = load ptr, ptr %string506, align 8, !dbg !4498
  %ptradd508 = getelementptr inbounds i8, ptr %string506, i64 8, !dbg !4498
  %hi509 = load i64, ptr %ptradd508, align 8, !dbg !4498
  store %"any[]" zeroinitializer, ptr %indirectarg510, align 8
  call void @std.core.builtin.panicf(ptr %lo507, i64 %hi509, ptr @.str.192, i64 12, ptr @.str.193, i64 17, i32 189, ptr byval(%"any[]") align 8 %indirectarg510), !dbg !4502
  unreachable, !dbg !4503

expr_block.exit512:                               ; preds = %if.exit503, %if.exit474, %if.exit446, %if.exit416, %if.exit386, %if.exit370, %if.exit332, %if.exit295, %if.exit255, %if.exit222
  br label %noerr_block516, !dbg !4503

panic_block:                                      ; preds = %if.then502, %if.then473, %if.then445, %if.then415, %if.then385, %if.then369, %if.then357, %if.then331, %if.then320, %if.then294, %if.then281, %if.then254, %if.then247, %if.then221
  %314 = insertvalue %any undef, ptr %error_var143, 0, !dbg !4503
  %315 = insertvalue %any %314, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !4503
  store %any %315, ptr %varargslots513, align 16
  %316 = insertvalue %"any[]" undef, ptr %varargslots513, 0
  %"$$temp514" = insertvalue %"any[]" %316, i64 1, 1
  store %"any[]" %"$$temp514", ptr %indirectarg515, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.93, i64 36, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 189, ptr byval(%"any[]") align 8 %indirectarg515) #5, !dbg !4340
  unreachable, !dbg !4340

noerr_block516:                                   ; preds = %expr_block.exit512
  %317 = load i64, ptr %blockret198, align 8, !dbg !4340
  store i64 %317, ptr %i, align 8, !dbg !4340
  %318 = load i64, ptr %i, align 8, !dbg !4504
  %ptradd517 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4505
  %319 = load i64, ptr %ptradd517, align 8, !dbg !4505
  %"introspect*518" = inttoptr i64 %319 to ptr, !dbg !4505
  %typeid.kind519 = load i8, ptr %"introspect*518", align 8, !dbg !4505
  %eq520 = icmp eq i8 %typeid.kind519, 8, !dbg !4505
  br i1 %eq520, label %check_type_ok522, label %check_next521, !dbg !4505

check_next521:                                    ; preds = %noerr_block516
  %320 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4505
  call void %320(ptr @.panic_msg.194, i64 51, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 190) #5, !dbg !4505
  unreachable, !dbg !4505

check_type_ok522:                                 ; preds = %noerr_block516
  %ptradd523 = getelementptr inbounds i8, ptr %"introspect*518", i64 40, !dbg !4505
  %namelen = load i64, ptr %ptradd523, align 8, !dbg !4505
  %ptradd524 = getelementptr inbounds i8, ptr %"introspect*518", i64 48, !dbg !4505
  %321 = insertvalue %"char[][]" undef, ptr %ptradd524, 0, !dbg !4505
  %322 = insertvalue %"char[][]" %321, i64 %namelen, 1, !dbg !4505
  %323 = extractvalue %"char[][]" %322, 1, !dbg !4505
  %lt525 = icmp ult i64 %318, %323, !dbg !4504
  br i1 %lt525, label %assert_ok530, label %assert_fail526, !dbg !4504

assert_fail526:                                   ; preds = %check_type_ok522
  %324 = insertvalue %any undef, ptr %i, 0, !dbg !4506
  %325 = insertvalue %any %324, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !4506
  store %any %325, ptr %varargslots527, align 16
  %326 = insertvalue %"any[]" undef, ptr %varargslots527, 0
  %"$$temp528" = insertvalue %"any[]" %326, i64 1, 1
  store %"any[]" %"$$temp528", ptr %indirectarg529, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.195, i64 49, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 190, ptr byval(%"any[]") align 8 %indirectarg529) #5, !dbg !4504
  unreachable, !dbg !4504

assert_ok530:                                     ; preds = %check_type_ok522
  %ptradd532 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4507
  %327 = load i64, ptr %ptradd532, align 8, !dbg !4507
  %"introspect*533" = inttoptr i64 %327 to ptr, !dbg !4507
  %typeid.kind534 = load i8, ptr %"introspect*533", align 8, !dbg !4507
  %eq535 = icmp eq i8 %typeid.kind534, 8, !dbg !4507
  br i1 %eq535, label %check_type_ok537, label %check_next536, !dbg !4507

check_next536:                                    ; preds = %assert_ok530
  %328 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4507
  call void %328(ptr @.panic_msg.194, i64 51, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 191) #5, !dbg !4507
  unreachable, !dbg !4507

check_type_ok537:                                 ; preds = %assert_ok530
  %ptradd538 = getelementptr inbounds i8, ptr %"introspect*533", i64 40, !dbg !4507
  %namelen539 = load i64, ptr %ptradd538, align 8, !dbg !4507
  %ptradd540 = getelementptr inbounds i8, ptr %"introspect*533", i64 48, !dbg !4507
  %329 = insertvalue %"char[][]" undef, ptr %ptradd540, 0, !dbg !4507
  %330 = insertvalue %"char[][]" %329, i64 %namelen539, 1, !dbg !4507
  %331 = extractvalue %"char[][]" %330, 1, !dbg !4507
  %332 = extractvalue %"char[][]" %330, 0, !dbg !4507
  %333 = load i64, ptr %i, align 8, !dbg !4508
  %ge = icmp uge i64 %333, %331, !dbg !4508
  %334 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4508
  br i1 %334, label %panic541, label %checkok548, !dbg !4508

checkok548:                                       ; preds = %check_type_ok537
  %ptroffset = getelementptr inbounds [16 x i8], ptr %332, i64 %333, !dbg !4508
  %335 = load ptr, ptr %self, align 8
  %lo550 = load ptr, ptr %ptroffset, align 8
  %ptradd551 = getelementptr inbounds i8, ptr %ptroffset, i64 8
  %hi552 = load i64, ptr %ptradd551, align 8
  %336 = call i64 @std.io.Formatter.out_substr(ptr %retparam549, ptr %335, ptr %lo550, i64 %hi552), !dbg !4509
  %not_err553 = icmp eq i64 %336, 0, !dbg !4509
  %337 = call i1 @llvm.expect.i1(i1 %not_err553, i1 true), !dbg !4509
  br i1 %337, label %after_check555, label %assign_optional554, !dbg !4509

assign_optional554:                               ; preds = %checkok548
  store i64 %336, ptr %reterr531, align 8, !dbg !4509
  br label %err_retblock556, !dbg !4509

after_check555:                                   ; preds = %checkok548
  %338 = load i64, ptr %retparam549, align 8, !dbg !4509
  store i64 %338, ptr %0, align 8, !dbg !4509
  ret i64 0, !dbg !4509

err_retblock556:                                  ; preds = %assign_optional554
  %339 = load i64, ptr %reterr531, align 8, !dbg !4509
  ret i64 %339, !dbg !4509

switch.case557:                                   ; preds = %switch.entry141
  %340 = load ptr, ptr %self, align 8
  %lo560 = load i64, ptr %arg, align 8
  %ptradd561 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi562 = load ptr, ptr %ptradd561, align 8
  %341 = call i64 @std.io.Formatter.out_unknown(ptr %retparam559, ptr %340, ptr @.str.196, i64 6, i64 %lo560, ptr %hi562), !dbg !4510
  %not_err563 = icmp eq i64 %341, 0, !dbg !4510
  %342 = call i1 @llvm.expect.i1(i1 %not_err563, i1 true), !dbg !4510
  br i1 %342, label %after_check565, label %assign_optional564, !dbg !4510

assign_optional564:                               ; preds = %switch.case557
  store i64 %341, ptr %reterr558, align 8, !dbg !4510
  br label %err_retblock566, !dbg !4510

after_check565:                                   ; preds = %switch.case557
  %343 = load i64, ptr %retparam559, align 8, !dbg !4510
  store i64 %343, ptr %0, align 8, !dbg !4510
  ret i64 0, !dbg !4510

err_retblock566:                                  ; preds = %assign_optional564
  %344 = load i64, ptr %reterr558, align 8, !dbg !4510
  ret i64 %344, !dbg !4510

switch.case567:                                   ; preds = %switch.entry141
  %345 = load ptr, ptr %self, align 8
  %lo570 = load i64, ptr %arg, align 8
  %ptradd571 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi572 = load ptr, ptr %ptradd571, align 8
  %346 = call i64 @std.io.Formatter.out_unknown(ptr %retparam569, ptr %345, ptr @.str.197, i64 5, i64 %lo570, ptr %hi572), !dbg !4512
  %not_err573 = icmp eq i64 %346, 0, !dbg !4512
  %347 = call i1 @llvm.expect.i1(i1 %not_err573, i1 true), !dbg !4512
  br i1 %347, label %after_check575, label %assign_optional574, !dbg !4512

assign_optional574:                               ; preds = %switch.case567
  store i64 %346, ptr %reterr568, align 8, !dbg !4512
  br label %err_retblock576, !dbg !4512

after_check575:                                   ; preds = %switch.case567
  %348 = load i64, ptr %retparam569, align 8, !dbg !4512
  store i64 %348, ptr %0, align 8, !dbg !4512
  ret i64 0, !dbg !4512

err_retblock576:                                  ; preds = %assign_optional574
  %349 = load i64, ptr %reterr568, align 8, !dbg !4512
  ret i64 %349, !dbg !4512

switch.case577:                                   ; preds = %switch.entry141
  %350 = load ptr, ptr %self, align 8
  %lo580 = load i64, ptr %arg, align 8
  %ptradd581 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi582 = load ptr, ptr %ptradd581, align 8
  %351 = call i64 @std.io.Formatter.out_unknown(ptr %retparam579, ptr %350, ptr @.str.198, i64 9, i64 %lo580, ptr %hi582), !dbg !4514
  %not_err583 = icmp eq i64 %351, 0, !dbg !4514
  %352 = call i1 @llvm.expect.i1(i1 %not_err583, i1 true), !dbg !4514
  br i1 %352, label %after_check585, label %assign_optional584, !dbg !4514

assign_optional584:                               ; preds = %switch.case577
  store i64 %351, ptr %reterr578, align 8, !dbg !4514
  br label %err_retblock586, !dbg !4514

after_check585:                                   ; preds = %switch.case577
  %353 = load i64, ptr %retparam579, align 8, !dbg !4514
  store i64 %353, ptr %0, align 8, !dbg !4514
  ret i64 0, !dbg !4514

err_retblock586:                                  ; preds = %assign_optional584
  %354 = load i64, ptr %reterr578, align 8, !dbg !4514
  ret i64 %354, !dbg !4514

switch.case587:                                   ; preds = %switch.entry141
    #dbg_declare(ptr %flags588, !4516, !DIExpression(), !4518)
  %355 = load ptr, ptr %self, align 8, !dbg !4519
  %ptradd589 = getelementptr inbounds i8, ptr %355, i64 16, !dbg !4519
  %356 = load i32, ptr %ptradd589, align 8, !dbg !4519
  store i32 %356, ptr %flags588, align 4, !dbg !4519
    #dbg_declare(ptr %width590, !4520, !DIExpression(), !4521)
  %357 = load ptr, ptr %self, align 8, !dbg !4522
  %ptradd591 = getelementptr inbounds i8, ptr %357, i64 16, !dbg !4522
  %ptradd592 = getelementptr inbounds i8, ptr %ptradd591, i64 4, !dbg !4522
  %358 = load i32, ptr %ptradd592, align 4, !dbg !4522
  store i32 %358, ptr %width590, align 4, !dbg !4522
  %359 = load ptr, ptr %self, align 8, !dbg !4523
  %ptradd593 = getelementptr inbounds i8, ptr %359, i64 16, !dbg !4523
  %ptradd594 = getelementptr inbounds i8, ptr %ptradd593, i64 4, !dbg !4523
  store i32 0, ptr %ptradd594, align 4, !dbg !4524
  %360 = load ptr, ptr %self, align 8
  %361 = call i64 @std.io.Formatter.out_substr(ptr %retparam597, ptr %360, ptr @.str.199, i64 2), !dbg !4525
  %not_err598 = icmp eq i64 %361, 0, !dbg !4525
  %362 = call i1 @llvm.expect.i1(i1 %not_err598, i1 true), !dbg !4525
  br i1 %362, label %after_check600, label %assign_optional599, !dbg !4525

assign_optional599:                               ; preds = %switch.case587
  store i64 %361, ptr %error_var596, align 8, !dbg !4525
  br label %guard_block601, !dbg !4525

after_check600:                                   ; preds = %switch.case587
  br label %noerr_block605, !dbg !4525

guard_block601:                                   ; preds = %assign_optional599
  %363 = load ptr, ptr %self, align 8, !dbg !4526
  %ptradd602 = getelementptr inbounds i8, ptr %363, i64 16, !dbg !4526
  %364 = load i32, ptr %flags588, align 4, !dbg !4528
  store i32 %364, ptr %ptradd602, align 8, !dbg !4528
  %365 = load ptr, ptr %self, align 8, !dbg !4529
  %ptradd603 = getelementptr inbounds i8, ptr %365, i64 16, !dbg !4529
  %ptradd604 = getelementptr inbounds i8, ptr %ptradd603, i64 4, !dbg !4529
  %366 = load i32, ptr %width590, align 4, !dbg !4530
  store i32 %366, ptr %ptradd604, align 4, !dbg !4530
  %367 = load i64, ptr %error_var596, align 8, !dbg !4530
  ret i64 %367, !dbg !4530

noerr_block605:                                   ; preds = %after_check600
  %368 = load i64, ptr %retparam597, align 8, !dbg !4530
  %369 = load ptr, ptr %self, align 8
  %lo607 = load i64, ptr %arg, align 8
  %ptradd608 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi609 = load ptr, ptr %ptradd608, align 8
  %370 = call i64 @std.io.Formatter.ntoa_any(ptr %retparam606, ptr %369, i64 %lo607, ptr %hi609, i32 16), !dbg !4531
  %not_err610 = icmp eq i64 %370, 0, !dbg !4531
  %371 = call i1 @llvm.expect.i1(i1 %not_err610, i1 true), !dbg !4531
  br i1 %371, label %after_check612, label %assign_optional611, !dbg !4531

assign_optional611:                               ; preds = %noerr_block605
  store i64 %370, ptr %reterr595, align 8, !dbg !4531
  br label %err_retblock616, !dbg !4531

after_check612:                                   ; preds = %noerr_block605
  %372 = load i64, ptr %retparam606, align 8, !dbg !4531
  %add = add i64 %368, %372, !dbg !4525
  %373 = load ptr, ptr %self, align 8, !dbg !4532
  %ptradd613 = getelementptr inbounds i8, ptr %373, i64 16, !dbg !4532
  %374 = load i32, ptr %flags588, align 4, !dbg !4534
  store i32 %374, ptr %ptradd613, align 8, !dbg !4534
  %375 = load ptr, ptr %self, align 8, !dbg !4535
  %ptradd614 = getelementptr inbounds i8, ptr %375, i64 16, !dbg !4535
  %ptradd615 = getelementptr inbounds i8, ptr %ptradd614, i64 4, !dbg !4535
  %376 = load i32, ptr %width590, align 4, !dbg !4536
  store i32 %376, ptr %ptradd615, align 4, !dbg !4536
  store i64 %add, ptr %0, align 8, !dbg !4536
  ret i64 0, !dbg !4536

err_retblock616:                                  ; preds = %assign_optional611
  %377 = load ptr, ptr %self, align 8, !dbg !4537
  %ptradd617 = getelementptr inbounds i8, ptr %377, i64 16, !dbg !4537
  %378 = load i32, ptr %flags588, align 4, !dbg !4539
  store i32 %378, ptr %ptradd617, align 8, !dbg !4539
  %379 = load ptr, ptr %self, align 8, !dbg !4540
  %ptradd618 = getelementptr inbounds i8, ptr %379, i64 16, !dbg !4540
  %ptradd619 = getelementptr inbounds i8, ptr %ptradd618, i64 4, !dbg !4540
  %380 = load i32, ptr %width590, align 4, !dbg !4541
  store i32 %380, ptr %ptradd619, align 4, !dbg !4541
  %381 = load i64, ptr %reterr595, align 8, !dbg !4541
  ret i64 %381, !dbg !4541

switch.case620:                                   ; preds = %switch.entry141
  %ptradd621 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4542
  %382 = load i64, ptr %ptradd621, align 8, !dbg !4542
  %eq622 = icmp eq i64 %382, ptrtoint (ptr @"$ct.String" to i64), !dbg !4542
  br i1 %eq622, label %if.then623, label %if.exit644, !dbg !4542

if.then623:                                       ; preds = %switch.case620
  %383 = load ptr, ptr %arg, align 8, !dbg !4544
  %checknull625 = icmp eq ptr %383, null, !dbg !4544
  %384 = call i1 @llvm.expect.i1(i1 %checknull625, i1 false), !dbg !4544
  br i1 %384, label %panic626, label %checkok627, !dbg !4544

checkok627:                                       ; preds = %if.then623
  %385 = ptrtoint ptr %383 to i64, !dbg !4544
  %386 = urem i64 %385, 8, !dbg !4544
  %387 = icmp ne i64 %386, 0, !dbg !4544
  %388 = call i1 @llvm.expect.i1(i1 %387, i1 false), !dbg !4544
  br i1 %388, label %panic628, label %checkok635, !dbg !4544

checkok635:                                       ; preds = %checkok627
  %389 = load ptr, ptr %self, align 8
  %lo637 = load ptr, ptr %383, align 8
  %ptradd638 = getelementptr inbounds i8, ptr %383, i64 8
  %hi639 = load i64, ptr %ptradd638, align 8
  %390 = call i64 @std.io.Formatter.out_substr(ptr %retparam636, ptr %389, ptr %lo637, i64 %hi639), !dbg !4546
  %not_err640 = icmp eq i64 %390, 0, !dbg !4546
  %391 = call i1 @llvm.expect.i1(i1 %not_err640, i1 true), !dbg !4546
  br i1 %391, label %after_check642, label %assign_optional641, !dbg !4546

assign_optional641:                               ; preds = %checkok635
  store i64 %390, ptr %reterr624, align 8, !dbg !4546
  br label %err_retblock643, !dbg !4546

after_check642:                                   ; preds = %checkok635
  %392 = load i64, ptr %retparam636, align 8, !dbg !4546
  store i64 %392, ptr %0, align 8, !dbg !4546
  ret i64 0, !dbg !4546

err_retblock643:                                  ; preds = %assign_optional641
  %393 = load i64, ptr %reterr624, align 8, !dbg !4546
  ret i64 %393, !dbg !4546

if.exit644:                                       ; preds = %switch.case620
  %ptradd645 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4547
  %394 = load i64, ptr %ptradd645, align 8, !dbg !4547
  %eq646 = icmp eq i64 %394, ptrtoint (ptr @"$ct.std.core.string.ZString" to i64), !dbg !4547
  br i1 %eq646, label %if.then647, label %if.exit679, !dbg !4547

if.then647:                                       ; preds = %if.exit644
  %395 = load ptr, ptr %arg, align 8, !dbg !4548
  %checknull649 = icmp eq ptr %395, null, !dbg !4548
  %396 = call i1 @llvm.expect.i1(i1 %checknull649, i1 false), !dbg !4548
  br i1 %396, label %panic650, label %checkok651, !dbg !4548

checkok651:                                       ; preds = %if.then647
  %397 = ptrtoint ptr %395 to i64, !dbg !4548
  %398 = urem i64 %397, 8, !dbg !4548
  %399 = icmp ne i64 %398, 0, !dbg !4548
  %400 = call i1 @llvm.expect.i1(i1 %399, i1 false), !dbg !4548
  br i1 %400, label %panic652, label %checkok659, !dbg !4548

checkok659:                                       ; preds = %checkok651
  %401 = load ptr, ptr %395, align 8, !dbg !4548
  %i2b660 = icmp ne ptr %401, null, !dbg !4548
  br i1 %i2b660, label %cond.lhs, label %cond.rhs, !dbg !4548

cond.lhs:                                         ; preds = %checkok659
  %402 = load ptr, ptr %arg, align 8, !dbg !4550
  %checknull661 = icmp eq ptr %402, null, !dbg !4550
  %403 = call i1 @llvm.expect.i1(i1 %checknull661, i1 false), !dbg !4550
  br i1 %403, label %panic662, label %checkok663, !dbg !4550

checkok663:                                       ; preds = %cond.lhs
  %404 = ptrtoint ptr %402 to i64, !dbg !4550
  %405 = urem i64 %404, 8, !dbg !4550
  %406 = icmp ne i64 %405, 0, !dbg !4550
  %407 = call i1 @llvm.expect.i1(i1 %406, i1 false), !dbg !4550
  br i1 %407, label %panic664, label %checkok671, !dbg !4550

checkok671:                                       ; preds = %checkok663
  %408 = load ptr, ptr %402, align 8, !dbg !4550
  %409 = call { ptr, i64 } @std.core.string.ZString.str_view(ptr %408), !dbg !4550
  store { ptr, i64 } %409, ptr %result672, align 8
  %410 = load %"char[]", ptr %result672, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %checkok659
  br label %cond.phi, !dbg !4551

cond.phi:                                         ; preds = %cond.rhs, %checkok671
  %val673 = phi %"char[]" [ %410, %checkok671 ], [ { ptr @.str.200, i64 6 }, %cond.rhs ], !dbg !4551
  %411 = load ptr, ptr %self, align 8
  %412 = extractvalue %"char[]" %val673, 0
  %413 = extractvalue %"char[]" %val673, 1
  %414 = call i64 @std.io.Formatter.out_substr(ptr %retparam674, ptr %411, ptr %412, i64 %413), !dbg !4552
  %not_err675 = icmp eq i64 %414, 0, !dbg !4552
  %415 = call i1 @llvm.expect.i1(i1 %not_err675, i1 true), !dbg !4552
  br i1 %415, label %after_check677, label %assign_optional676, !dbg !4552

assign_optional676:                               ; preds = %cond.phi
  store i64 %414, ptr %reterr648, align 8, !dbg !4552
  br label %err_retblock678, !dbg !4552

after_check677:                                   ; preds = %cond.phi
  %416 = load i64, ptr %retparam674, align 8, !dbg !4552
  store i64 %416, ptr %0, align 8, !dbg !4552
  ret i64 0, !dbg !4552

err_retblock678:                                  ; preds = %assign_optional676
  %417 = load i64, ptr %reterr648, align 8, !dbg !4552
  ret i64 %417, !dbg !4552

if.exit679:                                       ; preds = %if.exit644
  %ptradd680 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4553
  %418 = load i64, ptr %ptradd680, align 8, !dbg !4553
  %eq681 = icmp eq i64 %418, ptrtoint (ptr @"$ct.std.core.dstring.DString" to i64), !dbg !4553
  br i1 %eq681, label %if.then682, label %if.exit717, !dbg !4553

if.then682:                                       ; preds = %if.exit679
  %419 = load ptr, ptr %arg, align 8, !dbg !4554
  %checknull684 = icmp eq ptr %419, null, !dbg !4554
  %420 = call i1 @llvm.expect.i1(i1 %checknull684, i1 false), !dbg !4554
  br i1 %420, label %panic685, label %checkok686, !dbg !4554

checkok686:                                       ; preds = %if.then682
  %421 = ptrtoint ptr %419 to i64, !dbg !4554
  %422 = urem i64 %421, 8, !dbg !4554
  %423 = icmp ne i64 %422, 0, !dbg !4554
  %424 = call i1 @llvm.expect.i1(i1 %423, i1 false), !dbg !4554
  br i1 %424, label %panic687, label %checkok694, !dbg !4554

checkok694:                                       ; preds = %checkok686
  %425 = load ptr, ptr %419, align 8, !dbg !4554
  %i2b695 = icmp ne ptr %425, null, !dbg !4554
  br i1 %i2b695, label %cond.lhs696, label %cond.rhs709, !dbg !4554

cond.lhs696:                                      ; preds = %checkok694
  %426 = load ptr, ptr %arg, align 8, !dbg !4556
  %checknull697 = icmp eq ptr %426, null, !dbg !4556
  %427 = call i1 @llvm.expect.i1(i1 %checknull697, i1 false), !dbg !4556
  br i1 %427, label %panic698, label %checkok699, !dbg !4556

checkok699:                                       ; preds = %cond.lhs696
  %428 = ptrtoint ptr %426 to i64, !dbg !4556
  %429 = urem i64 %428, 8, !dbg !4556
  %430 = icmp ne i64 %429, 0, !dbg !4556
  %431 = call i1 @llvm.expect.i1(i1 %430, i1 false), !dbg !4556
  br i1 %431, label %panic700, label %checkok707, !dbg !4556

checkok707:                                       ; preds = %checkok699
  %432 = load ptr, ptr %426, align 8, !dbg !4556
  %433 = call { ptr, i64 } @std.core.dstring.DString.str_view(ptr %432), !dbg !4556
  store { ptr, i64 } %433, ptr %result708, align 8
  %434 = load %"char[]", ptr %result708, align 8
  br label %cond.phi710

cond.rhs709:                                      ; preds = %checkok694
  br label %cond.phi710, !dbg !4557

cond.phi710:                                      ; preds = %cond.rhs709, %checkok707
  %val711 = phi %"char[]" [ %434, %checkok707 ], [ { ptr @.str.201, i64 6 }, %cond.rhs709 ], !dbg !4557
  %435 = load ptr, ptr %self, align 8
  %436 = extractvalue %"char[]" %val711, 0
  %437 = extractvalue %"char[]" %val711, 1
  %438 = call i64 @std.io.Formatter.out_substr(ptr %retparam712, ptr %435, ptr %436, i64 %437), !dbg !4558
  %not_err713 = icmp eq i64 %438, 0, !dbg !4558
  %439 = call i1 @llvm.expect.i1(i1 %not_err713, i1 true), !dbg !4558
  br i1 %439, label %after_check715, label %assign_optional714, !dbg !4558

assign_optional714:                               ; preds = %cond.phi710
  store i64 %438, ptr %reterr683, align 8, !dbg !4558
  br label %err_retblock716, !dbg !4558

after_check715:                                   ; preds = %cond.phi710
  %440 = load i64, ptr %retparam712, align 8, !dbg !4558
  store i64 %440, ptr %0, align 8, !dbg !4558
  ret i64 0, !dbg !4558

err_retblock716:                                  ; preds = %assign_optional714
  %441 = load i64, ptr %reterr683, align 8, !dbg !4558
  ret i64 %441, !dbg !4558

if.exit717:                                       ; preds = %if.exit679
  store ptr %arg, ptr %self719, align 8
  %442 = load ptr, ptr %self719, align 8, !dbg !4559
  %neq721 = icmp ne ptr %442, null, !dbg !4559
  br i1 %neq721, label %assert_ok723, label %assert_fail722, !dbg !4559

assert_fail722:                                   ; preds = %if.exit717
  %443 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4559
  call void %443(ptr @.panic_msg.48, i64 32, ptr @.file.15, i64 10, ptr @.func.180, i64 7, i32 239) #5, !dbg !4559
  unreachable, !dbg !4559

assert_ok723:                                     ; preds = %if.exit717
  %444 = load ptr, ptr %self719, align 8, !dbg !4563
  %checknull724 = icmp eq ptr %444, null, !dbg !4563
  %445 = call i1 @llvm.expect.i1(i1 %checknull724, i1 false), !dbg !4563
  br i1 %445, label %panic725, label %checkok726, !dbg !4563

checkok726:                                       ; preds = %assert_ok723
  %446 = ptrtoint ptr %444 to i64, !dbg !4563
  %447 = urem i64 %446, 8, !dbg !4563
  %448 = icmp ne i64 %447, 0, !dbg !4563
  %449 = call i1 @llvm.expect.i1(i1 %448, i1 false), !dbg !4563
  br i1 %449, label %panic727, label %checkok734, !dbg !4563

checkok734:                                       ; preds = %checkok726
  %450 = load ptr, ptr %444, align 8, !dbg !4563
  %451 = load ptr, ptr %self719, align 8, !dbg !4564
  %checknull735 = icmp eq ptr %451, null, !dbg !4564
  %452 = call i1 @llvm.expect.i1(i1 %checknull735, i1 false), !dbg !4564
  br i1 %452, label %panic736, label %checkok737, !dbg !4564

checkok737:                                       ; preds = %checkok734
  %453 = ptrtoint ptr %451 to i64, !dbg !4564
  %454 = urem i64 %453, 8, !dbg !4564
  %455 = icmp ne i64 %454, 0, !dbg !4564
  %456 = call i1 @llvm.expect.i1(i1 %455, i1 false), !dbg !4564
  br i1 %456, label %panic738, label %checkok745, !dbg !4564

checkok745:                                       ; preds = %checkok737
  %ptradd746 = getelementptr inbounds i8, ptr %451, i64 8, !dbg !4564
  %457 = load i64, ptr %ptradd746, align 8, !dbg !4564
  %"introspect*747" = inttoptr i64 %457 to ptr, !dbg !4564
  %typeid.kind748 = load i8, ptr %"introspect*747", align 8, !dbg !4564
  %eq749 = icmp eq i8 %typeid.kind748, 14, !dbg !4564
  br i1 %eq749, label %check_type_ok765, label %check_next750, !dbg !4564

check_next750:                                    ; preds = %checkok745
  %eq751 = icmp eq i8 %typeid.kind748, 18, !dbg !4564
  br i1 %eq751, label %check_type_ok765, label %check_next752, !dbg !4564

check_next752:                                    ; preds = %check_next750
  %eq753 = icmp eq i8 %typeid.kind748, 16, !dbg !4564
  br i1 %eq753, label %check_type_ok765, label %check_next754, !dbg !4564

check_next754:                                    ; preds = %check_next752
  %eq755 = icmp eq i8 %typeid.kind748, 8, !dbg !4564
  br i1 %eq755, label %check_type_ok765, label %check_next756, !dbg !4564

check_next756:                                    ; preds = %check_next754
  %eq757 = icmp eq i8 %typeid.kind748, 15, !dbg !4564
  br i1 %eq757, label %check_type_ok765, label %check_next758, !dbg !4564

check_next758:                                    ; preds = %check_next756
  %eq759 = icmp eq i8 %typeid.kind748, 17, !dbg !4564
  br i1 %eq759, label %check_type_ok765, label %check_next760, !dbg !4564

check_next760:                                    ; preds = %check_next758
  %eq761 = icmp eq i8 %typeid.kind748, 13, !dbg !4564
  br i1 %eq761, label %check_type_ok765, label %check_next762, !dbg !4564

check_next762:                                    ; preds = %check_next760
  %eq763 = icmp eq i8 %typeid.kind748, 11, !dbg !4564
  br i1 %eq763, label %check_type_ok765, label %check_next764, !dbg !4564

check_next764:                                    ; preds = %check_next762
  %458 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4564
  call void %458(ptr @.panic_msg.49, i64 49, ptr @.file.15, i64 10, ptr @.func.180, i64 7, i32 241) #5, !dbg !4564
  unreachable, !dbg !4564

check_type_ok765:                                 ; preds = %check_next762, %check_next760, %check_next758, %check_next756, %check_next754, %check_next752, %check_next750, %checkok745
  %ptradd766 = getelementptr inbounds i8, ptr %"introspect*747", i64 32, !dbg !4564
  %typeid.inner767 = load i64, ptr %ptradd766, align 8, !dbg !4564
  %459 = insertvalue %any undef, ptr %450, 0, !dbg !4564
  %460 = insertvalue %any %459, i64 %typeid.inner767, 1, !dbg !4564
  %461 = load ptr, ptr %self, align 8
  store %any %460, ptr %taddr769, align 8
  %lo770 = load i64, ptr %taddr769, align 8
  %ptradd771 = getelementptr inbounds i8, ptr %taddr769, i64 8
  %hi772 = load ptr, ptr %ptradd771, align 8
  %462 = call i64 @std.io.Formatter.out_str(ptr %retparam768, ptr %461, i64 %lo770, ptr %hi772), !dbg !4565
  %not_err773 = icmp eq i64 %462, 0, !dbg !4565
  %463 = call i1 @llvm.expect.i1(i1 %not_err773, i1 true), !dbg !4565
  br i1 %463, label %after_check775, label %assign_optional774, !dbg !4565

assign_optional774:                               ; preds = %check_type_ok765
  store i64 %462, ptr %reterr718, align 8, !dbg !4565
  br label %err_retblock776, !dbg !4565

after_check775:                                   ; preds = %check_type_ok765
  %464 = load i64, ptr %retparam768, align 8, !dbg !4565
  store i64 %464, ptr %0, align 8, !dbg !4565
  ret i64 0, !dbg !4565

err_retblock776:                                  ; preds = %assign_optional774
  %465 = load i64, ptr %reterr718, align 8, !dbg !4565
  ret i64 %465, !dbg !4565

switch.case777:                                   ; preds = %switch.entry141
    #dbg_declare(ptr %inner, !4566, !DIExpression(), !4568)
  %ptradd778 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4569
  %466 = load i64, ptr %ptradd778, align 8, !dbg !4569
  %"introspect*779" = inttoptr i64 %466 to ptr, !dbg !4569
  %typeid.kind780 = load i8, ptr %"introspect*779", align 8, !dbg !4569
  %eq781 = icmp eq i8 %typeid.kind780, 14, !dbg !4569
  br i1 %eq781, label %check_type_ok797, label %check_next782, !dbg !4569

check_next782:                                    ; preds = %switch.case777
  %eq783 = icmp eq i8 %typeid.kind780, 18, !dbg !4569
  br i1 %eq783, label %check_type_ok797, label %check_next784, !dbg !4569

check_next784:                                    ; preds = %check_next782
  %eq785 = icmp eq i8 %typeid.kind780, 16, !dbg !4569
  br i1 %eq785, label %check_type_ok797, label %check_next786, !dbg !4569

check_next786:                                    ; preds = %check_next784
  %eq787 = icmp eq i8 %typeid.kind780, 8, !dbg !4569
  br i1 %eq787, label %check_type_ok797, label %check_next788, !dbg !4569

check_next788:                                    ; preds = %check_next786
  %eq789 = icmp eq i8 %typeid.kind780, 15, !dbg !4569
  br i1 %eq789, label %check_type_ok797, label %check_next790, !dbg !4569

check_next790:                                    ; preds = %check_next788
  %eq791 = icmp eq i8 %typeid.kind780, 17, !dbg !4569
  br i1 %eq791, label %check_type_ok797, label %check_next792, !dbg !4569

check_next792:                                    ; preds = %check_next790
  %eq793 = icmp eq i8 %typeid.kind780, 13, !dbg !4569
  br i1 %eq793, label %check_type_ok797, label %check_next794, !dbg !4569

check_next794:                                    ; preds = %check_next792
  %eq795 = icmp eq i8 %typeid.kind780, 11, !dbg !4569
  br i1 %eq795, label %check_type_ok797, label %check_next796, !dbg !4569

check_next796:                                    ; preds = %check_next794
  %467 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4569
  call void %467(ptr @.panic_msg.49, i64 49, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 223) #5, !dbg !4569
  unreachable, !dbg !4569

check_type_ok797:                                 ; preds = %check_next794, %check_next792, %check_next790, %check_next788, %check_next786, %check_next784, %check_next782, %switch.case777
  %ptradd798 = getelementptr inbounds i8, ptr %"introspect*779", i64 32, !dbg !4569
  %typeid.inner799 = load i64, ptr %ptradd798, align 8, !dbg !4569
  store i64 %typeid.inner799, ptr %inner, align 8, !dbg !4569
    #dbg_declare(ptr %pointer, !4570, !DIExpression(), !4572)
  %468 = load ptr, ptr %arg, align 8, !dbg !4573
  store ptr %468, ptr %pointer, align 8, !dbg !4573
  %ptradd800 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4574
  %469 = load i64, ptr %ptradd800, align 8, !dbg !4574
  %"introspect*801" = inttoptr i64 %469 to ptr, !dbg !4574
  %typeid.kind802 = load i8, ptr %"introspect*801", align 8, !dbg !4574
  %eq803 = icmp eq i8 %typeid.kind802, 14, !dbg !4574
  br i1 %eq803, label %check_type_ok819, label %check_next804, !dbg !4574

check_next804:                                    ; preds = %check_type_ok797
  %eq805 = icmp eq i8 %typeid.kind802, 18, !dbg !4574
  br i1 %eq805, label %check_type_ok819, label %check_next806, !dbg !4574

check_next806:                                    ; preds = %check_next804
  %eq807 = icmp eq i8 %typeid.kind802, 16, !dbg !4574
  br i1 %eq807, label %check_type_ok819, label %check_next808, !dbg !4574

check_next808:                                    ; preds = %check_next806
  %eq809 = icmp eq i8 %typeid.kind802, 8, !dbg !4574
  br i1 %eq809, label %check_type_ok819, label %check_next810, !dbg !4574

check_next810:                                    ; preds = %check_next808
  %eq811 = icmp eq i8 %typeid.kind802, 15, !dbg !4574
  br i1 %eq811, label %check_type_ok819, label %check_next812, !dbg !4574

check_next812:                                    ; preds = %check_next810
  %eq813 = icmp eq i8 %typeid.kind802, 17, !dbg !4574
  br i1 %eq813, label %check_type_ok819, label %check_next814, !dbg !4574

check_next814:                                    ; preds = %check_next812
  %eq815 = icmp eq i8 %typeid.kind802, 13, !dbg !4574
  br i1 %eq815, label %check_type_ok819, label %check_next816, !dbg !4574

check_next816:                                    ; preds = %check_next814
  %eq817 = icmp eq i8 %typeid.kind802, 11, !dbg !4574
  br i1 %eq817, label %check_type_ok819, label %check_next818, !dbg !4574

check_next818:                                    ; preds = %check_next816
  %470 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4574
  call void %470(ptr @.panic_msg.49, i64 49, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 225) #5, !dbg !4574
  unreachable, !dbg !4574

check_type_ok819:                                 ; preds = %check_next816, %check_next814, %check_next812, %check_next810, %check_next808, %check_next806, %check_next804, %check_type_ok797
  %ptradd820 = getelementptr inbounds i8, ptr %"introspect*801", i64 32, !dbg !4574
  %typeid.inner821 = load i64, ptr %ptradd820, align 8, !dbg !4574
  %neq822 = icmp ne i64 %typeid.inner821, ptrtoint (ptr @"$ct.void" to i64), !dbg !4574
  br i1 %neq822, label %if.then823, label %if.exit871, !dbg !4574

if.then823:                                       ; preds = %check_type_ok819
    #dbg_declare(ptr %deref, !4575, !DIExpression(), !4577)
  %471 = load ptr, ptr %pointer, align 8, !dbg !4578
  %checknull824 = icmp eq ptr %471, null, !dbg !4578
  %472 = call i1 @llvm.expect.i1(i1 %checknull824, i1 false), !dbg !4578
  br i1 %472, label %panic825, label %checkok826, !dbg !4578

checkok826:                                       ; preds = %if.then823
  %473 = ptrtoint ptr %471 to i64, !dbg !4578
  %474 = urem i64 %473, 8, !dbg !4578
  %475 = icmp ne i64 %474, 0, !dbg !4578
  %476 = call i1 @llvm.expect.i1(i1 %475, i1 false), !dbg !4578
  br i1 %476, label %panic827, label %checkok834, !dbg !4578

checkok834:                                       ; preds = %checkok826
  %477 = load ptr, ptr %471, align 8
  store ptr %477, ptr %ptr, align 8
  %478 = load i64, ptr %inner, align 8
  store i64 %478, ptr %type, align 8
  %479 = load ptr, ptr %ptr, align 8, !dbg !4579
  %480 = load i64, ptr %type, align 8, !dbg !4582
  %481 = insertvalue %any undef, ptr %479, 0, !dbg !4582
  %482 = insertvalue %any %481, i64 %480, 1, !dbg !4582
  store %any %482, ptr %deref, align 8, !dbg !4582
  %483 = load %any, ptr %deref, align 8, !dbg !4583
  %484 = load ptr, ptr %self, align 8
  store %any %483, ptr %taddr836, align 8
  %lo837 = load i64, ptr %taddr836, align 8
  %ptradd838 = getelementptr inbounds i8, ptr %taddr836, i64 8
  %hi839 = load ptr, ptr %ptradd838, align 8
  %485 = call i64 @std.io.Formatter.print_with_function(ptr %retparam835, ptr %484, i64 %lo837, ptr %hi839), !dbg !4584
  %not_err840 = icmp eq i64 %485, 0, !dbg !4584
  %486 = call i1 @llvm.expect.i1(i1 %not_err840, i1 true), !dbg !4584
  br i1 %486, label %after_check842, label %assign_optional841, !dbg !4584

assign_optional841:                               ; preds = %checkok834
  store i64 %485, ptr %n.f, align 8, !dbg !4584
  br label %after_assign843, !dbg !4584

after_check842:                                   ; preds = %checkok834
  %487 = load i64, ptr %retparam835, align 8, !dbg !4584
  store i64 %487, ptr %n, align 8, !dbg !4584
  store i64 0, ptr %n.f, align 8, !dbg !4584
  br label %after_assign843, !dbg !4584

after_assign843:                                  ; preds = %after_check842, %assign_optional841
  %load.err844 = load i64, ptr %n.f, align 8, !dbg !4585
  %result845 = icmp eq i64 %load.err844, 0, !dbg !4585
  br i1 %result845, label %if.then846, label %if.exit848, !dbg !4585

if.then846:                                       ; preds = %after_assign843
  %488 = load i64, ptr %n, align 8, !dbg !4586
  store i64 %488, ptr %0, align 8, !dbg !4586
  ret i64 0, !dbg !4586

if.exit848:                                       ; preds = %after_assign843
    #dbg_declare(ptr %f850, !4587, !DIExpression(), !4589)
  br label %testblock851, !dbg !4589

testblock851:                                     ; preds = %if.exit848
  %optval852 = load i64, ptr %n.f, align 8, !dbg !4591
  %not_err853 = icmp eq i64 %optval852, 0, !dbg !4591
  %489 = call i1 @llvm.expect.i1(i1 %not_err853, i1 true), !dbg !4591
  br i1 %489, label %after_check855, label %assign_optional854, !dbg !4591

assign_optional854:                               ; preds = %testblock851
  store i64 %optval852, ptr %f850, align 8, !dbg !4591
  br label %end_block856, !dbg !4591

after_check855:                                   ; preds = %testblock851
  store i64 0, ptr %f850, align 8, !dbg !4591
  br label %end_block856, !dbg !4591

end_block856:                                     ; preds = %after_check855, %assign_optional854
  %490 = load i64, ptr %f850, align 8, !dbg !4591
  %i2b857 = icmp ne i64 %490, 0, !dbg !4591
  br i1 %i2b857, label %if.then858, label %if.exit859, !dbg !4591

if.then858:                                       ; preds = %end_block856
  %491 = load i64, ptr %f850, align 8, !dbg !4592
  store i64 %491, ptr %blockret849, align 8, !dbg !4592
  br label %expr_block.exit860, !dbg !4592

if.exit859:                                       ; preds = %end_block856
  store i64 0, ptr %blockret849, align 8, !dbg !4593
  br label %expr_block.exit860, !dbg !4593

expr_block.exit860:                               ; preds = %if.exit859, %if.then858
  %492 = load i64, ptr %blockret849, align 8, !dbg !4593
  %neq861 = icmp ne i64 %492, ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !4590
  br i1 %neq861, label %if.then862, label %if.exit870, !dbg !4590

if.then862:                                       ; preds = %expr_block.exit860
  %optval864 = load i64, ptr %n.f, align 8, !dbg !4594
  %not_err865 = icmp eq i64 %optval864, 0, !dbg !4594
  %493 = call i1 @llvm.expect.i1(i1 %not_err865, i1 true), !dbg !4594
  br i1 %493, label %after_check867, label %assign_optional866, !dbg !4594

assign_optional866:                               ; preds = %if.then862
  store i64 %optval864, ptr %error_var863, align 8, !dbg !4594
  br label %guard_block868, !dbg !4594

after_check867:                                   ; preds = %if.then862
  br label %noerr_block869, !dbg !4594

guard_block868:                                   ; preds = %assign_optional866
  %494 = load i64, ptr %error_var863, align 8, !dbg !4594
  ret i64 %494, !dbg !4594

noerr_block869:                                   ; preds = %after_check867
  br label %if.exit870, !dbg !4594

if.exit870:                                       ; preds = %noerr_block869, %expr_block.exit860
  br label %if.exit871, !dbg !4594

if.exit871:                                       ; preds = %if.exit870, %check_type_ok819
    #dbg_declare(ptr %flags872, !4595, !DIExpression(), !4596)
  %495 = load ptr, ptr %self, align 8, !dbg !4597
  %ptradd873 = getelementptr inbounds i8, ptr %495, i64 16, !dbg !4597
  %496 = load i32, ptr %ptradd873, align 8, !dbg !4597
  store i32 %496, ptr %flags872, align 4, !dbg !4597
    #dbg_declare(ptr %width874, !4598, !DIExpression(), !4599)
  %497 = load ptr, ptr %self, align 8, !dbg !4600
  %ptradd875 = getelementptr inbounds i8, ptr %497, i64 16, !dbg !4600
  %ptradd876 = getelementptr inbounds i8, ptr %ptradd875, i64 4, !dbg !4600
  %498 = load i32, ptr %ptradd876, align 4, !dbg !4600
  store i32 %498, ptr %width874, align 4, !dbg !4600
  %499 = load ptr, ptr %self, align 8, !dbg !4601
  %ptradd877 = getelementptr inbounds i8, ptr %499, i64 16, !dbg !4601
  %ptradd878 = getelementptr inbounds i8, ptr %ptradd877, i64 4, !dbg !4601
  store i32 0, ptr %ptradd878, align 4, !dbg !4602
  %500 = load ptr, ptr %self, align 8
  %501 = call i64 @std.io.Formatter.out_substr(ptr %retparam881, ptr %500, ptr @.str.203, i64 2), !dbg !4603
  %not_err882 = icmp eq i64 %501, 0, !dbg !4603
  %502 = call i1 @llvm.expect.i1(i1 %not_err882, i1 true), !dbg !4603
  br i1 %502, label %after_check884, label %assign_optional883, !dbg !4603

assign_optional883:                               ; preds = %if.exit871
  store i64 %501, ptr %error_var880, align 8, !dbg !4603
  br label %guard_block885, !dbg !4603

after_check884:                                   ; preds = %if.exit871
  br label %noerr_block889, !dbg !4603

guard_block885:                                   ; preds = %assign_optional883
  %503 = load ptr, ptr %self, align 8, !dbg !4604
  %ptradd886 = getelementptr inbounds i8, ptr %503, i64 16, !dbg !4604
  %504 = load i32, ptr %flags872, align 4, !dbg !4606
  store i32 %504, ptr %ptradd886, align 8, !dbg !4606
  %505 = load ptr, ptr %self, align 8, !dbg !4607
  %ptradd887 = getelementptr inbounds i8, ptr %505, i64 16, !dbg !4607
  %ptradd888 = getelementptr inbounds i8, ptr %ptradd887, i64 4, !dbg !4607
  %506 = load i32, ptr %width874, align 4, !dbg !4608
  store i32 %506, ptr %ptradd888, align 4, !dbg !4608
  %507 = load i64, ptr %error_var880, align 8, !dbg !4608
  ret i64 %507, !dbg !4608

noerr_block889:                                   ; preds = %after_check884
  %508 = load i64, ptr %retparam881, align 8, !dbg !4608
  %509 = load ptr, ptr %self, align 8
  %lo891 = load i64, ptr %arg, align 8
  %ptradd892 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi893 = load ptr, ptr %ptradd892, align 8
  %510 = call i64 @std.io.Formatter.ntoa_any(ptr %retparam890, ptr %509, i64 %lo891, ptr %hi893, i32 16), !dbg !4609
  %not_err894 = icmp eq i64 %510, 0, !dbg !4609
  %511 = call i1 @llvm.expect.i1(i1 %not_err894, i1 true), !dbg !4609
  br i1 %511, label %after_check896, label %assign_optional895, !dbg !4609

assign_optional895:                               ; preds = %noerr_block889
  store i64 %510, ptr %reterr879, align 8, !dbg !4609
  br label %err_retblock901, !dbg !4609

after_check896:                                   ; preds = %noerr_block889
  %512 = load i64, ptr %retparam890, align 8, !dbg !4609
  %add897 = add i64 %508, %512, !dbg !4603
  %513 = load ptr, ptr %self, align 8, !dbg !4610
  %ptradd898 = getelementptr inbounds i8, ptr %513, i64 16, !dbg !4610
  %514 = load i32, ptr %flags872, align 4, !dbg !4612
  store i32 %514, ptr %ptradd898, align 8, !dbg !4612
  %515 = load ptr, ptr %self, align 8, !dbg !4613
  %ptradd899 = getelementptr inbounds i8, ptr %515, i64 16, !dbg !4613
  %ptradd900 = getelementptr inbounds i8, ptr %ptradd899, i64 4, !dbg !4613
  %516 = load i32, ptr %width874, align 4, !dbg !4614
  store i32 %516, ptr %ptradd900, align 4, !dbg !4614
  store i64 %add897, ptr %0, align 8, !dbg !4614
  ret i64 0, !dbg !4614

err_retblock901:                                  ; preds = %assign_optional895
  %517 = load ptr, ptr %self, align 8, !dbg !4615
  %ptradd902 = getelementptr inbounds i8, ptr %517, i64 16, !dbg !4615
  %518 = load i32, ptr %flags872, align 4, !dbg !4617
  store i32 %518, ptr %ptradd902, align 8, !dbg !4617
  %519 = load ptr, ptr %self, align 8, !dbg !4618
  %ptradd903 = getelementptr inbounds i8, ptr %519, i64 16, !dbg !4618
  %ptradd904 = getelementptr inbounds i8, ptr %ptradd903, i64 4, !dbg !4618
  %520 = load i32, ptr %width874, align 4, !dbg !4619
  store i32 %520, ptr %ptradd904, align 4, !dbg !4619
  %521 = load i64, ptr %reterr879, align 8, !dbg !4619
  ret i64 %521, !dbg !4619

switch.case905:                                   ; preds = %switch.entry141
    #dbg_declare(ptr %flags906, !4620, !DIExpression(), !4622)
  %522 = load ptr, ptr %self, align 8, !dbg !4623
  %ptradd907 = getelementptr inbounds i8, ptr %522, i64 16, !dbg !4623
  %523 = load i32, ptr %ptradd907, align 8, !dbg !4623
  store i32 %523, ptr %flags906, align 4, !dbg !4623
    #dbg_declare(ptr %width908, !4624, !DIExpression(), !4625)
  %524 = load ptr, ptr %self, align 8, !dbg !4626
  %ptradd909 = getelementptr inbounds i8, ptr %524, i64 16, !dbg !4626
  %ptradd910 = getelementptr inbounds i8, ptr %ptradd909, i64 4, !dbg !4626
  %525 = load i32, ptr %ptradd910, align 4, !dbg !4626
  store i32 %525, ptr %width908, align 4, !dbg !4626
  %526 = load ptr, ptr %self, align 8, !dbg !4627
  %ptradd911 = getelementptr inbounds i8, ptr %526, i64 16, !dbg !4627
  store i32 0, ptr %ptradd911, align 8, !dbg !4627
  %527 = load ptr, ptr %self, align 8, !dbg !4628
  %ptradd912 = getelementptr inbounds i8, ptr %527, i64 16, !dbg !4628
  %ptradd913 = getelementptr inbounds i8, ptr %ptradd912, i64 4, !dbg !4628
  store i32 0, ptr %ptradd913, align 4, !dbg !4629
    #dbg_declare(ptr %inner914, !4630, !DIExpression(), !4631)
  %ptradd915 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4632
  %528 = load i64, ptr %ptradd915, align 8, !dbg !4632
  %"introspect*916" = inttoptr i64 %528 to ptr, !dbg !4632
  %typeid.kind917 = load i8, ptr %"introspect*916", align 8, !dbg !4632
  %eq918 = icmp eq i8 %typeid.kind917, 14, !dbg !4632
  br i1 %eq918, label %check_type_ok934, label %check_next919, !dbg !4632

check_next919:                                    ; preds = %switch.case905
  %eq920 = icmp eq i8 %typeid.kind917, 18, !dbg !4632
  br i1 %eq920, label %check_type_ok934, label %check_next921, !dbg !4632

check_next921:                                    ; preds = %check_next919
  %eq922 = icmp eq i8 %typeid.kind917, 16, !dbg !4632
  br i1 %eq922, label %check_type_ok934, label %check_next923, !dbg !4632

check_next923:                                    ; preds = %check_next921
  %eq924 = icmp eq i8 %typeid.kind917, 8, !dbg !4632
  br i1 %eq924, label %check_type_ok934, label %check_next925, !dbg !4632

check_next925:                                    ; preds = %check_next923
  %eq926 = icmp eq i8 %typeid.kind917, 15, !dbg !4632
  br i1 %eq926, label %check_type_ok934, label %check_next927, !dbg !4632

check_next927:                                    ; preds = %check_next925
  %eq928 = icmp eq i8 %typeid.kind917, 17, !dbg !4632
  br i1 %eq928, label %check_type_ok934, label %check_next929, !dbg !4632

check_next929:                                    ; preds = %check_next927
  %eq930 = icmp eq i8 %typeid.kind917, 13, !dbg !4632
  br i1 %eq930, label %check_type_ok934, label %check_next931, !dbg !4632

check_next931:                                    ; preds = %check_next929
  %eq932 = icmp eq i8 %typeid.kind917, 11, !dbg !4632
  br i1 %eq932, label %check_type_ok934, label %check_next933, !dbg !4632

check_next933:                                    ; preds = %check_next931
  %529 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4632
  call void %529(ptr @.panic_msg.49, i64 49, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 252) #5, !dbg !4632
  unreachable, !dbg !4632

check_type_ok934:                                 ; preds = %check_next931, %check_next929, %check_next927, %check_next925, %check_next923, %check_next921, %check_next919, %switch.case905
  %ptradd935 = getelementptr inbounds i8, ptr %"introspect*916", i64 32, !dbg !4632
  %typeid.inner936 = load i64, ptr %ptradd935, align 8, !dbg !4632
  store i64 %typeid.inner936, ptr %inner914, align 8, !dbg !4632
    #dbg_declare(ptr %size, !4633, !DIExpression(), !4634)
  %530 = load i64, ptr %inner914, align 8, !dbg !4635
  %"introspect*937" = inttoptr i64 %530 to ptr, !dbg !4635
  %typeid.kind938 = load i8, ptr %"introspect*937", align 8, !dbg !4635
  %ptradd939 = getelementptr inbounds i8, ptr %"introspect*937", i64 24, !dbg !4635
  %typeid.size = load i64, ptr %ptradd939, align 8, !dbg !4635
  store i64 %typeid.size, ptr %size, align 8, !dbg !4635
    #dbg_declare(ptr %alen, !4636, !DIExpression(), !4637)
  %ptradd940 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4638
  %531 = load i64, ptr %ptradd940, align 8, !dbg !4638
  %"introspect*941" = inttoptr i64 %531 to ptr, !dbg !4638
  %typeid.kind942 = load i8, ptr %"introspect*941", align 8, !dbg !4638
  %eq943 = icmp eq i8 %typeid.kind942, 14, !dbg !4638
  br i1 %eq943, label %check_type_ok951, label %check_next944, !dbg !4638

check_next944:                                    ; preds = %check_type_ok934
  %eq945 = icmp eq i8 %typeid.kind942, 16, !dbg !4638
  br i1 %eq945, label %check_type_ok951, label %check_next946, !dbg !4638

check_next946:                                    ; preds = %check_next944
  %eq947 = icmp eq i8 %typeid.kind942, 8, !dbg !4638
  br i1 %eq947, label %check_type_ok951, label %check_next948, !dbg !4638

check_next948:                                    ; preds = %check_next946
  %eq949 = icmp eq i8 %typeid.kind942, 15, !dbg !4638
  br i1 %eq949, label %check_type_ok951, label %check_next950, !dbg !4638

check_next950:                                    ; preds = %check_next948
  %532 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4638
  call void %532(ptr @.panic_msg.204, i64 43, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 254) #5, !dbg !4638
  unreachable, !dbg !4638

check_type_ok951:                                 ; preds = %check_next948, %check_next946, %check_next944, %check_type_ok934
  %ptradd952 = getelementptr inbounds i8, ptr %"introspect*941", i64 40, !dbg !4638
  %typeid.len = load i64, ptr %ptradd952, align 8, !dbg !4638
  store i64 %typeid.len, ptr %alen, align 8, !dbg !4638
    #dbg_declare(ptr %ptr953, !4639, !DIExpression(), !4640)
  %533 = load ptr, ptr %arg, align 8, !dbg !4641
  store ptr %533, ptr %ptr953, align 8, !dbg !4641
    #dbg_declare(ptr %len, !4642, !DIExpression(), !4643)
  %534 = load ptr, ptr %self, align 8
  %535 = call i64 @std.io.Formatter.out(ptr %retparam955, ptr %534, i8 zeroext 91), !dbg !4644
  %not_err956 = icmp eq i64 %535, 0, !dbg !4644
  %536 = call i1 @llvm.expect.i1(i1 %not_err956, i1 true), !dbg !4644
  br i1 %536, label %after_check958, label %assign_optional957, !dbg !4644

assign_optional957:                               ; preds = %check_type_ok951
  store i64 %535, ptr %error_var954, align 8, !dbg !4644
  br label %guard_block959, !dbg !4644

after_check958:                                   ; preds = %check_type_ok951
  br label %noerr_block963, !dbg !4644

guard_block959:                                   ; preds = %assign_optional957
  %537 = load ptr, ptr %self, align 8, !dbg !4645
  %ptradd960 = getelementptr inbounds i8, ptr %537, i64 16, !dbg !4645
  %538 = load i32, ptr %flags906, align 4, !dbg !4647
  store i32 %538, ptr %ptradd960, align 8, !dbg !4647
  %539 = load ptr, ptr %self, align 8, !dbg !4648
  %ptradd961 = getelementptr inbounds i8, ptr %539, i64 16, !dbg !4648
  %ptradd962 = getelementptr inbounds i8, ptr %ptradd961, i64 4, !dbg !4648
  %540 = load i32, ptr %width908, align 4, !dbg !4649
  store i32 %540, ptr %ptradd962, align 4, !dbg !4649
  %541 = load i64, ptr %error_var954, align 8, !dbg !4649
  ret i64 %541, !dbg !4649

noerr_block963:                                   ; preds = %after_check958
  %542 = load i64, ptr %retparam955, align 8, !dbg !4649
  store i64 %542, ptr %len, align 8, !dbg !4649
    #dbg_declare(ptr %i964, !4650, !DIExpression(), !4652)
  store i64 0, ptr %i964, align 8, !dbg !4653
  br label %loop.cond, !dbg !4653

loop.cond:                                        ; preds = %noerr_block995, %noerr_block963
  %543 = load i64, ptr %i964, align 8, !dbg !4654
  %544 = load i64, ptr %alen, align 8, !dbg !4655
  %lt965 = icmp ult i64 %543, %544, !dbg !4654
  br i1 %lt965, label %loop.body, label %loop.exit, !dbg !4654

loop.body:                                        ; preds = %loop.cond
  %545 = load i64, ptr %i964, align 8, !dbg !4656
  %neq966 = icmp ne i64 0, %545, !dbg !4656
  br i1 %neq966, label %if.then967, label %if.exit979, !dbg !4656

if.then967:                                       ; preds = %loop.body
  %546 = load i64, ptr %len, align 8, !dbg !4658
  %547 = load ptr, ptr %self, align 8
  %548 = call i64 @std.io.Formatter.out_substr(ptr %retparam969, ptr %547, ptr @.str.205, i64 2), !dbg !4659
  %not_err970 = icmp eq i64 %548, 0, !dbg !4659
  %549 = call i1 @llvm.expect.i1(i1 %not_err970, i1 true), !dbg !4659
  br i1 %549, label %after_check972, label %assign_optional971, !dbg !4659

assign_optional971:                               ; preds = %if.then967
  store i64 %548, ptr %error_var968, align 8, !dbg !4659
  br label %guard_block973, !dbg !4659

after_check972:                                   ; preds = %if.then967
  br label %noerr_block977, !dbg !4659

guard_block973:                                   ; preds = %assign_optional971
  %550 = load ptr, ptr %self, align 8, !dbg !4660
  %ptradd974 = getelementptr inbounds i8, ptr %550, i64 16, !dbg !4660
  %551 = load i32, ptr %flags906, align 4, !dbg !4662
  store i32 %551, ptr %ptradd974, align 8, !dbg !4662
  %552 = load ptr, ptr %self, align 8, !dbg !4663
  %ptradd975 = getelementptr inbounds i8, ptr %552, i64 16, !dbg !4663
  %ptradd976 = getelementptr inbounds i8, ptr %ptradd975, i64 4, !dbg !4663
  %553 = load i32, ptr %width908, align 4, !dbg !4664
  store i32 %553, ptr %ptradd976, align 4, !dbg !4664
  %554 = load i64, ptr %error_var968, align 8, !dbg !4664
  ret i64 %554, !dbg !4664

noerr_block977:                                   ; preds = %after_check972
  %555 = load i64, ptr %retparam969, align 8, !dbg !4664
  %add978 = add i64 %546, %555, !dbg !4658
  store i64 %add978, ptr %len, align 8, !dbg !4658
  br label %if.exit979, !dbg !4658

if.exit979:                                       ; preds = %noerr_block977, %loop.body
  %556 = load i64, ptr %len, align 8, !dbg !4665
  %557 = load ptr, ptr %ptr953, align 8
  store ptr %557, ptr %ptr981, align 8
  %558 = load i64, ptr %inner914, align 8
  store i64 %558, ptr %type982, align 8
  %559 = load ptr, ptr %ptr981, align 8, !dbg !4666
  %560 = load i64, ptr %type982, align 8, !dbg !4669
  %561 = insertvalue %any undef, ptr %559, 0, !dbg !4669
  %562 = insertvalue %any %561, i64 %560, 1, !dbg !4669
  %563 = load ptr, ptr %self, align 8
  store %any %562, ptr %taddr984, align 8
  %lo985 = load i64, ptr %taddr984, align 8
  %ptradd986 = getelementptr inbounds i8, ptr %taddr984, i64 8
  %hi987 = load ptr, ptr %ptradd986, align 8
  %564 = call i64 @std.io.Formatter.out_str(ptr %retparam983, ptr %563, i64 %lo985, ptr %hi987), !dbg !4670
  %not_err988 = icmp eq i64 %564, 0, !dbg !4670
  %565 = call i1 @llvm.expect.i1(i1 %not_err988, i1 true), !dbg !4670
  br i1 %565, label %after_check990, label %assign_optional989, !dbg !4670

assign_optional989:                               ; preds = %if.exit979
  store i64 %564, ptr %error_var980, align 8, !dbg !4670
  br label %guard_block991, !dbg !4670

after_check990:                                   ; preds = %if.exit979
  br label %noerr_block995, !dbg !4670

guard_block991:                                   ; preds = %assign_optional989
  %566 = load ptr, ptr %self, align 8, !dbg !4671
  %ptradd992 = getelementptr inbounds i8, ptr %566, i64 16, !dbg !4671
  %567 = load i32, ptr %flags906, align 4, !dbg !4673
  store i32 %567, ptr %ptradd992, align 8, !dbg !4673
  %568 = load ptr, ptr %self, align 8, !dbg !4674
  %ptradd993 = getelementptr inbounds i8, ptr %568, i64 16, !dbg !4674
  %ptradd994 = getelementptr inbounds i8, ptr %ptradd993, i64 4, !dbg !4674
  %569 = load i32, ptr %width908, align 4, !dbg !4675
  store i32 %569, ptr %ptradd994, align 4, !dbg !4675
  %570 = load i64, ptr %error_var980, align 8, !dbg !4675
  ret i64 %570, !dbg !4675

noerr_block995:                                   ; preds = %after_check990
  %571 = load i64, ptr %retparam983, align 8, !dbg !4675
  %add996 = add i64 %556, %571, !dbg !4665
  store i64 %add996, ptr %len, align 8, !dbg !4665
  %572 = load ptr, ptr %ptr953, align 8, !dbg !4676
  %573 = load i64, ptr %size, align 8, !dbg !4677
  %ptradd_any = getelementptr i8, ptr %572, i64 %573, !dbg !4676
  store ptr %ptradd_any, ptr %ptr953, align 8, !dbg !4676
  %574 = load i64, ptr %i964, align 8, !dbg !4678
  %add997 = add i64 %574, 1, !dbg !4678
  store i64 %add997, ptr %i964, align 8, !dbg !4678
  br label %loop.cond, !dbg !4678

loop.exit:                                        ; preds = %loop.cond
  %575 = load i64, ptr %len, align 8, !dbg !4679
  %576 = load ptr, ptr %self, align 8
  %577 = call i64 @std.io.Formatter.out(ptr %retparam999, ptr %576, i8 zeroext 93), !dbg !4680
  %not_err1000 = icmp eq i64 %577, 0, !dbg !4680
  %578 = call i1 @llvm.expect.i1(i1 %not_err1000, i1 true), !dbg !4680
  br i1 %578, label %after_check1002, label %assign_optional1001, !dbg !4680

assign_optional1001:                              ; preds = %loop.exit
  store i64 %577, ptr %error_var998, align 8, !dbg !4680
  br label %guard_block1003, !dbg !4680

after_check1002:                                  ; preds = %loop.exit
  br label %noerr_block1007, !dbg !4680

guard_block1003:                                  ; preds = %assign_optional1001
  %579 = load ptr, ptr %self, align 8, !dbg !4681
  %ptradd1004 = getelementptr inbounds i8, ptr %579, i64 16, !dbg !4681
  %580 = load i32, ptr %flags906, align 4, !dbg !4683
  store i32 %580, ptr %ptradd1004, align 8, !dbg !4683
  %581 = load ptr, ptr %self, align 8, !dbg !4684
  %ptradd1005 = getelementptr inbounds i8, ptr %581, i64 16, !dbg !4684
  %ptradd1006 = getelementptr inbounds i8, ptr %ptradd1005, i64 4, !dbg !4684
  %582 = load i32, ptr %width908, align 4, !dbg !4685
  store i32 %582, ptr %ptradd1006, align 4, !dbg !4685
  %583 = load i64, ptr %error_var998, align 8, !dbg !4685
  ret i64 %583, !dbg !4685

noerr_block1007:                                  ; preds = %after_check1002
  %584 = load i64, ptr %retparam999, align 8, !dbg !4685
  %add1008 = add i64 %575, %584, !dbg !4679
  store i64 %add1008, ptr %len, align 8, !dbg !4679
  %585 = load i64, ptr %len, align 8, !dbg !4686
  %586 = load ptr, ptr %self, align 8, !dbg !4687
  %ptradd1010 = getelementptr inbounds i8, ptr %586, i64 16, !dbg !4687
  %587 = load i32, ptr %flags906, align 4, !dbg !4689
  store i32 %587, ptr %ptradd1010, align 8, !dbg !4689
  %588 = load ptr, ptr %self, align 8, !dbg !4690
  %ptradd1011 = getelementptr inbounds i8, ptr %588, i64 16, !dbg !4690
  %ptradd1012 = getelementptr inbounds i8, ptr %ptradd1011, i64 4, !dbg !4690
  %589 = load i32, ptr %width908, align 4, !dbg !4691
  store i32 %589, ptr %ptradd1012, align 4, !dbg !4691
  store i64 %585, ptr %0, align 8, !dbg !4691
  ret i64 0, !dbg !4691

switch.case1013:                                  ; preds = %switch.entry141
    #dbg_declare(ptr %flags1014, !4692, !DIExpression(), !4694)
  %590 = load ptr, ptr %self, align 8, !dbg !4695
  %ptradd1015 = getelementptr inbounds i8, ptr %590, i64 16, !dbg !4695
  %591 = load i32, ptr %ptradd1015, align 8, !dbg !4695
  store i32 %591, ptr %flags1014, align 4, !dbg !4695
    #dbg_declare(ptr %width1016, !4696, !DIExpression(), !4697)
  %592 = load ptr, ptr %self, align 8, !dbg !4698
  %ptradd1017 = getelementptr inbounds i8, ptr %592, i64 16, !dbg !4698
  %ptradd1018 = getelementptr inbounds i8, ptr %ptradd1017, i64 4, !dbg !4698
  %593 = load i32, ptr %ptradd1018, align 4, !dbg !4698
  store i32 %593, ptr %width1016, align 4, !dbg !4698
  %594 = load ptr, ptr %self, align 8, !dbg !4699
  %ptradd1019 = getelementptr inbounds i8, ptr %594, i64 16, !dbg !4699
  store i32 0, ptr %ptradd1019, align 8, !dbg !4699
  %595 = load ptr, ptr %self, align 8, !dbg !4700
  %ptradd1020 = getelementptr inbounds i8, ptr %595, i64 16, !dbg !4700
  %ptradd1021 = getelementptr inbounds i8, ptr %ptradd1020, i64 4, !dbg !4700
  store i32 0, ptr %ptradd1021, align 4, !dbg !4701
    #dbg_declare(ptr %inner1022, !4702, !DIExpression(), !4703)
  %ptradd1023 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4704
  %596 = load i64, ptr %ptradd1023, align 8, !dbg !4704
  %"introspect*1024" = inttoptr i64 %596 to ptr, !dbg !4704
  %typeid.kind1025 = load i8, ptr %"introspect*1024", align 8, !dbg !4704
  %eq1026 = icmp eq i8 %typeid.kind1025, 14, !dbg !4704
  br i1 %eq1026, label %check_type_ok1042, label %check_next1027, !dbg !4704

check_next1027:                                   ; preds = %switch.case1013
  %eq1028 = icmp eq i8 %typeid.kind1025, 18, !dbg !4704
  br i1 %eq1028, label %check_type_ok1042, label %check_next1029, !dbg !4704

check_next1029:                                   ; preds = %check_next1027
  %eq1030 = icmp eq i8 %typeid.kind1025, 16, !dbg !4704
  br i1 %eq1030, label %check_type_ok1042, label %check_next1031, !dbg !4704

check_next1031:                                   ; preds = %check_next1029
  %eq1032 = icmp eq i8 %typeid.kind1025, 8, !dbg !4704
  br i1 %eq1032, label %check_type_ok1042, label %check_next1033, !dbg !4704

check_next1033:                                   ; preds = %check_next1031
  %eq1034 = icmp eq i8 %typeid.kind1025, 15, !dbg !4704
  br i1 %eq1034, label %check_type_ok1042, label %check_next1035, !dbg !4704

check_next1035:                                   ; preds = %check_next1033
  %eq1036 = icmp eq i8 %typeid.kind1025, 17, !dbg !4704
  br i1 %eq1036, label %check_type_ok1042, label %check_next1037, !dbg !4704

check_next1037:                                   ; preds = %check_next1035
  %eq1038 = icmp eq i8 %typeid.kind1025, 13, !dbg !4704
  br i1 %eq1038, label %check_type_ok1042, label %check_next1039, !dbg !4704

check_next1039:                                   ; preds = %check_next1037
  %eq1040 = icmp eq i8 %typeid.kind1025, 11, !dbg !4704
  br i1 %eq1040, label %check_type_ok1042, label %check_next1041, !dbg !4704

check_next1041:                                   ; preds = %check_next1039
  %597 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4704
  call void %597(ptr @.panic_msg.49, i64 49, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 277) #5, !dbg !4704
  unreachable, !dbg !4704

check_type_ok1042:                                ; preds = %check_next1039, %check_next1037, %check_next1035, %check_next1033, %check_next1031, %check_next1029, %check_next1027, %switch.case1013
  %ptradd1043 = getelementptr inbounds i8, ptr %"introspect*1024", i64 32, !dbg !4704
  %typeid.inner1044 = load i64, ptr %ptradd1043, align 8, !dbg !4704
  store i64 %typeid.inner1044, ptr %inner1022, align 8, !dbg !4704
    #dbg_declare(ptr %size1045, !4705, !DIExpression(), !4706)
  %598 = load i64, ptr %inner1022, align 8, !dbg !4707
  %"introspect*1046" = inttoptr i64 %598 to ptr, !dbg !4707
  %typeid.kind1047 = load i8, ptr %"introspect*1046", align 8, !dbg !4707
  %ptradd1048 = getelementptr inbounds i8, ptr %"introspect*1046", i64 24, !dbg !4707
  %typeid.size1049 = load i64, ptr %ptradd1048, align 8, !dbg !4707
  store i64 %typeid.size1049, ptr %size1045, align 8, !dbg !4707
    #dbg_declare(ptr %vlen, !4708, !DIExpression(), !4709)
  %ptradd1050 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4710
  %599 = load i64, ptr %ptradd1050, align 8, !dbg !4710
  %"introspect*1051" = inttoptr i64 %599 to ptr, !dbg !4710
  %typeid.kind1052 = load i8, ptr %"introspect*1051", align 8, !dbg !4710
  %eq1053 = icmp eq i8 %typeid.kind1052, 14, !dbg !4710
  br i1 %eq1053, label %check_type_ok1061, label %check_next1054, !dbg !4710

check_next1054:                                   ; preds = %check_type_ok1042
  %eq1055 = icmp eq i8 %typeid.kind1052, 16, !dbg !4710
  br i1 %eq1055, label %check_type_ok1061, label %check_next1056, !dbg !4710

check_next1056:                                   ; preds = %check_next1054
  %eq1057 = icmp eq i8 %typeid.kind1052, 8, !dbg !4710
  br i1 %eq1057, label %check_type_ok1061, label %check_next1058, !dbg !4710

check_next1058:                                   ; preds = %check_next1056
  %eq1059 = icmp eq i8 %typeid.kind1052, 15, !dbg !4710
  br i1 %eq1059, label %check_type_ok1061, label %check_next1060, !dbg !4710

check_next1060:                                   ; preds = %check_next1058
  %600 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4710
  call void %600(ptr @.panic_msg.204, i64 43, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 279) #5, !dbg !4710
  unreachable, !dbg !4710

check_type_ok1061:                                ; preds = %check_next1058, %check_next1056, %check_next1054, %check_type_ok1042
  %ptradd1062 = getelementptr inbounds i8, ptr %"introspect*1051", i64 40, !dbg !4710
  %typeid.len1063 = load i64, ptr %ptradd1062, align 8, !dbg !4710
  store i64 %typeid.len1063, ptr %vlen, align 8, !dbg !4710
    #dbg_declare(ptr %ptr1064, !4711, !DIExpression(), !4712)
  %601 = load ptr, ptr %arg, align 8, !dbg !4713
  store ptr %601, ptr %ptr1064, align 8, !dbg !4713
    #dbg_declare(ptr %len1065, !4714, !DIExpression(), !4715)
  %602 = load ptr, ptr %self, align 8
  %603 = call i64 @std.io.Formatter.out_substr(ptr %retparam1067, ptr %602, ptr @.str.206, i64 2), !dbg !4716
  %not_err1068 = icmp eq i64 %603, 0, !dbg !4716
  %604 = call i1 @llvm.expect.i1(i1 %not_err1068, i1 true), !dbg !4716
  br i1 %604, label %after_check1070, label %assign_optional1069, !dbg !4716

assign_optional1069:                              ; preds = %check_type_ok1061
  store i64 %603, ptr %error_var1066, align 8, !dbg !4716
  br label %guard_block1071, !dbg !4716

after_check1070:                                  ; preds = %check_type_ok1061
  br label %noerr_block1075, !dbg !4716

guard_block1071:                                  ; preds = %assign_optional1069
  %605 = load ptr, ptr %self, align 8, !dbg !4717
  %ptradd1072 = getelementptr inbounds i8, ptr %605, i64 16, !dbg !4717
  %606 = load i32, ptr %flags1014, align 4, !dbg !4719
  store i32 %606, ptr %ptradd1072, align 8, !dbg !4719
  %607 = load ptr, ptr %self, align 8, !dbg !4720
  %ptradd1073 = getelementptr inbounds i8, ptr %607, i64 16, !dbg !4720
  %ptradd1074 = getelementptr inbounds i8, ptr %ptradd1073, i64 4, !dbg !4720
  %608 = load i32, ptr %width1016, align 4, !dbg !4721
  store i32 %608, ptr %ptradd1074, align 4, !dbg !4721
  %609 = load i64, ptr %error_var1066, align 8, !dbg !4721
  ret i64 %609, !dbg !4721

noerr_block1075:                                  ; preds = %after_check1070
  %610 = load i64, ptr %retparam1067, align 8, !dbg !4721
  store i64 %610, ptr %len1065, align 8, !dbg !4721
    #dbg_declare(ptr %i1076, !4722, !DIExpression(), !4724)
  store i64 0, ptr %i1076, align 8, !dbg !4725
  br label %loop.cond1077, !dbg !4725

loop.cond1077:                                    ; preds = %noerr_block1109, %noerr_block1075
  %611 = load i64, ptr %i1076, align 8, !dbg !4726
  %612 = load i64, ptr %vlen, align 8, !dbg !4727
  %lt1078 = icmp ult i64 %611, %612, !dbg !4726
  br i1 %lt1078, label %loop.body1079, label %loop.exit1113, !dbg !4726

loop.body1079:                                    ; preds = %loop.cond1077
  %613 = load i64, ptr %i1076, align 8, !dbg !4728
  %neq1080 = icmp ne i64 0, %613, !dbg !4728
  br i1 %neq1080, label %if.then1081, label %if.exit1093, !dbg !4728

if.then1081:                                      ; preds = %loop.body1079
  %614 = load i64, ptr %len1065, align 8, !dbg !4730
  %615 = load ptr, ptr %self, align 8
  %616 = call i64 @std.io.Formatter.out_substr(ptr %retparam1083, ptr %615, ptr @.str.207, i64 2), !dbg !4731
  %not_err1084 = icmp eq i64 %616, 0, !dbg !4731
  %617 = call i1 @llvm.expect.i1(i1 %not_err1084, i1 true), !dbg !4731
  br i1 %617, label %after_check1086, label %assign_optional1085, !dbg !4731

assign_optional1085:                              ; preds = %if.then1081
  store i64 %616, ptr %error_var1082, align 8, !dbg !4731
  br label %guard_block1087, !dbg !4731

after_check1086:                                  ; preds = %if.then1081
  br label %noerr_block1091, !dbg !4731

guard_block1087:                                  ; preds = %assign_optional1085
  %618 = load ptr, ptr %self, align 8, !dbg !4732
  %ptradd1088 = getelementptr inbounds i8, ptr %618, i64 16, !dbg !4732
  %619 = load i32, ptr %flags1014, align 4, !dbg !4734
  store i32 %619, ptr %ptradd1088, align 8, !dbg !4734
  %620 = load ptr, ptr %self, align 8, !dbg !4735
  %ptradd1089 = getelementptr inbounds i8, ptr %620, i64 16, !dbg !4735
  %ptradd1090 = getelementptr inbounds i8, ptr %ptradd1089, i64 4, !dbg !4735
  %621 = load i32, ptr %width1016, align 4, !dbg !4736
  store i32 %621, ptr %ptradd1090, align 4, !dbg !4736
  %622 = load i64, ptr %error_var1082, align 8, !dbg !4736
  ret i64 %622, !dbg !4736

noerr_block1091:                                  ; preds = %after_check1086
  %623 = load i64, ptr %retparam1083, align 8, !dbg !4736
  %add1092 = add i64 %614, %623, !dbg !4730
  store i64 %add1092, ptr %len1065, align 8, !dbg !4730
  br label %if.exit1093, !dbg !4730

if.exit1093:                                      ; preds = %noerr_block1091, %loop.body1079
  %624 = load i64, ptr %len1065, align 8, !dbg !4737
  %625 = load ptr, ptr %ptr1064, align 8
  store ptr %625, ptr %ptr1095, align 8
  %626 = load i64, ptr %inner1022, align 8
  store i64 %626, ptr %type1096, align 8
  %627 = load ptr, ptr %ptr1095, align 8, !dbg !4738
  %628 = load i64, ptr %type1096, align 8, !dbg !4741
  %629 = insertvalue %any undef, ptr %627, 0, !dbg !4741
  %630 = insertvalue %any %629, i64 %628, 1, !dbg !4741
  %631 = load ptr, ptr %self, align 8
  store %any %630, ptr %taddr1098, align 8
  %lo1099 = load i64, ptr %taddr1098, align 8
  %ptradd1100 = getelementptr inbounds i8, ptr %taddr1098, i64 8
  %hi1101 = load ptr, ptr %ptradd1100, align 8
  %632 = call i64 @std.io.Formatter.out_str(ptr %retparam1097, ptr %631, i64 %lo1099, ptr %hi1101), !dbg !4742
  %not_err1102 = icmp eq i64 %632, 0, !dbg !4742
  %633 = call i1 @llvm.expect.i1(i1 %not_err1102, i1 true), !dbg !4742
  br i1 %633, label %after_check1104, label %assign_optional1103, !dbg !4742

assign_optional1103:                              ; preds = %if.exit1093
  store i64 %632, ptr %error_var1094, align 8, !dbg !4742
  br label %guard_block1105, !dbg !4742

after_check1104:                                  ; preds = %if.exit1093
  br label %noerr_block1109, !dbg !4742

guard_block1105:                                  ; preds = %assign_optional1103
  %634 = load ptr, ptr %self, align 8, !dbg !4743
  %ptradd1106 = getelementptr inbounds i8, ptr %634, i64 16, !dbg !4743
  %635 = load i32, ptr %flags1014, align 4, !dbg !4745
  store i32 %635, ptr %ptradd1106, align 8, !dbg !4745
  %636 = load ptr, ptr %self, align 8, !dbg !4746
  %ptradd1107 = getelementptr inbounds i8, ptr %636, i64 16, !dbg !4746
  %ptradd1108 = getelementptr inbounds i8, ptr %ptradd1107, i64 4, !dbg !4746
  %637 = load i32, ptr %width1016, align 4, !dbg !4747
  store i32 %637, ptr %ptradd1108, align 4, !dbg !4747
  %638 = load i64, ptr %error_var1094, align 8, !dbg !4747
  ret i64 %638, !dbg !4747

noerr_block1109:                                  ; preds = %after_check1104
  %639 = load i64, ptr %retparam1097, align 8, !dbg !4747
  %add1110 = add i64 %624, %639, !dbg !4737
  store i64 %add1110, ptr %len1065, align 8, !dbg !4737
  %640 = load ptr, ptr %ptr1064, align 8, !dbg !4748
  %641 = load i64, ptr %size1045, align 8, !dbg !4749
  %ptradd_any1111 = getelementptr i8, ptr %640, i64 %641, !dbg !4748
  store ptr %ptradd_any1111, ptr %ptr1064, align 8, !dbg !4748
  %642 = load i64, ptr %i1076, align 8, !dbg !4750
  %add1112 = add i64 %642, 1, !dbg !4750
  store i64 %add1112, ptr %i1076, align 8, !dbg !4750
  br label %loop.cond1077, !dbg !4750

loop.exit1113:                                    ; preds = %loop.cond1077
  %643 = load i64, ptr %len1065, align 8, !dbg !4751
  %644 = load ptr, ptr %self, align 8
  %645 = call i64 @std.io.Formatter.out_substr(ptr %retparam1115, ptr %644, ptr @.str.208, i64 2), !dbg !4752
  %not_err1116 = icmp eq i64 %645, 0, !dbg !4752
  %646 = call i1 @llvm.expect.i1(i1 %not_err1116, i1 true), !dbg !4752
  br i1 %646, label %after_check1118, label %assign_optional1117, !dbg !4752

assign_optional1117:                              ; preds = %loop.exit1113
  store i64 %645, ptr %error_var1114, align 8, !dbg !4752
  br label %guard_block1119, !dbg !4752

after_check1118:                                  ; preds = %loop.exit1113
  br label %noerr_block1123, !dbg !4752

guard_block1119:                                  ; preds = %assign_optional1117
  %647 = load ptr, ptr %self, align 8, !dbg !4753
  %ptradd1120 = getelementptr inbounds i8, ptr %647, i64 16, !dbg !4753
  %648 = load i32, ptr %flags1014, align 4, !dbg !4755
  store i32 %648, ptr %ptradd1120, align 8, !dbg !4755
  %649 = load ptr, ptr %self, align 8, !dbg !4756
  %ptradd1121 = getelementptr inbounds i8, ptr %649, i64 16, !dbg !4756
  %ptradd1122 = getelementptr inbounds i8, ptr %ptradd1121, i64 4, !dbg !4756
  %650 = load i32, ptr %width1016, align 4, !dbg !4757
  store i32 %650, ptr %ptradd1122, align 4, !dbg !4757
  %651 = load i64, ptr %error_var1114, align 8, !dbg !4757
  ret i64 %651, !dbg !4757

noerr_block1123:                                  ; preds = %after_check1118
  %652 = load i64, ptr %retparam1115, align 8, !dbg !4757
  %add1124 = add i64 %643, %652, !dbg !4751
  store i64 %add1124, ptr %len1065, align 8, !dbg !4751
  %653 = load i64, ptr %len1065, align 8, !dbg !4758
  %654 = load ptr, ptr %self, align 8, !dbg !4759
  %ptradd1126 = getelementptr inbounds i8, ptr %654, i64 16, !dbg !4759
  %655 = load i32, ptr %flags1014, align 4, !dbg !4761
  store i32 %655, ptr %ptradd1126, align 8, !dbg !4761
  %656 = load ptr, ptr %self, align 8, !dbg !4762
  %ptradd1127 = getelementptr inbounds i8, ptr %656, i64 16, !dbg !4762
  %ptradd1128 = getelementptr inbounds i8, ptr %ptradd1127, i64 4, !dbg !4762
  %657 = load i32, ptr %width1016, align 4, !dbg !4763
  store i32 %657, ptr %ptradd1128, align 4, !dbg !4763
  store i64 %653, ptr %0, align 8, !dbg !4763
  ret i64 0, !dbg !4763

switch.case1129:                                  ; preds = %switch.entry141
    #dbg_declare(ptr %inner1130, !4764, !DIExpression(), !4766)
  %ptradd1131 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4767
  %658 = load i64, ptr %ptradd1131, align 8, !dbg !4767
  %"introspect*1132" = inttoptr i64 %658 to ptr, !dbg !4767
  %typeid.kind1133 = load i8, ptr %"introspect*1132", align 8, !dbg !4767
  %eq1134 = icmp eq i8 %typeid.kind1133, 14, !dbg !4767
  br i1 %eq1134, label %check_type_ok1150, label %check_next1135, !dbg !4767

check_next1135:                                   ; preds = %switch.case1129
  %eq1136 = icmp eq i8 %typeid.kind1133, 18, !dbg !4767
  br i1 %eq1136, label %check_type_ok1150, label %check_next1137, !dbg !4767

check_next1137:                                   ; preds = %check_next1135
  %eq1138 = icmp eq i8 %typeid.kind1133, 16, !dbg !4767
  br i1 %eq1138, label %check_type_ok1150, label %check_next1139, !dbg !4767

check_next1139:                                   ; preds = %check_next1137
  %eq1140 = icmp eq i8 %typeid.kind1133, 8, !dbg !4767
  br i1 %eq1140, label %check_type_ok1150, label %check_next1141, !dbg !4767

check_next1141:                                   ; preds = %check_next1139
  %eq1142 = icmp eq i8 %typeid.kind1133, 15, !dbg !4767
  br i1 %eq1142, label %check_type_ok1150, label %check_next1143, !dbg !4767

check_next1143:                                   ; preds = %check_next1141
  %eq1144 = icmp eq i8 %typeid.kind1133, 17, !dbg !4767
  br i1 %eq1144, label %check_type_ok1150, label %check_next1145, !dbg !4767

check_next1145:                                   ; preds = %check_next1143
  %eq1146 = icmp eq i8 %typeid.kind1133, 13, !dbg !4767
  br i1 %eq1146, label %check_type_ok1150, label %check_next1147, !dbg !4767

check_next1147:                                   ; preds = %check_next1145
  %eq1148 = icmp eq i8 %typeid.kind1133, 11, !dbg !4767
  br i1 %eq1148, label %check_type_ok1150, label %check_next1149, !dbg !4767

check_next1149:                                   ; preds = %check_next1147
  %659 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4767
  call void %659(ptr @.panic_msg.49, i64 49, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 293) #5, !dbg !4767
  unreachable, !dbg !4767

check_type_ok1150:                                ; preds = %check_next1147, %check_next1145, %check_next1143, %check_next1141, %check_next1139, %check_next1137, %check_next1135, %switch.case1129
  %ptradd1151 = getelementptr inbounds i8, ptr %"introspect*1132", i64 32, !dbg !4767
  %typeid.inner1152 = load i64, ptr %ptradd1151, align 8, !dbg !4767
  store i64 %typeid.inner1152, ptr %inner1130, align 8, !dbg !4767
  %660 = load i64, ptr %inner1130, align 8, !dbg !4768
  %eq1153 = icmp eq i64 %660, ptrtoint (ptr @"$ct.void" to i64), !dbg !4768
  br i1 %eq1153, label %if.then1154, label %if.exit1155, !dbg !4768

if.then1154:                                      ; preds = %check_type_ok1150
  store i64 ptrtoint (ptr @"$ct.char" to i64), ptr %inner1130, align 8, !dbg !4769
  br label %if.exit1155, !dbg !4769

if.exit1155:                                      ; preds = %if.then1154, %check_type_ok1150
    #dbg_declare(ptr %flags1156, !4770, !DIExpression(), !4771)
  %661 = load ptr, ptr %self, align 8, !dbg !4772
  %ptradd1157 = getelementptr inbounds i8, ptr %661, i64 16, !dbg !4772
  %662 = load i32, ptr %ptradd1157, align 8, !dbg !4772
  store i32 %662, ptr %flags1156, align 4, !dbg !4772
    #dbg_declare(ptr %width1158, !4773, !DIExpression(), !4774)
  %663 = load ptr, ptr %self, align 8, !dbg !4775
  %ptradd1159 = getelementptr inbounds i8, ptr %663, i64 16, !dbg !4775
  %ptradd1160 = getelementptr inbounds i8, ptr %ptradd1159, i64 4, !dbg !4775
  %664 = load i32, ptr %ptradd1160, align 4, !dbg !4775
  store i32 %664, ptr %width1158, align 4, !dbg !4775
  %665 = load ptr, ptr %self, align 8, !dbg !4776
  %ptradd1161 = getelementptr inbounds i8, ptr %665, i64 16, !dbg !4776
  store i32 0, ptr %ptradd1161, align 8, !dbg !4776
  %666 = load ptr, ptr %self, align 8, !dbg !4777
  %ptradd1162 = getelementptr inbounds i8, ptr %666, i64 16, !dbg !4777
  %ptradd1163 = getelementptr inbounds i8, ptr %ptradd1162, i64 4, !dbg !4777
  store i32 0, ptr %ptradd1163, align 4, !dbg !4778
    #dbg_declare(ptr %size1164, !4779, !DIExpression(), !4780)
  %667 = load i64, ptr %inner1130, align 8, !dbg !4781
  %"introspect*1165" = inttoptr i64 %667 to ptr, !dbg !4781
  %typeid.kind1166 = load i8, ptr %"introspect*1165", align 8, !dbg !4781
  %ptradd1167 = getelementptr inbounds i8, ptr %"introspect*1165", i64 24, !dbg !4781
  %typeid.size1168 = load i64, ptr %ptradd1167, align 8, !dbg !4781
  store i64 %typeid.size1168, ptr %size1164, align 8, !dbg !4781
    #dbg_declare(ptr %temp, !4782, !DIExpression(), !4784)
  %668 = load ptr, ptr %arg, align 8, !dbg !4785
  store ptr %668, ptr %temp, align 8, !dbg !4785
    #dbg_declare(ptr %ptr1169, !4786, !DIExpression(), !4787)
  %669 = load ptr, ptr %temp, align 8, !dbg !4788
  %checknull1170 = icmp eq ptr %669, null, !dbg !4788
  %670 = call i1 @llvm.expect.i1(i1 %checknull1170, i1 false), !dbg !4788
  br i1 %670, label %panic1171, label %checkok1172, !dbg !4788

checkok1172:                                      ; preds = %if.exit1155
  %671 = ptrtoint ptr %669 to i64, !dbg !4788
  %672 = urem i64 %671, 8, !dbg !4788
  %673 = icmp ne i64 %672, 0, !dbg !4788
  %674 = call i1 @llvm.expect.i1(i1 %673, i1 false), !dbg !4788
  br i1 %674, label %panic1173, label %checkok1180, !dbg !4788

checkok1180:                                      ; preds = %checkok1172
  %675 = load ptr, ptr %669, align 8, !dbg !4788
  store ptr %675, ptr %ptr1169, align 8, !dbg !4788
    #dbg_declare(ptr %slen, !4789, !DIExpression(), !4790)
  %676 = load ptr, ptr %temp, align 8, !dbg !4791
  %checknull1181 = icmp eq ptr %676, null, !dbg !4791
  %677 = call i1 @llvm.expect.i1(i1 %checknull1181, i1 false), !dbg !4791
  br i1 %677, label %panic1182, label %checkok1183, !dbg !4791

checkok1183:                                      ; preds = %checkok1180
  %678 = ptrtoint ptr %676 to i64, !dbg !4791
  %679 = urem i64 %678, 8, !dbg !4791
  %680 = icmp ne i64 %679, 0, !dbg !4791
  %681 = call i1 @llvm.expect.i1(i1 %680, i1 false), !dbg !4791
  br i1 %681, label %panic1184, label %checkok1191, !dbg !4791

checkok1191:                                      ; preds = %checkok1183
  %ptradd1192 = getelementptr inbounds i8, ptr %676, i64 8, !dbg !4791
  %682 = load i64, ptr %ptradd1192, align 8, !dbg !4791
  store i64 %682, ptr %slen, align 8, !dbg !4791
    #dbg_declare(ptr %len1193, !4792, !DIExpression(), !4793)
  %683 = load ptr, ptr %self, align 8
  %684 = call i64 @std.io.Formatter.out(ptr %retparam1195, ptr %683, i8 zeroext 91), !dbg !4794
  %not_err1196 = icmp eq i64 %684, 0, !dbg !4794
  %685 = call i1 @llvm.expect.i1(i1 %not_err1196, i1 true), !dbg !4794
  br i1 %685, label %after_check1198, label %assign_optional1197, !dbg !4794

assign_optional1197:                              ; preds = %checkok1191
  store i64 %684, ptr %error_var1194, align 8, !dbg !4794
  br label %guard_block1199, !dbg !4794

after_check1198:                                  ; preds = %checkok1191
  br label %noerr_block1203, !dbg !4794

guard_block1199:                                  ; preds = %assign_optional1197
  %686 = load ptr, ptr %self, align 8, !dbg !4795
  %ptradd1200 = getelementptr inbounds i8, ptr %686, i64 16, !dbg !4795
  %687 = load i32, ptr %flags1156, align 4, !dbg !4797
  store i32 %687, ptr %ptradd1200, align 8, !dbg !4797
  %688 = load ptr, ptr %self, align 8, !dbg !4798
  %ptradd1201 = getelementptr inbounds i8, ptr %688, i64 16, !dbg !4798
  %ptradd1202 = getelementptr inbounds i8, ptr %ptradd1201, i64 4, !dbg !4798
  %689 = load i32, ptr %width1158, align 4, !dbg !4799
  store i32 %689, ptr %ptradd1202, align 4, !dbg !4799
  %690 = load i64, ptr %error_var1194, align 8, !dbg !4799
  ret i64 %690, !dbg !4799

noerr_block1203:                                  ; preds = %after_check1198
  %691 = load i64, ptr %retparam1195, align 8, !dbg !4799
  store i64 %691, ptr %len1193, align 8, !dbg !4799
    #dbg_declare(ptr %i1204, !4800, !DIExpression(), !4802)
  store i64 0, ptr %i1204, align 8, !dbg !4803
  br label %loop.cond1205, !dbg !4803

loop.cond1205:                                    ; preds = %noerr_block1237, %noerr_block1203
  %692 = load i64, ptr %i1204, align 8, !dbg !4804
  %693 = load i64, ptr %slen, align 8, !dbg !4805
  %lt1206 = icmp ult i64 %692, %693, !dbg !4804
  br i1 %lt1206, label %loop.body1207, label %loop.exit1241, !dbg !4804

loop.body1207:                                    ; preds = %loop.cond1205
  %694 = load i64, ptr %i1204, align 8, !dbg !4806
  %neq1208 = icmp ne i64 0, %694, !dbg !4806
  br i1 %neq1208, label %if.then1209, label %if.exit1221, !dbg !4806

if.then1209:                                      ; preds = %loop.body1207
  %695 = load i64, ptr %len1193, align 8, !dbg !4808
  %696 = load ptr, ptr %self, align 8
  %697 = call i64 @std.io.Formatter.out_substr(ptr %retparam1211, ptr %696, ptr @.str.210, i64 2), !dbg !4809
  %not_err1212 = icmp eq i64 %697, 0, !dbg !4809
  %698 = call i1 @llvm.expect.i1(i1 %not_err1212, i1 true), !dbg !4809
  br i1 %698, label %after_check1214, label %assign_optional1213, !dbg !4809

assign_optional1213:                              ; preds = %if.then1209
  store i64 %697, ptr %error_var1210, align 8, !dbg !4809
  br label %guard_block1215, !dbg !4809

after_check1214:                                  ; preds = %if.then1209
  br label %noerr_block1219, !dbg !4809

guard_block1215:                                  ; preds = %assign_optional1213
  %699 = load ptr, ptr %self, align 8, !dbg !4810
  %ptradd1216 = getelementptr inbounds i8, ptr %699, i64 16, !dbg !4810
  %700 = load i32, ptr %flags1156, align 4, !dbg !4812
  store i32 %700, ptr %ptradd1216, align 8, !dbg !4812
  %701 = load ptr, ptr %self, align 8, !dbg !4813
  %ptradd1217 = getelementptr inbounds i8, ptr %701, i64 16, !dbg !4813
  %ptradd1218 = getelementptr inbounds i8, ptr %ptradd1217, i64 4, !dbg !4813
  %702 = load i32, ptr %width1158, align 4, !dbg !4814
  store i32 %702, ptr %ptradd1218, align 4, !dbg !4814
  %703 = load i64, ptr %error_var1210, align 8, !dbg !4814
  ret i64 %703, !dbg !4814

noerr_block1219:                                  ; preds = %after_check1214
  %704 = load i64, ptr %retparam1211, align 8, !dbg !4814
  %add1220 = add i64 %695, %704, !dbg !4808
  store i64 %add1220, ptr %len1193, align 8, !dbg !4808
  br label %if.exit1221, !dbg !4808

if.exit1221:                                      ; preds = %noerr_block1219, %loop.body1207
  %705 = load i64, ptr %len1193, align 8, !dbg !4815
  %706 = load ptr, ptr %ptr1169, align 8
  store ptr %706, ptr %ptr1223, align 8
  %707 = load i64, ptr %inner1130, align 8
  store i64 %707, ptr %type1224, align 8
  %708 = load ptr, ptr %ptr1223, align 8, !dbg !4816
  %709 = load i64, ptr %type1224, align 8, !dbg !4819
  %710 = insertvalue %any undef, ptr %708, 0, !dbg !4819
  %711 = insertvalue %any %710, i64 %709, 1, !dbg !4819
  %712 = load ptr, ptr %self, align 8
  store %any %711, ptr %taddr1226, align 8
  %lo1227 = load i64, ptr %taddr1226, align 8
  %ptradd1228 = getelementptr inbounds i8, ptr %taddr1226, i64 8
  %hi1229 = load ptr, ptr %ptradd1228, align 8
  %713 = call i64 @std.io.Formatter.out_str(ptr %retparam1225, ptr %712, i64 %lo1227, ptr %hi1229), !dbg !4820
  %not_err1230 = icmp eq i64 %713, 0, !dbg !4820
  %714 = call i1 @llvm.expect.i1(i1 %not_err1230, i1 true), !dbg !4820
  br i1 %714, label %after_check1232, label %assign_optional1231, !dbg !4820

assign_optional1231:                              ; preds = %if.exit1221
  store i64 %713, ptr %error_var1222, align 8, !dbg !4820
  br label %guard_block1233, !dbg !4820

after_check1232:                                  ; preds = %if.exit1221
  br label %noerr_block1237, !dbg !4820

guard_block1233:                                  ; preds = %assign_optional1231
  %715 = load ptr, ptr %self, align 8, !dbg !4821
  %ptradd1234 = getelementptr inbounds i8, ptr %715, i64 16, !dbg !4821
  %716 = load i32, ptr %flags1156, align 4, !dbg !4823
  store i32 %716, ptr %ptradd1234, align 8, !dbg !4823
  %717 = load ptr, ptr %self, align 8, !dbg !4824
  %ptradd1235 = getelementptr inbounds i8, ptr %717, i64 16, !dbg !4824
  %ptradd1236 = getelementptr inbounds i8, ptr %ptradd1235, i64 4, !dbg !4824
  %718 = load i32, ptr %width1158, align 4, !dbg !4825
  store i32 %718, ptr %ptradd1236, align 4, !dbg !4825
  %719 = load i64, ptr %error_var1222, align 8, !dbg !4825
  ret i64 %719, !dbg !4825

noerr_block1237:                                  ; preds = %after_check1232
  %720 = load i64, ptr %retparam1225, align 8, !dbg !4825
  %add1238 = add i64 %705, %720, !dbg !4815
  store i64 %add1238, ptr %len1193, align 8, !dbg !4815
  %721 = load ptr, ptr %ptr1169, align 8, !dbg !4826
  %722 = load i64, ptr %size1164, align 8, !dbg !4827
  %ptradd_any1239 = getelementptr i8, ptr %721, i64 %722, !dbg !4826
  store ptr %ptradd_any1239, ptr %ptr1169, align 8, !dbg !4826
  %723 = load i64, ptr %i1204, align 8, !dbg !4828
  %add1240 = add i64 %723, 1, !dbg !4828
  store i64 %add1240, ptr %i1204, align 8, !dbg !4828
  br label %loop.cond1205, !dbg !4828

loop.exit1241:                                    ; preds = %loop.cond1205
  %724 = load i64, ptr %len1193, align 8, !dbg !4829
  %725 = load ptr, ptr %self, align 8
  %726 = call i64 @std.io.Formatter.out(ptr %retparam1243, ptr %725, i8 zeroext 93), !dbg !4830
  %not_err1244 = icmp eq i64 %726, 0, !dbg !4830
  %727 = call i1 @llvm.expect.i1(i1 %not_err1244, i1 true), !dbg !4830
  br i1 %727, label %after_check1246, label %assign_optional1245, !dbg !4830

assign_optional1245:                              ; preds = %loop.exit1241
  store i64 %726, ptr %error_var1242, align 8, !dbg !4830
  br label %guard_block1247, !dbg !4830

after_check1246:                                  ; preds = %loop.exit1241
  br label %noerr_block1251, !dbg !4830

guard_block1247:                                  ; preds = %assign_optional1245
  %728 = load ptr, ptr %self, align 8, !dbg !4831
  %ptradd1248 = getelementptr inbounds i8, ptr %728, i64 16, !dbg !4831
  %729 = load i32, ptr %flags1156, align 4, !dbg !4833
  store i32 %729, ptr %ptradd1248, align 8, !dbg !4833
  %730 = load ptr, ptr %self, align 8, !dbg !4834
  %ptradd1249 = getelementptr inbounds i8, ptr %730, i64 16, !dbg !4834
  %ptradd1250 = getelementptr inbounds i8, ptr %ptradd1249, i64 4, !dbg !4834
  %731 = load i32, ptr %width1158, align 4, !dbg !4835
  store i32 %731, ptr %ptradd1250, align 4, !dbg !4835
  %732 = load i64, ptr %error_var1242, align 8, !dbg !4835
  ret i64 %732, !dbg !4835

noerr_block1251:                                  ; preds = %after_check1246
  %733 = load i64, ptr %retparam1243, align 8, !dbg !4835
  %add1252 = add i64 %724, %733, !dbg !4829
  store i64 %add1252, ptr %len1193, align 8, !dbg !4829
  %734 = load i64, ptr %len1193, align 8, !dbg !4836
  %735 = load ptr, ptr %self, align 8, !dbg !4837
  %ptradd1254 = getelementptr inbounds i8, ptr %735, i64 16, !dbg !4837
  %736 = load i32, ptr %flags1156, align 4, !dbg !4839
  store i32 %736, ptr %ptradd1254, align 8, !dbg !4839
  %737 = load ptr, ptr %self, align 8, !dbg !4840
  %ptradd1255 = getelementptr inbounds i8, ptr %737, i64 16, !dbg !4840
  %ptradd1256 = getelementptr inbounds i8, ptr %ptradd1255, i64 4, !dbg !4840
  %738 = load i32, ptr %width1158, align 4, !dbg !4841
  store i32 %738, ptr %ptradd1256, align 4, !dbg !4841
  store i64 %734, ptr %0, align 8, !dbg !4841
  ret i64 0, !dbg !4841

switch.case1257:                                  ; preds = %switch.entry141, %switch.entry141
  store %"char[]" { ptr @.str.211, i64 15 }, ptr %string1258, align 8
  %lo1259 = load ptr, ptr %string1258, align 8, !dbg !4842
  %ptradd1260 = getelementptr inbounds i8, ptr %string1258, i64 8, !dbg !4842
  %hi1261 = load i64, ptr %ptradd1260, align 8, !dbg !4842
  store %"any[]" zeroinitializer, ptr %indirectarg1262, align 8
  call void @std.core.builtin.panicf(ptr %lo1259, i64 %hi1261, ptr @.str.212, i64 12, ptr @.str.213, i64 17, i32 320, ptr byval(%"any[]") align 8 %indirectarg1262), !dbg !4846
  unreachable, !dbg !4847

switch.exit1263:                                  ; preds = %switch.entry141
  %739 = load ptr, ptr %self, align 8
  %740 = call i64 @std.io.Formatter.out_substr(ptr %retparam1265, ptr %739, ptr @.str.214, i64 12), !dbg !4848
  %not_err1266 = icmp eq i64 %740, 0, !dbg !4848
  %741 = call i1 @llvm.expect.i1(i1 %not_err1266, i1 true), !dbg !4848
  br i1 %741, label %after_check1268, label %assign_optional1267, !dbg !4848

assign_optional1267:                              ; preds = %switch.exit1263
  store i64 %740, ptr %reterr1264, align 8, !dbg !4848
  br label %err_retblock1269, !dbg !4848

after_check1268:                                  ; preds = %switch.exit1263
  %742 = load i64, ptr %retparam1265, align 8, !dbg !4848
  store i64 %742, ptr %0, align 8, !dbg !4848
  ret i64 0, !dbg !4848

err_retblock1269:                                 ; preds = %assign_optional1267
  %743 = load i64, ptr %reterr1264, align 8, !dbg !4848
  ret i64 %743, !dbg !4848

panic:                                            ; preds = %entry
  %744 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4246
  call void %744(ptr @.panic_msg, i64 62, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 141) #5, !dbg !4246
  unreachable, !dbg !4246

panic11:                                          ; preds = %switch.case9
  %745 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4257
  call void %745(ptr @.panic_msg.14, i64 42, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 150) #5, !dbg !4257
  unreachable, !dbg !4257

panic13:                                          ; preds = %checkok12
  store i64 8, ptr %taddr, align 8
  %746 = insertvalue %any undef, ptr %taddr, 0
  %747 = insertvalue %any %746, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr14, align 8
  %748 = insertvalue %any undef, ptr %taddr14, 0
  %749 = insertvalue %any %748, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %747, ptr %varargslots, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %749, ptr %ptradd15, align 16
  %750 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %750, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 150, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !4257
  unreachable, !dbg !4257

panic26:                                          ; preds = %switch.case23
  %751 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4259
  call void %751(ptr @.panic_msg.14, i64 42, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 153) #5, !dbg !4259
  unreachable, !dbg !4259

panic28:                                          ; preds = %checkok27
  store i64 8, ptr %taddr29, align 8
  %752 = insertvalue %any undef, ptr %taddr29, 0
  %753 = insertvalue %any %752, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr30, align 8
  %754 = insertvalue %any undef, ptr %taddr30, 0
  %755 = insertvalue %any %754, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %753, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %755, ptr %ptradd32, align 16
  %756 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %756, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 153, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !4259
  unreachable, !dbg !4259

panic110:                                         ; preds = %switch.case107
  %757 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4315
  call void %757(ptr @.panic_msg.14, i64 42, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 180) #5, !dbg !4315
  unreachable, !dbg !4315

panic157:                                         ; preds = %assert_ok155
  %758 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4346
  call void %758(ptr @.panic_msg.2, i64 45, ptr @.file.15, i64 10, ptr @.func.180, i64 7, i32 241) #5, !dbg !4346
  unreachable, !dbg !4346

panic159:                                         ; preds = %checkok158
  store i64 8, ptr %taddr160, align 8
  %759 = insertvalue %any undef, ptr %taddr160, 0
  %760 = insertvalue %any %759, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %126, ptr %taddr161, align 8
  %761 = insertvalue %any undef, ptr %taddr161, 0
  %762 = insertvalue %any %761, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %760, ptr %varargslots162, align 16
  %ptradd163 = getelementptr inbounds i8, ptr %varargslots162, i64 16
  store %any %762, ptr %ptradd163, align 16
  %763 = insertvalue %"any[]" undef, ptr %varargslots162, 0
  %"$$temp164" = insertvalue %"any[]" %763, i64 2, 1
  store %"any[]" %"$$temp164", ptr %indirectarg165, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.15, i64 10, ptr @.func.180, i64 7, i32 241, ptr byval(%"any[]") align 8 %indirectarg165) #5, !dbg !4346
  unreachable, !dbg !4346

panic168:                                         ; preds = %checkok166
  %764 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4347
  call void %764(ptr @.panic_msg.2, i64 45, ptr @.file.15, i64 10, ptr @.func.180, i64 7, i32 241) #5, !dbg !4347
  unreachable, !dbg !4347

panic170:                                         ; preds = %checkok169
  store i64 8, ptr %taddr171, align 8
  %765 = insertvalue %any undef, ptr %taddr171, 0
  %766 = insertvalue %any %765, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %133, ptr %taddr172, align 8
  %767 = insertvalue %any undef, ptr %taddr172, 0
  %768 = insertvalue %any %767, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %766, ptr %varargslots173, align 16
  %ptradd174 = getelementptr inbounds i8, ptr %varargslots173, i64 16
  store %any %768, ptr %ptradd174, align 16
  %769 = insertvalue %"any[]" undef, ptr %varargslots173, 0
  %"$$temp175" = insertvalue %"any[]" %769, i64 2, 1
  store %"any[]" %"$$temp175", ptr %indirectarg176, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.15, i64 10, ptr @.func.180, i64 7, i32 241, ptr byval(%"any[]") align 8 %indirectarg176) #5, !dbg !4347
  unreachable, !dbg !4347

panic218:                                         ; preds = %switch.case216
  %770 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4375
  call void %770(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 31) #5, !dbg !4375
  unreachable, !dbg !4375

panic232:                                         ; preds = %switch.case230
  %771 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4385
  call void %771(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 35) #5, !dbg !4385
  unreachable, !dbg !4385

panic234:                                         ; preds = %checkok233
  store i64 2, ptr %taddr235, align 8
  %772 = insertvalue %any undef, ptr %taddr235, 0
  %773 = insertvalue %any %772, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %171, ptr %taddr236, align 8
  %774 = insertvalue %any undef, ptr %taddr236, 0
  %775 = insertvalue %any %774, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %773, ptr %varargslots237, align 16
  %ptradd238 = getelementptr inbounds i8, ptr %varargslots237, i64 16
  store %any %775, ptr %ptradd238, align 16
  %776 = insertvalue %"any[]" undef, ptr %varargslots237, 0
  %"$$temp239" = insertvalue %"any[]" %776, i64 2, 1
  store %"any[]" %"$$temp239", ptr %indirectarg240, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 35, ptr byval(%"any[]") align 8 %indirectarg240) #5, !dbg !4385
  unreachable, !dbg !4385

panic267:                                         ; preds = %switch.case264
  %777 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4400
  call void %777(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 40) #5, !dbg !4400
  unreachable, !dbg !4400

panic269:                                         ; preds = %checkok268
  store i64 4, ptr %taddr270, align 8
  %778 = insertvalue %any undef, ptr %taddr270, 0
  %779 = insertvalue %any %778, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %190, ptr %taddr271, align 8
  %780 = insertvalue %any undef, ptr %taddr271, 0
  %781 = insertvalue %any %780, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %779, ptr %varargslots272, align 16
  %ptradd273 = getelementptr inbounds i8, ptr %varargslots272, i64 16
  store %any %781, ptr %ptradd273, align 16
  %782 = insertvalue %"any[]" undef, ptr %varargslots272, 0
  %"$$temp274" = insertvalue %"any[]" %782, i64 2, 1
  store %"any[]" %"$$temp274", ptr %indirectarg275, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 40, ptr byval(%"any[]") align 8 %indirectarg275) #5, !dbg !4400
  unreachable, !dbg !4400

panic306:                                         ; preds = %switch.case304
  %783 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4415
  call void %783(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 45) #5, !dbg !4415
  unreachable, !dbg !4415

panic308:                                         ; preds = %checkok307
  store i64 8, ptr %taddr309, align 8
  %784 = insertvalue %any undef, ptr %taddr309, 0
  %785 = insertvalue %any %784, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %209, ptr %taddr310, align 8
  %786 = insertvalue %any undef, ptr %taddr310, 0
  %787 = insertvalue %any %786, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %785, ptr %varargslots311, align 16
  %ptradd312 = getelementptr inbounds i8, ptr %varargslots311, i64 16
  store %any %787, ptr %ptradd312, align 16
  %788 = insertvalue %"any[]" undef, ptr %varargslots311, 0
  %"$$temp313" = insertvalue %"any[]" %788, i64 2, 1
  store %"any[]" %"$$temp313", ptr %indirectarg314, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 45, ptr byval(%"any[]") align 8 %indirectarg314) #5, !dbg !4415
  unreachable, !dbg !4415

panic343:                                         ; preds = %switch.case340
  %789 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4430
  call void %789(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 50) #5, !dbg !4430
  unreachable, !dbg !4430

panic345:                                         ; preds = %checkok344
  store i64 16, ptr %taddr346, align 8
  %790 = insertvalue %any undef, ptr %taddr346, 0
  %791 = insertvalue %any %790, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %228, ptr %taddr347, align 8
  %792 = insertvalue %any undef, ptr %taddr347, 0
  %793 = insertvalue %any %792, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %791, ptr %varargslots348, align 16
  %ptradd349 = getelementptr inbounds i8, ptr %varargslots348, i64 16
  store %any %793, ptr %ptradd349, align 16
  %794 = insertvalue %"any[]" undef, ptr %varargslots348, 0
  %"$$temp350" = insertvalue %"any[]" %794, i64 2, 1
  store %"any[]" %"$$temp350", ptr %indirectarg351, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 50, ptr byval(%"any[]") align 8 %indirectarg351) #5, !dbg !4430
  unreachable, !dbg !4430

panic381:                                         ; preds = %switch.case378
  %795 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4445
  call void %795(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 55) #5, !dbg !4445
  unreachable, !dbg !4445

panic398:                                         ; preds = %switch.case395
  %796 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4455
  call void %796(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 59) #5, !dbg !4455
  unreachable, !dbg !4455

panic400:                                         ; preds = %checkok399
  store i64 2, ptr %taddr401, align 8
  %797 = insertvalue %any undef, ptr %taddr401, 0
  %798 = insertvalue %any %797, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %257, ptr %taddr402, align 8
  %799 = insertvalue %any undef, ptr %taddr402, 0
  %800 = insertvalue %any %799, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %798, ptr %varargslots403, align 16
  %ptradd404 = getelementptr inbounds i8, ptr %varargslots403, i64 16
  store %any %800, ptr %ptradd404, align 16
  %801 = insertvalue %"any[]" undef, ptr %varargslots403, 0
  %"$$temp405" = insertvalue %"any[]" %801, i64 2, 1
  store %"any[]" %"$$temp405", ptr %indirectarg406, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 59, ptr byval(%"any[]") align 8 %indirectarg406) #5, !dbg !4455
  unreachable, !dbg !4455

panic428:                                         ; preds = %switch.case425
  %802 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4467
  call void %802(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 63) #5, !dbg !4467
  unreachable, !dbg !4467

panic430:                                         ; preds = %checkok429
  store i64 4, ptr %taddr431, align 8
  %803 = insertvalue %any undef, ptr %taddr431, 0
  %804 = insertvalue %any %803, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %273, ptr %taddr432, align 8
  %805 = insertvalue %any undef, ptr %taddr432, 0
  %806 = insertvalue %any %805, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %804, ptr %varargslots433, align 16
  %ptradd434 = getelementptr inbounds i8, ptr %varargslots433, i64 16
  store %any %806, ptr %ptradd434, align 16
  %807 = insertvalue %"any[]" undef, ptr %varargslots433, 0
  %"$$temp435" = insertvalue %"any[]" %807, i64 2, 1
  store %"any[]" %"$$temp435", ptr %indirectarg436, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 63, ptr byval(%"any[]") align 8 %indirectarg436) #5, !dbg !4467
  unreachable, !dbg !4467

panic458:                                         ; preds = %switch.case455
  %808 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4479
  call void %808(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 67) #5, !dbg !4479
  unreachable, !dbg !4479

panic460:                                         ; preds = %checkok459
  store i64 8, ptr %taddr461, align 8
  %809 = insertvalue %any undef, ptr %taddr461, 0
  %810 = insertvalue %any %809, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %289, ptr %taddr462, align 8
  %811 = insertvalue %any undef, ptr %taddr462, 0
  %812 = insertvalue %any %811, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %810, ptr %varargslots463, align 16
  %ptradd464 = getelementptr inbounds i8, ptr %varargslots463, i64 16
  store %any %812, ptr %ptradd464, align 16
  %813 = insertvalue %"any[]" undef, ptr %varargslots463, 0
  %"$$temp465" = insertvalue %"any[]" %813, i64 2, 1
  store %"any[]" %"$$temp465", ptr %indirectarg466, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 67, ptr byval(%"any[]") align 8 %indirectarg466) #5, !dbg !4479
  unreachable, !dbg !4479

panic485:                                         ; preds = %switch.case482
  %814 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4491
  call void %814(ptr @.panic_msg.14, i64 42, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 71) #5, !dbg !4491
  unreachable, !dbg !4491

panic487:                                         ; preds = %checkok486
  store i64 16, ptr %taddr488, align 8
  %815 = insertvalue %any undef, ptr %taddr488, 0
  %816 = insertvalue %any %815, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %305, ptr %taddr489, align 8
  %817 = insertvalue %any undef, ptr %taddr489, 0
  %818 = insertvalue %any %817, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %816, ptr %varargslots490, align 16
  %ptradd491 = getelementptr inbounds i8, ptr %varargslots490, i64 16
  store %any %818, ptr %ptradd491, align 16
  %819 = insertvalue %"any[]" undef, ptr %varargslots490, 0
  %"$$temp492" = insertvalue %"any[]" %819, i64 2, 1
  store %"any[]" %"$$temp492", ptr %indirectarg493, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.61, i64 8, ptr @.func.180, i64 7, i32 71, ptr byval(%"any[]") align 8 %indirectarg493) #5, !dbg !4491
  unreachable, !dbg !4491

panic541:                                         ; preds = %check_type_ok537
  store i64 %331, ptr %taddr542, align 8
  %820 = insertvalue %any undef, ptr %taddr542, 0
  %821 = insertvalue %any %820, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %333, ptr %taddr543, align 8
  %822 = insertvalue %any undef, ptr %taddr543, 0
  %823 = insertvalue %any %822, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %821, ptr %varargslots544, align 16
  %ptradd545 = getelementptr inbounds i8, ptr %varargslots544, i64 16
  store %any %823, ptr %ptradd545, align 16
  %824 = insertvalue %"any[]" undef, ptr %varargslots544, 0
  %"$$temp546" = insertvalue %"any[]" %824, i64 2, 1
  store %"any[]" %"$$temp546", ptr %indirectarg547, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 191, ptr byval(%"any[]") align 8 %indirectarg547) #5, !dbg !4508
  unreachable, !dbg !4508

panic626:                                         ; preds = %if.then623
  %825 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4544
  call void %825(ptr @.panic_msg.14, i64 42, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 211) #5, !dbg !4544
  unreachable, !dbg !4544

panic628:                                         ; preds = %checkok627
  store i64 8, ptr %taddr629, align 8
  %826 = insertvalue %any undef, ptr %taddr629, 0
  %827 = insertvalue %any %826, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %386, ptr %taddr630, align 8
  %828 = insertvalue %any undef, ptr %taddr630, 0
  %829 = insertvalue %any %828, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %827, ptr %varargslots631, align 16
  %ptradd632 = getelementptr inbounds i8, ptr %varargslots631, i64 16
  store %any %829, ptr %ptradd632, align 16
  %830 = insertvalue %"any[]" undef, ptr %varargslots631, 0
  %"$$temp633" = insertvalue %"any[]" %830, i64 2, 1
  store %"any[]" %"$$temp633", ptr %indirectarg634, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 211, ptr byval(%"any[]") align 8 %indirectarg634) #5, !dbg !4544
  unreachable, !dbg !4544

panic650:                                         ; preds = %if.then647
  %831 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4548
  call void %831(ptr @.panic_msg.14, i64 42, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 215) #5, !dbg !4548
  unreachable, !dbg !4548

panic652:                                         ; preds = %checkok651
  store i64 8, ptr %taddr653, align 8
  %832 = insertvalue %any undef, ptr %taddr653, 0
  %833 = insertvalue %any %832, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %398, ptr %taddr654, align 8
  %834 = insertvalue %any undef, ptr %taddr654, 0
  %835 = insertvalue %any %834, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %833, ptr %varargslots655, align 16
  %ptradd656 = getelementptr inbounds i8, ptr %varargslots655, i64 16
  store %any %835, ptr %ptradd656, align 16
  %836 = insertvalue %"any[]" undef, ptr %varargslots655, 0
  %"$$temp657" = insertvalue %"any[]" %836, i64 2, 1
  store %"any[]" %"$$temp657", ptr %indirectarg658, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 215, ptr byval(%"any[]") align 8 %indirectarg658) #5, !dbg !4548
  unreachable, !dbg !4548

panic662:                                         ; preds = %cond.lhs
  %837 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4550
  call void %837(ptr @.panic_msg.14, i64 42, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 215) #5, !dbg !4550
  unreachable, !dbg !4550

panic664:                                         ; preds = %checkok663
  store i64 8, ptr %taddr665, align 8
  %838 = insertvalue %any undef, ptr %taddr665, 0
  %839 = insertvalue %any %838, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %405, ptr %taddr666, align 8
  %840 = insertvalue %any undef, ptr %taddr666, 0
  %841 = insertvalue %any %840, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %839, ptr %varargslots667, align 16
  %ptradd668 = getelementptr inbounds i8, ptr %varargslots667, i64 16
  store %any %841, ptr %ptradd668, align 16
  %842 = insertvalue %"any[]" undef, ptr %varargslots667, 0
  %"$$temp669" = insertvalue %"any[]" %842, i64 2, 1
  store %"any[]" %"$$temp669", ptr %indirectarg670, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 215, ptr byval(%"any[]") align 8 %indirectarg670) #5, !dbg !4550
  unreachable, !dbg !4550

panic685:                                         ; preds = %if.then682
  %843 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4554
  call void %843(ptr @.panic_msg.14, i64 42, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 219) #5, !dbg !4554
  unreachable, !dbg !4554

panic687:                                         ; preds = %checkok686
  store i64 8, ptr %taddr688, align 8
  %844 = insertvalue %any undef, ptr %taddr688, 0
  %845 = insertvalue %any %844, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %422, ptr %taddr689, align 8
  %846 = insertvalue %any undef, ptr %taddr689, 0
  %847 = insertvalue %any %846, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %845, ptr %varargslots690, align 16
  %ptradd691 = getelementptr inbounds i8, ptr %varargslots690, i64 16
  store %any %847, ptr %ptradd691, align 16
  %848 = insertvalue %"any[]" undef, ptr %varargslots690, 0
  %"$$temp692" = insertvalue %"any[]" %848, i64 2, 1
  store %"any[]" %"$$temp692", ptr %indirectarg693, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 219, ptr byval(%"any[]") align 8 %indirectarg693) #5, !dbg !4554
  unreachable, !dbg !4554

panic698:                                         ; preds = %cond.lhs696
  %849 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4556
  call void %849(ptr @.panic_msg.14, i64 42, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 219) #5, !dbg !4556
  unreachable, !dbg !4556

panic700:                                         ; preds = %checkok699
  store i64 8, ptr %taddr701, align 8
  %850 = insertvalue %any undef, ptr %taddr701, 0
  %851 = insertvalue %any %850, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %429, ptr %taddr702, align 8
  %852 = insertvalue %any undef, ptr %taddr702, 0
  %853 = insertvalue %any %852, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %851, ptr %varargslots703, align 16
  %ptradd704 = getelementptr inbounds i8, ptr %varargslots703, i64 16
  store %any %853, ptr %ptradd704, align 16
  %854 = insertvalue %"any[]" undef, ptr %varargslots703, 0
  %"$$temp705" = insertvalue %"any[]" %854, i64 2, 1
  store %"any[]" %"$$temp705", ptr %indirectarg706, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 219, ptr byval(%"any[]") align 8 %indirectarg706) #5, !dbg !4556
  unreachable, !dbg !4556

panic725:                                         ; preds = %assert_ok723
  %855 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4563
  call void %855(ptr @.panic_msg.2, i64 45, ptr @.file.15, i64 10, ptr @.func.180, i64 7, i32 241) #5, !dbg !4563
  unreachable, !dbg !4563

panic727:                                         ; preds = %checkok726
  store i64 8, ptr %taddr728, align 8
  %856 = insertvalue %any undef, ptr %taddr728, 0
  %857 = insertvalue %any %856, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %447, ptr %taddr729, align 8
  %858 = insertvalue %any undef, ptr %taddr729, 0
  %859 = insertvalue %any %858, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %857, ptr %varargslots730, align 16
  %ptradd731 = getelementptr inbounds i8, ptr %varargslots730, i64 16
  store %any %859, ptr %ptradd731, align 16
  %860 = insertvalue %"any[]" undef, ptr %varargslots730, 0
  %"$$temp732" = insertvalue %"any[]" %860, i64 2, 1
  store %"any[]" %"$$temp732", ptr %indirectarg733, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.15, i64 10, ptr @.func.180, i64 7, i32 241, ptr byval(%"any[]") align 8 %indirectarg733) #5, !dbg !4563
  unreachable, !dbg !4563

panic736:                                         ; preds = %checkok734
  %861 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4564
  call void %861(ptr @.panic_msg.2, i64 45, ptr @.file.15, i64 10, ptr @.func.180, i64 7, i32 241) #5, !dbg !4564
  unreachable, !dbg !4564

panic738:                                         ; preds = %checkok737
  store i64 8, ptr %taddr739, align 8
  %862 = insertvalue %any undef, ptr %taddr739, 0
  %863 = insertvalue %any %862, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %454, ptr %taddr740, align 8
  %864 = insertvalue %any undef, ptr %taddr740, 0
  %865 = insertvalue %any %864, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %863, ptr %varargslots741, align 16
  %ptradd742 = getelementptr inbounds i8, ptr %varargslots741, i64 16
  store %any %865, ptr %ptradd742, align 16
  %866 = insertvalue %"any[]" undef, ptr %varargslots741, 0
  %"$$temp743" = insertvalue %"any[]" %866, i64 2, 1
  store %"any[]" %"$$temp743", ptr %indirectarg744, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.15, i64 10, ptr @.func.180, i64 7, i32 241, ptr byval(%"any[]") align 8 %indirectarg744) #5, !dbg !4564
  unreachable, !dbg !4564

panic825:                                         ; preds = %if.then823
  %867 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4578
  call void %867(ptr @.panic_msg.202, i64 48, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 227) #5, !dbg !4578
  unreachable, !dbg !4578

panic827:                                         ; preds = %checkok826
  store i64 8, ptr %taddr828, align 8
  %868 = insertvalue %any undef, ptr %taddr828, 0
  %869 = insertvalue %any %868, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %474, ptr %taddr829, align 8
  %870 = insertvalue %any undef, ptr %taddr829, 0
  %871 = insertvalue %any %870, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %869, ptr %varargslots830, align 16
  %ptradd831 = getelementptr inbounds i8, ptr %varargslots830, i64 16
  store %any %871, ptr %ptradd831, align 16
  %872 = insertvalue %"any[]" undef, ptr %varargslots830, 0
  %"$$temp832" = insertvalue %"any[]" %872, i64 2, 1
  store %"any[]" %"$$temp832", ptr %indirectarg833, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 227, ptr byval(%"any[]") align 8 %indirectarg833) #5, !dbg !4578
  unreachable, !dbg !4578

panic1171:                                        ; preds = %if.exit1155
  %873 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4788
  call void %873(ptr @.panic_msg.209, i64 45, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 307) #5, !dbg !4788
  unreachable, !dbg !4788

panic1173:                                        ; preds = %checkok1172
  store i64 8, ptr %taddr1174, align 8
  %874 = insertvalue %any undef, ptr %taddr1174, 0
  %875 = insertvalue %any %874, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %672, ptr %taddr1175, align 8
  %876 = insertvalue %any undef, ptr %taddr1175, 0
  %877 = insertvalue %any %876, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %875, ptr %varargslots1176, align 16
  %ptradd1177 = getelementptr inbounds i8, ptr %varargslots1176, i64 16
  store %any %877, ptr %ptradd1177, align 16
  %878 = insertvalue %"any[]" undef, ptr %varargslots1176, 0
  %"$$temp1178" = insertvalue %"any[]" %878, i64 2, 1
  store %"any[]" %"$$temp1178", ptr %indirectarg1179, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 307, ptr byval(%"any[]") align 8 %indirectarg1179) #5, !dbg !4788
  unreachable, !dbg !4788

panic1182:                                        ; preds = %checkok1180
  %879 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4791
  call void %879(ptr @.panic_msg.209, i64 45, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 308) #5, !dbg !4791
  unreachable, !dbg !4791

panic1184:                                        ; preds = %checkok1183
  store i64 8, ptr %taddr1185, align 8
  %880 = insertvalue %any undef, ptr %taddr1185, 0
  %881 = insertvalue %any %880, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %679, ptr %taddr1186, align 8
  %882 = insertvalue %any undef, ptr %taddr1186, 0
  %883 = insertvalue %any %882, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %881, ptr %varargslots1187, align 16
  %ptradd1188 = getelementptr inbounds i8, ptr %varargslots1187, i64 16
  store %any %883, ptr %ptradd1188, align 16
  %884 = insertvalue %"any[]" undef, ptr %varargslots1187, 0
  %"$$temp1189" = insertvalue %"any[]" %884, i64 2, 1
  store %"any[]" %"$$temp1189", ptr %indirectarg1190, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.164, i64 12, ptr @.func.180, i64 7, i32 308, ptr byval(%"any[]") align 8 %indirectarg1190) #5, !dbg !4791
  unreachable, !dbg !4791
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.vprintf(ptr %0, ptr %1, ptr %2, i64 %3, ptr %4, i64 %5) #0 comdat !dbg !4849 {
entry:
  %self = alloca ptr, align 8
  %format = alloca %"char[]", align 8
  %anys = alloca %"any[]", align 8
  %total_len = alloca i64, align 8
  %format_len = alloca i64, align 8
  %variant_index = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %f = alloca ptr, align 8
  %retparam18 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %error_var34 = alloca i64, align 8
  %retparam35 = alloca i64, align 8
  %switch = alloca i8, align 1
  %reterr57 = alloca i64, align 8
  %f58 = alloca ptr, align 8
  %retparam59 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %taddr68 = alloca i64, align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %w = alloca i32, align 4
  %w.f = alloca i64, align 8
  %retparam77 = alloca i32, align 4
  %temp_err = alloca i64, align 8
  %reterr85 = alloca i64, align 8
  %f86 = alloca ptr, align 8
  %retparam87 = alloca i64, align 8
  %taddr95 = alloca i64, align 8
  %taddr96 = alloca i64, align 8
  %varargslots97 = alloca [2 x %any], align 16
  %indirectarg100 = alloca %"any[]", align 8
  %reterr117 = alloca i64, align 8
  %f118 = alloca ptr, align 8
  %retparam119 = alloca i64, align 8
  %prec = alloca i32, align 4
  %prec.f = alloca i64, align 8
  %retparam126 = alloca i32, align 4
  %temp_err131 = alloca i64, align 8
  %reterr140 = alloca i64, align 8
  %f141 = alloca ptr, align 8
  %retparam142 = alloca i64, align 8
  %taddr153 = alloca i64, align 8
  %taddr154 = alloca i64, align 8
  %varargslots155 = alloca [2 x %any], align 16
  %indirectarg158 = alloca %"any[]", align 8
  %base = alloca i32, align 4
  %self165 = alloca ptr, align 8
  %f166 = alloca i64, align 8
  %blockret = alloca i64, align 8
  %error_var177 = alloca i64, align 8
  %retparam178 = alloca i64, align 8
  %current = alloca %any, align 8
  %taddr190 = alloca i64, align 8
  %taddr191 = alloca i64, align 8
  %varargslots192 = alloca [2 x %any], align 16
  %indirectarg195 = alloca %"any[]", align 8
  %switch197 = alloca i8, align 1
  %error_var213 = alloca i64, align 8
  %f214 = alloca ptr, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam216 = alloca double, align 8
  %retparam221 = alloca i64, align 8
  %err = alloca i64, align 8
  %switch234 = alloca i64, align 8
  %self239 = alloca ptr, align 8
  %f240 = alloca i64, align 8
  %blockret241 = alloca i64, align 8
  %self257 = alloca ptr, align 8
  %f258 = alloca i64, align 8
  %blockret259 = alloca i64, align 8
  %error_var273 = alloca i64, align 8
  %retparam274 = alloca i64, align 8
  %error_var288 = alloca i64, align 8
  %f289 = alloca ptr, align 8
  %len291 = alloca i64, align 8
  %len.f292 = alloca i64, align 8
  %retparam293 = alloca double, align 8
  %retparam300 = alloca i64, align 8
  %err305 = alloca i64, align 8
  %switch314 = alloca i64, align 8
  %self320 = alloca ptr, align 8
  %f321 = alloca i64, align 8
  %blockret322 = alloca i64, align 8
  %self338 = alloca ptr, align 8
  %f339 = alloca i64, align 8
  %blockret340 = alloca i64, align 8
  %error_var354 = alloca i64, align 8
  %retparam355 = alloca i64, align 8
  %error_var369 = alloca i64, align 8
  %f370 = alloca ptr, align 8
  %len372 = alloca i64, align 8
  %len.f373 = alloca i64, align 8
  %retparam374 = alloca double, align 8
  %retparam381 = alloca i64, align 8
  %err386 = alloca i64, align 8
  %switch395 = alloca i64, align 8
  %self401 = alloca ptr, align 8
  %f402 = alloca i64, align 8
  %blockret403 = alloca i64, align 8
  %self419 = alloca ptr, align 8
  %f420 = alloca i64, align 8
  %blockret421 = alloca i64, align 8
  %error_var435 = alloca i64, align 8
  %retparam436 = alloca i64, align 8
  %error_var450 = alloca i64, align 8
  %f451 = alloca ptr, align 8
  %len453 = alloca i64, align 8
  %len.f454 = alloca i64, align 8
  %retparam455 = alloca double, align 8
  %retparam462 = alloca i64, align 8
  %err467 = alloca i64, align 8
  %switch476 = alloca i64, align 8
  %self482 = alloca ptr, align 8
  %f483 = alloca i64, align 8
  %blockret484 = alloca i64, align 8
  %self500 = alloca ptr, align 8
  %f501 = alloca i64, align 8
  %blockret502 = alloca i64, align 8
  %error_var516 = alloca i64, align 8
  %retparam517 = alloca i64, align 8
  %error_var529 = alloca i64, align 8
  %retparam530 = alloca i64, align 8
  %out = alloca %"char[]", align 8
  %switch544 = alloca i64, align 8
  %taddr559 = alloca i64, align 8
  %taddr560 = alloca i64, align 8
  %varargslots561 = alloca [2 x %any], align 16
  %indirectarg564 = alloca %"any[]", align 8
  %taddr616 = alloca ptr, align 8
  %taddr623 = alloca i64, align 8
  %varargslots624 = alloca [1 x %any], align 16
  %indirectarg626 = alloca %"any[]", align 8
  %error_var629 = alloca i64, align 8
  %retparam630 = alloca i64, align 8
  %len640 = alloca i64, align 8
  %error_var641 = alloca i64, align 8
  %retparam645 = alloca i64, align 8
  %error_var655 = alloca i64, align 8
  %retparam658 = alloca i64, align 8
  %error_var670 = alloca i64, align 8
  %retparam675 = alloca i64, align 8
  %error_var683 = alloca i64, align 8
  %retparam687 = alloca i64, align 8
  %len702 = alloca i64, align 8
  %error_var703 = alloca i64, align 8
  %retparam704 = alloca i64, align 8
  %error_var714 = alloca i64, align 8
  %retparam718 = alloca i64, align 8
  %out_fn = alloca ptr, align 8
  %len732 = alloca i64, align 8
  %error_var733 = alloca i64, align 8
  %retparam734 = alloca i64, align 8
  %error_var744 = alloca i64, align 8
  %retparam748 = alloca i64, align 8
  %error_var756 = alloca i64, align 8
  %retparam757 = alloca i64, align 8
  %self771 = alloca ptr, align 8
  %f772 = alloca i64, align 8
  %blockret773 = alloca i64, align 8
  %error_var787 = alloca i64, align 8
  %retparam788 = alloca i64, align 8
  %is_neg = alloca i8, align 1
  %error_var807 = alloca i64, align 8
  %f808 = alloca ptr, align 8
  %len810 = alloca i64, align 8
  %len.f811 = alloca i64, align 8
  %retparam812 = alloca i128, align 16
  %retparam819 = alloca i64, align 8
  %err827 = alloca i64, align 8
  %switch836 = alloca i64, align 8
  %self842 = alloca ptr, align 8
  %f843 = alloca i64, align 8
  %blockret844 = alloca i64, align 8
  %self860 = alloca ptr, align 8
  %f861 = alloca i64, align 8
  %blockret862 = alloca i64, align 8
  %error_var876 = alloca i64, align 8
  %retparam877 = alloca i64, align 8
  %reterr897 = alloca i64, align 8
  %6 = icmp eq ptr %1, null, !dbg !4850
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !4850
  br i1 %7, label %panic, label %checkok, !dbg !4850

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4851, !DIExpression(), !4852)
  store ptr %2, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %format, !4853, !DIExpression(), !4854)
  store ptr %4, ptr %anys, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %anys, i64 8
  store i64 %5, ptr %ptradd1, align 8
    #dbg_declare(ptr %anys, !4855, !DIExpression(), !4856)
  %8 = load ptr, ptr %self, align 8, !dbg !4857
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !4857
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 24, !dbg !4857
  store i64 0, ptr %ptradd3, align 8, !dbg !4858
  %9 = load ptr, ptr %self, align 8, !dbg !4859
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !4859
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !4859
  %i2nb = icmp eq ptr %10, null, !dbg !4859
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4859

if.then:                                          ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !4860
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !4860
  store ptr @std.io.out_null_fn, ptr %ptradd5, align 8, !dbg !4862
  br label %if.exit, !dbg !4862

if.exit:                                          ; preds = %if.then, %checkok
    #dbg_declare(ptr %total_len, !4863, !DIExpression(), !4864)
  store i64 0, ptr %total_len, align 8, !dbg !4864
    #dbg_declare(ptr %format_len, !4865, !DIExpression(), !4866)
  %ptradd6 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4867
  %12 = load i64, ptr %ptradd6, align 8, !dbg !4867
  store i64 %12, ptr %format_len, align 8, !dbg !4867
    #dbg_declare(ptr %variant_index, !4868, !DIExpression(), !4869)
  store i64 0, ptr %variant_index, align 8, !dbg !4870
    #dbg_declare(ptr %i, !4871, !DIExpression(), !4873)
  store i64 0, ptr %i, align 8, !dbg !4874
  br label %loop.cond, !dbg !4874

loop.cond:                                        ; preds = %loop.inc, %if.exit
  %13 = load i64, ptr %i, align 8, !dbg !4875
  %14 = load i64, ptr %format_len, align 8, !dbg !4876
  %lt = icmp ult i64 %13, %14, !dbg !4875
  br i1 %lt, label %loop.body, label %loop.exit889, !dbg !4875

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !4877, !DIExpression(), !4879)
  %ptradd7 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4880
  %15 = load i64, ptr %ptradd7, align 8, !dbg !4880
  %16 = load ptr, ptr %format, align 8, !dbg !4880
  %17 = load i64, ptr %i, align 8, !dbg !4881
  %ge = icmp uge i64 %17, %15, !dbg !4881
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4881
  br i1 %18, label %panic8, label %checkok11, !dbg !4881

checkok11:                                        ; preds = %loop.body
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 %17, !dbg !4881
  %19 = load i8, ptr %ptradd12, align 1, !dbg !4881
  store i8 %19, ptr %c, align 1, !dbg !4881
  %20 = load i8, ptr %c, align 1, !dbg !4882
  %neq = icmp ne i8 %20, 37, !dbg !4882
  br i1 %neq, label %if.then13, label %if.exit14, !dbg !4882

if.then13:                                        ; preds = %checkok11
  %21 = load i64, ptr %total_len, align 8, !dbg !4883
  %22 = load ptr, ptr %self, align 8
  %23 = load i8, ptr %c, align 1
  %24 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %22, i8 zeroext %23), !dbg !4885
  %not_err = icmp eq i64 %24, 0, !dbg !4885
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4885
  br i1 %25, label %after_check, label %assign_optional, !dbg !4885

assign_optional:                                  ; preds = %if.then13
  store i64 %24, ptr %error_var, align 8, !dbg !4885
  br label %guard_block, !dbg !4885

after_check:                                      ; preds = %if.then13
  br label %noerr_block, !dbg !4885

guard_block:                                      ; preds = %assign_optional
  %26 = load i64, ptr %error_var, align 8, !dbg !4885
  ret i64 %26, !dbg !4885

noerr_block:                                      ; preds = %after_check
  %27 = load i64, ptr %retparam, align 8, !dbg !4885
  %add = add i64 %21, %27, !dbg !4883
  store i64 %add, ptr %total_len, align 8, !dbg !4883
  br label %loop.inc, !dbg !4886

if.exit14:                                        ; preds = %checkok11
  %28 = load i64, ptr %i, align 8, !dbg !4887
  %add15 = add i64 %28, 1, !dbg !4887
  store i64 %add15, ptr %i, align 8, !dbg !4887
  %29 = load i64, ptr %i, align 8, !dbg !4888
  %30 = load i64, ptr %format_len, align 8, !dbg !4889
  %ge16 = icmp uge i64 %29, %30, !dbg !4888
  br i1 %ge16, label %if.then17, label %if.exit21, !dbg !4888

if.then17:                                        ; preds = %if.exit14
  %31 = load ptr, ptr %self, align 8
  store ptr %31, ptr %f, align 8
  %32 = load ptr, ptr %f, align 8
  %33 = call i64 @std.io.Formatter.out_substr(ptr %retparam18, ptr %32, ptr @.str.216, i64 4), !dbg !4890
  store i64 ptrtoint (ptr @std.io.INVALID_FORMAT to i64), ptr %reterr, align 8, !dbg !4893
  br label %err_retblock, !dbg !4893

err_retblock:                                     ; preds = %if.then17
  %34 = load i64, ptr %reterr, align 8, !dbg !4893
  ret i64 %34, !dbg !4893

if.exit21:                                        ; preds = %if.exit14
  %ptradd22 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4894
  %35 = load i64, ptr %ptradd22, align 8, !dbg !4894
  %36 = load ptr, ptr %format, align 8, !dbg !4894
  %37 = load i64, ptr %i, align 8, !dbg !4895
  %ge23 = icmp uge i64 %37, %35, !dbg !4895
  %38 = call i1 @llvm.expect.i1(i1 %ge23, i1 false), !dbg !4895
  br i1 %38, label %panic24, label %checkok31, !dbg !4895

checkok31:                                        ; preds = %if.exit21
  %ptradd32 = getelementptr inbounds i8, ptr %36, i64 %37, !dbg !4895
  %39 = load i8, ptr %ptradd32, align 1, !dbg !4895
  store i8 %39, ptr %c, align 1, !dbg !4895
  %40 = load i8, ptr %c, align 1, !dbg !4896
  %eq = icmp eq i8 %40, 37, !dbg !4896
  br i1 %eq, label %if.then33, label %if.exit42, !dbg !4896

if.then33:                                        ; preds = %checkok31
  %41 = load i64, ptr %total_len, align 8, !dbg !4897
  %42 = load ptr, ptr %self, align 8
  %43 = load i8, ptr %c, align 1
  %44 = call i64 @std.io.Formatter.out(ptr %retparam35, ptr %42, i8 zeroext %43), !dbg !4899
  %not_err36 = icmp eq i64 %44, 0, !dbg !4899
  %45 = call i1 @llvm.expect.i1(i1 %not_err36, i1 true), !dbg !4899
  br i1 %45, label %after_check38, label %assign_optional37, !dbg !4899

assign_optional37:                                ; preds = %if.then33
  store i64 %44, ptr %error_var34, align 8, !dbg !4899
  br label %guard_block39, !dbg !4899

after_check38:                                    ; preds = %if.then33
  br label %noerr_block40, !dbg !4899

guard_block39:                                    ; preds = %assign_optional37
  %46 = load i64, ptr %error_var34, align 8, !dbg !4899
  ret i64 %46, !dbg !4899

noerr_block40:                                    ; preds = %after_check38
  %47 = load i64, ptr %retparam35, align 8, !dbg !4899
  %add41 = add i64 %41, %47, !dbg !4897
  store i64 %add41, ptr %total_len, align 8, !dbg !4897
  br label %loop.inc, !dbg !4900

if.exit42:                                        ; preds = %checkok31
  %48 = load ptr, ptr %self, align 8, !dbg !4901
  %ptradd43 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !4901
  store i32 0, ptr %ptradd43, align 8, !dbg !4901
  br label %loop.body44, !dbg !4902

loop.body44:                                      ; preds = %checkok73, %if.exit42
  %49 = load i8, ptr %c, align 1
  store i8 %49, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %loop.body44
  %50 = load i8, ptr %switch, align 1
  switch i8 %50, label %switch.default [
    i8 48, label %switch.case
    i8 45, label %switch.case46
    i8 43, label %switch.case48
    i8 32, label %switch.case50
    i8 35, label %switch.case52
  ]

switch.case:                                      ; preds = %switch.entry
  %51 = load ptr, ptr %self, align 8, !dbg !4903
  %ptradd45 = getelementptr inbounds i8, ptr %51, i64 16, !dbg !4903
  %52 = load i32, ptr %ptradd45, align 8, !dbg !4908
  %53 = and i32 %52, -2, !dbg !4908
  %54 = or i32 %53, 1, !dbg !4908
  store i32 %54, ptr %ptradd45, align 8, !dbg !4908
  br label %switch.exit, !dbg !4908

switch.case46:                                    ; preds = %switch.entry
  %55 = load ptr, ptr %self, align 8, !dbg !4909
  %ptradd47 = getelementptr inbounds i8, ptr %55, i64 16, !dbg !4909
  %56 = load i32, ptr %ptradd47, align 8, !dbg !4911
  %57 = and i32 %56, -3, !dbg !4911
  %58 = or i32 %57, 2, !dbg !4911
  store i32 %58, ptr %ptradd47, align 8, !dbg !4911
  br label %switch.exit, !dbg !4911

switch.case48:                                    ; preds = %switch.entry
  %59 = load ptr, ptr %self, align 8, !dbg !4912
  %ptradd49 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !4912
  %60 = load i32, ptr %ptradd49, align 8, !dbg !4914
  %61 = and i32 %60, -5, !dbg !4914
  %62 = or i32 %61, 4, !dbg !4914
  store i32 %62, ptr %ptradd49, align 8, !dbg !4914
  br label %switch.exit, !dbg !4914

switch.case50:                                    ; preds = %switch.entry
  %63 = load ptr, ptr %self, align 8, !dbg !4915
  %ptradd51 = getelementptr inbounds i8, ptr %63, i64 16, !dbg !4915
  %64 = load i32, ptr %ptradd51, align 8, !dbg !4917
  %65 = and i32 %64, -9, !dbg !4917
  %66 = or i32 %65, 8, !dbg !4917
  store i32 %66, ptr %ptradd51, align 8, !dbg !4917
  br label %switch.exit, !dbg !4917

switch.case52:                                    ; preds = %switch.entry
  %67 = load ptr, ptr %self, align 8, !dbg !4918
  %ptradd53 = getelementptr inbounds i8, ptr %67, i64 16, !dbg !4918
  %68 = load i32, ptr %ptradd53, align 8, !dbg !4920
  %69 = and i32 %68, -17, !dbg !4920
  %70 = or i32 %69, 16, !dbg !4920
  store i32 %70, ptr %ptradd53, align 8, !dbg !4920
  br label %switch.exit, !dbg !4920

switch.default:                                   ; preds = %switch.entry
  br label %loop.exit, !dbg !4921

switch.exit:                                      ; preds = %switch.case52, %switch.case50, %switch.case48, %switch.case46, %switch.case
  %71 = load i64, ptr %i, align 8, !dbg !4923
  %add54 = add i64 %71, 1, !dbg !4923
  store i64 %add54, ptr %i, align 8, !dbg !4923
  %72 = load i64, ptr %format_len, align 8, !dbg !4924
  %ge55 = icmp uge i64 %add54, %72, !dbg !4925
  br i1 %ge55, label %if.then56, label %if.exit63, !dbg !4925

if.then56:                                        ; preds = %switch.exit
  %73 = load ptr, ptr %self, align 8
  store ptr %73, ptr %f58, align 8
  %74 = load ptr, ptr %f58, align 8
  %75 = call i64 @std.io.Formatter.out_substr(ptr %retparam59, ptr %74, ptr @.str.217, i64 4), !dbg !4926
  store i64 ptrtoint (ptr @std.io.INVALID_FORMAT to i64), ptr %reterr57, align 8, !dbg !4929
  br label %err_retblock62, !dbg !4929

err_retblock62:                                   ; preds = %if.then56
  %76 = load i64, ptr %reterr57, align 8, !dbg !4929
  ret i64 %76, !dbg !4929

if.exit63:                                        ; preds = %switch.exit
  %ptradd64 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4930
  %77 = load i64, ptr %ptradd64, align 8, !dbg !4930
  %78 = load ptr, ptr %format, align 8, !dbg !4930
  %79 = load i64, ptr %i, align 8, !dbg !4931
  %ge65 = icmp uge i64 %79, %77, !dbg !4931
  %80 = call i1 @llvm.expect.i1(i1 %ge65, i1 false), !dbg !4931
  br i1 %80, label %panic66, label %checkok73, !dbg !4931

checkok73:                                        ; preds = %if.exit63
  %ptradd74 = getelementptr inbounds i8, ptr %78, i64 %79, !dbg !4931
  %81 = load i8, ptr %ptradd74, align 1, !dbg !4931
  store i8 %81, ptr %c, align 1, !dbg !4931
  br label %loop.body44, !dbg !4931

loop.exit:                                        ; preds = %switch.default
    #dbg_declare(ptr %w, !4932, !DIExpression(), !4933)
  %ptradd75 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !4934
  %ptradd76 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4935
  %82 = load ptr, ptr %anys, align 8
  %83 = load i64, ptr %ptradd75, align 8
  %84 = load ptr, ptr %format, align 8
  %85 = load i64, ptr %ptradd76, align 8
  %86 = call i64 @std.io.printf_parse_format_field(ptr %retparam77, ptr %82, i64 %83, ptr %variant_index, ptr %84, i64 %85, ptr %i) #6, !dbg !4936
  %not_err78 = icmp eq i64 %86, 0, !dbg !4936
  %87 = call i1 @llvm.expect.i1(i1 %not_err78, i1 true), !dbg !4936
  br i1 %87, label %after_check80, label %assign_optional79, !dbg !4936

assign_optional79:                                ; preds = %loop.exit
  store i64 %86, ptr %w.f, align 8, !dbg !4936
  br label %after_assign, !dbg !4936

after_check80:                                    ; preds = %loop.exit
  %88 = load i32, ptr %retparam77, align 4, !dbg !4936
  store i32 %88, ptr %w, align 4, !dbg !4936
  store i64 0, ptr %w.f, align 8, !dbg !4936
  br label %after_assign, !dbg !4936

after_assign:                                     ; preds = %after_check80, %assign_optional79
  br label %testblock

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %w.f, align 8, !dbg !4937
  %not_err81 = icmp eq i64 %optval, 0, !dbg !4937
  %89 = call i1 @llvm.expect.i1(i1 %not_err81, i1 true), !dbg !4937
  br i1 %89, label %after_check83, label %assign_optional82, !dbg !4937

assign_optional82:                                ; preds = %testblock
  store i64 %optval, ptr %temp_err, align 8, !dbg !4937
  br label %end_block, !dbg !4937

after_check83:                                    ; preds = %testblock
  store i64 0, ptr %temp_err, align 8, !dbg !4937
  br label %end_block, !dbg !4937

end_block:                                        ; preds = %after_check83, %assign_optional82
  %90 = load i64, ptr %temp_err, align 8, !dbg !4937
  %i2b = icmp ne i64 %90, 0, !dbg !4937
  br i1 %i2b, label %if.then84, label %if.exit91, !dbg !4937

if.then84:                                        ; preds = %end_block
  %91 = load ptr, ptr %self, align 8
  store ptr %91, ptr %f86, align 8
  %92 = load ptr, ptr %f86, align 8
  %93 = call i64 @std.io.Formatter.out_substr(ptr %retparam87, ptr %92, ptr @.str.218, i64 4), !dbg !4938
  store i64 ptrtoint (ptr @std.io.INVALID_FORMAT to i64), ptr %reterr85, align 8, !dbg !4941
  br label %err_retblock90, !dbg !4941

err_retblock90:                                   ; preds = %if.then84
  %94 = load i64, ptr %reterr85, align 8, !dbg !4941
  ret i64 %94, !dbg !4941

if.exit91:                                        ; preds = %end_block
  %ptradd92 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4942
  %95 = load i64, ptr %ptradd92, align 8, !dbg !4942
  %96 = load ptr, ptr %format, align 8, !dbg !4942
  %97 = load i64, ptr %i, align 8, !dbg !4943
  %ge93 = icmp uge i64 %97, %95, !dbg !4943
  %98 = call i1 @llvm.expect.i1(i1 %ge93, i1 false), !dbg !4943
  br i1 %98, label %panic94, label %checkok101, !dbg !4943

checkok101:                                       ; preds = %if.exit91
  %ptradd102 = getelementptr inbounds i8, ptr %96, i64 %97, !dbg !4943
  %99 = load i8, ptr %ptradd102, align 1, !dbg !4943
  store i8 %99, ptr %c, align 1, !dbg !4943
  %100 = load i32, ptr %w, align 4, !dbg !4944
  %lt103 = icmp slt i32 %100, 0, !dbg !4944
  br i1 %lt103, label %if.then104, label %if.exit106, !dbg !4944

if.then104:                                       ; preds = %checkok101
  %101 = load ptr, ptr %self, align 8, !dbg !4945
  %ptradd105 = getelementptr inbounds i8, ptr %101, i64 16, !dbg !4945
  %102 = load i32, ptr %ptradd105, align 8, !dbg !4947
  %103 = and i32 %102, -3, !dbg !4947
  %104 = or i32 %103, 2, !dbg !4947
  store i32 %104, ptr %ptradd105, align 8, !dbg !4947
  %105 = load i32, ptr %w, align 4, !dbg !4948
  %neg = sub i32 0, %105, !dbg !4948
  store i32 %neg, ptr %w, align 4, !dbg !4948
  store i64 0, ptr %w.f, align 8, !dbg !4948
  br label %if.exit106, !dbg !4948

if.exit106:                                       ; preds = %if.then104, %checkok101
  %106 = load ptr, ptr %self, align 8, !dbg !4949
  %ptradd107 = getelementptr inbounds i8, ptr %106, i64 16, !dbg !4949
  %ptradd108 = getelementptr inbounds i8, ptr %ptradd107, i64 4, !dbg !4949
  %107 = load i32, ptr %w, align 4, !dbg !4950
  store i32 %107, ptr %ptradd108, align 4, !dbg !4950
  %108 = load ptr, ptr %self, align 8, !dbg !4951
  %ptradd109 = getelementptr inbounds i8, ptr %108, i64 16, !dbg !4951
  %ptradd110 = getelementptr inbounds i8, ptr %ptradd109, i64 8, !dbg !4951
  store i32 0, ptr %ptradd110, align 8, !dbg !4952
  %109 = load i8, ptr %c, align 1, !dbg !4953
  %eq111 = icmp eq i8 %109, 46, !dbg !4953
  br i1 %eq111, label %if.then112, label %if.exit161, !dbg !4953

if.then112:                                       ; preds = %if.exit106
  %110 = load ptr, ptr %self, align 8, !dbg !4954
  %ptradd113 = getelementptr inbounds i8, ptr %110, i64 16, !dbg !4954
  %111 = load i32, ptr %ptradd113, align 8, !dbg !4956
  %112 = and i32 %111, -65, !dbg !4956
  %113 = or i32 %112, 64, !dbg !4956
  store i32 %113, ptr %ptradd113, align 8, !dbg !4956
  %114 = load i64, ptr %i, align 8, !dbg !4957
  %add114 = add i64 %114, 1, !dbg !4957
  store i64 %add114, ptr %i, align 8, !dbg !4957
  %115 = load i64, ptr %format_len, align 8, !dbg !4958
  %ge115 = icmp uge i64 %add114, %115, !dbg !4959
  br i1 %ge115, label %if.then116, label %if.exit123, !dbg !4959

if.then116:                                       ; preds = %if.then112
  %116 = load ptr, ptr %self, align 8
  store ptr %116, ptr %f118, align 8
  %117 = load ptr, ptr %f118, align 8
  %118 = call i64 @std.io.Formatter.out_substr(ptr %retparam119, ptr %117, ptr @.str.219, i64 12), !dbg !4960
  store i64 ptrtoint (ptr @std.io.INVALID_FORMAT to i64), ptr %reterr117, align 8, !dbg !4963
  br label %err_retblock122, !dbg !4963

err_retblock122:                                  ; preds = %if.then116
  %119 = load i64, ptr %reterr117, align 8, !dbg !4963
  ret i64 %119, !dbg !4963

if.exit123:                                       ; preds = %if.then112
    #dbg_declare(ptr %prec, !4964, !DIExpression(), !4965)
  %ptradd124 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !4966
  %ptradd125 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4967
  %120 = load ptr, ptr %anys, align 8
  %121 = load i64, ptr %ptradd124, align 8
  %122 = load ptr, ptr %format, align 8
  %123 = load i64, ptr %ptradd125, align 8
  %124 = call i64 @std.io.printf_parse_format_field(ptr %retparam126, ptr %120, i64 %121, ptr %variant_index, ptr %122, i64 %123, ptr %i) #6, !dbg !4968
  %not_err127 = icmp eq i64 %124, 0, !dbg !4968
  %125 = call i1 @llvm.expect.i1(i1 %not_err127, i1 true), !dbg !4968
  br i1 %125, label %after_check129, label %assign_optional128, !dbg !4968

assign_optional128:                               ; preds = %if.exit123
  store i64 %124, ptr %prec.f, align 8, !dbg !4968
  br label %after_assign130, !dbg !4968

after_check129:                                   ; preds = %if.exit123
  %126 = load i32, ptr %retparam126, align 4, !dbg !4968
  store i32 %126, ptr %prec, align 4, !dbg !4968
  store i64 0, ptr %prec.f, align 8, !dbg !4968
  br label %after_assign130, !dbg !4968

after_assign130:                                  ; preds = %after_check129, %assign_optional128
  br label %testblock132

testblock132:                                     ; preds = %after_assign130
  %optval133 = load i64, ptr %prec.f, align 8, !dbg !4969
  %not_err134 = icmp eq i64 %optval133, 0, !dbg !4969
  %127 = call i1 @llvm.expect.i1(i1 %not_err134, i1 true), !dbg !4969
  br i1 %127, label %after_check136, label %assign_optional135, !dbg !4969

assign_optional135:                               ; preds = %testblock132
  store i64 %optval133, ptr %temp_err131, align 8, !dbg !4969
  br label %end_block137, !dbg !4969

after_check136:                                   ; preds = %testblock132
  store i64 0, ptr %temp_err131, align 8, !dbg !4969
  br label %end_block137, !dbg !4969

end_block137:                                     ; preds = %after_check136, %assign_optional135
  %128 = load i64, ptr %temp_err131, align 8, !dbg !4969
  %i2b138 = icmp ne i64 %128, 0, !dbg !4969
  br i1 %i2b138, label %if.then139, label %if.exit146, !dbg !4969

if.then139:                                       ; preds = %end_block137
  %129 = load ptr, ptr %self, align 8
  store ptr %129, ptr %f141, align 8
  %130 = load ptr, ptr %f141, align 8
  %131 = call i64 @std.io.Formatter.out_substr(ptr %retparam142, ptr %130, ptr @.str.220, i64 12), !dbg !4970
  store i64 ptrtoint (ptr @std.io.INVALID_FORMAT to i64), ptr %reterr140, align 8, !dbg !4973
  br label %err_retblock145, !dbg !4973

err_retblock145:                                  ; preds = %if.then139
  %132 = load i64, ptr %reterr140, align 8, !dbg !4973
  ret i64 %132, !dbg !4973

if.exit146:                                       ; preds = %end_block137
  %133 = load ptr, ptr %self, align 8, !dbg !4974
  %ptradd147 = getelementptr inbounds i8, ptr %133, i64 16, !dbg !4974
  %ptradd148 = getelementptr inbounds i8, ptr %ptradd147, i64 8, !dbg !4974
  %134 = load i32, ptr %prec, align 4, !dbg !4975
  %lt149 = icmp slt i32 %134, 0, !dbg !4975
  br i1 %lt149, label %cond.lhs, label %cond.rhs, !dbg !4975

cond.lhs:                                         ; preds = %if.exit146
  br label %cond.phi, !dbg !4976

cond.rhs:                                         ; preds = %if.exit146
  %135 = load i32, ptr %prec, align 4, !dbg !4977
  br label %cond.phi, !dbg !4977

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i32 [ 0, %cond.lhs ], [ %135, %cond.rhs ], !dbg !4977
  store i32 %val, ptr %ptradd148, align 8, !dbg !4977
  %ptradd150 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4978
  %136 = load i64, ptr %ptradd150, align 8, !dbg !4978
  %137 = load ptr, ptr %format, align 8, !dbg !4978
  %138 = load i64, ptr %i, align 8, !dbg !4979
  %ge151 = icmp uge i64 %138, %136, !dbg !4979
  %139 = call i1 @llvm.expect.i1(i1 %ge151, i1 false), !dbg !4979
  br i1 %139, label %panic152, label %checkok159, !dbg !4979

checkok159:                                       ; preds = %cond.phi
  %ptradd160 = getelementptr inbounds i8, ptr %137, i64 %138, !dbg !4979
  %140 = load i8, ptr %ptradd160, align 1, !dbg !4979
  store i8 %140, ptr %c, align 1, !dbg !4979
  br label %if.exit161, !dbg !4979

if.exit161:                                       ; preds = %checkok159, %if.exit106
    #dbg_declare(ptr %base, !4980, !DIExpression(), !4981)
  store i32 0, ptr %base, align 4, !dbg !4982
  %141 = load i64, ptr %variant_index, align 8, !dbg !4983
  %ptradd162 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !4984
  %142 = load i64, ptr %ptradd162, align 8, !dbg !4984
  %ge163 = icmp uge i64 %141, %142, !dbg !4983
  br i1 %ge163, label %if.then164, label %if.exit185, !dbg !4983

if.then164:                                       ; preds = %if.exit161
  %143 = load ptr, ptr %self, align 8
  store ptr %143, ptr %self165, align 8
  store i64 ptrtoint (ptr @std.io.NOT_ENOUGH_ARGUMENTS to i64), ptr %f166, align 8
  %144 = load ptr, ptr %self165, align 8, !dbg !4985
  %neq167 = icmp ne ptr %144, null, !dbg !4985
  br i1 %neq167, label %assert_ok, label %assert_fail, !dbg !4985

assert_fail:                                      ; preds = %if.then164
  %145 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4985
  call void %145(ptr @.panic_msg.48, i64 32, ptr @.file.44, i64 20, ptr @.func.215, i64 7, i32 25) #5, !dbg !4985
  unreachable, !dbg !4985

assert_ok:                                        ; preds = %if.then164
  %146 = load ptr, ptr %self165, align 8, !dbg !4990
  %ptradd168 = getelementptr inbounds i8, ptr %146, i64 16, !dbg !4990
  %ptradd169 = getelementptr inbounds i8, ptr %ptradd168, i64 24, !dbg !4990
  %147 = load i64, ptr %ptradd169, align 8, !dbg !4990
  %i2b170 = icmp ne i64 %147, 0, !dbg !4990
  br i1 %i2b170, label %if.then171, label %if.exit174, !dbg !4990

if.then171:                                       ; preds = %assert_ok
  %148 = load ptr, ptr %self165, align 8, !dbg !4991
  %ptradd172 = getelementptr inbounds i8, ptr %148, i64 16, !dbg !4991
  %ptradd173 = getelementptr inbounds i8, ptr %ptradd172, i64 24, !dbg !4991
  %149 = load i64, ptr %ptradd173, align 8, !dbg !4991
  store i64 %149, ptr %blockret, align 8, !dbg !4991
  br label %expr_block.exit, !dbg !4991

if.exit174:                                       ; preds = %assert_ok
  %150 = load ptr, ptr %self165, align 8, !dbg !4992
  %ptradd175 = getelementptr inbounds i8, ptr %150, i64 16, !dbg !4992
  %ptradd176 = getelementptr inbounds i8, ptr %ptradd175, i64 24, !dbg !4992
  %151 = load i64, ptr %f166, align 8, !dbg !4993
  store i64 %151, ptr %ptradd176, align 8, !dbg !4993
  %152 = load i64, ptr %f166, align 8, !dbg !4994
  store i64 %152, ptr %blockret, align 8, !dbg !4994
  br label %expr_block.exit, !dbg !4994

expr_block.exit:                                  ; preds = %if.exit174, %if.then171
  %153 = load i64, ptr %total_len, align 8, !dbg !4995
  %154 = load ptr, ptr %self, align 8
  %155 = call i64 @std.io.Formatter.out_substr(ptr %retparam178, ptr %154, ptr @.str.221, i64 9), !dbg !4996
  %not_err179 = icmp eq i64 %155, 0, !dbg !4996
  %156 = call i1 @llvm.expect.i1(i1 %not_err179, i1 true), !dbg !4996
  br i1 %156, label %after_check181, label %assign_optional180, !dbg !4996

assign_optional180:                               ; preds = %expr_block.exit
  store i64 %155, ptr %error_var177, align 8, !dbg !4996
  br label %guard_block182, !dbg !4996

after_check181:                                   ; preds = %expr_block.exit
  br label %noerr_block183, !dbg !4996

guard_block182:                                   ; preds = %assign_optional180
  %157 = load i64, ptr %error_var177, align 8, !dbg !4996
  ret i64 %157, !dbg !4996

noerr_block183:                                   ; preds = %after_check181
  %158 = load i64, ptr %retparam178, align 8, !dbg !4996
  %add184 = add i64 %153, %158, !dbg !4995
  store i64 %add184, ptr %total_len, align 8, !dbg !4995
  br label %loop.inc, !dbg !4997

if.exit185:                                       ; preds = %if.exit161
    #dbg_declare(ptr %current, !4998, !DIExpression(), !4999)
  %ptradd186 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !5000
  %159 = load i64, ptr %ptradd186, align 8, !dbg !5000
  %160 = load ptr, ptr %anys, align 8, !dbg !5000
  %161 = load i64, ptr %variant_index, align 8, !dbg !5001
  %add187 = add i64 %161, 1, !dbg !5001
  store i64 %add187, ptr %variant_index, align 8, !dbg !5001
  %ge188 = icmp uge i64 %161, %159, !dbg !5001
  %162 = call i1 @llvm.expect.i1(i1 %ge188, i1 false), !dbg !5001
  br i1 %162, label %panic189, label %checkok196, !dbg !5001

checkok196:                                       ; preds = %if.exit185
  %ptroffset = getelementptr inbounds [16 x i8], ptr %160, i64 %161, !dbg !5001
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %current, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !5001
  %163 = load i8, ptr %c, align 1
  store i8 %163, ptr %switch197, align 1
  br label %switch.entry198

switch.entry198:                                  ; preds = %checkok196
  %164 = load i8, ptr %switch197, align 1
  switch i8 %164, label %switch.default770 [
    i8 100, label %switch.case199
    i8 88, label %switch.case201
    i8 120, label %switch.case203
    i8 79, label %switch.case204
    i8 111, label %switch.case206
    i8 66, label %switch.case207
    i8 98, label %switch.case209
    i8 65, label %switch.case210
    i8 97, label %switch.case212
    i8 70, label %switch.case285
    i8 102, label %switch.case287
    i8 69, label %switch.case366
    i8 101, label %switch.case368
    i8 71, label %switch.case447
    i8 103, label %switch.case449
    i8 99, label %switch.case528
    i8 72, label %switch.case540
    i8 104, label %switch.case542
    i8 115, label %switch.case697
    i8 112, label %switch.case767
  ]

switch.case199:                                   ; preds = %switch.entry198
  store i32 10, ptr %base, align 4, !dbg !5002
  %165 = load ptr, ptr %self, align 8, !dbg !5005
  %ptradd200 = getelementptr inbounds i8, ptr %165, i64 16, !dbg !5005
  %166 = load i32, ptr %ptradd200, align 8, !dbg !5006
  %167 = and i32 %166, -17, !dbg !5006
  store i32 %167, ptr %ptradd200, align 8, !dbg !5006
  br label %switch.exit795, !dbg !5006

switch.case201:                                   ; preds = %switch.entry198
  %168 = load ptr, ptr %self, align 8, !dbg !5007
  %ptradd202 = getelementptr inbounds i8, ptr %168, i64 16, !dbg !5007
  %169 = load i32, ptr %ptradd202, align 8, !dbg !5009
  %170 = and i32 %169, -33, !dbg !5009
  %171 = or i32 %170, 32, !dbg !5009
  store i32 %171, ptr %ptradd202, align 8, !dbg !5009
  br label %switch.case203, !dbg !5010

switch.case203:                                   ; preds = %switch.entry198, %switch.case201
  store i32 16, ptr %base, align 4, !dbg !5011
  br label %switch.exit795, !dbg !5011

switch.case204:                                   ; preds = %switch.entry198
  %172 = load ptr, ptr %self, align 8, !dbg !5013
  %ptradd205 = getelementptr inbounds i8, ptr %172, i64 16, !dbg !5013
  %173 = load i32, ptr %ptradd205, align 8, !dbg !5015
  %174 = and i32 %173, -33, !dbg !5015
  %175 = or i32 %174, 32, !dbg !5015
  store i32 %175, ptr %ptradd205, align 8, !dbg !5015
  br label %switch.case206, !dbg !5016

switch.case206:                                   ; preds = %switch.entry198, %switch.case204
  store i32 8, ptr %base, align 4, !dbg !5017
  br label %switch.exit795, !dbg !5017

switch.case207:                                   ; preds = %switch.entry198
  %176 = load ptr, ptr %self, align 8, !dbg !5019
  %ptradd208 = getelementptr inbounds i8, ptr %176, i64 16, !dbg !5019
  %177 = load i32, ptr %ptradd208, align 8, !dbg !5021
  %178 = and i32 %177, -33, !dbg !5021
  %179 = or i32 %178, 32, !dbg !5021
  store i32 %179, ptr %ptradd208, align 8, !dbg !5021
  br label %switch.case209, !dbg !5022

switch.case209:                                   ; preds = %switch.entry198, %switch.case207
  store i32 2, ptr %base, align 4, !dbg !5023
  br label %switch.exit795, !dbg !5023

switch.case210:                                   ; preds = %switch.entry198
  %180 = load ptr, ptr %self, align 8, !dbg !5025
  %ptradd211 = getelementptr inbounds i8, ptr %180, i64 16, !dbg !5025
  %181 = load i32, ptr %ptradd211, align 8, !dbg !5027
  %182 = and i32 %181, -33, !dbg !5027
  %183 = or i32 %182, 32, !dbg !5027
  store i32 %183, ptr %ptradd211, align 8, !dbg !5027
  br label %switch.case212, !dbg !5028

switch.case212:                                   ; preds = %switch.entry198, %switch.case210
  %184 = load i64, ptr %total_len, align 8, !dbg !5029
  %185 = load ptr, ptr %self, align 8
  store ptr %185, ptr %f214, align 8
    #dbg_declare(ptr %len, !5031, !DIExpression(), !5033)
  %lo = load i64, ptr %current, align 8
  %ptradd217 = getelementptr inbounds i8, ptr %current, i64 8
  %hi = load ptr, ptr %ptradd217, align 8
  %186 = call i64 @std.io.float_from_any(ptr %retparam216, i64 %lo, ptr %hi), !dbg !5035
  %not_err218 = icmp eq i64 %186, 0, !dbg !5035
  %187 = call i1 @llvm.expect.i1(i1 %not_err218, i1 true), !dbg !5035
  br i1 %187, label %after_check220, label %assign_optional219, !dbg !5035

assign_optional219:                               ; preds = %switch.case212
  store i64 %186, ptr %len.f, align 8, !dbg !5035
  br label %after_assign225, !dbg !5035

after_check220:                                   ; preds = %switch.case212
  %188 = load ptr, ptr %self, align 8
  %189 = load double, ptr %retparam216, align 8
  %190 = call i64 @std.io.Formatter.atoa(ptr %retparam221, ptr %188, double %189), !dbg !5036
  %not_err222 = icmp eq i64 %190, 0, !dbg !5036
  %191 = call i1 @llvm.expect.i1(i1 %not_err222, i1 true), !dbg !5036
  br i1 %191, label %after_check224, label %assign_optional223, !dbg !5036

assign_optional223:                               ; preds = %after_check220
  store i64 %190, ptr %len.f, align 8, !dbg !5036
  br label %after_assign225, !dbg !5036

after_check224:                                   ; preds = %after_check220
  %192 = load i64, ptr %retparam221, align 8, !dbg !5036
  store i64 %192, ptr %len, align 8, !dbg !5036
  store i64 0, ptr %len.f, align 8, !dbg !5036
  br label %after_assign225, !dbg !5036

after_assign225:                                  ; preds = %after_check224, %assign_optional223, %assign_optional219
    #dbg_declare(ptr %err, !5037, !DIExpression(), !5038)
  br label %testblock226, !dbg !5038

testblock226:                                     ; preds = %after_assign225
  %optval227 = load i64, ptr %len.f, align 8, !dbg !5039
  %not_err228 = icmp eq i64 %optval227, 0, !dbg !5039
  %193 = call i1 @llvm.expect.i1(i1 %not_err228, i1 true), !dbg !5039
  br i1 %193, label %after_check230, label %assign_optional229, !dbg !5039

assign_optional229:                               ; preds = %testblock226
  store i64 %optval227, ptr %err, align 8, !dbg !5039
  br label %end_block231, !dbg !5039

after_check230:                                   ; preds = %testblock226
  store i64 0, ptr %err, align 8, !dbg !5039
  br label %end_block231, !dbg !5039

end_block231:                                     ; preds = %after_check230, %assign_optional229
  %194 = load i64, ptr %err, align 8, !dbg !5039
  %i2b232 = icmp ne i64 %194, 0, !dbg !5039
  br i1 %i2b232, label %if.then233, label %if.exit281, !dbg !5039

if.then233:                                       ; preds = %end_block231
  %195 = load i64, ptr %err, align 8
  store i64 %195, ptr %switch234, align 8
  br label %switch.entry235

switch.entry235:                                  ; preds = %if.then233
  %196 = load i64, ptr %switch234, align 8
  %eq236 = icmp eq i64 ptrtoint (ptr @std.io.BUFFER_EXCEEDED to i64), %196, !dbg !5040
  br i1 %eq236, label %switch.case238, label %next_if, !dbg !5040

next_if:                                          ; preds = %switch.entry235
  %eq237 = icmp eq i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), %196, !dbg !5043
  br i1 %eq237, label %switch.case238, label %next_if255, !dbg !5043

switch.case238:                                   ; preds = %next_if, %switch.entry235
  %197 = load ptr, ptr %f214, align 8
  store ptr %197, ptr %self239, align 8
  %198 = load i64, ptr %err, align 8
  store i64 %198, ptr %f240, align 8
  %199 = load ptr, ptr %self239, align 8, !dbg !5044
  %neq242 = icmp ne ptr %199, null, !dbg !5044
  br i1 %neq242, label %assert_ok244, label %assert_fail243, !dbg !5044

assert_fail243:                                   ; preds = %switch.case238
  %200 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5044
  call void %200(ptr @.panic_msg.48, i64 32, ptr @.file.44, i64 20, ptr @.func.215, i64 7, i32 25) #5, !dbg !5044
  unreachable, !dbg !5044

assert_ok244:                                     ; preds = %switch.case238
  %201 = load ptr, ptr %self239, align 8, !dbg !5049
  %ptradd245 = getelementptr inbounds i8, ptr %201, i64 16, !dbg !5049
  %ptradd246 = getelementptr inbounds i8, ptr %ptradd245, i64 24, !dbg !5049
  %202 = load i64, ptr %ptradd246, align 8, !dbg !5049
  %i2b247 = icmp ne i64 %202, 0, !dbg !5049
  br i1 %i2b247, label %if.then248, label %if.exit251, !dbg !5049

if.then248:                                       ; preds = %assert_ok244
  %203 = load ptr, ptr %self239, align 8, !dbg !5050
  %ptradd249 = getelementptr inbounds i8, ptr %203, i64 16, !dbg !5050
  %ptradd250 = getelementptr inbounds i8, ptr %ptradd249, i64 24, !dbg !5050
  %204 = load i64, ptr %ptradd250, align 8, !dbg !5050
  store i64 %204, ptr %blockret241, align 8, !dbg !5050
  br label %expr_block.exit254, !dbg !5050

if.exit251:                                       ; preds = %assert_ok244
  %205 = load ptr, ptr %self239, align 8, !dbg !5051
  %ptradd252 = getelementptr inbounds i8, ptr %205, i64 16, !dbg !5051
  %ptradd253 = getelementptr inbounds i8, ptr %ptradd252, i64 24, !dbg !5051
  %206 = load i64, ptr %f240, align 8, !dbg !5052
  store i64 %206, ptr %ptradd253, align 8, !dbg !5052
  %207 = load i64, ptr %f240, align 8, !dbg !5053
  store i64 %207, ptr %blockret241, align 8, !dbg !5053
  br label %expr_block.exit254, !dbg !5053

expr_block.exit254:                               ; preds = %if.exit251, %if.then248
  %208 = load i64, ptr %blockret241, align 8, !dbg !5053
  store i64 %208, ptr %error_var213, align 8, !dbg !5053
  br label %guard_block282, !dbg !5053

next_if255:                                       ; preds = %next_if
  br label %switch.default256, !dbg !5053

switch.default256:                                ; preds = %next_if255
  %209 = load ptr, ptr %f214, align 8
  store ptr %209, ptr %self257, align 8
  store i64 ptrtoint (ptr @std.io.INVALID_ARGUMENT to i64), ptr %f258, align 8
  %210 = load ptr, ptr %self257, align 8, !dbg !5054
  %neq260 = icmp ne ptr %210, null, !dbg !5054
  br i1 %neq260, label %assert_ok262, label %assert_fail261, !dbg !5054

assert_fail261:                                   ; preds = %switch.default256
  %211 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5054
  call void %211(ptr @.panic_msg.48, i64 32, ptr @.file.44, i64 20, ptr @.func.215, i64 7, i32 25) #5, !dbg !5054
  unreachable, !dbg !5054

assert_ok262:                                     ; preds = %switch.default256
  %212 = load ptr, ptr %self257, align 8, !dbg !5059
  %ptradd263 = getelementptr inbounds i8, ptr %212, i64 16, !dbg !5059
  %ptradd264 = getelementptr inbounds i8, ptr %ptradd263, i64 24, !dbg !5059
  %213 = load i64, ptr %ptradd264, align 8, !dbg !5059
  %i2b265 = icmp ne i64 %213, 0, !dbg !5059
  br i1 %i2b265, label %if.then266, label %if.exit269, !dbg !5059

if.then266:                                       ; preds = %assert_ok262
  %214 = load ptr, ptr %self257, align 8, !dbg !5060
  %ptradd267 = getelementptr inbounds i8, ptr %214, i64 16, !dbg !5060
  %ptradd268 = getelementptr inbounds i8, ptr %ptradd267, i64 24, !dbg !5060
  %215 = load i64, ptr %ptradd268, align 8, !dbg !5060
  store i64 %215, ptr %blockret259, align 8, !dbg !5060
  br label %expr_block.exit272, !dbg !5060

if.exit269:                                       ; preds = %assert_ok262
  %216 = load ptr, ptr %self257, align 8, !dbg !5061
  %ptradd270 = getelementptr inbounds i8, ptr %216, i64 16, !dbg !5061
  %ptradd271 = getelementptr inbounds i8, ptr %ptradd270, i64 24, !dbg !5061
  %217 = load i64, ptr %f258, align 8, !dbg !5062
  store i64 %217, ptr %ptradd271, align 8, !dbg !5062
  %218 = load i64, ptr %f258, align 8, !dbg !5063
  store i64 %218, ptr %blockret259, align 8, !dbg !5063
  br label %expr_block.exit272, !dbg !5063

expr_block.exit272:                               ; preds = %if.exit269, %if.then266
  %219 = load i64, ptr %blockret259, align 8, !dbg !5063
  store i64 %219, ptr %err, align 8, !dbg !5063
  %220 = load ptr, ptr %f214, align 8
  %221 = call i64 @std.io.Formatter.out_substr(ptr %retparam274, ptr %220, ptr @.str.222, i64 9), !dbg !5064
  %not_err275 = icmp eq i64 %221, 0, !dbg !5064
  %222 = call i1 @llvm.expect.i1(i1 %not_err275, i1 true), !dbg !5064
  br i1 %222, label %after_check277, label %assign_optional276, !dbg !5064

assign_optional276:                               ; preds = %expr_block.exit272
  store i64 %221, ptr %error_var273, align 8, !dbg !5064
  br label %guard_block278, !dbg !5064

after_check277:                                   ; preds = %expr_block.exit272
  br label %noerr_block279, !dbg !5064

guard_block278:                                   ; preds = %assign_optional276
  %223 = load i64, ptr %error_var273, align 8, !dbg !5064
  store i64 %223, ptr %error_var213, align 8, !dbg !5064
  br label %guard_block282, !dbg !5064

noerr_block279:                                   ; preds = %after_check277
  %224 = load i64, ptr %err, align 8, !dbg !5065
  store i64 %224, ptr %error_var213, align 8, !dbg !5065
  br label %guard_block282, !dbg !5065

if.exit281:                                       ; preds = %end_block231
  br label %noerr_block283, !dbg !5066

guard_block282:                                   ; preds = %noerr_block279, %guard_block278, %expr_block.exit254
  %225 = load i64, ptr %error_var213, align 8, !dbg !5066
  ret i64 %225, !dbg !5066

noerr_block283:                                   ; preds = %if.exit281
  %226 = load i64, ptr %len, align 8, !dbg !5066
  %add284 = add i64 %184, %226, !dbg !5029
  store i64 %add284, ptr %total_len, align 8, !dbg !5029
  br label %loop.inc, !dbg !5067

switch.case285:                                   ; preds = %switch.entry198
  %227 = load ptr, ptr %self, align 8, !dbg !5068
  %ptradd286 = getelementptr inbounds i8, ptr %227, i64 16, !dbg !5068
  %228 = load i32, ptr %ptradd286, align 8, !dbg !5070
  %229 = and i32 %228, -33, !dbg !5070
  %230 = or i32 %229, 32, !dbg !5070
  store i32 %230, ptr %ptradd286, align 8, !dbg !5070
  br label %switch.case287, !dbg !5071

switch.case287:                                   ; preds = %switch.entry198, %switch.case285
  %231 = load i64, ptr %total_len, align 8, !dbg !5072
  %232 = load ptr, ptr %self, align 8
  store ptr %232, ptr %f289, align 8
    #dbg_declare(ptr %len291, !5074, !DIExpression(), !5076)
  %lo294 = load i64, ptr %current, align 8
  %ptradd295 = getelementptr inbounds i8, ptr %current, i64 8
  %hi296 = load ptr, ptr %ptradd295, align 8
  %233 = call i64 @std.io.float_from_any(ptr %retparam293, i64 %lo294, ptr %hi296), !dbg !5078
  %not_err297 = icmp eq i64 %233, 0, !dbg !5078
  %234 = call i1 @llvm.expect.i1(i1 %not_err297, i1 true), !dbg !5078
  br i1 %234, label %after_check299, label %assign_optional298, !dbg !5078

assign_optional298:                               ; preds = %switch.case287
  store i64 %233, ptr %len.f292, align 8, !dbg !5078
  br label %after_assign304, !dbg !5078

after_check299:                                   ; preds = %switch.case287
  %235 = load ptr, ptr %self, align 8
  %236 = load double, ptr %retparam293, align 8
  %237 = call i64 @std.io.Formatter.ftoa(ptr %retparam300, ptr %235, double %236), !dbg !5079
  %not_err301 = icmp eq i64 %237, 0, !dbg !5079
  %238 = call i1 @llvm.expect.i1(i1 %not_err301, i1 true), !dbg !5079
  br i1 %238, label %after_check303, label %assign_optional302, !dbg !5079

assign_optional302:                               ; preds = %after_check299
  store i64 %237, ptr %len.f292, align 8, !dbg !5079
  br label %after_assign304, !dbg !5079

after_check303:                                   ; preds = %after_check299
  %239 = load i64, ptr %retparam300, align 8, !dbg !5079
  store i64 %239, ptr %len291, align 8, !dbg !5079
  store i64 0, ptr %len.f292, align 8, !dbg !5079
  br label %after_assign304, !dbg !5079

after_assign304:                                  ; preds = %after_check303, %assign_optional302, %assign_optional298
    #dbg_declare(ptr %err305, !5080, !DIExpression(), !5081)
  br label %testblock306, !dbg !5081

testblock306:                                     ; preds = %after_assign304
  %optval307 = load i64, ptr %len.f292, align 8, !dbg !5082
  %not_err308 = icmp eq i64 %optval307, 0, !dbg !5082
  %240 = call i1 @llvm.expect.i1(i1 %not_err308, i1 true), !dbg !5082
  br i1 %240, label %after_check310, label %assign_optional309, !dbg !5082

assign_optional309:                               ; preds = %testblock306
  store i64 %optval307, ptr %err305, align 8, !dbg !5082
  br label %end_block311, !dbg !5082

after_check310:                                   ; preds = %testblock306
  store i64 0, ptr %err305, align 8, !dbg !5082
  br label %end_block311, !dbg !5082

end_block311:                                     ; preds = %after_check310, %assign_optional309
  %241 = load i64, ptr %err305, align 8, !dbg !5082
  %i2b312 = icmp ne i64 %241, 0, !dbg !5082
  br i1 %i2b312, label %if.then313, label %if.exit362, !dbg !5082

if.then313:                                       ; preds = %end_block311
  %242 = load i64, ptr %err305, align 8
  store i64 %242, ptr %switch314, align 8
  br label %switch.entry315

switch.entry315:                                  ; preds = %if.then313
  %243 = load i64, ptr %switch314, align 8
  %eq316 = icmp eq i64 ptrtoint (ptr @std.io.BUFFER_EXCEEDED to i64), %243, !dbg !5083
  br i1 %eq316, label %switch.case319, label %next_if317, !dbg !5083

next_if317:                                       ; preds = %switch.entry315
  %eq318 = icmp eq i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), %243, !dbg !5086
  br i1 %eq318, label %switch.case319, label %next_if336, !dbg !5086

switch.case319:                                   ; preds = %next_if317, %switch.entry315
  %244 = load ptr, ptr %f289, align 8
  store ptr %244, ptr %self320, align 8
  %245 = load i64, ptr %err305, align 8
  store i64 %245, ptr %f321, align 8
  %246 = load ptr, ptr %self320, align 8, !dbg !5087
  %neq323 = icmp ne ptr %246, null, !dbg !5087
  br i1 %neq323, label %assert_ok325, label %assert_fail324, !dbg !5087

assert_fail324:                                   ; preds = %switch.case319
  %247 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5087
  call void %247(ptr @.panic_msg.48, i64 32, ptr @.file.44, i64 20, ptr @.func.215, i64 7, i32 25) #5, !dbg !5087
  unreachable, !dbg !5087

assert_ok325:                                     ; preds = %switch.case319
  %248 = load ptr, ptr %self320, align 8, !dbg !5092
  %ptradd326 = getelementptr inbounds i8, ptr %248, i64 16, !dbg !5092
  %ptradd327 = getelementptr inbounds i8, ptr %ptradd326, i64 24, !dbg !5092
  %249 = load i64, ptr %ptradd327, align 8, !dbg !5092
  %i2b328 = icmp ne i64 %249, 0, !dbg !5092
  br i1 %i2b328, label %if.then329, label %if.exit332, !dbg !5092

if.then329:                                       ; preds = %assert_ok325
  %250 = load ptr, ptr %self320, align 8, !dbg !5093
  %ptradd330 = getelementptr inbounds i8, ptr %250, i64 16, !dbg !5093
  %ptradd331 = getelementptr inbounds i8, ptr %ptradd330, i64 24, !dbg !5093
  %251 = load i64, ptr %ptradd331, align 8, !dbg !5093
  store i64 %251, ptr %blockret322, align 8, !dbg !5093
  br label %expr_block.exit335, !dbg !5093

if.exit332:                                       ; preds = %assert_ok325
  %252 = load ptr, ptr %self320, align 8, !dbg !5094
  %ptradd333 = getelementptr inbounds i8, ptr %252, i64 16, !dbg !5094
  %ptradd334 = getelementptr inbounds i8, ptr %ptradd333, i64 24, !dbg !5094
  %253 = load i64, ptr %f321, align 8, !dbg !5095
  store i64 %253, ptr %ptradd334, align 8, !dbg !5095
  %254 = load i64, ptr %f321, align 8, !dbg !5096
  store i64 %254, ptr %blockret322, align 8, !dbg !5096
  br label %expr_block.exit335, !dbg !5096

expr_block.exit335:                               ; preds = %if.exit332, %if.then329
  %255 = load i64, ptr %blockret322, align 8, !dbg !5096
  store i64 %255, ptr %error_var288, align 8, !dbg !5096
  br label %guard_block363, !dbg !5096

next_if336:                                       ; preds = %next_if317
  br label %switch.default337, !dbg !5096

switch.default337:                                ; preds = %next_if336
  %256 = load ptr, ptr %f289, align 8
  store ptr %256, ptr %self338, align 8
  store i64 ptrtoint (ptr @std.io.INVALID_ARGUMENT to i64), ptr %f339, align 8
  %257 = load ptr, ptr %self338, align 8, !dbg !5097
  %neq341 = icmp ne ptr %257, null, !dbg !5097
  br i1 %neq341, label %assert_ok343, label %assert_fail342, !dbg !5097

assert_fail342:                                   ; preds = %switch.default337
  %258 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5097
  call void %258(ptr @.panic_msg.48, i64 32, ptr @.file.44, i64 20, ptr @.func.215, i64 7, i32 25) #5, !dbg !5097
  unreachable, !dbg !5097

assert_ok343:                                     ; preds = %switch.default337
  %259 = load ptr, ptr %self338, align 8, !dbg !5102
  %ptradd344 = getelementptr inbounds i8, ptr %259, i64 16, !dbg !5102
  %ptradd345 = getelementptr inbounds i8, ptr %ptradd344, i64 24, !dbg !5102
  %260 = load i64, ptr %ptradd345, align 8, !dbg !5102
  %i2b346 = icmp ne i64 %260, 0, !dbg !5102
  br i1 %i2b346, label %if.then347, label %if.exit350, !dbg !5102

if.then347:                                       ; preds = %assert_ok343
  %261 = load ptr, ptr %self338, align 8, !dbg !5103
  %ptradd348 = getelementptr inbounds i8, ptr %261, i64 16, !dbg !5103
  %ptradd349 = getelementptr inbounds i8, ptr %ptradd348, i64 24, !dbg !5103
  %262 = load i64, ptr %ptradd349, align 8, !dbg !5103
  store i64 %262, ptr %blockret340, align 8, !dbg !5103
  br label %expr_block.exit353, !dbg !5103

if.exit350:                                       ; preds = %assert_ok343
  %263 = load ptr, ptr %self338, align 8, !dbg !5104
  %ptradd351 = getelementptr inbounds i8, ptr %263, i64 16, !dbg !5104
  %ptradd352 = getelementptr inbounds i8, ptr %ptradd351, i64 24, !dbg !5104
  %264 = load i64, ptr %f339, align 8, !dbg !5105
  store i64 %264, ptr %ptradd352, align 8, !dbg !5105
  %265 = load i64, ptr %f339, align 8, !dbg !5106
  store i64 %265, ptr %blockret340, align 8, !dbg !5106
  br label %expr_block.exit353, !dbg !5106

expr_block.exit353:                               ; preds = %if.exit350, %if.then347
  %266 = load i64, ptr %blockret340, align 8, !dbg !5106
  store i64 %266, ptr %err305, align 8, !dbg !5106
  %267 = load ptr, ptr %f289, align 8
  %268 = call i64 @std.io.Formatter.out_substr(ptr %retparam355, ptr %267, ptr @.str.223, i64 9), !dbg !5107
  %not_err356 = icmp eq i64 %268, 0, !dbg !5107
  %269 = call i1 @llvm.expect.i1(i1 %not_err356, i1 true), !dbg !5107
  br i1 %269, label %after_check358, label %assign_optional357, !dbg !5107

assign_optional357:                               ; preds = %expr_block.exit353
  store i64 %268, ptr %error_var354, align 8, !dbg !5107
  br label %guard_block359, !dbg !5107

after_check358:                                   ; preds = %expr_block.exit353
  br label %noerr_block360, !dbg !5107

guard_block359:                                   ; preds = %assign_optional357
  %270 = load i64, ptr %error_var354, align 8, !dbg !5107
  store i64 %270, ptr %error_var288, align 8, !dbg !5107
  br label %guard_block363, !dbg !5107

noerr_block360:                                   ; preds = %after_check358
  %271 = load i64, ptr %err305, align 8, !dbg !5108
  store i64 %271, ptr %error_var288, align 8, !dbg !5108
  br label %guard_block363, !dbg !5108

if.exit362:                                       ; preds = %end_block311
  br label %noerr_block364, !dbg !5109

guard_block363:                                   ; preds = %noerr_block360, %guard_block359, %expr_block.exit335
  %272 = load i64, ptr %error_var288, align 8, !dbg !5109
  ret i64 %272, !dbg !5109

noerr_block364:                                   ; preds = %if.exit362
  %273 = load i64, ptr %len291, align 8, !dbg !5109
  %add365 = add i64 %231, %273, !dbg !5072
  store i64 %add365, ptr %total_len, align 8, !dbg !5072
  br label %loop.inc, !dbg !5110

switch.case366:                                   ; preds = %switch.entry198
  %274 = load ptr, ptr %self, align 8, !dbg !5111
  %ptradd367 = getelementptr inbounds i8, ptr %274, i64 16, !dbg !5111
  %275 = load i32, ptr %ptradd367, align 8, !dbg !5113
  %276 = and i32 %275, -33, !dbg !5113
  %277 = or i32 %276, 32, !dbg !5113
  store i32 %277, ptr %ptradd367, align 8, !dbg !5113
  br label %switch.case368, !dbg !5114

switch.case368:                                   ; preds = %switch.entry198, %switch.case366
  %278 = load i64, ptr %total_len, align 8, !dbg !5115
  %279 = load ptr, ptr %self, align 8
  store ptr %279, ptr %f370, align 8
    #dbg_declare(ptr %len372, !5117, !DIExpression(), !5119)
  %lo375 = load i64, ptr %current, align 8
  %ptradd376 = getelementptr inbounds i8, ptr %current, i64 8
  %hi377 = load ptr, ptr %ptradd376, align 8
  %280 = call i64 @std.io.float_from_any(ptr %retparam374, i64 %lo375, ptr %hi377), !dbg !5121
  %not_err378 = icmp eq i64 %280, 0, !dbg !5121
  %281 = call i1 @llvm.expect.i1(i1 %not_err378, i1 true), !dbg !5121
  br i1 %281, label %after_check380, label %assign_optional379, !dbg !5121

assign_optional379:                               ; preds = %switch.case368
  store i64 %280, ptr %len.f373, align 8, !dbg !5121
  br label %after_assign385, !dbg !5121

after_check380:                                   ; preds = %switch.case368
  %282 = load ptr, ptr %self, align 8
  %283 = load double, ptr %retparam374, align 8
  %284 = call i64 @std.io.Formatter.etoa(ptr %retparam381, ptr %282, double %283), !dbg !5122
  %not_err382 = icmp eq i64 %284, 0, !dbg !5122
  %285 = call i1 @llvm.expect.i1(i1 %not_err382, i1 true), !dbg !5122
  br i1 %285, label %after_check384, label %assign_optional383, !dbg !5122

assign_optional383:                               ; preds = %after_check380
  store i64 %284, ptr %len.f373, align 8, !dbg !5122
  br label %after_assign385, !dbg !5122

after_check384:                                   ; preds = %after_check380
  %286 = load i64, ptr %retparam381, align 8, !dbg !5122
  store i64 %286, ptr %len372, align 8, !dbg !5122
  store i64 0, ptr %len.f373, align 8, !dbg !5122
  br label %after_assign385, !dbg !5122

after_assign385:                                  ; preds = %after_check384, %assign_optional383, %assign_optional379
    #dbg_declare(ptr %err386, !5123, !DIExpression(), !5124)
  br label %testblock387, !dbg !5124

testblock387:                                     ; preds = %after_assign385
  %optval388 = load i64, ptr %len.f373, align 8, !dbg !5125
  %not_err389 = icmp eq i64 %optval388, 0, !dbg !5125
  %287 = call i1 @llvm.expect.i1(i1 %not_err389, i1 true), !dbg !5125
  br i1 %287, label %after_check391, label %assign_optional390, !dbg !5125

assign_optional390:                               ; preds = %testblock387
  store i64 %optval388, ptr %err386, align 8, !dbg !5125
  br label %end_block392, !dbg !5125

after_check391:                                   ; preds = %testblock387
  store i64 0, ptr %err386, align 8, !dbg !5125
  br label %end_block392, !dbg !5125

end_block392:                                     ; preds = %after_check391, %assign_optional390
  %288 = load i64, ptr %err386, align 8, !dbg !5125
  %i2b393 = icmp ne i64 %288, 0, !dbg !5125
  br i1 %i2b393, label %if.then394, label %if.exit443, !dbg !5125

if.then394:                                       ; preds = %end_block392
  %289 = load i64, ptr %err386, align 8
  store i64 %289, ptr %switch395, align 8
  br label %switch.entry396

switch.entry396:                                  ; preds = %if.then394
  %290 = load i64, ptr %switch395, align 8
  %eq397 = icmp eq i64 ptrtoint (ptr @std.io.BUFFER_EXCEEDED to i64), %290, !dbg !5126
  br i1 %eq397, label %switch.case400, label %next_if398, !dbg !5126

next_if398:                                       ; preds = %switch.entry396
  %eq399 = icmp eq i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), %290, !dbg !5129
  br i1 %eq399, label %switch.case400, label %next_if417, !dbg !5129

switch.case400:                                   ; preds = %next_if398, %switch.entry396
  %291 = load ptr, ptr %f370, align 8
  store ptr %291, ptr %self401, align 8
  %292 = load i64, ptr %err386, align 8
  store i64 %292, ptr %f402, align 8
  %293 = load ptr, ptr %self401, align 8, !dbg !5130
  %neq404 = icmp ne ptr %293, null, !dbg !5130
  br i1 %neq404, label %assert_ok406, label %assert_fail405, !dbg !5130

assert_fail405:                                   ; preds = %switch.case400
  %294 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5130
  call void %294(ptr @.panic_msg.48, i64 32, ptr @.file.44, i64 20, ptr @.func.215, i64 7, i32 25) #5, !dbg !5130
  unreachable, !dbg !5130

assert_ok406:                                     ; preds = %switch.case400
  %295 = load ptr, ptr %self401, align 8, !dbg !5135
  %ptradd407 = getelementptr inbounds i8, ptr %295, i64 16, !dbg !5135
  %ptradd408 = getelementptr inbounds i8, ptr %ptradd407, i64 24, !dbg !5135
  %296 = load i64, ptr %ptradd408, align 8, !dbg !5135
  %i2b409 = icmp ne i64 %296, 0, !dbg !5135
  br i1 %i2b409, label %if.then410, label %if.exit413, !dbg !5135

if.then410:                                       ; preds = %assert_ok406
  %297 = load ptr, ptr %self401, align 8, !dbg !5136
  %ptradd411 = getelementptr inbounds i8, ptr %297, i64 16, !dbg !5136
  %ptradd412 = getelementptr inbounds i8, ptr %ptradd411, i64 24, !dbg !5136
  %298 = load i64, ptr %ptradd412, align 8, !dbg !5136
  store i64 %298, ptr %blockret403, align 8, !dbg !5136
  br label %expr_block.exit416, !dbg !5136

if.exit413:                                       ; preds = %assert_ok406
  %299 = load ptr, ptr %self401, align 8, !dbg !5137
  %ptradd414 = getelementptr inbounds i8, ptr %299, i64 16, !dbg !5137
  %ptradd415 = getelementptr inbounds i8, ptr %ptradd414, i64 24, !dbg !5137
  %300 = load i64, ptr %f402, align 8, !dbg !5138
  store i64 %300, ptr %ptradd415, align 8, !dbg !5138
  %301 = load i64, ptr %f402, align 8, !dbg !5139
  store i64 %301, ptr %blockret403, align 8, !dbg !5139
  br label %expr_block.exit416, !dbg !5139

expr_block.exit416:                               ; preds = %if.exit413, %if.then410
  %302 = load i64, ptr %blockret403, align 8, !dbg !5139
  store i64 %302, ptr %error_var369, align 8, !dbg !5139
  br label %guard_block444, !dbg !5139

next_if417:                                       ; preds = %next_if398
  br label %switch.default418, !dbg !5139

switch.default418:                                ; preds = %next_if417
  %303 = load ptr, ptr %f370, align 8
  store ptr %303, ptr %self419, align 8
  store i64 ptrtoint (ptr @std.io.INVALID_ARGUMENT to i64), ptr %f420, align 8
  %304 = load ptr, ptr %self419, align 8, !dbg !5140
  %neq422 = icmp ne ptr %304, null, !dbg !5140
  br i1 %neq422, label %assert_ok424, label %assert_fail423, !dbg !5140

assert_fail423:                                   ; preds = %switch.default418
  %305 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5140
  call void %305(ptr @.panic_msg.48, i64 32, ptr @.file.44, i64 20, ptr @.func.215, i64 7, i32 25) #5, !dbg !5140
  unreachable, !dbg !5140

assert_ok424:                                     ; preds = %switch.default418
  %306 = load ptr, ptr %self419, align 8, !dbg !5145
  %ptradd425 = getelementptr inbounds i8, ptr %306, i64 16, !dbg !5145
  %ptradd426 = getelementptr inbounds i8, ptr %ptradd425, i64 24, !dbg !5145
  %307 = load i64, ptr %ptradd426, align 8, !dbg !5145
  %i2b427 = icmp ne i64 %307, 0, !dbg !5145
  br i1 %i2b427, label %if.then428, label %if.exit431, !dbg !5145

if.then428:                                       ; preds = %assert_ok424
  %308 = load ptr, ptr %self419, align 8, !dbg !5146
  %ptradd429 = getelementptr inbounds i8, ptr %308, i64 16, !dbg !5146
  %ptradd430 = getelementptr inbounds i8, ptr %ptradd429, i64 24, !dbg !5146
  %309 = load i64, ptr %ptradd430, align 8, !dbg !5146
  store i64 %309, ptr %blockret421, align 8, !dbg !5146
  br label %expr_block.exit434, !dbg !5146

if.exit431:                                       ; preds = %assert_ok424
  %310 = load ptr, ptr %self419, align 8, !dbg !5147
  %ptradd432 = getelementptr inbounds i8, ptr %310, i64 16, !dbg !5147
  %ptradd433 = getelementptr inbounds i8, ptr %ptradd432, i64 24, !dbg !5147
  %311 = load i64, ptr %f420, align 8, !dbg !5148
  store i64 %311, ptr %ptradd433, align 8, !dbg !5148
  %312 = load i64, ptr %f420, align 8, !dbg !5149
  store i64 %312, ptr %blockret421, align 8, !dbg !5149
  br label %expr_block.exit434, !dbg !5149

expr_block.exit434:                               ; preds = %if.exit431, %if.then428
  %313 = load i64, ptr %blockret421, align 8, !dbg !5149
  store i64 %313, ptr %err386, align 8, !dbg !5149
  %314 = load ptr, ptr %f370, align 8
  %315 = call i64 @std.io.Formatter.out_substr(ptr %retparam436, ptr %314, ptr @.str.224, i64 9), !dbg !5150
  %not_err437 = icmp eq i64 %315, 0, !dbg !5150
  %316 = call i1 @llvm.expect.i1(i1 %not_err437, i1 true), !dbg !5150
  br i1 %316, label %after_check439, label %assign_optional438, !dbg !5150

assign_optional438:                               ; preds = %expr_block.exit434
  store i64 %315, ptr %error_var435, align 8, !dbg !5150
  br label %guard_block440, !dbg !5150

after_check439:                                   ; preds = %expr_block.exit434
  br label %noerr_block441, !dbg !5150

guard_block440:                                   ; preds = %assign_optional438
  %317 = load i64, ptr %error_var435, align 8, !dbg !5150
  store i64 %317, ptr %error_var369, align 8, !dbg !5150
  br label %guard_block444, !dbg !5150

noerr_block441:                                   ; preds = %after_check439
  %318 = load i64, ptr %err386, align 8, !dbg !5151
  store i64 %318, ptr %error_var369, align 8, !dbg !5151
  br label %guard_block444, !dbg !5151

if.exit443:                                       ; preds = %end_block392
  br label %noerr_block445, !dbg !5152

guard_block444:                                   ; preds = %noerr_block441, %guard_block440, %expr_block.exit416
  %319 = load i64, ptr %error_var369, align 8, !dbg !5152
  ret i64 %319, !dbg !5152

noerr_block445:                                   ; preds = %if.exit443
  %320 = load i64, ptr %len372, align 8, !dbg !5152
  %add446 = add i64 %278, %320, !dbg !5115
  store i64 %add446, ptr %total_len, align 8, !dbg !5115
  br label %loop.inc, !dbg !5153

switch.case447:                                   ; preds = %switch.entry198
  %321 = load ptr, ptr %self, align 8, !dbg !5154
  %ptradd448 = getelementptr inbounds i8, ptr %321, i64 16, !dbg !5154
  %322 = load i32, ptr %ptradd448, align 8, !dbg !5156
  %323 = and i32 %322, -33, !dbg !5156
  %324 = or i32 %323, 32, !dbg !5156
  store i32 %324, ptr %ptradd448, align 8, !dbg !5156
  br label %switch.case449, !dbg !5157

switch.case449:                                   ; preds = %switch.entry198, %switch.case447
  %325 = load i64, ptr %total_len, align 8, !dbg !5158
  %326 = load ptr, ptr %self, align 8
  store ptr %326, ptr %f451, align 8
    #dbg_declare(ptr %len453, !5160, !DIExpression(), !5162)
  %lo456 = load i64, ptr %current, align 8
  %ptradd457 = getelementptr inbounds i8, ptr %current, i64 8
  %hi458 = load ptr, ptr %ptradd457, align 8
  %327 = call i64 @std.io.float_from_any(ptr %retparam455, i64 %lo456, ptr %hi458), !dbg !5164
  %not_err459 = icmp eq i64 %327, 0, !dbg !5164
  %328 = call i1 @llvm.expect.i1(i1 %not_err459, i1 true), !dbg !5164
  br i1 %328, label %after_check461, label %assign_optional460, !dbg !5164

assign_optional460:                               ; preds = %switch.case449
  store i64 %327, ptr %len.f454, align 8, !dbg !5164
  br label %after_assign466, !dbg !5164

after_check461:                                   ; preds = %switch.case449
  %329 = load ptr, ptr %self, align 8
  %330 = load double, ptr %retparam455, align 8
  %331 = call i64 @std.io.Formatter.gtoa(ptr %retparam462, ptr %329, double %330), !dbg !5165
  %not_err463 = icmp eq i64 %331, 0, !dbg !5165
  %332 = call i1 @llvm.expect.i1(i1 %not_err463, i1 true), !dbg !5165
  br i1 %332, label %after_check465, label %assign_optional464, !dbg !5165

assign_optional464:                               ; preds = %after_check461
  store i64 %331, ptr %len.f454, align 8, !dbg !5165
  br label %after_assign466, !dbg !5165

after_check465:                                   ; preds = %after_check461
  %333 = load i64, ptr %retparam462, align 8, !dbg !5165
  store i64 %333, ptr %len453, align 8, !dbg !5165
  store i64 0, ptr %len.f454, align 8, !dbg !5165
  br label %after_assign466, !dbg !5165

after_assign466:                                  ; preds = %after_check465, %assign_optional464, %assign_optional460
    #dbg_declare(ptr %err467, !5166, !DIExpression(), !5167)
  br label %testblock468, !dbg !5167

testblock468:                                     ; preds = %after_assign466
  %optval469 = load i64, ptr %len.f454, align 8, !dbg !5168
  %not_err470 = icmp eq i64 %optval469, 0, !dbg !5168
  %334 = call i1 @llvm.expect.i1(i1 %not_err470, i1 true), !dbg !5168
  br i1 %334, label %after_check472, label %assign_optional471, !dbg !5168

assign_optional471:                               ; preds = %testblock468
  store i64 %optval469, ptr %err467, align 8, !dbg !5168
  br label %end_block473, !dbg !5168

after_check472:                                   ; preds = %testblock468
  store i64 0, ptr %err467, align 8, !dbg !5168
  br label %end_block473, !dbg !5168

end_block473:                                     ; preds = %after_check472, %assign_optional471
  %335 = load i64, ptr %err467, align 8, !dbg !5168
  %i2b474 = icmp ne i64 %335, 0, !dbg !5168
  br i1 %i2b474, label %if.then475, label %if.exit524, !dbg !5168

if.then475:                                       ; preds = %end_block473
  %336 = load i64, ptr %err467, align 8
  store i64 %336, ptr %switch476, align 8
  br label %switch.entry477

switch.entry477:                                  ; preds = %if.then475
  %337 = load i64, ptr %switch476, align 8
  %eq478 = icmp eq i64 ptrtoint (ptr @std.io.BUFFER_EXCEEDED to i64), %337, !dbg !5169
  br i1 %eq478, label %switch.case481, label %next_if479, !dbg !5169

next_if479:                                       ; preds = %switch.entry477
  %eq480 = icmp eq i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), %337, !dbg !5172
  br i1 %eq480, label %switch.case481, label %next_if498, !dbg !5172

switch.case481:                                   ; preds = %next_if479, %switch.entry477
  %338 = load ptr, ptr %f451, align 8
  store ptr %338, ptr %self482, align 8
  %339 = load i64, ptr %err467, align 8
  store i64 %339, ptr %f483, align 8
  %340 = load ptr, ptr %self482, align 8, !dbg !5173
  %neq485 = icmp ne ptr %340, null, !dbg !5173
  br i1 %neq485, label %assert_ok487, label %assert_fail486, !dbg !5173

assert_fail486:                                   ; preds = %switch.case481
  %341 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5173
  call void %341(ptr @.panic_msg.48, i64 32, ptr @.file.44, i64 20, ptr @.func.215, i64 7, i32 25) #5, !dbg !5173
  unreachable, !dbg !5173

assert_ok487:                                     ; preds = %switch.case481
  %342 = load ptr, ptr %self482, align 8, !dbg !5178
  %ptradd488 = getelementptr inbounds i8, ptr %342, i64 16, !dbg !5178
  %ptradd489 = getelementptr inbounds i8, ptr %ptradd488, i64 24, !dbg !5178
  %343 = load i64, ptr %ptradd489, align 8, !dbg !5178
  %i2b490 = icmp ne i64 %343, 0, !dbg !5178
  br i1 %i2b490, label %if.then491, label %if.exit494, !dbg !5178

if.then491:                                       ; preds = %assert_ok487
  %344 = load ptr, ptr %self482, align 8, !dbg !5179
  %ptradd492 = getelementptr inbounds i8, ptr %344, i64 16, !dbg !5179
  %ptradd493 = getelementptr inbounds i8, ptr %ptradd492, i64 24, !dbg !5179
  %345 = load i64, ptr %ptradd493, align 8, !dbg !5179
  store i64 %345, ptr %blockret484, align 8, !dbg !5179
  br label %expr_block.exit497, !dbg !5179

if.exit494:                                       ; preds = %assert_ok487
  %346 = load ptr, ptr %self482, align 8, !dbg !5180
  %ptradd495 = getelementptr inbounds i8, ptr %346, i64 16, !dbg !5180
  %ptradd496 = getelementptr inbounds i8, ptr %ptradd495, i64 24, !dbg !5180
  %347 = load i64, ptr %f483, align 8, !dbg !5181
  store i64 %347, ptr %ptradd496, align 8, !dbg !5181
  %348 = load i64, ptr %f483, align 8, !dbg !5182
  store i64 %348, ptr %blockret484, align 8, !dbg !5182
  br label %expr_block.exit497, !dbg !5182

expr_block.exit497:                               ; preds = %if.exit494, %if.then491
  %349 = load i64, ptr %blockret484, align 8, !dbg !5182
  store i64 %349, ptr %error_var450, align 8, !dbg !5182
  br label %guard_block525, !dbg !5182

next_if498:                                       ; preds = %next_if479
  br label %switch.default499, !dbg !5182

switch.default499:                                ; preds = %next_if498
  %350 = load ptr, ptr %f451, align 8
  store ptr %350, ptr %self500, align 8
  store i64 ptrtoint (ptr @std.io.INVALID_ARGUMENT to i64), ptr %f501, align 8
  %351 = load ptr, ptr %self500, align 8, !dbg !5183
  %neq503 = icmp ne ptr %351, null, !dbg !5183
  br i1 %neq503, label %assert_ok505, label %assert_fail504, !dbg !5183

assert_fail504:                                   ; preds = %switch.default499
  %352 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5183
  call void %352(ptr @.panic_msg.48, i64 32, ptr @.file.44, i64 20, ptr @.func.215, i64 7, i32 25) #5, !dbg !5183
  unreachable, !dbg !5183

assert_ok505:                                     ; preds = %switch.default499
  %353 = load ptr, ptr %self500, align 8, !dbg !5188
  %ptradd506 = getelementptr inbounds i8, ptr %353, i64 16, !dbg !5188
  %ptradd507 = getelementptr inbounds i8, ptr %ptradd506, i64 24, !dbg !5188
  %354 = load i64, ptr %ptradd507, align 8, !dbg !5188
  %i2b508 = icmp ne i64 %354, 0, !dbg !5188
  br i1 %i2b508, label %if.then509, label %if.exit512, !dbg !5188

if.then509:                                       ; preds = %assert_ok505
  %355 = load ptr, ptr %self500, align 8, !dbg !5189
  %ptradd510 = getelementptr inbounds i8, ptr %355, i64 16, !dbg !5189
  %ptradd511 = getelementptr inbounds i8, ptr %ptradd510, i64 24, !dbg !5189
  %356 = load i64, ptr %ptradd511, align 8, !dbg !5189
  store i64 %356, ptr %blockret502, align 8, !dbg !5189
  br label %expr_block.exit515, !dbg !5189

if.exit512:                                       ; preds = %assert_ok505
  %357 = load ptr, ptr %self500, align 8, !dbg !5190
  %ptradd513 = getelementptr inbounds i8, ptr %357, i64 16, !dbg !5190
  %ptradd514 = getelementptr inbounds i8, ptr %ptradd513, i64 24, !dbg !5190
  %358 = load i64, ptr %f501, align 8, !dbg !5191
  store i64 %358, ptr %ptradd514, align 8, !dbg !5191
  %359 = load i64, ptr %f501, align 8, !dbg !5192
  store i64 %359, ptr %blockret502, align 8, !dbg !5192
  br label %expr_block.exit515, !dbg !5192

expr_block.exit515:                               ; preds = %if.exit512, %if.then509
  %360 = load i64, ptr %blockret502, align 8, !dbg !5192
  store i64 %360, ptr %err467, align 8, !dbg !5192
  %361 = load ptr, ptr %f451, align 8
  %362 = call i64 @std.io.Formatter.out_substr(ptr %retparam517, ptr %361, ptr @.str.225, i64 9), !dbg !5193
  %not_err518 = icmp eq i64 %362, 0, !dbg !5193
  %363 = call i1 @llvm.expect.i1(i1 %not_err518, i1 true), !dbg !5193
  br i1 %363, label %after_check520, label %assign_optional519, !dbg !5193

assign_optional519:                               ; preds = %expr_block.exit515
  store i64 %362, ptr %error_var516, align 8, !dbg !5193
  br label %guard_block521, !dbg !5193

after_check520:                                   ; preds = %expr_block.exit515
  br label %noerr_block522, !dbg !5193

guard_block521:                                   ; preds = %assign_optional519
  %364 = load i64, ptr %error_var516, align 8, !dbg !5193
  store i64 %364, ptr %error_var450, align 8, !dbg !5193
  br label %guard_block525, !dbg !5193

noerr_block522:                                   ; preds = %after_check520
  %365 = load i64, ptr %err467, align 8, !dbg !5194
  store i64 %365, ptr %error_var450, align 8, !dbg !5194
  br label %guard_block525, !dbg !5194

if.exit524:                                       ; preds = %end_block473
  br label %noerr_block526, !dbg !5195

guard_block525:                                   ; preds = %noerr_block522, %guard_block521, %expr_block.exit497
  %366 = load i64, ptr %error_var450, align 8, !dbg !5195
  ret i64 %366, !dbg !5195

noerr_block526:                                   ; preds = %if.exit524
  %367 = load i64, ptr %len453, align 8, !dbg !5195
  %add527 = add i64 %325, %367, !dbg !5158
  store i64 %add527, ptr %total_len, align 8, !dbg !5158
  br label %loop.inc, !dbg !5196

switch.case528:                                   ; preds = %switch.entry198
  %368 = load i64, ptr %total_len, align 8, !dbg !5197
  %369 = load ptr, ptr %self, align 8
  %lo531 = load i64, ptr %current, align 8
  %ptradd532 = getelementptr inbounds i8, ptr %current, i64 8
  %hi533 = load ptr, ptr %ptradd532, align 8
  %370 = call i64 @std.io.Formatter.out_char(ptr %retparam530, ptr %369, i64 %lo531, ptr %hi533), !dbg !5199
  %not_err534 = icmp eq i64 %370, 0, !dbg !5199
  %371 = call i1 @llvm.expect.i1(i1 %not_err534, i1 true), !dbg !5199
  br i1 %371, label %after_check536, label %assign_optional535, !dbg !5199

assign_optional535:                               ; preds = %switch.case528
  store i64 %370, ptr %error_var529, align 8, !dbg !5199
  br label %guard_block537, !dbg !5199

after_check536:                                   ; preds = %switch.case528
  br label %noerr_block538, !dbg !5199

guard_block537:                                   ; preds = %assign_optional535
  %372 = load i64, ptr %error_var529, align 8, !dbg !5199
  ret i64 %372, !dbg !5199

noerr_block538:                                   ; preds = %after_check536
  %373 = load i64, ptr %retparam530, align 8, !dbg !5199
  %add539 = add i64 %368, %373, !dbg !5197
  store i64 %add539, ptr %total_len, align 8, !dbg !5197
  br label %loop.inc, !dbg !5200

switch.case540:                                   ; preds = %switch.entry198
  %374 = load ptr, ptr %self, align 8, !dbg !5201
  %ptradd541 = getelementptr inbounds i8, ptr %374, i64 16, !dbg !5201
  %375 = load i32, ptr %ptradd541, align 8, !dbg !5203
  %376 = and i32 %375, -33, !dbg !5203
  %377 = or i32 %376, 32, !dbg !5203
  store i32 %377, ptr %ptradd541, align 8, !dbg !5203
  br label %switch.case542, !dbg !5204

switch.case542:                                   ; preds = %switch.entry198, %switch.case540
    #dbg_declare(ptr %out, !5205, !DIExpression(), !5207)
  %ptradd543 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !5208
  %378 = load i64, ptr %ptradd543, align 8
  store i64 %378, ptr %switch544, align 8
  br label %switch.entry545

switch.entry545:                                  ; preds = %switch.case542
  %379 = load i64, ptr %switch544, align 8
  br label %check_subtype, !dbg !5210

check_subtype:                                    ; preds = %parent_type_block, %switch.entry545
  %380 = phi i64 [ %379, %switch.entry545 ], [ %typeid.parent, %parent_type_block ], !dbg !5210
  %eq546 = icmp eq i64 ptrtoint (ptr @"$ct.sa$char" to i64), %380, !dbg !5210
  br i1 %eq546, label %result_block, label %parent_type_block, !dbg !5210

parent_type_block:                                ; preds = %check_subtype
  %381 = inttoptr i64 %380 to ptr, !dbg !5210
  %ptradd547 = getelementptr inbounds i8, ptr %381, i64 8, !dbg !5210
  %typeid.parent = load i64, ptr %ptradd547, align 8, !dbg !5210
  %382 = icmp eq i64 %typeid.parent, 0, !dbg !5210
  br i1 %382, label %result_block, label %check_subtype, !dbg !5210

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %383 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !5210
  br i1 %383, label %switch.case555, label %next_if548, !dbg !5210

next_if548:                                       ; preds = %result_block
  br label %check_subtype549, !dbg !5211

check_subtype549:                                 ; preds = %parent_type_block551, %next_if548
  %384 = phi i64 [ %379, %next_if548 ], [ %typeid.parent553, %parent_type_block551 ], !dbg !5211
  %eq550 = icmp eq i64 ptrtoint (ptr @"$ct.sa$ichar" to i64), %384, !dbg !5211
  br i1 %eq550, label %result_block554, label %parent_type_block551, !dbg !5211

parent_type_block551:                             ; preds = %check_subtype549
  %385 = inttoptr i64 %384 to ptr, !dbg !5211
  %ptradd552 = getelementptr inbounds i8, ptr %385, i64 8, !dbg !5211
  %typeid.parent553 = load i64, ptr %ptradd552, align 8, !dbg !5211
  %386 = icmp eq i64 %typeid.parent553, 0, !dbg !5211
  br i1 %386, label %result_block554, label %check_subtype549, !dbg !5211

result_block554:                                  ; preds = %parent_type_block551, %check_subtype549
  %387 = phi i1 [ false, %parent_type_block551 ], [ true, %check_subtype549 ], !dbg !5211
  br i1 %387, label %switch.case555, label %next_if566, !dbg !5211

switch.case555:                                   ; preds = %result_block554, %result_block
  %388 = load ptr, ptr %current, align 8, !dbg !5212
  %checknull = icmp eq ptr %388, null, !dbg !5212
  %389 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !5212
  br i1 %389, label %panic556, label %checkok557, !dbg !5212

checkok557:                                       ; preds = %switch.case555
  %390 = ptrtoint ptr %388 to i64, !dbg !5212
  %391 = urem i64 %390, 8, !dbg !5212
  %392 = icmp ne i64 %391, 0, !dbg !5212
  %393 = call i1 @llvm.expect.i1(i1 %392, i1 false), !dbg !5212
  br i1 %393, label %panic558, label %checkok565, !dbg !5212

checkok565:                                       ; preds = %checkok557
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out, ptr align 8 %388, i32 16, i1 false), !dbg !5212
  br label %switch.exit637, !dbg !5212

next_if566:                                       ; preds = %result_block554
  br label %switch.default567, !dbg !5212

switch.default567:                                ; preds = %next_if566
  %ptradd568 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !5214
  %394 = load i64, ptr %ptradd568, align 8, !dbg !5214
  %"introspect*" = inttoptr i64 %394 to ptr, !dbg !5214
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !5214
  %eq569 = icmp eq i8 %typeid.kind, 14, !dbg !5214
  br i1 %eq569, label %and.rhs, label %and.phi, !dbg !5214

and.rhs:                                          ; preds = %switch.default567
  %ptradd570 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !5216
  %395 = load i64, ptr %ptradd570, align 8, !dbg !5216
  %"introspect*571" = inttoptr i64 %395 to ptr, !dbg !5216
  %typeid.kind572 = load i8, ptr %"introspect*571", align 8, !dbg !5216
  %eq573 = icmp eq i8 %typeid.kind572, 14, !dbg !5216
  br i1 %eq573, label %check_type_ok, label %check_next, !dbg !5216

check_next:                                       ; preds = %and.rhs
  %eq574 = icmp eq i8 %typeid.kind572, 18, !dbg !5216
  br i1 %eq574, label %check_type_ok, label %check_next575, !dbg !5216

check_next575:                                    ; preds = %check_next
  %eq576 = icmp eq i8 %typeid.kind572, 16, !dbg !5216
  br i1 %eq576, label %check_type_ok, label %check_next577, !dbg !5216

check_next577:                                    ; preds = %check_next575
  %eq578 = icmp eq i8 %typeid.kind572, 8, !dbg !5216
  br i1 %eq578, label %check_type_ok, label %check_next579, !dbg !5216

check_next579:                                    ; preds = %check_next577
  %eq580 = icmp eq i8 %typeid.kind572, 15, !dbg !5216
  br i1 %eq580, label %check_type_ok, label %check_next581, !dbg !5216

check_next581:                                    ; preds = %check_next579
  %eq582 = icmp eq i8 %typeid.kind572, 17, !dbg !5216
  br i1 %eq582, label %check_type_ok, label %check_next583, !dbg !5216

check_next583:                                    ; preds = %check_next581
  %eq584 = icmp eq i8 %typeid.kind572, 13, !dbg !5216
  br i1 %eq584, label %check_type_ok, label %check_next585, !dbg !5216

check_next585:                                    ; preds = %check_next583
  %eq586 = icmp eq i8 %typeid.kind572, 11, !dbg !5216
  br i1 %eq586, label %check_type_ok, label %check_next587, !dbg !5216

check_next587:                                    ; preds = %check_next585
  %396 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5216
  call void %396(ptr @.panic_msg.49, i64 49, ptr @.file.164, i64 12, ptr @.func.215, i64 7, i32 492) #5, !dbg !5216
  unreachable, !dbg !5216

check_type_ok:                                    ; preds = %check_next585, %check_next583, %check_next581, %check_next579, %check_next577, %check_next575, %check_next, %and.rhs
  %ptradd588 = getelementptr inbounds i8, ptr %"introspect*571", i64 32, !dbg !5216
  %typeid.inner = load i64, ptr %ptradd588, align 8, !dbg !5216
  %eq589 = icmp eq i64 %typeid.inner, ptrtoint (ptr @"$ct.char" to i64), !dbg !5216
  br i1 %eq589, label %or.phi, label %or.rhs, !dbg !5216

or.rhs:                                           ; preds = %check_type_ok
  %ptradd590 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !5217
  %397 = load i64, ptr %ptradd590, align 8, !dbg !5217
  %"introspect*591" = inttoptr i64 %397 to ptr, !dbg !5217
  %typeid.kind592 = load i8, ptr %"introspect*591", align 8, !dbg !5217
  %eq593 = icmp eq i8 %typeid.kind592, 14, !dbg !5217
  br i1 %eq593, label %check_type_ok609, label %check_next594, !dbg !5217

check_next594:                                    ; preds = %or.rhs
  %eq595 = icmp eq i8 %typeid.kind592, 18, !dbg !5217
  br i1 %eq595, label %check_type_ok609, label %check_next596, !dbg !5217

check_next596:                                    ; preds = %check_next594
  %eq597 = icmp eq i8 %typeid.kind592, 16, !dbg !5217
  br i1 %eq597, label %check_type_ok609, label %check_next598, !dbg !5217

check_next598:                                    ; preds = %check_next596
  %eq599 = icmp eq i8 %typeid.kind592, 8, !dbg !5217
  br i1 %eq599, label %check_type_ok609, label %check_next600, !dbg !5217

check_next600:                                    ; preds = %check_next598
  %eq601 = icmp eq i8 %typeid.kind592, 15, !dbg !5217
  br i1 %eq601, label %check_type_ok609, label %check_next602, !dbg !5217

check_next602:                                    ; preds = %check_next600
  %eq603 = icmp eq i8 %typeid.kind592, 17, !dbg !5217
  br i1 %eq603, label %check_type_ok609, label %check_next604, !dbg !5217

check_next604:                                    ; preds = %check_next602
  %eq605 = icmp eq i8 %typeid.kind592, 13, !dbg !5217
  br i1 %eq605, label %check_type_ok609, label %check_next606, !dbg !5217

check_next606:                                    ; preds = %check_next604
  %eq607 = icmp eq i8 %typeid.kind592, 11, !dbg !5217
  br i1 %eq607, label %check_type_ok609, label %check_next608, !dbg !5217

check_next608:                                    ; preds = %check_next606
  %398 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5217
  call void %398(ptr @.panic_msg.49, i64 49, ptr @.file.164, i64 12, ptr @.func.215, i64 7, i32 492) #5, !dbg !5217
  unreachable, !dbg !5217

check_type_ok609:                                 ; preds = %check_next606, %check_next604, %check_next602, %check_next600, %check_next598, %check_next596, %check_next594, %or.rhs
  %ptradd610 = getelementptr inbounds i8, ptr %"introspect*591", i64 32, !dbg !5217
  %typeid.inner611 = load i64, ptr %ptradd610, align 8, !dbg !5217
  %eq612 = icmp eq i64 %typeid.inner611, ptrtoint (ptr @"$ct.ichar" to i64), !dbg !5217
  br label %or.phi, !dbg !5217

or.phi:                                           ; preds = %check_type_ok609, %check_type_ok
  %val613 = phi i1 [ true, %check_type_ok ], [ %eq612, %check_type_ok609 ], !dbg !5217
  br label %and.phi, !dbg !5217

and.phi:                                          ; preds = %or.phi, %switch.default567
  %val614 = phi i1 [ false, %switch.default567 ], [ %val613, %or.phi ], !dbg !5217
  br i1 %val614, label %if.then615, label %if.exit628, !dbg !5217

if.then615:                                       ; preds = %and.phi
  %399 = load ptr, ptr %current, align 8, !dbg !5218
  store ptr %399, ptr %taddr616, align 8
  %400 = load ptr, ptr %taddr616, align 8
  %ptradd617 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !5220
  %401 = load i64, ptr %ptradd617, align 8, !dbg !5220
  %"introspect*618" = inttoptr i64 %401 to ptr, !dbg !5220
  %typeid.kind619 = load i8, ptr %"introspect*618", align 8, !dbg !5220
  %ptradd620 = getelementptr inbounds i8, ptr %"introspect*618", i64 24, !dbg !5220
  %typeid.size = load i64, ptr %ptradd620, align 8, !dbg !5220
  %add621 = add i64 0, %typeid.size, !dbg !5220
  %gt = icmp ugt i64 0, %add621, !dbg !5220
  %sub = sub i64 %add621, 0, !dbg !5220
  %402 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !5220
  br i1 %402, label %panic622, label %checkok627, !dbg !5220

checkok627:                                       ; preds = %if.then615
  %size = sub i64 %add621, 0, !dbg !5221
  %403 = insertvalue %"char[]" undef, ptr %400, 0, !dbg !5221
  %404 = insertvalue %"char[]" %403, i64 %size, 1, !dbg !5221
  store %"char[]" %404, ptr %out, align 8, !dbg !5221
  br label %switch.exit637, !dbg !5222

if.exit628:                                       ; preds = %and.phi
  %405 = load i64, ptr %total_len, align 8, !dbg !5223
  %406 = load ptr, ptr %self, align 8
  %407 = call i64 @std.io.Formatter.out_substr(ptr %retparam630, ptr %406, ptr @.str.226, i64 9), !dbg !5224
  %not_err631 = icmp eq i64 %407, 0, !dbg !5224
  %408 = call i1 @llvm.expect.i1(i1 %not_err631, i1 true), !dbg !5224
  br i1 %408, label %after_check633, label %assign_optional632, !dbg !5224

assign_optional632:                               ; preds = %if.exit628
  store i64 %407, ptr %error_var629, align 8, !dbg !5224
  br label %guard_block634, !dbg !5224

after_check633:                                   ; preds = %if.exit628
  br label %noerr_block635, !dbg !5224

guard_block634:                                   ; preds = %assign_optional632
  %409 = load i64, ptr %error_var629, align 8, !dbg !5224
  ret i64 %409, !dbg !5224

noerr_block635:                                   ; preds = %after_check633
  %410 = load i64, ptr %retparam630, align 8, !dbg !5224
  %add636 = add i64 %405, %410, !dbg !5223
  store i64 %add636, ptr %total_len, align 8, !dbg !5223
  br label %loop.inc, !dbg !5225

switch.exit637:                                   ; preds = %checkok627, %checkok565
  %411 = load ptr, ptr %self, align 8, !dbg !5226
  %ptradd638 = getelementptr inbounds i8, ptr %411, i64 16, !dbg !5226
  %412 = load i32, ptr %ptradd638, align 8, !dbg !5226
  %lshrl = lshr i32 %412, 1, !dbg !5226
  %413 = and i32 1, %lshrl, !dbg !5226
  %trunc = trunc i32 %413 to i8, !dbg !5226
  %414 = trunc i8 %trunc to i1, !dbg !5226
  br i1 %414, label %if.then639, label %if.exit665, !dbg !5226

if.then639:                                       ; preds = %switch.exit637
    #dbg_declare(ptr %len640, !5227, !DIExpression(), !5229)
  %415 = load ptr, ptr %self, align 8, !dbg !5230
  %ptradd642 = getelementptr inbounds i8, ptr %415, i64 16, !dbg !5230
  %416 = load i32, ptr %ptradd642, align 8, !dbg !5230
  %lshrl643 = lshr i32 %416, 5, !dbg !5230
  %417 = and i32 1, %lshrl643, !dbg !5230
  %trunc644 = trunc i32 %417 to i8, !dbg !5230
  %418 = load ptr, ptr %self, align 8
  %lo646 = load ptr, ptr %out, align 8
  %ptradd647 = getelementptr inbounds i8, ptr %out, i64 8
  %hi648 = load i64, ptr %ptradd647, align 8
  %419 = call i64 @std.io.print_hex_chars(ptr %retparam645, ptr %418, ptr %lo646, i64 %hi648, i8 zeroext %trunc644) #6, !dbg !5231
  %not_err649 = icmp eq i64 %419, 0, !dbg !5231
  %420 = call i1 @llvm.expect.i1(i1 %not_err649, i1 true), !dbg !5231
  br i1 %420, label %after_check651, label %assign_optional650, !dbg !5231

assign_optional650:                               ; preds = %if.then639
  store i64 %419, ptr %error_var641, align 8, !dbg !5231
  br label %guard_block652, !dbg !5231

after_check651:                                   ; preds = %if.then639
  br label %noerr_block653, !dbg !5231

guard_block652:                                   ; preds = %assign_optional650
  %421 = load i64, ptr %error_var641, align 8, !dbg !5231
  ret i64 %421, !dbg !5231

noerr_block653:                                   ; preds = %after_check651
  %422 = load i64, ptr %retparam645, align 8, !dbg !5231
  store i64 %422, ptr %len640, align 8, !dbg !5231
  %423 = load i64, ptr %total_len, align 8, !dbg !5232
  %424 = load i64, ptr %len640, align 8, !dbg !5233
  %add654 = add i64 %423, %424, !dbg !5232
  store i64 %add654, ptr %total_len, align 8, !dbg !5232
  %425 = load i64, ptr %total_len, align 8, !dbg !5234
  %426 = load ptr, ptr %self, align 8, !dbg !5235
  %ptradd656 = getelementptr inbounds i8, ptr %426, i64 16, !dbg !5235
  %ptradd657 = getelementptr inbounds i8, ptr %ptradd656, i64 4, !dbg !5235
  %427 = load i32, ptr %ptradd657, align 4, !dbg !5235
  %zext = zext i32 %427 to i64, !dbg !5235
  %428 = load i64, ptr %len640, align 8, !dbg !5236
  %429 = load ptr, ptr %self, align 8
  %430 = call i64 @std.io.Formatter.pad(ptr %retparam658, ptr %429, i8 zeroext 32, i64 %zext, i64 %428) #6, !dbg !5237
  %not_err659 = icmp eq i64 %430, 0, !dbg !5237
  %431 = call i1 @llvm.expect.i1(i1 %not_err659, i1 true), !dbg !5237
  br i1 %431, label %after_check661, label %assign_optional660, !dbg !5237

assign_optional660:                               ; preds = %noerr_block653
  store i64 %430, ptr %error_var655, align 8, !dbg !5237
  br label %guard_block662, !dbg !5237

after_check661:                                   ; preds = %noerr_block653
  br label %noerr_block663, !dbg !5237

guard_block662:                                   ; preds = %assign_optional660
  %432 = load i64, ptr %error_var655, align 8, !dbg !5237
  ret i64 %432, !dbg !5237

noerr_block663:                                   ; preds = %after_check661
  %433 = load i64, ptr %retparam658, align 8, !dbg !5237
  %add664 = add i64 %425, %433, !dbg !5234
  store i64 %add664, ptr %total_len, align 8, !dbg !5234
  br label %loop.inc, !dbg !5238

if.exit665:                                       ; preds = %switch.exit637
  %434 = load ptr, ptr %self, align 8, !dbg !5239
  %ptradd666 = getelementptr inbounds i8, ptr %434, i64 16, !dbg !5239
  %ptradd667 = getelementptr inbounds i8, ptr %ptradd666, i64 4, !dbg !5239
  %435 = load i32, ptr %ptradd667, align 4, !dbg !5239
  %i2b668 = icmp ne i32 %435, 0, !dbg !5239
  br i1 %i2b668, label %if.then669, label %if.exit682, !dbg !5239

if.then669:                                       ; preds = %if.exit665
  %436 = load i64, ptr %total_len, align 8, !dbg !5240
  %437 = load ptr, ptr %self, align 8, !dbg !5242
  %ptradd671 = getelementptr inbounds i8, ptr %437, i64 16, !dbg !5242
  %ptradd672 = getelementptr inbounds i8, ptr %ptradd671, i64 4, !dbg !5242
  %438 = load i32, ptr %ptradd672, align 4, !dbg !5242
  %zext673 = zext i32 %438 to i64, !dbg !5242
  %ptradd674 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !5243
  %439 = load i64, ptr %ptradd674, align 8, !dbg !5243
  %mul = mul i64 %439, 2, !dbg !5243
  %440 = load ptr, ptr %self, align 8
  %441 = call i64 @std.io.Formatter.pad(ptr %retparam675, ptr %440, i8 zeroext 32, i64 %zext673, i64 %mul) #6, !dbg !5244
  %not_err676 = icmp eq i64 %441, 0, !dbg !5244
  %442 = call i1 @llvm.expect.i1(i1 %not_err676, i1 true), !dbg !5244
  br i1 %442, label %after_check678, label %assign_optional677, !dbg !5244

assign_optional677:                               ; preds = %if.then669
  store i64 %441, ptr %error_var670, align 8, !dbg !5244
  br label %guard_block679, !dbg !5244

after_check678:                                   ; preds = %if.then669
  br label %noerr_block680, !dbg !5244

guard_block679:                                   ; preds = %assign_optional677
  %443 = load i64, ptr %error_var670, align 8, !dbg !5244
  ret i64 %443, !dbg !5244

noerr_block680:                                   ; preds = %after_check678
  %444 = load i64, ptr %retparam675, align 8, !dbg !5244
  %add681 = add i64 %436, %444, !dbg !5240
  store i64 %add681, ptr %total_len, align 8, !dbg !5240
  br label %if.exit682, !dbg !5240

if.exit682:                                       ; preds = %noerr_block680, %if.exit665
  %445 = load i64, ptr %total_len, align 8, !dbg !5245
  %446 = load ptr, ptr %self, align 8, !dbg !5246
  %ptradd684 = getelementptr inbounds i8, ptr %446, i64 16, !dbg !5246
  %447 = load i32, ptr %ptradd684, align 8, !dbg !5246
  %lshrl685 = lshr i32 %447, 5, !dbg !5246
  %448 = and i32 1, %lshrl685, !dbg !5246
  %trunc686 = trunc i32 %448 to i8, !dbg !5246
  %449 = load ptr, ptr %self, align 8
  %lo688 = load ptr, ptr %out, align 8
  %ptradd689 = getelementptr inbounds i8, ptr %out, i64 8
  %hi690 = load i64, ptr %ptradd689, align 8
  %450 = call i64 @std.io.print_hex_chars(ptr %retparam687, ptr %449, ptr %lo688, i64 %hi690, i8 zeroext %trunc686) #6, !dbg !5247
  %not_err691 = icmp eq i64 %450, 0, !dbg !5247
  %451 = call i1 @llvm.expect.i1(i1 %not_err691, i1 true), !dbg !5247
  br i1 %451, label %after_check693, label %assign_optional692, !dbg !5247

assign_optional692:                               ; preds = %if.exit682
  store i64 %450, ptr %error_var683, align 8, !dbg !5247
  br label %guard_block694, !dbg !5247

after_check693:                                   ; preds = %if.exit682
  br label %noerr_block695, !dbg !5247

guard_block694:                                   ; preds = %assign_optional692
  %452 = load i64, ptr %error_var683, align 8, !dbg !5247
  ret i64 %452, !dbg !5247

noerr_block695:                                   ; preds = %after_check693
  %453 = load i64, ptr %retparam687, align 8, !dbg !5247
  %add696 = add i64 %445, %453, !dbg !5245
  store i64 %add696, ptr %total_len, align 8, !dbg !5245
  br label %loop.inc, !dbg !5248

switch.case697:                                   ; preds = %switch.entry198
  %454 = load ptr, ptr %self, align 8, !dbg !5249
  %ptradd698 = getelementptr inbounds i8, ptr %454, i64 16, !dbg !5249
  %455 = load i32, ptr %ptradd698, align 8, !dbg !5249
  %lshrl699 = lshr i32 %455, 1, !dbg !5249
  %456 = and i32 1, %lshrl699, !dbg !5249
  %trunc700 = trunc i32 %456 to i8, !dbg !5249
  %457 = trunc i8 %trunc700 to i1, !dbg !5249
  br i1 %457, label %if.then701, label %if.exit725, !dbg !5249

if.then701:                                       ; preds = %switch.case697
    #dbg_declare(ptr %len702, !5251, !DIExpression(), !5253)
  %458 = load ptr, ptr %self, align 8
  %lo705 = load i64, ptr %current, align 8
  %ptradd706 = getelementptr inbounds i8, ptr %current, i64 8
  %hi707 = load ptr, ptr %ptradd706, align 8
  %459 = call i64 @std.io.Formatter.out_str(ptr %retparam704, ptr %458, i64 %lo705, ptr %hi707), !dbg !5254
  %not_err708 = icmp eq i64 %459, 0, !dbg !5254
  %460 = call i1 @llvm.expect.i1(i1 %not_err708, i1 true), !dbg !5254
  br i1 %460, label %after_check710, label %assign_optional709, !dbg !5254

assign_optional709:                               ; preds = %if.then701
  store i64 %459, ptr %error_var703, align 8, !dbg !5254
  br label %guard_block711, !dbg !5254

after_check710:                                   ; preds = %if.then701
  br label %noerr_block712, !dbg !5254

guard_block711:                                   ; preds = %assign_optional709
  %461 = load i64, ptr %error_var703, align 8, !dbg !5254
  ret i64 %461, !dbg !5254

noerr_block712:                                   ; preds = %after_check710
  %462 = load i64, ptr %retparam704, align 8, !dbg !5254
  store i64 %462, ptr %len702, align 8, !dbg !5254
  %463 = load i64, ptr %total_len, align 8, !dbg !5255
  %464 = load i64, ptr %len702, align 8, !dbg !5256
  %add713 = add i64 %463, %464, !dbg !5255
  store i64 %add713, ptr %total_len, align 8, !dbg !5255
  %465 = load i64, ptr %total_len, align 8, !dbg !5257
  %466 = load ptr, ptr %self, align 8, !dbg !5258
  %ptradd715 = getelementptr inbounds i8, ptr %466, i64 16, !dbg !5258
  %ptradd716 = getelementptr inbounds i8, ptr %ptradd715, i64 4, !dbg !5258
  %467 = load i32, ptr %ptradd716, align 4, !dbg !5258
  %zext717 = zext i32 %467 to i64, !dbg !5258
  %468 = load i64, ptr %len702, align 8, !dbg !5259
  %469 = load ptr, ptr %self, align 8
  %470 = call i64 @std.io.Formatter.pad(ptr %retparam718, ptr %469, i8 zeroext 32, i64 %zext717, i64 %468) #6, !dbg !5260
  %not_err719 = icmp eq i64 %470, 0, !dbg !5260
  %471 = call i1 @llvm.expect.i1(i1 %not_err719, i1 true), !dbg !5260
  br i1 %471, label %after_check721, label %assign_optional720, !dbg !5260

assign_optional720:                               ; preds = %noerr_block712
  store i64 %470, ptr %error_var714, align 8, !dbg !5260
  br label %guard_block722, !dbg !5260

after_check721:                                   ; preds = %noerr_block712
  br label %noerr_block723, !dbg !5260

guard_block722:                                   ; preds = %assign_optional720
  %472 = load i64, ptr %error_var714, align 8, !dbg !5260
  ret i64 %472, !dbg !5260

noerr_block723:                                   ; preds = %after_check721
  %473 = load i64, ptr %retparam718, align 8, !dbg !5260
  %add724 = add i64 %465, %473, !dbg !5257
  store i64 %add724, ptr %total_len, align 8, !dbg !5257
  br label %loop.inc, !dbg !5261

if.exit725:                                       ; preds = %switch.case697
  %474 = load ptr, ptr %self, align 8, !dbg !5262
  %ptradd726 = getelementptr inbounds i8, ptr %474, i64 16, !dbg !5262
  %ptradd727 = getelementptr inbounds i8, ptr %ptradd726, i64 4, !dbg !5262
  %475 = load i32, ptr %ptradd727, align 4, !dbg !5262
  %i2b728 = icmp ne i32 %475, 0, !dbg !5262
  br i1 %i2b728, label %if.then729, label %if.exit755, !dbg !5262

if.then729:                                       ; preds = %if.exit725
    #dbg_declare(ptr %out_fn, !5263, !DIExpression(), !5265)
  %476 = load ptr, ptr %self, align 8, !dbg !5266
  %ptradd730 = getelementptr inbounds i8, ptr %476, i64 8, !dbg !5266
  %477 = load ptr, ptr %ptradd730, align 8, !dbg !5266
  store ptr %477, ptr %out_fn, align 8, !dbg !5266
  %478 = load ptr, ptr %self, align 8, !dbg !5267
  %ptradd731 = getelementptr inbounds i8, ptr %478, i64 8, !dbg !5267
  store ptr @std.io.out_null_fn, ptr %ptradd731, align 8, !dbg !5268
    #dbg_declare(ptr %len732, !5269, !DIExpression(), !5270)
  %479 = load ptr, ptr %self, align 8
  %lo735 = load i64, ptr %current, align 8
  %ptradd736 = getelementptr inbounds i8, ptr %current, i64 8
  %hi737 = load ptr, ptr %ptradd736, align 8
  %480 = call i64 @std.io.Formatter.out_str(ptr %retparam734, ptr %479, i64 %lo735, ptr %hi737), !dbg !5271
  %not_err738 = icmp eq i64 %480, 0, !dbg !5271
  %481 = call i1 @llvm.expect.i1(i1 %not_err738, i1 true), !dbg !5271
  br i1 %481, label %after_check740, label %assign_optional739, !dbg !5271

assign_optional739:                               ; preds = %if.then729
  store i64 %480, ptr %error_var733, align 8, !dbg !5271
  br label %guard_block741, !dbg !5271

after_check740:                                   ; preds = %if.then729
  br label %noerr_block742, !dbg !5271

guard_block741:                                   ; preds = %assign_optional739
  %482 = load i64, ptr %error_var733, align 8, !dbg !5271
  ret i64 %482, !dbg !5271

noerr_block742:                                   ; preds = %after_check740
  %483 = load i64, ptr %retparam734, align 8, !dbg !5271
  store i64 %483, ptr %len732, align 8, !dbg !5271
  %484 = load ptr, ptr %self, align 8, !dbg !5272
  %ptradd743 = getelementptr inbounds i8, ptr %484, i64 8, !dbg !5272
  %485 = load ptr, ptr %out_fn, align 8, !dbg !5273
  store ptr %485, ptr %ptradd743, align 8, !dbg !5273
  %486 = load i64, ptr %total_len, align 8, !dbg !5274
  %487 = load ptr, ptr %self, align 8, !dbg !5275
  %ptradd745 = getelementptr inbounds i8, ptr %487, i64 16, !dbg !5275
  %ptradd746 = getelementptr inbounds i8, ptr %ptradd745, i64 4, !dbg !5275
  %488 = load i32, ptr %ptradd746, align 4, !dbg !5275
  %zext747 = zext i32 %488 to i64, !dbg !5275
  %489 = load i64, ptr %len732, align 8, !dbg !5276
  %490 = load ptr, ptr %self, align 8
  %491 = call i64 @std.io.Formatter.pad(ptr %retparam748, ptr %490, i8 zeroext 32, i64 %zext747, i64 %489) #6, !dbg !5277
  %not_err749 = icmp eq i64 %491, 0, !dbg !5277
  %492 = call i1 @llvm.expect.i1(i1 %not_err749, i1 true), !dbg !5277
  br i1 %492, label %after_check751, label %assign_optional750, !dbg !5277

assign_optional750:                               ; preds = %noerr_block742
  store i64 %491, ptr %error_var744, align 8, !dbg !5277
  br label %guard_block752, !dbg !5277

after_check751:                                   ; preds = %noerr_block742
  br label %noerr_block753, !dbg !5277

guard_block752:                                   ; preds = %assign_optional750
  %493 = load i64, ptr %error_var744, align 8, !dbg !5277
  ret i64 %493, !dbg !5277

noerr_block753:                                   ; preds = %after_check751
  %494 = load i64, ptr %retparam748, align 8, !dbg !5277
  %add754 = add i64 %486, %494, !dbg !5274
  store i64 %add754, ptr %total_len, align 8, !dbg !5274
  br label %if.exit755, !dbg !5274

if.exit755:                                       ; preds = %noerr_block753, %if.exit725
  %495 = load i64, ptr %total_len, align 8, !dbg !5278
  %496 = load ptr, ptr %self, align 8
  %lo758 = load i64, ptr %current, align 8
  %ptradd759 = getelementptr inbounds i8, ptr %current, i64 8
  %hi760 = load ptr, ptr %ptradd759, align 8
  %497 = call i64 @std.io.Formatter.out_str(ptr %retparam757, ptr %496, i64 %lo758, ptr %hi760), !dbg !5279
  %not_err761 = icmp eq i64 %497, 0, !dbg !5279
  %498 = call i1 @llvm.expect.i1(i1 %not_err761, i1 true), !dbg !5279
  br i1 %498, label %after_check763, label %assign_optional762, !dbg !5279

assign_optional762:                               ; preds = %if.exit755
  store i64 %497, ptr %error_var756, align 8, !dbg !5279
  br label %guard_block764, !dbg !5279

after_check763:                                   ; preds = %if.exit755
  br label %noerr_block765, !dbg !5279

guard_block764:                                   ; preds = %assign_optional762
  %499 = load i64, ptr %error_var756, align 8, !dbg !5279
  ret i64 %499, !dbg !5279

noerr_block765:                                   ; preds = %after_check763
  %500 = load i64, ptr %retparam757, align 8, !dbg !5279
  %add766 = add i64 %495, %500, !dbg !5278
  store i64 %add766, ptr %total_len, align 8, !dbg !5278
  br label %loop.inc, !dbg !5280

switch.case767:                                   ; preds = %switch.entry198
  %501 = load ptr, ptr %self, align 8, !dbg !5281
  %ptradd768 = getelementptr inbounds i8, ptr %501, i64 16, !dbg !5281
  %502 = load i32, ptr %ptradd768, align 8, !dbg !5283
  %503 = and i32 %502, -2, !dbg !5283
  %504 = or i32 %503, 1, !dbg !5283
  store i32 %504, ptr %ptradd768, align 8, !dbg !5283
  %505 = load ptr, ptr %self, align 8, !dbg !5284
  %ptradd769 = getelementptr inbounds i8, ptr %505, i64 16, !dbg !5284
  %506 = load i32, ptr %ptradd769, align 8, !dbg !5285
  %507 = and i32 %506, -17, !dbg !5285
  %508 = or i32 %507, 16, !dbg !5285
  store i32 %508, ptr %ptradd769, align 8, !dbg !5285
  store i32 16, ptr %base, align 4, !dbg !5286
  br label %switch.exit795, !dbg !5286

switch.default770:                                ; preds = %switch.entry198
  %509 = load ptr, ptr %self, align 8
  store ptr %509, ptr %self771, align 8
  store i64 ptrtoint (ptr @std.io.INVALID_FORMAT to i64), ptr %f772, align 8
  %510 = load ptr, ptr %self771, align 8, !dbg !5287
  %neq774 = icmp ne ptr %510, null, !dbg !5287
  br i1 %neq774, label %assert_ok776, label %assert_fail775, !dbg !5287

assert_fail775:                                   ; preds = %switch.default770
  %511 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5287
  call void %511(ptr @.panic_msg.48, i64 32, ptr @.file.44, i64 20, ptr @.func.215, i64 7, i32 25) #5, !dbg !5287
  unreachable, !dbg !5287

assert_ok776:                                     ; preds = %switch.default770
  %512 = load ptr, ptr %self771, align 8, !dbg !5292
  %ptradd777 = getelementptr inbounds i8, ptr %512, i64 16, !dbg !5292
  %ptradd778 = getelementptr inbounds i8, ptr %ptradd777, i64 24, !dbg !5292
  %513 = load i64, ptr %ptradd778, align 8, !dbg !5292
  %i2b779 = icmp ne i64 %513, 0, !dbg !5292
  br i1 %i2b779, label %if.then780, label %if.exit783, !dbg !5292

if.then780:                                       ; preds = %assert_ok776
  %514 = load ptr, ptr %self771, align 8, !dbg !5293
  %ptradd781 = getelementptr inbounds i8, ptr %514, i64 16, !dbg !5293
  %ptradd782 = getelementptr inbounds i8, ptr %ptradd781, i64 24, !dbg !5293
  %515 = load i64, ptr %ptradd782, align 8, !dbg !5293
  store i64 %515, ptr %blockret773, align 8, !dbg !5293
  br label %expr_block.exit786, !dbg !5293

if.exit783:                                       ; preds = %assert_ok776
  %516 = load ptr, ptr %self771, align 8, !dbg !5294
  %ptradd784 = getelementptr inbounds i8, ptr %516, i64 16, !dbg !5294
  %ptradd785 = getelementptr inbounds i8, ptr %ptradd784, i64 24, !dbg !5294
  %517 = load i64, ptr %f772, align 8, !dbg !5295
  store i64 %517, ptr %ptradd785, align 8, !dbg !5295
  %518 = load i64, ptr %f772, align 8, !dbg !5296
  store i64 %518, ptr %blockret773, align 8, !dbg !5296
  br label %expr_block.exit786, !dbg !5296

expr_block.exit786:                               ; preds = %if.exit783, %if.then780
  %519 = load i64, ptr %total_len, align 8, !dbg !5297
  %520 = load ptr, ptr %self, align 8
  %521 = call i64 @std.io.Formatter.out_substr(ptr %retparam788, ptr %520, ptr @.str.227, i64 12), !dbg !5298
  %not_err789 = icmp eq i64 %521, 0, !dbg !5298
  %522 = call i1 @llvm.expect.i1(i1 %not_err789, i1 true), !dbg !5298
  br i1 %522, label %after_check791, label %assign_optional790, !dbg !5298

assign_optional790:                               ; preds = %expr_block.exit786
  store i64 %521, ptr %error_var787, align 8, !dbg !5298
  br label %guard_block792, !dbg !5298

after_check791:                                   ; preds = %expr_block.exit786
  br label %noerr_block793, !dbg !5298

guard_block792:                                   ; preds = %assign_optional790
  %523 = load i64, ptr %error_var787, align 8, !dbg !5298
  ret i64 %523, !dbg !5298

noerr_block793:                                   ; preds = %after_check791
  %524 = load i64, ptr %retparam788, align 8, !dbg !5298
  %add794 = add i64 %519, %524, !dbg !5297
  store i64 %add794, ptr %total_len, align 8, !dbg !5297
  br label %loop.inc, !dbg !5299

switch.exit795:                                   ; preds = %switch.case767, %switch.case209, %switch.case206, %switch.case203, %switch.case199
  %525 = load i32, ptr %base, align 4, !dbg !5300
  %neq796 = icmp ne i32 10, %525, !dbg !5300
  br i1 %neq796, label %if.then797, label %if.exit800, !dbg !5300

if.then797:                                       ; preds = %switch.exit795
  %526 = load ptr, ptr %self, align 8, !dbg !5301
  %ptradd798 = getelementptr inbounds i8, ptr %526, i64 16, !dbg !5301
  %527 = load i32, ptr %ptradd798, align 8, !dbg !5303
  %528 = and i32 %527, -5, !dbg !5303
  store i32 %528, ptr %ptradd798, align 8, !dbg !5303
  %529 = load ptr, ptr %self, align 8, !dbg !5304
  %ptradd799 = getelementptr inbounds i8, ptr %529, i64 16, !dbg !5304
  %530 = load i32, ptr %ptradd799, align 8, !dbg !5305
  %531 = and i32 %530, -9, !dbg !5305
  store i32 %531, ptr %ptradd799, align 8, !dbg !5305
  br label %if.exit800, !dbg !5305

if.exit800:                                       ; preds = %if.then797, %switch.exit795
  %532 = load ptr, ptr %self, align 8, !dbg !5306
  %ptradd801 = getelementptr inbounds i8, ptr %532, i64 16, !dbg !5306
  %533 = load i32, ptr %ptradd801, align 8, !dbg !5306
  %lshrl802 = lshr i32 %533, 6, !dbg !5306
  %534 = and i32 1, %lshrl802, !dbg !5306
  %trunc803 = trunc i32 %534 to i8, !dbg !5306
  %535 = trunc i8 %trunc803 to i1, !dbg !5306
  br i1 %535, label %if.then804, label %if.exit806, !dbg !5306

if.then804:                                       ; preds = %if.exit800
  %536 = load ptr, ptr %self, align 8, !dbg !5307
  %ptradd805 = getelementptr inbounds i8, ptr %536, i64 16, !dbg !5307
  %537 = load i32, ptr %ptradd805, align 8, !dbg !5308
  %538 = and i32 %537, -2, !dbg !5308
  store i32 %538, ptr %ptradd805, align 8, !dbg !5308
  br label %if.exit806, !dbg !5308

if.exit806:                                       ; preds = %if.then804, %if.exit800
    #dbg_declare(ptr %is_neg, !5309, !DIExpression(), !5310)
  store i8 0, ptr %is_neg, align 1, !dbg !5310
  %539 = load i64, ptr %total_len, align 8, !dbg !5311
  %540 = load ptr, ptr %self, align 8
  store ptr %540, ptr %f808, align 8
    #dbg_declare(ptr %len810, !5312, !DIExpression(), !5314)
  %lo813 = load i64, ptr %current, align 8
  %ptradd814 = getelementptr inbounds i8, ptr %current, i64 8
  %hi815 = load ptr, ptr %ptradd814, align 8
  %541 = call i64 @std.io.int_from_any(ptr %retparam812, i64 %lo813, ptr %hi815, ptr %is_neg), !dbg !5316
  %not_err816 = icmp eq i64 %541, 0, !dbg !5316
  %542 = call i1 @llvm.expect.i1(i1 %not_err816, i1 true), !dbg !5316
  br i1 %542, label %after_check818, label %assign_optional817, !dbg !5316

assign_optional817:                               ; preds = %if.exit806
  store i64 %541, ptr %len.f811, align 8, !dbg !5316
  br label %after_assign826, !dbg !5316

after_check818:                                   ; preds = %if.exit806
  %543 = load ptr, ptr %self, align 8
  %lo820 = load i64, ptr %retparam812, align 16
  %ptradd821 = getelementptr inbounds i8, ptr %retparam812, i64 8
  %hi822 = load i64, ptr %ptradd821, align 8
  %544 = load i8, ptr %is_neg, align 1
  %545 = load i32, ptr %base, align 4
  %546 = call i64 @std.io.Formatter.ntoa(ptr %retparam819, ptr %543, i64 %lo820, i64 %hi822, i8 zeroext %544, i32 %545), !dbg !5317
  %not_err823 = icmp eq i64 %546, 0, !dbg !5317
  %547 = call i1 @llvm.expect.i1(i1 %not_err823, i1 true), !dbg !5317
  br i1 %547, label %after_check825, label %assign_optional824, !dbg !5317

assign_optional824:                               ; preds = %after_check818
  store i64 %546, ptr %len.f811, align 8, !dbg !5317
  br label %after_assign826, !dbg !5317

after_check825:                                   ; preds = %after_check818
  %548 = load i64, ptr %retparam819, align 8, !dbg !5317
  store i64 %548, ptr %len810, align 8, !dbg !5317
  store i64 0, ptr %len.f811, align 8, !dbg !5317
  br label %after_assign826, !dbg !5317

after_assign826:                                  ; preds = %after_check825, %assign_optional824, %assign_optional817
    #dbg_declare(ptr %err827, !5318, !DIExpression(), !5319)
  br label %testblock828, !dbg !5319

testblock828:                                     ; preds = %after_assign826
  %optval829 = load i64, ptr %len.f811, align 8, !dbg !5320
  %not_err830 = icmp eq i64 %optval829, 0, !dbg !5320
  %549 = call i1 @llvm.expect.i1(i1 %not_err830, i1 true), !dbg !5320
  br i1 %549, label %after_check832, label %assign_optional831, !dbg !5320

assign_optional831:                               ; preds = %testblock828
  store i64 %optval829, ptr %err827, align 8, !dbg !5320
  br label %end_block833, !dbg !5320

after_check832:                                   ; preds = %testblock828
  store i64 0, ptr %err827, align 8, !dbg !5320
  br label %end_block833, !dbg !5320

end_block833:                                     ; preds = %after_check832, %assign_optional831
  %550 = load i64, ptr %err827, align 8, !dbg !5320
  %i2b834 = icmp ne i64 %550, 0, !dbg !5320
  br i1 %i2b834, label %if.then835, label %if.exit884, !dbg !5320

if.then835:                                       ; preds = %end_block833
  %551 = load i64, ptr %err827, align 8
  store i64 %551, ptr %switch836, align 8
  br label %switch.entry837

switch.entry837:                                  ; preds = %if.then835
  %552 = load i64, ptr %switch836, align 8
  %eq838 = icmp eq i64 ptrtoint (ptr @std.io.BUFFER_EXCEEDED to i64), %552, !dbg !5321
  br i1 %eq838, label %switch.case841, label %next_if839, !dbg !5321

next_if839:                                       ; preds = %switch.entry837
  %eq840 = icmp eq i64 ptrtoint (ptr @std.io.INTERNAL_BUFFER_EXCEEDED to i64), %552, !dbg !5324
  br i1 %eq840, label %switch.case841, label %next_if858, !dbg !5324

switch.case841:                                   ; preds = %next_if839, %switch.entry837
  %553 = load ptr, ptr %f808, align 8
  store ptr %553, ptr %self842, align 8
  %554 = load i64, ptr %err827, align 8
  store i64 %554, ptr %f843, align 8
  %555 = load ptr, ptr %self842, align 8, !dbg !5325
  %neq845 = icmp ne ptr %555, null, !dbg !5325
  br i1 %neq845, label %assert_ok847, label %assert_fail846, !dbg !5325

assert_fail846:                                   ; preds = %switch.case841
  %556 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5325
  call void %556(ptr @.panic_msg.48, i64 32, ptr @.file.44, i64 20, ptr @.func.215, i64 7, i32 25) #5, !dbg !5325
  unreachable, !dbg !5325

assert_ok847:                                     ; preds = %switch.case841
  %557 = load ptr, ptr %self842, align 8, !dbg !5330
  %ptradd848 = getelementptr inbounds i8, ptr %557, i64 16, !dbg !5330
  %ptradd849 = getelementptr inbounds i8, ptr %ptradd848, i64 24, !dbg !5330
  %558 = load i64, ptr %ptradd849, align 8, !dbg !5330
  %i2b850 = icmp ne i64 %558, 0, !dbg !5330
  br i1 %i2b850, label %if.then851, label %if.exit854, !dbg !5330

if.then851:                                       ; preds = %assert_ok847
  %559 = load ptr, ptr %self842, align 8, !dbg !5331
  %ptradd852 = getelementptr inbounds i8, ptr %559, i64 16, !dbg !5331
  %ptradd853 = getelementptr inbounds i8, ptr %ptradd852, i64 24, !dbg !5331
  %560 = load i64, ptr %ptradd853, align 8, !dbg !5331
  store i64 %560, ptr %blockret844, align 8, !dbg !5331
  br label %expr_block.exit857, !dbg !5331

if.exit854:                                       ; preds = %assert_ok847
  %561 = load ptr, ptr %self842, align 8, !dbg !5332
  %ptradd855 = getelementptr inbounds i8, ptr %561, i64 16, !dbg !5332
  %ptradd856 = getelementptr inbounds i8, ptr %ptradd855, i64 24, !dbg !5332
  %562 = load i64, ptr %f843, align 8, !dbg !5333
  store i64 %562, ptr %ptradd856, align 8, !dbg !5333
  %563 = load i64, ptr %f843, align 8, !dbg !5334
  store i64 %563, ptr %blockret844, align 8, !dbg !5334
  br label %expr_block.exit857, !dbg !5334

expr_block.exit857:                               ; preds = %if.exit854, %if.then851
  %564 = load i64, ptr %blockret844, align 8, !dbg !5334
  store i64 %564, ptr %error_var807, align 8, !dbg !5334
  br label %guard_block885, !dbg !5334

next_if858:                                       ; preds = %next_if839
  br label %switch.default859, !dbg !5334

switch.default859:                                ; preds = %next_if858
  %565 = load ptr, ptr %f808, align 8
  store ptr %565, ptr %self860, align 8
  store i64 ptrtoint (ptr @std.io.INVALID_ARGUMENT to i64), ptr %f861, align 8
  %566 = load ptr, ptr %self860, align 8, !dbg !5335
  %neq863 = icmp ne ptr %566, null, !dbg !5335
  br i1 %neq863, label %assert_ok865, label %assert_fail864, !dbg !5335

assert_fail864:                                   ; preds = %switch.default859
  %567 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5335
  call void %567(ptr @.panic_msg.48, i64 32, ptr @.file.44, i64 20, ptr @.func.215, i64 7, i32 25) #5, !dbg !5335
  unreachable, !dbg !5335

assert_ok865:                                     ; preds = %switch.default859
  %568 = load ptr, ptr %self860, align 8, !dbg !5340
  %ptradd866 = getelementptr inbounds i8, ptr %568, i64 16, !dbg !5340
  %ptradd867 = getelementptr inbounds i8, ptr %ptradd866, i64 24, !dbg !5340
  %569 = load i64, ptr %ptradd867, align 8, !dbg !5340
  %i2b868 = icmp ne i64 %569, 0, !dbg !5340
  br i1 %i2b868, label %if.then869, label %if.exit872, !dbg !5340

if.then869:                                       ; preds = %assert_ok865
  %570 = load ptr, ptr %self860, align 8, !dbg !5341
  %ptradd870 = getelementptr inbounds i8, ptr %570, i64 16, !dbg !5341
  %ptradd871 = getelementptr inbounds i8, ptr %ptradd870, i64 24, !dbg !5341
  %571 = load i64, ptr %ptradd871, align 8, !dbg !5341
  store i64 %571, ptr %blockret862, align 8, !dbg !5341
  br label %expr_block.exit875, !dbg !5341

if.exit872:                                       ; preds = %assert_ok865
  %572 = load ptr, ptr %self860, align 8, !dbg !5342
  %ptradd873 = getelementptr inbounds i8, ptr %572, i64 16, !dbg !5342
  %ptradd874 = getelementptr inbounds i8, ptr %ptradd873, i64 24, !dbg !5342
  %573 = load i64, ptr %f861, align 8, !dbg !5343
  store i64 %573, ptr %ptradd874, align 8, !dbg !5343
  %574 = load i64, ptr %f861, align 8, !dbg !5344
  store i64 %574, ptr %blockret862, align 8, !dbg !5344
  br label %expr_block.exit875, !dbg !5344

expr_block.exit875:                               ; preds = %if.exit872, %if.then869
  %575 = load i64, ptr %blockret862, align 8, !dbg !5344
  store i64 %575, ptr %err827, align 8, !dbg !5344
  %576 = load ptr, ptr %f808, align 8
  %577 = call i64 @std.io.Formatter.out_substr(ptr %retparam877, ptr %576, ptr @.str.228, i64 9), !dbg !5345
  %not_err878 = icmp eq i64 %577, 0, !dbg !5345
  %578 = call i1 @llvm.expect.i1(i1 %not_err878, i1 true), !dbg !5345
  br i1 %578, label %after_check880, label %assign_optional879, !dbg !5345

assign_optional879:                               ; preds = %expr_block.exit875
  store i64 %577, ptr %error_var876, align 8, !dbg !5345
  br label %guard_block881, !dbg !5345

after_check880:                                   ; preds = %expr_block.exit875
  br label %noerr_block882, !dbg !5345

guard_block881:                                   ; preds = %assign_optional879
  %579 = load i64, ptr %error_var876, align 8, !dbg !5345
  store i64 %579, ptr %error_var807, align 8, !dbg !5345
  br label %guard_block885, !dbg !5345

noerr_block882:                                   ; preds = %after_check880
  %580 = load i64, ptr %err827, align 8, !dbg !5346
  store i64 %580, ptr %error_var807, align 8, !dbg !5346
  br label %guard_block885, !dbg !5346

if.exit884:                                       ; preds = %end_block833
  br label %noerr_block886, !dbg !5347

guard_block885:                                   ; preds = %noerr_block882, %guard_block881, %expr_block.exit857
  %581 = load i64, ptr %error_var807, align 8, !dbg !5347
  ret i64 %581, !dbg !5347

noerr_block886:                                   ; preds = %if.exit884
  %582 = load i64, ptr %len810, align 8, !dbg !5347
  %add887 = add i64 %539, %582, !dbg !5311
  store i64 %add887, ptr %total_len, align 8, !dbg !5311
  br label %loop.inc, !dbg !5311

loop.inc:                                         ; preds = %noerr_block886, %noerr_block793, %noerr_block765, %noerr_block723, %noerr_block695, %noerr_block663, %noerr_block635, %noerr_block538, %noerr_block526, %noerr_block445, %noerr_block364, %noerr_block283, %noerr_block183, %noerr_block40, %noerr_block
  %583 = load i64, ptr %i, align 8, !dbg !5348
  %add888 = add i64 %583, 1, !dbg !5348
  store i64 %add888, ptr %i, align 8, !dbg !5348
  br label %loop.cond, !dbg !5348

loop.exit889:                                     ; preds = %loop.cond
  %584 = load ptr, ptr %self, align 8, !dbg !5349
  %ptradd890 = getelementptr inbounds i8, ptr %584, i64 16, !dbg !5349
  %ptradd891 = getelementptr inbounds i8, ptr %ptradd890, i64 24, !dbg !5349
  %585 = load i64, ptr %ptradd891, align 8, !dbg !5349
  %i2b892 = icmp ne i64 %585, 0, !dbg !5349
  br i1 %i2b892, label %if.then893, label %if.exit896, !dbg !5349

if.then893:                                       ; preds = %loop.exit889
  %586 = load ptr, ptr %self, align 8, !dbg !5350
  %ptradd894 = getelementptr inbounds i8, ptr %586, i64 16, !dbg !5350
  %ptradd895 = getelementptr inbounds i8, ptr %ptradd894, i64 24, !dbg !5350
  %587 = load i64, ptr %ptradd895, align 8, !dbg !5350
  ret i64 %587, !dbg !5350

if.exit896:                                       ; preds = %loop.exit889
  %588 = load i64, ptr %total_len, align 8, !dbg !5351
  store i64 %588, ptr %0, align 8, !dbg !5351
  ret i64 0, !dbg !5351

panic:                                            ; preds = %entry
  %589 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4852
  call void %589(ptr @.panic_msg, i64 62, ptr @.file.164, i64 12, ptr @.func.215, i64 7, i32 358) #5, !dbg !4852
  unreachable, !dbg !4852

panic8:                                           ; preds = %loop.body
  store i64 %15, ptr %taddr, align 8
  %590 = insertvalue %any undef, ptr %taddr, 0
  %591 = insertvalue %any %590, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr9, align 8
  %592 = insertvalue %any undef, ptr %taddr9, 0
  %593 = insertvalue %any %592, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %591, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %593, ptr %ptradd10, align 16
  %594 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %594, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.164, i64 12, ptr @.func.215, i64 7, i32 372, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !4881
  unreachable, !dbg !4881

panic24:                                          ; preds = %if.exit21
  store i64 %35, ptr %taddr25, align 8
  %595 = insertvalue %any undef, ptr %taddr25, 0
  %596 = insertvalue %any %595, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr26, align 8
  %597 = insertvalue %any undef, ptr %taddr26, 0
  %598 = insertvalue %any %597, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %596, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %598, ptr %ptradd28, align 16
  %599 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %599, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.164, i64 12, ptr @.func.215, i64 7, i32 381, ptr byval(%"any[]") align 8 %indirectarg30) #5, !dbg !4895
  unreachable, !dbg !4895

panic66:                                          ; preds = %if.exit63
  store i64 %77, ptr %taddr67, align 8
  %600 = insertvalue %any undef, ptr %taddr67, 0
  %601 = insertvalue %any %600, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %79, ptr %taddr68, align 8
  %602 = insertvalue %any undef, ptr %taddr68, 0
  %603 = insertvalue %any %602, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %601, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %603, ptr %ptradd70, align 16
  %604 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %604, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.164, i64 12, ptr @.func.215, i64 7, i32 401, ptr byval(%"any[]") align 8 %indirectarg72) #5, !dbg !4931
  unreachable, !dbg !4931

panic94:                                          ; preds = %if.exit91
  store i64 %95, ptr %taddr95, align 8
  %605 = insertvalue %any undef, ptr %taddr95, 0
  %606 = insertvalue %any %605, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %97, ptr %taddr96, align 8
  %607 = insertvalue %any undef, ptr %taddr96, 0
  %608 = insertvalue %any %607, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %606, ptr %varargslots97, align 16
  %ptradd98 = getelementptr inbounds i8, ptr %varargslots97, i64 16
  store %any %608, ptr %ptradd98, align 16
  %609 = insertvalue %"any[]" undef, ptr %varargslots97, 0
  %"$$temp99" = insertvalue %"any[]" %609, i64 2, 1
  store %"any[]" %"$$temp99", ptr %indirectarg100, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.164, i64 12, ptr @.func.215, i64 7, i32 406, ptr byval(%"any[]") align 8 %indirectarg100) #5, !dbg !4943
  unreachable, !dbg !4943

panic152:                                         ; preds = %cond.phi
  store i64 %136, ptr %taddr153, align 8
  %610 = insertvalue %any undef, ptr %taddr153, 0
  %611 = insertvalue %any %610, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %138, ptr %taddr154, align 8
  %612 = insertvalue %any undef, ptr %taddr154, 0
  %613 = insertvalue %any %612, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %611, ptr %varargslots155, align 16
  %ptradd156 = getelementptr inbounds i8, ptr %varargslots155, i64 16
  store %any %613, ptr %ptradd156, align 16
  %614 = insertvalue %"any[]" undef, ptr %varargslots155, 0
  %"$$temp157" = insertvalue %"any[]" %614, i64 2, 1
  store %"any[]" %"$$temp157", ptr %indirectarg158, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.164, i64 12, ptr @.func.215, i64 7, i32 422, ptr byval(%"any[]") align 8 %indirectarg158) #5, !dbg !4979
  unreachable, !dbg !4979

panic189:                                         ; preds = %if.exit185
  store i64 %159, ptr %taddr190, align 8
  %615 = insertvalue %any undef, ptr %taddr190, 0
  %616 = insertvalue %any %615, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %161, ptr %taddr191, align 8
  %617 = insertvalue %any undef, ptr %taddr191, 0
  %618 = insertvalue %any %617, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %616, ptr %varargslots192, align 16
  %ptradd193 = getelementptr inbounds i8, ptr %varargslots192, i64 16
  store %any %618, ptr %ptradd193, align 16
  %619 = insertvalue %"any[]" undef, ptr %varargslots192, 0
  %"$$temp194" = insertvalue %"any[]" %619, i64 2, 1
  store %"any[]" %"$$temp194", ptr %indirectarg195, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.164, i64 12, ptr @.func.215, i64 7, i32 433, ptr byval(%"any[]") align 8 %indirectarg195) #5, !dbg !5001
  unreachable, !dbg !5001

panic556:                                         ; preds = %switch.case555
  %620 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5212
  call void %620(ptr @.panic_msg.14, i64 42, ptr @.file.164, i64 12, ptr @.func.215, i64 7, i32 490) #5, !dbg !5212
  unreachable, !dbg !5212

panic558:                                         ; preds = %checkok557
  store i64 8, ptr %taddr559, align 8
  %621 = insertvalue %any undef, ptr %taddr559, 0
  %622 = insertvalue %any %621, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %391, ptr %taddr560, align 8
  %623 = insertvalue %any undef, ptr %taddr560, 0
  %624 = insertvalue %any %623, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %622, ptr %varargslots561, align 16
  %ptradd562 = getelementptr inbounds i8, ptr %varargslots561, i64 16
  store %any %624, ptr %ptradd562, align 16
  %625 = insertvalue %"any[]" undef, ptr %varargslots561, 0
  %"$$temp563" = insertvalue %"any[]" %625, i64 2, 1
  store %"any[]" %"$$temp563", ptr %indirectarg564, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.164, i64 12, ptr @.func.215, i64 7, i32 490, ptr byval(%"any[]") align 8 %indirectarg564) #5, !dbg !5212
  unreachable, !dbg !5212

panic622:                                         ; preds = %if.then615
  store i64 %sub, ptr %taddr623, align 8
  %626 = insertvalue %any undef, ptr %taddr623, 0
  %627 = insertvalue %any %626, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %627, ptr %varargslots624, align 16
  %628 = insertvalue %"any[]" undef, ptr %varargslots624, 0
  %"$$temp625" = insertvalue %"any[]" %628, i64 1, 1
  store %"any[]" %"$$temp625", ptr %indirectarg626, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 43, ptr @.file.164, i64 12, ptr @.func.215, i64 7, i32 494, ptr byval(%"any[]") align 8 %indirectarg626) #5, !dbg !5221
  unreachable, !dbg !5221
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.print(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !5352 {
entry:
  %self = alloca ptr, align 8
  %str = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !5353
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !5353
  br i1 %5, label %panic, label %checkok, !dbg !5353

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !5354, !DIExpression(), !5355)
  store ptr %2, ptr %str, align 8
  %ptradd = getelementptr inbounds i8, ptr %str, i64 8
  store i64 %3, ptr %ptradd, align 8
    #dbg_declare(ptr %str, !5356, !DIExpression(), !5357)
  %6 = load ptr, ptr %self, align 8, !dbg !5358
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !5358
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !5358
  %i2nb = icmp eq ptr %7, null, !dbg !5358
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !5358

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !5359
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !5359
  store ptr @std.io.out_null_fn, ptr %ptradd2, align 8, !dbg !5361
  br label %if.exit, !dbg !5361

if.exit:                                          ; preds = %if.then, %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !5362
  %9 = load i64, ptr %ptradd3, align 8, !dbg !5362
    #dbg_declare(ptr %.anon, !5364, !DIExpression(), !5362)
  store i64 0, ptr %.anon, align 8, !dbg !5362
  br label %loop.cond, !dbg !5362

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %10 = load i64, ptr %.anon, align 8, !dbg !5362
  %lt = icmp ult i64 %10, %9, !dbg !5362
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !5362

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !5365, !DIExpression(), !5367)
  %ptradd4 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !5368
  %11 = load i64, ptr %ptradd4, align 8, !dbg !5368
  %12 = load ptr, ptr %str, align 8, !dbg !5368
  %13 = load i64, ptr %.anon, align 8, !dbg !5368
  %ge = icmp uge i64 %13, %11, !dbg !5368
  %14 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !5368
  br i1 %14, label %panic5, label %checkok8, !dbg !5368

checkok8:                                         ; preds = %loop.body
  %ptradd9 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !5368
  %15 = load i8, ptr %ptradd9, align 1, !dbg !5368
  store i8 %15, ptr %c, align 1, !dbg !5368
  %16 = load ptr, ptr %self, align 8
  %17 = load i8, ptr %c, align 1
  %18 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %16, i8 zeroext %17), !dbg !5369
  %not_err = icmp eq i64 %18, 0, !dbg !5369
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !5369
  br i1 %19, label %after_check, label %assign_optional, !dbg !5369

assign_optional:                                  ; preds = %checkok8
  store i64 %18, ptr %error_var, align 8, !dbg !5369
  br label %guard_block, !dbg !5369

after_check:                                      ; preds = %checkok8
  br label %noerr_block, !dbg !5369

guard_block:                                      ; preds = %assign_optional
  %20 = load i64, ptr %error_var, align 8, !dbg !5369
  ret i64 %20, !dbg !5369

noerr_block:                                      ; preds = %after_check
  %21 = load i64, ptr %.anon, align 8, !dbg !5362
  %addnuw = add nuw i64 %21, 1, !dbg !5362
  store i64 %addnuw, ptr %.anon, align 8, !dbg !5362
  br label %loop.cond, !dbg !5362

loop.exit:                                        ; preds = %loop.cond
  %22 = load ptr, ptr %self, align 8, !dbg !5370
  %ptradd10 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !5370
  %ptradd11 = getelementptr inbounds i8, ptr %ptradd10, i64 16, !dbg !5370
  %23 = load i64, ptr %ptradd11, align 8, !dbg !5370
  store i64 %23, ptr %0, align 8, !dbg !5370
  ret i64 0, !dbg !5370

panic:                                            ; preds = %entry
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !5355
  call void %24(ptr @.panic_msg, i64 62, ptr @.file.164, i64 12, ptr @.func.229, i64 5, i32 560) #5, !dbg !5355
  unreachable, !dbg !5355

panic5:                                           ; preds = %loop.body
  store i64 %11, ptr %taddr, align 8
  %25 = insertvalue %any undef, ptr %taddr, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr6, align 8
  %27 = insertvalue %any undef, ptr %taddr6, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %26, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %28, ptr %ptradd7, align 16
  %29 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %29, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.34, i64 59, ptr @.file.164, i64 12, ptr @.func.229, i64 5, i32 567, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !5368
  unreachable, !dbg !5368
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_null_fn(ptr %0, i8 zeroext %1) #0 !dbg !5371 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !5372, !DIExpression(), !5373)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !5374, !DIExpression(), !5375)
  ret i64 0
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #1

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.builtin.panicf(ptr, i64, ptr, i64, ptr, i64, i32, ptr byval(%"any[]") align 8) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #3

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr comdat {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.bswap.i32(i32) #4

; Function Attrs: nounwind ssp uwtable
declare i32 @putchar(i32) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.io.File.flush(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.io.File.write_byte(ptr, i8 zeroext) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.io.file.from_handle(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak zeroext i8 @std.core.types.TypeKind.is_int(i8 zeroext) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8_codepoints(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak double @std.math._frexp(double, ptr) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #4

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.String.index_of(ptr, ptr, i64, ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @std.core.string.ZString.str_view(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @std.core.dstring.DString.str_view(ptr) #0

define internal void @.c3_dynamic_register() align 8 {
entry:
  %next_val = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write", i32 0, i32 2), align 8
  %0 = icmp eq ptr %next_val, inttoptr (i64 -1 to ptr)
  br i1 %0, label %dtable_check, label %dtable_skip

dtable_check:                                     ; preds = %dtable_check, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.MultiWriter", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_check ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %1 = icmp eq ptr %dtable_ptr, null
  %next_dtable_ref = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br i1 %1, label %dtable_found, label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.std.io.MultiWriter.write", ptr %dtable_ref, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write", i32 0, i32 2), align 8
  br label %dtable_skip

dtable_skip:                                      ; preds = %dtable_found, %entry
  %next_val1 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write_byte", i32 0, i32 2), align 8
  %2 = icmp eq ptr %next_val1, inttoptr (i64 -1 to ptr)
  br i1 %2, label %dtable_check2, label %dtable_skip7

dtable_check2:                                    ; preds = %dtable_check2, %dtable_skip
  %dtable_ref3 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.MultiWriter", i32 0, i32 2), %dtable_skip ], [ %next_dtable_ref5, %dtable_check2 ]
  %dtable_ptr4 = load ptr, ptr %dtable_ref3, align 8
  %3 = icmp eq ptr %dtable_ptr4, null
  %next_dtable_ref5 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr4, i32 0, i32 2
  br i1 %3, label %dtable_found6, label %dtable_check2

dtable_found6:                                    ; preds = %dtable_check2
  store ptr @"$ct.dyn.std.io.MultiWriter.write_byte", ptr %dtable_ref3, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip7

dtable_skip7:                                     ; preds = %dtable_found6, %dtable_skip
  %next_val8 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.len", i32 0, i32 2), align 8
  %4 = icmp eq ptr %next_val8, inttoptr (i64 -1 to ptr)
  br i1 %4, label %dtable_check9, label %dtable_skip14

dtable_check9:                                    ; preds = %dtable_check9, %dtable_skip7
  %dtable_ref10 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip7 ], [ %next_dtable_ref12, %dtable_check9 ]
  %dtable_ptr11 = load ptr, ptr %dtable_ref10, align 8
  %5 = icmp eq ptr %dtable_ptr11, null
  %next_dtable_ref12 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr11, i32 0, i32 2
  br i1 %5, label %dtable_found13, label %dtable_check9

dtable_found13:                                   ; preds = %dtable_check9
  store ptr @"$ct.dyn.std.io.ByteReader.len", ptr %dtable_ref10, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.len", i32 0, i32 2), align 8
  br label %dtable_skip14

dtable_skip14:                                    ; preds = %dtable_found13, %dtable_skip7
  %next_val15 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read", i32 0, i32 2), align 8
  %6 = icmp eq ptr %next_val15, inttoptr (i64 -1 to ptr)
  br i1 %6, label %dtable_check16, label %dtable_skip21

dtable_check16:                                   ; preds = %dtable_check16, %dtable_skip14
  %dtable_ref17 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip14 ], [ %next_dtable_ref19, %dtable_check16 ]
  %dtable_ptr18 = load ptr, ptr %dtable_ref17, align 8
  %7 = icmp eq ptr %dtable_ptr18, null
  %next_dtable_ref19 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr18, i32 0, i32 2
  br i1 %7, label %dtable_found20, label %dtable_check16

dtable_found20:                                   ; preds = %dtable_check16
  store ptr @"$ct.dyn.std.io.ByteReader.read", ptr %dtable_ref17, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read", i32 0, i32 2), align 8
  br label %dtable_skip21

dtable_skip21:                                    ; preds = %dtable_found20, %dtable_skip14
  %next_val22 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read_byte", i32 0, i32 2), align 8
  %8 = icmp eq ptr %next_val22, inttoptr (i64 -1 to ptr)
  br i1 %8, label %dtable_check23, label %dtable_skip28

dtable_check23:                                   ; preds = %dtable_check23, %dtable_skip21
  %dtable_ref24 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip21 ], [ %next_dtable_ref26, %dtable_check23 ]
  %dtable_ptr25 = load ptr, ptr %dtable_ref24, align 8
  %9 = icmp eq ptr %dtable_ptr25, null
  %next_dtable_ref26 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr25, i32 0, i32 2
  br i1 %9, label %dtable_found27, label %dtable_check23

dtable_found27:                                   ; preds = %dtable_check23
  store ptr @"$ct.dyn.std.io.ByteReader.read_byte", ptr %dtable_ref24, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip28

dtable_skip28:                                    ; preds = %dtable_found27, %dtable_skip21
  %next_val29 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", i32 0, i32 2), align 8
  %10 = icmp eq ptr %next_val29, inttoptr (i64 -1 to ptr)
  br i1 %10, label %dtable_check30, label %dtable_skip35

dtable_check30:                                   ; preds = %dtable_check30, %dtable_skip28
  %dtable_ref31 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip28 ], [ %next_dtable_ref33, %dtable_check30 ]
  %dtable_ptr32 = load ptr, ptr %dtable_ref31, align 8
  %11 = icmp eq ptr %dtable_ptr32, null
  %next_dtable_ref33 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr32, i32 0, i32 2
  br i1 %11, label %dtable_found34, label %dtable_check30

dtable_found34:                                   ; preds = %dtable_check30
  store ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", ptr %dtable_ref31, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", i32 0, i32 2), align 8
  br label %dtable_skip35

dtable_skip35:                                    ; preds = %dtable_found34, %dtable_skip28
  %next_val36 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.seek", i32 0, i32 2), align 8
  %12 = icmp eq ptr %next_val36, inttoptr (i64 -1 to ptr)
  br i1 %12, label %dtable_check37, label %dtable_skip42

dtable_check37:                                   ; preds = %dtable_check37, %dtable_skip35
  %dtable_ref38 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip35 ], [ %next_dtable_ref40, %dtable_check37 ]
  %dtable_ptr39 = load ptr, ptr %dtable_ref38, align 8
  %13 = icmp eq ptr %dtable_ptr39, null
  %next_dtable_ref40 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr39, i32 0, i32 2
  br i1 %13, label %dtable_found41, label %dtable_check37

dtable_found41:                                   ; preds = %dtable_check37
  store ptr @"$ct.dyn.std.io.ByteReader.seek", ptr %dtable_ref38, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.seek", i32 0, i32 2), align 8
  br label %dtable_skip42

dtable_skip42:                                    ; preds = %dtable_found41, %dtable_skip35
  %next_val43 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.write_to", i32 0, i32 2), align 8
  %14 = icmp eq ptr %next_val43, inttoptr (i64 -1 to ptr)
  br i1 %14, label %dtable_check44, label %dtable_skip49

dtable_check44:                                   ; preds = %dtable_check44, %dtable_skip42
  %dtable_ref45 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip42 ], [ %next_dtable_ref47, %dtable_check44 ]
  %dtable_ptr46 = load ptr, ptr %dtable_ref45, align 8
  %15 = icmp eq ptr %dtable_ptr46, null
  %next_dtable_ref47 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr46, i32 0, i32 2
  br i1 %15, label %dtable_found48, label %dtable_check44

dtable_found48:                                   ; preds = %dtable_check44
  store ptr @"$ct.dyn.std.io.ByteReader.write_to", ptr %dtable_ref45, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.write_to", i32 0, i32 2), align 8
  br label %dtable_skip49

dtable_skip49:                                    ; preds = %dtable_found48, %dtable_skip42
  %next_val50 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.available", i32 0, i32 2), align 8
  %16 = icmp eq ptr %next_val50, inttoptr (i64 -1 to ptr)
  br i1 %16, label %dtable_check51, label %dtable_skip56

dtable_check51:                                   ; preds = %dtable_check51, %dtable_skip49
  %dtable_ref52 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip49 ], [ %next_dtable_ref54, %dtable_check51 ]
  %dtable_ptr53 = load ptr, ptr %dtable_ref52, align 8
  %17 = icmp eq ptr %dtable_ptr53, null
  %next_dtable_ref54 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr53, i32 0, i32 2
  br i1 %17, label %dtable_found55, label %dtable_check51

dtable_found55:                                   ; preds = %dtable_check51
  store ptr @"$ct.dyn.std.io.ByteReader.available", ptr %dtable_ref52, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.available", i32 0, i32 2), align 8
  br label %dtable_skip56

dtable_skip56:                                    ; preds = %dtable_found55, %dtable_skip49
  %next_val57 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read", i32 0, i32 2), align 8
  %18 = icmp eq ptr %next_val57, inttoptr (i64 -1 to ptr)
  br i1 %18, label %dtable_check58, label %dtable_skip63

dtable_check58:                                   ; preds = %dtable_check58, %dtable_skip56
  %dtable_ref59 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.MultiReader", i32 0, i32 2), %dtable_skip56 ], [ %next_dtable_ref61, %dtable_check58 ]
  %dtable_ptr60 = load ptr, ptr %dtable_ref59, align 8
  %19 = icmp eq ptr %dtable_ptr60, null
  %next_dtable_ref61 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr60, i32 0, i32 2
  br i1 %19, label %dtable_found62, label %dtable_check58

dtable_found62:                                   ; preds = %dtable_check58
  store ptr @"$ct.dyn.std.io.MultiReader.read", ptr %dtable_ref59, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read", i32 0, i32 2), align 8
  br label %dtable_skip63

dtable_skip63:                                    ; preds = %dtable_found62, %dtable_skip56
  %next_val64 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read_byte", i32 0, i32 2), align 8
  %20 = icmp eq ptr %next_val64, inttoptr (i64 -1 to ptr)
  br i1 %20, label %dtable_check65, label %dtable_skip70

dtable_check65:                                   ; preds = %dtable_check65, %dtable_skip63
  %dtable_ref66 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.MultiReader", i32 0, i32 2), %dtable_skip63 ], [ %next_dtable_ref68, %dtable_check65 ]
  %dtable_ptr67 = load ptr, ptr %dtable_ref66, align 8
  %21 = icmp eq ptr %dtable_ptr67, null
  %next_dtable_ref68 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr67, i32 0, i32 2
  br i1 %21, label %dtable_found69, label %dtable_check65

dtable_found69:                                   ; preds = %dtable_check65
  store ptr @"$ct.dyn.std.io.MultiReader.read_byte", ptr %dtable_ref66, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip70

dtable_skip70:                                    ; preds = %dtable_found69, %dtable_skip63
  %next_val71 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.destroy", i32 0, i32 2), align 8
  %22 = icmp eq ptr %next_val71, inttoptr (i64 -1 to ptr)
  br i1 %22, label %dtable_check72, label %dtable_skip77

dtable_check72:                                   ; preds = %dtable_check72, %dtable_skip70
  %dtable_ref73 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip70 ], [ %next_dtable_ref75, %dtable_check72 ]
  %dtable_ptr74 = load ptr, ptr %dtable_ref73, align 8
  %23 = icmp eq ptr %dtable_ptr74, null
  %next_dtable_ref75 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr74, i32 0, i32 2
  br i1 %23, label %dtable_found76, label %dtable_check72

dtable_found76:                                   ; preds = %dtable_check72
  store ptr @"$ct.dyn.std.io.ByteWriter.destroy", ptr %dtable_ref73, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.destroy", i32 0, i32 2), align 8
  br label %dtable_skip77

dtable_skip77:                                    ; preds = %dtable_found76, %dtable_skip70
  %next_val78 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write", i32 0, i32 2), align 8
  %24 = icmp eq ptr %next_val78, inttoptr (i64 -1 to ptr)
  br i1 %24, label %dtable_check79, label %dtable_skip84

dtable_check79:                                   ; preds = %dtable_check79, %dtable_skip77
  %dtable_ref80 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip77 ], [ %next_dtable_ref82, %dtable_check79 ]
  %dtable_ptr81 = load ptr, ptr %dtable_ref80, align 8
  %25 = icmp eq ptr %dtable_ptr81, null
  %next_dtable_ref82 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr81, i32 0, i32 2
  br i1 %25, label %dtable_found83, label %dtable_check79

dtable_found83:                                   ; preds = %dtable_check79
  store ptr @"$ct.dyn.std.io.ByteWriter.write", ptr %dtable_ref80, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write", i32 0, i32 2), align 8
  br label %dtable_skip84

dtable_skip84:                                    ; preds = %dtable_found83, %dtable_skip77
  %next_val85 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write_byte", i32 0, i32 2), align 8
  %26 = icmp eq ptr %next_val85, inttoptr (i64 -1 to ptr)
  br i1 %26, label %dtable_check86, label %dtable_skip91

dtable_check86:                                   ; preds = %dtable_check86, %dtable_skip84
  %dtable_ref87 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip84 ], [ %next_dtable_ref89, %dtable_check86 ]
  %dtable_ptr88 = load ptr, ptr %dtable_ref87, align 8
  %27 = icmp eq ptr %dtable_ptr88, null
  %next_dtable_ref89 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr88, i32 0, i32 2
  br i1 %27, label %dtable_found90, label %dtable_check86

dtable_found90:                                   ; preds = %dtable_check86
  store ptr @"$ct.dyn.std.io.ByteWriter.write_byte", ptr %dtable_ref87, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip91

dtable_skip91:                                    ; preds = %dtable_found90, %dtable_skip84
  %next_val92 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.read_from", i32 0, i32 2), align 8
  %28 = icmp eq ptr %next_val92, inttoptr (i64 -1 to ptr)
  br i1 %28, label %dtable_check93, label %dtable_skip98

dtable_check93:                                   ; preds = %dtable_check93, %dtable_skip91
  %dtable_ref94 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip91 ], [ %next_dtable_ref96, %dtable_check93 ]
  %dtable_ptr95 = load ptr, ptr %dtable_ref94, align 8
  %29 = icmp eq ptr %dtable_ptr95, null
  %next_dtable_ref96 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr95, i32 0, i32 2
  br i1 %29, label %dtable_found97, label %dtable_check93

dtable_found97:                                   ; preds = %dtable_check93
  store ptr @"$ct.dyn.std.io.ByteWriter.read_from", ptr %dtable_ref94, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.read_from", i32 0, i32 2), align 8
  br label %dtable_skip98

dtable_skip98:                                    ; preds = %dtable_found97, %dtable_skip91
  %next_val99 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.close", i32 0, i32 2), align 8
  %30 = icmp eq ptr %next_val99, inttoptr (i64 -1 to ptr)
  br i1 %30, label %dtable_check100, label %dtable_skip105

dtable_check100:                                  ; preds = %dtable_check100, %dtable_skip98
  %dtable_ref101 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip98 ], [ %next_dtable_ref103, %dtable_check100 ]
  %dtable_ptr102 = load ptr, ptr %dtable_ref101, align 8
  %31 = icmp eq ptr %dtable_ptr102, null
  %next_dtable_ref103 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr102, i32 0, i32 2
  br i1 %31, label %dtable_found104, label %dtable_check100

dtable_found104:                                  ; preds = %dtable_check100
  store ptr @"$ct.dyn.std.io.ReadBuffer.close", ptr %dtable_ref101, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.close", i32 0, i32 2), align 8
  br label %dtable_skip105

dtable_skip105:                                   ; preds = %dtable_found104, %dtable_skip98
  %next_val106 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read", i32 0, i32 2), align 8
  %32 = icmp eq ptr %next_val106, inttoptr (i64 -1 to ptr)
  br i1 %32, label %dtable_check107, label %dtable_skip112

dtable_check107:                                  ; preds = %dtable_check107, %dtable_skip105
  %dtable_ref108 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip105 ], [ %next_dtable_ref110, %dtable_check107 ]
  %dtable_ptr109 = load ptr, ptr %dtable_ref108, align 8
  %33 = icmp eq ptr %dtable_ptr109, null
  %next_dtable_ref110 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr109, i32 0, i32 2
  br i1 %33, label %dtable_found111, label %dtable_check107

dtable_found111:                                  ; preds = %dtable_check107
  store ptr @"$ct.dyn.std.io.ReadBuffer.read", ptr %dtable_ref108, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read", i32 0, i32 2), align 8
  br label %dtable_skip112

dtable_skip112:                                   ; preds = %dtable_found111, %dtable_skip105
  %next_val113 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", i32 0, i32 2), align 8
  %34 = icmp eq ptr %next_val113, inttoptr (i64 -1 to ptr)
  br i1 %34, label %dtable_check114, label %dtable_skip119

dtable_check114:                                  ; preds = %dtable_check114, %dtable_skip112
  %dtable_ref115 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip112 ], [ %next_dtable_ref117, %dtable_check114 ]
  %dtable_ptr116 = load ptr, ptr %dtable_ref115, align 8
  %35 = icmp eq ptr %dtable_ptr116, null
  %next_dtable_ref117 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr116, i32 0, i32 2
  br i1 %35, label %dtable_found118, label %dtable_check114

dtable_found118:                                  ; preds = %dtable_check114
  store ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", ptr %dtable_ref115, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip119

dtable_skip119:                                   ; preds = %dtable_found118, %dtable_skip112
  %next_val120 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.close", i32 0, i32 2), align 8
  %36 = icmp eq ptr %next_val120, inttoptr (i64 -1 to ptr)
  br i1 %36, label %dtable_check121, label %dtable_skip126

dtable_check121:                                  ; preds = %dtable_check121, %dtable_skip119
  %dtable_ref122 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip119 ], [ %next_dtable_ref124, %dtable_check121 ]
  %dtable_ptr123 = load ptr, ptr %dtable_ref122, align 8
  %37 = icmp eq ptr %dtable_ptr123, null
  %next_dtable_ref124 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr123, i32 0, i32 2
  br i1 %37, label %dtable_found125, label %dtable_check121

dtable_found125:                                  ; preds = %dtable_check121
  store ptr @"$ct.dyn.std.io.WriteBuffer.close", ptr %dtable_ref122, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.close", i32 0, i32 2), align 8
  br label %dtable_skip126

dtable_skip126:                                   ; preds = %dtable_found125, %dtable_skip119
  %next_val127 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.flush", i32 0, i32 2), align 8
  %38 = icmp eq ptr %next_val127, inttoptr (i64 -1 to ptr)
  br i1 %38, label %dtable_check128, label %dtable_skip133

dtable_check128:                                  ; preds = %dtable_check128, %dtable_skip126
  %dtable_ref129 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip126 ], [ %next_dtable_ref131, %dtable_check128 ]
  %dtable_ptr130 = load ptr, ptr %dtable_ref129, align 8
  %39 = icmp eq ptr %dtable_ptr130, null
  %next_dtable_ref131 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr130, i32 0, i32 2
  br i1 %39, label %dtable_found132, label %dtable_check128

dtable_found132:                                  ; preds = %dtable_check128
  store ptr @"$ct.dyn.std.io.WriteBuffer.flush", ptr %dtable_ref129, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.flush", i32 0, i32 2), align 8
  br label %dtable_skip133

dtable_skip133:                                   ; preds = %dtable_found132, %dtable_skip126
  %next_val134 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write", i32 0, i32 2), align 8
  %40 = icmp eq ptr %next_val134, inttoptr (i64 -1 to ptr)
  br i1 %40, label %dtable_check135, label %dtable_skip140

dtable_check135:                                  ; preds = %dtable_check135, %dtable_skip133
  %dtable_ref136 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip133 ], [ %next_dtable_ref138, %dtable_check135 ]
  %dtable_ptr137 = load ptr, ptr %dtable_ref136, align 8
  %41 = icmp eq ptr %dtable_ptr137, null
  %next_dtable_ref138 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr137, i32 0, i32 2
  br i1 %41, label %dtable_found139, label %dtable_check135

dtable_found139:                                  ; preds = %dtable_check135
  store ptr @"$ct.dyn.std.io.WriteBuffer.write", ptr %dtable_ref136, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write", i32 0, i32 2), align 8
  br label %dtable_skip140

dtable_skip140:                                   ; preds = %dtable_found139, %dtable_skip133
  %next_val141 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", i32 0, i32 2), align 8
  %42 = icmp eq ptr %next_val141, inttoptr (i64 -1 to ptr)
  br i1 %42, label %dtable_check142, label %dtable_skip147

dtable_check142:                                  ; preds = %dtable_check142, %dtable_skip140
  %dtable_ref143 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip140 ], [ %next_dtable_ref145, %dtable_check142 ]
  %dtable_ptr144 = load ptr, ptr %dtable_ref143, align 8
  %43 = icmp eq ptr %dtable_ptr144, null
  %next_dtable_ref145 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr144, i32 0, i32 2
  br i1 %43, label %dtable_found146, label %dtable_check142

dtable_found146:                                  ; preds = %dtable_check142
  store ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", ptr %dtable_ref143, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip147

dtable_skip147:                                   ; preds = %dtable_found146, %dtable_skip140
  %next_val148 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read", i32 0, i32 2), align 8
  %44 = icmp eq ptr %next_val148, inttoptr (i64 -1 to ptr)
  br i1 %44, label %dtable_check149, label %dtable_skip154

dtable_check149:                                  ; preds = %dtable_check149, %dtable_skip147
  %dtable_ref150 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.TeeReader", i32 0, i32 2), %dtable_skip147 ], [ %next_dtable_ref152, %dtable_check149 ]
  %dtable_ptr151 = load ptr, ptr %dtable_ref150, align 8
  %45 = icmp eq ptr %dtable_ptr151, null
  %next_dtable_ref152 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr151, i32 0, i32 2
  br i1 %45, label %dtable_found153, label %dtable_check149

dtable_found153:                                  ; preds = %dtable_check149
  store ptr @"$ct.dyn.std.io.TeeReader.read", ptr %dtable_ref150, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read", i32 0, i32 2), align 8
  br label %dtable_skip154

dtable_skip154:                                   ; preds = %dtable_found153, %dtable_skip147
  %next_val155 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read_byte", i32 0, i32 2), align 8
  %46 = icmp eq ptr %next_val155, inttoptr (i64 -1 to ptr)
  br i1 %46, label %dtable_check156, label %dtable_skip161

dtable_check156:                                  ; preds = %dtable_check156, %dtable_skip154
  %dtable_ref157 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.TeeReader", i32 0, i32 2), %dtable_skip154 ], [ %next_dtable_ref159, %dtable_check156 ]
  %dtable_ptr158 = load ptr, ptr %dtable_ref157, align 8
  %47 = icmp eq ptr %dtable_ptr158, null
  %next_dtable_ref159 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr158, i32 0, i32 2
  br i1 %47, label %dtable_found160, label %dtable_check156

dtable_found160:                                  ; preds = %dtable_check156
  store ptr @"$ct.dyn.std.io.TeeReader.read_byte", ptr %dtable_ref157, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip161

dtable_skip161:                                   ; preds = %dtable_found160, %dtable_skip154
  %next_val162 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.close", i32 0, i32 2), align 8
  %48 = icmp eq ptr %next_val162, inttoptr (i64 -1 to ptr)
  br i1 %48, label %dtable_check163, label %dtable_skip168

dtable_check163:                                  ; preds = %dtable_check163, %dtable_skip161
  %dtable_ref164 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip161 ], [ %next_dtable_ref166, %dtable_check163 ]
  %dtable_ptr165 = load ptr, ptr %dtable_ref164, align 8
  %49 = icmp eq ptr %dtable_ptr165, null
  %next_dtable_ref166 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr165, i32 0, i32 2
  br i1 %49, label %dtable_found167, label %dtable_check163

dtable_found167:                                  ; preds = %dtable_check163
  store ptr @"$ct.dyn.std.io.LimitReader.close", ptr %dtable_ref164, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.close", i32 0, i32 2), align 8
  br label %dtable_skip168

dtable_skip168:                                   ; preds = %dtable_found167, %dtable_skip161
  %next_val169 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read", i32 0, i32 2), align 8
  %50 = icmp eq ptr %next_val169, inttoptr (i64 -1 to ptr)
  br i1 %50, label %dtable_check170, label %dtable_skip175

dtable_check170:                                  ; preds = %dtable_check170, %dtable_skip168
  %dtable_ref171 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip168 ], [ %next_dtable_ref173, %dtable_check170 ]
  %dtable_ptr172 = load ptr, ptr %dtable_ref171, align 8
  %51 = icmp eq ptr %dtable_ptr172, null
  %next_dtable_ref173 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr172, i32 0, i32 2
  br i1 %51, label %dtable_found174, label %dtable_check170

dtable_found174:                                  ; preds = %dtable_check170
  store ptr @"$ct.dyn.std.io.LimitReader.read", ptr %dtable_ref171, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read", i32 0, i32 2), align 8
  br label %dtable_skip175

dtable_skip175:                                   ; preds = %dtable_found174, %dtable_skip168
  %next_val176 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read_byte", i32 0, i32 2), align 8
  %52 = icmp eq ptr %next_val176, inttoptr (i64 -1 to ptr)
  br i1 %52, label %dtable_check177, label %dtable_skip182

dtable_check177:                                  ; preds = %dtable_check177, %dtable_skip175
  %dtable_ref178 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip175 ], [ %next_dtable_ref180, %dtable_check177 ]
  %dtable_ptr179 = load ptr, ptr %dtable_ref178, align 8
  %53 = icmp eq ptr %dtable_ptr179, null
  %next_dtable_ref180 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr179, i32 0, i32 2
  br i1 %53, label %dtable_found181, label %dtable_check177

dtable_found181:                                  ; preds = %dtable_check177
  store ptr @"$ct.dyn.std.io.LimitReader.read_byte", ptr %dtable_ref178, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip182

dtable_skip182:                                   ; preds = %dtable_found181, %dtable_skip175
  %next_val183 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.available", i32 0, i32 2), align 8
  %54 = icmp eq ptr %next_val183, inttoptr (i64 -1 to ptr)
  br i1 %54, label %dtable_check184, label %dtable_skip189

dtable_check184:                                  ; preds = %dtable_check184, %dtable_skip182
  %dtable_ref185 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip182 ], [ %next_dtable_ref187, %dtable_check184 ]
  %dtable_ptr186 = load ptr, ptr %dtable_ref185, align 8
  %55 = icmp eq ptr %dtable_ptr186, null
  %next_dtable_ref187 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr186, i32 0, i32 2
  br i1 %55, label %dtable_found188, label %dtable_check184

dtable_found188:                                  ; preds = %dtable_check184
  store ptr @"$ct.dyn.std.io.LimitReader.available", ptr %dtable_ref185, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.available", i32 0, i32 2), align 8
  br label %dtable_skip189

dtable_skip189:                                   ; preds = %dtable_found188, %dtable_skip182
  %next_val190 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write", i32 0, i32 2), align 8
  %56 = icmp eq ptr %next_val190, inttoptr (i64 -1 to ptr)
  br i1 %56, label %dtable_check191, label %dtable_skip196

dtable_check191:                                  ; preds = %dtable_check191, %dtable_skip189
  %dtable_ref192 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip189 ], [ %next_dtable_ref194, %dtable_check191 ]
  %dtable_ptr193 = load ptr, ptr %dtable_ref192, align 8
  %57 = icmp eq ptr %dtable_ptr193, null
  %next_dtable_ref194 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr193, i32 0, i32 2
  br i1 %57, label %dtable_found195, label %dtable_check191

dtable_found195:                                  ; preds = %dtable_check191
  store ptr @"$ct.dyn.std.io.ByteBuffer.write", ptr %dtable_ref192, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write", i32 0, i32 2), align 8
  br label %dtable_skip196

dtable_skip196:                                   ; preds = %dtable_found195, %dtable_skip189
  %next_val197 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", i32 0, i32 2), align 8
  %58 = icmp eq ptr %next_val197, inttoptr (i64 -1 to ptr)
  br i1 %58, label %dtable_check198, label %dtable_skip203

dtable_check198:                                  ; preds = %dtable_check198, %dtable_skip196
  %dtable_ref199 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip196 ], [ %next_dtable_ref201, %dtable_check198 ]
  %dtable_ptr200 = load ptr, ptr %dtable_ref199, align 8
  %59 = icmp eq ptr %dtable_ptr200, null
  %next_dtable_ref201 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr200, i32 0, i32 2
  br i1 %59, label %dtable_found202, label %dtable_check198

dtable_found202:                                  ; preds = %dtable_check198
  store ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", ptr %dtable_ref199, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip203

dtable_skip203:                                   ; preds = %dtable_found202, %dtable_skip196
  %next_val204 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read", i32 0, i32 2), align 8
  %60 = icmp eq ptr %next_val204, inttoptr (i64 -1 to ptr)
  br i1 %60, label %dtable_check205, label %dtable_skip210

dtable_check205:                                  ; preds = %dtable_check205, %dtable_skip203
  %dtable_ref206 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip203 ], [ %next_dtable_ref208, %dtable_check205 ]
  %dtable_ptr207 = load ptr, ptr %dtable_ref206, align 8
  %61 = icmp eq ptr %dtable_ptr207, null
  %next_dtable_ref208 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr207, i32 0, i32 2
  br i1 %61, label %dtable_found209, label %dtable_check205

dtable_found209:                                  ; preds = %dtable_check205
  store ptr @"$ct.dyn.std.io.ByteBuffer.read", ptr %dtable_ref206, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read", i32 0, i32 2), align 8
  br label %dtable_skip210

dtable_skip210:                                   ; preds = %dtable_found209, %dtable_skip203
  %next_val211 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", i32 0, i32 2), align 8
  %62 = icmp eq ptr %next_val211, inttoptr (i64 -1 to ptr)
  br i1 %62, label %dtable_check212, label %dtable_skip217

dtable_check212:                                  ; preds = %dtable_check212, %dtable_skip210
  %dtable_ref213 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip210 ], [ %next_dtable_ref215, %dtable_check212 ]
  %dtable_ptr214 = load ptr, ptr %dtable_ref213, align 8
  %63 = icmp eq ptr %dtable_ptr214, null
  %next_dtable_ref215 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr214, i32 0, i32 2
  br i1 %63, label %dtable_found216, label %dtable_check212

dtable_found216:                                  ; preds = %dtable_check212
  store ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", ptr %dtable_ref213, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip217

dtable_skip217:                                   ; preds = %dtable_found216, %dtable_skip210
  %next_val218 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", i32 0, i32 2), align 8
  %64 = icmp eq ptr %next_val218, inttoptr (i64 -1 to ptr)
  br i1 %64, label %dtable_check219, label %dtable_skip224

dtable_check219:                                  ; preds = %dtable_check219, %dtable_skip217
  %dtable_ref220 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip217 ], [ %next_dtable_ref222, %dtable_check219 ]
  %dtable_ptr221 = load ptr, ptr %dtable_ref220, align 8
  %65 = icmp eq ptr %dtable_ptr221, null
  %next_dtable_ref222 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr221, i32 0, i32 2
  br i1 %65, label %dtable_found223, label %dtable_check219

dtable_found223:                                  ; preds = %dtable_check219
  store ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", ptr %dtable_ref220, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", i32 0, i32 2), align 8
  br label %dtable_skip224

dtable_skip224:                                   ; preds = %dtable_found223, %dtable_skip217
  %next_val225 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.seek", i32 0, i32 2), align 8
  %66 = icmp eq ptr %next_val225, inttoptr (i64 -1 to ptr)
  br i1 %66, label %dtable_check226, label %dtable_skip231

dtable_check226:                                  ; preds = %dtable_check226, %dtable_skip224
  %dtable_ref227 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip224 ], [ %next_dtable_ref229, %dtable_check226 ]
  %dtable_ptr228 = load ptr, ptr %dtable_ref227, align 8
  %67 = icmp eq ptr %dtable_ptr228, null
  %next_dtable_ref229 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr228, i32 0, i32 2
  br i1 %67, label %dtable_found230, label %dtable_check226

dtable_found230:                                  ; preds = %dtable_check226
  store ptr @"$ct.dyn.std.io.ByteBuffer.seek", ptr %dtable_ref227, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.seek", i32 0, i32 2), align 8
  br label %dtable_skip231

dtable_skip231:                                   ; preds = %dtable_found230, %dtable_skip224
  %next_val232 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.available", i32 0, i32 2), align 8
  %68 = icmp eq ptr %next_val232, inttoptr (i64 -1 to ptr)
  br i1 %68, label %dtable_check233, label %dtable_skip238

dtable_check233:                                  ; preds = %dtable_check233, %dtable_skip231
  %dtable_ref234 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip231 ], [ %next_dtable_ref236, %dtable_check233 ]
  %dtable_ptr235 = load ptr, ptr %dtable_ref234, align 8
  %69 = icmp eq ptr %dtable_ptr235, null
  %next_dtable_ref236 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr235, i32 0, i32 2
  br i1 %69, label %dtable_found237, label %dtable_check233

dtable_found237:                                  ; preds = %dtable_check233
  store ptr @"$ct.dyn.std.io.ByteBuffer.available", ptr %dtable_ref234, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.available", i32 0, i32 2), align 8
  br label %dtable_skip238

dtable_skip238:                                   ; preds = %dtable_found237, %dtable_skip231
  %next_val239 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.flush", i32 0, i32 2), align 8
  %70 = icmp eq ptr %next_val239, inttoptr (i64 -1 to ptr)
  br i1 %70, label %dtable_check240, label %dtable_skip245

dtable_check240:                                  ; preds = %dtable_check240, %dtable_skip238
  %dtable_ref241 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip238 ], [ %next_dtable_ref243, %dtable_check240 ]
  %dtable_ptr242 = load ptr, ptr %dtable_ref241, align 8
  %71 = icmp eq ptr %dtable_ptr242, null
  %next_dtable_ref243 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr242, i32 0, i32 2
  br i1 %71, label %dtable_found244, label %dtable_check240

dtable_found244:                                  ; preds = %dtable_check240
  store ptr @"$ct.dyn.std.io.Scanner.flush", ptr %dtable_ref241, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.flush", i32 0, i32 2), align 8
  br label %dtable_skip245

dtable_skip245:                                   ; preds = %dtable_found244, %dtable_skip238
  %next_val246 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.close", i32 0, i32 2), align 8
  %72 = icmp eq ptr %next_val246, inttoptr (i64 -1 to ptr)
  br i1 %72, label %dtable_check247, label %dtable_skip252

dtable_check247:                                  ; preds = %dtable_check247, %dtable_skip245
  %dtable_ref248 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip245 ], [ %next_dtable_ref250, %dtable_check247 ]
  %dtable_ptr249 = load ptr, ptr %dtable_ref248, align 8
  %73 = icmp eq ptr %dtable_ptr249, null
  %next_dtable_ref250 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr249, i32 0, i32 2
  br i1 %73, label %dtable_found251, label %dtable_check247

dtable_found251:                                  ; preds = %dtable_check247
  store ptr @"$ct.dyn.std.io.Scanner.close", ptr %dtable_ref248, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.close", i32 0, i32 2), align 8
  br label %dtable_skip252

dtable_skip252:                                   ; preds = %dtable_found251, %dtable_skip245
  %next_val253 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read", i32 0, i32 2), align 8
  %74 = icmp eq ptr %next_val253, inttoptr (i64 -1 to ptr)
  br i1 %74, label %dtable_check254, label %dtable_skip259

dtable_check254:                                  ; preds = %dtable_check254, %dtable_skip252
  %dtable_ref255 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip252 ], [ %next_dtable_ref257, %dtable_check254 ]
  %dtable_ptr256 = load ptr, ptr %dtable_ref255, align 8
  %75 = icmp eq ptr %dtable_ptr256, null
  %next_dtable_ref257 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr256, i32 0, i32 2
  br i1 %75, label %dtable_found258, label %dtable_check254

dtable_found258:                                  ; preds = %dtable_check254
  store ptr @"$ct.dyn.std.io.Scanner.read", ptr %dtable_ref255, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read", i32 0, i32 2), align 8
  br label %dtable_skip259

dtable_skip259:                                   ; preds = %dtable_found258, %dtable_skip252
  %next_val260 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read_byte", i32 0, i32 2), align 8
  %76 = icmp eq ptr %next_val260, inttoptr (i64 -1 to ptr)
  br i1 %76, label %dtable_check261, label %dtable_skip266

dtable_check261:                                  ; preds = %dtable_check261, %dtable_skip259
  %dtable_ref262 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip259 ], [ %next_dtable_ref264, %dtable_check261 ]
  %dtable_ptr263 = load ptr, ptr %dtable_ref262, align 8
  %77 = icmp eq ptr %dtable_ptr263, null
  %next_dtable_ref264 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr263, i32 0, i32 2
  br i1 %77, label %dtable_found265, label %dtable_check261

dtable_found265:                                  ; preds = %dtable_check261
  store ptr @"$ct.dyn.std.io.Scanner.read_byte", ptr %dtable_ref262, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip266

dtable_skip266:                                   ; preds = %dtable_found265, %dtable_skip259
  %next_val267 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.ReflectedParam.to_format", i32 0, i32 2), align 8
  %78 = icmp eq ptr %next_val267, inttoptr (i64 -1 to ptr)
  br i1 %78, label %dtable_check268, label %dtable_skip273

dtable_check268:                                  ; preds = %dtable_check268, %dtable_skip266
  %dtable_ref269 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.ReflectedParam", i32 0, i32 2), %dtable_skip266 ], [ %next_dtable_ref271, %dtable_check268 ]
  %dtable_ptr270 = load ptr, ptr %dtable_ref269, align 8
  %79 = icmp eq ptr %dtable_ptr270, null
  %next_dtable_ref271 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr270, i32 0, i32 2
  br i1 %79, label %dtable_found272, label %dtable_check268

dtable_found272:                                  ; preds = %dtable_check268
  store ptr @"$ct.dyn.std.core.ReflectedParam.to_format", ptr %dtable_ref269, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.ReflectedParam.to_format", i32 0, i32 2), align 8
  br label %dtable_skip273

dtable_skip273:                                   ; preds = %dtable_found272, %dtable_skip266
  ret void
}

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { noreturn }
attributes #6 = { alwaysinline }

!llvm.module.flags = !{!36, !37, !38, !39, !40, !41, !42}
!llvm.dbg.cu = !{!43}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "WRITER_BITS", linkageName: "std.io.WRITER_BITS", scope: !2, file: !2, line: 50, type: !3, isLocal: false, isDefinition: true, align: 4)
!2 = !DIFile(filename: "bits.c3", directory: "/usr/lib/c3c/lib/std/io")
!3 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
!5 = distinct !DIGlobalVariable(name: "file", linkageName: "stdout.file", scope: !6, file: !6, line: 361, type: !7, isLocal: true, isDefinition: true, align: 8)
!6 = !DIFile(filename: "io.c3", directory: "/usr/lib/c3c/lib/std/io")
!7 = !DICompositeType(tag: DW_TAG_structure_type, name: "File", scope: !6, file: !6, line: 4, size: 64, align: 64, elements: !8, identifier: "std.io.File")
!8 = !{!9}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !7, file: !6, line: 6, baseType: !10, size: 64, align: 64)
!10 = !DIDerivedType(tag: DW_TAG_typedef, name: "CFile", scope: !6, file: !6, line: 374, baseType: !11, align: 8)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "file", linkageName: "stderr.file", scope: !6, file: !6, line: 373, type: !7, isLocal: true, isDefinition: true, align: 8)
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "file", linkageName: "stdin.file", scope: !6, file: !6, line: 385, type: !7, isLocal: true, isDefinition: true, align: 8)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "MAX_VARS", linkageName: "std.io.MAX_VARS", scope: !18, file: !18, line: 186, type: !19, isLocal: true, isDefinition: true, align: 1)
!18 = !DIFile(filename: "stream.c3", directory: "/usr/lib/c3c/lib/std/io")
!19 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 72, align: 8, elements: !21)
!20 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!21 = !{!22}
!22 = !DISubrange(count: 9, lowerBound: 0)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(name: "XDIGITS_H", linkageName: "std.io.XDIGITS_H", scope: !25, file: !25, line: 4, type: !26, isLocal: false, isDefinition: true, align: 16)
!25 = !DIFile(filename: "formatter_private.c3", directory: "/usr/lib/c3c/lib/std/io")
!26 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 128, align: 8, elements: !27)
!27 = !{!28}
!28 = !DISubrange(count: 16, lowerBound: 0)
!29 = !DIGlobalVariableExpression(var: !30, expr: !DIExpression())
!30 = distinct !DIGlobalVariable(name: "XDIGITS_L", linkageName: "std.io.XDIGITS_L", scope: !25, file: !25, line: 5, type: !26, isLocal: false, isDefinition: true, align: 16)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "BUF_SIZE", linkageName: "floatformat.BUF_SIZE", scope: !25, file: !25, line: 213, type: !3, isLocal: true, isDefinition: true, align: 4)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "PRINTF_NTOA_BUFFER_SIZE", linkageName: "std.io.PRINTF_NTOA_BUFFER_SIZE", scope: !35, file: !35, line: 5, type: !3, isLocal: false, isDefinition: true, align: 4)
!35 = !DIFile(filename: "formatter.c3", directory: "/usr/lib/c3c/lib/std/io")
!36 = !{i32 2, !"Dwarf Version", i32 4}
!37 = !{i32 2, !"Debug Info Version", i32 3}
!38 = !{i32 2, !"wchar_size", i32 4}
!39 = !{i32 4, !"PIE Level", i32 2}
!40 = !{i32 4, !"PIC Level", i32 2}
!41 = !{i32 1, !"uwtable", i32 2}
!42 = !{i32 2, !"frame-pointer", i32 2}
!43 = distinct !DICompileUnit(language: DW_LANG_C11, file: !44, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !45, globals: !80, splitDebugInlining: false)
!44 = !DIFile(filename: "file.c3", directory: "/usr/lib/c3c/lib/std/io")
!45 = !{!46, !52, !58}
!46 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "FloatFormatting", scope: !25, file: !25, line: 197, baseType: !3, size: 32, align: 32, elements: !47)
!47 = !{!48, !49, !50, !51}
!48 = !DIEnumerator(name: "FLOAT", value: 0)
!49 = !DIEnumerator(name: "EXPONENTIAL", value: 1)
!50 = !DIEnumerator(name: "ADAPTIVE", value: 2)
!51 = !DIEnumerator(name: "HEX", value: 3)
!52 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "Seek", scope: !53, file: !53, line: 7, baseType: !3, size: 32, align: 32, elements: !54)
!53 = !DIFile(filename: "bytereader.c3", directory: "/usr/lib/c3c/lib/std/io/stream")
!54 = !{!55, !56, !57}
!55 = !DIEnumerator(name: "SET", value: 0)
!56 = !DIEnumerator(name: "CURSOR", value: 1)
!57 = !DIEnumerator(name: "END", value: 2)
!58 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "TypeKind", scope: !25, file: !25, line: 351, baseType: !20, size: 8, align: 8, elements: !59)
!59 = !{!60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79}
!60 = !DIEnumerator(name: "VOID", value: 0, isUnsigned: true)
!61 = !DIEnumerator(name: "BOOL", value: 1, isUnsigned: true)
!62 = !DIEnumerator(name: "SIGNED_INT", value: 2, isUnsigned: true)
!63 = !DIEnumerator(name: "UNSIGNED_INT", value: 3, isUnsigned: true)
!64 = !DIEnumerator(name: "FLOAT", value: 4, isUnsigned: true)
!65 = !DIEnumerator(name: "TYPEID", value: 5, isUnsigned: true)
!66 = !DIEnumerator(name: "FAULT", value: 6, isUnsigned: true)
!67 = !DIEnumerator(name: "ANY", value: 7, isUnsigned: true)
!68 = !DIEnumerator(name: "ENUM", value: 8, isUnsigned: true)
!69 = !DIEnumerator(name: "STRUCT", value: 9, isUnsigned: true)
!70 = !DIEnumerator(name: "UNION", value: 10, isUnsigned: true)
!71 = !DIEnumerator(name: "BITSTRUCT", value: 11, isUnsigned: true)
!72 = !DIEnumerator(name: "FUNC", value: 12, isUnsigned: true)
!73 = !DIEnumerator(name: "OPTIONAL", value: 13, isUnsigned: true)
!74 = !DIEnumerator(name: "ARRAY", value: 14, isUnsigned: true)
!75 = !DIEnumerator(name: "SLICE", value: 15, isUnsigned: true)
!76 = !DIEnumerator(name: "VECTOR", value: 16, isUnsigned: true)
!77 = !DIEnumerator(name: "DISTINCT", value: 17, isUnsigned: true)
!78 = !DIEnumerator(name: "POINTER", value: 18, isUnsigned: true)
!79 = !DIEnumerator(name: "INTERFACE", value: 19, isUnsigned: true)
!80 = !{!0, !4, !12, !14, !16, !23, !29, !31, !33}
!81 = distinct !DISubprogram(name: "init", linkageName: "std.io.BitReader.init", scope: !2, file: !2, line: 10, type: !82, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!82 = !DISubroutineType(types: !83)
!83 = !{null, !84, !88}
!84 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BitReader*", baseType: !85, size: 64, align: 64, dwarfAddressSpace: 0)
!85 = !DICompositeType(tag: DW_TAG_structure_type, name: "BitReader", scope: !2, file: !2, line: 3, size: 192, align: 64, elements: !86, identifier: "std.io.BitReader")
!86 = !{!87, !93, !95}
!87 = !DIDerivedType(tag: DW_TAG_member, name: "reader", scope: !85, file: !2, line: 5, baseType: !88, size: 128, align: 64)
!88 = !DICompositeType(tag: DW_TAG_structure_type, name: "InStream", size: 128, align: 64, elements: !89, identifier: "InStream")
!89 = !{!90, !91}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !88, baseType: !11, size: 64, align: 64)
!91 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !88, baseType: !92, size: 64, align: 64, offset: 64)
!92 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!93 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !85, file: !2, line: 6, baseType: !94, size: 32, align: 32, offset: 128)
!94 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!95 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !85, file: !2, line: 7, baseType: !94, size: 32, align: 32, offset: 160)
!96 = !{}
!97 = !DILocation(line: 11, column: 1, scope: !81)
!98 = !DILocalVariable(name: "self", arg: 1, scope: !81, file: !2, line: 10, type: !84)
!99 = !DILocation(line: 10, column: 24, scope: !81)
!100 = !DILocalVariable(name: "byte_reader", arg: 2, scope: !81, file: !2, line: 10, type: !88)
!101 = !DILocation(line: 10, column: 40, scope: !81)
!102 = !DILocation(line: 12, column: 3, scope: !81)
!103 = !DILocation(line: 12, column: 22, scope: !81)
!104 = distinct !DISubprogram(name: "clear", linkageName: "std.io.BitReader.clear", scope: !2, file: !2, line: 15, type: !105, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!105 = !DISubroutineType(types: !106)
!106 = !{null, !84}
!107 = !DILocation(line: 16, column: 1, scope: !104)
!108 = !DILocalVariable(name: "self", arg: 1, scope: !104, file: !2, line: 15, type: !84)
!109 = !DILocation(line: 15, column: 25, scope: !104)
!110 = !DILocation(line: 17, column: 2, scope: !104)
!111 = !DILocation(line: 17, column: 13, scope: !104)
!112 = distinct !DISubprogram(name: "read_bits", linkageName: "std.io.BitReader.read_bits", scope: !2, file: !2, line: 24, type: !113, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!113 = !DISubroutineType(types: !114)
!114 = !{!115, !117, !84, !94}
!115 = !DIDerivedType(tag: DW_TAG_typedef, name: "fault", baseType: !116)
!116 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!117 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !20, size: 64, align: 64, dwarfAddressSpace: 0)
!118 = !DILocation(line: 25, column: 1, scope: !112)
!119 = !DILocalVariable(name: "self", arg: 1, scope: !112, file: !2, line: 24, type: !84)
!120 = !DILocation(line: 24, column: 30, scope: !112)
!121 = !DILocalVariable(name: "nbits", arg: 2, scope: !112, file: !2, line: 24, type: !94)
!122 = !DILocation(line: 24, column: 42, scope: !112)
!123 = !DILocation(line: 21, column: 11, scope: !124)
!124 = distinct !DILexicalBlock(scope: !112, file: !2, line: 25, column: 1)
!125 = !DILocation(line: 22, column: 11, scope: !124)
!126 = !DILocation(line: 22, column: 22, scope: !124)
!127 = !DILocalVariable(name: "bits", scope: !112, file: !2, line: 26, type: !94, align: 4)
!128 = !DILocation(line: 26, column: 7, scope: !112)
!129 = !DILocation(line: 26, column: 14, scope: !112)
!130 = !DILocation(line: 27, column: 6, scope: !112)
!131 = !DILocation(line: 27, column: 17, scope: !112)
!132 = !DILocalVariable(name: "c", scope: !133, file: !2, line: 30, type: !20, align: 1)
!133 = distinct !DILexicalBlock(scope: !112, file: !2, line: 28, column: 2)
!134 = !DILocation(line: 30, column: 8, scope: !133)
!135 = !DILocation(line: 30, column: 12, scope: !133)
!136 = !DILocation(line: 31, column: 3, scope: !133)
!137 = !DILocation(line: 32, column: 3, scope: !133)
!138 = !DILocation(line: 32, column: 11, scope: !133)
!139 = !DILocation(line: 33, column: 3, scope: !133)
!140 = !DILocation(line: 33, column: 15, scope: !133)
!141 = !DILocation(line: 34, column: 3, scope: !133)
!142 = !DILocation(line: 36, column: 2, scope: !112)
!143 = !DILocation(line: 36, column: 14, scope: !112)
!144 = !DILocalVariable(name: "mask", scope: !112, file: !2, line: 37, type: !94, align: 4)
!145 = !DILocation(line: 37, column: 7, scope: !112)
!146 = !DILocation(line: 37, column: 20, scope: !112)
!147 = !DILocation(line: 37, column: 15, scope: !112)
!148 = !DILocation(line: 38, column: 17, scope: !112)
!149 = !DILocation(line: 38, column: 25, scope: !112)
!150 = !DILocation(line: 38, column: 37, scope: !112)
!151 = !DILocation(line: 38, column: 9, scope: !112)
!152 = distinct !DISubprogram(name: "init", linkageName: "std.io.BitWriter.init", scope: !2, file: !2, line: 52, type: !153, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!153 = !DISubroutineType(types: !154)
!154 = !{null, !155, !159}
!155 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BitWriter*", baseType: !156, size: 64, align: 64, dwarfAddressSpace: 0)
!156 = !DICompositeType(tag: DW_TAG_structure_type, name: "BitWriter", scope: !2, file: !2, line: 41, size: 192, align: 64, elements: !157, identifier: "std.io.BitWriter")
!157 = !{!158, !163, !164}
!158 = !DIDerivedType(tag: DW_TAG_member, name: "writer", scope: !156, file: !2, line: 43, baseType: !159, size: 128, align: 64)
!159 = !DICompositeType(tag: DW_TAG_structure_type, name: "OutStream", size: 128, align: 64, elements: !160, identifier: "OutStream")
!160 = !{!161, !162}
!161 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !159, baseType: !11, size: 64, align: 64)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !159, baseType: !92, size: 64, align: 64, offset: 64)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !156, file: !2, line: 44, baseType: !94, size: 32, align: 32, offset: 128)
!164 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !156, file: !2, line: 45, baseType: !94, size: 32, align: 32, offset: 160)
!165 = !DILocation(line: 53, column: 1, scope: !152)
!166 = !DILocalVariable(name: "self", arg: 1, scope: !152, file: !2, line: 52, type: !155)
!167 = !DILocation(line: 52, column: 24, scope: !152)
!168 = !DILocalVariable(name: "byte_writer", arg: 2, scope: !152, file: !2, line: 52, type: !159)
!169 = !DILocation(line: 52, column: 41, scope: !152)
!170 = !DILocation(line: 54, column: 3, scope: !152)
!171 = !DILocation(line: 54, column: 22, scope: !152)
!172 = distinct !DISubprogram(name: "flush", linkageName: "std.io.BitWriter.flush", scope: !2, file: !2, line: 57, type: !173, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!173 = !DISubroutineType(types: !174)
!174 = !{!115, !11, !155}
!175 = !DILocation(line: 58, column: 1, scope: !172)
!176 = !DILocalVariable(name: "self", arg: 1, scope: !172, file: !2, line: 57, type: !155)
!177 = !DILocation(line: 57, column: 26, scope: !172)
!178 = !DILocation(line: 59, column: 6, scope: !172)
!179 = !DILocalVariable(name: "padding", scope: !172, file: !2, line: 61, type: !3, align: 4)
!180 = !DILocation(line: 61, column: 6, scope: !172)
!181 = !DILocation(line: 61, column: 42, scope: !172)
!182 = !DILocation(line: 61, column: 17, scope: !172)
!183 = !DILocalVariable(name: "bits", scope: !172, file: !2, line: 62, type: !94, align: 4)
!184 = !DILocation(line: 62, column: 7, scope: !172)
!185 = !DILocation(line: 62, column: 14, scope: !172)
!186 = !DILocation(line: 62, column: 27, scope: !172)
!187 = !DILocalVariable(name: "n", scope: !172, file: !2, line: 63, type: !94, align: 4)
!188 = !DILocation(line: 63, column: 7, scope: !172)
!189 = !DILocation(line: 63, column: 12, scope: !172)
!190 = !DILocalVariable(name: "buffer", scope: !172, file: !2, line: 64, type: !191, align: 1)
!191 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 32, align: 8, elements: !192)
!192 = !{!193}
!193 = !DISubrange(count: 4, lowerBound: 0)
!194 = !DILocation(line: 64, column: 10, scope: !172)
!195 = !DILocation(line: 172, column: 11, scope: !196, inlinedAt: !198)
!196 = distinct !DISubprogram(name: "is_arrayptr_or_slice_of_char", linkageName: "is_arrayptr_or_slice_of_char", scope: !197, file: !197, line: 165, scopeLine: 165, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!197 = !DIFile(filename: "bitorder.c3", directory: "/usr/lib/c3c/lib/std/core")
!198 = !DILocation(line: 65, column: 2, scope: !199, inlinedAt: !201)
!199 = distinct !DILexicalBlock(scope: !200, file: !197, line: 111, column: 1)
!200 = distinct !DISubprogram(name: "write", linkageName: "write", scope: !197, file: !197, line: 110, scopeLine: 110, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!201 = !DILocation(line: 65, column: 2, scope: !172)
!202 = !DILocalVariable(name: "s", scope: !200, file: !2, line: 112, type: !203, align: 8)
!203 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !204, identifier: "char[]")
!204 = !{!205, !206}
!205 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !203, baseType: !117, size: 64, align: 64)
!206 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !203, baseType: !207, size: 64, align: 64, offset: 64)
!207 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !208)
!208 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!209 = !DILocation(line: 112, column: 9, scope: !200, inlinedAt: !201)
!210 = !DILocation(line: 115, column: 9, scope: !200, inlinedAt: !201)
!211 = !DILocation(line: 119, column: 16, scope: !200, inlinedAt: !201)
!212 = !DILocation(line: 119, column: 3, scope: !200, inlinedAt: !201)
!213 = !DILocation(line: 254, column: 20, scope: !214, inlinedAt: !216)
!214 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !215, file: !215, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!215 = !DIFile(filename: "builtin.c3", directory: "/usr/lib/c3c/lib/std/core")
!216 = !DILocation(line: 119, column: 24, scope: !200, inlinedAt: !201)
!217 = !DILocation(line: 254, column: 11, scope: !214, inlinedAt: !216)
!218 = !DILocation(line: 66, column: 16, scope: !172)
!219 = !DILocation(line: 66, column: 37, scope: !172)
!220 = !DILocation(line: 66, column: 29, scope: !172)
!221 = !DILocation(line: 101, column: 6, scope: !222, inlinedAt: !223)
!222 = distinct !DISubprogram(name: "write_all", linkageName: "write_all", scope: !18, file: !18, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!223 = !DILocation(line: 66, column: 2, scope: !172)
!224 = !DILocation(line: 101, column: 30, scope: !222, inlinedAt: !223)
!225 = !DILocalVariable(name: "n", scope: !222, file: !2, line: 102, type: !207, align: 8)
!226 = !DILocation(line: 102, column: 6, scope: !222, inlinedAt: !223)
!227 = !DILocation(line: 102, column: 23, scope: !222, inlinedAt: !223)
!228 = !DILocation(line: 102, column: 10, scope: !222, inlinedAt: !223)
!229 = !DILocation(line: 103, column: 6, scope: !222, inlinedAt: !223)
!230 = !DILocation(line: 103, column: 11, scope: !222, inlinedAt: !223)
!231 = !DILocation(line: 103, column: 30, scope: !222, inlinedAt: !223)
!232 = !DILocation(line: 104, column: 9, scope: !222, inlinedAt: !223)
!233 = !DILocation(line: 67, column: 2, scope: !172)
!234 = !DILocation(line: 67, column: 13, scope: !172)
!235 = distinct !DISubprogram(name: "write_bits", linkageName: "std.io.BitWriter.write_bits", scope: !2, file: !2, line: 73, type: !236, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!236 = !DISubroutineType(types: !237)
!237 = !{!115, !11, !155, !94, !94}
!238 = !DILocation(line: 74, column: 1, scope: !235)
!239 = !DILocalVariable(name: "self", arg: 1, scope: !235, file: !2, line: 73, type: !155)
!240 = !DILocation(line: 73, column: 31, scope: !235)
!241 = !DILocalVariable(name: "bits", arg: 2, scope: !235, file: !2, line: 73, type: !94)
!242 = !DILocation(line: 73, column: 43, scope: !235)
!243 = !DILocalVariable(name: "nbits", arg: 3, scope: !235, file: !2, line: 73, type: !94)
!244 = !DILocation(line: 73, column: 54, scope: !235)
!245 = !DILocation(line: 71, column: 11, scope: !246)
!246 = distinct !DILexicalBlock(scope: !235, file: !2, line: 74, column: 1)
!247 = !DILocation(line: 75, column: 6, scope: !235)
!248 = !DILocation(line: 76, column: 2, scope: !235)
!249 = !DILocation(line: 76, column: 9, scope: !250)
!250 = distinct !DILexicalBlock(scope: !235, file: !2, line: 76, column: 2)
!251 = !DILocation(line: 76, column: 20, scope: !250)
!252 = !DILocalVariable(name: "to_push", scope: !253, file: !2, line: 78, type: !94, align: 4)
!253 = distinct !DILexicalBlock(scope: !250, file: !2, line: 77, column: 2)
!254 = !DILocation(line: 78, column: 8, scope: !253)
!255 = !DILocation(line: 78, column: 32, scope: !253)
!256 = !DILocation(line: 78, column: 18, scope: !253)
!257 = !DILocalVariable(name: "bits_to_push", scope: !253, file: !2, line: 79, type: !94, align: 4)
!258 = !DILocation(line: 79, column: 8, scope: !253)
!259 = !DILocation(line: 79, column: 24, scope: !253)
!260 = !DILocation(line: 79, column: 33, scope: !253)
!261 = !DILocation(line: 79, column: 41, scope: !253)
!262 = !DILocation(line: 79, column: 60, scope: !253)
!263 = !DILocation(line: 79, column: 55, scope: !253)
!264 = !DILocation(line: 81, column: 3, scope: !253)
!265 = !DILocation(line: 81, column: 17, scope: !253)
!266 = !DILocation(line: 82, column: 3, scope: !253)
!267 = !DILocation(line: 82, column: 16, scope: !253)
!268 = !DILocation(line: 83, column: 3, scope: !253)
!269 = !DILocation(line: 83, column: 15, scope: !253)
!270 = !DILocation(line: 84, column: 3, scope: !253)
!271 = !DILocation(line: 84, column: 12, scope: !253)
!272 = !DILocation(line: 86, column: 3, scope: !253)
!273 = !DILocation(line: 89, column: 6, scope: !235)
!274 = !DILocation(line: 91, column: 2, scope: !235)
!275 = !DILocation(line: 91, column: 16, scope: !235)
!276 = !DILocation(line: 92, column: 2, scope: !235)
!277 = !DILocation(line: 92, column: 15, scope: !235)
!278 = !DILocation(line: 92, column: 29, scope: !235)
!279 = !DILocation(line: 92, column: 24, scope: !235)
!280 = !DILocation(line: 93, column: 2, scope: !235)
!281 = !DILocation(line: 93, column: 14, scope: !235)
!282 = distinct !DISubprogram(name: "fprintf", linkageName: "std.io.fprintf", scope: !6, file: !6, line: 142, type: !283, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!283 = !DISubroutineType(types: !284)
!284 = !{!115, !285, !159, !286, !287}
!285 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !207, size: 64, align: 64, dwarfAddressSpace: 0)
!286 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !203)
!287 = !DICompositeType(tag: DW_TAG_structure_type, name: "any[]", size: 128, align: 64, elements: !288, identifier: "any[]")
!288 = !{!289, !295}
!289 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !287, baseType: !290, size: 64, align: 64)
!290 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "any*", baseType: !291, size: 64, align: 64, dwarfAddressSpace: 0)
!291 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !292, identifier: "any")
!292 = !{!293, !294}
!293 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !291, baseType: !11, size: 64, align: 64)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !291, baseType: !92, size: 64, align: 64, offset: 64)
!295 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !287, baseType: !207, size: 64, align: 64, offset: 64)
!296 = !DILocalVariable(name: "out", arg: 1, scope: !282, file: !6, line: 142, type: !159)
!297 = !DILocation(line: 142, column: 27, scope: !282)
!298 = !DILocalVariable(name: "format", arg: 2, scope: !282, file: !6, line: 142, type: !286)
!299 = !DILocation(line: 142, column: 39, scope: !282)
!300 = !DILocalVariable(name: "args", arg: 3, scope: !282, file: !6, line: 142, type: !287)
!301 = !DILocation(line: 142, column: 47, scope: !282)
!302 = !DILocalVariable(name: "formatter", scope: !282, file: !6, line: 144, type: !303, align: 8)
!303 = !DICompositeType(tag: DW_TAG_structure_type, name: "Formatter", scope: !25, file: !25, line: 63, size: 384, align: 64, elements: !304, identifier: "std.io.Formatter")
!304 = !{!305, !306, !311}
!305 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !303, file: !25, line: 65, baseType: !11, size: 64, align: 64)
!306 = !DIDerivedType(tag: DW_TAG_member, name: "out_fn", scope: !303, file: !25, line: 66, baseType: !307, size: 64, align: 64, offset: 64)
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "OutputFn", scope: !25, file: !25, line: 16, baseType: !308, align: 8)
!308 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OutputFn", baseType: !309, size: 64, align: 64, dwarfAddressSpace: 0)
!309 = !DISubroutineType(types: !310)
!310 = !{!115, !11, !11, !20}
!311 = !DIDerivedType(tag: DW_TAG_member, scope: !303, file: !25, line: 67, baseType: !312, size: 256, align: 64, offset: 128)
!312 = !DICompositeType(tag: DW_TAG_structure_type, name: "$anon", scope: !303, file: !25, line: 67, size: 256, align: 64, elements: !313)
!313 = !{!314, !315, !316, !317, !318}
!314 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !312, file: !25, line: 69, baseType: !94, size: 32, align: 32)
!315 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !312, file: !25, line: 70, baseType: !94, size: 32, align: 32, offset: 32)
!316 = !DIDerivedType(tag: DW_TAG_member, name: "prec", scope: !312, file: !25, line: 71, baseType: !94, size: 32, align: 32, offset: 64)
!317 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !312, file: !25, line: 72, baseType: !207, size: 64, align: 64, offset: 128)
!318 = !DIDerivedType(tag: DW_TAG_member, name: "first_fault", scope: !312, file: !25, line: 73, baseType: !115, size: 64, align: 64, offset: 192)
!319 = !DILocation(line: 144, column: 12, scope: !282)
!320 = !DILocation(line: 145, column: 2, scope: !282)
!321 = !DILocation(line: 146, column: 9, scope: !282)
!322 = distinct !DISubprogram(name: "fprintfn", linkageName: "std.io.fprintfn", scope: !6, file: !6, line: 157, type: !283, scopeLine: 157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!323 = !DILocalVariable(name: "out", arg: 1, scope: !322, file: !6, line: 157, type: !159)
!324 = !DILocation(line: 157, column: 28, scope: !322)
!325 = !DILocalVariable(name: "format", arg: 2, scope: !322, file: !6, line: 157, type: !286)
!326 = !DILocation(line: 157, column: 40, scope: !322)
!327 = !DILocalVariable(name: "args", arg: 3, scope: !322, file: !6, line: 157, type: !287)
!328 = !DILocation(line: 157, column: 48, scope: !322)
!329 = !DILocalVariable(name: "formatter", scope: !322, file: !6, line: 159, type: !303, align: 8)
!330 = !DILocation(line: 159, column: 12, scope: !322)
!331 = !DILocation(line: 160, column: 2, scope: !322)
!332 = !DILocalVariable(name: "len", scope: !322, file: !6, line: 161, type: !207, align: 8)
!333 = !DILocation(line: 161, column: 6, scope: !322)
!334 = !DILocation(line: 161, column: 12, scope: !322)
!335 = !DILocation(line: 162, column: 17, scope: !322)
!336 = !DILocation(line: 162, column: 2, scope: !322)
!337 = !DILocation(line: 163, column: 7, scope: !322)
!338 = !DILocation(line: 163, column: 18, scope: !322)
!339 = !DILocation(line: 164, column: 9, scope: !322)
!340 = distinct !DISubprogram(name: "out_putstream_fn", linkageName: "std.io.out_putstream_fn", scope: !6, file: !6, line: 220, type: !309, scopeLine: 220, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!341 = !DILocalVariable(name: "data", arg: 1, scope: !340, file: !6, line: 220, type: !11)
!342 = !DILocation(line: 220, column: 33, scope: !340)
!343 = !DILocalVariable(name: "c", arg: 2, scope: !340, file: !6, line: 220, type: !20)
!344 = !DILocation(line: 220, column: 44, scope: !340)
!345 = !DILocalVariable(name: "stream", scope: !340, file: !6, line: 222, type: !346, align: 8)
!346 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OutStream*", baseType: !159, size: 64, align: 64, dwarfAddressSpace: 0)
!347 = !DILocation(line: 222, column: 13, scope: !340)
!348 = !DILocation(line: 222, column: 22, scope: !340)
!349 = !DILocation(line: 223, column: 11, scope: !340)
!350 = !DILocation(line: 223, column: 30, scope: !340)
!351 = !DILocation(line: 223, column: 10, scope: !340)
!352 = distinct !DISubprogram(name: "out_putchar_fn", linkageName: "std.io.out_putchar_fn", scope: !6, file: !6, line: 226, type: !309, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!353 = !DILocalVariable(name: "data", arg: 1, scope: !352, file: !6, line: 226, type: !11)
!354 = !DILocation(line: 226, column: 31, scope: !352)
!355 = !DILocalVariable(name: "c", arg: 2, scope: !352, file: !6, line: 226, type: !20)
!356 = !DILocation(line: 226, column: 50, scope: !352)
!357 = !DILocation(line: 234, column: 17, scope: !352)
!358 = !DILocation(line: 234, column: 3, scope: !352)
!359 = distinct !DISubprogram(name: "printf", linkageName: "std.io.printf", scope: !6, file: !6, line: 252, type: !360, scopeLine: 252, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!360 = !DISubroutineType(types: !361)
!361 = !{!115, !285, !286, !287}
!362 = !DILocalVariable(name: "format", arg: 1, scope: !359, file: !6, line: 252, type: !286)
!363 = !DILocation(line: 252, column: 23, scope: !359)
!364 = !DILocalVariable(name: "args", arg: 2, scope: !359, file: !6, line: 252, type: !287)
!365 = !DILocation(line: 252, column: 31, scope: !359)
!366 = !DILocalVariable(name: "formatter", scope: !359, file: !6, line: 254, type: !303, align: 8)
!367 = !DILocation(line: 254, column: 12, scope: !359)
!368 = !DILocation(line: 255, column: 2, scope: !359)
!369 = !DILocation(line: 256, column: 9, scope: !359)
!370 = distinct !DISubprogram(name: "printfn", linkageName: "std.io.printfn", scope: !6, file: !6, line: 266, type: !360, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!371 = !DILocalVariable(name: "format", arg: 1, scope: !370, file: !6, line: 266, type: !286)
!372 = !DILocation(line: 266, column: 24, scope: !370)
!373 = !DILocalVariable(name: "args", arg: 2, scope: !370, file: !6, line: 266, type: !287)
!374 = !DILocation(line: 266, column: 32, scope: !370)
!375 = !DILocalVariable(name: "formatter", scope: !370, file: !6, line: 268, type: !303, align: 8)
!376 = !DILocation(line: 268, column: 12, scope: !370)
!377 = !DILocation(line: 269, column: 2, scope: !370)
!378 = !DILocalVariable(name: "len", scope: !370, file: !6, line: 270, type: !208, align: 8)
!379 = !DILocation(line: 270, column: 7, scope: !370)
!380 = !DILocation(line: 270, column: 13, scope: !370)
!381 = !DILocation(line: 271, column: 2, scope: !370)
!382 = !DILocation(line: 272, column: 2, scope: !370)
!383 = !DILocation(line: 220, column: 11, scope: !370)
!384 = !DILocation(line: 273, column: 9, scope: !370)
!385 = distinct !DISubprogram(name: "eprintf", linkageName: "std.io.eprintf", scope: !6, file: !6, line: 283, type: !360, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!386 = !DILocalVariable(name: "format", arg: 1, scope: !385, file: !6, line: 283, type: !286)
!387 = !DILocation(line: 283, column: 24, scope: !385)
!388 = !DILocalVariable(name: "args", arg: 2, scope: !385, file: !6, line: 283, type: !287)
!389 = !DILocation(line: 283, column: 32, scope: !385)
!390 = !DILocalVariable(name: "formatter", scope: !385, file: !6, line: 285, type: !303, align: 8)
!391 = !DILocation(line: 285, column: 12, scope: !385)
!392 = !DILocalVariable(name: "stream", scope: !385, file: !6, line: 286, type: !159, align: 8)
!393 = !DILocation(line: 286, column: 12, scope: !385)
!394 = !DILocation(line: 286, column: 21, scope: !385)
!395 = !DILocation(line: 287, column: 2, scope: !385)
!396 = !DILocation(line: 288, column: 9, scope: !385)
!397 = distinct !DISubprogram(name: "eprintfn", linkageName: "std.io.eprintfn", scope: !6, file: !6, line: 299, type: !360, scopeLine: 299, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!398 = !DILocalVariable(name: "format", arg: 1, scope: !397, file: !6, line: 299, type: !286)
!399 = !DILocation(line: 299, column: 25, scope: !397)
!400 = !DILocalVariable(name: "args", arg: 2, scope: !397, file: !6, line: 299, type: !287)
!401 = !DILocation(line: 299, column: 33, scope: !397)
!402 = !DILocalVariable(name: "formatter", scope: !397, file: !6, line: 301, type: !303, align: 8)
!403 = !DILocation(line: 301, column: 12, scope: !397)
!404 = !DILocalVariable(name: "stream", scope: !397, file: !6, line: 302, type: !159, align: 8)
!405 = !DILocation(line: 302, column: 12, scope: !397)
!406 = !DILocation(line: 302, column: 21, scope: !397)
!407 = !DILocation(line: 303, column: 2, scope: !397)
!408 = !DILocalVariable(name: "len", scope: !397, file: !6, line: 304, type: !208, align: 8)
!409 = !DILocation(line: 304, column: 7, scope: !397)
!410 = !DILocation(line: 304, column: 13, scope: !397)
!411 = !DILocation(line: 305, column: 2, scope: !397)
!412 = !DILocation(line: 88, column: 11, scope: !397)
!413 = !DILocation(line: 306, column: 2, scope: !397)
!414 = !DILocation(line: 220, column: 11, scope: !397)
!415 = !DILocation(line: 307, column: 9, scope: !397)
!416 = distinct !DISubprogram(name: "bprintf", linkageName: "std.io.bprintf", scope: !6, file: !6, line: 318, type: !417, scopeLine: 318, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!417 = !DISubroutineType(types: !418)
!418 = !{!115, !419, !203, !286, !287}
!419 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char[]*", baseType: !203, size: 64, align: 64, dwarfAddressSpace: 0)
!420 = !DILocalVariable(name: "buffer", arg: 1, scope: !416, file: !6, line: 318, type: !203)
!421 = !DILocation(line: 318, column: 27, scope: !416)
!422 = !DILocalVariable(name: "format", arg: 2, scope: !416, file: !6, line: 318, type: !286)
!423 = !DILocation(line: 318, column: 42, scope: !416)
!424 = !DILocalVariable(name: "args", arg: 3, scope: !416, file: !6, line: 318, type: !287)
!425 = !DILocation(line: 318, column: 50, scope: !416)
!426 = !DILocalVariable(name: "formatter", scope: !416, file: !6, line: 320, type: !303, align: 8)
!427 = !DILocation(line: 320, column: 12, scope: !416)
!428 = !DILocalVariable(name: "data", scope: !416, file: !6, line: 321, type: !429, align: 8)
!429 = !DICompositeType(tag: DW_TAG_structure_type, name: "BufferData", scope: !6, file: !6, line: 336, size: 192, align: 64, elements: !430, identifier: "std.io.BufferData")
!430 = !{!431, !432}
!431 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !429, file: !6, line: 338, baseType: !203, size: 128, align: 64)
!432 = !DIDerivedType(tag: DW_TAG_member, name: "written", scope: !429, file: !6, line: 339, baseType: !207, size: 64, align: 64, offset: 128)
!433 = !DILocation(line: 321, column: 13, scope: !416)
!434 = !DILocation(line: 321, column: 32, scope: !416)
!435 = !DILocation(line: 322, column: 2, scope: !416)
!436 = !DILocalVariable(name: "size", scope: !416, file: !6, line: 323, type: !207, align: 8)
!437 = !DILocation(line: 323, column: 6, scope: !416)
!438 = !DILocation(line: 323, column: 13, scope: !416)
!439 = !DILocation(line: 324, column: 9, scope: !416)
!440 = !DILocation(line: 324, column: 16, scope: !416)
!441 = !DILocation(line: 324, column: 17, scope: !416)
!442 = distinct !DISubprogram(name: "out_buffer_fn", linkageName: "std.io.out_buffer_fn", scope: !6, file: !6, line: 328, type: !309, scopeLine: 328, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!443 = !DILocalVariable(name: "data", arg: 1, scope: !442, file: !6, line: 328, type: !11)
!444 = !DILocation(line: 328, column: 30, scope: !442)
!445 = !DILocalVariable(name: "c", arg: 2, scope: !442, file: !6, line: 328, type: !20)
!446 = !DILocation(line: 328, column: 41, scope: !442)
!447 = !DILocalVariable(name: "buffer_data", scope: !442, file: !6, line: 330, type: !448, align: 8)
!448 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BufferData*", baseType: !429, size: 64, align: 64, dwarfAddressSpace: 0)
!449 = !DILocation(line: 330, column: 14, scope: !442)
!450 = !DILocation(line: 330, column: 28, scope: !442)
!451 = !DILocation(line: 331, column: 6, scope: !442)
!452 = !DILocation(line: 331, column: 29, scope: !442)
!453 = !DILocation(line: 331, column: 60, scope: !442)
!454 = !DILocation(line: 332, column: 2, scope: !442)
!455 = !DILocation(line: 332, column: 21, scope: !442)
!456 = !DILocation(line: 332, column: 46, scope: !442)
!457 = distinct !DISubprogram(name: "putchar", linkageName: "std.io.putchar", scope: !6, file: !6, line: 349, type: !458, scopeLine: 349, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!458 = !DISubroutineType(types: !459)
!459 = !{null, !20}
!460 = !DILocalVariable(name: "c", arg: 1, scope: !457, file: !6, line: 349, type: !20)
!461 = !DILocation(line: 349, column: 22, scope: !457)
!462 = !DILocation(line: 351, column: 16, scope: !457)
!463 = !DILocation(line: 351, column: 2, scope: !457)
!464 = distinct !DISubprogram(name: "stdout", linkageName: "std.io.stdout", scope: !6, file: !6, line: 359, type: !465, scopeLine: 359, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43)
!465 = !DISubroutineType(types: !466)
!466 = !{!467}
!467 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "File*", baseType: !7, size: 64, align: 64, dwarfAddressSpace: 0)
!468 = !DILocation(line: 362, column: 7, scope: !464)
!469 = !DILocation(line: 216, column: 25, scope: !470, inlinedAt: !472)
!470 = distinct !DISubprogram(name: "stdout", linkageName: "stdout", scope: !471, file: !471, line: 216, scopeLine: 216, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!471 = !DIFile(filename: "libc.c3", directory: "/usr/lib/c3c/lib/std/libc")
!472 = !DILocation(line: 362, column: 43, scope: !464)
!473 = !DILocation(line: 362, column: 25, scope: !464)
!474 = !DILocation(line: 363, column: 9, scope: !464)
!475 = distinct !DISubprogram(name: "stderr", linkageName: "std.io.stderr", scope: !6, file: !6, line: 371, type: !465, scopeLine: 371, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43)
!476 = !DILocation(line: 374, column: 7, scope: !475)
!477 = !DILocation(line: 217, column: 25, scope: !478, inlinedAt: !479)
!478 = distinct !DISubprogram(name: "stderr", linkageName: "stderr", scope: !471, file: !471, line: 217, scopeLine: 217, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!479 = !DILocation(line: 374, column: 43, scope: !475)
!480 = !DILocation(line: 374, column: 25, scope: !475)
!481 = !DILocation(line: 375, column: 9, scope: !475)
!482 = distinct !DISubprogram(name: "stdin", linkageName: "std.io.stdin", scope: !6, file: !6, line: 383, type: !465, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43)
!483 = !DILocation(line: 386, column: 7, scope: !482)
!484 = !DILocation(line: 215, column: 24, scope: !485, inlinedAt: !486)
!485 = distinct !DISubprogram(name: "stdin", linkageName: "stdin", scope: !471, file: !471, line: 215, scopeLine: 215, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!486 = !DILocation(line: 386, column: 43, scope: !482)
!487 = !DILocation(line: 386, column: 25, scope: !482)
!488 = !DILocation(line: 387, column: 9, scope: !482)
!489 = distinct !DISubprogram(name: "available", linkageName: "std.io.available", scope: !18, file: !18, line: 27, type: !490, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!490 = !DISubroutineType(types: !491)
!491 = !{!115, !285, !88}
!492 = !DILocalVariable(name: "s", arg: 1, scope: !489, file: !18, line: 27, type: !88)
!493 = !DILocation(line: 27, column: 28, scope: !489)
!494 = !DILocation(line: 29, column: 7, scope: !489)
!495 = !DILocation(line: 29, column: 27, scope: !489)
!496 = !DILocation(line: 30, column: 7, scope: !489)
!497 = !DILocalVariable(name: "curr", scope: !498, file: !18, line: 32, type: !207, align: 8)
!498 = distinct !DILexicalBlock(scope: !489, file: !18, line: 31, column: 2)
!499 = !DILocation(line: 32, column: 7, scope: !498)
!500 = !DILocation(line: 32, column: 24, scope: !498)
!501 = !DILocation(line: 32, column: 14, scope: !498)
!502 = !DILocalVariable(name: "len", scope: !498, file: !18, line: 33, type: !207, align: 8)
!503 = !DILocation(line: 33, column: 7, scope: !498)
!504 = !DILocation(line: 33, column: 23, scope: !498)
!505 = !DILocation(line: 33, column: 13, scope: !498)
!506 = !DILocation(line: 34, column: 10, scope: !498)
!507 = !DILocation(line: 34, column: 16, scope: !498)
!508 = !DILocation(line: 34, column: 3, scope: !498)
!509 = !DILocation(line: 35, column: 10, scope: !498)
!510 = !DILocation(line: 35, column: 16, scope: !498)
!511 = !DILocation(line: 37, column: 9, scope: !489)
!512 = distinct !DISubprogram(name: "copy_to", linkageName: "std.io.copy_to", scope: !18, file: !18, line: 152, type: !513, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!513 = !DISubroutineType(types: !514)
!514 = !{!115, !285, !88, !159, !203}
!515 = !DILocalVariable(name: "in", arg: 1, scope: !512, file: !18, line: 152, type: !88)
!516 = !DILocation(line: 152, column: 26, scope: !512)
!517 = !DILocalVariable(name: "dst", arg: 2, scope: !512, file: !18, line: 152, type: !159)
!518 = !DILocation(line: 152, column: 40, scope: !512)
!519 = !DILocalVariable(name: "buffer", arg: 3, scope: !512, file: !18, line: 152, type: !203)
!520 = !DILocation(line: 152, column: 52, scope: !512)
!521 = !DILocation(line: 154, column: 6, scope: !512)
!522 = !DILocalVariable(name: "total_copied", scope: !523, file: !18, line: 170, type: !207, align: 8)
!523 = distinct !DISubprogram(name: "copy_through_buffer", linkageName: "copy_through_buffer", scope: !18, file: !18, line: 168, scopeLine: 168, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!524 = !DILocation(line: 170, column: 6, scope: !523, inlinedAt: !525)
!525 = !DILocation(line: 154, column: 25, scope: !512)
!526 = !DILocation(line: 171, column: 2, scope: !523, inlinedAt: !525)
!527 = !DILocalVariable(name: "len", scope: !528, file: !18, line: 173, type: !208, align: 8)
!528 = distinct !DILexicalBlock(scope: !529, file: !18, line: 172, column: 2)
!529 = distinct !DILexicalBlock(scope: !523, file: !18, line: 171, column: 2)
!530 = !DILocation(line: 173, column: 8, scope: !528, inlinedAt: !525)
!531 = !DILocation(line: 173, column: 22, scope: !528, inlinedAt: !525)
!532 = !DILocation(line: 173, column: 14, scope: !528, inlinedAt: !525)
!533 = !DILocalVariable(name: "err", scope: !528, file: !18, line: 174, type: !115, align: 8)
!534 = !DILocation(line: 174, column: 13, scope: !528, inlinedAt: !525)
!535 = !DILocation(line: 174, column: 19, scope: !528, inlinedAt: !525)
!536 = !DILocation(line: 176, column: 8, scope: !537, inlinedAt: !525)
!537 = distinct !DILexicalBlock(scope: !528, file: !18, line: 175, column: 3)
!538 = !DILocation(line: 176, column: 31, scope: !537, inlinedAt: !525)
!539 = !DILocation(line: 177, column: 11, scope: !537, inlinedAt: !525)
!540 = !DILocation(line: 179, column: 7, scope: !528, inlinedAt: !525)
!541 = !DILocation(line: 179, column: 20, scope: !528, inlinedAt: !525)
!542 = !DILocalVariable(name: "written", scope: !528, file: !18, line: 180, type: !207, align: 8)
!543 = !DILocation(line: 180, column: 7, scope: !528, inlinedAt: !525)
!544 = !DILocation(line: 180, column: 27, scope: !528, inlinedAt: !525)
!545 = !DILocation(line: 180, column: 34, scope: !528, inlinedAt: !525)
!546 = !DILocation(line: 180, column: 35, scope: !528, inlinedAt: !525)
!547 = !DILocation(line: 180, column: 17, scope: !528, inlinedAt: !525)
!548 = !DILocation(line: 181, column: 3, scope: !528, inlinedAt: !525)
!549 = !DILocation(line: 181, column: 19, scope: !528, inlinedAt: !525)
!550 = !DILocation(line: 182, column: 7, scope: !528, inlinedAt: !525)
!551 = !DILocation(line: 182, column: 18, scope: !528, inlinedAt: !525)
!552 = !DILocation(line: 182, column: 30, scope: !528, inlinedAt: !525)
!553 = !DILocation(line: 155, column: 7, scope: !512)
!554 = !DILocation(line: 155, column: 39, scope: !512)
!555 = !DILocation(line: 155, column: 27, scope: !512)
!556 = !DILocation(line: 156, column: 7, scope: !512)
!557 = !DILocation(line: 156, column: 39, scope: !512)
!558 = !DILocation(line: 156, column: 27, scope: !512)
!559 = !DILocalVariable(name: "total_copied", scope: !560, file: !18, line: 170, type: !207, align: 8)
!560 = distinct !DISubprogram(name: "copy_through_buffer", linkageName: "copy_through_buffer", scope: !18, file: !18, line: 168, scopeLine: 168, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!561 = !DILocation(line: 170, column: 6, scope: !560, inlinedAt: !562)
!562 = !DILocation(line: 159, column: 11, scope: !512)
!563 = !DILocation(line: 171, column: 2, scope: !560, inlinedAt: !562)
!564 = !DILocalVariable(name: "len", scope: !565, file: !18, line: 173, type: !208, align: 8)
!565 = distinct !DILexicalBlock(scope: !566, file: !18, line: 172, column: 2)
!566 = distinct !DILexicalBlock(scope: !560, file: !18, line: 171, column: 2)
!567 = !DILocation(line: 173, column: 8, scope: !565, inlinedAt: !562)
!568 = !DILocation(line: 173, column: 22, scope: !565, inlinedAt: !562)
!569 = !DILocation(line: 173, column: 14, scope: !565, inlinedAt: !562)
!570 = !DILocalVariable(name: "err", scope: !565, file: !18, line: 174, type: !115, align: 8)
!571 = !DILocation(line: 174, column: 13, scope: !565, inlinedAt: !562)
!572 = !DILocation(line: 174, column: 19, scope: !565, inlinedAt: !562)
!573 = !DILocation(line: 176, column: 8, scope: !574, inlinedAt: !562)
!574 = distinct !DILexicalBlock(scope: !565, file: !18, line: 175, column: 3)
!575 = !DILocation(line: 176, column: 31, scope: !574, inlinedAt: !562)
!576 = !DILocation(line: 177, column: 11, scope: !574, inlinedAt: !562)
!577 = !DILocation(line: 179, column: 7, scope: !565, inlinedAt: !562)
!578 = !DILocation(line: 179, column: 20, scope: !565, inlinedAt: !562)
!579 = !DILocalVariable(name: "written", scope: !565, file: !18, line: 180, type: !207, align: 8)
!580 = !DILocation(line: 180, column: 7, scope: !565, inlinedAt: !562)
!581 = !DILocation(line: 180, column: 27, scope: !565, inlinedAt: !562)
!582 = !DILocation(line: 180, column: 34, scope: !565, inlinedAt: !562)
!583 = !DILocation(line: 180, column: 35, scope: !565, inlinedAt: !562)
!584 = !DILocation(line: 180, column: 17, scope: !565, inlinedAt: !562)
!585 = !DILocation(line: 181, column: 3, scope: !565, inlinedAt: !562)
!586 = !DILocation(line: 181, column: 19, scope: !565, inlinedAt: !562)
!587 = !DILocation(line: 182, column: 7, scope: !565, inlinedAt: !562)
!588 = !DILocation(line: 182, column: 18, scope: !565, inlinedAt: !562)
!589 = !DILocation(line: 182, column: 30, scope: !565, inlinedAt: !562)
!590 = distinct !DISubprogram(name: "wrap_bytes", linkageName: "std.io.wrap_bytes", scope: !18, file: !18, line: 439, type: !591, scopeLine: 439, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!591 = !DISubroutineType(types: !592)
!592 = !{!593, !203}
!593 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteReader", scope: !18, file: !18, line: 3, size: 192, align: 64, elements: !594, identifier: "std.io.ByteReader")
!594 = !{!595, !596}
!595 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !593, file: !18, line: 5, baseType: !203, size: 128, align: 64)
!596 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !593, file: !18, line: 6, baseType: !207, size: 64, align: 64, offset: 128)
!597 = !DILocalVariable(name: "bytes", arg: 1, scope: !590, file: !18, line: 439, type: !203)
!598 = !DILocation(line: 439, column: 33, scope: !590)
!599 = !DILocation(line: 441, column: 11, scope: !590)
!600 = !DILocation(line: 441, column: 18, scope: !590)
!601 = distinct !DISubprogram(name: "adjust", linkageName: "std.io.Formatter.adjust", scope: !25, file: !25, line: 32, type: !602, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!602 = !DISubroutineType(types: !603)
!603 = !{!115, !285, !604, !208}
!604 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Formatter*", baseType: !303, size: 64, align: 64, dwarfAddressSpace: 0)
!605 = !DILocation(line: 33, column: 1, scope: !601)
!606 = !DILocalVariable(name: "self", arg: 1, scope: !601, file: !25, line: 32, type: !604)
!607 = !DILocation(line: 32, column: 26, scope: !601)
!608 = !DILocalVariable(name: "len", arg: 2, scope: !601, file: !25, line: 32, type: !207)
!609 = !DILocation(line: 32, column: 37, scope: !601)
!610 = !DILocation(line: 34, column: 7, scope: !601)
!611 = !DILocation(line: 34, column: 31, scope: !601)
!612 = !DILocation(line: 35, column: 23, scope: !601)
!613 = !DILocation(line: 35, column: 35, scope: !601)
!614 = !DILocation(line: 35, column: 9, scope: !601)
!615 = distinct !DISubprogram(name: "out_substr", linkageName: "std.io.Formatter.out_substr", scope: !25, file: !25, line: 158, type: !616, scopeLine: 158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!616 = !DISubroutineType(types: !617)
!617 = !{!115, !285, !604, !286}
!618 = !DILocation(line: 159, column: 1, scope: !615)
!619 = !DILocalVariable(name: "self", arg: 1, scope: !615, file: !25, line: 158, type: !604)
!620 = !DILocation(line: 158, column: 30, scope: !615)
!621 = !DILocalVariable(name: "str", arg: 2, scope: !615, file: !25, line: 158, type: !286)
!622 = !DILocation(line: 158, column: 44, scope: !615)
!623 = !DILocalVariable(name: "l", scope: !615, file: !25, line: 160, type: !207, align: 8)
!624 = !DILocation(line: 160, column: 6, scope: !615)
!625 = !DILocation(line: 160, column: 32, scope: !615)
!626 = !DILocation(line: 160, column: 10, scope: !615)
!627 = !DILocalVariable(name: "prec", scope: !615, file: !25, line: 161, type: !94, align: 4)
!628 = !DILocation(line: 161, column: 7, scope: !615)
!629 = !DILocation(line: 161, column: 14, scope: !615)
!630 = !DILocation(line: 162, column: 6, scope: !615)
!631 = !DILocation(line: 162, column: 30, scope: !615)
!632 = !DILocation(line: 162, column: 34, scope: !615)
!633 = !DILocation(line: 162, column: 44, scope: !615)
!634 = !DILocalVariable(name: "index", scope: !615, file: !25, line: 163, type: !207, align: 8)
!635 = !DILocation(line: 163, column: 6, scope: !615)
!636 = !DILocation(line: 163, column: 14, scope: !615)
!637 = !DILocalVariable(name: "chars", scope: !615, file: !25, line: 164, type: !207, align: 8)
!638 = !DILocation(line: 164, column: 6, scope: !615)
!639 = !DILocation(line: 164, column: 14, scope: !615)
!640 = !DILocalVariable(name: "ptr", scope: !615, file: !25, line: 165, type: !117, align: 8)
!641 = !DILocation(line: 165, column: 8, scope: !615)
!642 = !DILocation(line: 165, column: 14, scope: !615)
!643 = !DILocation(line: 166, column: 2, scope: !615)
!644 = !DILocation(line: 166, column: 9, scope: !645)
!645 = distinct !DILexicalBlock(scope: !615, file: !25, line: 166, column: 2)
!646 = !DILocation(line: 166, column: 17, scope: !645)
!647 = !DILocalVariable(name: "c", scope: !648, file: !25, line: 168, type: !20, align: 1)
!648 = distinct !DILexicalBlock(scope: !645, file: !25, line: 167, column: 2)
!649 = !DILocation(line: 168, column: 8, scope: !648)
!650 = !DILocation(line: 168, column: 12, scope: !648)
!651 = !DILocation(line: 168, column: 16, scope: !648)
!652 = !DILocation(line: 170, column: 7, scope: !648)
!653 = !DILocation(line: 170, column: 27, scope: !648)
!654 = !DILocation(line: 170, column: 52, scope: !648)
!655 = !DILocation(line: 170, column: 60, scope: !648)
!656 = !DILocation(line: 171, column: 3, scope: !648)
!657 = !DILocation(line: 172, column: 3, scope: !648)
!658 = !DILocation(line: 174, column: 9, scope: !615)
!659 = distinct !DISubprogram(name: "pad", linkageName: "std.io.Formatter.pad", scope: !25, file: !25, line: 177, type: !660, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!660 = !DISubroutineType(types: !661)
!661 = !{!115, !285, !604, !20, !116, !116}
!662 = !DILocation(line: 178, column: 1, scope: !659)
!663 = !DILocalVariable(name: "self", arg: 1, scope: !659, file: !25, line: 177, type: !604)
!664 = !DILocation(line: 177, column: 23, scope: !659)
!665 = !DILocalVariable(name: "c", arg: 2, scope: !659, file: !25, line: 177, type: !20)
!666 = !DILocation(line: 177, column: 35, scope: !659)
!667 = !DILocalVariable(name: "width", arg: 3, scope: !659, file: !25, line: 177, type: !668)
!668 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !116)
!669 = !DILocation(line: 177, column: 42, scope: !659)
!670 = !DILocalVariable(name: "len", arg: 4, scope: !659, file: !25, line: 177, type: !668)
!671 = !DILocation(line: 177, column: 53, scope: !659)
!672 = !DILocalVariable(name: "delta", scope: !659, file: !25, line: 179, type: !668, align: 8)
!673 = !DILocation(line: 179, column: 6, scope: !659)
!674 = !DILocation(line: 179, column: 14, scope: !659)
!675 = !DILocation(line: 179, column: 22, scope: !659)
!676 = !DILocalVariable(name: "i", scope: !677, file: !25, line: 180, type: !668, align: 8)
!677 = distinct !DILexicalBlock(scope: !659, file: !25, line: 180, column: 2)
!678 = !DILocation(line: 180, column: 11, scope: !677)
!679 = !DILocation(line: 180, column: 15, scope: !677)
!680 = !DILocation(line: 180, column: 18, scope: !677)
!681 = !DILocation(line: 180, column: 22, scope: !677)
!682 = !DILocation(line: 180, column: 34, scope: !677)
!683 = !DILocation(line: 180, column: 29, scope: !677)
!684 = !DILocation(line: 47, column: 10, scope: !685, inlinedAt: !687)
!685 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !686, file: !686, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!686 = !DIFile(filename: "builtin_comparison.c3", directory: "/usr/lib/c3c/lib/std/core")
!687 = !DILocation(line: 116, column: 10, scope: !688, inlinedAt: !689)
!688 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !686, file: !686, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!689 = !DILocation(line: 181, column: 9, scope: !659)
!690 = !DILocation(line: 47, column: 14, scope: !685, inlinedAt: !687)
!691 = !DILocation(line: 116, column: 34, scope: !688, inlinedAt: !689)
!692 = !DILocation(line: 116, column: 38, scope: !688, inlinedAt: !689)
!693 = distinct !DISubprogram(name: "out_chars", linkageName: "std.io.Formatter.out_chars", scope: !25, file: !25, line: 191, type: !694, scopeLine: 191, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!694 = !DISubroutineType(types: !695)
!695 = !{!115, !285, !604, !203}
!696 = !DILocation(line: 192, column: 1, scope: !693)
!697 = !DILocalVariable(name: "self", arg: 1, scope: !693, file: !25, line: 191, type: !604)
!698 = !DILocation(line: 191, column: 29, scope: !693)
!699 = !DILocalVariable(name: "s", arg: 2, scope: !693, file: !25, line: 191, type: !203)
!700 = !DILocation(line: 191, column: 43, scope: !693)
!701 = !DILocation(line: 193, column: 15, scope: !702)
!702 = distinct !DILexicalBlock(scope: !693, file: !25, line: 193, column: 2)
!703 = !DILocalVariable(name: ".temp", scope: !702, file: !25, line: 193, type: !207, align: 8)
!704 = !DILocalVariable(name: "c", scope: !705, file: !25, line: 193, type: !20, align: 1)
!705 = distinct !DILexicalBlock(scope: !702, file: !25, line: 193, column: 18)
!706 = !DILocation(line: 193, column: 11, scope: !705)
!707 = !DILocation(line: 193, column: 15, scope: !705)
!708 = !DILocation(line: 193, column: 18, scope: !705)
!709 = !DILocation(line: 194, column: 9, scope: !693)
!710 = distinct !DISubprogram(name: "etoa", linkageName: "std.io.Formatter.etoa", scope: !25, file: !25, line: 205, type: !711, scopeLine: 205, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!711 = !DISubroutineType(types: !712)
!712 = !{!115, !285, !604, !713}
!713 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!714 = !DILocation(line: 205, column: 44, scope: !710)
!715 = !DILocalVariable(name: "self", arg: 1, scope: !710, file: !25, line: 205, type: !604)
!716 = !DILocation(line: 205, column: 24, scope: !710)
!717 = !DILocalVariable(name: "y", arg: 2, scope: !710, file: !25, line: 205, type: !713)
!718 = !DILocation(line: 205, column: 38, scope: !710)
!719 = distinct !DISubprogram(name: "ftoa", linkageName: "std.io.Formatter.ftoa", scope: !25, file: !25, line: 206, type: !711, scopeLine: 206, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!720 = !DILocation(line: 206, column: 44, scope: !719)
!721 = !DILocalVariable(name: "self", arg: 1, scope: !719, file: !25, line: 206, type: !604)
!722 = !DILocation(line: 206, column: 24, scope: !719)
!723 = !DILocalVariable(name: "y", arg: 2, scope: !719, file: !25, line: 206, type: !713)
!724 = !DILocation(line: 206, column: 38, scope: !719)
!725 = distinct !DISubprogram(name: "gtoa", linkageName: "std.io.Formatter.gtoa", scope: !25, file: !25, line: 207, type: !711, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!726 = !DILocation(line: 207, column: 44, scope: !725)
!727 = !DILocalVariable(name: "self", arg: 1, scope: !725, file: !25, line: 207, type: !604)
!728 = !DILocation(line: 207, column: 24, scope: !725)
!729 = !DILocalVariable(name: "y", arg: 2, scope: !725, file: !25, line: 207, type: !713)
!730 = !DILocation(line: 207, column: 38, scope: !725)
!731 = distinct !DISubprogram(name: "atoa", linkageName: "std.io.Formatter.atoa", scope: !25, file: !25, line: 208, type: !711, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!732 = !DILocation(line: 208, column: 44, scope: !731)
!733 = !DILocalVariable(name: "self", arg: 1, scope: !731, file: !25, line: 208, type: !604)
!734 = !DILocation(line: 208, column: 24, scope: !731)
!735 = !DILocalVariable(name: "y", arg: 2, scope: !731, file: !25, line: 208, type: !713)
!736 = !DILocation(line: 208, column: 38, scope: !731)
!737 = distinct !DISubprogram(name: "floatformat", linkageName: "std.io.Formatter.floatformat", scope: !25, file: !25, line: 210, type: !738, scopeLine: 210, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!738 = !DISubroutineType(types: !739)
!739 = !{!115, !285, !604, !46, !713}
!740 = !DILocation(line: 211, column: 1, scope: !737)
!741 = !DILocalVariable(name: "self", arg: 1, scope: !737, file: !25, line: 210, type: !604)
!742 = !DILocation(line: 210, column: 31, scope: !737)
!743 = !DILocalVariable(name: "formatting", arg: 2, scope: !737, file: !25, line: 210, type: !46)
!744 = !DILocation(line: 210, column: 54, scope: !737)
!745 = !DILocalVariable(name: "y", arg: 3, scope: !737, file: !25, line: 210, type: !713)
!746 = !DILocation(line: 210, column: 73, scope: !737)
!747 = !DILocalVariable(name: "big", scope: !737, file: !25, line: 215, type: !748, align: 16)
!748 = !DICompositeType(tag: DW_TAG_array_type, baseType: !94, size: 4032, align: 32, elements: !749)
!749 = !{!750}
!750 = !DISubrange(count: 126, lowerBound: 0)
!751 = !DILocation(line: 215, column: 17, scope: !737)
!752 = !DILocalVariable(name: "is_neg", scope: !737, file: !25, line: 216, type: !753, align: 1)
!753 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!754 = !DILocation(line: 216, column: 7, scope: !737)
!755 = !DILocation(line: 216, column: 16, scope: !737)
!756 = !DILocation(line: 254, column: 20, scope: !757, inlinedAt: !758)
!757 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !215, file: !215, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!758 = !DILocation(line: 432, column: 16, scope: !759, inlinedAt: !761)
!759 = distinct !DISubprogram(name: "signbit", linkageName: "signbit", scope: !760, file: !760, line: 425, scopeLine: 425, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!760 = !DIFile(filename: "math.c3", directory: "/usr/lib/c3c/lib/std/math")
!761 = !DILocation(line: 217, column: 6, scope: !737)
!762 = !DILocation(line: 254, column: 11, scope: !757, inlinedAt: !758)
!763 = !DILocation(line: 432, column: 10, scope: !759, inlinedAt: !761)
!764 = !DILocation(line: 219, column: 12, scope: !765)
!765 = distinct !DILexicalBlock(scope: !737, file: !25, line: 218, column: 2)
!766 = !DILocation(line: 220, column: 8, scope: !765)
!767 = !DILocalVariable(name: "pl", scope: !737, file: !25, line: 222, type: !668, align: 8)
!768 = !DILocation(line: 222, column: 6, scope: !737)
!769 = !DILocation(line: 222, column: 11, scope: !737)
!770 = !DILocation(line: 222, column: 21, scope: !737)
!771 = !DILocation(line: 222, column: 43, scope: !737)
!772 = !DILocation(line: 254, column: 20, scope: !773, inlinedAt: !774)
!773 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !215, file: !215, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!774 = !DILocation(line: 517, column: 11, scope: !775, inlinedAt: !776)
!775 = distinct !DISubprogram(name: "is_finite", linkageName: "is_finite", scope: !760, file: !760, line: 510, scopeLine: 510, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!776 = !DILocation(line: 224, column: 7, scope: !737)
!777 = !DILocation(line: 254, column: 11, scope: !773, inlinedAt: !774)
!778 = !DILocalVariable(name: "len", scope: !779, file: !25, line: 226, type: !207, align: 8)
!779 = distinct !DILexicalBlock(scope: !737, file: !25, line: 225, column: 2)
!780 = !DILocation(line: 226, column: 7, scope: !779)
!781 = !DILocation(line: 228, column: 8, scope: !779)
!782 = !DILocation(line: 228, column: 25, scope: !779)
!783 = !DILocation(line: 228, column: 46, scope: !779)
!784 = !DILocation(line: 228, column: 62, scope: !779)
!785 = !DILocation(line: 228, column: 58, scope: !779)
!786 = !DILocation(line: 228, column: 32, scope: !779)
!787 = !DILocalVariable(name: "s", scope: !779, file: !25, line: 229, type: !286, align: 8)
!788 = !DILocation(line: 229, column: 10, scope: !779)
!789 = !DILocation(line: 229, column: 14, scope: !779)
!790 = !DILocation(line: 229, column: 45, scope: !779)
!791 = !DILocation(line: 254, column: 20, scope: !792, inlinedAt: !793)
!792 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !215, file: !215, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!793 = !DILocation(line: 531, column: 10, scope: !794, inlinedAt: !795)
!794 = distinct !DISubprogram(name: "is_nan", linkageName: "is_nan", scope: !760, file: !760, line: 524, scopeLine: 524, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!795 = !DILocation(line: 230, column: 7, scope: !779)
!796 = !DILocation(line: 254, column: 11, scope: !792, inlinedAt: !793)
!797 = !DILocation(line: 230, column: 28, scope: !779)
!798 = !DILocation(line: 230, column: 59, scope: !779)
!799 = !DILocation(line: 231, column: 7, scope: !779)
!800 = !DILocation(line: 231, column: 11, scope: !779)
!801 = !DILocation(line: 231, column: 27, scope: !779)
!802 = !DILocation(line: 231, column: 42, scope: !779)
!803 = !DILocation(line: 231, column: 18, scope: !779)
!804 = !DILocation(line: 232, column: 3, scope: !779)
!805 = !DILocation(line: 232, column: 10, scope: !779)
!806 = !DILocation(line: 233, column: 7, scope: !779)
!807 = !DILocation(line: 233, column: 24, scope: !779)
!808 = !DILocation(line: 233, column: 45, scope: !779)
!809 = !DILocation(line: 233, column: 61, scope: !779)
!810 = !DILocation(line: 233, column: 57, scope: !779)
!811 = !DILocation(line: 233, column: 31, scope: !779)
!812 = !DILocation(line: 234, column: 10, scope: !779)
!813 = !DILocalVariable(name: "e2", scope: !737, file: !25, line: 237, type: !3, align: 4)
!814 = !DILocation(line: 237, column: 6, scope: !737)
!815 = !DILocation(line: 418, column: 28, scope: !816, inlinedAt: !817)
!816 = distinct !DISubprogram(name: "frexp", linkageName: "frexp", scope: !760, file: !760, line: 411, scopeLine: 411, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!817 = !DILocation(line: 239, column: 6, scope: !737)
!818 = !DILocation(line: 418, column: 10, scope: !816, inlinedAt: !817)
!819 = !DILocation(line: 240, column: 6, scope: !737)
!820 = !DILocation(line: 240, column: 9, scope: !737)
!821 = !DILocalVariable(name: "ebuf0", scope: !737, file: !25, line: 241, type: !822, align: 1)
!822 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 96, align: 8, elements: !823)
!823 = !{!824}
!824 = !DISubrange(count: 12, lowerBound: 0)
!825 = !DILocation(line: 241, column: 11, scope: !737)
!826 = !DILocalVariable(name: "ebuf", scope: !737, file: !25, line: 242, type: !117, align: 8)
!827 = !DILocation(line: 242, column: 8, scope: !737)
!828 = !DILocation(line: 242, column: 15, scope: !737)
!829 = !DILocalVariable(name: "buf_array", scope: !737, file: !25, line: 243, type: !830, align: 16)
!830 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 176, align: 8, elements: !831)
!831 = !{!832}
!832 = !DISubrange(count: 22, lowerBound: 0)
!833 = !DILocation(line: 243, column: 38, scope: !737)
!834 = !DILocalVariable(name: "buf", scope: !737, file: !25, line: 244, type: !117, align: 8)
!835 = !DILocation(line: 244, column: 8, scope: !737)
!836 = !DILocation(line: 244, column: 15, scope: !737)
!837 = !DILocalVariable(name: "p", scope: !737, file: !25, line: 245, type: !668, align: 8)
!838 = !DILocation(line: 245, column: 6, scope: !737)
!839 = !DILocation(line: 245, column: 10, scope: !737)
!840 = !DILocation(line: 245, column: 33, scope: !737)
!841 = !DILocation(line: 245, column: 45, scope: !737)
!842 = !DILocation(line: 246, column: 6, scope: !737)
!843 = !DILocalVariable(name: "round", scope: !844, file: !25, line: 248, type: !713, align: 8)
!844 = distinct !DILexicalBlock(scope: !737, file: !25, line: 247, column: 2)
!845 = !DILocation(line: 248, column: 10, scope: !844)
!846 = !DILocation(line: 248, column: 18, scope: !844)
!847 = !DILocation(line: 250, column: 3, scope: !844)
!848 = !DILocation(line: 251, column: 7, scope: !844)
!849 = !DILocation(line: 251, column: 16, scope: !844)
!850 = !DILocalVariable(name: "re", scope: !851, file: !25, line: 253, type: !3, align: 4)
!851 = distinct !DILexicalBlock(scope: !844, file: !25, line: 252, column: 3)
!852 = !DILocation(line: 253, column: 8, scope: !851)
!853 = !DILocation(line: 253, column: 45, scope: !851)
!854 = !DILocation(line: 253, column: 13, scope: !851)
!855 = !DILocation(line: 254, column: 4, scope: !851)
!856 = !DILocation(line: 255, column: 4, scope: !851)
!857 = !DILocation(line: 255, column: 11, scope: !858)
!858 = distinct !DILexicalBlock(scope: !851, file: !25, line: 255, column: 4)
!859 = !DILocation(line: 255, column: 17, scope: !858)
!860 = !DILocation(line: 256, column: 8, scope: !851)
!861 = !DILocation(line: 258, column: 10, scope: !862)
!862 = distinct !DILexicalBlock(scope: !851, file: !25, line: 257, column: 4)
!863 = !DILocation(line: 259, column: 5, scope: !862)
!864 = !DILocation(line: 259, column: 10, scope: !862)
!865 = !DILocation(line: 260, column: 5, scope: !862)
!866 = !DILocation(line: 260, column: 10, scope: !862)
!867 = !DILocation(line: 261, column: 10, scope: !862)
!868 = !DILocation(line: 265, column: 5, scope: !869)
!869 = distinct !DILexicalBlock(scope: !851, file: !25, line: 264, column: 4)
!870 = !DILocation(line: 265, column: 10, scope: !869)
!871 = !DILocation(line: 266, column: 5, scope: !869)
!872 = !DILocation(line: 266, column: 10, scope: !869)
!873 = !DILocalVariable(name: "estr", scope: !844, file: !25, line: 270, type: !117, align: 8)
!874 = !DILocation(line: 270, column: 9, scope: !844)
!875 = !DILocation(line: 270, column: 22, scope: !844)
!876 = !DILocation(line: 270, column: 40, scope: !844)
!877 = !DILocation(line: 270, column: 45, scope: !844)
!878 = !DILocation(line: 270, column: 16, scope: !844)
!879 = !DILocation(line: 271, column: 7, scope: !844)
!880 = !DILocation(line: 271, column: 15, scope: !844)
!881 = !DILocation(line: 271, column: 24, scope: !844)
!882 = !DILocation(line: 271, column: 31, scope: !844)
!883 = !DILocation(line: 272, column: 6, scope: !844)
!884 = !DILocation(line: 272, column: 14, scope: !844)
!885 = !DILocation(line: 272, column: 29, scope: !844)
!886 = !DILocation(line: 273, column: 6, scope: !844)
!887 = !DILocation(line: 273, column: 13, scope: !844)
!888 = !DILocation(line: 273, column: 42, scope: !844)
!889 = !DILocalVariable(name: "s", scope: !844, file: !25, line: 274, type: !117, align: 8)
!890 = !DILocation(line: 274, column: 9, scope: !844)
!891 = !DILocation(line: 274, column: 13, scope: !844)
!892 = !DILocalVariable(name: "xdigits", scope: !844, file: !25, line: 275, type: !117, align: 8)
!893 = !DILocation(line: 275, column: 9, scope: !844)
!894 = !DILocation(line: 275, column: 19, scope: !844)
!895 = !DILocation(line: 275, column: 55, scope: !844)
!896 = !DILocation(line: 276, column: 3, scope: !844)
!897 = !DILocation(line: 282, column: 12, scope: !898)
!898 = distinct !DILexicalBlock(scope: !844, file: !25, line: 276, column: 3)
!899 = !DILocalVariable(name: "x", scope: !900, file: !25, line: 278, type: !3, align: 4)
!900 = distinct !DILexicalBlock(scope: !898, file: !25, line: 277, column: 3)
!901 = !DILocation(line: 278, column: 8, scope: !900)
!902 = !DILocation(line: 278, column: 12, scope: !900)
!903 = !DILocation(line: 279, column: 5, scope: !900)
!904 = !DILocation(line: 279, column: 11, scope: !900)
!905 = !DILocation(line: 279, column: 19, scope: !900)
!906 = !DILocation(line: 280, column: 14, scope: !900)
!907 = !DILocation(line: 280, column: 18, scope: !900)
!908 = !DILocation(line: 280, column: 8, scope: !900)
!909 = !DILocation(line: 281, column: 8, scope: !900)
!910 = !DILocation(line: 281, column: 12, scope: !900)
!911 = !DILocation(line: 281, column: 25, scope: !900)
!912 = !DILocation(line: 281, column: 30, scope: !900)
!913 = !DILocation(line: 281, column: 39, scope: !900)
!914 = !DILocation(line: 281, column: 58, scope: !900)
!915 = !DILocation(line: 281, column: 64, scope: !900)
!916 = !DILocalVariable(name: "outlen", scope: !844, file: !25, line: 283, type: !668, align: 8)
!917 = !DILocation(line: 283, column: 7, scope: !844)
!918 = !DILocation(line: 283, column: 16, scope: !844)
!919 = !DILocation(line: 283, column: 20, scope: !844)
!920 = !DILocalVariable(name: "explen", scope: !844, file: !25, line: 284, type: !668, align: 8)
!921 = !DILocation(line: 284, column: 7, scope: !844)
!922 = !DILocation(line: 284, column: 16, scope: !844)
!923 = !DILocation(line: 284, column: 23, scope: !844)
!924 = !DILocation(line: 285, column: 7, scope: !844)
!925 = !DILocation(line: 285, column: 25, scope: !844)
!926 = !DILocation(line: 285, column: 11, scope: !844)
!927 = !DILocation(line: 285, column: 34, scope: !844)
!928 = !DILocation(line: 285, column: 45, scope: !844)
!929 = !DILocalVariable(name: "len", scope: !844, file: !25, line: 286, type: !207, align: 8)
!930 = !DILocation(line: 286, column: 7, scope: !844)
!931 = !DILocalVariable(name: "l", scope: !844, file: !25, line: 287, type: !207, align: 8)
!932 = !DILocation(line: 287, column: 7, scope: !844)
!933 = !DILocation(line: 287, column: 11, scope: !844)
!934 = !DILocation(line: 287, column: 16, scope: !844)
!935 = !DILocation(line: 287, column: 29, scope: !844)
!936 = !DILocation(line: 288, column: 7, scope: !844)
!937 = !DILocation(line: 288, column: 15, scope: !844)
!938 = !DILocation(line: 289, column: 7, scope: !844)
!939 = !DILocation(line: 289, column: 16, scope: !844)
!940 = !DILocation(line: 290, column: 8, scope: !844)
!941 = !DILocation(line: 290, column: 28, scope: !844)
!942 = !DILocation(line: 290, column: 48, scope: !844)
!943 = !DILocation(line: 290, column: 69, scope: !844)
!944 = !DILocation(line: 290, column: 81, scope: !844)
!945 = !DILocation(line: 290, column: 86, scope: !844)
!946 = !DILocation(line: 290, column: 55, scope: !844)
!947 = !DILocation(line: 291, column: 7, scope: !844)
!948 = !DILocation(line: 291, column: 17, scope: !844)
!949 = !DILocation(line: 291, column: 34, scope: !844)
!950 = !DILocation(line: 291, column: 50, scope: !844)
!951 = !DILocation(line: 291, column: 65, scope: !844)
!952 = !DILocation(line: 291, column: 41, scope: !844)
!953 = !DILocation(line: 292, column: 3, scope: !844)
!954 = !DILocation(line: 292, column: 25, scope: !844)
!955 = !DILocation(line: 292, column: 55, scope: !844)
!956 = !DILocation(line: 292, column: 10, scope: !844)
!957 = !DILocation(line: 293, column: 7, scope: !844)
!958 = !DILocation(line: 293, column: 27, scope: !844)
!959 = !DILocation(line: 293, column: 48, scope: !844)
!960 = !DILocation(line: 293, column: 60, scope: !844)
!961 = !DILocation(line: 293, column: 65, scope: !844)
!962 = !DILocation(line: 293, column: 34, scope: !844)
!963 = !DILocation(line: 294, column: 3, scope: !844)
!964 = !DILocation(line: 294, column: 25, scope: !844)
!965 = !DILocation(line: 294, column: 30, scope: !844)
!966 = !DILocation(line: 294, column: 10, scope: !844)
!967 = !DILocation(line: 295, column: 3, scope: !844)
!968 = !DILocation(line: 295, column: 24, scope: !844)
!969 = !DILocation(line: 295, column: 28, scope: !844)
!970 = !DILocation(line: 295, column: 37, scope: !844)
!971 = !DILocation(line: 295, column: 10, scope: !844)
!972 = !DILocation(line: 296, column: 3, scope: !844)
!973 = !DILocation(line: 296, column: 25, scope: !844)
!974 = !DILocation(line: 296, column: 31, scope: !844)
!975 = !DILocation(line: 296, column: 10, scope: !844)
!976 = !DILocation(line: 297, column: 7, scope: !844)
!977 = !DILocation(line: 297, column: 24, scope: !844)
!978 = !DILocation(line: 297, column: 45, scope: !844)
!979 = !DILocation(line: 297, column: 57, scope: !844)
!980 = !DILocation(line: 297, column: 62, scope: !844)
!981 = !DILocation(line: 297, column: 31, scope: !844)
!982 = !DILocation(line: 298, column: 10, scope: !844)
!983 = !DILocation(line: 300, column: 6, scope: !737)
!984 = !DILocation(line: 300, column: 17, scope: !737)
!985 = !DILocation(line: 301, column: 6, scope: !737)
!986 = !DILocation(line: 303, column: 3, scope: !987)
!987 = distinct !DILexicalBlock(scope: !737, file: !25, line: 302, column: 2)
!988 = !DILocation(line: 304, column: 3, scope: !987)
!989 = !DILocalVariable(name: "a", scope: !737, file: !25, line: 307, type: !990, align: 8)
!990 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !94, size: 64, align: 64, dwarfAddressSpace: 0)
!991 = !DILocation(line: 307, column: 8, scope: !737)
!992 = !DILocalVariable(name: "z", scope: !737, file: !25, line: 307, type: !990, align: 8)
!993 = !DILocation(line: 307, column: 11, scope: !737)
!994 = !DILocalVariable(name: "r", scope: !737, file: !25, line: 307, type: !990, align: 8)
!995 = !DILocation(line: 307, column: 14, scope: !737)
!996 = !DILocation(line: 308, column: 6, scope: !737)
!997 = !DILocation(line: 310, column: 16, scope: !998)
!998 = distinct !DILexicalBlock(scope: !737, file: !25, line: 309, column: 2)
!999 = !DILocation(line: 314, column: 15, scope: !1000)
!1000 = distinct !DILexicalBlock(scope: !737, file: !25, line: 313, column: 2)
!1001 = !DILocation(line: 317, column: 2, scope: !737)
!1002 = !DILocation(line: 321, column: 11, scope: !1003)
!1003 = distinct !DILexicalBlock(scope: !737, file: !25, line: 317, column: 2)
!1004 = !DILocalVariable(name: "v", scope: !1005, file: !25, line: 319, type: !94, align: 4)
!1005 = distinct !DILexicalBlock(scope: !1003, file: !25, line: 318, column: 2)
!1006 = !DILocation(line: 319, column: 8, scope: !1005)
!1007 = !DILocation(line: 319, column: 12, scope: !1005)
!1008 = !DILocation(line: 319, column: 21, scope: !1005)
!1009 = !DILocation(line: 320, column: 21, scope: !1005)
!1010 = !DILocation(line: 320, column: 25, scope: !1005)
!1011 = !DILocation(line: 320, column: 7, scope: !1005)
!1012 = !DILocation(line: 323, column: 2, scope: !737)
!1013 = !DILocation(line: 323, column: 9, scope: !1014)
!1014 = distinct !DILexicalBlock(scope: !737, file: !25, line: 323, column: 2)
!1015 = !DILocalVariable(name: "carry", scope: !1016, file: !25, line: 325, type: !94, align: 4)
!1016 = distinct !DILexicalBlock(scope: !1014, file: !25, line: 324, column: 2)
!1017 = !DILocation(line: 325, column: 8, scope: !1016)
!1018 = !DILocation(line: 325, column: 16, scope: !1016)
!1019 = !DILocalVariable(name: "sh", scope: !1016, file: !25, line: 326, type: !3, align: 4)
!1020 = !DILocation(line: 326, column: 7, scope: !1016)
!1021 = !DILocation(line: 374, column: 16, scope: !1022, inlinedAt: !1023)
!1022 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !760, file: !760, line: 371, scopeLine: 371, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1023 = !DILocation(line: 326, column: 12, scope: !1016)
!1024 = !DILocation(line: 374, column: 19, scope: !1022, inlinedAt: !1023)
!1025 = !DILocalVariable(name: "d", scope: !1026, file: !25, line: 327, type: !990, align: 8)
!1026 = distinct !DILexicalBlock(scope: !1016, file: !25, line: 327, column: 3)
!1027 = !DILocation(line: 327, column: 14, scope: !1026)
!1028 = !DILocation(line: 327, column: 18, scope: !1026)
!1029 = !DILocation(line: 327, column: 22, scope: !1026)
!1030 = !DILocation(line: 327, column: 25, scope: !1026)
!1031 = !DILocation(line: 327, column: 30, scope: !1026)
!1032 = !DILocalVariable(name: "x", scope: !1033, file: !25, line: 329, type: !208, align: 8)
!1033 = distinct !DILexicalBlock(scope: !1026, file: !25, line: 328, column: 3)
!1034 = !DILocation(line: 329, column: 10, scope: !1033)
!1035 = !DILocation(line: 329, column: 22, scope: !1033)
!1036 = !DILocation(line: 329, column: 27, scope: !1033)
!1037 = !DILocation(line: 329, column: 14, scope: !1033)
!1038 = !DILocation(line: 329, column: 32, scope: !1033)
!1039 = !DILocation(line: 330, column: 5, scope: !1033)
!1040 = !DILocation(line: 330, column: 16, scope: !1033)
!1041 = !DILocation(line: 330, column: 9, scope: !1033)
!1042 = !DILocation(line: 331, column: 19, scope: !1033)
!1043 = !DILocation(line: 331, column: 12, scope: !1033)
!1044 = !DILocation(line: 327, column: 33, scope: !1026)
!1045 = !DILocation(line: 333, column: 7, scope: !1016)
!1046 = !DILocation(line: 333, column: 17, scope: !1016)
!1047 = !DILocation(line: 333, column: 15, scope: !1016)
!1048 = !DILocation(line: 333, column: 21, scope: !1016)
!1049 = !DILocation(line: 334, column: 3, scope: !1016)
!1050 = !DILocation(line: 334, column: 10, scope: !1051)
!1051 = distinct !DILexicalBlock(scope: !1016, file: !25, line: 334, column: 3)
!1052 = !DILocation(line: 334, column: 14, scope: !1051)
!1053 = !DILocation(line: 334, column: 20, scope: !1051)
!1054 = !DILocation(line: 334, column: 22, scope: !1051)
!1055 = !DILocation(line: 334, column: 27, scope: !1051)
!1056 = !DILocation(line: 335, column: 3, scope: !1016)
!1057 = !DILocation(line: 335, column: 9, scope: !1016)
!1058 = !DILocation(line: 338, column: 2, scope: !737)
!1059 = !DILocation(line: 338, column: 9, scope: !1060)
!1060 = distinct !DILexicalBlock(scope: !737, file: !25, line: 338, column: 2)
!1061 = !DILocalVariable(name: "carry", scope: !1062, file: !25, line: 340, type: !94, align: 4)
!1062 = distinct !DILexicalBlock(scope: !1060, file: !25, line: 339, column: 2)
!1063 = !DILocation(line: 340, column: 8, scope: !1062)
!1064 = !DILocation(line: 340, column: 16, scope: !1062)
!1065 = !DILocalVariable(name: "b", scope: !1062, file: !25, line: 341, type: !990, align: 8)
!1066 = !DILocation(line: 341, column: 9, scope: !1062)
!1067 = !DILocalVariable(name: "sh", scope: !1062, file: !25, line: 342, type: !3, align: 4)
!1068 = !DILocation(line: 342, column: 7, scope: !1062)
!1069 = !DILocation(line: 342, column: 26, scope: !1062)
!1070 = !DILocation(line: 374, column: 16, scope: !1071, inlinedAt: !1072)
!1071 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !760, file: !760, line: 371, scopeLine: 371, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1072 = !DILocation(line: 342, column: 12, scope: !1062)
!1073 = !DILocation(line: 374, column: 19, scope: !1071, inlinedAt: !1072)
!1074 = !DILocalVariable(name: "need", scope: !1062, file: !25, line: 343, type: !3, align: 4)
!1075 = !DILocation(line: 343, column: 7, scope: !1062)
!1076 = !DILocation(line: 343, column: 25, scope: !1062)
!1077 = !DILocation(line: 343, column: 14, scope: !1062)
!1078 = !DILocalVariable(name: "d", scope: !1079, file: !25, line: 344, type: !990, align: 8)
!1079 = distinct !DILexicalBlock(scope: !1062, file: !25, line: 344, column: 3)
!1080 = !DILocation(line: 344, column: 14, scope: !1079)
!1081 = !DILocation(line: 344, column: 18, scope: !1079)
!1082 = !DILocation(line: 344, column: 21, scope: !1079)
!1083 = !DILocation(line: 344, column: 25, scope: !1079)
!1084 = !DILocalVariable(name: "rm", scope: !1085, file: !25, line: 347, type: !94, align: 4)
!1085 = distinct !DILexicalBlock(scope: !1079, file: !25, line: 345, column: 3)
!1086 = !DILocation(line: 347, column: 9, scope: !1085)
!1087 = !DILocation(line: 347, column: 15, scope: !1085)
!1088 = !DILocation(line: 347, column: 26, scope: !1085)
!1089 = !DILocation(line: 347, column: 21, scope: !1085)
!1090 = !DILocation(line: 347, column: 14, scope: !1085)
!1091 = !DILocation(line: 348, column: 5, scope: !1085)
!1092 = !DILocation(line: 348, column: 11, scope: !1085)
!1093 = !DILocation(line: 348, column: 16, scope: !1085)
!1094 = !DILocation(line: 348, column: 10, scope: !1085)
!1095 = !DILocation(line: 348, column: 22, scope: !1085)
!1096 = !DILocation(line: 349, column: 27, scope: !1085)
!1097 = !DILocation(line: 349, column: 13, scope: !1085)
!1098 = !DILocation(line: 349, column: 33, scope: !1085)
!1099 = !DILocation(line: 344, column: 28, scope: !1079)
!1100 = !DILocation(line: 351, column: 8, scope: !1062)
!1101 = !DILocation(line: 351, column: 10, scope: !1062)
!1102 = !DILocation(line: 351, column: 14, scope: !1062)
!1103 = !DILocation(line: 352, column: 7, scope: !1062)
!1104 = !DILocation(line: 352, column: 14, scope: !1062)
!1105 = !DILocation(line: 352, column: 23, scope: !1062)
!1106 = !DILocation(line: 354, column: 7, scope: !1062)
!1107 = !DILocation(line: 354, column: 29, scope: !1062)
!1108 = !DILocation(line: 354, column: 33, scope: !1062)
!1109 = !DILocation(line: 355, column: 7, scope: !1062)
!1110 = !DILocation(line: 355, column: 11, scope: !1062)
!1111 = !DILocation(line: 355, column: 15, scope: !1062)
!1112 = !DILocation(line: 355, column: 25, scope: !1062)
!1113 = !DILocation(line: 355, column: 29, scope: !1062)
!1114 = !DILocation(line: 356, column: 3, scope: !1062)
!1115 = !DILocation(line: 356, column: 9, scope: !1062)
!1116 = !DILocalVariable(name: "e", scope: !737, file: !25, line: 359, type: !3, align: 4)
!1117 = !DILocation(line: 359, column: 6, scope: !737)
!1118 = !DILocation(line: 360, column: 6, scope: !737)
!1119 = !DILocation(line: 360, column: 10, scope: !737)
!1120 = !DILocalVariable(name: "i", scope: !1121, file: !25, line: 362, type: !3, align: 4)
!1121 = distinct !DILexicalBlock(scope: !1122, file: !25, line: 362, column: 3)
!1122 = distinct !DILexicalBlock(scope: !737, file: !25, line: 361, column: 2)
!1123 = !DILocation(line: 362, column: 12, scope: !1121)
!1124 = !DILocation(line: 362, column: 16, scope: !1121)
!1125 = !DILocation(line: 362, column: 35, scope: !1121)
!1126 = !DILocation(line: 362, column: 39, scope: !1121)
!1127 = !DILocation(line: 362, column: 24, scope: !1121)
!1128 = !DILocation(line: 362, column: 45, scope: !1121)
!1129 = !DILocation(line: 362, column: 50, scope: !1121)
!1130 = !DILocation(line: 362, column: 44, scope: !1121)
!1131 = !DILocation(line: 362, column: 53, scope: !1121)
!1132 = !DILocation(line: 362, column: 62, scope: !1121)
!1133 = !DILocalVariable(name: "j", scope: !737, file: !25, line: 366, type: !3, align: 4)
!1134 = !DILocation(line: 366, column: 6, scope: !737)
!1135 = !DILocation(line: 366, column: 16, scope: !737)
!1136 = !DILocation(line: 366, column: 26, scope: !737)
!1137 = !DILocation(line: 366, column: 48, scope: !737)
!1138 = !DILocation(line: 366, column: 52, scope: !737)
!1139 = !DILocation(line: 366, column: 62, scope: !737)
!1140 = !DILocation(line: 366, column: 88, scope: !737)
!1141 = !DILocation(line: 366, column: 10, scope: !737)
!1142 = !DILocation(line: 367, column: 6, scope: !737)
!1143 = !DILocation(line: 367, column: 15, scope: !737)
!1144 = !DILocation(line: 367, column: 19, scope: !737)
!1145 = !DILocation(line: 367, column: 10, scope: !737)
!1146 = !DILocalVariable(name: "x", scope: !1147, file: !25, line: 369, type: !94, align: 4)
!1147 = distinct !DILexicalBlock(scope: !737, file: !25, line: 368, column: 2)
!1148 = !DILocation(line: 369, column: 8, scope: !1147)
!1149 = !DILocalVariable(name: "d", scope: !1147, file: !25, line: 371, type: !990, align: 8)
!1150 = !DILocation(line: 371, column: 9, scope: !1147)
!1151 = !DILocation(line: 371, column: 13, scope: !1147)
!1152 = !DILocation(line: 371, column: 23, scope: !1147)
!1153 = !DILocation(line: 372, column: 3, scope: !1147)
!1154 = !DILocation(line: 373, column: 3, scope: !1147)
!1155 = !DILocalVariable(name: "i", scope: !1147, file: !25, line: 374, type: !3, align: 4)
!1156 = !DILocation(line: 374, column: 7, scope: !1147)
!1157 = !DILocation(line: 375, column: 12, scope: !1158)
!1158 = distinct !DILexicalBlock(scope: !1147, file: !25, line: 375, column: 3)
!1159 = !DILocation(line: 375, column: 16, scope: !1158)
!1160 = !DILocation(line: 375, column: 21, scope: !1158)
!1161 = !DILocation(line: 375, column: 28, scope: !1158)
!1162 = !DILocation(line: 375, column: 37, scope: !1158)
!1163 = !DILocation(line: 376, column: 8, scope: !1147)
!1164 = !DILocation(line: 376, column: 12, scope: !1147)
!1165 = !DILocation(line: 376, column: 7, scope: !1147)
!1166 = !DILocation(line: 378, column: 7, scope: !1147)
!1167 = !DILocation(line: 378, column: 13, scope: !1147)
!1168 = !DILocation(line: 378, column: 17, scope: !1147)
!1169 = !DILocation(line: 378, column: 23, scope: !1147)
!1170 = !DILocalVariable(name: "round", scope: !1171, file: !25, line: 380, type: !713, align: 8)
!1171 = distinct !DILexicalBlock(scope: !1147, file: !25, line: 379, column: 3)
!1172 = !DILocation(line: 380, column: 11, scope: !1171)
!1173 = !DILocation(line: 380, column: 19, scope: !1171)
!1174 = !DILocalVariable(name: "small", scope: !1171, file: !25, line: 381, type: !713, align: 8)
!1175 = !DILocation(line: 381, column: 11, scope: !1171)
!1176 = !DILocation(line: 382, column: 11, scope: !1171)
!1177 = !DILocation(line: 382, column: 15, scope: !1171)
!1178 = !DILocation(line: 382, column: 10, scope: !1171)
!1179 = !DILocation(line: 382, column: 27, scope: !1171)
!1180 = !DILocation(line: 382, column: 46, scope: !1171)
!1181 = !DILocation(line: 382, column: 50, scope: !1171)
!1182 = !DILocation(line: 382, column: 56, scope: !1171)
!1183 = !DILocation(line: 382, column: 58, scope: !1171)
!1184 = !DILocation(line: 384, column: 5, scope: !1185)
!1185 = distinct !DILexicalBlock(scope: !1171, file: !25, line: 383, column: 4)
!1186 = !DILocation(line: 388, column: 10, scope: !1187)
!1187 = distinct !DILexicalBlock(scope: !1171, file: !25, line: 386, column: 4)
!1188 = !DILocation(line: 388, column: 14, scope: !1187)
!1189 = !DILocation(line: 389, column: 14, scope: !1190)
!1190 = distinct !DILexicalBlock(scope: !1187, file: !25, line: 389, column: 6)
!1191 = !DILocation(line: 390, column: 10, scope: !1187)
!1192 = !DILocation(line: 390, column: 15, scope: !1187)
!1193 = !DILocation(line: 390, column: 24, scope: !1187)
!1194 = !DILocation(line: 390, column: 28, scope: !1187)
!1195 = !DILocation(line: 390, column: 33, scope: !1187)
!1196 = !DILocation(line: 391, column: 14, scope: !1197)
!1197 = distinct !DILexicalBlock(scope: !1187, file: !25, line: 391, column: 6)
!1198 = !DILocation(line: 393, column: 14, scope: !1199)
!1199 = distinct !DILexicalBlock(scope: !1187, file: !25, line: 393, column: 6)
!1200 = !DILocation(line: 395, column: 8, scope: !1171)
!1201 = !DILocation(line: 395, column: 14, scope: !1171)
!1202 = !DILocation(line: 397, column: 5, scope: !1203)
!1203 = distinct !DILexicalBlock(scope: !1171, file: !25, line: 396, column: 4)
!1204 = !DILocation(line: 398, column: 5, scope: !1203)
!1205 = !DILocation(line: 400, column: 5, scope: !1171)
!1206 = !DILocation(line: 400, column: 10, scope: !1171)
!1207 = !DILocation(line: 400, column: 4, scope: !1171)
!1208 = !DILocation(line: 402, column: 8, scope: !1171)
!1209 = !DILocation(line: 402, column: 16, scope: !1171)
!1210 = !DILocation(line: 402, column: 25, scope: !1171)
!1211 = !DILocation(line: 404, column: 6, scope: !1212)
!1212 = distinct !DILexicalBlock(scope: !1171, file: !25, line: 403, column: 4)
!1213 = !DILocation(line: 404, column: 11, scope: !1212)
!1214 = !DILocation(line: 404, column: 15, scope: !1212)
!1215 = !DILocation(line: 404, column: 10, scope: !1212)
!1216 = !DILocation(line: 405, column: 5, scope: !1212)
!1217 = !DILocation(line: 405, column: 13, scope: !1218)
!1218 = distinct !DILexicalBlock(scope: !1212, file: !25, line: 405, column: 5)
!1219 = !DILocation(line: 405, column: 12, scope: !1218)
!1220 = !DILocation(line: 407, column: 7, scope: !1221)
!1221 = distinct !DILexicalBlock(scope: !1218, file: !25, line: 406, column: 5)
!1222 = !DILocation(line: 407, column: 13, scope: !1221)
!1223 = !DILocation(line: 408, column: 10, scope: !1221)
!1224 = !DILocation(line: 408, column: 14, scope: !1221)
!1225 = !DILocation(line: 408, column: 20, scope: !1221)
!1226 = !DILocation(line: 408, column: 18, scope: !1221)
!1227 = !DILocation(line: 408, column: 24, scope: !1221)
!1228 = !DILocation(line: 409, column: 8, scope: !1221)
!1229 = !DILocation(line: 409, column: 7, scope: !1221)
!1230 = !DILocation(line: 411, column: 14, scope: !1231)
!1231 = distinct !DILexicalBlock(scope: !1212, file: !25, line: 411, column: 5)
!1232 = !DILocation(line: 411, column: 33, scope: !1231)
!1233 = !DILocation(line: 411, column: 37, scope: !1231)
!1234 = !DILocation(line: 411, column: 22, scope: !1231)
!1235 = !DILocation(line: 411, column: 43, scope: !1231)
!1236 = !DILocation(line: 411, column: 48, scope: !1231)
!1237 = !DILocation(line: 411, column: 42, scope: !1231)
!1238 = !DILocation(line: 411, column: 51, scope: !1231)
!1239 = !DILocation(line: 411, column: 60, scope: !1231)
!1240 = !DILocation(line: 414, column: 7, scope: !1147)
!1241 = !DILocation(line: 414, column: 11, scope: !1147)
!1242 = !DILocation(line: 414, column: 15, scope: !1147)
!1243 = !DILocation(line: 414, column: 22, scope: !1147)
!1244 = !DILocation(line: 414, column: 26, scope: !1147)
!1245 = !DILocation(line: 416, column: 2, scope: !737)
!1246 = !DILocation(line: 416, column: 9, scope: !1247)
!1247 = distinct !DILexicalBlock(scope: !737, file: !25, line: 416, column: 2)
!1248 = !DILocation(line: 416, column: 11, scope: !1247)
!1249 = !DILocation(line: 416, column: 17, scope: !1247)
!1250 = !DILocation(line: 416, column: 19, scope: !1247)
!1251 = !DILocation(line: 416, column: 24, scope: !1247)
!1252 = !DILocation(line: 418, column: 6, scope: !737)
!1253 = !DILocation(line: 420, column: 7, scope: !1254)
!1254 = distinct !DILexicalBlock(scope: !737, file: !25, line: 419, column: 2)
!1255 = !DILocation(line: 420, column: 11, scope: !1254)
!1256 = !DILocation(line: 421, column: 7, scope: !1254)
!1257 = !DILocation(line: 421, column: 11, scope: !1254)
!1258 = !DILocation(line: 421, column: 16, scope: !1254)
!1259 = !DILocation(line: 423, column: 17, scope: !1260)
!1260 = distinct !DILexicalBlock(scope: !1254, file: !25, line: 422, column: 3)
!1261 = !DILocation(line: 424, column: 4, scope: !1260)
!1262 = !DILocation(line: 424, column: 9, scope: !1260)
!1263 = !DILocation(line: 428, column: 17, scope: !1264)
!1264 = distinct !DILexicalBlock(scope: !1254, file: !25, line: 427, column: 3)
!1265 = !DILocation(line: 429, column: 4, scope: !1264)
!1266 = !DILocation(line: 431, column: 8, scope: !1254)
!1267 = !DILocation(line: 434, column: 8, scope: !1268)
!1268 = distinct !DILexicalBlock(scope: !1254, file: !25, line: 432, column: 3)
!1269 = !DILocation(line: 434, column: 12, scope: !1268)
!1270 = !DILocation(line: 434, column: 17, scope: !1268)
!1271 = !DILocation(line: 434, column: 19, scope: !1268)
!1272 = !DILocalVariable(name: "i", scope: !1273, file: !25, line: 436, type: !3, align: 4)
!1273 = distinct !DILexicalBlock(scope: !1274, file: !25, line: 436, column: 5)
!1274 = distinct !DILexicalBlock(scope: !1268, file: !25, line: 435, column: 4)
!1275 = !DILocation(line: 436, column: 14, scope: !1273)
!1276 = !DILocation(line: 436, column: 18, scope: !1273)
!1277 = !DILocation(line: 436, column: 26, scope: !1273)
!1278 = !DILocation(line: 436, column: 29, scope: !1273)
!1279 = !DILocation(line: 436, column: 31, scope: !1273)
!1280 = !DILocation(line: 436, column: 37, scope: !1273)
!1281 = !DILocation(line: 436, column: 45, scope: !1273)
!1282 = !DILocation(line: 436, column: 54, scope: !1273)
!1283 = !DILocation(line: 440, column: 9, scope: !1284)
!1284 = distinct !DILexicalBlock(scope: !1268, file: !25, line: 439, column: 4)
!1285 = !DILocation(line: 442, column: 8, scope: !1268)
!1286 = !DILocation(line: 444, column: 45, scope: !1287)
!1287 = distinct !DILexicalBlock(scope: !1268, file: !25, line: 443, column: 4)
!1288 = !DILocation(line: 444, column: 49, scope: !1287)
!1289 = !DILocation(line: 444, column: 40, scope: !1287)
!1290 = !DILocation(line: 444, column: 58, scope: !1287)
!1291 = !DILocation(line: 357, column: 16, scope: !1292, inlinedAt: !1293)
!1292 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !760, file: !760, line: 354, scopeLine: 354, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1293 = !DILocation(line: 444, column: 22, scope: !1287)
!1294 = !DILocation(line: 357, column: 19, scope: !1292, inlinedAt: !1293)
!1295 = !DILocation(line: 374, column: 16, scope: !1296, inlinedAt: !1297)
!1296 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !760, file: !760, line: 371, scopeLine: 371, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1297 = !DILocation(line: 444, column: 9, scope: !1287)
!1298 = !DILocation(line: 374, column: 19, scope: !1296, inlinedAt: !1297)
!1299 = !DILocation(line: 448, column: 45, scope: !1300)
!1300 = distinct !DILexicalBlock(scope: !1268, file: !25, line: 447, column: 4)
!1301 = !DILocation(line: 448, column: 49, scope: !1300)
!1302 = !DILocation(line: 448, column: 40, scope: !1300)
!1303 = !DILocation(line: 448, column: 58, scope: !1300)
!1304 = !DILocation(line: 448, column: 62, scope: !1300)
!1305 = !DILocation(line: 357, column: 16, scope: !1306, inlinedAt: !1307)
!1306 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !760, file: !760, line: 354, scopeLine: 354, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1307 = !DILocation(line: 448, column: 22, scope: !1300)
!1308 = !DILocation(line: 357, column: 19, scope: !1306, inlinedAt: !1307)
!1309 = !DILocation(line: 374, column: 16, scope: !1310, inlinedAt: !1311)
!1310 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !760, file: !760, line: 371, scopeLine: 371, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1311 = !DILocation(line: 448, column: 9, scope: !1300)
!1312 = !DILocation(line: 374, column: 19, scope: !1310, inlinedAt: !1311)
!1313 = !DILocation(line: 453, column: 6, scope: !737)
!1314 = !DILocation(line: 453, column: 30, scope: !737)
!1315 = !DILocation(line: 453, column: 35, scope: !737)
!1316 = !DILocation(line: 453, column: 10, scope: !737)
!1317 = !DILocation(line: 453, column: 60, scope: !737)
!1318 = !DILocalVariable(name: "l", scope: !737, file: !25, line: 454, type: !3, align: 4)
!1319 = !DILocation(line: 454, column: 6, scope: !737)
!1320 = !DILocation(line: 454, column: 20, scope: !737)
!1321 = !DILocation(line: 454, column: 16, scope: !737)
!1322 = !DILocation(line: 454, column: 30, scope: !737)
!1323 = !DILocation(line: 454, column: 35, scope: !737)
!1324 = !DILocation(line: 454, column: 10, scope: !737)
!1325 = !DILocalVariable(name: "estr", scope: !737, file: !25, line: 455, type: !117, align: 8)
!1326 = !DILocation(line: 455, column: 8, scope: !737)
!1327 = !DILocation(line: 456, column: 6, scope: !737)
!1328 = !DILocation(line: 458, column: 7, scope: !1329)
!1329 = distinct !DILexicalBlock(scope: !737, file: !25, line: 457, column: 2)
!1330 = !DILocation(line: 458, column: 21, scope: !1329)
!1331 = !DILocation(line: 458, column: 11, scope: !1329)
!1332 = !DILocation(line: 458, column: 31, scope: !1329)
!1333 = !DILocation(line: 459, column: 7, scope: !1329)
!1334 = !DILocation(line: 459, column: 14, scope: !1329)
!1335 = !DILocation(line: 459, column: 19, scope: !1329)
!1336 = !DILocation(line: 463, column: 26, scope: !1337)
!1337 = distinct !DILexicalBlock(scope: !737, file: !25, line: 462, column: 2)
!1338 = !DILocation(line: 463, column: 35, scope: !1337)
!1339 = !DILocation(line: 463, column: 39, scope: !1337)
!1340 = !DILocation(line: 463, column: 10, scope: !1337)
!1341 = !DILocation(line: 464, column: 3, scope: !1337)
!1342 = !DILocation(line: 464, column: 10, scope: !1343)
!1343 = distinct !DILexicalBlock(scope: !1337, file: !25, line: 464, column: 3)
!1344 = !DILocation(line: 464, column: 17, scope: !1343)
!1345 = !DILocation(line: 464, column: 30, scope: !1343)
!1346 = !DILocation(line: 464, column: 41, scope: !1343)
!1347 = !DILocation(line: 465, column: 6, scope: !1337)
!1348 = !DILocation(line: 465, column: 14, scope: !1337)
!1349 = !DILocation(line: 465, column: 28, scope: !1337)
!1350 = !DILocation(line: 466, column: 6, scope: !1337)
!1351 = !DILocation(line: 466, column: 13, scope: !1337)
!1352 = !DILocation(line: 466, column: 42, scope: !1337)
!1353 = !DILocation(line: 467, column: 7, scope: !1337)
!1354 = !DILocation(line: 467, column: 14, scope: !1337)
!1355 = !DILocation(line: 467, column: 36, scope: !1337)
!1356 = !DILocation(line: 467, column: 21, scope: !1337)
!1357 = !DILocation(line: 467, column: 46, scope: !1337)
!1358 = !DILocation(line: 468, column: 3, scope: !1337)
!1359 = !DILocation(line: 468, column: 14, scope: !1337)
!1360 = !DILocation(line: 468, column: 21, scope: !1337)
!1361 = !DILocation(line: 468, column: 8, scope: !1337)
!1362 = !DILocation(line: 470, column: 6, scope: !737)
!1363 = !DILocation(line: 470, column: 20, scope: !737)
!1364 = !DILocation(line: 470, column: 10, scope: !737)
!1365 = !DILocation(line: 470, column: 31, scope: !737)
!1366 = !DILocalVariable(name: "len", scope: !737, file: !25, line: 471, type: !207, align: 8)
!1367 = !DILocation(line: 471, column: 6, scope: !737)
!1368 = !DILocation(line: 472, column: 7, scope: !737)
!1369 = !DILocation(line: 472, column: 27, scope: !737)
!1370 = !DILocation(line: 472, column: 47, scope: !737)
!1371 = !DILocation(line: 472, column: 68, scope: !737)
!1372 = !DILocation(line: 472, column: 80, scope: !737)
!1373 = !DILocation(line: 472, column: 85, scope: !737)
!1374 = !DILocation(line: 472, column: 54, scope: !737)
!1375 = !DILocation(line: 473, column: 6, scope: !737)
!1376 = !DILocation(line: 473, column: 16, scope: !737)
!1377 = !DILocation(line: 473, column: 33, scope: !737)
!1378 = !DILocation(line: 473, column: 49, scope: !737)
!1379 = !DILocation(line: 473, column: 64, scope: !737)
!1380 = !DILocation(line: 473, column: 40, scope: !737)
!1381 = !DILocation(line: 474, column: 6, scope: !737)
!1382 = !DILocation(line: 474, column: 26, scope: !737)
!1383 = !DILocation(line: 474, column: 47, scope: !737)
!1384 = !DILocation(line: 474, column: 59, scope: !737)
!1385 = !DILocation(line: 474, column: 64, scope: !737)
!1386 = !DILocation(line: 474, column: 33, scope: !737)
!1387 = !DILocation(line: 475, column: 6, scope: !737)
!1388 = !DILocation(line: 477, column: 7, scope: !1389)
!1389 = distinct !DILexicalBlock(scope: !737, file: !25, line: 476, column: 2)
!1390 = !DILocation(line: 477, column: 11, scope: !1389)
!1391 = !DILocation(line: 477, column: 18, scope: !1389)
!1392 = !DILocalVariable(name: "d", scope: !1389, file: !25, line: 478, type: !990, align: 8)
!1393 = !DILocation(line: 478, column: 9, scope: !1389)
!1394 = !DILocation(line: 478, column: 13, scope: !1389)
!1395 = !DILocation(line: 479, column: 3, scope: !1389)
!1396 = !DILocation(line: 479, column: 10, scope: !1397)
!1397 = distinct !DILexicalBlock(scope: !1389, file: !25, line: 479, column: 3)
!1398 = !DILocation(line: 479, column: 15, scope: !1397)
!1399 = !DILocalVariable(name: "s", scope: !1400, file: !25, line: 481, type: !117, align: 8)
!1400 = distinct !DILexicalBlock(scope: !1397, file: !25, line: 480, column: 3)
!1401 = !DILocation(line: 481, column: 10, scope: !1400)
!1402 = !DILocation(line: 481, column: 21, scope: !1400)
!1403 = !DILocation(line: 481, column: 24, scope: !1400)
!1404 = !DILocation(line: 481, column: 30, scope: !1400)
!1405 = !DILocation(line: 481, column: 14, scope: !1400)
!1406 = !DILocation(line: 484, column: 10, scope: !1407)
!1407 = distinct !DILexicalBlock(scope: !1400, file: !25, line: 482, column: 4)
!1408 = !DILocation(line: 484, column: 15, scope: !1407)
!1409 = !DILocation(line: 485, column: 6, scope: !1410)
!1410 = distinct !DILexicalBlock(scope: !1407, file: !25, line: 485, column: 6)
!1411 = !DILocation(line: 485, column: 13, scope: !1412)
!1412 = distinct !DILexicalBlock(scope: !1410, file: !25, line: 485, column: 6)
!1413 = !DILocation(line: 485, column: 17, scope: !1412)
!1414 = !DILocation(line: 485, column: 25, scope: !1412)
!1415 = !DILocation(line: 485, column: 33, scope: !1412)
!1416 = !DILocation(line: 486, column: 10, scope: !1407)
!1417 = !DILocation(line: 486, column: 15, scope: !1407)
!1418 = !DILocation(line: 486, column: 21, scope: !1407)
!1419 = !DILocation(line: 487, column: 9, scope: !1420)
!1420 = distinct !DILexicalBlock(scope: !1407, file: !25, line: 487, column: 6)
!1421 = !DILocation(line: 487, column: 13, scope: !1420)
!1422 = !DILocation(line: 489, column: 4, scope: !1400)
!1423 = !DILocation(line: 489, column: 26, scope: !1400)
!1424 = !DILocation(line: 489, column: 29, scope: !1400)
!1425 = !DILocation(line: 489, column: 35, scope: !1400)
!1426 = !DILocation(line: 489, column: 39, scope: !1400)
!1427 = !DILocation(line: 489, column: 11, scope: !1400)
!1428 = !DILocation(line: 479, column: 18, scope: !1397)
!1429 = !DILocation(line: 491, column: 7, scope: !1389)
!1430 = !DILocation(line: 491, column: 12, scope: !1389)
!1431 = !DILocation(line: 491, column: 29, scope: !1389)
!1432 = !DILocation(line: 491, column: 36, scope: !1389)
!1433 = !DILocation(line: 492, column: 3, scope: !1389)
!1434 = !DILocation(line: 492, column: 10, scope: !1435)
!1435 = distinct !DILexicalBlock(scope: !1389, file: !25, line: 492, column: 3)
!1436 = !DILocation(line: 492, column: 14, scope: !1435)
!1437 = !DILocation(line: 492, column: 19, scope: !1435)
!1438 = !DILocalVariable(name: "s", scope: !1439, file: !25, line: 494, type: !117, align: 8)
!1439 = distinct !DILexicalBlock(scope: !1435, file: !25, line: 493, column: 3)
!1440 = !DILocation(line: 494, column: 10, scope: !1439)
!1441 = !DILocation(line: 494, column: 21, scope: !1439)
!1442 = !DILocation(line: 494, column: 24, scope: !1439)
!1443 = !DILocation(line: 494, column: 30, scope: !1439)
!1444 = !DILocation(line: 494, column: 14, scope: !1439)
!1445 = !DILocation(line: 495, column: 4, scope: !1439)
!1446 = !DILocation(line: 495, column: 11, scope: !1447)
!1447 = distinct !DILexicalBlock(scope: !1439, file: !25, line: 495, column: 4)
!1448 = !DILocation(line: 495, column: 15, scope: !1447)
!1449 = !DILocation(line: 495, column: 23, scope: !1447)
!1450 = !DILocation(line: 495, column: 27, scope: !1447)
!1451 = !DILocation(line: 496, column: 4, scope: !1439)
!1452 = !DILocation(line: 496, column: 26, scope: !1439)
!1453 = !DILocation(line: 374, column: 16, scope: !1454, inlinedAt: !1455)
!1454 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !760, file: !760, line: 371, scopeLine: 371, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1455 = !DILocation(line: 496, column: 29, scope: !1439)
!1456 = !DILocation(line: 374, column: 19, scope: !1454, inlinedAt: !1455)
!1457 = !DILocation(line: 496, column: 11, scope: !1439)
!1458 = !DILocation(line: 492, column: 26, scope: !1435)
!1459 = !DILocation(line: 492, column: 31, scope: !1435)
!1460 = !DILocation(line: 498, column: 3, scope: !1389)
!1461 = !DILocation(line: 498, column: 24, scope: !1389)
!1462 = !DILocation(line: 498, column: 10, scope: !1389)
!1463 = !DILocation(line: 502, column: 7, scope: !1464)
!1464 = distinct !DILexicalBlock(scope: !737, file: !25, line: 501, column: 2)
!1465 = !DILocation(line: 502, column: 12, scope: !1464)
!1466 = !DILocation(line: 502, column: 19, scope: !1464)
!1467 = !DILocation(line: 502, column: 23, scope: !1464)
!1468 = !DILocalVariable(name: "d", scope: !1469, file: !25, line: 503, type: !990, align: 8)
!1469 = distinct !DILexicalBlock(scope: !1464, file: !25, line: 503, column: 3)
!1470 = !DILocation(line: 503, column: 14, scope: !1469)
!1471 = !DILocation(line: 503, column: 18, scope: !1469)
!1472 = !DILocation(line: 503, column: 21, scope: !1469)
!1473 = !DILocation(line: 503, column: 25, scope: !1469)
!1474 = !DILocation(line: 503, column: 30, scope: !1469)
!1475 = !DILocalVariable(name: "s", scope: !1476, file: !25, line: 505, type: !117, align: 8)
!1476 = distinct !DILexicalBlock(scope: !1469, file: !25, line: 504, column: 3)
!1477 = !DILocation(line: 505, column: 10, scope: !1476)
!1478 = !DILocation(line: 505, column: 21, scope: !1476)
!1479 = !DILocation(line: 505, column: 24, scope: !1476)
!1480 = !DILocation(line: 505, column: 30, scope: !1476)
!1481 = !DILocation(line: 505, column: 14, scope: !1476)
!1482 = !DILocation(line: 506, column: 8, scope: !1476)
!1483 = !DILocation(line: 506, column: 13, scope: !1476)
!1484 = !DILocation(line: 506, column: 19, scope: !1476)
!1485 = !DILocation(line: 506, column: 25, scope: !1476)
!1486 = !DILocation(line: 506, column: 33, scope: !1476)
!1487 = !DILocation(line: 507, column: 8, scope: !1476)
!1488 = !DILocation(line: 507, column: 13, scope: !1476)
!1489 = !DILocation(line: 509, column: 5, scope: !1490)
!1490 = distinct !DILexicalBlock(scope: !1476, file: !25, line: 508, column: 4)
!1491 = !DILocation(line: 509, column: 12, scope: !1492)
!1492 = distinct !DILexicalBlock(scope: !1490, file: !25, line: 509, column: 5)
!1493 = !DILocation(line: 509, column: 16, scope: !1492)
!1494 = !DILocation(line: 509, column: 24, scope: !1492)
!1495 = !DILocation(line: 509, column: 32, scope: !1492)
!1496 = !DILocation(line: 513, column: 5, scope: !1497)
!1497 = distinct !DILexicalBlock(scope: !1476, file: !25, line: 512, column: 4)
!1498 = !DILocation(line: 513, column: 21, scope: !1497)
!1499 = !DILocation(line: 513, column: 12, scope: !1497)
!1500 = !DILocation(line: 514, column: 9, scope: !1497)
!1501 = !DILocation(line: 514, column: 18, scope: !1497)
!1502 = !DILocation(line: 514, column: 35, scope: !1497)
!1503 = !DILocation(line: 514, column: 42, scope: !1497)
!1504 = !DILocation(line: 516, column: 4, scope: !1476)
!1505 = !DILocation(line: 516, column: 26, scope: !1476)
!1506 = !DILocation(line: 516, column: 39, scope: !1476)
!1507 = !DILocation(line: 516, column: 45, scope: !1476)
!1508 = !DILocation(line: 516, column: 49, scope: !1476)
!1509 = !DILocation(line: 374, column: 16, scope: !1510, inlinedAt: !1511)
!1510 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !760, file: !760, line: 371, scopeLine: 371, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1511 = !DILocation(line: 516, column: 29, scope: !1476)
!1512 = !DILocation(line: 374, column: 19, scope: !1510, inlinedAt: !1511)
!1513 = !DILocation(line: 516, column: 11, scope: !1476)
!1514 = !DILocation(line: 517, column: 4, scope: !1476)
!1515 = !DILocation(line: 517, column: 9, scope: !1476)
!1516 = !DILocation(line: 517, column: 15, scope: !1476)
!1517 = !DILocation(line: 517, column: 19, scope: !1476)
!1518 = !DILocation(line: 503, column: 38, scope: !1469)
!1519 = !DILocation(line: 519, column: 3, scope: !1464)
!1520 = !DILocation(line: 519, column: 24, scope: !1464)
!1521 = !DILocation(line: 519, column: 10, scope: !1464)
!1522 = !DILocation(line: 520, column: 3, scope: !1464)
!1523 = !DILocation(line: 520, column: 25, scope: !1464)
!1524 = !DILocation(line: 520, column: 31, scope: !1464)
!1525 = !DILocation(line: 520, column: 38, scope: !1464)
!1526 = !DILocation(line: 520, column: 10, scope: !1464)
!1527 = !DILocation(line: 523, column: 6, scope: !737)
!1528 = !DILocation(line: 523, column: 23, scope: !737)
!1529 = !DILocation(line: 523, column: 44, scope: !737)
!1530 = !DILocation(line: 523, column: 56, scope: !737)
!1531 = !DILocation(line: 523, column: 61, scope: !737)
!1532 = !DILocation(line: 523, column: 30, scope: !737)
!1533 = !DILocation(line: 525, column: 9, scope: !737)
!1534 = !DILocation(line: 271, column: 22, scope: !844)
!1535 = !DILocation(line: 272, column: 4, scope: !844)
!1536 = !DILocation(line: 273, column: 4, scope: !844)
!1537 = !DILocation(line: 465, column: 4, scope: !1337)
!1538 = !DILocation(line: 466, column: 4, scope: !1337)
!1539 = !DILocation(line: 487, column: 7, scope: !1420)
!1540 = !DILocation(line: 495, column: 21, scope: !1447)
!1541 = distinct !DISubprogram(name: "ntoa", linkageName: "std.io.Formatter.ntoa", scope: !25, file: !25, line: 528, type: !1542, scopeLine: 528, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1542 = !DISubroutineType(types: !1543)
!1543 = !{!115, !285, !604, !1544, !753, !94}
!1544 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!1545 = !DILocation(line: 529, column: 1, scope: !1541)
!1546 = !DILocalVariable(name: "self", arg: 1, scope: !1541, file: !25, line: 528, type: !604)
!1547 = !DILocation(line: 528, column: 24, scope: !1541)
!1548 = !DILocalVariable(name: "value", arg: 2, scope: !1541, file: !25, line: 528, type: !1544)
!1549 = !DILocation(line: 528, column: 39, scope: !1541)
!1550 = !DILocalVariable(name: "negative", arg: 3, scope: !1541, file: !25, line: 528, type: !753)
!1551 = !DILocation(line: 528, column: 51, scope: !1541)
!1552 = !DILocalVariable(name: "base", arg: 4, scope: !1541, file: !25, line: 528, type: !94)
!1553 = !DILocation(line: 528, column: 66, scope: !1541)
!1554 = !DILocalVariable(name: "buf", scope: !1541, file: !25, line: 530, type: !1555, align: 16)
!1555 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 2048, align: 8, elements: !1556)
!1556 = !{!1557}
!1557 = !DISubrange(count: 256, lowerBound: 0)
!1558 = !DILocation(line: 530, column: 32, scope: !1541)
!1559 = !DILocalVariable(name: "len", scope: !1541, file: !25, line: 531, type: !207, align: 8)
!1560 = !DILocation(line: 531, column: 6, scope: !1541)
!1561 = !DILocation(line: 534, column: 6, scope: !1541)
!1562 = !DILocation(line: 534, column: 14, scope: !1541)
!1563 = !DILocation(line: 534, column: 32, scope: !1541)
!1564 = !DILocation(line: 537, column: 7, scope: !1541)
!1565 = !DILocation(line: 537, column: 31, scope: !1541)
!1566 = !DILocalVariable(name: "past_10", scope: !1567, file: !25, line: 539, type: !20, align: 1)
!1567 = distinct !DILexicalBlock(scope: !1541, file: !25, line: 538, column: 2)
!1568 = !DILocation(line: 539, column: 8, scope: !1567)
!1569 = !DILocation(line: 539, column: 19, scope: !1567)
!1570 = !DILocation(line: 539, column: 48, scope: !1567)
!1571 = !DILocation(line: 540, column: 3, scope: !1567)
!1572 = !DILocation(line: 547, column: 10, scope: !1573)
!1573 = distinct !DILexicalBlock(scope: !1567, file: !25, line: 540, column: 3)
!1574 = !DILocation(line: 542, column: 8, scope: !1575)
!1575 = distinct !DILexicalBlock(scope: !1573, file: !25, line: 541, column: 3)
!1576 = !DILocation(line: 542, column: 47, scope: !1575)
!1577 = !DILocalVariable(name: "digit", scope: !1575, file: !25, line: 543, type: !20, align: 1)
!1578 = !DILocation(line: 543, column: 9, scope: !1575)
!1579 = !DILocation(line: 543, column: 24, scope: !1575)
!1580 = !DILocation(line: 543, column: 32, scope: !1575)
!1581 = !DILocation(line: 543, column: 17, scope: !1575)
!1582 = !DILocation(line: 544, column: 8, scope: !1575)
!1583 = !DILocation(line: 544, column: 17, scope: !1575)
!1584 = !DILocation(line: 544, column: 26, scope: !1575)
!1585 = !DILocation(line: 544, column: 39, scope: !1575)
!1586 = !DILocation(line: 544, column: 45, scope: !1575)
!1587 = !DILocation(line: 545, column: 4, scope: !1575)
!1588 = !DILocation(line: 545, column: 13, scope: !1575)
!1589 = !DILocation(line: 549, column: 34, scope: !1541)
!1590 = !DILocation(line: 549, column: 9, scope: !1541)
!1591 = distinct !DISubprogram(name: "ntoa_format", linkageName: "std.io.Formatter.ntoa_format", scope: !25, file: !25, line: 552, type: !1592, scopeLine: 552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1592 = !DISubroutineType(types: !1593)
!1593 = !{!115, !285, !604, !286, !208, !753, !94}
!1594 = !DILocation(line: 553, column: 1, scope: !1591)
!1595 = !DILocalVariable(name: "self", arg: 1, scope: !1591, file: !25, line: 552, type: !604)
!1596 = !DILocation(line: 552, column: 31, scope: !1591)
!1597 = !DILocalVariable(name: "buf", arg: 2, scope: !1591, file: !25, line: 552, type: !286)
!1598 = !DILocation(line: 552, column: 45, scope: !1591)
!1599 = !DILocalVariable(name: "len", arg: 3, scope: !1591, file: !25, line: 552, type: !207)
!1600 = !DILocation(line: 552, column: 54, scope: !1591)
!1601 = !DILocalVariable(name: "negative", arg: 4, scope: !1591, file: !25, line: 552, type: !753)
!1602 = !DILocation(line: 552, column: 64, scope: !1591)
!1603 = !DILocalVariable(name: "base", arg: 5, scope: !1591, file: !25, line: 552, type: !94)
!1604 = !DILocation(line: 552, column: 79, scope: !1591)
!1605 = !DILocation(line: 555, column: 7, scope: !1591)
!1606 = !DILocation(line: 557, column: 7, scope: !1607)
!1607 = distinct !DILexicalBlock(scope: !1591, file: !25, line: 556, column: 2)
!1608 = !DILocation(line: 557, column: 21, scope: !1607)
!1609 = !DILocation(line: 557, column: 44, scope: !1607)
!1610 = !DILocation(line: 557, column: 56, scope: !1607)
!1611 = !DILocation(line: 557, column: 75, scope: !1607)
!1612 = !DILocation(line: 557, column: 94, scope: !1607)
!1613 = !DILocation(line: 558, column: 3, scope: !1607)
!1614 = !DILocation(line: 558, column: 10, scope: !1615)
!1615 = distinct !DILexicalBlock(scope: !1607, file: !25, line: 558, column: 3)
!1616 = !DILocation(line: 558, column: 16, scope: !1615)
!1617 = !DILocation(line: 560, column: 8, scope: !1618)
!1618 = distinct !DILexicalBlock(scope: !1615, file: !25, line: 559, column: 3)
!1619 = !DILocation(line: 560, column: 15, scope: !1618)
!1620 = !DILocation(line: 560, column: 31, scope: !1618)
!1621 = !DILocation(line: 561, column: 4, scope: !1618)
!1622 = !DILocation(line: 561, column: 8, scope: !1618)
!1623 = !DILocation(line: 561, column: 17, scope: !1618)
!1624 = !DILocation(line: 563, column: 3, scope: !1607)
!1625 = !DILocation(line: 563, column: 10, scope: !1626)
!1626 = distinct !DILexicalBlock(scope: !1607, file: !25, line: 563, column: 3)
!1627 = !DILocation(line: 563, column: 32, scope: !1626)
!1628 = !DILocation(line: 563, column: 38, scope: !1626)
!1629 = !DILocation(line: 565, column: 8, scope: !1630)
!1630 = distinct !DILexicalBlock(scope: !1626, file: !25, line: 564, column: 3)
!1631 = !DILocation(line: 565, column: 15, scope: !1630)
!1632 = !DILocation(line: 565, column: 31, scope: !1630)
!1633 = !DILocation(line: 566, column: 4, scope: !1630)
!1634 = !DILocation(line: 566, column: 8, scope: !1630)
!1635 = !DILocation(line: 566, column: 17, scope: !1630)
!1636 = !DILocation(line: 571, column: 6, scope: !1591)
!1637 = !DILocation(line: 571, column: 25, scope: !1591)
!1638 = !DILocation(line: 573, column: 8, scope: !1639)
!1639 = distinct !DILexicalBlock(scope: !1591, file: !25, line: 572, column: 2)
!1640 = !DILocation(line: 573, column: 32, scope: !1639)
!1641 = !DILocation(line: 573, column: 39, scope: !1639)
!1642 = !DILocation(line: 573, column: 46, scope: !1639)
!1643 = !DILocation(line: 573, column: 59, scope: !1639)
!1644 = !DILocation(line: 573, column: 66, scope: !1639)
!1645 = !DILocation(line: 575, column: 4, scope: !1646)
!1646 = distinct !DILexicalBlock(scope: !1639, file: !25, line: 574, column: 3)
!1647 = !DILocation(line: 576, column: 8, scope: !1646)
!1648 = !DILocation(line: 576, column: 13, scope: !1646)
!1649 = !DILocation(line: 578, column: 7, scope: !1639)
!1650 = !DILocation(line: 580, column: 8, scope: !1651)
!1651 = distinct !DILexicalBlock(scope: !1639, file: !25, line: 579, column: 3)
!1652 = !DILocation(line: 580, column: 19, scope: !1651)
!1653 = !DILocation(line: 580, column: 35, scope: !1651)
!1654 = !DILocation(line: 584, column: 6, scope: !1655)
!1655 = distinct !DILexicalBlock(scope: !1656, file: !25, line: 584, column: 6)
!1656 = distinct !DILexicalBlock(scope: !1651, file: !25, line: 581, column: 4)
!1657 = !DILocation(line: 584, column: 10, scope: !1655)
!1658 = !DILocation(line: 584, column: 19, scope: !1655)
!1659 = !DILocation(line: 584, column: 48, scope: !1655)
!1660 = !DILocation(line: 586, column: 6, scope: !1661)
!1661 = distinct !DILexicalBlock(scope: !1656, file: !25, line: 586, column: 6)
!1662 = !DILocation(line: 586, column: 10, scope: !1661)
!1663 = !DILocation(line: 586, column: 19, scope: !1661)
!1664 = !DILocation(line: 586, column: 48, scope: !1661)
!1665 = !DILocation(line: 588, column: 6, scope: !1666)
!1666 = distinct !DILexicalBlock(scope: !1656, file: !25, line: 588, column: 6)
!1667 = !DILocation(line: 588, column: 10, scope: !1666)
!1668 = !DILocation(line: 588, column: 19, scope: !1666)
!1669 = !DILocation(line: 588, column: 48, scope: !1666)
!1670 = !DILocation(line: 206, column: 33, scope: !1671, inlinedAt: !1672)
!1671 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !215, file: !215, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1672 = !DILocation(line: 590, column: 6, scope: !1673)
!1673 = distinct !DILexicalBlock(scope: !1656, file: !25, line: 590, column: 6)
!1674 = !DILocation(line: 206, column: 2, scope: !1671, inlinedAt: !1672)
!1675 = !DILocation(line: 208, column: 2, scope: !1671, inlinedAt: !1672)
!1676 = !DILocation(line: 592, column: 4, scope: !1651)
!1677 = !DILocation(line: 592, column: 8, scope: !1651)
!1678 = !DILocation(line: 592, column: 17, scope: !1651)
!1679 = !DILocation(line: 598, column: 8, scope: !1680)
!1680 = distinct !DILexicalBlock(scope: !1591, file: !25, line: 596, column: 2)
!1681 = !DILocation(line: 599, column: 8, scope: !1682)
!1682 = distinct !DILexicalBlock(scope: !1680, file: !25, line: 599, column: 4)
!1683 = !DILocation(line: 599, column: 15, scope: !1682)
!1684 = !DILocation(line: 599, column: 31, scope: !1682)
!1685 = !DILocation(line: 600, column: 4, scope: !1682)
!1686 = !DILocation(line: 600, column: 8, scope: !1682)
!1687 = !DILocation(line: 600, column: 17, scope: !1682)
!1688 = !DILocation(line: 601, column: 8, scope: !1680)
!1689 = !DILocation(line: 602, column: 8, scope: !1690)
!1690 = distinct !DILexicalBlock(scope: !1680, file: !25, line: 602, column: 4)
!1691 = !DILocation(line: 602, column: 15, scope: !1690)
!1692 = !DILocation(line: 602, column: 31, scope: !1690)
!1693 = !DILocation(line: 603, column: 4, scope: !1690)
!1694 = !DILocation(line: 603, column: 8, scope: !1690)
!1695 = !DILocation(line: 603, column: 17, scope: !1690)
!1696 = !DILocation(line: 604, column: 8, scope: !1680)
!1697 = !DILocation(line: 605, column: 8, scope: !1698)
!1698 = distinct !DILexicalBlock(scope: !1680, file: !25, line: 605, column: 4)
!1699 = !DILocation(line: 605, column: 15, scope: !1698)
!1700 = !DILocation(line: 605, column: 31, scope: !1698)
!1701 = !DILocation(line: 606, column: 4, scope: !1698)
!1702 = !DILocation(line: 606, column: 8, scope: !1698)
!1703 = !DILocation(line: 606, column: 17, scope: !1698)
!1704 = !DILocation(line: 608, column: 6, scope: !1591)
!1705 = !DILocation(line: 608, column: 28, scope: !1591)
!1706 = !DILocation(line: 608, column: 32, scope: !1591)
!1707 = !DILocation(line: 608, column: 33, scope: !1591)
!1708 = !DILocation(line: 608, column: 11, scope: !1591)
!1709 = !DILocation(line: 609, column: 9, scope: !1591)
!1710 = distinct !DISubprogram(name: "ntoa_any", linkageName: "std.io.Formatter.ntoa_any", scope: !25, file: !25, line: 613, type: !1711, scopeLine: 613, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1711 = !DISubroutineType(types: !1712)
!1712 = !{!115, !285, !604, !291, !94}
!1713 = !DILocation(line: 614, column: 1, scope: !1710)
!1714 = !DILocalVariable(name: "self", arg: 1, scope: !1710, file: !25, line: 613, type: !604)
!1715 = !DILocation(line: 613, column: 28, scope: !1710)
!1716 = !DILocalVariable(name: "arg", arg: 2, scope: !1710, file: !25, line: 613, type: !291)
!1717 = !DILocation(line: 613, column: 39, scope: !1710)
!1718 = !DILocalVariable(name: "base", arg: 3, scope: !1710, file: !25, line: 613, type: !94)
!1719 = !DILocation(line: 613, column: 49, scope: !1710)
!1720 = !DILocalVariable(name: "is_neg", scope: !1710, file: !25, line: 615, type: !753, align: 1)
!1721 = !DILocation(line: 615, column: 7, scope: !1710)
!1722 = !DILocation(line: 616, column: 19, scope: !1710)
!1723 = !DILocation(line: 616, column: 9, scope: !1710)
!1724 = distinct !DISubprogram(name: "out_char", linkageName: "std.io.Formatter.out_char", scope: !25, file: !25, line: 619, type: !1725, scopeLine: 619, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1725 = !DISubroutineType(types: !1726)
!1726 = !{!115, !285, !604, !291}
!1727 = !DILocation(line: 620, column: 1, scope: !1724)
!1728 = !DILocalVariable(name: "self", arg: 1, scope: !1724, file: !25, line: 619, type: !604)
!1729 = !DILocation(line: 619, column: 28, scope: !1724)
!1730 = !DILocalVariable(name: "arg", arg: 2, scope: !1724, file: !25, line: 619, type: !291)
!1731 = !DILocation(line: 619, column: 39, scope: !1724)
!1732 = !DILocation(line: 621, column: 7, scope: !1724)
!1733 = !DILocation(line: 623, column: 10, scope: !1734)
!1734 = distinct !DILexicalBlock(scope: !1724, file: !25, line: 622, column: 2)
!1735 = !DILocalVariable(name: "len", scope: !1724, file: !25, line: 625, type: !207, align: 8)
!1736 = !DILocation(line: 625, column: 6, scope: !1724)
!1737 = !DILocation(line: 625, column: 12, scope: !1724)
!1738 = !DILocalVariable(name: "l", scope: !1724, file: !25, line: 626, type: !94, align: 4)
!1739 = !DILocation(line: 626, column: 7, scope: !1724)
!1740 = !DILocation(line: 626, column: 11, scope: !1724)
!1741 = !DILocation(line: 628, column: 2, scope: !1724)
!1742 = !DILocation(line: 628, column: 21, scope: !1724)
!1743 = !DILocation(line: 628, column: 9, scope: !1724)
!1744 = !DILocalVariable(name: "c", scope: !1724, file: !25, line: 630, type: !1745, align: 4)
!1745 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char32", scope: !25, file: !25, line: 26, baseType: !94, align: 4)
!1746 = !DILocation(line: 630, column: 9, scope: !1724)
!1747 = !DILocation(line: 630, column: 13, scope: !1748, inlinedAt: !1751)
!1748 = distinct !DILexicalBlock(scope: !1750, file: !1749, line: 22, column: 1)
!1749 = !DIFile(filename: "types.c3", directory: "/usr/lib/c3c/lib/std/core")
!1750 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !1749, file: !1749, line: 21, scopeLine: 21, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1751 = !DILocation(line: 630, column: 13, scope: !1724)
!1752 = !DILocation(line: 19, column: 11, scope: !1748, inlinedAt: !1751)
!1753 = !DILocalVariable(name: "any_type", scope: !1750, file: !25, line: 23, type: !92, align: 8)
!1754 = !DILocation(line: 23, column: 9, scope: !1750, inlinedAt: !1751)
!1755 = !DILocation(line: 23, column: 20, scope: !1750, inlinedAt: !1751)
!1756 = !DILocalVariable(name: "kind", scope: !1750, file: !25, line: 24, type: !58, align: 1)
!1757 = !DILocation(line: 24, column: 11, scope: !1750, inlinedAt: !1751)
!1758 = !DILocation(line: 24, column: 18, scope: !1750, inlinedAt: !1751)
!1759 = !DILocalVariable(name: "is_mixed_signed", scope: !1750, file: !25, line: 25, type: !753, align: 1)
!1760 = !DILocation(line: 25, column: 7, scope: !1750, inlinedAt: !1751)
!1761 = !DILocation(line: 25, column: 41, scope: !1750, inlinedAt: !1751)
!1762 = !DILocation(line: 25, column: 25, scope: !1750, inlinedAt: !1751)
!1763 = !DILocalVariable(name: "max", scope: !1750, file: !25, line: 26, type: !94, align: 4)
!1764 = !DILocation(line: 26, column: 8, scope: !1750, inlinedAt: !1751)
!1765 = !DILocation(line: 26, column: 14, scope: !1750, inlinedAt: !1751)
!1766 = !DILocalVariable(name: "min", scope: !1750, file: !25, line: 27, type: !94, align: 4)
!1767 = !DILocation(line: 27, column: 8, scope: !1750, inlinedAt: !1751)
!1768 = !DILocation(line: 27, column: 14, scope: !1750, inlinedAt: !1751)
!1769 = !DILocation(line: 30, column: 8, scope: !1770, inlinedAt: !1751)
!1770 = distinct !DILexicalBlock(scope: !1750, file: !1749, line: 28, column: 2)
!1771 = !DILocalVariable(name: "c", scope: !1772, file: !25, line: 31, type: !1773, align: 1)
!1772 = distinct !DILexicalBlock(scope: !1770, file: !1749, line: 31, column: 4)
!1773 = !DIBasicType(name: "ichar", size: 8, encoding: DW_ATE_signed_char)
!1774 = !DILocation(line: 31, column: 10, scope: !1772, inlinedAt: !1751)
!1775 = !DILocation(line: 31, column: 22, scope: !1772, inlinedAt: !1751)
!1776 = !DILocation(line: 31, column: 15, scope: !1772, inlinedAt: !1751)
!1777 = !DILocation(line: 32, column: 8, scope: !1772, inlinedAt: !1751)
!1778 = !DILocation(line: 32, column: 27, scope: !1772, inlinedAt: !1751)
!1779 = !DILocation(line: 32, column: 41, scope: !1772, inlinedAt: !1751)
!1780 = !DILocation(line: 33, column: 11, scope: !1772, inlinedAt: !1751)
!1781 = !DILocation(line: 34, column: 8, scope: !1770, inlinedAt: !1751)
!1782 = !DILocalVariable(name: "s", scope: !1783, file: !25, line: 35, type: !1784, align: 2)
!1783 = distinct !DILexicalBlock(scope: !1770, file: !1749, line: 35, column: 4)
!1784 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!1785 = !DILocation(line: 35, column: 10, scope: !1783, inlinedAt: !1751)
!1786 = !DILocation(line: 35, column: 23, scope: !1783, inlinedAt: !1751)
!1787 = !DILocation(line: 35, column: 15, scope: !1783, inlinedAt: !1751)
!1788 = !DILocation(line: 36, column: 8, scope: !1783, inlinedAt: !1751)
!1789 = !DILocation(line: 36, column: 27, scope: !1783, inlinedAt: !1751)
!1790 = !DILocation(line: 36, column: 41, scope: !1783, inlinedAt: !1751)
!1791 = !DILocation(line: 37, column: 8, scope: !1783, inlinedAt: !1751)
!1792 = !DILocation(line: 37, column: 12, scope: !1783, inlinedAt: !1751)
!1793 = !DILocation(line: 37, column: 19, scope: !1783, inlinedAt: !1751)
!1794 = !DILocation(line: 37, column: 23, scope: !1783, inlinedAt: !1751)
!1795 = !DILocation(line: 37, column: 35, scope: !1783, inlinedAt: !1751)
!1796 = !DILocation(line: 38, column: 11, scope: !1783, inlinedAt: !1751)
!1797 = !DILocation(line: 39, column: 8, scope: !1770, inlinedAt: !1751)
!1798 = !DILocalVariable(name: "i", scope: !1799, file: !25, line: 40, type: !3, align: 4)
!1799 = distinct !DILexicalBlock(scope: !1770, file: !1749, line: 40, column: 4)
!1800 = !DILocation(line: 40, column: 8, scope: !1799, inlinedAt: !1751)
!1801 = !DILocation(line: 40, column: 19, scope: !1799, inlinedAt: !1751)
!1802 = !DILocation(line: 40, column: 13, scope: !1799, inlinedAt: !1751)
!1803 = !DILocation(line: 41, column: 8, scope: !1799, inlinedAt: !1751)
!1804 = !DILocation(line: 41, column: 27, scope: !1799, inlinedAt: !1751)
!1805 = !DILocation(line: 41, column: 41, scope: !1799, inlinedAt: !1751)
!1806 = !DILocation(line: 42, column: 8, scope: !1799, inlinedAt: !1751)
!1807 = !DILocation(line: 42, column: 12, scope: !1799, inlinedAt: !1751)
!1808 = !DILocation(line: 42, column: 19, scope: !1799, inlinedAt: !1751)
!1809 = !DILocation(line: 42, column: 23, scope: !1799, inlinedAt: !1751)
!1810 = !DILocation(line: 42, column: 35, scope: !1799, inlinedAt: !1751)
!1811 = !DILocation(line: 43, column: 11, scope: !1799, inlinedAt: !1751)
!1812 = !DILocation(line: 44, column: 8, scope: !1770, inlinedAt: !1751)
!1813 = !DILocalVariable(name: "l", scope: !1814, file: !25, line: 45, type: !116, align: 8)
!1814 = distinct !DILexicalBlock(scope: !1770, file: !1749, line: 45, column: 4)
!1815 = !DILocation(line: 45, column: 9, scope: !1814, inlinedAt: !1751)
!1816 = !DILocation(line: 45, column: 21, scope: !1814, inlinedAt: !1751)
!1817 = !DILocation(line: 45, column: 14, scope: !1814, inlinedAt: !1751)
!1818 = !DILocation(line: 46, column: 8, scope: !1814, inlinedAt: !1751)
!1819 = !DILocation(line: 46, column: 27, scope: !1814, inlinedAt: !1751)
!1820 = !DILocation(line: 46, column: 41, scope: !1814, inlinedAt: !1751)
!1821 = !DILocation(line: 47, column: 8, scope: !1814, inlinedAt: !1751)
!1822 = !DILocation(line: 47, column: 12, scope: !1814, inlinedAt: !1751)
!1823 = !DILocation(line: 47, column: 19, scope: !1814, inlinedAt: !1751)
!1824 = !DILocation(line: 47, column: 23, scope: !1814, inlinedAt: !1751)
!1825 = !DILocation(line: 47, column: 35, scope: !1814, inlinedAt: !1751)
!1826 = !DILocation(line: 48, column: 11, scope: !1814, inlinedAt: !1751)
!1827 = !DILocation(line: 49, column: 8, scope: !1770, inlinedAt: !1751)
!1828 = !DILocalVariable(name: "i", scope: !1829, file: !25, line: 50, type: !1830, align: 16)
!1829 = distinct !DILexicalBlock(scope: !1770, file: !1749, line: 50, column: 4)
!1830 = !DIBasicType(name: "int128", size: 128, encoding: DW_ATE_signed)
!1831 = !DILocation(line: 50, column: 11, scope: !1829, inlinedAt: !1751)
!1832 = !DILocation(line: 50, column: 25, scope: !1829, inlinedAt: !1751)
!1833 = !DILocation(line: 50, column: 16, scope: !1829, inlinedAt: !1751)
!1834 = !DILocation(line: 51, column: 8, scope: !1829, inlinedAt: !1751)
!1835 = !DILocation(line: 51, column: 27, scope: !1829, inlinedAt: !1751)
!1836 = !DILocation(line: 51, column: 41, scope: !1829, inlinedAt: !1751)
!1837 = !DILocation(line: 52, column: 8, scope: !1829, inlinedAt: !1751)
!1838 = !DILocation(line: 52, column: 12, scope: !1829, inlinedAt: !1751)
!1839 = !DILocation(line: 52, column: 19, scope: !1829, inlinedAt: !1751)
!1840 = !DILocation(line: 52, column: 23, scope: !1829, inlinedAt: !1751)
!1841 = !DILocation(line: 52, column: 35, scope: !1829, inlinedAt: !1751)
!1842 = !DILocation(line: 53, column: 11, scope: !1829, inlinedAt: !1751)
!1843 = !DILocation(line: 54, column: 8, scope: !1770, inlinedAt: !1751)
!1844 = !DILocalVariable(name: "c", scope: !1845, file: !25, line: 55, type: !20, align: 1)
!1845 = distinct !DILexicalBlock(scope: !1770, file: !1749, line: 55, column: 4)
!1846 = !DILocation(line: 55, column: 9, scope: !1845, inlinedAt: !1751)
!1847 = !DILocation(line: 55, column: 21, scope: !1845, inlinedAt: !1751)
!1848 = !DILocation(line: 55, column: 14, scope: !1845, inlinedAt: !1751)
!1849 = !DILocation(line: 56, column: 8, scope: !1845, inlinedAt: !1751)
!1850 = !DILocation(line: 56, column: 12, scope: !1845, inlinedAt: !1751)
!1851 = !DILocation(line: 56, column: 24, scope: !1845, inlinedAt: !1751)
!1852 = !DILocation(line: 57, column: 11, scope: !1845, inlinedAt: !1751)
!1853 = !DILocation(line: 58, column: 8, scope: !1770, inlinedAt: !1751)
!1854 = !DILocalVariable(name: "s", scope: !1855, file: !25, line: 59, type: !1856, align: 2)
!1855 = distinct !DILexicalBlock(scope: !1770, file: !1749, line: 59, column: 4)
!1856 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!1857 = !DILocation(line: 59, column: 11, scope: !1855, inlinedAt: !1751)
!1858 = !DILocation(line: 59, column: 25, scope: !1855, inlinedAt: !1751)
!1859 = !DILocation(line: 59, column: 16, scope: !1855, inlinedAt: !1751)
!1860 = !DILocation(line: 60, column: 8, scope: !1855, inlinedAt: !1751)
!1861 = !DILocation(line: 60, column: 12, scope: !1855, inlinedAt: !1751)
!1862 = !DILocation(line: 60, column: 19, scope: !1855, inlinedAt: !1751)
!1863 = !DILocation(line: 60, column: 23, scope: !1855, inlinedAt: !1751)
!1864 = !DILocation(line: 60, column: 35, scope: !1855, inlinedAt: !1751)
!1865 = !DILocation(line: 61, column: 11, scope: !1855, inlinedAt: !1751)
!1866 = !DILocation(line: 62, column: 8, scope: !1770, inlinedAt: !1751)
!1867 = !DILocalVariable(name: "i", scope: !1868, file: !25, line: 63, type: !94, align: 4)
!1868 = distinct !DILexicalBlock(scope: !1770, file: !1749, line: 63, column: 4)
!1869 = !DILocation(line: 63, column: 9, scope: !1868, inlinedAt: !1751)
!1870 = !DILocation(line: 63, column: 21, scope: !1868, inlinedAt: !1751)
!1871 = !DILocation(line: 63, column: 14, scope: !1868, inlinedAt: !1751)
!1872 = !DILocation(line: 64, column: 8, scope: !1868, inlinedAt: !1751)
!1873 = !DILocation(line: 64, column: 12, scope: !1868, inlinedAt: !1751)
!1874 = !DILocation(line: 64, column: 19, scope: !1868, inlinedAt: !1751)
!1875 = !DILocation(line: 64, column: 23, scope: !1868, inlinedAt: !1751)
!1876 = !DILocation(line: 64, column: 35, scope: !1868, inlinedAt: !1751)
!1877 = !DILocation(line: 65, column: 11, scope: !1868, inlinedAt: !1751)
!1878 = !DILocation(line: 66, column: 8, scope: !1770, inlinedAt: !1751)
!1879 = !DILocalVariable(name: "l", scope: !1880, file: !25, line: 67, type: !208, align: 8)
!1880 = distinct !DILexicalBlock(scope: !1770, file: !1749, line: 67, column: 4)
!1881 = !DILocation(line: 67, column: 10, scope: !1880, inlinedAt: !1751)
!1882 = !DILocation(line: 67, column: 23, scope: !1880, inlinedAt: !1751)
!1883 = !DILocation(line: 67, column: 15, scope: !1880, inlinedAt: !1751)
!1884 = !DILocation(line: 68, column: 8, scope: !1880, inlinedAt: !1751)
!1885 = !DILocation(line: 68, column: 12, scope: !1880, inlinedAt: !1751)
!1886 = !DILocation(line: 68, column: 19, scope: !1880, inlinedAt: !1751)
!1887 = !DILocation(line: 68, column: 23, scope: !1880, inlinedAt: !1751)
!1888 = !DILocation(line: 68, column: 35, scope: !1880, inlinedAt: !1751)
!1889 = !DILocation(line: 69, column: 11, scope: !1880, inlinedAt: !1751)
!1890 = !DILocation(line: 70, column: 8, scope: !1770, inlinedAt: !1751)
!1891 = !DILocalVariable(name: "i", scope: !1892, file: !25, line: 71, type: !1544, align: 16)
!1892 = distinct !DILexicalBlock(scope: !1770, file: !1749, line: 71, column: 4)
!1893 = !DILocation(line: 71, column: 12, scope: !1892, inlinedAt: !1751)
!1894 = !DILocation(line: 71, column: 27, scope: !1892, inlinedAt: !1751)
!1895 = !DILocation(line: 71, column: 17, scope: !1892, inlinedAt: !1751)
!1896 = !DILocation(line: 72, column: 8, scope: !1892, inlinedAt: !1751)
!1897 = !DILocation(line: 72, column: 12, scope: !1892, inlinedAt: !1751)
!1898 = !DILocation(line: 72, column: 19, scope: !1892, inlinedAt: !1751)
!1899 = !DILocation(line: 72, column: 23, scope: !1892, inlinedAt: !1751)
!1900 = !DILocation(line: 72, column: 35, scope: !1892, inlinedAt: !1751)
!1901 = !DILocation(line: 73, column: 11, scope: !1892, inlinedAt: !1751)
!1902 = !DILocation(line: 206, column: 33, scope: !1903, inlinedAt: !1904)
!1903 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !215, file: !215, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!1904 = !DILocation(line: 75, column: 4, scope: !1905, inlinedAt: !1751)
!1905 = distinct !DILexicalBlock(scope: !1770, file: !1749, line: 75, column: 4)
!1906 = !DILocation(line: 206, column: 2, scope: !1903, inlinedAt: !1904)
!1907 = !DILocation(line: 208, column: 2, scope: !1903, inlinedAt: !1904)
!1908 = !DILocation(line: 630, column: 45, scope: !1724)
!1909 = !DILocation(line: 633, column: 8, scope: !1910)
!1910 = distinct !DILexicalBlock(scope: !1724, file: !25, line: 631, column: 2)
!1911 = !DILocation(line: 634, column: 13, scope: !1912)
!1912 = distinct !DILexicalBlock(scope: !1910, file: !25, line: 634, column: 4)
!1913 = !DILocation(line: 634, column: 4, scope: !1912)
!1914 = !DILocation(line: 635, column: 8, scope: !1910)
!1915 = !DILocation(line: 636, column: 27, scope: !1916)
!1916 = distinct !DILexicalBlock(scope: !1910, file: !25, line: 636, column: 4)
!1917 = !DILocation(line: 636, column: 13, scope: !1916)
!1918 = !DILocation(line: 636, column: 4, scope: !1916)
!1919 = !DILocation(line: 637, column: 28, scope: !1916)
!1920 = !DILocation(line: 637, column: 13, scope: !1916)
!1921 = !DILocation(line: 637, column: 4, scope: !1916)
!1922 = !DILocation(line: 638, column: 8, scope: !1910)
!1923 = !DILocation(line: 639, column: 27, scope: !1924)
!1924 = distinct !DILexicalBlock(scope: !1910, file: !25, line: 639, column: 4)
!1925 = !DILocation(line: 639, column: 13, scope: !1924)
!1926 = !DILocation(line: 639, column: 4, scope: !1924)
!1927 = !DILocation(line: 640, column: 28, scope: !1924)
!1928 = !DILocation(line: 640, column: 13, scope: !1924)
!1929 = !DILocation(line: 640, column: 4, scope: !1924)
!1930 = !DILocation(line: 641, column: 28, scope: !1924)
!1931 = !DILocation(line: 641, column: 13, scope: !1924)
!1932 = !DILocation(line: 641, column: 4, scope: !1924)
!1933 = !DILocation(line: 643, column: 27, scope: !1934)
!1934 = distinct !DILexicalBlock(scope: !1910, file: !25, line: 643, column: 4)
!1935 = !DILocation(line: 643, column: 13, scope: !1934)
!1936 = !DILocation(line: 643, column: 4, scope: !1934)
!1937 = !DILocation(line: 644, column: 28, scope: !1934)
!1938 = !DILocation(line: 644, column: 13, scope: !1934)
!1939 = !DILocation(line: 644, column: 4, scope: !1934)
!1940 = !DILocation(line: 645, column: 28, scope: !1934)
!1941 = !DILocation(line: 645, column: 13, scope: !1934)
!1942 = !DILocation(line: 645, column: 4, scope: !1934)
!1943 = !DILocation(line: 646, column: 28, scope: !1934)
!1944 = !DILocation(line: 646, column: 13, scope: !1934)
!1945 = !DILocation(line: 646, column: 4, scope: !1934)
!1946 = !DILocation(line: 648, column: 2, scope: !1724)
!1947 = !DILocation(line: 648, column: 21, scope: !1724)
!1948 = !DILocation(line: 648, column: 9, scope: !1724)
!1949 = !DILocation(line: 649, column: 9, scope: !1724)
!1950 = distinct !DISubprogram(name: "out_reverse", linkageName: "std.io.Formatter.out_reverse", scope: !25, file: !25, line: 653, type: !694, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1951 = !DILocation(line: 654, column: 1, scope: !1950)
!1952 = !DILocalVariable(name: "self", arg: 1, scope: !1950, file: !25, line: 653, type: !604)
!1953 = !DILocation(line: 653, column: 31, scope: !1950)
!1954 = !DILocalVariable(name: "buf", arg: 2, scope: !1950, file: !25, line: 653, type: !203)
!1955 = !DILocation(line: 653, column: 45, scope: !1950)
!1956 = !DILocalVariable(name: "n", scope: !1950, file: !25, line: 655, type: !207, align: 8)
!1957 = !DILocation(line: 655, column: 6, scope: !1950)
!1958 = !DILocalVariable(name: "buffer_start_idx", scope: !1950, file: !25, line: 656, type: !207, align: 8)
!1959 = !DILocation(line: 656, column: 6, scope: !1950)
!1960 = !DILocation(line: 656, column: 25, scope: !1950)
!1961 = !DILocalVariable(name: "len", scope: !1950, file: !25, line: 657, type: !207, align: 8)
!1962 = !DILocation(line: 657, column: 6, scope: !1950)
!1963 = !DILocation(line: 657, column: 12, scope: !1950)
!1964 = !DILocation(line: 659, column: 7, scope: !1950)
!1965 = !DILocation(line: 659, column: 30, scope: !1950)
!1966 = !DILocation(line: 661, column: 3, scope: !1967)
!1967 = distinct !DILexicalBlock(scope: !1950, file: !25, line: 660, column: 2)
!1968 = !DILocation(line: 661, column: 22, scope: !1967)
!1969 = !DILocation(line: 661, column: 34, scope: !1967)
!1970 = !DILocation(line: 661, column: 8, scope: !1967)
!1971 = !DILocation(line: 664, column: 2, scope: !1950)
!1972 = !DILocation(line: 664, column: 9, scope: !1973)
!1973 = distinct !DILexicalBlock(scope: !1950, file: !25, line: 664, column: 2)
!1974 = !DILocation(line: 664, column: 14, scope: !1973)
!1975 = !DILocation(line: 664, column: 28, scope: !1973)
!1976 = !DILocation(line: 664, column: 34, scope: !1973)
!1977 = !DILocation(line: 664, column: 32, scope: !1973)
!1978 = !DILocation(line: 664, column: 19, scope: !1973)
!1979 = !DILocation(line: 667, column: 2, scope: !1950)
!1980 = !DILocation(line: 667, column: 7, scope: !1950)
!1981 = !DILocation(line: 668, column: 9, scope: !1950)
!1982 = distinct !DISubprogram(name: "print_hex_chars", linkageName: "std.io.print_hex_chars", scope: !25, file: !25, line: 9, type: !1983, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!1983 = !DISubroutineType(types: !1984)
!1984 = !{!115, !285, !604, !203, !753}
!1985 = !DILocalVariable(name: "f", arg: 1, scope: !1982, file: !25, line: 9, type: !604)
!1986 = !DILocation(line: 9, column: 36, scope: !1982)
!1987 = !DILocalVariable(name: "out", arg: 2, scope: !1982, file: !25, line: 9, type: !203)
!1988 = !DILocation(line: 9, column: 46, scope: !1982)
!1989 = !DILocalVariable(name: "uppercase", arg: 3, scope: !1982, file: !25, line: 9, type: !753)
!1990 = !DILocation(line: 9, column: 56, scope: !1982)
!1991 = !DILocalVariable(name: "past_10", scope: !1982, file: !25, line: 11, type: !20, align: 1)
!1992 = !DILocation(line: 11, column: 7, scope: !1982)
!1993 = !DILocation(line: 11, column: 18, scope: !1982)
!1994 = !DILocation(line: 11, column: 36, scope: !1982)
!1995 = !DILocalVariable(name: "len", scope: !1982, file: !25, line: 12, type: !207, align: 8)
!1996 = !DILocation(line: 12, column: 6, scope: !1982)
!1997 = !DILocation(line: 12, column: 12, scope: !1982)
!1998 = !DILocation(line: 13, column: 15, scope: !1999)
!1999 = distinct !DILexicalBlock(scope: !1982, file: !25, line: 13, column: 2)
!2000 = !DILocalVariable(name: ".temp", scope: !1999, file: !25, line: 13, type: !207, align: 8)
!2001 = !DILocalVariable(name: "c", scope: !2002, file: !25, line: 13, type: !20, align: 1)
!2002 = distinct !DILexicalBlock(scope: !1999, file: !25, line: 14, column: 2)
!2003 = !DILocation(line: 13, column: 11, scope: !2002)
!2004 = !DILocation(line: 13, column: 15, scope: !2002)
!2005 = !DILocalVariable(name: "digit", scope: !2006, file: !25, line: 15, type: !20, align: 1)
!2006 = distinct !DILexicalBlock(scope: !2002, file: !25, line: 14, column: 2)
!2007 = !DILocation(line: 15, column: 8, scope: !2006)
!2008 = !DILocation(line: 15, column: 16, scope: !2006)
!2009 = !DILocation(line: 16, column: 9, scope: !2006)
!2010 = !DILocation(line: 16, column: 18, scope: !2006)
!2011 = !DILocation(line: 16, column: 31, scope: !2006)
!2012 = !DILocation(line: 16, column: 37, scope: !2006)
!2013 = !DILocation(line: 16, column: 3, scope: !2006)
!2014 = !DILocation(line: 17, column: 3, scope: !2006)
!2015 = !DILocation(line: 18, column: 11, scope: !2006)
!2016 = !DILocation(line: 19, column: 9, scope: !2006)
!2017 = !DILocation(line: 19, column: 18, scope: !2006)
!2018 = !DILocation(line: 19, column: 31, scope: !2006)
!2019 = !DILocation(line: 19, column: 37, scope: !2006)
!2020 = !DILocation(line: 19, column: 3, scope: !2006)
!2021 = !DILocation(line: 20, column: 3, scope: !2006)
!2022 = !DILocation(line: 22, column: 9, scope: !1982)
!2023 = distinct !DISubprogram(name: "int_from_any", linkageName: "std.io.int_from_any", scope: !25, file: !25, line: 38, type: !2024, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2024 = !DISubroutineType(types: !2025)
!2025 = !{!115, !2026, !291, !2027}
!2026 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !1544, size: 64, align: 64, dwarfAddressSpace: 0)
!2027 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "bool*", baseType: !753, size: 64, align: 64, dwarfAddressSpace: 0)
!2028 = !DILocalVariable(name: "arg", arg: 1, scope: !2023, file: !25, line: 38, type: !291)
!2029 = !DILocation(line: 38, column: 30, scope: !2023)
!2030 = !DILocalVariable(name: "is_neg", arg: 2, scope: !2023, file: !25, line: 38, type: !2027)
!2031 = !DILocation(line: 38, column: 41, scope: !2023)
!2032 = !DILocation(line: 40, column: 10, scope: !2033)
!2033 = distinct !DILexicalBlock(scope: !2023, file: !25, line: 40, column: 2)
!2034 = !DILocation(line: 44, column: 5, scope: !2035)
!2035 = distinct !DILexicalBlock(scope: !2033, file: !25, line: 44, column: 4)
!2036 = !DILocation(line: 44, column: 14, scope: !2035)
!2037 = !DILocation(line: 45, column: 35, scope: !2035)
!2038 = !DILocation(line: 45, column: 27, scope: !2035)
!2039 = !DILocation(line: 239, column: 20, scope: !2040, inlinedAt: !2042)
!2040 = distinct !DILexicalBlock(scope: !2041, file: !215, line: 240, column: 1)
!2041 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !215, file: !215, line: 239, scopeLine: 239, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2042 = !DILocation(line: 47, column: 24, scope: !2043)
!2043 = distinct !DILexicalBlock(scope: !2033, file: !25, line: 47, column: 4)
!2044 = !DILocation(line: 241, column: 20, scope: !2041, inlinedAt: !2042)
!2045 = !DILocation(line: 241, column: 30, scope: !2041, inlinedAt: !2042)
!2046 = !DILocation(line: 47, column: 11, scope: !2043)
!2047 = !DILocation(line: 49, column: 4, scope: !2048)
!2048 = distinct !DILexicalBlock(scope: !2033, file: !25, line: 49, column: 4)
!2049 = !DILocation(line: 51, column: 3, scope: !2023)
!2050 = !DILocation(line: 51, column: 12, scope: !2023)
!2051 = !DILocation(line: 52, column: 10, scope: !2052)
!2052 = distinct !DILexicalBlock(scope: !2023, file: !25, line: 52, column: 2)
!2053 = !DILocation(line: 54, column: 8, scope: !2052)
!2054 = !DILocation(line: 55, column: 21, scope: !2055)
!2055 = distinct !DILexicalBlock(scope: !2052, file: !25, line: 55, column: 4)
!2056 = !DILocation(line: 56, column: 8, scope: !2052)
!2057 = !DILocalVariable(name: "val", scope: !2058, file: !25, line: 57, type: !3, align: 4)
!2058 = distinct !DILexicalBlock(scope: !2052, file: !25, line: 57, column: 4)
!2059 = !DILocation(line: 57, column: 8, scope: !2058)
!2060 = !DILocation(line: 57, column: 15, scope: !2058)
!2061 = !DILocation(line: 58, column: 13, scope: !2058)
!2062 = !DILocation(line: 58, column: 22, scope: !2058)
!2063 = !DILocation(line: 58, column: 35, scope: !2058)
!2064 = !DILocation(line: 58, column: 34, scope: !2058)
!2065 = !DILocation(line: 58, column: 55, scope: !2058)
!2066 = !DILocation(line: 59, column: 8, scope: !2052)
!2067 = !DILocalVariable(name: "val", scope: !2068, file: !25, line: 60, type: !3, align: 4)
!2068 = distinct !DILexicalBlock(scope: !2052, file: !25, line: 60, column: 4)
!2069 = !DILocation(line: 60, column: 8, scope: !2068)
!2070 = !DILocation(line: 60, column: 15, scope: !2068)
!2071 = !DILocation(line: 61, column: 13, scope: !2068)
!2072 = !DILocation(line: 61, column: 22, scope: !2068)
!2073 = !DILocation(line: 61, column: 35, scope: !2068)
!2074 = !DILocation(line: 61, column: 34, scope: !2068)
!2075 = !DILocation(line: 61, column: 55, scope: !2068)
!2076 = !DILocation(line: 62, column: 8, scope: !2052)
!2077 = !DILocalVariable(name: "val", scope: !2078, file: !25, line: 63, type: !3, align: 4)
!2078 = distinct !DILexicalBlock(scope: !2052, file: !25, line: 63, column: 4)
!2079 = !DILocation(line: 63, column: 8, scope: !2078)
!2080 = !DILocation(line: 63, column: 15, scope: !2078)
!2081 = !DILocation(line: 64, column: 13, scope: !2078)
!2082 = !DILocation(line: 64, column: 22, scope: !2078)
!2083 = !DILocation(line: 64, column: 35, scope: !2078)
!2084 = !DILocation(line: 64, column: 34, scope: !2078)
!2085 = !DILocation(line: 64, column: 55, scope: !2078)
!2086 = !DILocation(line: 65, column: 8, scope: !2052)
!2087 = !DILocalVariable(name: "val", scope: !2088, file: !25, line: 66, type: !116, align: 8)
!2088 = distinct !DILexicalBlock(scope: !2052, file: !25, line: 66, column: 4)
!2089 = !DILocation(line: 66, column: 9, scope: !2088)
!2090 = !DILocation(line: 66, column: 16, scope: !2088)
!2091 = !DILocation(line: 67, column: 13, scope: !2088)
!2092 = !DILocation(line: 67, column: 22, scope: !2088)
!2093 = !DILocation(line: 67, column: 35, scope: !2088)
!2094 = !DILocation(line: 67, column: 34, scope: !2088)
!2095 = !DILocation(line: 67, column: 55, scope: !2088)
!2096 = !DILocation(line: 68, column: 8, scope: !2052)
!2097 = !DILocalVariable(name: "val", scope: !2098, file: !25, line: 69, type: !1830, align: 16)
!2098 = distinct !DILexicalBlock(scope: !2052, file: !25, line: 69, column: 4)
!2099 = !DILocation(line: 69, column: 11, scope: !2098)
!2100 = !DILocation(line: 69, column: 18, scope: !2098)
!2101 = !DILocation(line: 70, column: 13, scope: !2098)
!2102 = !DILocation(line: 70, column: 22, scope: !2098)
!2103 = !DILocation(line: 70, column: 35, scope: !2098)
!2104 = !DILocation(line: 70, column: 34, scope: !2098)
!2105 = !DILocation(line: 70, column: 55, scope: !2098)
!2106 = !DILocation(line: 71, column: 8, scope: !2052)
!2107 = !DILocation(line: 72, column: 12, scope: !2108)
!2108 = distinct !DILexicalBlock(scope: !2052, file: !25, line: 72, column: 4)
!2109 = !DILocation(line: 73, column: 8, scope: !2052)
!2110 = !DILocation(line: 74, column: 12, scope: !2111)
!2111 = distinct !DILexicalBlock(scope: !2052, file: !25, line: 74, column: 4)
!2112 = !DILocation(line: 75, column: 8, scope: !2052)
!2113 = !DILocation(line: 76, column: 12, scope: !2114)
!2114 = distinct !DILexicalBlock(scope: !2052, file: !25, line: 76, column: 4)
!2115 = !DILocation(line: 77, column: 8, scope: !2052)
!2116 = !DILocation(line: 78, column: 12, scope: !2117)
!2117 = distinct !DILexicalBlock(scope: !2052, file: !25, line: 78, column: 4)
!2118 = !DILocation(line: 79, column: 8, scope: !2052)
!2119 = !DILocation(line: 80, column: 12, scope: !2120)
!2120 = distinct !DILexicalBlock(scope: !2052, file: !25, line: 80, column: 4)
!2121 = !DILocation(line: 81, column: 8, scope: !2052)
!2122 = !DILocalVariable(name: "f", scope: !2123, file: !25, line: 82, type: !2124, align: 4)
!2123 = distinct !DILexicalBlock(scope: !2052, file: !25, line: 82, column: 4)
!2124 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!2125 = !DILocation(line: 82, column: 10, scope: !2123)
!2126 = !DILocation(line: 82, column: 15, scope: !2123)
!2127 = !DILocation(line: 83, column: 23, scope: !2123)
!2128 = !DILocation(line: 83, column: 32, scope: !2123)
!2129 = !DILocation(line: 83, column: 42, scope: !2123)
!2130 = !DILocation(line: 83, column: 46, scope: !2123)
!2131 = !DILocation(line: 84, column: 8, scope: !2052)
!2132 = !DILocalVariable(name: "d", scope: !2133, file: !25, line: 85, type: !713, align: 8)
!2133 = distinct !DILexicalBlock(scope: !2052, file: !25, line: 85, column: 4)
!2134 = !DILocation(line: 85, column: 11, scope: !2133)
!2135 = !DILocation(line: 85, column: 16, scope: !2133)
!2136 = !DILocation(line: 86, column: 23, scope: !2133)
!2137 = !DILocation(line: 86, column: 32, scope: !2133)
!2138 = !DILocation(line: 86, column: 42, scope: !2133)
!2139 = !DILocation(line: 86, column: 46, scope: !2133)
!2140 = !DILocation(line: 88, column: 11, scope: !2141)
!2141 = distinct !DILexicalBlock(scope: !2052, file: !25, line: 88, column: 4)
!2142 = distinct !DISubprogram(name: "float_from_any", linkageName: "std.io.float_from_any", scope: !25, file: !25, line: 92, type: !2143, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2143 = !DISubroutineType(types: !2144)
!2144 = !{!115, !2145, !291}
!2145 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "FloatType*", baseType: !2146, size: 64, align: 64, dwarfAddressSpace: 0)
!2146 = !DIDerivedType(tag: DW_TAG_typedef, name: "FloatType", scope: !25, file: !25, line: 17, baseType: !713, align: 8)
!2147 = !DILocalVariable(name: "arg", arg: 1, scope: !2142, file: !25, line: 92, type: !291)
!2148 = !DILocation(line: 92, column: 34, scope: !2142)
!2149 = !DILocation(line: 97, column: 6, scope: !2142)
!2150 = !DILocation(line: 239, column: 20, scope: !2151, inlinedAt: !2153)
!2151 = distinct !DILexicalBlock(scope: !2152, file: !215, line: 240, column: 1)
!2152 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !215, file: !215, line: 239, scopeLine: 239, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2153 = !DILocation(line: 99, column: 25, scope: !2154)
!2154 = distinct !DILexicalBlock(scope: !2142, file: !25, line: 98, column: 2)
!2155 = !DILocation(line: 241, column: 20, scope: !2152, inlinedAt: !2153)
!2156 = !DILocation(line: 241, column: 30, scope: !2152, inlinedAt: !2153)
!2157 = !DILocation(line: 99, column: 10, scope: !2154)
!2158 = !DILocation(line: 101, column: 10, scope: !2159)
!2159 = distinct !DILexicalBlock(scope: !2142, file: !25, line: 101, column: 2)
!2160 = !DILocation(line: 103, column: 8, scope: !2159)
!2161 = !DILocation(line: 104, column: 23, scope: !2162)
!2162 = distinct !DILexicalBlock(scope: !2159, file: !25, line: 104, column: 4)
!2163 = !DILocation(line: 105, column: 8, scope: !2159)
!2164 = !DILocation(line: 106, column: 12, scope: !2165)
!2165 = distinct !DILexicalBlock(scope: !2159, file: !25, line: 106, column: 4)
!2166 = !DILocation(line: 107, column: 8, scope: !2159)
!2167 = !DILocation(line: 108, column: 12, scope: !2168)
!2168 = distinct !DILexicalBlock(scope: !2159, file: !25, line: 108, column: 4)
!2169 = !DILocation(line: 109, column: 8, scope: !2159)
!2170 = !DILocation(line: 110, column: 12, scope: !2171)
!2171 = distinct !DILexicalBlock(scope: !2159, file: !25, line: 110, column: 4)
!2172 = !DILocation(line: 111, column: 8, scope: !2159)
!2173 = !DILocation(line: 112, column: 12, scope: !2174)
!2174 = distinct !DILexicalBlock(scope: !2159, file: !25, line: 112, column: 4)
!2175 = !DILocation(line: 113, column: 8, scope: !2159)
!2176 = !DILocation(line: 114, column: 12, scope: !2177)
!2177 = distinct !DILexicalBlock(scope: !2159, file: !25, line: 114, column: 4)
!2178 = !DILocation(line: 115, column: 8, scope: !2159)
!2179 = !DILocation(line: 116, column: 12, scope: !2180)
!2180 = distinct !DILexicalBlock(scope: !2159, file: !25, line: 116, column: 4)
!2181 = !DILocation(line: 117, column: 8, scope: !2159)
!2182 = !DILocation(line: 118, column: 12, scope: !2183)
!2183 = distinct !DILexicalBlock(scope: !2159, file: !25, line: 118, column: 4)
!2184 = !DILocation(line: 119, column: 8, scope: !2159)
!2185 = !DILocation(line: 120, column: 12, scope: !2186)
!2186 = distinct !DILexicalBlock(scope: !2159, file: !25, line: 120, column: 4)
!2187 = !DILocation(line: 121, column: 8, scope: !2159)
!2188 = !DILocation(line: 122, column: 12, scope: !2189)
!2189 = distinct !DILexicalBlock(scope: !2159, file: !25, line: 122, column: 4)
!2190 = !DILocation(line: 123, column: 8, scope: !2159)
!2191 = !DILocation(line: 124, column: 12, scope: !2192)
!2192 = distinct !DILexicalBlock(scope: !2159, file: !25, line: 124, column: 4)
!2193 = !DILocation(line: 125, column: 8, scope: !2159)
!2194 = !DILocation(line: 126, column: 23, scope: !2195)
!2195 = distinct !DILexicalBlock(scope: !2159, file: !25, line: 126, column: 4)
!2196 = !DILocation(line: 127, column: 8, scope: !2159)
!2197 = !DILocation(line: 128, column: 23, scope: !2198)
!2198 = distinct !DILexicalBlock(scope: !2159, file: !25, line: 128, column: 4)
!2199 = !DILocation(line: 130, column: 11, scope: !2200)
!2200 = distinct !DILexicalBlock(scope: !2159, file: !25, line: 130, column: 4)
!2201 = distinct !DISubprogram(name: "simple_atoi", linkageName: "std.io.simple_atoi", scope: !25, file: !25, line: 143, type: !2202, scopeLine: 143, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2202 = !DISubroutineType(types: !2203)
!2203 = !{!94, !117, !208, !2204}
!2204 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !208, size: 64, align: 64, dwarfAddressSpace: 0)
!2205 = !DILocalVariable(name: "buf", arg: 1, scope: !2201, file: !25, line: 143, type: !117)
!2206 = !DILocation(line: 143, column: 27, scope: !2201)
!2207 = !DILocalVariable(name: "maxlen", arg: 2, scope: !2201, file: !25, line: 143, type: !207)
!2208 = !DILocation(line: 143, column: 36, scope: !2201)
!2209 = !DILocalVariable(name: "len_ptr", arg: 3, scope: !2201, file: !25, line: 143, type: !285)
!2210 = !DILocation(line: 143, column: 49, scope: !2201)
!2211 = !DILocalVariable(name: "i", scope: !2201, file: !25, line: 145, type: !94, align: 4)
!2212 = !DILocation(line: 145, column: 7, scope: !2201)
!2213 = !DILocation(line: 145, column: 11, scope: !2201)
!2214 = !DILocalVariable(name: "len", scope: !2201, file: !25, line: 146, type: !207, align: 8)
!2215 = !DILocation(line: 146, column: 6, scope: !2201)
!2216 = !DILocation(line: 146, column: 13, scope: !2201)
!2217 = !DILocation(line: 147, column: 2, scope: !2201)
!2218 = !DILocation(line: 147, column: 9, scope: !2219)
!2219 = distinct !DILexicalBlock(scope: !2201, file: !25, line: 147, column: 2)
!2220 = !DILocation(line: 147, column: 15, scope: !2219)
!2221 = !DILocalVariable(name: "c", scope: !2222, file: !25, line: 149, type: !20, align: 1)
!2222 = distinct !DILexicalBlock(scope: !2219, file: !25, line: 148, column: 2)
!2223 = !DILocation(line: 149, column: 8, scope: !2222)
!2224 = !DILocation(line: 149, column: 12, scope: !2222)
!2225 = !DILocation(line: 149, column: 16, scope: !2222)
!2226 = !DILocation(line: 9, column: 42, scope: !2227, inlinedAt: !2229)
!2227 = distinct !DISubprogram(name: "@is_digit", linkageName: "@is_digit", scope: !2228, file: !2228, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2228 = !DIFile(filename: "ascii.c3", directory: "/usr/lib/c3c/lib/std/core")
!2229 = !DILocation(line: 44, column: 38, scope: !2230, inlinedAt: !2231)
!2230 = distinct !DISubprogram(name: "is_digit", linkageName: "is_digit", scope: !2228, file: !2228, line: 44, scopeLine: 44, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2231 = !DILocation(line: 150, column: 8, scope: !2222)
!2232 = !DILocation(line: 150, column: 22, scope: !2222)
!2233 = !DILocation(line: 151, column: 7, scope: !2222)
!2234 = !DILocation(line: 151, column: 16, scope: !2222)
!2235 = !DILocation(line: 152, column: 3, scope: !2222)
!2236 = !DILocation(line: 154, column: 3, scope: !2201)
!2237 = !DILocation(line: 154, column: 13, scope: !2201)
!2238 = !DILocation(line: 155, column: 9, scope: !2201)
!2239 = distinct !DISubprogram(name: "fmt_u", linkageName: "std.io.fmt_u", scope: !25, file: !25, line: 184, type: !2240, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2240 = !DISubroutineType(types: !2241)
!2241 = !{!117, !1544, !117}
!2242 = !DILocalVariable(name: "x", arg: 1, scope: !2239, file: !25, line: 184, type: !1544)
!2243 = !DILocation(line: 184, column: 24, scope: !2239)
!2244 = !DILocalVariable(name: "s", arg: 2, scope: !2239, file: !25, line: 184, type: !117)
!2245 = !DILocation(line: 184, column: 33, scope: !2239)
!2246 = !DILocation(line: 186, column: 2, scope: !2239)
!2247 = !DILocation(line: 186, column: 9, scope: !2248)
!2248 = distinct !DILexicalBlock(scope: !2239, file: !25, line: 186, column: 2)
!2249 = !DILocation(line: 186, column: 36, scope: !2248)
!2250 = !DILocation(line: 186, column: 53, scope: !2248)
!2251 = !DILocation(line: 186, column: 46, scope: !2248)
!2252 = !DILocation(line: 186, column: 40, scope: !2248)
!2253 = !DILocation(line: 186, column: 24, scope: !2248)
!2254 = !DILocalVariable(name: "y", scope: !2255, file: !25, line: 187, type: !208, align: 8)
!2255 = distinct !DILexicalBlock(scope: !2239, file: !25, line: 187, column: 2)
!2256 = !DILocation(line: 187, column: 13, scope: !2255)
!2257 = !DILocation(line: 187, column: 17, scope: !2255)
!2258 = !DILocation(line: 187, column: 27, scope: !2255)
!2259 = !DILocation(line: 187, column: 42, scope: !2255)
!2260 = !DILocation(line: 187, column: 59, scope: !2255)
!2261 = !DILocation(line: 187, column: 52, scope: !2255)
!2262 = !DILocation(line: 187, column: 46, scope: !2255)
!2263 = !DILocation(line: 187, column: 30, scope: !2255)
!2264 = !DILocation(line: 188, column: 9, scope: !2239)
!2265 = !DILocation(line: 186, column: 34, scope: !2248)
!2266 = !DILocation(line: 187, column: 40, scope: !2255)
!2267 = distinct !DISubprogram(name: "printf_parse_format_field", linkageName: "std.io.printf_parse_format_field", scope: !25, file: !25, line: 672, type: !2268, scopeLine: 672, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2268 = !DISubroutineType(types: !2269)
!2269 = !{!115, !2270, !290, !208, !2204, !117, !208, !2204}
!2270 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!2271 = !DILocalVariable(name: "args_ptr", arg: 1, scope: !2267, file: !25, line: 673, type: !290)
!2272 = !DILocation(line: 673, column: 7, scope: !2267)
!2273 = !DILocalVariable(name: "args_len", arg: 2, scope: !2267, file: !25, line: 673, type: !207)
!2274 = !DILocation(line: 673, column: 21, scope: !2267)
!2275 = !DILocalVariable(name: "args_index_ptr", arg: 3, scope: !2267, file: !25, line: 673, type: !285)
!2276 = !DILocation(line: 673, column: 36, scope: !2267)
!2277 = !DILocalVariable(name: "format_ptr", arg: 4, scope: !2267, file: !25, line: 674, type: !117)
!2278 = !DILocation(line: 674, column: 8, scope: !2267)
!2279 = !DILocalVariable(name: "format_len", arg: 5, scope: !2267, file: !25, line: 674, type: !207)
!2280 = !DILocation(line: 674, column: 24, scope: !2267)
!2281 = !DILocalVariable(name: "index_ptr", arg: 6, scope: !2267, file: !25, line: 674, type: !285)
!2282 = !DILocation(line: 674, column: 41, scope: !2267)
!2283 = !DILocalVariable(name: "c", scope: !2267, file: !25, line: 676, type: !20, align: 1)
!2284 = !DILocation(line: 676, column: 7, scope: !2267)
!2285 = !DILocation(line: 676, column: 11, scope: !2267)
!2286 = !DILocation(line: 676, column: 23, scope: !2267)
!2287 = !DILocation(line: 9, column: 42, scope: !2288, inlinedAt: !2289)
!2288 = distinct !DISubprogram(name: "@is_digit", linkageName: "@is_digit", scope: !2228, file: !2228, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2289 = !DILocation(line: 44, column: 38, scope: !2290, inlinedAt: !2291)
!2290 = distinct !DISubprogram(name: "is_digit", linkageName: "is_digit", scope: !2228, file: !2228, line: 44, scopeLine: 44, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2291 = !DILocation(line: 677, column: 6, scope: !2267)
!2292 = !DILocation(line: 677, column: 63, scope: !2267)
!2293 = !DILocation(line: 677, column: 27, scope: !2267)
!2294 = !DILocation(line: 678, column: 6, scope: !2267)
!2295 = !DILocation(line: 678, column: 23, scope: !2267)
!2296 = !DILocalVariable(name: "len", scope: !2267, file: !25, line: 679, type: !207, align: 8)
!2297 = !DILocation(line: 679, column: 6, scope: !2267)
!2298 = !DILocation(line: 679, column: 16, scope: !2267)
!2299 = !DILocation(line: 679, column: 15, scope: !2267)
!2300 = !DILocation(line: 680, column: 6, scope: !2267)
!2301 = !DILocation(line: 680, column: 13, scope: !2267)
!2302 = !DILocation(line: 680, column: 32, scope: !2267)
!2303 = !DILocation(line: 681, column: 7, scope: !2267)
!2304 = !DILocation(line: 681, column: 25, scope: !2267)
!2305 = !DILocation(line: 681, column: 6, scope: !2267)
!2306 = !DILocation(line: 681, column: 42, scope: !2267)
!2307 = !DILocalVariable(name: "val", scope: !2267, file: !25, line: 682, type: !291, align: 8)
!2308 = !DILocation(line: 682, column: 6, scope: !2267)
!2309 = !DILocation(line: 682, column: 12, scope: !2267)
!2310 = !DILocation(line: 682, column: 23, scope: !2267)
!2311 = !DILocation(line: 682, column: 22, scope: !2267)
!2312 = !DILocation(line: 683, column: 7, scope: !2267)
!2313 = !DILocation(line: 683, column: 40, scope: !2267)
!2314 = !DILocalVariable(name: "intval", scope: !2267, file: !25, line: 684, type: !94, align: 4)
!2315 = !DILocation(line: 684, column: 8, scope: !2267)
!2316 = !DILocation(line: 684, column: 17, scope: !2317, inlinedAt: !2319)
!2317 = distinct !DILexicalBlock(scope: !2318, file: !1749, line: 22, column: 1)
!2318 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !1749, file: !1749, line: 21, scopeLine: 21, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2319 = !DILocation(line: 684, column: 17, scope: !2267)
!2320 = !DILocation(line: 19, column: 11, scope: !2317, inlinedAt: !2319)
!2321 = !DILocalVariable(name: "any_type", scope: !2318, file: !25, line: 23, type: !92, align: 8)
!2322 = !DILocation(line: 23, column: 9, scope: !2318, inlinedAt: !2319)
!2323 = !DILocation(line: 23, column: 20, scope: !2318, inlinedAt: !2319)
!2324 = !DILocalVariable(name: "kind", scope: !2318, file: !25, line: 24, type: !58, align: 1)
!2325 = !DILocation(line: 24, column: 11, scope: !2318, inlinedAt: !2319)
!2326 = !DILocation(line: 24, column: 18, scope: !2318, inlinedAt: !2319)
!2327 = !DILocalVariable(name: "is_mixed_signed", scope: !2318, file: !25, line: 25, type: !753, align: 1)
!2328 = !DILocation(line: 25, column: 7, scope: !2318, inlinedAt: !2319)
!2329 = !DILocation(line: 25, column: 41, scope: !2318, inlinedAt: !2319)
!2330 = !DILocation(line: 25, column: 25, scope: !2318, inlinedAt: !2319)
!2331 = !DILocalVariable(name: "max", scope: !2318, file: !25, line: 26, type: !3, align: 4)
!2332 = !DILocation(line: 26, column: 8, scope: !2318, inlinedAt: !2319)
!2333 = !DILocation(line: 26, column: 14, scope: !2318, inlinedAt: !2319)
!2334 = !DILocalVariable(name: "min", scope: !2318, file: !25, line: 27, type: !3, align: 4)
!2335 = !DILocation(line: 27, column: 8, scope: !2318, inlinedAt: !2319)
!2336 = !DILocation(line: 27, column: 14, scope: !2318, inlinedAt: !2319)
!2337 = !DILocation(line: 30, column: 8, scope: !2338, inlinedAt: !2319)
!2338 = distinct !DILexicalBlock(scope: !2318, file: !1749, line: 28, column: 2)
!2339 = !DILocalVariable(name: "c", scope: !2340, file: !25, line: 31, type: !1773, align: 1)
!2340 = distinct !DILexicalBlock(scope: !2338, file: !1749, line: 31, column: 4)
!2341 = !DILocation(line: 31, column: 10, scope: !2340, inlinedAt: !2319)
!2342 = !DILocation(line: 31, column: 22, scope: !2340, inlinedAt: !2319)
!2343 = !DILocation(line: 31, column: 15, scope: !2340, inlinedAt: !2319)
!2344 = !DILocation(line: 32, column: 8, scope: !2340, inlinedAt: !2319)
!2345 = !DILocation(line: 32, column: 27, scope: !2340, inlinedAt: !2319)
!2346 = !DILocation(line: 32, column: 41, scope: !2340, inlinedAt: !2319)
!2347 = !DILocation(line: 33, column: 11, scope: !2340, inlinedAt: !2319)
!2348 = !DILocation(line: 34, column: 8, scope: !2338, inlinedAt: !2319)
!2349 = !DILocalVariable(name: "s", scope: !2350, file: !25, line: 35, type: !1784, align: 2)
!2350 = distinct !DILexicalBlock(scope: !2338, file: !1749, line: 35, column: 4)
!2351 = !DILocation(line: 35, column: 10, scope: !2350, inlinedAt: !2319)
!2352 = !DILocation(line: 35, column: 23, scope: !2350, inlinedAt: !2319)
!2353 = !DILocation(line: 35, column: 15, scope: !2350, inlinedAt: !2319)
!2354 = !DILocation(line: 36, column: 8, scope: !2350, inlinedAt: !2319)
!2355 = !DILocation(line: 36, column: 27, scope: !2350, inlinedAt: !2319)
!2356 = !DILocation(line: 36, column: 41, scope: !2350, inlinedAt: !2319)
!2357 = !DILocation(line: 37, column: 8, scope: !2350, inlinedAt: !2319)
!2358 = !DILocation(line: 37, column: 12, scope: !2350, inlinedAt: !2319)
!2359 = !DILocation(line: 37, column: 19, scope: !2350, inlinedAt: !2319)
!2360 = !DILocation(line: 37, column: 23, scope: !2350, inlinedAt: !2319)
!2361 = !DILocation(line: 37, column: 35, scope: !2350, inlinedAt: !2319)
!2362 = !DILocation(line: 38, column: 11, scope: !2350, inlinedAt: !2319)
!2363 = !DILocation(line: 39, column: 8, scope: !2338, inlinedAt: !2319)
!2364 = !DILocalVariable(name: "i", scope: !2365, file: !25, line: 40, type: !3, align: 4)
!2365 = distinct !DILexicalBlock(scope: !2338, file: !1749, line: 40, column: 4)
!2366 = !DILocation(line: 40, column: 8, scope: !2365, inlinedAt: !2319)
!2367 = !DILocation(line: 40, column: 19, scope: !2365, inlinedAt: !2319)
!2368 = !DILocation(line: 40, column: 13, scope: !2365, inlinedAt: !2319)
!2369 = !DILocation(line: 41, column: 8, scope: !2365, inlinedAt: !2319)
!2370 = !DILocation(line: 41, column: 27, scope: !2365, inlinedAt: !2319)
!2371 = !DILocation(line: 41, column: 41, scope: !2365, inlinedAt: !2319)
!2372 = !DILocation(line: 42, column: 8, scope: !2365, inlinedAt: !2319)
!2373 = !DILocation(line: 42, column: 12, scope: !2365, inlinedAt: !2319)
!2374 = !DILocation(line: 42, column: 19, scope: !2365, inlinedAt: !2319)
!2375 = !DILocation(line: 42, column: 23, scope: !2365, inlinedAt: !2319)
!2376 = !DILocation(line: 42, column: 35, scope: !2365, inlinedAt: !2319)
!2377 = !DILocation(line: 43, column: 11, scope: !2365, inlinedAt: !2319)
!2378 = !DILocation(line: 44, column: 8, scope: !2338, inlinedAt: !2319)
!2379 = !DILocalVariable(name: "l", scope: !2380, file: !25, line: 45, type: !116, align: 8)
!2380 = distinct !DILexicalBlock(scope: !2338, file: !1749, line: 45, column: 4)
!2381 = !DILocation(line: 45, column: 9, scope: !2380, inlinedAt: !2319)
!2382 = !DILocation(line: 45, column: 21, scope: !2380, inlinedAt: !2319)
!2383 = !DILocation(line: 45, column: 14, scope: !2380, inlinedAt: !2319)
!2384 = !DILocation(line: 46, column: 8, scope: !2380, inlinedAt: !2319)
!2385 = !DILocation(line: 46, column: 27, scope: !2380, inlinedAt: !2319)
!2386 = !DILocation(line: 46, column: 41, scope: !2380, inlinedAt: !2319)
!2387 = !DILocation(line: 47, column: 8, scope: !2380, inlinedAt: !2319)
!2388 = !DILocation(line: 47, column: 12, scope: !2380, inlinedAt: !2319)
!2389 = !DILocation(line: 47, column: 19, scope: !2380, inlinedAt: !2319)
!2390 = !DILocation(line: 47, column: 23, scope: !2380, inlinedAt: !2319)
!2391 = !DILocation(line: 47, column: 35, scope: !2380, inlinedAt: !2319)
!2392 = !DILocation(line: 48, column: 11, scope: !2380, inlinedAt: !2319)
!2393 = !DILocation(line: 49, column: 8, scope: !2338, inlinedAt: !2319)
!2394 = !DILocalVariable(name: "i", scope: !2395, file: !25, line: 50, type: !1830, align: 16)
!2395 = distinct !DILexicalBlock(scope: !2338, file: !1749, line: 50, column: 4)
!2396 = !DILocation(line: 50, column: 11, scope: !2395, inlinedAt: !2319)
!2397 = !DILocation(line: 50, column: 25, scope: !2395, inlinedAt: !2319)
!2398 = !DILocation(line: 50, column: 16, scope: !2395, inlinedAt: !2319)
!2399 = !DILocation(line: 51, column: 8, scope: !2395, inlinedAt: !2319)
!2400 = !DILocation(line: 51, column: 27, scope: !2395, inlinedAt: !2319)
!2401 = !DILocation(line: 51, column: 41, scope: !2395, inlinedAt: !2319)
!2402 = !DILocation(line: 52, column: 8, scope: !2395, inlinedAt: !2319)
!2403 = !DILocation(line: 52, column: 12, scope: !2395, inlinedAt: !2319)
!2404 = !DILocation(line: 52, column: 19, scope: !2395, inlinedAt: !2319)
!2405 = !DILocation(line: 52, column: 23, scope: !2395, inlinedAt: !2319)
!2406 = !DILocation(line: 52, column: 35, scope: !2395, inlinedAt: !2319)
!2407 = !DILocation(line: 53, column: 11, scope: !2395, inlinedAt: !2319)
!2408 = !DILocation(line: 54, column: 8, scope: !2338, inlinedAt: !2319)
!2409 = !DILocalVariable(name: "c", scope: !2410, file: !25, line: 55, type: !20, align: 1)
!2410 = distinct !DILexicalBlock(scope: !2338, file: !1749, line: 55, column: 4)
!2411 = !DILocation(line: 55, column: 9, scope: !2410, inlinedAt: !2319)
!2412 = !DILocation(line: 55, column: 21, scope: !2410, inlinedAt: !2319)
!2413 = !DILocation(line: 55, column: 14, scope: !2410, inlinedAt: !2319)
!2414 = !DILocation(line: 56, column: 8, scope: !2410, inlinedAt: !2319)
!2415 = !DILocation(line: 56, column: 12, scope: !2410, inlinedAt: !2319)
!2416 = !DILocation(line: 56, column: 24, scope: !2410, inlinedAt: !2319)
!2417 = !DILocation(line: 57, column: 11, scope: !2410, inlinedAt: !2319)
!2418 = !DILocation(line: 58, column: 8, scope: !2338, inlinedAt: !2319)
!2419 = !DILocalVariable(name: "s", scope: !2420, file: !25, line: 59, type: !1856, align: 2)
!2420 = distinct !DILexicalBlock(scope: !2338, file: !1749, line: 59, column: 4)
!2421 = !DILocation(line: 59, column: 11, scope: !2420, inlinedAt: !2319)
!2422 = !DILocation(line: 59, column: 25, scope: !2420, inlinedAt: !2319)
!2423 = !DILocation(line: 59, column: 16, scope: !2420, inlinedAt: !2319)
!2424 = !DILocation(line: 60, column: 8, scope: !2420, inlinedAt: !2319)
!2425 = !DILocation(line: 60, column: 12, scope: !2420, inlinedAt: !2319)
!2426 = !DILocation(line: 60, column: 19, scope: !2420, inlinedAt: !2319)
!2427 = !DILocation(line: 60, column: 23, scope: !2420, inlinedAt: !2319)
!2428 = !DILocation(line: 60, column: 35, scope: !2420, inlinedAt: !2319)
!2429 = !DILocation(line: 61, column: 11, scope: !2420, inlinedAt: !2319)
!2430 = !DILocation(line: 62, column: 8, scope: !2338, inlinedAt: !2319)
!2431 = !DILocalVariable(name: "i", scope: !2432, file: !25, line: 63, type: !94, align: 4)
!2432 = distinct !DILexicalBlock(scope: !2338, file: !1749, line: 63, column: 4)
!2433 = !DILocation(line: 63, column: 9, scope: !2432, inlinedAt: !2319)
!2434 = !DILocation(line: 63, column: 21, scope: !2432, inlinedAt: !2319)
!2435 = !DILocation(line: 63, column: 14, scope: !2432, inlinedAt: !2319)
!2436 = !DILocation(line: 64, column: 8, scope: !2432, inlinedAt: !2319)
!2437 = !DILocation(line: 64, column: 12, scope: !2432, inlinedAt: !2319)
!2438 = !DILocation(line: 64, column: 19, scope: !2432, inlinedAt: !2319)
!2439 = !DILocation(line: 64, column: 23, scope: !2432, inlinedAt: !2319)
!2440 = !DILocation(line: 64, column: 35, scope: !2432, inlinedAt: !2319)
!2441 = !DILocation(line: 65, column: 11, scope: !2432, inlinedAt: !2319)
!2442 = !DILocation(line: 66, column: 8, scope: !2338, inlinedAt: !2319)
!2443 = !DILocalVariable(name: "l", scope: !2444, file: !25, line: 67, type: !208, align: 8)
!2444 = distinct !DILexicalBlock(scope: !2338, file: !1749, line: 67, column: 4)
!2445 = !DILocation(line: 67, column: 10, scope: !2444, inlinedAt: !2319)
!2446 = !DILocation(line: 67, column: 23, scope: !2444, inlinedAt: !2319)
!2447 = !DILocation(line: 67, column: 15, scope: !2444, inlinedAt: !2319)
!2448 = !DILocation(line: 68, column: 8, scope: !2444, inlinedAt: !2319)
!2449 = !DILocation(line: 68, column: 12, scope: !2444, inlinedAt: !2319)
!2450 = !DILocation(line: 68, column: 19, scope: !2444, inlinedAt: !2319)
!2451 = !DILocation(line: 68, column: 23, scope: !2444, inlinedAt: !2319)
!2452 = !DILocation(line: 68, column: 35, scope: !2444, inlinedAt: !2319)
!2453 = !DILocation(line: 69, column: 11, scope: !2444, inlinedAt: !2319)
!2454 = !DILocation(line: 70, column: 8, scope: !2338, inlinedAt: !2319)
!2455 = !DILocalVariable(name: "i", scope: !2456, file: !25, line: 71, type: !1544, align: 16)
!2456 = distinct !DILexicalBlock(scope: !2338, file: !1749, line: 71, column: 4)
!2457 = !DILocation(line: 71, column: 12, scope: !2456, inlinedAt: !2319)
!2458 = !DILocation(line: 71, column: 27, scope: !2456, inlinedAt: !2319)
!2459 = !DILocation(line: 71, column: 17, scope: !2456, inlinedAt: !2319)
!2460 = !DILocation(line: 72, column: 8, scope: !2456, inlinedAt: !2319)
!2461 = !DILocation(line: 72, column: 12, scope: !2456, inlinedAt: !2319)
!2462 = !DILocation(line: 72, column: 19, scope: !2456, inlinedAt: !2319)
!2463 = !DILocation(line: 72, column: 23, scope: !2456, inlinedAt: !2319)
!2464 = !DILocation(line: 72, column: 35, scope: !2456, inlinedAt: !2319)
!2465 = !DILocation(line: 73, column: 11, scope: !2456, inlinedAt: !2319)
!2466 = !DILocation(line: 206, column: 33, scope: !2467, inlinedAt: !2468)
!2467 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !215, file: !215, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2468 = !DILocation(line: 75, column: 4, scope: !2469, inlinedAt: !2319)
!2469 = distinct !DILexicalBlock(scope: !2338, file: !1749, line: 75, column: 4)
!2470 = !DILocation(line: 206, column: 2, scope: !2467, inlinedAt: !2468)
!2471 = !DILocation(line: 208, column: 2, scope: !2467, inlinedAt: !2468)
!2472 = !DILocation(line: 685, column: 9, scope: !2267)
!2473 = !DILocation(line: 685, column: 19, scope: !2267)
!2474 = distinct !DISubprogram(name: "init", linkageName: "std.io.MultiWriter.init", scope: !2475, file: !2475, line: 18, type: !2476, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2475 = !DIFile(filename: "multiwriter.c3", directory: "/usr/lib/c3c/lib/std/io/stream")
!2476 = !DISubroutineType(types: !2477)
!2477 = !{!2478, !2478, !2487, !2482}
!2478 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "MultiWriter*", baseType: !2479, size: 64, align: 64, dwarfAddressSpace: 0)
!2479 = !DICompositeType(tag: DW_TAG_structure_type, name: "MultiWriter", scope: !2475, file: !2475, line: 6, size: 256, align: 64, elements: !2480, identifier: "std.io.MultiWriter")
!2480 = !{!2481, !2486}
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "writers", scope: !2479, file: !2475, line: 8, baseType: !2482, size: 128, align: 64)
!2482 = !DICompositeType(tag: DW_TAG_structure_type, name: "OutStream[]", size: 128, align: 64, elements: !2483, identifier: "OutStream[]")
!2483 = !{!2484, !2485}
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2482, baseType: !346, size: 64, align: 64)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2482, baseType: !207, size: 64, align: 64, offset: 64)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !2479, file: !2475, line: 9, baseType: !2487, size: 128, align: 64, offset: 128)
!2487 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !2488, identifier: "Allocator")
!2488 = !{!2489, !2490}
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2487, baseType: !11, size: 64, align: 64)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2487, baseType: !92, size: 64, align: 64, offset: 64)
!2491 = !DILocation(line: 19, column: 1, scope: !2474)
!2492 = !DILocalVariable(name: "self", arg: 1, scope: !2474, file: !2475, line: 18, type: !2478)
!2493 = !DILocation(line: 18, column: 34, scope: !2474)
!2494 = !DILocalVariable(name: "allocator", arg: 2, scope: !2474, file: !2475, line: 18, type: !2487)
!2495 = !DILocation(line: 18, column: 51, scope: !2474)
!2496 = !DILocalVariable(name: "writers", arg: 3, scope: !2474, file: !2475, line: 18, type: !2482)
!2497 = !DILocation(line: 18, column: 75, scope: !2474)
!2498 = !DILocation(line: 15, column: 11, scope: !2499)
!2499 = distinct !DILexicalBlock(scope: !2474, file: !2475, line: 19, column: 1)
!2500 = !DILocation(line: 16, column: 11, scope: !2499)
!2501 = !DILocalVariable(name: "copy", scope: !2474, file: !2475, line: 20, type: !2482, align: 8)
!2502 = !DILocation(line: 20, column: 14, scope: !2474)
!2503 = !DILocation(line: 20, column: 64, scope: !2474)
!2504 = !DILocation(line: 269, column: 55, scope: !2505, inlinedAt: !2507)
!2505 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !2506, file: !2506, line: 267, scopeLine: 267, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2506 = !DIFile(filename: "mem_allocator.c3", directory: "/usr/lib/c3c/lib/std/core")
!2507 = !DILocation(line: 261, column: 9, scope: !2508, inlinedAt: !2509)
!2508 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !2506, file: !2506, line: 259, scopeLine: 259, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2509 = !DILocation(line: 20, column: 21, scope: !2474)
!2510 = !DILocation(line: 269, column: 40, scope: !2505, inlinedAt: !2507)
!2511 = !DILocation(line: 96, column: 6, scope: !2512, inlinedAt: !2513)
!2512 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !2506, file: !2506, line: 94, scopeLine: 94, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2513 = !DILocation(line: 269, column: 18, scope: !2505, inlinedAt: !2507)
!2514 = !DILocation(line: 96, column: 20, scope: !2512, inlinedAt: !2513)
!2515 = !DILocation(line: 97, column: 27, scope: !2512, inlinedAt: !2513)
!2516 = !DILocation(line: 37, column: 12, scope: !2512, inlinedAt: !2513)
!2517 = !DILocation(line: 973, column: 9, scope: !2518, inlinedAt: !2519)
!2518 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !760, file: !760, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2519 = !DILocation(line: 37, column: 26, scope: !2512, inlinedAt: !2513)
!2520 = !DILocation(line: 973, column: 20, scope: !2518, inlinedAt: !2519)
!2521 = !DILocation(line: 973, column: 25, scope: !2518, inlinedAt: !2519)
!2522 = !DILocation(line: 97, column: 9, scope: !2512, inlinedAt: !2513)
!2523 = !DILocation(line: 269, column: 67, scope: !2505, inlinedAt: !2507)
!2524 = !DILocation(line: 269, column: 10, scope: !2505, inlinedAt: !2507)
!2525 = !DILocation(line: 21, column: 13, scope: !2474)
!2526 = !DILocation(line: 21, column: 21, scope: !2474)
!2527 = !DILocation(line: 21, column: 2, scope: !2474)
!2528 = !DILocation(line: 21, column: 7, scope: !2474)
!2529 = !DILocation(line: 22, column: 3, scope: !2474)
!2530 = !DILocation(line: 22, column: 23, scope: !2474)
!2531 = !DILocation(line: 22, column: 42, scope: !2474)
!2532 = !DILocation(line: 23, column: 9, scope: !2474)
!2533 = distinct !DISubprogram(name: "tinit", linkageName: "std.io.MultiWriter.tinit", scope: !2475, file: !2475, line: 31, type: !2534, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2534 = !DISubroutineType(types: !2535)
!2535 = !{!2478, !2478, !2482}
!2536 = !DILocation(line: 32, column: 1, scope: !2533)
!2537 = !DILocalVariable(name: "self", arg: 1, scope: !2533, file: !2475, line: 31, type: !2478)
!2538 = !DILocation(line: 31, column: 35, scope: !2533)
!2539 = !DILocalVariable(name: "writers", arg: 2, scope: !2533, file: !2475, line: 31, type: !2482)
!2540 = !DILocation(line: 31, column: 55, scope: !2533)
!2541 = !DILocation(line: 28, column: 11, scope: !2542)
!2542 = distinct !DILexicalBlock(scope: !2533, file: !2475, line: 32, column: 1)
!2543 = !DILocation(line: 29, column: 11, scope: !2542)
!2544 = !DILocation(line: 33, column: 9, scope: !2533)
!2545 = !DILocation(line: 33, column: 19, scope: !2533)
!2546 = !DILocation(line: 33, column: 28, scope: !2533)
!2547 = !DILocation(line: 15, column: 11, scope: !2533)
!2548 = !DILocation(line: 16, column: 11, scope: !2533)
!2549 = distinct !DISubprogram(name: "free", linkageName: "std.io.MultiWriter.free", scope: !2475, file: !2475, line: 36, type: !2550, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2550 = !DISubroutineType(types: !2551)
!2551 = !{null, !2478}
!2552 = !DILocation(line: 37, column: 1, scope: !2549)
!2553 = !DILocalVariable(name: "self", arg: 1, scope: !2549, file: !2475, line: 36, type: !2478)
!2554 = !DILocation(line: 36, column: 26, scope: !2549)
!2555 = !DILocation(line: 38, column: 7, scope: !2549)
!2556 = !DILocation(line: 38, column: 29, scope: !2549)
!2557 = !DILocation(line: 39, column: 18, scope: !2549)
!2558 = !DILocation(line: 39, column: 34, scope: !2549)
!2559 = !DILocation(line: 118, column: 6, scope: !2560, inlinedAt: !2561)
!2560 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2506, file: !2506, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2561 = !DILocation(line: 39, column: 2, scope: !2549)
!2562 = !DILocation(line: 118, column: 18, scope: !2560, inlinedAt: !2561)
!2563 = !DILocation(line: 122, column: 20, scope: !2560, inlinedAt: !2561)
!2564 = !DILocation(line: 122, column: 2, scope: !2560, inlinedAt: !2561)
!2565 = !DILocation(line: 40, column: 3, scope: !2549)
!2566 = distinct !DISubprogram(name: "write", linkageName: "std.io.MultiWriter.write", scope: !2475, file: !2475, line: 43, type: !2567, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2567 = !DISubroutineType(types: !2568)
!2568 = !{!115, !285, !2478, !203}
!2569 = !DILocation(line: 44, column: 1, scope: !2566)
!2570 = !DILocalVariable(name: "self", arg: 1, scope: !2566, file: !2475, line: 43, type: !2478)
!2571 = !DILocation(line: 43, column: 27, scope: !2566)
!2572 = !DILocalVariable(name: "bytes", arg: 2, scope: !2566, file: !2475, line: 43, type: !203)
!2573 = !DILocation(line: 43, column: 41, scope: !2566)
!2574 = !DILocalVariable(name: "n", scope: !2566, file: !2475, line: 45, type: !207, align: 8)
!2575 = !DILocation(line: 45, column: 6, scope: !2566)
!2576 = !DILocation(line: 46, column: 15, scope: !2577)
!2577 = distinct !DILexicalBlock(scope: !2566, file: !2475, line: 46, column: 2)
!2578 = !DILocalVariable(name: ".temp", scope: !2577, file: !2475, line: 46, type: !207, align: 8)
!2579 = !DILocalVariable(name: "w", scope: !2580, file: !2475, line: 46, type: !159, align: 8)
!2580 = distinct !DILexicalBlock(scope: !2577, file: !2475, line: 47, column: 2)
!2581 = !DILocation(line: 46, column: 11, scope: !2580)
!2582 = !DILocation(line: 46, column: 15, scope: !2580)
!2583 = !DILocation(line: 48, column: 15, scope: !2584)
!2584 = distinct !DILexicalBlock(scope: !2580, file: !2475, line: 47, column: 2)
!2585 = !DILocation(line: 48, column: 7, scope: !2584)
!2586 = !DILocation(line: 49, column: 7, scope: !2584)
!2587 = !DILocation(line: 49, column: 12, scope: !2584)
!2588 = !DILocation(line: 49, column: 30, scope: !2584)
!2589 = !DILocation(line: 51, column: 9, scope: !2566)
!2590 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.MultiWriter.write_byte", scope: !2475, file: !2475, line: 54, type: !2591, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2591 = !DISubroutineType(types: !2592)
!2592 = !{!115, !11, !2478, !20}
!2593 = !DILocation(line: 55, column: 1, scope: !2590)
!2594 = !DILocalVariable(name: "self", arg: 1, scope: !2590, file: !2475, line: 54, type: !2478)
!2595 = !DILocation(line: 54, column: 33, scope: !2590)
!2596 = !DILocalVariable(name: "c", arg: 2, scope: !2590, file: !2475, line: 54, type: !20)
!2597 = !DILocation(line: 54, column: 45, scope: !2590)
!2598 = !DILocalVariable(name: "data", scope: !2590, file: !2475, line: 56, type: !2599, align: 1)
!2599 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 8, align: 8, elements: !2600)
!2600 = !{!2601}
!2601 = !DISubrange(count: 1, lowerBound: 0)
!2602 = !DILocation(line: 56, column: 10, scope: !2590)
!2603 = !DILocation(line: 57, column: 12, scope: !2590)
!2604 = !DILocation(line: 58, column: 13, scope: !2590)
!2605 = !DILocation(line: 58, column: 2, scope: !2590)
!2606 = distinct !DISubprogram(name: "len", linkageName: "std.io.ByteReader.len", scope: !53, file: !53, line: 9, type: !2607, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2607 = !DISubroutineType(types: !2608)
!2608 = !{!207, !2609}
!2609 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteReader*", baseType: !593, size: 64, align: 64, dwarfAddressSpace: 0)
!2610 = !DILocation(line: 10, column: 1, scope: !2606)
!2611 = !DILocalVariable(name: "self", arg: 1, scope: !2606, file: !53, line: 9, type: !2609)
!2612 = !DILocation(line: 9, column: 23, scope: !2606)
!2613 = !DILocation(line: 11, column: 9, scope: !2606)
!2614 = distinct !DISubprogram(name: "init", linkageName: "std.io.ByteReader.init", scope: !53, file: !53, line: 14, type: !2615, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2615 = !DISubroutineType(types: !2616)
!2616 = !{!2609, !2609, !203}
!2617 = !DILocation(line: 15, column: 1, scope: !2614)
!2618 = !DILocalVariable(name: "self", arg: 1, scope: !2614, file: !53, line: 14, type: !2609)
!2619 = !DILocation(line: 14, column: 32, scope: !2614)
!2620 = !DILocalVariable(name: "bytes", arg: 2, scope: !2614, file: !53, line: 14, type: !203)
!2621 = !DILocation(line: 14, column: 46, scope: !2614)
!2622 = !DILocation(line: 16, column: 3, scope: !2614)
!2623 = !DILocation(line: 16, column: 21, scope: !2614)
!2624 = !DILocation(line: 17, column: 9, scope: !2614)
!2625 = distinct !DISubprogram(name: "read", linkageName: "std.io.ByteReader.read", scope: !53, file: !53, line: 20, type: !2626, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2626 = !DISubroutineType(types: !2627)
!2627 = !{!115, !285, !2609, !203}
!2628 = !DILocation(line: 21, column: 1, scope: !2625)
!2629 = !DILocalVariable(name: "self", arg: 1, scope: !2625, file: !53, line: 20, type: !2609)
!2630 = !DILocation(line: 20, column: 25, scope: !2625)
!2631 = !DILocalVariable(name: "bytes", arg: 2, scope: !2625, file: !53, line: 20, type: !203)
!2632 = !DILocation(line: 20, column: 39, scope: !2625)
!2633 = !DILocation(line: 22, column: 6, scope: !2625)
!2634 = !DILocation(line: 22, column: 20, scope: !2625)
!2635 = !DILocation(line: 22, column: 43, scope: !2625)
!2636 = !DILocalVariable(name: "len", scope: !2625, file: !53, line: 23, type: !207, align: 8)
!2637 = !DILocation(line: 23, column: 6, scope: !2625)
!2638 = !DILocation(line: 23, column: 16, scope: !2625)
!2639 = !DILocation(line: 23, column: 33, scope: !2625)
!2640 = !DILocation(line: 23, column: 45, scope: !2625)
!2641 = !DILocation(line: 17, column: 10, scope: !2642, inlinedAt: !2643)
!2642 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !686, file: !686, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2643 = !DILocation(line: 100, column: 10, scope: !2644, inlinedAt: !2645)
!2644 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !686, file: !686, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2645 = !DILocation(line: 23, column: 12, scope: !2625)
!2646 = !DILocation(line: 17, column: 14, scope: !2642, inlinedAt: !2643)
!2647 = !DILocation(line: 100, column: 31, scope: !2644, inlinedAt: !2645)
!2648 = !DILocation(line: 100, column: 35, scope: !2644, inlinedAt: !2645)
!2649 = !DILocation(line: 24, column: 6, scope: !2625)
!2650 = !DILocation(line: 24, column: 23, scope: !2625)
!2651 = !DILocation(line: 25, column: 12, scope: !2625)
!2652 = !DILocation(line: 25, column: 24, scope: !2625)
!2653 = !DILocation(line: 25, column: 35, scope: !2625)
!2654 = !DILocation(line: 329, column: 23, scope: !2655, inlinedAt: !2658)
!2655 = distinct !DILexicalBlock(scope: !2657, file: !2656, line: 330, column: 1)
!2656 = !DIFile(filename: "mem.c3", directory: "/usr/lib/c3c/lib/std/core")
!2657 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !2656, file: !2656, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2658 = !DILocation(line: 25, column: 2, scope: !2625)
!2659 = !DILocation(line: 326, column: 11, scope: !2655, inlinedAt: !2658)
!2660 = !DILocation(line: 326, column: 26, scope: !2655, inlinedAt: !2658)
!2661 = !DILocation(line: 25, column: 2, scope: !2655, inlinedAt: !2658)
!2662 = !DILocation(line: 327, column: 11, scope: !2655, inlinedAt: !2658)
!2663 = !DILocation(line: 327, column: 23, scope: !2655, inlinedAt: !2658)
!2664 = !DILocation(line: 327, column: 29, scope: !2655, inlinedAt: !2658)
!2665 = !DILocation(line: 327, column: 36, scope: !2655, inlinedAt: !2658)
!2666 = !DILocation(line: 327, column: 43, scope: !2655, inlinedAt: !2658)
!2667 = !DILocation(line: 327, column: 49, scope: !2655, inlinedAt: !2658)
!2668 = !DILocation(line: 327, column: 56, scope: !2655, inlinedAt: !2658)
!2669 = !DILocation(line: 331, column: 11, scope: !2657, inlinedAt: !2658)
!2670 = !DILocation(line: 331, column: 16, scope: !2657, inlinedAt: !2658)
!2671 = !DILocation(line: 331, column: 21, scope: !2657, inlinedAt: !2658)
!2672 = !DILocation(line: 331, column: 26, scope: !2657, inlinedAt: !2658)
!2673 = !DILocation(line: 26, column: 2, scope: !2625)
!2674 = !DILocation(line: 26, column: 16, scope: !2625)
!2675 = !DILocation(line: 27, column: 9, scope: !2625)
!2676 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ByteReader.read_byte", scope: !53, file: !53, line: 30, type: !2677, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2677 = !DISubroutineType(types: !2678)
!2678 = !{!115, !117, !2609}
!2679 = !DILocation(line: 31, column: 1, scope: !2676)
!2680 = !DILocalVariable(name: "self", arg: 1, scope: !2676, file: !53, line: 30, type: !2609)
!2681 = !DILocation(line: 30, column: 31, scope: !2676)
!2682 = !DILocation(line: 32, column: 6, scope: !2676)
!2683 = !DILocation(line: 32, column: 20, scope: !2676)
!2684 = !DILocation(line: 32, column: 43, scope: !2676)
!2685 = !DILocation(line: 33, column: 9, scope: !2676)
!2686 = !DILocation(line: 33, column: 20, scope: !2676)
!2687 = distinct !DISubprogram(name: "pushback_byte", linkageName: "std.io.ByteReader.pushback_byte", scope: !53, file: !53, line: 36, type: !2688, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2688 = !DISubroutineType(types: !2689)
!2689 = !{!115, !11, !2609}
!2690 = !DILocation(line: 37, column: 1, scope: !2687)
!2691 = !DILocalVariable(name: "self", arg: 1, scope: !2687, file: !53, line: 36, type: !2609)
!2692 = !DILocation(line: 36, column: 35, scope: !2687)
!2693 = !DILocation(line: 38, column: 7, scope: !2687)
!2694 = !DILocation(line: 38, column: 26, scope: !2687)
!2695 = !DILocation(line: 39, column: 2, scope: !2687)
!2696 = distinct !DISubprogram(name: "seek", linkageName: "std.io.ByteReader.seek", scope: !53, file: !53, line: 42, type: !2697, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2697 = !DISubroutineType(types: !2698)
!2698 = !{!115, !285, !2609, !116, !52}
!2699 = !DILocation(line: 43, column: 1, scope: !2696)
!2700 = !DILocalVariable(name: "self", arg: 1, scope: !2696, file: !53, line: 42, type: !2609)
!2701 = !DILocation(line: 42, column: 25, scope: !2696)
!2702 = !DILocalVariable(name: "offset", arg: 2, scope: !2696, file: !53, line: 42, type: !668)
!2703 = !DILocation(line: 42, column: 36, scope: !2696)
!2704 = !DILocalVariable(name: "seek", arg: 3, scope: !2696, file: !53, line: 42, type: !52)
!2705 = !DILocation(line: 42, column: 49, scope: !2696)
!2706 = !DILocalVariable(name: "new_index", scope: !2696, file: !53, line: 44, type: !668, align: 8)
!2707 = !DILocation(line: 44, column: 6, scope: !2696)
!2708 = !DILocation(line: 47, column: 25, scope: !2709)
!2709 = distinct !DILexicalBlock(scope: !2710, file: !53, line: 47, column: 13)
!2710 = distinct !DILexicalBlock(scope: !2696, file: !53, line: 45, column: 2)
!2711 = !DILocation(line: 48, column: 28, scope: !2712)
!2712 = distinct !DILexicalBlock(scope: !2710, file: !53, line: 48, column: 16)
!2713 = !DILocation(line: 48, column: 41, scope: !2712)
!2714 = !DILocation(line: 49, column: 25, scope: !2715)
!2715 = distinct !DILexicalBlock(scope: !2710, file: !53, line: 49, column: 13)
!2716 = !DILocation(line: 49, column: 42, scope: !2715)
!2717 = !DILocation(line: 51, column: 6, scope: !2696)
!2718 = !DILocation(line: 51, column: 28, scope: !2696)
!2719 = !DILocation(line: 52, column: 2, scope: !2696)
!2720 = !DILocation(line: 52, column: 15, scope: !2696)
!2721 = !DILocation(line: 53, column: 9, scope: !2696)
!2722 = distinct !DISubprogram(name: "write_to", linkageName: "std.io.ByteReader.write_to", scope: !53, file: !53, line: 56, type: !2723, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2723 = !DISubroutineType(types: !2724)
!2724 = !{!115, !285, !2609, !159}
!2725 = !DILocation(line: 57, column: 1, scope: !2722)
!2726 = !DILocalVariable(name: "self", arg: 1, scope: !2722, file: !53, line: 56, type: !2609)
!2727 = !DILocation(line: 56, column: 29, scope: !2722)
!2728 = !DILocalVariable(name: "writer", arg: 2, scope: !2722, file: !53, line: 56, type: !159)
!2729 = !DILocation(line: 56, column: 46, scope: !2722)
!2730 = !DILocation(line: 58, column: 6, scope: !2722)
!2731 = !DILocation(line: 58, column: 20, scope: !2722)
!2732 = !DILocation(line: 58, column: 43, scope: !2722)
!2733 = !DILocalVariable(name: "written", scope: !2722, file: !53, line: 59, type: !207, align: 8)
!2734 = !DILocation(line: 59, column: 6, scope: !2722)
!2735 = !DILocation(line: 59, column: 29, scope: !2722)
!2736 = !DILocation(line: 59, column: 40, scope: !2722)
!2737 = !DILocation(line: 59, column: 16, scope: !2722)
!2738 = !DILocation(line: 60, column: 2, scope: !2722)
!2739 = !DILocation(line: 60, column: 16, scope: !2722)
!2740 = !DILocation(line: 61, column: 9, scope: !2722)
!2741 = !DILocation(line: 61, column: 23, scope: !2722)
!2742 = !DILocation(line: 62, column: 9, scope: !2722)
!2743 = distinct !DISubprogram(name: "available", linkageName: "std.io.ByteReader.available", scope: !53, file: !53, line: 65, type: !2744, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2744 = !DISubroutineType(types: !2745)
!2745 = !{!115, !285, !2609}
!2746 = !DILocation(line: 66, column: 1, scope: !2743)
!2747 = !DILocalVariable(name: "self", arg: 1, scope: !2743, file: !53, line: 65, type: !2609)
!2748 = !DILocation(line: 65, column: 30, scope: !2743)
!2749 = !DILocation(line: 67, column: 16, scope: !2743)
!2750 = !DILocation(line: 67, column: 33, scope: !2743)
!2751 = !DILocation(line: 47, column: 10, scope: !2752, inlinedAt: !2753)
!2752 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !686, file: !686, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2753 = !DILocation(line: 116, column: 10, scope: !2754, inlinedAt: !2755)
!2754 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !686, file: !686, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2755 = !DILocation(line: 67, column: 9, scope: !2743)
!2756 = !DILocation(line: 47, column: 14, scope: !2752, inlinedAt: !2753)
!2757 = !DILocation(line: 116, column: 34, scope: !2754, inlinedAt: !2755)
!2758 = !DILocation(line: 116, column: 38, scope: !2754, inlinedAt: !2755)
!2759 = distinct !DISubprogram(name: "init", linkageName: "std.io.MultiReader.init", scope: !2760, file: !2760, line: 21, type: !2761, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2760 = !DIFile(filename: "multireader.c3", directory: "/usr/lib/c3c/lib/std/io/stream")
!2761 = !DISubroutineType(types: !2762)
!2762 = !{!2763, !2763, !2487, !2767}
!2763 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "MultiReader*", baseType: !2764, size: 64, align: 64, dwarfAddressSpace: 0)
!2764 = !DICompositeType(tag: DW_TAG_structure_type, name: "MultiReader", scope: !2760, file: !2760, line: 7, size: 320, align: 64, elements: !2765, identifier: "std.io.MultiReader")
!2765 = !{!2766, !2772, !2773}
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "readers", scope: !2764, file: !2760, line: 9, baseType: !2767, size: 128, align: 64)
!2767 = !DICompositeType(tag: DW_TAG_structure_type, name: "InStream[]", size: 128, align: 64, elements: !2768, identifier: "InStream[]")
!2768 = !{!2769, !2771}
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2767, baseType: !2770, size: 64, align: 64)
!2770 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "InStream*", baseType: !88, size: 64, align: 64, dwarfAddressSpace: 0)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2767, baseType: !207, size: 64, align: 64, offset: 64)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2764, file: !2760, line: 10, baseType: !207, size: 64, align: 64, offset: 128)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !2764, file: !2760, line: 11, baseType: !2487, size: 128, align: 64, offset: 192)
!2774 = !DILocation(line: 22, column: 1, scope: !2759)
!2775 = !DILocalVariable(name: "self", arg: 1, scope: !2759, file: !2760, line: 21, type: !2763)
!2776 = !DILocation(line: 21, column: 34, scope: !2759)
!2777 = !DILocalVariable(name: "allocator", arg: 2, scope: !2759, file: !2760, line: 21, type: !2487)
!2778 = !DILocation(line: 21, column: 51, scope: !2759)
!2779 = !DILocalVariable(name: "readers", arg: 3, scope: !2759, file: !2760, line: 21, type: !2767)
!2780 = !DILocation(line: 21, column: 74, scope: !2759)
!2781 = !DILocation(line: 18, column: 11, scope: !2782)
!2782 = distinct !DILexicalBlock(scope: !2759, file: !2760, line: 22, column: 1)
!2783 = !DILocalVariable(name: "copy", scope: !2759, file: !2760, line: 23, type: !2767, align: 8)
!2784 = !DILocation(line: 23, column: 13, scope: !2759)
!2785 = !DILocation(line: 23, column: 62, scope: !2759)
!2786 = !DILocation(line: 269, column: 55, scope: !2787, inlinedAt: !2788)
!2787 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !2506, file: !2506, line: 267, scopeLine: 267, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2788 = !DILocation(line: 261, column: 9, scope: !2789, inlinedAt: !2790)
!2789 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !2506, file: !2506, line: 259, scopeLine: 259, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2790 = !DILocation(line: 23, column: 20, scope: !2759)
!2791 = !DILocation(line: 269, column: 40, scope: !2787, inlinedAt: !2788)
!2792 = !DILocation(line: 96, column: 6, scope: !2793, inlinedAt: !2794)
!2793 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !2506, file: !2506, line: 94, scopeLine: 94, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2794 = !DILocation(line: 269, column: 18, scope: !2787, inlinedAt: !2788)
!2795 = !DILocation(line: 96, column: 20, scope: !2793, inlinedAt: !2794)
!2796 = !DILocation(line: 97, column: 27, scope: !2793, inlinedAt: !2794)
!2797 = !DILocation(line: 37, column: 12, scope: !2793, inlinedAt: !2794)
!2798 = !DILocation(line: 973, column: 9, scope: !2799, inlinedAt: !2800)
!2799 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !760, file: !760, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2800 = !DILocation(line: 37, column: 26, scope: !2793, inlinedAt: !2794)
!2801 = !DILocation(line: 973, column: 20, scope: !2799, inlinedAt: !2800)
!2802 = !DILocation(line: 973, column: 25, scope: !2799, inlinedAt: !2800)
!2803 = !DILocation(line: 97, column: 9, scope: !2793, inlinedAt: !2794)
!2804 = !DILocation(line: 269, column: 67, scope: !2787, inlinedAt: !2788)
!2805 = !DILocation(line: 269, column: 10, scope: !2787, inlinedAt: !2788)
!2806 = !DILocation(line: 24, column: 13, scope: !2759)
!2807 = !DILocation(line: 24, column: 21, scope: !2759)
!2808 = !DILocation(line: 24, column: 2, scope: !2759)
!2809 = !DILocation(line: 24, column: 7, scope: !2759)
!2810 = !DILocation(line: 25, column: 3, scope: !2759)
!2811 = !DILocation(line: 25, column: 23, scope: !2759)
!2812 = !DILocation(line: 25, column: 42, scope: !2759)
!2813 = !DILocation(line: 26, column: 9, scope: !2759)
!2814 = !DILocation(line: 19, column: 10, scope: !2759)
!2815 = distinct !DISubprogram(name: "tinit", linkageName: "std.io.MultiReader.tinit", scope: !2760, file: !2760, line: 34, type: !2816, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2816 = !DISubroutineType(types: !2817)
!2817 = !{!2763, !2763, !2767}
!2818 = !DILocation(line: 35, column: 1, scope: !2815)
!2819 = !DILocalVariable(name: "self", arg: 1, scope: !2815, file: !2760, line: 34, type: !2763)
!2820 = !DILocation(line: 34, column: 35, scope: !2815)
!2821 = !DILocalVariable(name: "readers", arg: 2, scope: !2815, file: !2760, line: 34, type: !2767)
!2822 = !DILocation(line: 34, column: 54, scope: !2815)
!2823 = !DILocation(line: 31, column: 11, scope: !2824)
!2824 = distinct !DILexicalBlock(scope: !2815, file: !2760, line: 35, column: 1)
!2825 = !DILocation(line: 36, column: 9, scope: !2815)
!2826 = !DILocation(line: 36, column: 19, scope: !2815)
!2827 = !DILocation(line: 36, column: 28, scope: !2815)
!2828 = !DILocation(line: 18, column: 11, scope: !2815)
!2829 = !DILocation(line: 32, column: 10, scope: !2815)
!2830 = distinct !DISubprogram(name: "free", linkageName: "std.io.MultiReader.free", scope: !2760, file: !2760, line: 39, type: !2831, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2831 = !DISubroutineType(types: !2832)
!2832 = !{null, !2763}
!2833 = !DILocation(line: 40, column: 1, scope: !2830)
!2834 = !DILocalVariable(name: "self", arg: 1, scope: !2830, file: !2760, line: 39, type: !2763)
!2835 = !DILocation(line: 39, column: 26, scope: !2830)
!2836 = !DILocation(line: 41, column: 7, scope: !2830)
!2837 = !DILocation(line: 41, column: 29, scope: !2830)
!2838 = !DILocation(line: 42, column: 18, scope: !2830)
!2839 = !DILocation(line: 42, column: 34, scope: !2830)
!2840 = !DILocation(line: 118, column: 6, scope: !2841, inlinedAt: !2842)
!2841 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2506, file: !2506, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2842 = !DILocation(line: 42, column: 2, scope: !2830)
!2843 = !DILocation(line: 118, column: 18, scope: !2841, inlinedAt: !2842)
!2844 = !DILocation(line: 122, column: 20, scope: !2841, inlinedAt: !2842)
!2845 = !DILocation(line: 122, column: 2, scope: !2841, inlinedAt: !2842)
!2846 = !DILocation(line: 43, column: 3, scope: !2830)
!2847 = distinct !DISubprogram(name: "read", linkageName: "std.io.MultiReader.read", scope: !2760, file: !2760, line: 46, type: !2848, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2848 = !DISubroutineType(types: !2849)
!2849 = !{!115, !285, !2763, !203}
!2850 = !DILocation(line: 47, column: 1, scope: !2847)
!2851 = !DILocalVariable(name: "self", arg: 1, scope: !2847, file: !2760, line: 46, type: !2763)
!2852 = !DILocation(line: 46, column: 26, scope: !2847)
!2853 = !DILocalVariable(name: "bytes", arg: 2, scope: !2847, file: !2760, line: 46, type: !203)
!2854 = !DILocation(line: 46, column: 40, scope: !2847)
!2855 = !DILocalVariable(name: "r", scope: !2847, file: !2760, line: 48, type: !88, align: 8)
!2856 = !DILocation(line: 48, column: 11, scope: !2847)
!2857 = !DILocation(line: 48, column: 15, scope: !2847)
!2858 = !DILocation(line: 48, column: 28, scope: !2847)
!2859 = !DILocalVariable(name: "n", scope: !2847, file: !2760, line: 49, type: !208, align: 8)
!2860 = !DILocation(line: 49, column: 7, scope: !2847)
!2861 = !DILocation(line: 49, column: 18, scope: !2847)
!2862 = !DILocation(line: 49, column: 11, scope: !2847)
!2863 = !DILocalVariable(name: "err", scope: !2847, file: !2760, line: 50, type: !115, align: 8)
!2864 = !DILocation(line: 50, column: 12, scope: !2847)
!2865 = !DILocation(line: 50, column: 18, scope: !2847)
!2866 = !DILocation(line: 52, column: 7, scope: !2867)
!2867 = distinct !DILexicalBlock(scope: !2847, file: !2760, line: 51, column: 2)
!2868 = !DILocation(line: 52, column: 30, scope: !2867)
!2869 = !DILocation(line: 53, column: 3, scope: !2867)
!2870 = !DILocation(line: 54, column: 7, scope: !2867)
!2871 = !DILocation(line: 54, column: 21, scope: !2867)
!2872 = !DILocation(line: 56, column: 12, scope: !2873)
!2873 = distinct !DILexicalBlock(scope: !2867, file: !2760, line: 55, column: 3)
!2874 = !DILocation(line: 58, column: 10, scope: !2867)
!2875 = !DILocation(line: 60, column: 9, scope: !2847)
!2876 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.MultiReader.read_byte", scope: !2760, file: !2760, line: 63, type: !2877, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2877 = !DISubroutineType(types: !2878)
!2878 = !{!115, !117, !2763}
!2879 = !DILocation(line: 64, column: 1, scope: !2876)
!2880 = !DILocalVariable(name: "self", arg: 1, scope: !2876, file: !2760, line: 63, type: !2763)
!2881 = !DILocation(line: 63, column: 32, scope: !2876)
!2882 = !DILocalVariable(name: "data", scope: !2876, file: !2760, line: 65, type: !2599, align: 1)
!2883 = !DILocation(line: 65, column: 10, scope: !2876)
!2884 = !DILocation(line: 66, column: 12, scope: !2876)
!2885 = !DILocation(line: 66, column: 2, scope: !2876)
!2886 = !DILocation(line: 67, column: 14, scope: !2876)
!2887 = distinct !DISubprogram(name: "init", linkageName: "std.io.ByteWriter.init", scope: !2888, file: !2888, line: 17, type: !2889, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2888 = !DIFile(filename: "bytewriter.c3", directory: "/usr/lib/c3c/lib/std/io/stream")
!2889 = !DISubroutineType(types: !2890)
!2890 = !{!2891, !2891, !2487}
!2891 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteWriter*", baseType: !2892, size: 64, align: 64, dwarfAddressSpace: 0)
!2892 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteWriter", scope: !2888, file: !2888, line: 4, size: 320, align: 64, elements: !2893, identifier: "std.io.ByteWriter")
!2893 = !{!2894, !2895, !2896}
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !2892, file: !2888, line: 6, baseType: !203, size: 128, align: 64)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2892, file: !2888, line: 7, baseType: !207, size: 64, align: 64, offset: 128)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !2892, file: !2888, line: 8, baseType: !2487, size: 128, align: 64, offset: 192)
!2897 = !DILocation(line: 18, column: 1, scope: !2887)
!2898 = !DILocalVariable(name: "self", arg: 1, scope: !2887, file: !2888, line: 17, type: !2891)
!2899 = !DILocation(line: 17, column: 32, scope: !2887)
!2900 = !DILocalVariable(name: "allocator", arg: 2, scope: !2887, file: !2888, line: 17, type: !2487)
!2901 = !DILocation(line: 17, column: 49, scope: !2887)
!2902 = !DILocation(line: 14, column: 11, scope: !2903)
!2903 = distinct !DILexicalBlock(scope: !2887, file: !2888, line: 18, column: 1)
!2904 = !DILocation(line: 19, column: 3, scope: !2887)
!2905 = !DILocation(line: 19, column: 21, scope: !2887)
!2906 = !DILocation(line: 19, column: 38, scope: !2887)
!2907 = !DILocation(line: 20, column: 9, scope: !2887)
!2908 = !DILocation(line: 15, column: 10, scope: !2887)
!2909 = !DILocation(line: 15, column: 27, scope: !2887)
!2910 = distinct !DISubprogram(name: "tinit", linkageName: "std.io.ByteWriter.tinit", scope: !2888, file: !2888, line: 28, type: !2911, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2911 = !DISubroutineType(types: !2912)
!2912 = !{!2891, !2891}
!2913 = !DILocation(line: 29, column: 1, scope: !2910)
!2914 = !DILocalVariable(name: "self", arg: 1, scope: !2910, file: !2888, line: 28, type: !2891)
!2915 = !DILocation(line: 28, column: 33, scope: !2910)
!2916 = !DILocation(line: 25, column: 11, scope: !2917)
!2917 = distinct !DILexicalBlock(scope: !2910, file: !2888, line: 29, column: 1)
!2918 = !DILocation(line: 30, column: 9, scope: !2910)
!2919 = !DILocation(line: 30, column: 19, scope: !2910)
!2920 = !DILocation(line: 14, column: 11, scope: !2910)
!2921 = !DILocation(line: 26, column: 10, scope: !2910)
!2922 = distinct !DISubprogram(name: "init_with_buffer", linkageName: "std.io.ByteWriter.init_with_buffer", scope: !2888, file: !2888, line: 33, type: !2923, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2923 = !DISubroutineType(types: !2924)
!2924 = !{!2891, !2891, !203}
!2925 = !DILocation(line: 34, column: 1, scope: !2922)
!2926 = !DILocalVariable(name: "self", arg: 1, scope: !2922, file: !2888, line: 33, type: !2891)
!2927 = !DILocation(line: 33, column: 44, scope: !2922)
!2928 = !DILocalVariable(name: "data", arg: 2, scope: !2922, file: !2888, line: 33, type: !203)
!2929 = !DILocation(line: 33, column: 58, scope: !2922)
!2930 = !DILocation(line: 35, column: 3, scope: !2922)
!2931 = !DILocation(line: 35, column: 21, scope: !2922)
!2932 = !DILocation(line: 35, column: 40, scope: !2922)
!2933 = !DILocation(line: 36, column: 9, scope: !2922)
!2934 = distinct !DISubprogram(name: "destroy", linkageName: "std.io.ByteWriter.destroy", scope: !2888, file: !2888, line: 39, type: !2935, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2935 = !DISubroutineType(types: !2936)
!2936 = !{!115, !11, !2891}
!2937 = !DILocation(line: 40, column: 1, scope: !2934)
!2938 = !DILocalVariable(name: "self", arg: 1, scope: !2934, file: !2888, line: 39, type: !2891)
!2939 = !DILocation(line: 39, column: 29, scope: !2934)
!2940 = !DILocation(line: 41, column: 7, scope: !2934)
!2941 = !DILocalVariable(name: "ptr", scope: !2934, file: !2888, line: 42, type: !11, align: 8)
!2942 = !DILocation(line: 42, column: 12, scope: !2934)
!2943 = !DILocation(line: 42, column: 18, scope: !2934)
!2944 = !DILocation(line: 42, column: 50, scope: !2934)
!2945 = !DILocation(line: 118, column: 6, scope: !2946, inlinedAt: !2947)
!2946 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2506, file: !2506, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2947 = !DILocation(line: 42, column: 34, scope: !2934)
!2948 = !DILocation(line: 118, column: 18, scope: !2946, inlinedAt: !2947)
!2949 = !DILocation(line: 122, column: 20, scope: !2946, inlinedAt: !2947)
!2950 = !DILocation(line: 122, column: 2, scope: !2946, inlinedAt: !2947)
!2951 = !DILocation(line: 43, column: 3, scope: !2934)
!2952 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.ByteWriter.str_view", scope: !2888, file: !2888, line: 46, type: !2953, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2953 = !DISubroutineType(types: !2954)
!2954 = !{!286, !2891}
!2955 = !DILocation(line: 47, column: 1, scope: !2952)
!2956 = !DILocalVariable(name: "self", arg: 1, scope: !2952, file: !2888, line: 46, type: !2891)
!2957 = !DILocation(line: 46, column: 31, scope: !2952)
!2958 = !DILocation(line: 48, column: 17, scope: !2952)
!2959 = !DILocation(line: 48, column: 28, scope: !2952)
!2960 = !DILocation(line: 48, column: 29, scope: !2952)
!2961 = !DILocation(line: 48, column: 9, scope: !2952)
!2962 = distinct !DISubprogram(name: "ensure_capacity", linkageName: "std.io.ByteWriter.ensure_capacity", scope: !2888, file: !2888, line: 51, type: !2963, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2963 = !DISubroutineType(types: !2964)
!2964 = !{!115, !11, !2891, !208}
!2965 = !DILocation(line: 52, column: 1, scope: !2962)
!2966 = !DILocalVariable(name: "self", arg: 1, scope: !2962, file: !2888, line: 51, type: !2891)
!2967 = !DILocation(line: 51, column: 37, scope: !2962)
!2968 = !DILocalVariable(name: "len", arg: 2, scope: !2962, file: !2888, line: 51, type: !207)
!2969 = !DILocation(line: 51, column: 48, scope: !2962)
!2970 = !DILocation(line: 53, column: 6, scope: !2962)
!2971 = !DILocation(line: 53, column: 23, scope: !2962)
!2972 = !DILocation(line: 54, column: 7, scope: !2962)
!2973 = !DILocation(line: 54, column: 30, scope: !2962)
!2974 = !DILocation(line: 55, column: 6, scope: !2962)
!2975 = !DILocation(line: 55, column: 22, scope: !2962)
!2976 = !DILocalVariable(name: "new_capacity", scope: !2962, file: !2888, line: 56, type: !207, align: 8)
!2977 = !DILocation(line: 56, column: 6, scope: !2962)
!2978 = !DILocalVariable(name: "y", scope: !2979, file: !2888, line: 978, type: !207, align: 8)
!2979 = distinct !DISubprogram(name: "next_power_of_2", linkageName: "next_power_of_2", scope: !760, file: !760, line: 976, scopeLine: 976, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!2980 = !DILocation(line: 978, column: 13, scope: !2979, inlinedAt: !2981)
!2981 = !DILocation(line: 56, column: 21, scope: !2962)
!2982 = !DILocation(line: 978, column: 17, scope: !2979, inlinedAt: !2981)
!2983 = !DILocation(line: 979, column: 2, scope: !2979, inlinedAt: !2981)
!2984 = !DILocation(line: 979, column: 9, scope: !2985, inlinedAt: !2981)
!2985 = distinct !DILexicalBlock(scope: !2979, file: !760, line: 979, column: 2)
!2986 = !DILocation(line: 979, column: 13, scope: !2985, inlinedAt: !2981)
!2987 = !DILocation(line: 979, column: 16, scope: !2985, inlinedAt: !2981)
!2988 = !DILocation(line: 979, column: 21, scope: !2985, inlinedAt: !2981)
!2989 = !DILocation(line: 980, column: 9, scope: !2979, inlinedAt: !2981)
!2990 = !DILocalVariable(name: "new_ptr", scope: !2962, file: !2888, line: 57, type: !117, align: 8)
!2991 = !DILocation(line: 57, column: 8, scope: !2962)
!2992 = !DILocation(line: 57, column: 41, scope: !2962)
!2993 = !DILocation(line: 57, column: 57, scope: !2962)
!2994 = !DILocation(line: 107, column: 6, scope: !2995, inlinedAt: !2996)
!2995 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !2506, file: !2506, line: 105, scopeLine: 105, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2996 = !DILocation(line: 57, column: 18, scope: !2962)
!2997 = !DILocation(line: 118, column: 6, scope: !2998, inlinedAt: !2999)
!2998 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2506, file: !2506, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!2999 = !DILocation(line: 109, column: 3, scope: !3000, inlinedAt: !2996)
!3000 = distinct !DILexicalBlock(scope: !2995, file: !2506, line: 108, column: 2)
!3001 = !DILocation(line: 118, column: 18, scope: !2998, inlinedAt: !2999)
!3002 = !DILocation(line: 122, column: 20, scope: !2998, inlinedAt: !2999)
!3003 = !DILocation(line: 122, column: 2, scope: !2998, inlinedAt: !2999)
!3004 = !DILocation(line: 110, column: 10, scope: !3000, inlinedAt: !2996)
!3005 = !DILocation(line: 112, column: 6, scope: !2995, inlinedAt: !2996)
!3006 = !DILocation(line: 112, column: 37, scope: !2995, inlinedAt: !2996)
!3007 = !DILocation(line: 37, column: 12, scope: !2995, inlinedAt: !2996)
!3008 = !DILocation(line: 973, column: 9, scope: !3009, inlinedAt: !3010)
!3009 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !760, file: !760, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3010 = !DILocation(line: 37, column: 26, scope: !2995, inlinedAt: !2996)
!3011 = !DILocation(line: 973, column: 20, scope: !3009, inlinedAt: !3010)
!3012 = !DILocation(line: 973, column: 25, scope: !3009, inlinedAt: !3010)
!3013 = !DILocation(line: 112, column: 19, scope: !2995, inlinedAt: !2996)
!3014 = !DILocation(line: 113, column: 26, scope: !2995, inlinedAt: !2996)
!3015 = !DILocation(line: 113, column: 31, scope: !2995, inlinedAt: !2996)
!3016 = !DILocation(line: 47, column: 12, scope: !2995, inlinedAt: !2996)
!3017 = !DILocation(line: 973, column: 9, scope: !3018, inlinedAt: !3019)
!3018 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !760, file: !760, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3019 = !DILocation(line: 47, column: 26, scope: !2995, inlinedAt: !2996)
!3020 = !DILocation(line: 973, column: 20, scope: !3018, inlinedAt: !3019)
!3021 = !DILocation(line: 973, column: 25, scope: !3018, inlinedAt: !3019)
!3022 = !DILocation(line: 113, column: 9, scope: !2995, inlinedAt: !2996)
!3023 = !DILocation(line: 58, column: 2, scope: !2962)
!3024 = !DILocation(line: 58, column: 15, scope: !2962)
!3025 = !DILocation(line: 58, column: 24, scope: !2962)
!3026 = distinct !DISubprogram(name: "write", linkageName: "std.io.ByteWriter.write", scope: !2888, file: !2888, line: 61, type: !3027, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3027 = !DISubroutineType(types: !3028)
!3028 = !{!115, !285, !2891, !203}
!3029 = !DILocation(line: 62, column: 1, scope: !3026)
!3030 = !DILocalVariable(name: "self", arg: 1, scope: !3026, file: !2888, line: 61, type: !2891)
!3031 = !DILocation(line: 61, column: 26, scope: !3026)
!3032 = !DILocalVariable(name: "bytes", arg: 2, scope: !3026, file: !2888, line: 61, type: !203)
!3033 = !DILocation(line: 61, column: 40, scope: !3026)
!3034 = !DILocation(line: 63, column: 23, scope: !3026)
!3035 = !DILocation(line: 63, column: 36, scope: !3026)
!3036 = !DILocation(line: 63, column: 2, scope: !3026)
!3037 = !DILocation(line: 64, column: 13, scope: !3026)
!3038 = !DILocation(line: 64, column: 24, scope: !3026)
!3039 = !DILocation(line: 64, column: 37, scope: !3026)
!3040 = !DILocation(line: 64, column: 48, scope: !3026)
!3041 = !DILocation(line: 329, column: 23, scope: !3042, inlinedAt: !3044)
!3042 = distinct !DILexicalBlock(scope: !3043, file: !2656, line: 330, column: 1)
!3043 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !2656, file: !2656, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3044 = !DILocation(line: 64, column: 2, scope: !3026)
!3045 = !DILocation(line: 326, column: 11, scope: !3042, inlinedAt: !3044)
!3046 = !DILocation(line: 326, column: 26, scope: !3042, inlinedAt: !3044)
!3047 = !DILocation(line: 64, column: 2, scope: !3042, inlinedAt: !3044)
!3048 = !DILocation(line: 327, column: 11, scope: !3042, inlinedAt: !3044)
!3049 = !DILocation(line: 327, column: 23, scope: !3042, inlinedAt: !3044)
!3050 = !DILocation(line: 327, column: 29, scope: !3042, inlinedAt: !3044)
!3051 = !DILocation(line: 327, column: 36, scope: !3042, inlinedAt: !3044)
!3052 = !DILocation(line: 327, column: 43, scope: !3042, inlinedAt: !3044)
!3053 = !DILocation(line: 327, column: 49, scope: !3042, inlinedAt: !3044)
!3054 = !DILocation(line: 327, column: 56, scope: !3042, inlinedAt: !3044)
!3055 = !DILocation(line: 331, column: 11, scope: !3043, inlinedAt: !3044)
!3056 = !DILocation(line: 331, column: 16, scope: !3043, inlinedAt: !3044)
!3057 = !DILocation(line: 331, column: 21, scope: !3043, inlinedAt: !3044)
!3058 = !DILocation(line: 331, column: 26, scope: !3043, inlinedAt: !3044)
!3059 = !DILocation(line: 65, column: 2, scope: !3026)
!3060 = !DILocation(line: 65, column: 16, scope: !3026)
!3061 = !DILocation(line: 66, column: 9, scope: !3026)
!3062 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.ByteWriter.write_byte", scope: !2888, file: !2888, line: 69, type: !3063, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3063 = !DISubroutineType(types: !3064)
!3064 = !{!115, !11, !2891, !20}
!3065 = !DILocation(line: 70, column: 1, scope: !3062)
!3066 = !DILocalVariable(name: "self", arg: 1, scope: !3062, file: !2888, line: 69, type: !2891)
!3067 = !DILocation(line: 69, column: 32, scope: !3062)
!3068 = !DILocalVariable(name: "c", arg: 2, scope: !3062, file: !2888, line: 69, type: !20)
!3069 = !DILocation(line: 69, column: 44, scope: !3062)
!3070 = !DILocation(line: 71, column: 23, scope: !3062)
!3071 = !DILocation(line: 71, column: 2, scope: !3062)
!3072 = !DILocation(line: 72, column: 2, scope: !3062)
!3073 = !DILocation(line: 72, column: 13, scope: !3062)
!3074 = !DILocation(line: 72, column: 29, scope: !3062)
!3075 = distinct !DISubprogram(name: "read_from", linkageName: "std.io.ByteWriter.read_from", scope: !2888, file: !2888, line: 79, type: !3076, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3076 = !DISubroutineType(types: !3077)
!3077 = !{!115, !285, !2891, !88}
!3078 = !DILocation(line: 80, column: 1, scope: !3075)
!3079 = !DILocalVariable(name: "self", arg: 1, scope: !3075, file: !2888, line: 79, type: !2891)
!3080 = !DILocation(line: 79, column: 30, scope: !3075)
!3081 = !DILocalVariable(name: "reader", arg: 2, scope: !3075, file: !2888, line: 79, type: !88)
!3082 = !DILocation(line: 79, column: 46, scope: !3075)
!3083 = !DILocalVariable(name: "start_index", scope: !3075, file: !2888, line: 81, type: !207, align: 8)
!3084 = !DILocation(line: 81, column: 6, scope: !3075)
!3085 = !DILocation(line: 81, column: 20, scope: !3075)
!3086 = !DILocation(line: 82, column: 7, scope: !3075)
!3087 = !DILocation(line: 84, column: 3, scope: !3088)
!3088 = distinct !DILexicalBlock(scope: !3075, file: !2888, line: 83, column: 2)
!3089 = !DILocalVariable(name: "available", scope: !3090, file: !2888, line: 84, type: !207, align: 8)
!3090 = distinct !DILexicalBlock(scope: !3088, file: !2888, line: 84, column: 3)
!3091 = !DILocation(line: 84, column: 14, scope: !3090)
!3092 = !DILocation(line: 84, column: 26, scope: !3090)
!3093 = !DILocation(line: 86, column: 25, scope: !3094)
!3094 = distinct !DILexicalBlock(scope: !3090, file: !2888, line: 85, column: 3)
!3095 = !DILocation(line: 86, column: 38, scope: !3094)
!3096 = !DILocation(line: 86, column: 4, scope: !3094)
!3097 = !DILocalVariable(name: "read", scope: !3094, file: !2888, line: 87, type: !207, align: 8)
!3098 = !DILocation(line: 87, column: 8, scope: !3094)
!3099 = !DILocation(line: 87, column: 27, scope: !3094)
!3100 = !DILocation(line: 87, column: 38, scope: !3094)
!3101 = !DILocation(line: 87, column: 15, scope: !3094)
!3102 = !DILocation(line: 88, column: 4, scope: !3094)
!3103 = !DILocation(line: 88, column: 18, scope: !3094)
!3104 = !DILocation(line: 90, column: 10, scope: !3088)
!3105 = !DILocation(line: 90, column: 23, scope: !3088)
!3106 = !DILocation(line: 92, column: 6, scope: !3075)
!3107 = !DILocation(line: 94, column: 24, scope: !3108)
!3108 = distinct !DILexicalBlock(scope: !3075, file: !2888, line: 93, column: 2)
!3109 = !DILocation(line: 94, column: 3, scope: !3108)
!3110 = !DILocation(line: 96, column: 2, scope: !3075)
!3111 = !DILocalVariable(name: "len_to_read", scope: !3112, file: !2888, line: 99, type: !207, align: 8)
!3112 = distinct !DILexicalBlock(scope: !3113, file: !2888, line: 97, column: 2)
!3113 = distinct !DILexicalBlock(scope: !3075, file: !2888, line: 96, column: 2)
!3114 = !DILocation(line: 99, column: 7, scope: !3112)
!3115 = !DILocation(line: 99, column: 21, scope: !3112)
!3116 = !DILocation(line: 99, column: 38, scope: !3112)
!3117 = !DILocation(line: 101, column: 7, scope: !3112)
!3118 = !DILocation(line: 103, column: 25, scope: !3119)
!3119 = distinct !DILexicalBlock(scope: !3112, file: !2888, line: 102, column: 3)
!3120 = !DILocation(line: 103, column: 4, scope: !3119)
!3121 = !DILocation(line: 104, column: 18, scope: !3119)
!3122 = !DILocation(line: 104, column: 35, scope: !3119)
!3123 = !DILocalVariable(name: "read", scope: !3112, file: !2888, line: 107, type: !207, align: 8)
!3124 = !DILocation(line: 107, column: 7, scope: !3112)
!3125 = !DILocation(line: 107, column: 26, scope: !3112)
!3126 = !DILocation(line: 107, column: 37, scope: !3112)
!3127 = !DILocation(line: 107, column: 14, scope: !3112)
!3128 = !DILocation(line: 108, column: 3, scope: !3112)
!3129 = !DILocation(line: 108, column: 17, scope: !3112)
!3130 = !DILocation(line: 110, column: 7, scope: !3112)
!3131 = !DILocation(line: 110, column: 14, scope: !3112)
!3132 = !DILocation(line: 110, column: 34, scope: !3112)
!3133 = !DILocation(line: 110, column: 47, scope: !3112)
!3134 = distinct !DISubprogram(name: "init", linkageName: "std.io.ReadBuffer.init", scope: !3135, file: !3135, line: 17, type: !3136, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3135 = !DIFile(filename: "buffer.c3", directory: "/usr/lib/c3c/lib/std/io/stream")
!3136 = !DISubroutineType(types: !3137)
!3137 = !{!3138, !3138, !88, !203}
!3138 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ReadBuffer*", baseType: !3139, size: 64, align: 64, dwarfAddressSpace: 0)
!3139 = !DICompositeType(tag: DW_TAG_structure_type, name: "ReadBuffer", scope: !3135, file: !3135, line: 3, size: 384, align: 64, elements: !3140, identifier: "std.io.ReadBuffer")
!3140 = !{!3141, !3142, !3143, !3144}
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !3139, file: !3135, line: 5, baseType: !88, size: 128, align: 64)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !3139, file: !3135, line: 6, baseType: !203, size: 128, align: 64, offset: 128)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !3139, file: !3135, line: 7, baseType: !207, size: 64, align: 64, offset: 256)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "write_idx", scope: !3139, file: !3135, line: 8, baseType: !207, size: 64, align: 64, offset: 320)
!3145 = !DILocation(line: 18, column: 1, scope: !3134)
!3146 = !DILocalVariable(name: "self", arg: 1, scope: !3134, file: !3135, line: 17, type: !3138)
!3147 = !DILocation(line: 17, column: 32, scope: !3134)
!3148 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !3134, file: !3135, line: 17, type: !88)
!3149 = !DILocation(line: 17, column: 48, scope: !3134)
!3150 = !DILocalVariable(name: "bytes", arg: 3, scope: !3134, file: !3135, line: 17, type: !203)
!3151 = !DILocation(line: 17, column: 71, scope: !3134)
!3152 = !DILocation(line: 14, column: 11, scope: !3153)
!3153 = distinct !DILexicalBlock(scope: !3134, file: !3135, line: 18, column: 1)
!3154 = !DILocation(line: 15, column: 11, scope: !3153)
!3155 = !DILocation(line: 19, column: 3, scope: !3134)
!3156 = !DILocation(line: 19, column: 30, scope: !3134)
!3157 = !DILocation(line: 19, column: 55, scope: !3134)
!3158 = !DILocation(line: 20, column: 9, scope: !3134)
!3159 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.ReadBuffer.str_view", scope: !3135, file: !3135, line: 22, type: !3160, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3160 = !DISubroutineType(types: !3161)
!3161 = !{!286, !3138}
!3162 = !DILocation(line: 23, column: 1, scope: !3159)
!3163 = !DILocalVariable(name: "self", arg: 1, scope: !3159, file: !3135, line: 22, type: !3138)
!3164 = !DILocation(line: 22, column: 31, scope: !3159)
!3165 = !DILocation(line: 24, column: 17, scope: !3159)
!3166 = !DILocation(line: 24, column: 28, scope: !3159)
!3167 = !DILocation(line: 24, column: 42, scope: !3159)
!3168 = !DILocation(line: 24, column: 59, scope: !3159)
!3169 = !DILocation(line: 24, column: 9, scope: !3159)
!3170 = distinct !DISubprogram(name: "close", linkageName: "std.io.ReadBuffer.close", scope: !3135, file: !3135, line: 27, type: !3171, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3171 = !DISubroutineType(types: !3172)
!3172 = !{!115, !11, !3138}
!3173 = !DILocation(line: 28, column: 1, scope: !3170)
!3174 = !DILocalVariable(name: "self", arg: 1, scope: !3170, file: !3135, line: 27, type: !3138)
!3175 = !DILocation(line: 27, column: 27, scope: !3170)
!3176 = !DILocation(line: 29, column: 7, scope: !3170)
!3177 = !DILocation(line: 29, column: 34, scope: !3170)
!3178 = distinct !DISubprogram(name: "read", linkageName: "std.io.ReadBuffer.read", scope: !3135, file: !3135, line: 32, type: !3179, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3179 = !DISubroutineType(types: !3180)
!3180 = !{!115, !285, !3138, !203}
!3181 = !DILocation(line: 33, column: 1, scope: !3178)
!3182 = !DILocalVariable(name: "self", arg: 1, scope: !3178, file: !3135, line: 32, type: !3138)
!3183 = !DILocation(line: 32, column: 25, scope: !3178)
!3184 = !DILocalVariable(name: "bytes", arg: 2, scope: !3178, file: !3135, line: 32, type: !203)
!3185 = !DILocation(line: 32, column: 39, scope: !3178)
!3186 = !DILocation(line: 34, column: 6, scope: !3178)
!3187 = !DILocation(line: 34, column: 23, scope: !3178)
!3188 = !DILocation(line: 36, column: 7, scope: !3189)
!3189 = distinct !DILexicalBlock(scope: !3178, file: !3135, line: 35, column: 2)
!3190 = !DILocation(line: 36, column: 29, scope: !3189)
!3191 = !DILocation(line: 36, column: 42, scope: !3189)
!3192 = !DILocation(line: 39, column: 11, scope: !3193)
!3193 = distinct !DILexicalBlock(scope: !3189, file: !3135, line: 37, column: 3)
!3194 = !DILocation(line: 39, column: 36, scope: !3193)
!3195 = !DILocation(line: 41, column: 3, scope: !3189)
!3196 = !DILocalVariable(name: "n", scope: !3178, file: !3135, line: 43, type: !207, align: 8)
!3197 = !DILocation(line: 43, column: 6, scope: !3178)
!3198 = !DILocation(line: 43, column: 14, scope: !3178)
!3199 = !DILocation(line: 43, column: 31, scope: !3178)
!3200 = !DILocation(line: 43, column: 46, scope: !3178)
!3201 = !DILocation(line: 17, column: 10, scope: !3202, inlinedAt: !3203)
!3202 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !686, file: !686, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3203 = !DILocation(line: 100, column: 10, scope: !3204, inlinedAt: !3205)
!3204 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !686, file: !686, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3205 = !DILocation(line: 43, column: 10, scope: !3178)
!3206 = !DILocation(line: 17, column: 14, scope: !3202, inlinedAt: !3203)
!3207 = !DILocation(line: 100, column: 31, scope: !3204, inlinedAt: !3205)
!3208 = !DILocation(line: 100, column: 35, scope: !3204, inlinedAt: !3205)
!3209 = !DILocation(line: 44, column: 14, scope: !3178)
!3210 = !DILocation(line: 44, column: 25, scope: !3178)
!3211 = !DILocation(line: 44, column: 39, scope: !3178)
!3212 = !DILocation(line: 44, column: 2, scope: !3178)
!3213 = !DILocation(line: 44, column: 8, scope: !3178)
!3214 = !DILocation(line: 44, column: 9, scope: !3178)
!3215 = !DILocation(line: 45, column: 2, scope: !3178)
!3216 = !DILocation(line: 45, column: 19, scope: !3178)
!3217 = !DILocation(line: 46, column: 9, scope: !3178)
!3218 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ReadBuffer.read_byte", scope: !3135, file: !3135, line: 49, type: !3219, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3219 = !DISubroutineType(types: !3220)
!3220 = !{!115, !117, !3138}
!3221 = !DILocation(line: 50, column: 1, scope: !3218)
!3222 = !DILocalVariable(name: "self", arg: 1, scope: !3218, file: !3135, line: 49, type: !3138)
!3223 = !DILocation(line: 49, column: 31, scope: !3218)
!3224 = !DILocation(line: 51, column: 6, scope: !3218)
!3225 = !DILocation(line: 51, column: 23, scope: !3218)
!3226 = !DILocation(line: 51, column: 39, scope: !3218)
!3227 = !DILocation(line: 52, column: 6, scope: !3218)
!3228 = !DILocation(line: 52, column: 23, scope: !3218)
!3229 = !DILocation(line: 52, column: 46, scope: !3218)
!3230 = !DILocalVariable(name: "c", scope: !3218, file: !3135, line: 53, type: !20, align: 1)
!3231 = !DILocation(line: 53, column: 7, scope: !3218)
!3232 = !DILocation(line: 53, column: 11, scope: !3218)
!3233 = !DILocation(line: 53, column: 22, scope: !3218)
!3234 = !DILocation(line: 54, column: 2, scope: !3218)
!3235 = !DILocation(line: 55, column: 9, scope: !3218)
!3236 = distinct !DISubprogram(name: "refill", linkageName: "std.io.ReadBuffer.refill", scope: !3135, file: !3135, line: 58, type: !3171, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3237 = !DILocation(line: 59, column: 1, scope: !3236)
!3238 = !DILocalVariable(name: "self", arg: 1, scope: !3236, file: !3135, line: 58, type: !3138)
!3239 = !DILocation(line: 58, column: 28, scope: !3236)
!3240 = !DILocation(line: 60, column: 2, scope: !3236)
!3241 = !DILocation(line: 60, column: 18, scope: !3236)
!3242 = !DILocation(line: 61, column: 2, scope: !3236)
!3243 = !DILocation(line: 61, column: 19, scope: !3236)
!3244 = !DILocation(line: 61, column: 44, scope: !3236)
!3245 = distinct !DISubprogram(name: "init", linkageName: "std.io.WriteBuffer.init", scope: !3135, file: !3135, line: 77, type: !3246, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3246 = !DISubroutineType(types: !3247)
!3247 = !{!3248, !3248, !159, !203}
!3248 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WriteBuffer*", baseType: !3249, size: 64, align: 64, dwarfAddressSpace: 0)
!3249 = !DICompositeType(tag: DW_TAG_structure_type, name: "WriteBuffer", scope: !3135, file: !3135, line: 64, size: 320, align: 64, elements: !3250, identifier: "std.io.WriteBuffer")
!3250 = !{!3251, !3252, !3253}
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !3249, file: !3135, line: 66, baseType: !159, size: 128, align: 64)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !3249, file: !3135, line: 67, baseType: !203, size: 128, align: 64, offset: 128)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3249, file: !3135, line: 68, baseType: !207, size: 64, align: 64, offset: 256)
!3254 = !DILocation(line: 78, column: 1, scope: !3245)
!3255 = !DILocalVariable(name: "self", arg: 1, scope: !3245, file: !3135, line: 77, type: !3248)
!3256 = !DILocation(line: 77, column: 34, scope: !3245)
!3257 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !3245, file: !3135, line: 77, type: !159)
!3258 = !DILocation(line: 77, column: 51, scope: !3245)
!3259 = !DILocalVariable(name: "bytes", arg: 3, scope: !3245, file: !3135, line: 77, type: !203)
!3260 = !DILocation(line: 77, column: 74, scope: !3245)
!3261 = !DILocation(line: 74, column: 11, scope: !3262)
!3262 = distinct !DILexicalBlock(scope: !3245, file: !3135, line: 78, column: 1)
!3263 = !DILocation(line: 75, column: 11, scope: !3262)
!3264 = !DILocation(line: 79, column: 3, scope: !3245)
!3265 = !DILocation(line: 79, column: 30, scope: !3245)
!3266 = !DILocation(line: 79, column: 55, scope: !3245)
!3267 = !DILocation(line: 80, column: 9, scope: !3245)
!3268 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.WriteBuffer.str_view", scope: !3135, file: !3135, line: 83, type: !3269, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3269 = !DISubroutineType(types: !3270)
!3270 = !{!286, !3248}
!3271 = !DILocation(line: 84, column: 1, scope: !3268)
!3272 = !DILocalVariable(name: "self", arg: 1, scope: !3268, file: !3135, line: 83, type: !3248)
!3273 = !DILocation(line: 83, column: 32, scope: !3268)
!3274 = !DILocation(line: 85, column: 17, scope: !3268)
!3275 = !DILocation(line: 85, column: 28, scope: !3268)
!3276 = !DILocation(line: 85, column: 29, scope: !3268)
!3277 = !DILocation(line: 85, column: 9, scope: !3268)
!3278 = distinct !DISubprogram(name: "close", linkageName: "std.io.WriteBuffer.close", scope: !3135, file: !3135, line: 88, type: !3279, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3279 = !DISubroutineType(types: !3280)
!3280 = !{!115, !11, !3248}
!3281 = !DILocation(line: 89, column: 1, scope: !3278)
!3282 = !DILocalVariable(name: "self", arg: 1, scope: !3278, file: !3135, line: 88, type: !3248)
!3283 = !DILocation(line: 88, column: 28, scope: !3278)
!3284 = !DILocation(line: 90, column: 7, scope: !3278)
!3285 = !DILocation(line: 90, column: 41, scope: !3278)
!3286 = distinct !DISubprogram(name: "flush", linkageName: "std.io.WriteBuffer.flush", scope: !3135, file: !3135, line: 93, type: !3279, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3287 = !DILocation(line: 94, column: 1, scope: !3286)
!3288 = !DILocalVariable(name: "self", arg: 1, scope: !3286, file: !3135, line: 93, type: !3248)
!3289 = !DILocation(line: 93, column: 28, scope: !3286)
!3290 = !DILocation(line: 95, column: 2, scope: !3286)
!3291 = !DILocation(line: 96, column: 7, scope: !3286)
!3292 = !DILocation(line: 96, column: 34, scope: !3286)
!3293 = distinct !DISubprogram(name: "write", linkageName: "std.io.WriteBuffer.write", scope: !3135, file: !3135, line: 99, type: !3294, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3294 = !DISubroutineType(types: !3295)
!3295 = !{!115, !285, !3248, !203}
!3296 = !DILocation(line: 100, column: 1, scope: !3293)
!3297 = !DILocalVariable(name: "self", arg: 1, scope: !3293, file: !3135, line: 99, type: !3248)
!3298 = !DILocation(line: 99, column: 27, scope: !3293)
!3299 = !DILocalVariable(name: "bytes", arg: 2, scope: !3293, file: !3135, line: 99, type: !203)
!3300 = !DILocation(line: 99, column: 41, scope: !3293)
!3301 = !DILocalVariable(name: "n", scope: !3293, file: !3135, line: 101, type: !207, align: 8)
!3302 = !DILocation(line: 101, column: 6, scope: !3293)
!3303 = !DILocation(line: 101, column: 10, scope: !3293)
!3304 = !DILocation(line: 101, column: 27, scope: !3293)
!3305 = !DILocation(line: 102, column: 6, scope: !3293)
!3306 = !DILocation(line: 102, column: 18, scope: !3293)
!3307 = !DILocation(line: 105, column: 38, scope: !3308)
!3308 = distinct !DILexicalBlock(scope: !3293, file: !3135, line: 103, column: 2)
!3309 = !DILocation(line: 105, column: 44, scope: !3308)
!3310 = !DILocation(line: 105, column: 3, scope: !3308)
!3311 = !DILocation(line: 105, column: 14, scope: !3308)
!3312 = !DILocation(line: 105, column: 25, scope: !3308)
!3313 = !DILocation(line: 106, column: 3, scope: !3308)
!3314 = !DILocation(line: 106, column: 17, scope: !3308)
!3315 = !DILocation(line: 107, column: 10, scope: !3308)
!3316 = !DILocation(line: 109, column: 2, scope: !3293)
!3317 = !DILocation(line: 110, column: 6, scope: !3293)
!3318 = !DILocation(line: 110, column: 19, scope: !3293)
!3319 = !DILocation(line: 113, column: 10, scope: !3320)
!3320 = distinct !DILexicalBlock(scope: !3293, file: !3135, line: 111, column: 2)
!3321 = !DILocation(line: 113, column: 36, scope: !3320)
!3322 = !DILocation(line: 116, column: 27, scope: !3293)
!3323 = !DILocation(line: 116, column: 33, scope: !3293)
!3324 = !DILocation(line: 116, column: 2, scope: !3293)
!3325 = !DILocation(line: 116, column: 13, scope: !3293)
!3326 = !DILocation(line: 116, column: 14, scope: !3293)
!3327 = !DILocation(line: 117, column: 2, scope: !3293)
!3328 = !DILocation(line: 117, column: 15, scope: !3293)
!3329 = !DILocation(line: 118, column: 9, scope: !3293)
!3330 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.WriteBuffer.write_byte", scope: !3135, file: !3135, line: 121, type: !3331, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3331 = !DISubroutineType(types: !3332)
!3332 = !{!115, !11, !3248, !20}
!3333 = !DILocation(line: 122, column: 1, scope: !3330)
!3334 = !DILocalVariable(name: "self", arg: 1, scope: !3330, file: !3135, line: 121, type: !3248)
!3335 = !DILocation(line: 121, column: 33, scope: !3330)
!3336 = !DILocalVariable(name: "c", arg: 2, scope: !3330, file: !3135, line: 121, type: !20)
!3337 = !DILocation(line: 121, column: 45, scope: !3330)
!3338 = !DILocalVariable(name: "n", scope: !3330, file: !3135, line: 123, type: !207, align: 8)
!3339 = !DILocation(line: 123, column: 6, scope: !3330)
!3340 = !DILocation(line: 123, column: 10, scope: !3330)
!3341 = !DILocation(line: 123, column: 27, scope: !3330)
!3342 = !DILocation(line: 124, column: 6, scope: !3330)
!3343 = !DILocation(line: 126, column: 3, scope: !3344)
!3344 = distinct !DILexicalBlock(scope: !3330, file: !3135, line: 125, column: 2)
!3345 = !DILocation(line: 128, column: 2, scope: !3330)
!3346 = !DILocation(line: 128, column: 13, scope: !3330)
!3347 = !DILocation(line: 128, column: 27, scope: !3330)
!3348 = !DILocation(line: 129, column: 2, scope: !3330)
!3349 = distinct !DISubprogram(name: "write_pending", linkageName: "std.io.WriteBuffer.write_pending", scope: !3135, file: !3135, line: 132, type: !3279, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3350 = !DILocation(line: 133, column: 1, scope: !3349)
!3351 = !DILocalVariable(name: "self", arg: 1, scope: !3349, file: !3135, line: 132, type: !3248)
!3352 = !DILocation(line: 132, column: 36, scope: !3349)
!3353 = !DILocation(line: 134, column: 2, scope: !3349)
!3354 = !DILocation(line: 134, column: 16, scope: !3349)
!3355 = !DILocation(line: 134, column: 42, scope: !3349)
!3356 = !DILocation(line: 134, column: 53, scope: !3349)
!3357 = !DILocation(line: 134, column: 54, scope: !3349)
!3358 = !DILocation(line: 135, column: 6, scope: !3349)
!3359 = !DILocation(line: 135, column: 30, scope: !3349)
!3360 = distinct !DISubprogram(name: "init", linkageName: "std.io.TeeReader.init", scope: !3361, file: !3361, line: 22, type: !3362, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3361 = !DIFile(filename: "teereader.c3", directory: "/usr/lib/c3c/lib/std/io/stream")
!3362 = !DISubroutineType(types: !3363)
!3363 = !{!3364, !3364, !88, !159}
!3364 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TeeReader*", baseType: !3365, size: 64, align: 64, dwarfAddressSpace: 0)
!3365 = !DICompositeType(tag: DW_TAG_structure_type, name: "TeeReader", scope: !3361, file: !3361, line: 3, size: 256, align: 64, elements: !3366, identifier: "std.io.TeeReader")
!3366 = !{!3367, !3368}
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !3365, file: !3361, line: 5, baseType: !88, size: 128, align: 64)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !3365, file: !3361, line: 6, baseType: !159, size: 128, align: 64, offset: 128)
!3369 = !DILocation(line: 23, column: 1, scope: !3360)
!3370 = !DILocalVariable(name: "self", arg: 1, scope: !3360, file: !3361, line: 22, type: !3364)
!3371 = !DILocation(line: 22, column: 30, scope: !3360)
!3372 = !DILocalVariable(name: "r", arg: 2, scope: !3360, file: !3361, line: 22, type: !88)
!3373 = !DILocation(line: 22, column: 46, scope: !3360)
!3374 = !DILocalVariable(name: "w", arg: 3, scope: !3360, file: !3361, line: 22, type: !159)
!3375 = !DILocation(line: 22, column: 59, scope: !3360)
!3376 = !DILocation(line: 24, column: 3, scope: !3360)
!3377 = !DILocation(line: 15, column: 37, scope: !3378, inlinedAt: !3380)
!3378 = distinct !DILexicalBlock(scope: !3379, file: !3361, line: 15, column: 56)
!3379 = distinct !DISubprogram(name: "tee_reader", linkageName: "tee_reader", scope: !3361, file: !3361, line: 15, scopeLine: 15, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3380 = !DILocation(line: 24, column: 10, scope: !3360)
!3381 = !DILocation(line: 15, column: 50, scope: !3378, inlinedAt: !3380)
!3382 = !DILocation(line: 15, column: 58, scope: !3379, inlinedAt: !3380)
!3383 = !DILocation(line: 15, column: 61, scope: !3379, inlinedAt: !3380)
!3384 = !DILocation(line: 25, column: 9, scope: !3360)
!3385 = distinct !DISubprogram(name: "read", linkageName: "std.io.TeeReader.read", scope: !3361, file: !3361, line: 28, type: !3386, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3386 = !DISubroutineType(types: !3387)
!3387 = !{!115, !285, !3364, !203}
!3388 = !DILocation(line: 29, column: 1, scope: !3385)
!3389 = !DILocalVariable(name: "self", arg: 1, scope: !3385, file: !3361, line: 28, type: !3364)
!3390 = !DILocation(line: 28, column: 24, scope: !3385)
!3391 = !DILocalVariable(name: "bytes", arg: 2, scope: !3385, file: !3361, line: 28, type: !203)
!3392 = !DILocation(line: 28, column: 38, scope: !3385)
!3393 = !DILocalVariable(name: "nr", scope: !3385, file: !3361, line: 30, type: !207, align: 8)
!3394 = !DILocation(line: 30, column: 6, scope: !3385)
!3395 = !DILocalVariable(name: "nw", scope: !3385, file: !3361, line: 30, type: !207, align: 8)
!3396 = !DILocation(line: 30, column: 10, scope: !3385)
!3397 = !DILocation(line: 31, column: 7, scope: !3385)
!3398 = !DILocation(line: 31, column: 19, scope: !3385)
!3399 = !DILocation(line: 32, column: 7, scope: !3385)
!3400 = !DILocation(line: 32, column: 20, scope: !3385)
!3401 = !DILocation(line: 32, column: 26, scope: !3385)
!3402 = !DILocation(line: 32, column: 27, scope: !3385)
!3403 = !DILocation(line: 33, column: 6, scope: !3385)
!3404 = !DILocation(line: 33, column: 12, scope: !3385)
!3405 = !DILocation(line: 33, column: 23, scope: !3385)
!3406 = !DILocation(line: 34, column: 9, scope: !3385)
!3407 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.TeeReader.read_byte", scope: !3361, file: !3361, line: 37, type: !3408, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3408 = !DISubroutineType(types: !3409)
!3409 = !{!115, !117, !3364}
!3410 = !DILocation(line: 38, column: 1, scope: !3407)
!3411 = !DILocalVariable(name: "self", arg: 1, scope: !3407, file: !3361, line: 37, type: !3364)
!3412 = !DILocation(line: 37, column: 30, scope: !3407)
!3413 = !DILocalVariable(name: "data", scope: !3407, file: !3361, line: 39, type: !2599, align: 1)
!3414 = !DILocation(line: 39, column: 10, scope: !3407)
!3415 = !DILocation(line: 40, column: 12, scope: !3407)
!3416 = !DILocation(line: 40, column: 2, scope: !3407)
!3417 = !DILocation(line: 41, column: 14, scope: !3407)
!3418 = distinct !DISubprogram(name: "init", linkageName: "std.io.LimitReader.init", scope: !3419, file: !3419, line: 13, type: !3420, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3419 = !DIFile(filename: "limitreader.c3", directory: "/usr/lib/c3c/lib/std/io/stream")
!3420 = !DISubroutineType(types: !3421)
!3421 = !{!3422, !3422, !88, !208}
!3422 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "LimitReader*", baseType: !3423, size: 64, align: 64, dwarfAddressSpace: 0)
!3423 = !DICompositeType(tag: DW_TAG_structure_type, name: "LimitReader", scope: !3419, file: !3419, line: 3, size: 192, align: 64, elements: !3424, identifier: "std.io.LimitReader")
!3424 = !{!3425, !3426}
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !3423, file: !3419, line: 5, baseType: !88, size: 128, align: 64)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !3423, file: !3419, line: 6, baseType: !207, size: 64, align: 64, offset: 128)
!3427 = !DILocation(line: 14, column: 1, scope: !3418)
!3428 = !DILocalVariable(name: "self", arg: 1, scope: !3418, file: !3419, line: 13, type: !3422)
!3429 = !DILocation(line: 13, column: 34, scope: !3418)
!3430 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !3418, file: !3419, line: 13, type: !88)
!3431 = !DILocation(line: 13, column: 50, scope: !3418)
!3432 = !DILocalVariable(name: "limit", arg: 3, scope: !3418, file: !3419, line: 13, type: !207)
!3433 = !DILocation(line: 13, column: 70, scope: !3418)
!3434 = !DILocation(line: 15, column: 3, scope: !3418)
!3435 = !DILocation(line: 15, column: 30, scope: !3418)
!3436 = !DILocation(line: 15, column: 55, scope: !3418)
!3437 = !DILocation(line: 16, column: 9, scope: !3418)
!3438 = distinct !DISubprogram(name: "close", linkageName: "std.io.LimitReader.close", scope: !3419, file: !3419, line: 19, type: !3439, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3439 = !DISubroutineType(types: !3440)
!3440 = !{!115, !11, !3422}
!3441 = !DILocation(line: 20, column: 1, scope: !3438)
!3442 = !DILocalVariable(name: "self", arg: 1, scope: !3438, file: !3419, line: 19, type: !3422)
!3443 = !DILocation(line: 19, column: 28, scope: !3438)
!3444 = !DILocation(line: 21, column: 7, scope: !3438)
!3445 = !DILocation(line: 21, column: 41, scope: !3438)
!3446 = distinct !DISubprogram(name: "read", linkageName: "std.io.LimitReader.read", scope: !3419, file: !3419, line: 25, type: !3447, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3447 = !DISubroutineType(types: !3448)
!3448 = !{!115, !285, !3422, !203}
!3449 = !DILocation(line: 26, column: 1, scope: !3446)
!3450 = !DILocalVariable(name: "self", arg: 1, scope: !3446, file: !3419, line: 25, type: !3422)
!3451 = !DILocation(line: 25, column: 26, scope: !3446)
!3452 = !DILocalVariable(name: "bytes", arg: 2, scope: !3446, file: !3419, line: 25, type: !203)
!3453 = !DILocation(line: 25, column: 40, scope: !3446)
!3454 = !DILocation(line: 27, column: 6, scope: !3446)
!3455 = !DILocation(line: 27, column: 30, scope: !3446)
!3456 = !DILocalVariable(name: "m", scope: !3446, file: !3419, line: 28, type: !207, align: 8)
!3457 = !DILocation(line: 28, column: 6, scope: !3446)
!3458 = !DILocation(line: 28, column: 14, scope: !3446)
!3459 = !DILocation(line: 28, column: 25, scope: !3446)
!3460 = !DILocation(line: 17, column: 10, scope: !3461, inlinedAt: !3462)
!3461 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !686, file: !686, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3462 = !DILocation(line: 100, column: 10, scope: !3463, inlinedAt: !3464)
!3463 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !686, file: !686, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3464 = !DILocation(line: 28, column: 10, scope: !3446)
!3465 = !DILocation(line: 17, column: 14, scope: !3461, inlinedAt: !3462)
!3466 = !DILocation(line: 100, column: 31, scope: !3463, inlinedAt: !3464)
!3467 = !DILocation(line: 100, column: 35, scope: !3463, inlinedAt: !3464)
!3468 = !DILocalVariable(name: "n", scope: !3446, file: !3419, line: 29, type: !207, align: 8)
!3469 = !DILocation(line: 29, column: 6, scope: !3446)
!3470 = !DILocation(line: 29, column: 10, scope: !3446)
!3471 = !DILocation(line: 29, column: 35, scope: !3446)
!3472 = !DILocation(line: 29, column: 41, scope: !3446)
!3473 = !DILocation(line: 29, column: 42, scope: !3446)
!3474 = !DILocation(line: 30, column: 2, scope: !3446)
!3475 = !DILocation(line: 30, column: 16, scope: !3446)
!3476 = !DILocation(line: 31, column: 9, scope: !3446)
!3477 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.LimitReader.read_byte", scope: !3419, file: !3419, line: 34, type: !3478, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3478 = !DISubroutineType(types: !3479)
!3479 = !{!115, !117, !3422}
!3480 = !DILocation(line: 35, column: 1, scope: !3477)
!3481 = !DILocalVariable(name: "self", arg: 1, scope: !3477, file: !3419, line: 34, type: !3422)
!3482 = !DILocation(line: 34, column: 32, scope: !3477)
!3483 = !DILocation(line: 36, column: 6, scope: !3477)
!3484 = !DILocation(line: 36, column: 30, scope: !3477)
!3485 = !DILocation(line: 38, column: 9, scope: !3477)
!3486 = !DILocation(line: 37, column: 12, scope: !3487)
!3487 = distinct !DILexicalBlock(scope: !3477, file: !3419, line: 37, column: 12)
!3488 = distinct !DISubprogram(name: "available", linkageName: "std.io.LimitReader.available", scope: !3419, file: !3419, line: 41, type: !3489, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3489 = !DISubroutineType(types: !3490)
!3490 = !{!115, !285, !3422}
!3491 = !DILocation(line: 42, column: 1, scope: !3488)
!3492 = !DILocalVariable(name: "self", arg: 1, scope: !3488, file: !3419, line: 41, type: !3422)
!3493 = !DILocation(line: 41, column: 31, scope: !3488)
!3494 = !DILocation(line: 43, column: 9, scope: !3488)
!3495 = distinct !DISubprogram(name: "init", linkageName: "std.io.ByteBuffer.init", scope: !3496, file: !3496, line: 19, type: !3497, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3496 = !DIFile(filename: "bytebuffer.c3", directory: "/usr/lib/c3c/lib/std/io/stream")
!3497 = !DISubroutineType(types: !3498)
!3498 = !{!3499, !3499, !2487, !208, !208}
!3499 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteBuffer*", baseType: !3500, size: 64, align: 64, dwarfAddressSpace: 0)
!3500 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteBuffer", scope: !3496, file: !3496, line: 4, size: 512, align: 64, elements: !3501, identifier: "std.io.ByteBuffer")
!3501 = !{!3502, !3503, !3504, !3505, !3506, !3507}
!3502 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !3500, file: !3496, line: 6, baseType: !2487, size: 128, align: 64)
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "max_read", scope: !3500, file: !3496, line: 7, baseType: !207, size: 64, align: 64, offset: 128)
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !3500, file: !3496, line: 8, baseType: !203, size: 128, align: 64, offset: 192)
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !3500, file: !3496, line: 9, baseType: !207, size: 64, align: 64, offset: 320)
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "write_idx", scope: !3500, file: !3496, line: 10, baseType: !207, size: 64, align: 64, offset: 384)
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "has_last", scope: !3500, file: !3496, line: 11, baseType: !753, size: 8, align: 8, offset: 448)
!3508 = !DILocation(line: 20, column: 1, scope: !3495)
!3509 = !DILocalVariable(name: "self", arg: 1, scope: !3495, file: !3496, line: 19, type: !3499)
!3510 = !DILocation(line: 19, column: 32, scope: !3495)
!3511 = !DILocalVariable(name: "allocator", arg: 2, scope: !3495, file: !3496, line: 19, type: !2487)
!3512 = !DILocation(line: 19, column: 49, scope: !3495)
!3513 = !DILocalVariable(name: "max_read", arg: 3, scope: !3495, file: !3496, line: 19, type: !207)
!3514 = !DILocation(line: 19, column: 64, scope: !3495)
!3515 = !DILocalVariable(name: "initial_capacity", arg: 4, scope: !3495, file: !3496, line: 19, type: !207)
!3516 = !DILocation(line: 19, column: 78, scope: !3495)
!3517 = !DILocation(line: 17, column: 11, scope: !3518)
!3518 = distinct !DILexicalBlock(scope: !3495, file: !3496, line: 20, column: 1)
!3519 = !DILocation(line: 21, column: 3, scope: !3495)
!3520 = !DILocation(line: 21, column: 25, scope: !3495)
!3521 = !DILocation(line: 21, column: 48, scope: !3495)
!3522 = !DILocation(line: 47, column: 10, scope: !3523, inlinedAt: !3524)
!3523 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !686, file: !686, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3524 = !DILocation(line: 116, column: 10, scope: !3525, inlinedAt: !3526)
!3525 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !686, file: !686, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3526 = !DILocation(line: 22, column: 21, scope: !3495)
!3527 = !DILocation(line: 47, column: 14, scope: !3523, inlinedAt: !3524)
!3528 = !DILocation(line: 116, column: 34, scope: !3525, inlinedAt: !3526)
!3529 = !DILocation(line: 116, column: 38, scope: !3525, inlinedAt: !3526)
!3530 = !DILocation(line: 23, column: 12, scope: !3495)
!3531 = !DILocation(line: 23, column: 2, scope: !3495)
!3532 = !DILocation(line: 24, column: 9, scope: !3495)
!3533 = distinct !DISubprogram(name: "tinit", linkageName: "std.io.ByteBuffer.tinit", scope: !3496, file: !3496, line: 27, type: !3534, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3534 = !DISubroutineType(types: !3535)
!3535 = !{!3499, !3499, !208, !208}
!3536 = !DILocation(line: 28, column: 1, scope: !3533)
!3537 = !DILocalVariable(name: "self", arg: 1, scope: !3533, file: !3496, line: 27, type: !3499)
!3538 = !DILocation(line: 27, column: 33, scope: !3533)
!3539 = !DILocalVariable(name: "max_read", arg: 2, scope: !3533, file: !3496, line: 27, type: !207)
!3540 = !DILocation(line: 27, column: 44, scope: !3533)
!3541 = !DILocalVariable(name: "initial_capacity", arg: 3, scope: !3533, file: !3496, line: 27, type: !207)
!3542 = !DILocation(line: 27, column: 58, scope: !3533)
!3543 = !DILocation(line: 29, column: 9, scope: !3533)
!3544 = !DILocation(line: 29, column: 19, scope: !3533)
!3545 = !DILocation(line: 29, column: 25, scope: !3533)
!3546 = !DILocation(line: 29, column: 35, scope: !3533)
!3547 = !DILocation(line: 17, column: 11, scope: !3533)
!3548 = distinct !DISubprogram(name: "init_with_buffer", linkageName: "std.io.ByteBuffer.init_with_buffer", scope: !3496, file: !3496, line: 36, type: !3549, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3549 = !DISubroutineType(types: !3550)
!3550 = !{!3499, !3499, !203}
!3551 = !DILocation(line: 37, column: 1, scope: !3548)
!3552 = !DILocalVariable(name: "self", arg: 1, scope: !3548, file: !3496, line: 36, type: !3499)
!3553 = !DILocation(line: 36, column: 44, scope: !3548)
!3554 = !DILocalVariable(name: "buf", arg: 2, scope: !3548, file: !3496, line: 36, type: !203)
!3555 = !DILocation(line: 36, column: 58, scope: !3548)
!3556 = !DILocation(line: 33, column: 11, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3548, file: !3496, line: 37, column: 1)
!3558 = !DILocation(line: 34, column: 11, scope: !3557)
!3559 = !DILocation(line: 38, column: 3, scope: !3548)
!3560 = !DILocation(line: 38, column: 24, scope: !3548)
!3561 = !DILocation(line: 38, column: 42, scope: !3548)
!3562 = !DILocation(line: 39, column: 9, scope: !3548)
!3563 = distinct !DISubprogram(name: "free", linkageName: "std.io.ByteBuffer.free", scope: !3496, file: !3496, line: 42, type: !3564, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3564 = !DISubroutineType(types: !3565)
!3565 = !{null, !3499}
!3566 = !DILocation(line: 43, column: 1, scope: !3563)
!3567 = !DILocalVariable(name: "self", arg: 1, scope: !3563, file: !3496, line: 42, type: !3499)
!3568 = !DILocation(line: 42, column: 25, scope: !3563)
!3569 = !DILocation(line: 44, column: 6, scope: !3563)
!3570 = !DILocation(line: 44, column: 38, scope: !3563)
!3571 = !DILocation(line: 44, column: 54, scope: !3563)
!3572 = !DILocation(line: 118, column: 6, scope: !3573, inlinedAt: !3574)
!3573 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2506, file: !2506, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3574 = !DILocation(line: 44, column: 22, scope: !3563)
!3575 = !DILocation(line: 118, column: 18, scope: !3573, inlinedAt: !3574)
!3576 = !DILocation(line: 122, column: 20, scope: !3573, inlinedAt: !3574)
!3577 = !DILocation(line: 122, column: 2, scope: !3573, inlinedAt: !3574)
!3578 = !DILocation(line: 45, column: 3, scope: !3563)
!3579 = distinct !DISubprogram(name: "write", linkageName: "std.io.ByteBuffer.write", scope: !3496, file: !3496, line: 48, type: !3580, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3580 = !DISubroutineType(types: !3581)
!3581 = !{!115, !285, !3499, !203}
!3582 = !DILocation(line: 49, column: 1, scope: !3579)
!3583 = !DILocalVariable(name: "self", arg: 1, scope: !3579, file: !3496, line: 48, type: !3499)
!3584 = !DILocation(line: 48, column: 26, scope: !3579)
!3585 = !DILocalVariable(name: "bytes", arg: 2, scope: !3579, file: !3496, line: 48, type: !203)
!3586 = !DILocation(line: 48, column: 40, scope: !3579)
!3587 = !DILocalVariable(name: "cap", scope: !3579, file: !3496, line: 50, type: !207, align: 8)
!3588 = !DILocation(line: 50, column: 6, scope: !3579)
!3589 = !DILocation(line: 50, column: 12, scope: !3579)
!3590 = !DILocation(line: 50, column: 29, scope: !3579)
!3591 = !DILocation(line: 51, column: 6, scope: !3579)
!3592 = !DILocation(line: 51, column: 12, scope: !3579)
!3593 = !DILocation(line: 51, column: 33, scope: !3579)
!3594 = !DILocation(line: 51, column: 23, scope: !3579)
!3595 = !DILocation(line: 52, column: 41, scope: !3579)
!3596 = !DILocation(line: 52, column: 47, scope: !3579)
!3597 = !DILocation(line: 52, column: 2, scope: !3579)
!3598 = !DILocation(line: 52, column: 13, scope: !3579)
!3599 = !DILocation(line: 52, column: 28, scope: !3579)
!3600 = !DILocation(line: 53, column: 2, scope: !3579)
!3601 = !DILocation(line: 53, column: 20, scope: !3579)
!3602 = !DILocation(line: 54, column: 9, scope: !3579)
!3603 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.ByteBuffer.write_byte", scope: !3496, file: !3496, line: 57, type: !3604, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3604 = !DISubroutineType(types: !3605)
!3605 = !{!115, !11, !3499, !20}
!3606 = !DILocation(line: 58, column: 1, scope: !3603)
!3607 = !DILocalVariable(name: "self", arg: 1, scope: !3603, file: !3496, line: 57, type: !3499)
!3608 = !DILocation(line: 57, column: 32, scope: !3603)
!3609 = !DILocalVariable(name: "c", arg: 2, scope: !3603, file: !3496, line: 57, type: !20)
!3610 = !DILocation(line: 57, column: 44, scope: !3603)
!3611 = !DILocalVariable(name: "cap", scope: !3603, file: !3496, line: 59, type: !207, align: 8)
!3612 = !DILocation(line: 59, column: 6, scope: !3603)
!3613 = !DILocation(line: 59, column: 12, scope: !3603)
!3614 = !DILocation(line: 59, column: 29, scope: !3603)
!3615 = !DILocation(line: 60, column: 6, scope: !3603)
!3616 = !DILocation(line: 60, column: 26, scope: !3603)
!3617 = !DILocation(line: 60, column: 16, scope: !3603)
!3618 = !DILocation(line: 61, column: 2, scope: !3603)
!3619 = !DILocation(line: 61, column: 13, scope: !3603)
!3620 = !DILocation(line: 61, column: 31, scope: !3603)
!3621 = !DILocation(line: 62, column: 2, scope: !3603)
!3622 = distinct !DISubprogram(name: "read", linkageName: "std.io.ByteBuffer.read", scope: !3496, file: !3496, line: 65, type: !3580, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3623 = !DILocation(line: 66, column: 1, scope: !3622)
!3624 = !DILocalVariable(name: "self", arg: 1, scope: !3622, file: !3496, line: 65, type: !3499)
!3625 = !DILocation(line: 65, column: 25, scope: !3622)
!3626 = !DILocalVariable(name: "bytes", arg: 2, scope: !3622, file: !3496, line: 65, type: !203)
!3627 = !DILocation(line: 65, column: 39, scope: !3622)
!3628 = !DILocalVariable(name: "readable", scope: !3622, file: !3496, line: 67, type: !207, align: 8)
!3629 = !DILocation(line: 67, column: 6, scope: !3622)
!3630 = !DILocation(line: 67, column: 17, scope: !3622)
!3631 = !DILocation(line: 67, column: 34, scope: !3622)
!3632 = !DILocation(line: 68, column: 6, scope: !3622)
!3633 = !DILocation(line: 70, column: 3, scope: !3634)
!3634 = distinct !DILexicalBlock(scope: !3622, file: !3496, line: 69, column: 2)
!3635 = !DILocation(line: 70, column: 19, scope: !3634)
!3636 = !DILocation(line: 71, column: 10, scope: !3634)
!3637 = !DILocalVariable(name: "n", scope: !3622, file: !3496, line: 73, type: !207, align: 8)
!3638 = !DILocation(line: 73, column: 6, scope: !3622)
!3639 = !DILocation(line: 73, column: 24, scope: !3622)
!3640 = !DILocation(line: 17, column: 10, scope: !3641, inlinedAt: !3642)
!3641 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !686, file: !686, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3642 = !DILocation(line: 100, column: 10, scope: !3643, inlinedAt: !3644)
!3643 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !686, file: !686, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3644 = !DILocation(line: 73, column: 10, scope: !3622)
!3645 = !DILocation(line: 17, column: 14, scope: !3641, inlinedAt: !3642)
!3646 = !DILocation(line: 100, column: 31, scope: !3643, inlinedAt: !3644)
!3647 = !DILocation(line: 100, column: 35, scope: !3643, inlinedAt: !3644)
!3648 = !DILocation(line: 74, column: 14, scope: !3622)
!3649 = !DILocation(line: 74, column: 25, scope: !3622)
!3650 = !DILocation(line: 74, column: 39, scope: !3622)
!3651 = !DILocation(line: 74, column: 2, scope: !3622)
!3652 = !DILocation(line: 74, column: 8, scope: !3622)
!3653 = !DILocation(line: 74, column: 9, scope: !3622)
!3654 = !DILocation(line: 75, column: 2, scope: !3622)
!3655 = !DILocation(line: 75, column: 19, scope: !3622)
!3656 = !DILocation(line: 76, column: 2, scope: !3622)
!3657 = !DILocation(line: 76, column: 18, scope: !3622)
!3658 = !DILocation(line: 138, column: 25, scope: !3659, inlinedAt: !3661)
!3659 = distinct !DILexicalBlock(scope: !3660, file: !3496, line: 139, column: 1)
!3660 = distinct !DISubprogram(name: "shrink", linkageName: "shrink", scope: !3496, file: !3496, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3661 = !DILocation(line: 77, column: 2, scope: !3622)
!3662 = !DILocation(line: 140, column: 6, scope: !3660, inlinedAt: !3661)
!3663 = !DILocation(line: 140, column: 23, scope: !3660, inlinedAt: !3661)
!3664 = !DILocalVariable(name: "readable", scope: !3665, file: !3496, line: 143, type: !207, align: 8)
!3665 = distinct !DILexicalBlock(scope: !3660, file: !3496, line: 141, column: 2)
!3666 = !DILocation(line: 143, column: 7, scope: !3665, inlinedAt: !3661)
!3667 = !DILocation(line: 143, column: 18, scope: !3665, inlinedAt: !3661)
!3668 = !DILocation(line: 143, column: 35, scope: !3665, inlinedAt: !3661)
!3669 = !DILocation(line: 144, column: 31, scope: !3665, inlinedAt: !3661)
!3670 = !DILocation(line: 144, column: 42, scope: !3665, inlinedAt: !3661)
!3671 = !DILocation(line: 144, column: 64, scope: !3665, inlinedAt: !3661)
!3672 = !DILocation(line: 144, column: 60, scope: !3665, inlinedAt: !3661)
!3673 = !DILocation(line: 144, column: 3, scope: !3665, inlinedAt: !3661)
!3674 = !DILocation(line: 144, column: 14, scope: !3665, inlinedAt: !3661)
!3675 = !DILocation(line: 144, column: 19, scope: !3665, inlinedAt: !3661)
!3676 = !DILocation(line: 144, column: 15, scope: !3665, inlinedAt: !3661)
!3677 = !DILocation(line: 145, column: 3, scope: !3665, inlinedAt: !3661)
!3678 = !DILocation(line: 145, column: 24, scope: !3665, inlinedAt: !3661)
!3679 = !DILocation(line: 145, column: 20, scope: !3665, inlinedAt: !3661)
!3680 = !DILocation(line: 146, column: 3, scope: !3665, inlinedAt: !3661)
!3681 = !DILocation(line: 146, column: 19, scope: !3665, inlinedAt: !3661)
!3682 = !DILocation(line: 78, column: 9, scope: !3622)
!3683 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ByteBuffer.read_byte", scope: !3496, file: !3496, line: 81, type: !3684, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3684 = !DISubroutineType(types: !3685)
!3685 = !{!115, !117, !3499}
!3686 = !DILocation(line: 82, column: 1, scope: !3683)
!3687 = !DILocalVariable(name: "self", arg: 1, scope: !3683, file: !3496, line: 81, type: !3499)
!3688 = !DILocation(line: 81, column: 31, scope: !3683)
!3689 = !DILocalVariable(name: "readable", scope: !3683, file: !3496, line: 83, type: !207, align: 8)
!3690 = !DILocation(line: 83, column: 6, scope: !3683)
!3691 = !DILocation(line: 83, column: 17, scope: !3683)
!3692 = !DILocation(line: 83, column: 34, scope: !3683)
!3693 = !DILocation(line: 84, column: 6, scope: !3683)
!3694 = !DILocation(line: 86, column: 3, scope: !3695)
!3695 = distinct !DILexicalBlock(scope: !3683, file: !3496, line: 85, column: 2)
!3696 = !DILocation(line: 86, column: 19, scope: !3695)
!3697 = !DILocation(line: 87, column: 10, scope: !3695)
!3698 = !DILocalVariable(name: "c", scope: !3683, file: !3496, line: 89, type: !20, align: 1)
!3699 = !DILocation(line: 89, column: 7, scope: !3683)
!3700 = !DILocation(line: 89, column: 11, scope: !3683)
!3701 = !DILocation(line: 89, column: 22, scope: !3683)
!3702 = !DILocation(line: 90, column: 2, scope: !3683)
!3703 = !DILocation(line: 91, column: 2, scope: !3683)
!3704 = !DILocation(line: 91, column: 18, scope: !3683)
!3705 = !DILocation(line: 138, column: 25, scope: !3706, inlinedAt: !3708)
!3706 = distinct !DILexicalBlock(scope: !3707, file: !3496, line: 139, column: 1)
!3707 = distinct !DISubprogram(name: "shrink", linkageName: "shrink", scope: !3496, file: !3496, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3708 = !DILocation(line: 92, column: 2, scope: !3683)
!3709 = !DILocation(line: 140, column: 6, scope: !3707, inlinedAt: !3708)
!3710 = !DILocation(line: 140, column: 23, scope: !3707, inlinedAt: !3708)
!3711 = !DILocalVariable(name: "readable", scope: !3712, file: !3496, line: 143, type: !207, align: 8)
!3712 = distinct !DILexicalBlock(scope: !3707, file: !3496, line: 141, column: 2)
!3713 = !DILocation(line: 143, column: 7, scope: !3712, inlinedAt: !3708)
!3714 = !DILocation(line: 143, column: 18, scope: !3712, inlinedAt: !3708)
!3715 = !DILocation(line: 143, column: 35, scope: !3712, inlinedAt: !3708)
!3716 = !DILocation(line: 144, column: 31, scope: !3712, inlinedAt: !3708)
!3717 = !DILocation(line: 144, column: 42, scope: !3712, inlinedAt: !3708)
!3718 = !DILocation(line: 144, column: 64, scope: !3712, inlinedAt: !3708)
!3719 = !DILocation(line: 144, column: 60, scope: !3712, inlinedAt: !3708)
!3720 = !DILocation(line: 144, column: 3, scope: !3712, inlinedAt: !3708)
!3721 = !DILocation(line: 144, column: 14, scope: !3712, inlinedAt: !3708)
!3722 = !DILocation(line: 144, column: 19, scope: !3712, inlinedAt: !3708)
!3723 = !DILocation(line: 144, column: 15, scope: !3712, inlinedAt: !3708)
!3724 = !DILocation(line: 145, column: 3, scope: !3712, inlinedAt: !3708)
!3725 = !DILocation(line: 145, column: 24, scope: !3712, inlinedAt: !3708)
!3726 = !DILocation(line: 145, column: 20, scope: !3712, inlinedAt: !3708)
!3727 = !DILocation(line: 146, column: 3, scope: !3712, inlinedAt: !3708)
!3728 = !DILocation(line: 146, column: 19, scope: !3712, inlinedAt: !3708)
!3729 = !DILocation(line: 93, column: 9, scope: !3683)
!3730 = distinct !DISubprogram(name: "pushback_byte", linkageName: "std.io.ByteBuffer.pushback_byte", scope: !3496, file: !3496, line: 99, type: !3731, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3731 = !DISubroutineType(types: !3732)
!3732 = !{!115, !11, !3499}
!3733 = !DILocation(line: 100, column: 1, scope: !3730)
!3734 = !DILocalVariable(name: "self", arg: 1, scope: !3730, file: !3496, line: 99, type: !3499)
!3735 = !DILocation(line: 99, column: 35, scope: !3730)
!3736 = !DILocation(line: 101, column: 7, scope: !3730)
!3737 = !DILocation(line: 101, column: 29, scope: !3730)
!3738 = !DILocation(line: 102, column: 9, scope: !3730)
!3739 = !DILocation(line: 103, column: 2, scope: !3730)
!3740 = !DILocation(line: 104, column: 2, scope: !3730)
!3741 = !DILocation(line: 104, column: 18, scope: !3730)
!3742 = distinct !DISubprogram(name: "seek", linkageName: "std.io.ByteBuffer.seek", scope: !3496, file: !3496, line: 107, type: !3743, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3743 = !DISubroutineType(types: !3744)
!3744 = !{!115, !285, !3499, !116, !52}
!3745 = !DILocation(line: 108, column: 1, scope: !3742)
!3746 = !DILocalVariable(name: "self", arg: 1, scope: !3742, file: !3496, line: 107, type: !3499)
!3747 = !DILocation(line: 107, column: 25, scope: !3742)
!3748 = !DILocalVariable(name: "offset", arg: 2, scope: !3742, file: !3496, line: 107, type: !668)
!3749 = !DILocation(line: 107, column: 36, scope: !3742)
!3750 = !DILocalVariable(name: "seek", arg: 3, scope: !3742, file: !3496, line: 107, type: !52)
!3751 = !DILocation(line: 107, column: 49, scope: !3742)
!3752 = !DILocation(line: 112, column: 8, scope: !3753)
!3753 = distinct !DILexicalBlock(scope: !3754, file: !3496, line: 112, column: 4)
!3754 = distinct !DILexicalBlock(scope: !3742, file: !3496, line: 109, column: 2)
!3755 = !DILocation(line: 112, column: 22, scope: !3753)
!3756 = !DILocation(line: 112, column: 31, scope: !3753)
!3757 = !DILocation(line: 112, column: 54, scope: !3753)
!3758 = !DILocation(line: 113, column: 4, scope: !3753)
!3759 = !DILocation(line: 113, column: 20, scope: !3753)
!3760 = !DILocation(line: 114, column: 11, scope: !3753)
!3761 = !DILocation(line: 116, column: 9, scope: !3762)
!3762 = distinct !DILexicalBlock(scope: !3754, file: !3496, line: 116, column: 4)
!3763 = !DILocation(line: 116, column: 23, scope: !3762)
!3764 = !DILocation(line: 116, column: 40, scope: !3762)
!3765 = !DILocation(line: 117, column: 6, scope: !3762)
!3766 = !DILocation(line: 117, column: 20, scope: !3762)
!3767 = !DILocation(line: 117, column: 36, scope: !3762)
!3768 = !DILocation(line: 117, column: 45, scope: !3762)
!3769 = !DILocation(line: 117, column: 69, scope: !3762)
!3770 = !DILocation(line: 118, column: 4, scope: !3762)
!3771 = !DILocation(line: 118, column: 21, scope: !3762)
!3772 = !DILocation(line: 120, column: 8, scope: !3773)
!3773 = distinct !DILexicalBlock(scope: !3754, file: !3496, line: 120, column: 4)
!3774 = !DILocation(line: 120, column: 22, scope: !3773)
!3775 = !DILocation(line: 120, column: 31, scope: !3773)
!3776 = !DILocation(line: 120, column: 54, scope: !3773)
!3777 = !DILocation(line: 121, column: 4, scope: !3773)
!3778 = !DILocation(line: 121, column: 20, scope: !3773)
!3779 = !DILocation(line: 121, column: 37, scope: !3773)
!3780 = !DILocation(line: 123, column: 9, scope: !3742)
!3781 = distinct !DISubprogram(name: "available", linkageName: "std.io.ByteBuffer.available", scope: !3496, file: !3496, line: 126, type: !3782, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3782 = !DISubroutineType(types: !3783)
!3783 = !{!115, !285, !3499}
!3784 = !DILocation(line: 127, column: 1, scope: !3781)
!3785 = !DILocalVariable(name: "self", arg: 1, scope: !3781, file: !3496, line: 126, type: !3499)
!3786 = !DILocation(line: 126, column: 30, scope: !3781)
!3787 = !DILocation(line: 128, column: 9, scope: !3781)
!3788 = !DILocation(line: 128, column: 26, scope: !3781)
!3789 = distinct !DISubprogram(name: "grow", linkageName: "std.io.ByteBuffer.grow", scope: !3496, file: !3496, line: 131, type: !3790, scopeLine: 131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3790 = !DISubroutineType(types: !3791)
!3791 = !{null, !3499, !208}
!3792 = !DILocation(line: 132, column: 1, scope: !3789)
!3793 = !DILocalVariable(name: "self", arg: 1, scope: !3789, file: !3496, line: 131, type: !3499)
!3794 = !DILocation(line: 131, column: 25, scope: !3789)
!3795 = !DILocalVariable(name: "n", arg: 2, scope: !3789, file: !3496, line: 131, type: !207)
!3796 = !DILocation(line: 131, column: 36, scope: !3789)
!3797 = !DILocalVariable(name: "y", scope: !3798, file: !3496, line: 978, type: !207, align: 8)
!3798 = distinct !DISubprogram(name: "next_power_of_2", linkageName: "next_power_of_2", scope: !760, file: !760, line: 976, scopeLine: 976, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3799 = !DILocation(line: 978, column: 13, scope: !3798, inlinedAt: !3800)
!3800 = !DILocation(line: 133, column: 6, scope: !3789)
!3801 = !DILocation(line: 978, column: 17, scope: !3798, inlinedAt: !3800)
!3802 = !DILocation(line: 979, column: 2, scope: !3798, inlinedAt: !3800)
!3803 = !DILocation(line: 979, column: 9, scope: !3804, inlinedAt: !3800)
!3804 = distinct !DILexicalBlock(scope: !3798, file: !760, line: 979, column: 2)
!3805 = !DILocation(line: 979, column: 13, scope: !3804, inlinedAt: !3800)
!3806 = !DILocation(line: 979, column: 16, scope: !3804, inlinedAt: !3800)
!3807 = !DILocation(line: 979, column: 21, scope: !3804, inlinedAt: !3800)
!3808 = !DILocation(line: 980, column: 9, scope: !3798, inlinedAt: !3800)
!3809 = !DILocalVariable(name: "p", scope: !3789, file: !3496, line: 134, type: !117, align: 8)
!3810 = !DILocation(line: 134, column: 8, scope: !3789)
!3811 = !DILocation(line: 134, column: 31, scope: !3789)
!3812 = !DILocation(line: 134, column: 47, scope: !3789)
!3813 = !DILocation(line: 107, column: 6, scope: !3814, inlinedAt: !3815)
!3814 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !2506, file: !2506, line: 105, scopeLine: 105, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3815 = !DILocation(line: 102, column: 9, scope: !3816, inlinedAt: !3817)
!3816 = distinct !DISubprogram(name: "realloc", linkageName: "realloc", scope: !2506, file: !2506, line: 100, scopeLine: 100, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3817 = !DILocation(line: 134, column: 12, scope: !3789)
!3818 = !DILocation(line: 118, column: 6, scope: !3819, inlinedAt: !3820)
!3819 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2506, file: !2506, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3820 = !DILocation(line: 109, column: 3, scope: !3821, inlinedAt: !3815)
!3821 = distinct !DILexicalBlock(scope: !3814, file: !2506, line: 108, column: 2)
!3822 = !DILocation(line: 118, column: 18, scope: !3819, inlinedAt: !3820)
!3823 = !DILocation(line: 122, column: 20, scope: !3819, inlinedAt: !3820)
!3824 = !DILocation(line: 122, column: 2, scope: !3819, inlinedAt: !3820)
!3825 = !DILocation(line: 110, column: 10, scope: !3821, inlinedAt: !3815)
!3826 = !DILocation(line: 112, column: 6, scope: !3814, inlinedAt: !3815)
!3827 = !DILocation(line: 112, column: 37, scope: !3814, inlinedAt: !3815)
!3828 = !DILocation(line: 37, column: 12, scope: !3814, inlinedAt: !3815)
!3829 = !DILocation(line: 973, column: 9, scope: !3830, inlinedAt: !3831)
!3830 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !760, file: !760, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3831 = !DILocation(line: 37, column: 26, scope: !3814, inlinedAt: !3815)
!3832 = !DILocation(line: 973, column: 20, scope: !3830, inlinedAt: !3831)
!3833 = !DILocation(line: 973, column: 25, scope: !3830, inlinedAt: !3831)
!3834 = !DILocation(line: 112, column: 19, scope: !3814, inlinedAt: !3815)
!3835 = !DILocation(line: 113, column: 26, scope: !3814, inlinedAt: !3815)
!3836 = !DILocation(line: 113, column: 31, scope: !3814, inlinedAt: !3815)
!3837 = !DILocation(line: 47, column: 12, scope: !3814, inlinedAt: !3815)
!3838 = !DILocation(line: 973, column: 9, scope: !3839, inlinedAt: !3840)
!3839 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !760, file: !760, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3840 = !DILocation(line: 47, column: 26, scope: !3814, inlinedAt: !3815)
!3841 = !DILocation(line: 973, column: 20, scope: !3839, inlinedAt: !3840)
!3842 = !DILocation(line: 973, column: 25, scope: !3839, inlinedAt: !3840)
!3843 = !DILocation(line: 113, column: 9, scope: !3814, inlinedAt: !3815)
!3844 = !DILocation(line: 135, column: 2, scope: !3789)
!3845 = !DILocation(line: 135, column: 15, scope: !3789)
!3846 = !DILocation(line: 135, column: 18, scope: !3789)
!3847 = distinct !DISubprogram(name: "init", linkageName: "std.io.Scanner.init", scope: !3848, file: !3848, line: 19, type: !3849, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3848 = !DIFile(filename: "scanner.c3", directory: "/usr/lib/c3c/lib/std/io/stream")
!3849 = !DISubroutineType(types: !3850)
!3850 = !{null, !3851, !88, !203}
!3851 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Scanner*", baseType: !3852, size: 64, align: 64, dwarfAddressSpace: 0)
!3852 = !DICompositeType(tag: DW_TAG_structure_type, name: "Scanner", scope: !3848, file: !3848, line: 3, size: 384, align: 64, elements: !3853, identifier: "std.io.Scanner")
!3853 = !{!3854, !3855, !3856, !3857}
!3854 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !3852, file: !3848, line: 5, baseType: !88, size: 128, align: 64)
!3855 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !3852, file: !3848, line: 6, baseType: !203, size: 128, align: 64, offset: 128)
!3856 = !DIDerivedType(tag: DW_TAG_member, name: "pattern_idx", scope: !3852, file: !3848, line: 7, baseType: !207, size: 64, align: 64, offset: 256)
!3857 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !3852, file: !3848, line: 8, baseType: !207, size: 64, align: 64, offset: 320)
!3858 = !DILocation(line: 20, column: 1, scope: !3847)
!3859 = !DILocalVariable(name: "self", arg: 1, scope: !3847, file: !3848, line: 19, type: !3851)
!3860 = !DILocation(line: 19, column: 22, scope: !3847)
!3861 = !DILocalVariable(name: "stream", arg: 2, scope: !3847, file: !3848, line: 19, type: !88)
!3862 = !DILocation(line: 19, column: 38, scope: !3847)
!3863 = !DILocalVariable(name: "buffer", arg: 3, scope: !3847, file: !3848, line: 19, type: !203)
!3864 = !DILocation(line: 19, column: 53, scope: !3847)
!3865 = !DILocation(line: 17, column: 11, scope: !3866)
!3866 = distinct !DILexicalBlock(scope: !3847, file: !3848, line: 20, column: 1)
!3867 = !DILocation(line: 21, column: 3, scope: !3847)
!3868 = !DILocation(line: 21, column: 30, scope: !3847)
!3869 = !DILocation(line: 21, column: 45, scope: !3847)
!3870 = distinct !DISubprogram(name: "flush", linkageName: "std.io.Scanner.flush", scope: !3848, file: !3848, line: 28, type: !3871, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3871 = !DISubroutineType(types: !3872)
!3872 = !{!203, !3851}
!3873 = !DILocation(line: 29, column: 1, scope: !3870)
!3874 = !DILocalVariable(name: "self", arg: 1, scope: !3870, file: !3848, line: 28, type: !3851)
!3875 = !DILocation(line: 28, column: 25, scope: !3870)
!3876 = !DILocation(line: 30, column: 9, scope: !3870)
!3877 = !DILocation(line: 30, column: 26, scope: !3870)
!3878 = !DILocalVariable(name: "n", scope: !3870, file: !3848, line: 31, type: !207, align: 8)
!3879 = !DILocation(line: 31, column: 6, scope: !3870)
!3880 = !DILocation(line: 31, column: 10, scope: !3870)
!3881 = !DILocation(line: 31, column: 26, scope: !3870)
!3882 = !DILocalVariable(name: "buf", scope: !3870, file: !3848, line: 32, type: !203, align: 8)
!3883 = !DILocation(line: 32, column: 9, scope: !3870)
!3884 = !DILocation(line: 32, column: 15, scope: !3870)
!3885 = !DILocation(line: 32, column: 24, scope: !3870)
!3886 = !DILocation(line: 32, column: 41, scope: !3870)
!3887 = !DILocation(line: 33, column: 2, scope: !3870)
!3888 = !DILocation(line: 33, column: 21, scope: !3870)
!3889 = !DILocation(line: 34, column: 2, scope: !3870)
!3890 = !DILocation(line: 34, column: 18, scope: !3870)
!3891 = !DILocation(line: 35, column: 9, scope: !3870)
!3892 = distinct !DISubprogram(name: "close", linkageName: "std.io.Scanner.close", scope: !3848, file: !3848, line: 38, type: !3893, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3893 = !DISubroutineType(types: !3894)
!3894 = !{!115, !11, !3851}
!3895 = !DILocation(line: 39, column: 1, scope: !3892)
!3896 = !DILocalVariable(name: "self", arg: 1, scope: !3892, file: !3848, line: 38, type: !3851)
!3897 = !DILocation(line: 38, column: 24, scope: !3892)
!3898 = !DILocation(line: 40, column: 7, scope: !3892)
!3899 = !DILocation(line: 40, column: 41, scope: !3892)
!3900 = distinct !DISubprogram(name: "scan", linkageName: "std.io.Scanner.scan", scope: !3848, file: !3848, line: 48, type: !3901, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3901 = !DISubroutineType(types: !3902)
!3902 = !{!115, !419, !3851, !286}
!3903 = !DILocation(line: 49, column: 1, scope: !3900)
!3904 = !DILocalVariable(name: "self", arg: 1, scope: !3900, file: !3848, line: 48, type: !3851)
!3905 = !DILocation(line: 48, column: 25, scope: !3900)
!3906 = !DILocalVariable(name: "pattern", arg: 2, scope: !3900, file: !3848, line: 48, type: !286)
!3907 = !DILocation(line: 48, column: 39, scope: !3900)
!3908 = !DILocation(line: 45, column: 11, scope: !3909)
!3909 = distinct !DILexicalBlock(scope: !3900, file: !3848, line: 49, column: 1)
!3910 = !DILocation(line: 46, column: 11, scope: !3909)
!3911 = !DILocation(line: 46, column: 26, scope: !3909)
!3912 = !DILocation(line: 50, column: 6, scope: !3900)
!3913 = !DILocation(line: 53, column: 3, scope: !3914)
!3914 = distinct !DILexicalBlock(scope: !3900, file: !3848, line: 51, column: 2)
!3915 = !DILocation(line: 53, column: 31, scope: !3914)
!3916 = !DILocation(line: 90, column: 27, scope: !3917, inlinedAt: !3919)
!3917 = distinct !DILexicalBlock(scope: !3918, file: !3848, line: 91, column: 1)
!3918 = distinct !DISubprogram(name: "refill", linkageName: "refill", scope: !3848, file: !3848, line: 90, scopeLine: 90, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3919 = !DILocation(line: 53, column: 19, scope: !3914)
!3920 = !DILocalVariable(name: "n", scope: !3918, file: !3848, line: 92, type: !208, align: 8)
!3921 = !DILocation(line: 92, column: 7, scope: !3918, inlinedAt: !3919)
!3922 = !DILocation(line: 92, column: 11, scope: !3918, inlinedAt: !3919)
!3923 = !DILocation(line: 92, column: 36, scope: !3918, inlinedAt: !3919)
!3924 = !DILocalVariable(name: "err", scope: !3918, file: !3848, line: 93, type: !115, align: 8)
!3925 = !DILocation(line: 93, column: 12, scope: !3918, inlinedAt: !3919)
!3926 = !DILocation(line: 93, column: 18, scope: !3918, inlinedAt: !3919)
!3927 = !DILocation(line: 95, column: 7, scope: !3928, inlinedAt: !3919)
!3928 = distinct !DILexicalBlock(scope: !3918, file: !3848, line: 94, column: 2)
!3929 = !DILocation(line: 95, column: 30, scope: !3928, inlinedAt: !3919)
!3930 = !DILocation(line: 96, column: 10, scope: !3928, inlinedAt: !3919)
!3931 = !DILocation(line: 98, column: 9, scope: !3918, inlinedAt: !3919)
!3932 = !DILocation(line: 54, column: 3, scope: !3914)
!3933 = !DILocation(line: 54, column: 22, scope: !3914)
!3934 = !DILocation(line: 56, column: 9, scope: !3900)
!3935 = !DILocation(line: 56, column: 26, scope: !3900)
!3936 = !DILocalVariable(name: "n", scope: !3900, file: !3848, line: 57, type: !207, align: 8)
!3937 = !DILocation(line: 57, column: 6, scope: !3900)
!3938 = !DILocation(line: 57, column: 10, scope: !3900)
!3939 = !DILocation(line: 57, column: 26, scope: !3900)
!3940 = !DILocalVariable(name: "buf", scope: !3900, file: !3848, line: 58, type: !203, align: 8)
!3941 = !DILocation(line: 58, column: 9, scope: !3900)
!3942 = !DILocation(line: 58, column: 15, scope: !3900)
!3943 = !DILocation(line: 58, column: 24, scope: !3900)
!3944 = !DILocation(line: 58, column: 41, scope: !3900)
!3945 = !DILocalVariable(name: "i", scope: !3900, file: !3848, line: 59, type: !207, align: 8)
!3946 = !DILocation(line: 59, column: 10, scope: !3900)
!3947 = !DILocation(line: 85, column: 25, scope: !3948, inlinedAt: !3950)
!3948 = distinct !DILexicalBlock(scope: !3949, file: !3848, line: 86, column: 1)
!3949 = distinct !DISubprogram(name: "find", linkageName: "find", scope: !3848, file: !3848, line: 85, scopeLine: 85, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!3950 = !DILocation(line: 59, column: 14, scope: !3900)
!3951 = !DILocation(line: 87, column: 10, scope: !3949, inlinedAt: !3950)
!3952 = !DILocation(line: 87, column: 32, scope: !3949, inlinedAt: !3950)
!3953 = !DILocation(line: 533, column: 11, scope: !3949, inlinedAt: !3950)
!3954 = !DILocation(line: 61, column: 3, scope: !3955)
!3955 = distinct !DILexicalBlock(scope: !3900, file: !3848, line: 60, column: 2)
!3956 = !DILocation(line: 61, column: 23, scope: !3955)
!3957 = !DILocation(line: 61, column: 27, scope: !3955)
!3958 = !DILocation(line: 62, column: 10, scope: !3955)
!3959 = !DILocation(line: 62, column: 14, scope: !3955)
!3960 = !DILocation(line: 62, column: 15, scope: !3955)
!3961 = !DILocation(line: 64, column: 6, scope: !3900)
!3962 = !DILocation(line: 64, column: 31, scope: !3900)
!3963 = !DILocation(line: 64, column: 47, scope: !3900)
!3964 = !DILocation(line: 68, column: 10, scope: !3965)
!3965 = distinct !DILexicalBlock(scope: !3900, file: !3848, line: 65, column: 2)
!3966 = !DILocation(line: 71, column: 17, scope: !3900)
!3967 = !DILocation(line: 71, column: 21, scope: !3900)
!3968 = !DILocation(line: 71, column: 2, scope: !3900)
!3969 = !DILocation(line: 71, column: 11, scope: !3900)
!3970 = !DILocation(line: 71, column: 12, scope: !3900)
!3971 = !DILocation(line: 72, column: 2, scope: !3900)
!3972 = !DILocation(line: 72, column: 21, scope: !3900)
!3973 = !DILocation(line: 74, column: 8, scope: !3900)
!3974 = !DILocation(line: 74, column: 17, scope: !3900)
!3975 = !DILocalVariable(name: "p", scope: !3900, file: !3848, line: 75, type: !207, align: 8)
!3976 = !DILocation(line: 75, column: 6, scope: !3900)
!3977 = !DILocation(line: 90, column: 27, scope: !3978, inlinedAt: !3980)
!3978 = distinct !DILexicalBlock(scope: !3979, file: !3848, line: 91, column: 1)
!3979 = distinct !DISubprogram(name: "refill", linkageName: "refill", scope: !3848, file: !3848, line: 90, scopeLine: 90, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!3980 = !DILocation(line: 75, column: 10, scope: !3900)
!3981 = !DILocalVariable(name: "n", scope: !3979, file: !3848, line: 92, type: !208, align: 8)
!3982 = !DILocation(line: 92, column: 7, scope: !3979, inlinedAt: !3980)
!3983 = !DILocation(line: 92, column: 11, scope: !3979, inlinedAt: !3980)
!3984 = !DILocation(line: 92, column: 36, scope: !3979, inlinedAt: !3980)
!3985 = !DILocalVariable(name: "err", scope: !3979, file: !3848, line: 93, type: !115, align: 8)
!3986 = !DILocation(line: 93, column: 12, scope: !3979, inlinedAt: !3980)
!3987 = !DILocation(line: 93, column: 18, scope: !3979, inlinedAt: !3980)
!3988 = !DILocation(line: 95, column: 7, scope: !3989, inlinedAt: !3980)
!3989 = distinct !DILexicalBlock(scope: !3979, file: !3848, line: 94, column: 2)
!3990 = !DILocation(line: 95, column: 30, scope: !3989, inlinedAt: !3980)
!3991 = !DILocation(line: 96, column: 10, scope: !3989, inlinedAt: !3980)
!3992 = !DILocation(line: 98, column: 9, scope: !3979, inlinedAt: !3980)
!3993 = !DILocation(line: 76, column: 2, scope: !3900)
!3994 = !DILocation(line: 76, column: 18, scope: !3900)
!3995 = !DILocation(line: 76, column: 22, scope: !3900)
!3996 = !DILocation(line: 78, column: 8, scope: !3900)
!3997 = !DILocation(line: 78, column: 12, scope: !3900)
!3998 = !DILocation(line: 78, column: 13, scope: !3900)
!3999 = !DILocalVariable(name: "i", scope: !3900, file: !3848, line: 79, type: !207, align: 8)
!4000 = !DILocation(line: 79, column: 6, scope: !3900)
!4001 = !DILocation(line: 85, column: 25, scope: !4002, inlinedAt: !4004)
!4002 = distinct !DILexicalBlock(scope: !4003, file: !3848, line: 86, column: 1)
!4003 = distinct !DISubprogram(name: "find", linkageName: "find", scope: !3848, file: !3848, line: 85, scopeLine: 85, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4004 = !DILocation(line: 79, column: 10, scope: !3900)
!4005 = !DILocation(line: 87, column: 10, scope: !4003, inlinedAt: !4004)
!4006 = !DILocation(line: 87, column: 32, scope: !4003, inlinedAt: !4004)
!4007 = !DILocation(line: 533, column: 11, scope: !4003, inlinedAt: !4004)
!4008 = !DILocation(line: 80, column: 2, scope: !3900)
!4009 = !DILocation(line: 80, column: 21, scope: !3900)
!4010 = !DILocation(line: 80, column: 25, scope: !3900)
!4011 = !DILocation(line: 80, column: 29, scope: !3900)
!4012 = !DILocation(line: 82, column: 9, scope: !3900)
!4013 = !DILocation(line: 82, column: 18, scope: !3900)
!4014 = !DILocation(line: 82, column: 19, scope: !3900)
!4015 = !DILocation(line: 82, column: 23, scope: !3900)
!4016 = distinct !DISubprogram(name: "read", linkageName: "std.io.Scanner.read", scope: !3848, file: !3848, line: 101, type: !4017, scopeLine: 101, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4017 = !DISubroutineType(types: !4018)
!4018 = !{!115, !285, !3851, !203}
!4019 = !DILocation(line: 102, column: 1, scope: !4016)
!4020 = !DILocalVariable(name: "self", arg: 1, scope: !4016, file: !3848, line: 101, type: !3851)
!4021 = !DILocation(line: 101, column: 22, scope: !4016)
!4022 = !DILocalVariable(name: "bytes", arg: 2, scope: !4016, file: !3848, line: 101, type: !203)
!4023 = !DILocation(line: 101, column: 36, scope: !4016)
!4024 = !DILocalVariable(name: "n", scope: !4016, file: !3848, line: 103, type: !207, align: 8)
!4025 = !DILocation(line: 103, column: 6, scope: !4016)
!4026 = !DILocation(line: 104, column: 6, scope: !4016)
!4027 = !DILocation(line: 104, column: 25, scope: !4016)
!4028 = !DILocation(line: 106, column: 11, scope: !4029)
!4029 = distinct !DILexicalBlock(scope: !4016, file: !3848, line: 105, column: 2)
!4030 = !DILocation(line: 106, column: 22, scope: !4029)
!4031 = !DILocation(line: 106, column: 38, scope: !4029)
!4032 = !DILocation(line: 17, column: 10, scope: !4033, inlinedAt: !4034)
!4033 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !686, file: !686, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4034 = !DILocation(line: 100, column: 10, scope: !4035, inlinedAt: !4036)
!4035 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !686, file: !686, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4036 = !DILocation(line: 106, column: 7, scope: !4029)
!4037 = !DILocation(line: 17, column: 14, scope: !4033, inlinedAt: !4034)
!4038 = !DILocation(line: 100, column: 31, scope: !4035, inlinedAt: !4036)
!4039 = !DILocation(line: 100, column: 35, scope: !4035, inlinedAt: !4036)
!4040 = !DILocation(line: 107, column: 15, scope: !4029)
!4041 = !DILocation(line: 107, column: 24, scope: !4029)
!4042 = !DILocation(line: 107, column: 41, scope: !4029)
!4043 = !DILocation(line: 107, column: 3, scope: !4029)
!4044 = !DILocation(line: 107, column: 9, scope: !4029)
!4045 = !DILocation(line: 107, column: 10, scope: !4029)
!4046 = !DILocation(line: 108, column: 3, scope: !4029)
!4047 = !DILocation(line: 108, column: 23, scope: !4029)
!4048 = !DILocation(line: 109, column: 11, scope: !4029)
!4049 = !DILocation(line: 109, column: 17, scope: !4029)
!4050 = !DILocation(line: 111, column: 2, scope: !4016)
!4051 = !DILocation(line: 111, column: 7, scope: !4016)
!4052 = !DILocation(line: 111, column: 32, scope: !4016)
!4053 = !DILocation(line: 112, column: 9, scope: !4016)
!4054 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.Scanner.read_byte", scope: !3848, file: !3848, line: 115, type: !4055, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4055 = !DISubroutineType(types: !4056)
!4056 = !{!115, !117, !3851}
!4057 = !DILocation(line: 116, column: 1, scope: !4054)
!4058 = !DILocalVariable(name: "self", arg: 1, scope: !4054, file: !3848, line: 115, type: !3851)
!4059 = !DILocation(line: 115, column: 28, scope: !4054)
!4060 = !DILocation(line: 117, column: 6, scope: !4054)
!4061 = !DILocation(line: 117, column: 25, scope: !4054)
!4062 = !DILocation(line: 119, column: 10, scope: !4063)
!4063 = distinct !DILexicalBlock(scope: !4054, file: !3848, line: 118, column: 2)
!4064 = !DILocation(line: 119, column: 19, scope: !4063)
!4065 = !DILocation(line: 121, column: 9, scope: !4054)
!4066 = distinct !DISubprogram(name: "to_format", linkageName: "std.core.ReflectedParam.to_format", scope: !35, file: !35, line: 53, type: !4067, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4067 = !DISubroutineType(types: !4068)
!4068 = !{!115, !285, !4069, !604}
!4069 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ReflectedParam*", baseType: !4070, size: 64, align: 64, dwarfAddressSpace: 0)
!4070 = !DICompositeType(tag: DW_TAG_structure_type, name: "ReflectedParam", scope: !35, file: !35, line: 1, size: 192, align: 64, elements: !4071, identifier: "ReflectedParam")
!4071 = !{!4072, !4073}
!4072 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4070, file: !35, baseType: !286, size: 128, align: 64)
!4073 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4070, file: !35, baseType: !92, size: 64, align: 64, offset: 128)
!4074 = !DILocation(line: 54, column: 1, scope: !4066)
!4075 = !DILocalVariable(name: "self", arg: 1, scope: !4066, file: !35, line: 53, type: !4069)
!4076 = !DILocation(line: 53, column: 34, scope: !4066)
!4077 = !DILocalVariable(name: "f", arg: 2, scope: !4066, file: !35, line: 53, type: !604)
!4078 = !DILocation(line: 53, column: 52, scope: !4066)
!4079 = !DILocation(line: 55, column: 38, scope: !4066)
!4080 = !DILocation(line: 55, column: 9, scope: !4066)
!4081 = distinct !DISubprogram(name: "printf", linkageName: "std.io.Formatter.printf", scope: !35, file: !35, line: 58, type: !4082, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4082 = !DISubroutineType(types: !4083)
!4083 = !{!115, !285, !604, !286, !287}
!4084 = !DILocation(line: 59, column: 1, scope: !4081)
!4085 = !DILocalVariable(name: "self", arg: 1, scope: !4081, file: !35, line: 58, type: !604)
!4086 = !DILocation(line: 58, column: 26, scope: !4081)
!4087 = !DILocalVariable(name: "format", arg: 2, scope: !4081, file: !35, line: 58, type: !286)
!4088 = !DILocation(line: 58, column: 40, scope: !4081)
!4089 = !DILocalVariable(name: "args", arg: 3, scope: !4081, file: !35, line: 58, type: !287)
!4090 = !DILocation(line: 58, column: 48, scope: !4081)
!4091 = !DILocation(line: 60, column: 9, scope: !4081)
!4092 = distinct !DISubprogram(name: "init", linkageName: "std.io.Formatter.init", scope: !35, file: !35, line: 88, type: !4093, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4093 = !DISubroutineType(types: !4094)
!4094 = !{null, !604, !308, !11}
!4095 = !DILocation(line: 89, column: 1, scope: !4092)
!4096 = !DILocalVariable(name: "self", arg: 1, scope: !4092, file: !35, line: 88, type: !604)
!4097 = !DILocation(line: 88, column: 24, scope: !4092)
!4098 = !DILocalVariable(name: "out_fn", arg: 2, scope: !4092, file: !35, line: 88, type: !307)
!4099 = !DILocation(line: 88, column: 40, scope: !4092)
!4100 = !DILocalVariable(name: "data", arg: 3, scope: !4092, file: !35, line: 88, type: !11)
!4101 = !DILocation(line: 88, column: 54, scope: !4092)
!4102 = !DILocation(line: 90, column: 3, scope: !4092)
!4103 = !DILocation(line: 90, column: 20, scope: !4092)
!4104 = !DILocation(line: 90, column: 36, scope: !4092)
!4105 = distinct !DISubprogram(name: "out", linkageName: "std.io.Formatter.out", scope: !35, file: !35, line: 93, type: !4106, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4106 = !DISubroutineType(types: !4107)
!4107 = !{!115, !285, !604, !20}
!4108 = !DILocation(line: 94, column: 1, scope: !4105)
!4109 = !DILocalVariable(name: "self", arg: 1, scope: !4105, file: !35, line: 93, type: !604)
!4110 = !DILocation(line: 93, column: 23, scope: !4105)
!4111 = !DILocalVariable(name: "c", arg: 2, scope: !4105, file: !35, line: 93, type: !20)
!4112 = !DILocation(line: 93, column: 35, scope: !4105)
!4113 = !DILocalVariable(name: "err", scope: !4105, file: !35, line: 95, type: !115, align: 8)
!4114 = !DILocation(line: 95, column: 12, scope: !4105)
!4115 = !DILocation(line: 95, column: 18, scope: !4105)
!4116 = !DILocation(line: 95, column: 30, scope: !4105)
!4117 = !DILocation(line: 95, column: 41, scope: !4105)
!4118 = !DILocation(line: 97, column: 7, scope: !4119)
!4119 = distinct !DILexicalBlock(scope: !4105, file: !35, line: 96, column: 2)
!4120 = !DILocation(line: 97, column: 32, scope: !4119)
!4121 = !DILocation(line: 98, column: 3, scope: !4119)
!4122 = !DILocation(line: 98, column: 22, scope: !4119)
!4123 = !DILocation(line: 99, column: 10, scope: !4119)
!4124 = !DILocation(line: 101, column: 9, scope: !4105)
!4125 = distinct !DISubprogram(name: "print_with_function", linkageName: "std.io.Formatter.print_with_function", scope: !35, file: !35, line: 104, type: !4126, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4126 = !DISubroutineType(types: !4127)
!4127 = !{!115, !285, !604, !4128}
!4128 = !DICompositeType(tag: DW_TAG_structure_type, name: "Printable", size: 128, align: 64, elements: !4129, identifier: "Printable")
!4129 = !{!4130, !4131}
!4130 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4128, baseType: !11, size: 64, align: 64)
!4131 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4128, baseType: !92, size: 64, align: 64, offset: 64)
!4132 = !DILocation(line: 105, column: 1, scope: !4125)
!4133 = !DILocalVariable(name: "self", arg: 1, scope: !4125, file: !35, line: 104, type: !604)
!4134 = !DILocation(line: 104, column: 39, scope: !4125)
!4135 = !DILocalVariable(name: "arg", arg: 2, scope: !4125, file: !35, line: 104, type: !4128)
!4136 = !DILocation(line: 104, column: 56, scope: !4125)
!4137 = !DILocation(line: 106, column: 7, scope: !4125)
!4138 = !DILocalVariable(name: "old", scope: !4139, file: !35, line: 108, type: !94, align: 4)
!4139 = distinct !DILexicalBlock(scope: !4125, file: !35, line: 107, column: 2)
!4140 = !DILocation(line: 108, column: 14, scope: !4139)
!4141 = !DILocation(line: 108, column: 20, scope: !4139)
!4142 = !DILocalVariable(name: "old_width", scope: !4139, file: !35, line: 109, type: !94, align: 4)
!4143 = !DILocation(line: 109, column: 8, scope: !4139)
!4144 = !DILocation(line: 109, column: 20, scope: !4139)
!4145 = !DILocalVariable(name: "old_prec", scope: !4139, file: !35, line: 110, type: !94, align: 4)
!4146 = !DILocation(line: 110, column: 8, scope: !4139)
!4147 = !DILocation(line: 110, column: 19, scope: !4139)
!4148 = !DILocation(line: 117, column: 7, scope: !4139)
!4149 = !DILocation(line: 117, column: 20, scope: !4139)
!4150 = !DILocation(line: 113, column: 4, scope: !4151)
!4151 = distinct !DILexicalBlock(scope: !4139, file: !35, line: 112, column: 3)
!4152 = !DILocation(line: 113, column: 17, scope: !4151)
!4153 = !DILocation(line: 114, column: 4, scope: !4151)
!4154 = !DILocation(line: 114, column: 17, scope: !4151)
!4155 = !DILocation(line: 115, column: 4, scope: !4151)
!4156 = !DILocation(line: 115, column: 16, scope: !4151)
!4157 = !DILocation(line: 113, column: 4, scope: !4158)
!4158 = distinct !DILexicalBlock(scope: !4139, file: !35, line: 112, column: 3)
!4159 = !DILocation(line: 113, column: 17, scope: !4158)
!4160 = !DILocation(line: 114, column: 4, scope: !4158)
!4161 = !DILocation(line: 114, column: 17, scope: !4158)
!4162 = !DILocation(line: 115, column: 4, scope: !4158)
!4163 = !DILocation(line: 115, column: 16, scope: !4158)
!4164 = !DILocation(line: 118, column: 24, scope: !4139)
!4165 = !DILocation(line: 118, column: 10, scope: !4139)
!4166 = !DILocation(line: 113, column: 4, scope: !4167)
!4167 = distinct !DILexicalBlock(scope: !4139, file: !35, line: 112, column: 3)
!4168 = !DILocation(line: 113, column: 17, scope: !4167)
!4169 = !DILocation(line: 114, column: 4, scope: !4167)
!4170 = !DILocation(line: 114, column: 17, scope: !4167)
!4171 = !DILocation(line: 115, column: 4, scope: !4167)
!4172 = !DILocation(line: 115, column: 16, scope: !4167)
!4173 = !DILocation(line: 113, column: 4, scope: !4174)
!4174 = distinct !DILexicalBlock(scope: !4139, file: !35, line: 112, column: 3)
!4175 = !DILocation(line: 113, column: 17, scope: !4174)
!4176 = !DILocation(line: 114, column: 4, scope: !4174)
!4177 = !DILocation(line: 114, column: 17, scope: !4174)
!4178 = !DILocation(line: 115, column: 4, scope: !4174)
!4179 = !DILocation(line: 115, column: 16, scope: !4174)
!4180 = !DILocation(line: 120, column: 7, scope: !4125)
!4181 = !DILocalVariable(name: "old", scope: !4182, file: !35, line: 122, type: !94, align: 4)
!4182 = distinct !DILexicalBlock(scope: !4125, file: !35, line: 121, column: 2)
!4183 = !DILocation(line: 122, column: 14, scope: !4182)
!4184 = !DILocation(line: 122, column: 20, scope: !4182)
!4185 = !DILocalVariable(name: "old_width", scope: !4182, file: !35, line: 123, type: !94, align: 4)
!4186 = !DILocation(line: 123, column: 8, scope: !4182)
!4187 = !DILocation(line: 123, column: 20, scope: !4182)
!4188 = !DILocalVariable(name: "old_prec", scope: !4182, file: !35, line: 124, type: !94, align: 4)
!4189 = !DILocation(line: 124, column: 8, scope: !4182)
!4190 = !DILocation(line: 124, column: 19, scope: !4182)
!4191 = !DILocation(line: 131, column: 7, scope: !4182)
!4192 = !DILocation(line: 131, column: 20, scope: !4182)
!4193 = !DILocation(line: 127, column: 4, scope: !4194)
!4194 = distinct !DILexicalBlock(scope: !4182, file: !35, line: 126, column: 3)
!4195 = !DILocation(line: 127, column: 17, scope: !4194)
!4196 = !DILocation(line: 128, column: 4, scope: !4194)
!4197 = !DILocation(line: 128, column: 17, scope: !4194)
!4198 = !DILocation(line: 129, column: 4, scope: !4194)
!4199 = !DILocation(line: 129, column: 16, scope: !4194)
!4200 = !DILocation(line: 127, column: 4, scope: !4201)
!4201 = distinct !DILexicalBlock(scope: !4182, file: !35, line: 126, column: 3)
!4202 = !DILocation(line: 127, column: 17, scope: !4201)
!4203 = !DILocation(line: 128, column: 4, scope: !4201)
!4204 = !DILocation(line: 128, column: 17, scope: !4201)
!4205 = !DILocation(line: 129, column: 4, scope: !4201)
!4206 = !DILocation(line: 129, column: 16, scope: !4201)
!4207 = !DILocation(line: 132, column: 26, scope: !4182)
!4208 = !DILocation(line: 132, column: 10, scope: !4182)
!4209 = !DILocation(line: 127, column: 4, scope: !4210)
!4210 = distinct !DILexicalBlock(scope: !4182, file: !35, line: 126, column: 3)
!4211 = !DILocation(line: 127, column: 17, scope: !4210)
!4212 = !DILocation(line: 128, column: 4, scope: !4210)
!4213 = !DILocation(line: 128, column: 17, scope: !4210)
!4214 = !DILocation(line: 129, column: 4, scope: !4210)
!4215 = !DILocation(line: 129, column: 16, scope: !4210)
!4216 = !DILocation(line: 127, column: 4, scope: !4217)
!4217 = distinct !DILexicalBlock(scope: !4182, file: !35, line: 126, column: 3)
!4218 = !DILocation(line: 127, column: 17, scope: !4217)
!4219 = !DILocation(line: 128, column: 4, scope: !4217)
!4220 = !DILocation(line: 128, column: 17, scope: !4217)
!4221 = !DILocation(line: 129, column: 4, scope: !4217)
!4222 = !DILocation(line: 129, column: 16, scope: !4217)
!4223 = !DILocation(line: 134, column: 9, scope: !4125)
!4224 = distinct !DISubprogram(name: "out_unknown", linkageName: "std.io.Formatter.out_unknown", scope: !35, file: !35, line: 137, type: !4225, scopeLine: 137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4225 = !DISubroutineType(types: !4226)
!4226 = !{!115, !285, !604, !286, !291}
!4227 = !DILocation(line: 138, column: 1, scope: !4224)
!4228 = !DILocalVariable(name: "self", arg: 1, scope: !4224, file: !35, line: 137, type: !604)
!4229 = !DILocation(line: 137, column: 31, scope: !4224)
!4230 = !DILocalVariable(name: "category", arg: 2, scope: !4224, file: !35, line: 137, type: !286)
!4231 = !DILocation(line: 137, column: 45, scope: !4224)
!4232 = !DILocalVariable(name: "arg", arg: 3, scope: !4224, file: !35, line: 137, type: !291)
!4233 = !DILocation(line: 137, column: 59, scope: !4224)
!4234 = !DILocation(line: 139, column: 9, scope: !4224)
!4235 = !DILocation(line: 139, column: 32, scope: !4224)
!4236 = !DILocation(line: 139, column: 60, scope: !4224)
!4237 = !DILocation(line: 139, column: 104, scope: !4224)
!4238 = !DILocation(line: 139, column: 88, scope: !4224)
!4239 = !DILocation(line: 139, column: 127, scope: !4224)
!4240 = !DILocation(line: 139, column: 166, scope: !4224)
!4241 = !DILocation(line: 139, column: 156, scope: !4224)
!4242 = !DILocation(line: 139, column: 194, scope: !4224)
!4243 = distinct !DISubprogram(name: "out_str", linkageName: "std.io.Formatter.out_str", scope: !35, file: !35, line: 141, type: !1725, scopeLine: 141, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4244 = !DILocation(line: 142, column: 1, scope: !4243)
!4245 = !DILocalVariable(name: "self", arg: 1, scope: !4243, file: !35, line: 141, type: !604)
!4246 = !DILocation(line: 141, column: 27, scope: !4243)
!4247 = !DILocalVariable(name: "arg", arg: 2, scope: !4243, file: !35, line: 141, type: !291)
!4248 = !DILocation(line: 141, column: 38, scope: !4243)
!4249 = !DILocation(line: 143, column: 10, scope: !4250)
!4250 = distinct !DILexicalBlock(scope: !4243, file: !35, line: 143, column: 2)
!4251 = !DILocation(line: 146, column: 11, scope: !4252)
!4252 = distinct !DILexicalBlock(scope: !4250, file: !35, line: 146, column: 4)
!4253 = !DILocation(line: 148, column: 11, scope: !4254)
!4254 = distinct !DILexicalBlock(scope: !4250, file: !35, line: 148, column: 4)
!4255 = !DILocation(line: 150, column: 37, scope: !4256)
!4256 = distinct !DILexicalBlock(scope: !4250, file: !35, line: 150, column: 4)
!4257 = !DILocation(line: 150, column: 29, scope: !4256)
!4258 = !DILocation(line: 150, column: 11, scope: !4256)
!4259 = !DILocation(line: 153, column: 25, scope: !4260)
!4260 = distinct !DILexicalBlock(scope: !4250, file: !35, line: 153, column: 4)
!4261 = !DILocation(line: 153, column: 11, scope: !4260)
!4262 = !DILocation(line: 206, column: 33, scope: !4263, inlinedAt: !4264)
!4263 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !215, file: !215, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4264 = !DILocation(line: 155, column: 4, scope: !4265)
!4265 = distinct !DILexicalBlock(scope: !4250, file: !35, line: 155, column: 4)
!4266 = !DILocation(line: 206, column: 2, scope: !4263, inlinedAt: !4264)
!4267 = !DILocation(line: 208, column: 2, scope: !4263, inlinedAt: !4264)
!4268 = !DILocalVariable(name: "flags", scope: !4269, file: !35, line: 158, type: !94, align: 4)
!4269 = distinct !DILexicalBlock(scope: !4250, file: !35, line: 158, column: 4)
!4270 = !DILocation(line: 158, column: 15, scope: !4269)
!4271 = !DILocation(line: 158, column: 23, scope: !4269)
!4272 = !DILocalVariable(name: "width", scope: !4269, file: !35, line: 159, type: !94, align: 4)
!4273 = !DILocation(line: 159, column: 9, scope: !4269)
!4274 = !DILocation(line: 159, column: 17, scope: !4269)
!4275 = !DILocation(line: 165, column: 4, scope: !4269)
!4276 = !DILocation(line: 166, column: 4, scope: !4269)
!4277 = !DILocation(line: 166, column: 17, scope: !4269)
!4278 = !DILocation(line: 167, column: 11, scope: !4269)
!4279 = !DILocation(line: 167, column: 37, scope: !4269)
!4280 = !DILocation(line: 162, column: 5, scope: !4281)
!4281 = distinct !DILexicalBlock(scope: !4269, file: !35, line: 161, column: 4)
!4282 = !DILocation(line: 162, column: 18, scope: !4281)
!4283 = !DILocation(line: 163, column: 5, scope: !4281)
!4284 = !DILocation(line: 163, column: 18, scope: !4281)
!4285 = !DILocation(line: 162, column: 5, scope: !4286)
!4286 = distinct !DILexicalBlock(scope: !4269, file: !35, line: 161, column: 4)
!4287 = !DILocation(line: 162, column: 18, scope: !4286)
!4288 = !DILocation(line: 163, column: 5, scope: !4286)
!4289 = !DILocation(line: 163, column: 18, scope: !4286)
!4290 = !DILocalVariable(name: "flags", scope: !4291, file: !35, line: 169, type: !94, align: 4)
!4291 = distinct !DILexicalBlock(scope: !4250, file: !35, line: 169, column: 4)
!4292 = !DILocation(line: 169, column: 15, scope: !4291)
!4293 = !DILocation(line: 169, column: 23, scope: !4291)
!4294 = !DILocalVariable(name: "width", scope: !4291, file: !35, line: 170, type: !94, align: 4)
!4295 = !DILocation(line: 170, column: 9, scope: !4291)
!4296 = !DILocation(line: 170, column: 17, scope: !4291)
!4297 = !DILocation(line: 176, column: 4, scope: !4291)
!4298 = !DILocation(line: 177, column: 4, scope: !4291)
!4299 = !DILocation(line: 177, column: 17, scope: !4291)
!4300 = !DILocation(line: 178, column: 21, scope: !4291)
!4301 = !DILocation(line: 178, column: 11, scope: !4291)
!4302 = !DILocation(line: 178, column: 45, scope: !4291)
!4303 = !DILocation(line: 173, column: 5, scope: !4304)
!4304 = distinct !DILexicalBlock(scope: !4291, file: !35, line: 172, column: 4)
!4305 = !DILocation(line: 173, column: 18, scope: !4304)
!4306 = !DILocation(line: 174, column: 5, scope: !4304)
!4307 = !DILocation(line: 174, column: 18, scope: !4304)
!4308 = !DILocation(line: 173, column: 5, scope: !4309)
!4309 = distinct !DILexicalBlock(scope: !4291, file: !35, line: 172, column: 4)
!4310 = !DILocation(line: 173, column: 18, scope: !4309)
!4311 = !DILocation(line: 174, column: 5, scope: !4309)
!4312 = !DILocation(line: 174, column: 18, scope: !4309)
!4313 = !DILocation(line: 180, column: 35, scope: !4314)
!4314 = distinct !DILexicalBlock(scope: !4250, file: !35, line: 180, column: 4)
!4315 = !DILocation(line: 180, column: 28, scope: !4314)
!4316 = !DILocation(line: 180, column: 54, scope: !4314)
!4317 = !DILocation(line: 180, column: 11, scope: !4314)
!4318 = !DILocalVariable(name: "n", scope: !4243, file: !35, line: 183, type: !208, align: 8)
!4319 = !DILocation(line: 183, column: 7, scope: !4243)
!4320 = !DILocation(line: 183, column: 47, scope: !4243)
!4321 = !DILocation(line: 183, column: 11, scope: !4243)
!4322 = !DILocation(line: 184, column: 6, scope: !4243)
!4323 = !DILocation(line: 184, column: 20, scope: !4243)
!4324 = !DILocalVariable(name: "f", scope: !4325, file: !35, line: 394, type: !115, align: 8)
!4325 = distinct !DISubprogram(name: "@catch", linkageName: "@catch", scope: !215, file: !215, line: 392, scopeLine: 392, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4326 = !DILocation(line: 394, column: 12, scope: !4325, inlinedAt: !4327)
!4327 = !DILocation(line: 185, column: 6, scope: !4243)
!4328 = !DILocation(line: 394, column: 16, scope: !4325, inlinedAt: !4327)
!4329 = !DILocation(line: 394, column: 30, scope: !4325, inlinedAt: !4327)
!4330 = !DILocation(line: 395, column: 9, scope: !4325, inlinedAt: !4327)
!4331 = !DILocation(line: 185, column: 30, scope: !4243)
!4332 = !DILocation(line: 186, column: 10, scope: !4333)
!4333 = distinct !DILexicalBlock(scope: !4243, file: !35, line: 186, column: 2)
!4334 = !DILocalVariable(name: "i", scope: !4335, file: !35, line: 189, type: !207, align: 8)
!4335 = distinct !DILexicalBlock(scope: !4333, file: !35, line: 189, column: 4)
!4336 = !DILocation(line: 189, column: 8, scope: !4335)
!4337 = !DILocation(line: 189, column: 12, scope: !4338, inlinedAt: !4340)
!4338 = distinct !DILexicalBlock(scope: !4339, file: !1749, line: 13, column: 1)
!4339 = distinct !DISubprogram(name: "any_to_enum_ordinal", linkageName: "any_to_enum_ordinal", scope: !1749, file: !1749, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4340 = !DILocation(line: 189, column: 12, scope: !4335)
!4341 = !DILocation(line: 10, column: 11, scope: !4338, inlinedAt: !4340)
!4342 = !DILocation(line: 239, column: 20, scope: !4343, inlinedAt: !4345)
!4343 = distinct !DILexicalBlock(scope: !4344, file: !215, line: 240, column: 1)
!4344 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !215, file: !215, line: 239, scopeLine: 239, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4345 = !DILocation(line: 14, column: 20, scope: !4339, inlinedAt: !4340)
!4346 = !DILocation(line: 241, column: 20, scope: !4344, inlinedAt: !4345)
!4347 = !DILocation(line: 241, column: 30, scope: !4344, inlinedAt: !4345)
!4348 = !DILocation(line: 14, column: 9, scope: !4349, inlinedAt: !4351)
!4349 = distinct !DILexicalBlock(scope: !4350, file: !1749, line: 22, column: 1)
!4350 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !1749, file: !1749, line: 21, scopeLine: 21, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4351 = !DILocation(line: 14, column: 9, scope: !4339, inlinedAt: !4340)
!4352 = !DILocation(line: 19, column: 11, scope: !4349, inlinedAt: !4351)
!4353 = !DILocalVariable(name: "any_type", scope: !4350, file: !35, line: 23, type: !92, align: 8)
!4354 = !DILocation(line: 23, column: 9, scope: !4350, inlinedAt: !4351)
!4355 = !DILocation(line: 23, column: 20, scope: !4350, inlinedAt: !4351)
!4356 = !DILocalVariable(name: "kind", scope: !4350, file: !35, line: 24, type: !58, align: 1)
!4357 = !DILocation(line: 24, column: 11, scope: !4350, inlinedAt: !4351)
!4358 = !DILocation(line: 24, column: 18, scope: !4350, inlinedAt: !4351)
!4359 = !DILocalVariable(name: "is_mixed_signed", scope: !4350, file: !35, line: 25, type: !753, align: 1)
!4360 = !DILocation(line: 25, column: 7, scope: !4350, inlinedAt: !4351)
!4361 = !DILocation(line: 25, column: 41, scope: !4350, inlinedAt: !4351)
!4362 = !DILocation(line: 25, column: 25, scope: !4350, inlinedAt: !4351)
!4363 = !DILocalVariable(name: "max", scope: !4350, file: !35, line: 26, type: !207, align: 8)
!4364 = !DILocation(line: 26, column: 8, scope: !4350, inlinedAt: !4351)
!4365 = !DILocation(line: 26, column: 14, scope: !4350, inlinedAt: !4351)
!4366 = !DILocalVariable(name: "min", scope: !4350, file: !35, line: 27, type: !207, align: 8)
!4367 = !DILocation(line: 27, column: 8, scope: !4350, inlinedAt: !4351)
!4368 = !DILocation(line: 27, column: 14, scope: !4350, inlinedAt: !4351)
!4369 = !DILocation(line: 30, column: 8, scope: !4370, inlinedAt: !4351)
!4370 = distinct !DILexicalBlock(scope: !4350, file: !1749, line: 28, column: 2)
!4371 = !DILocalVariable(name: "c", scope: !4372, file: !35, line: 31, type: !1773, align: 1)
!4372 = distinct !DILexicalBlock(scope: !4370, file: !1749, line: 31, column: 4)
!4373 = !DILocation(line: 31, column: 10, scope: !4372, inlinedAt: !4351)
!4374 = !DILocation(line: 31, column: 22, scope: !4372, inlinedAt: !4351)
!4375 = !DILocation(line: 31, column: 15, scope: !4372, inlinedAt: !4351)
!4376 = !DILocation(line: 32, column: 8, scope: !4372, inlinedAt: !4351)
!4377 = !DILocation(line: 32, column: 27, scope: !4372, inlinedAt: !4351)
!4378 = !DILocation(line: 32, column: 41, scope: !4372, inlinedAt: !4351)
!4379 = !DILocation(line: 33, column: 11, scope: !4372, inlinedAt: !4351)
!4380 = !DILocation(line: 34, column: 8, scope: !4370, inlinedAt: !4351)
!4381 = !DILocalVariable(name: "s", scope: !4382, file: !35, line: 35, type: !1784, align: 2)
!4382 = distinct !DILexicalBlock(scope: !4370, file: !1749, line: 35, column: 4)
!4383 = !DILocation(line: 35, column: 10, scope: !4382, inlinedAt: !4351)
!4384 = !DILocation(line: 35, column: 23, scope: !4382, inlinedAt: !4351)
!4385 = !DILocation(line: 35, column: 15, scope: !4382, inlinedAt: !4351)
!4386 = !DILocation(line: 36, column: 8, scope: !4382, inlinedAt: !4351)
!4387 = !DILocation(line: 36, column: 27, scope: !4382, inlinedAt: !4351)
!4388 = !DILocation(line: 36, column: 41, scope: !4382, inlinedAt: !4351)
!4389 = !DILocation(line: 37, column: 8, scope: !4382, inlinedAt: !4351)
!4390 = !DILocation(line: 37, column: 12, scope: !4382, inlinedAt: !4351)
!4391 = !DILocation(line: 37, column: 19, scope: !4382, inlinedAt: !4351)
!4392 = !DILocation(line: 37, column: 23, scope: !4382, inlinedAt: !4351)
!4393 = !DILocation(line: 37, column: 35, scope: !4382, inlinedAt: !4351)
!4394 = !DILocation(line: 38, column: 11, scope: !4382, inlinedAt: !4351)
!4395 = !DILocation(line: 39, column: 8, scope: !4370, inlinedAt: !4351)
!4396 = !DILocalVariable(name: "i", scope: !4397, file: !35, line: 40, type: !3, align: 4)
!4397 = distinct !DILexicalBlock(scope: !4370, file: !1749, line: 40, column: 4)
!4398 = !DILocation(line: 40, column: 8, scope: !4397, inlinedAt: !4351)
!4399 = !DILocation(line: 40, column: 19, scope: !4397, inlinedAt: !4351)
!4400 = !DILocation(line: 40, column: 13, scope: !4397, inlinedAt: !4351)
!4401 = !DILocation(line: 41, column: 8, scope: !4397, inlinedAt: !4351)
!4402 = !DILocation(line: 41, column: 27, scope: !4397, inlinedAt: !4351)
!4403 = !DILocation(line: 41, column: 41, scope: !4397, inlinedAt: !4351)
!4404 = !DILocation(line: 42, column: 8, scope: !4397, inlinedAt: !4351)
!4405 = !DILocation(line: 42, column: 12, scope: !4397, inlinedAt: !4351)
!4406 = !DILocation(line: 42, column: 19, scope: !4397, inlinedAt: !4351)
!4407 = !DILocation(line: 42, column: 23, scope: !4397, inlinedAt: !4351)
!4408 = !DILocation(line: 42, column: 35, scope: !4397, inlinedAt: !4351)
!4409 = !DILocation(line: 43, column: 11, scope: !4397, inlinedAt: !4351)
!4410 = !DILocation(line: 44, column: 8, scope: !4370, inlinedAt: !4351)
!4411 = !DILocalVariable(name: "l", scope: !4412, file: !35, line: 45, type: !116, align: 8)
!4412 = distinct !DILexicalBlock(scope: !4370, file: !1749, line: 45, column: 4)
!4413 = !DILocation(line: 45, column: 9, scope: !4412, inlinedAt: !4351)
!4414 = !DILocation(line: 45, column: 21, scope: !4412, inlinedAt: !4351)
!4415 = !DILocation(line: 45, column: 14, scope: !4412, inlinedAt: !4351)
!4416 = !DILocation(line: 46, column: 8, scope: !4412, inlinedAt: !4351)
!4417 = !DILocation(line: 46, column: 27, scope: !4412, inlinedAt: !4351)
!4418 = !DILocation(line: 46, column: 41, scope: !4412, inlinedAt: !4351)
!4419 = !DILocation(line: 47, column: 8, scope: !4412, inlinedAt: !4351)
!4420 = !DILocation(line: 47, column: 12, scope: !4412, inlinedAt: !4351)
!4421 = !DILocation(line: 47, column: 19, scope: !4412, inlinedAt: !4351)
!4422 = !DILocation(line: 47, column: 23, scope: !4412, inlinedAt: !4351)
!4423 = !DILocation(line: 47, column: 35, scope: !4412, inlinedAt: !4351)
!4424 = !DILocation(line: 48, column: 11, scope: !4412, inlinedAt: !4351)
!4425 = !DILocation(line: 49, column: 8, scope: !4370, inlinedAt: !4351)
!4426 = !DILocalVariable(name: "i", scope: !4427, file: !35, line: 50, type: !1830, align: 16)
!4427 = distinct !DILexicalBlock(scope: !4370, file: !1749, line: 50, column: 4)
!4428 = !DILocation(line: 50, column: 11, scope: !4427, inlinedAt: !4351)
!4429 = !DILocation(line: 50, column: 25, scope: !4427, inlinedAt: !4351)
!4430 = !DILocation(line: 50, column: 16, scope: !4427, inlinedAt: !4351)
!4431 = !DILocation(line: 51, column: 8, scope: !4427, inlinedAt: !4351)
!4432 = !DILocation(line: 51, column: 27, scope: !4427, inlinedAt: !4351)
!4433 = !DILocation(line: 51, column: 41, scope: !4427, inlinedAt: !4351)
!4434 = !DILocation(line: 52, column: 8, scope: !4427, inlinedAt: !4351)
!4435 = !DILocation(line: 52, column: 12, scope: !4427, inlinedAt: !4351)
!4436 = !DILocation(line: 52, column: 19, scope: !4427, inlinedAt: !4351)
!4437 = !DILocation(line: 52, column: 23, scope: !4427, inlinedAt: !4351)
!4438 = !DILocation(line: 52, column: 35, scope: !4427, inlinedAt: !4351)
!4439 = !DILocation(line: 53, column: 11, scope: !4427, inlinedAt: !4351)
!4440 = !DILocation(line: 54, column: 8, scope: !4370, inlinedAt: !4351)
!4441 = !DILocalVariable(name: "c", scope: !4442, file: !35, line: 55, type: !20, align: 1)
!4442 = distinct !DILexicalBlock(scope: !4370, file: !1749, line: 55, column: 4)
!4443 = !DILocation(line: 55, column: 9, scope: !4442, inlinedAt: !4351)
!4444 = !DILocation(line: 55, column: 21, scope: !4442, inlinedAt: !4351)
!4445 = !DILocation(line: 55, column: 14, scope: !4442, inlinedAt: !4351)
!4446 = !DILocation(line: 56, column: 8, scope: !4442, inlinedAt: !4351)
!4447 = !DILocation(line: 56, column: 12, scope: !4442, inlinedAt: !4351)
!4448 = !DILocation(line: 56, column: 24, scope: !4442, inlinedAt: !4351)
!4449 = !DILocation(line: 57, column: 11, scope: !4442, inlinedAt: !4351)
!4450 = !DILocation(line: 58, column: 8, scope: !4370, inlinedAt: !4351)
!4451 = !DILocalVariable(name: "s", scope: !4452, file: !35, line: 59, type: !1856, align: 2)
!4452 = distinct !DILexicalBlock(scope: !4370, file: !1749, line: 59, column: 4)
!4453 = !DILocation(line: 59, column: 11, scope: !4452, inlinedAt: !4351)
!4454 = !DILocation(line: 59, column: 25, scope: !4452, inlinedAt: !4351)
!4455 = !DILocation(line: 59, column: 16, scope: !4452, inlinedAt: !4351)
!4456 = !DILocation(line: 60, column: 8, scope: !4452, inlinedAt: !4351)
!4457 = !DILocation(line: 60, column: 12, scope: !4452, inlinedAt: !4351)
!4458 = !DILocation(line: 60, column: 19, scope: !4452, inlinedAt: !4351)
!4459 = !DILocation(line: 60, column: 23, scope: !4452, inlinedAt: !4351)
!4460 = !DILocation(line: 60, column: 35, scope: !4452, inlinedAt: !4351)
!4461 = !DILocation(line: 61, column: 11, scope: !4452, inlinedAt: !4351)
!4462 = !DILocation(line: 62, column: 8, scope: !4370, inlinedAt: !4351)
!4463 = !DILocalVariable(name: "i", scope: !4464, file: !35, line: 63, type: !94, align: 4)
!4464 = distinct !DILexicalBlock(scope: !4370, file: !1749, line: 63, column: 4)
!4465 = !DILocation(line: 63, column: 9, scope: !4464, inlinedAt: !4351)
!4466 = !DILocation(line: 63, column: 21, scope: !4464, inlinedAt: !4351)
!4467 = !DILocation(line: 63, column: 14, scope: !4464, inlinedAt: !4351)
!4468 = !DILocation(line: 64, column: 8, scope: !4464, inlinedAt: !4351)
!4469 = !DILocation(line: 64, column: 12, scope: !4464, inlinedAt: !4351)
!4470 = !DILocation(line: 64, column: 19, scope: !4464, inlinedAt: !4351)
!4471 = !DILocation(line: 64, column: 23, scope: !4464, inlinedAt: !4351)
!4472 = !DILocation(line: 64, column: 35, scope: !4464, inlinedAt: !4351)
!4473 = !DILocation(line: 65, column: 11, scope: !4464, inlinedAt: !4351)
!4474 = !DILocation(line: 66, column: 8, scope: !4370, inlinedAt: !4351)
!4475 = !DILocalVariable(name: "l", scope: !4476, file: !35, line: 67, type: !208, align: 8)
!4476 = distinct !DILexicalBlock(scope: !4370, file: !1749, line: 67, column: 4)
!4477 = !DILocation(line: 67, column: 10, scope: !4476, inlinedAt: !4351)
!4478 = !DILocation(line: 67, column: 23, scope: !4476, inlinedAt: !4351)
!4479 = !DILocation(line: 67, column: 15, scope: !4476, inlinedAt: !4351)
!4480 = !DILocation(line: 68, column: 8, scope: !4476, inlinedAt: !4351)
!4481 = !DILocation(line: 68, column: 12, scope: !4476, inlinedAt: !4351)
!4482 = !DILocation(line: 68, column: 19, scope: !4476, inlinedAt: !4351)
!4483 = !DILocation(line: 68, column: 23, scope: !4476, inlinedAt: !4351)
!4484 = !DILocation(line: 68, column: 35, scope: !4476, inlinedAt: !4351)
!4485 = !DILocation(line: 69, column: 11, scope: !4476, inlinedAt: !4351)
!4486 = !DILocation(line: 70, column: 8, scope: !4370, inlinedAt: !4351)
!4487 = !DILocalVariable(name: "i", scope: !4488, file: !35, line: 71, type: !1544, align: 16)
!4488 = distinct !DILexicalBlock(scope: !4370, file: !1749, line: 71, column: 4)
!4489 = !DILocation(line: 71, column: 12, scope: !4488, inlinedAt: !4351)
!4490 = !DILocation(line: 71, column: 27, scope: !4488, inlinedAt: !4351)
!4491 = !DILocation(line: 71, column: 17, scope: !4488, inlinedAt: !4351)
!4492 = !DILocation(line: 72, column: 8, scope: !4488, inlinedAt: !4351)
!4493 = !DILocation(line: 72, column: 12, scope: !4488, inlinedAt: !4351)
!4494 = !DILocation(line: 72, column: 19, scope: !4488, inlinedAt: !4351)
!4495 = !DILocation(line: 72, column: 23, scope: !4488, inlinedAt: !4351)
!4496 = !DILocation(line: 72, column: 35, scope: !4488, inlinedAt: !4351)
!4497 = !DILocation(line: 73, column: 11, scope: !4488, inlinedAt: !4351)
!4498 = !DILocation(line: 206, column: 33, scope: !4499, inlinedAt: !4500)
!4499 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !215, file: !215, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4500 = !DILocation(line: 75, column: 4, scope: !4501, inlinedAt: !4351)
!4501 = distinct !DILexicalBlock(scope: !4370, file: !1749, line: 75, column: 4)
!4502 = !DILocation(line: 206, column: 2, scope: !4499, inlinedAt: !4500)
!4503 = !DILocation(line: 208, column: 2, scope: !4499, inlinedAt: !4500)
!4504 = !DILocation(line: 190, column: 11, scope: !4335)
!4505 = !DILocation(line: 190, column: 15, scope: !4335)
!4506 = !DILocation(line: 190, column: 88, scope: !4335)
!4507 = !DILocation(line: 191, column: 27, scope: !4335)
!4508 = !DILocation(line: 191, column: 42, scope: !4335)
!4509 = !DILocation(line: 191, column: 11, scope: !4335)
!4510 = !DILocation(line: 193, column: 11, scope: !4511)
!4511 = distinct !DILexicalBlock(scope: !4333, file: !35, line: 193, column: 4)
!4512 = !DILocation(line: 195, column: 11, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4333, file: !35, line: 195, column: 4)
!4514 = !DILocation(line: 197, column: 11, scope: !4515)
!4515 = distinct !DILexicalBlock(scope: !4333, file: !35, line: 197, column: 4)
!4516 = !DILocalVariable(name: "flags", scope: !4517, file: !35, line: 199, type: !94, align: 4)
!4517 = distinct !DILexicalBlock(scope: !4333, file: !35, line: 199, column: 4)
!4518 = !DILocation(line: 199, column: 15, scope: !4517)
!4519 = !DILocation(line: 199, column: 23, scope: !4517)
!4520 = !DILocalVariable(name: "width", scope: !4517, file: !35, line: 200, type: !94, align: 4)
!4521 = !DILocation(line: 200, column: 9, scope: !4517)
!4522 = !DILocation(line: 200, column: 17, scope: !4517)
!4523 = !DILocation(line: 206, column: 4, scope: !4517)
!4524 = !DILocation(line: 206, column: 17, scope: !4517)
!4525 = !DILocation(line: 207, column: 11, scope: !4517)
!4526 = !DILocation(line: 203, column: 5, scope: !4527)
!4527 = distinct !DILexicalBlock(scope: !4517, file: !35, line: 202, column: 4)
!4528 = !DILocation(line: 203, column: 18, scope: !4527)
!4529 = !DILocation(line: 204, column: 5, scope: !4527)
!4530 = !DILocation(line: 204, column: 18, scope: !4527)
!4531 = !DILocation(line: 207, column: 36, scope: !4517)
!4532 = !DILocation(line: 203, column: 5, scope: !4533)
!4533 = distinct !DILexicalBlock(scope: !4517, file: !35, line: 202, column: 4)
!4534 = !DILocation(line: 203, column: 18, scope: !4533)
!4535 = !DILocation(line: 204, column: 5, scope: !4533)
!4536 = !DILocation(line: 204, column: 18, scope: !4533)
!4537 = !DILocation(line: 203, column: 5, scope: !4538)
!4538 = distinct !DILexicalBlock(scope: !4517, file: !35, line: 202, column: 4)
!4539 = !DILocation(line: 203, column: 18, scope: !4538)
!4540 = !DILocation(line: 204, column: 5, scope: !4538)
!4541 = !DILocation(line: 204, column: 18, scope: !4538)
!4542 = !DILocation(line: 209, column: 8, scope: !4543)
!4543 = distinct !DILexicalBlock(scope: !4333, file: !35, line: 209, column: 4)
!4544 = !DILocation(line: 211, column: 29, scope: !4545)
!4545 = distinct !DILexicalBlock(scope: !4543, file: !35, line: 210, column: 4)
!4546 = !DILocation(line: 211, column: 12, scope: !4545)
!4547 = !DILocation(line: 213, column: 8, scope: !4543)
!4548 = !DILocation(line: 215, column: 29, scope: !4549)
!4549 = distinct !DILexicalBlock(scope: !4543, file: !35, line: 214, column: 4)
!4550 = !DILocation(line: 215, column: 46, scope: !4549)
!4551 = !DILocation(line: 215, column: 74, scope: !4549)
!4552 = !DILocation(line: 215, column: 12, scope: !4549)
!4553 = !DILocation(line: 217, column: 8, scope: !4543)
!4554 = !DILocation(line: 219, column: 29, scope: !4555)
!4555 = distinct !DILexicalBlock(scope: !4543, file: !35, line: 218, column: 4)
!4556 = !DILocation(line: 219, column: 46, scope: !4555)
!4557 = !DILocation(line: 219, column: 74, scope: !4555)
!4558 = !DILocation(line: 219, column: 12, scope: !4555)
!4559 = !DILocation(line: 239, column: 20, scope: !4560, inlinedAt: !4562)
!4560 = distinct !DILexicalBlock(scope: !4561, file: !215, line: 240, column: 1)
!4561 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !215, file: !215, line: 239, scopeLine: 239, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4562 = !DILocation(line: 221, column: 24, scope: !4543)
!4563 = !DILocation(line: 241, column: 20, scope: !4561, inlinedAt: !4562)
!4564 = !DILocation(line: 241, column: 30, scope: !4561, inlinedAt: !4562)
!4565 = !DILocation(line: 221, column: 11, scope: !4543)
!4566 = !DILocalVariable(name: "inner", scope: !4567, file: !35, line: 223, type: !92, align: 8)
!4567 = distinct !DILexicalBlock(scope: !4333, file: !35, line: 223, column: 4)
!4568 = !DILocation(line: 223, column: 11, scope: !4567)
!4569 = !DILocation(line: 223, column: 19, scope: !4567)
!4570 = !DILocalVariable(name: "pointer", scope: !4567, file: !35, line: 224, type: !4571, align: 8)
!4571 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void**", baseType: !11, size: 64, align: 64, dwarfAddressSpace: 0)
!4572 = !DILocation(line: 224, column: 11, scope: !4567)
!4573 = !DILocation(line: 224, column: 21, scope: !4567)
!4574 = !DILocation(line: 225, column: 8, scope: !4567)
!4575 = !DILocalVariable(name: "deref", scope: !4576, file: !35, line: 227, type: !291, align: 8)
!4576 = distinct !DILexicalBlock(scope: !4567, file: !35, line: 226, column: 4)
!4577 = !DILocation(line: 227, column: 9, scope: !4576)
!4578 = !DILocation(line: 227, column: 27, scope: !4576)
!4579 = !DILocation(line: 231, column: 20, scope: !4580, inlinedAt: !4581)
!4580 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !215, file: !215, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4581 = !DILocation(line: 227, column: 17, scope: !4576)
!4582 = !DILocation(line: 231, column: 25, scope: !4580, inlinedAt: !4581)
!4583 = !DILocation(line: 228, column: 45, scope: !4576)
!4584 = !DILocation(line: 228, column: 9, scope: !4576)
!4585 = !DILocation(line: 229, column: 9, scope: !4576)
!4586 = !DILocation(line: 229, column: 23, scope: !4576)
!4587 = !DILocalVariable(name: "f", scope: !4588, file: !35, line: 394, type: !115, align: 8)
!4588 = distinct !DISubprogram(name: "@catch", linkageName: "@catch", scope: !215, file: !215, line: 392, scopeLine: 392, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4589 = !DILocation(line: 394, column: 12, scope: !4588, inlinedAt: !4590)
!4590 = !DILocation(line: 230, column: 9, scope: !4576)
!4591 = !DILocation(line: 394, column: 16, scope: !4588, inlinedAt: !4590)
!4592 = !DILocation(line: 394, column: 30, scope: !4588, inlinedAt: !4590)
!4593 = !DILocation(line: 395, column: 9, scope: !4588, inlinedAt: !4590)
!4594 = !DILocation(line: 230, column: 33, scope: !4576)
!4595 = !DILocalVariable(name: "flags", scope: !4567, file: !35, line: 232, type: !94, align: 4)
!4596 = !DILocation(line: 232, column: 15, scope: !4567)
!4597 = !DILocation(line: 232, column: 23, scope: !4567)
!4598 = !DILocalVariable(name: "width", scope: !4567, file: !35, line: 233, type: !94, align: 4)
!4599 = !DILocation(line: 233, column: 9, scope: !4567)
!4600 = !DILocation(line: 233, column: 17, scope: !4567)
!4601 = !DILocation(line: 239, column: 4, scope: !4567)
!4602 = !DILocation(line: 239, column: 17, scope: !4567)
!4603 = !DILocation(line: 240, column: 11, scope: !4567)
!4604 = !DILocation(line: 236, column: 5, scope: !4605)
!4605 = distinct !DILexicalBlock(scope: !4567, file: !35, line: 235, column: 4)
!4606 = !DILocation(line: 236, column: 18, scope: !4605)
!4607 = !DILocation(line: 237, column: 5, scope: !4605)
!4608 = !DILocation(line: 237, column: 18, scope: !4605)
!4609 = !DILocation(line: 240, column: 36, scope: !4567)
!4610 = !DILocation(line: 236, column: 5, scope: !4611)
!4611 = distinct !DILexicalBlock(scope: !4567, file: !35, line: 235, column: 4)
!4612 = !DILocation(line: 236, column: 18, scope: !4611)
!4613 = !DILocation(line: 237, column: 5, scope: !4611)
!4614 = !DILocation(line: 237, column: 18, scope: !4611)
!4615 = !DILocation(line: 236, column: 5, scope: !4616)
!4616 = distinct !DILexicalBlock(scope: !4567, file: !35, line: 235, column: 4)
!4617 = !DILocation(line: 236, column: 18, scope: !4616)
!4618 = !DILocation(line: 237, column: 5, scope: !4616)
!4619 = !DILocation(line: 237, column: 18, scope: !4616)
!4620 = !DILocalVariable(name: "flags", scope: !4621, file: !35, line: 243, type: !94, align: 4)
!4621 = distinct !DILexicalBlock(scope: !4333, file: !35, line: 243, column: 4)
!4622 = !DILocation(line: 243, column: 15, scope: !4621)
!4623 = !DILocation(line: 243, column: 23, scope: !4621)
!4624 = !DILocalVariable(name: "width", scope: !4621, file: !35, line: 244, type: !94, align: 4)
!4625 = !DILocation(line: 244, column: 9, scope: !4621)
!4626 = !DILocation(line: 244, column: 17, scope: !4621)
!4627 = !DILocation(line: 250, column: 4, scope: !4621)
!4628 = !DILocation(line: 251, column: 4, scope: !4621)
!4629 = !DILocation(line: 251, column: 17, scope: !4621)
!4630 = !DILocalVariable(name: "inner", scope: !4621, file: !35, line: 252, type: !92, align: 8)
!4631 = !DILocation(line: 252, column: 11, scope: !4621)
!4632 = !DILocation(line: 252, column: 19, scope: !4621)
!4633 = !DILocalVariable(name: "size", scope: !4621, file: !35, line: 253, type: !207, align: 8)
!4634 = !DILocation(line: 253, column: 8, scope: !4621)
!4635 = !DILocation(line: 253, column: 15, scope: !4621)
!4636 = !DILocalVariable(name: "alen", scope: !4621, file: !35, line: 254, type: !207, align: 8)
!4637 = !DILocation(line: 254, column: 8, scope: !4621)
!4638 = !DILocation(line: 254, column: 15, scope: !4621)
!4639 = !DILocalVariable(name: "ptr", scope: !4621, file: !35, line: 256, type: !11, align: 8)
!4640 = !DILocation(line: 256, column: 10, scope: !4621)
!4641 = !DILocation(line: 256, column: 16, scope: !4621)
!4642 = !DILocalVariable(name: "len", scope: !4621, file: !35, line: 257, type: !207, align: 8)
!4643 = !DILocation(line: 257, column: 8, scope: !4621)
!4644 = !DILocation(line: 257, column: 14, scope: !4621)
!4645 = !DILocation(line: 247, column: 5, scope: !4646)
!4646 = distinct !DILexicalBlock(scope: !4621, file: !35, line: 246, column: 4)
!4647 = !DILocation(line: 247, column: 18, scope: !4646)
!4648 = !DILocation(line: 248, column: 5, scope: !4646)
!4649 = !DILocation(line: 248, column: 18, scope: !4646)
!4650 = !DILocalVariable(name: "i", scope: !4651, file: !35, line: 258, type: !207, align: 8)
!4651 = distinct !DILexicalBlock(scope: !4621, file: !35, line: 258, column: 4)
!4652 = !DILocation(line: 258, column: 13, scope: !4651)
!4653 = !DILocation(line: 258, column: 17, scope: !4651)
!4654 = !DILocation(line: 258, column: 20, scope: !4651)
!4655 = !DILocation(line: 258, column: 24, scope: !4651)
!4656 = !DILocation(line: 260, column: 9, scope: !4657)
!4657 = distinct !DILexicalBlock(scope: !4651, file: !35, line: 259, column: 4)
!4658 = !DILocation(line: 260, column: 17, scope: !4657)
!4659 = !DILocation(line: 260, column: 24, scope: !4657)
!4660 = !DILocation(line: 247, column: 5, scope: !4661)
!4661 = distinct !DILexicalBlock(scope: !4621, file: !35, line: 246, column: 4)
!4662 = !DILocation(line: 247, column: 18, scope: !4661)
!4663 = !DILocation(line: 248, column: 5, scope: !4661)
!4664 = !DILocation(line: 248, column: 18, scope: !4661)
!4665 = !DILocation(line: 261, column: 5, scope: !4657)
!4666 = !DILocation(line: 231, column: 20, scope: !4667, inlinedAt: !4668)
!4667 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !215, file: !215, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4668 = !DILocation(line: 261, column: 25, scope: !4657)
!4669 = !DILocation(line: 231, column: 25, scope: !4667, inlinedAt: !4668)
!4670 = !DILocation(line: 261, column: 12, scope: !4657)
!4671 = !DILocation(line: 247, column: 5, scope: !4672)
!4672 = distinct !DILexicalBlock(scope: !4621, file: !35, line: 246, column: 4)
!4673 = !DILocation(line: 247, column: 18, scope: !4672)
!4674 = !DILocation(line: 248, column: 5, scope: !4672)
!4675 = !DILocation(line: 248, column: 18, scope: !4672)
!4676 = !DILocation(line: 262, column: 5, scope: !4657)
!4677 = !DILocation(line: 262, column: 12, scope: !4657)
!4678 = !DILocation(line: 258, column: 30, scope: !4651)
!4679 = !DILocation(line: 264, column: 4, scope: !4621)
!4680 = !DILocation(line: 264, column: 11, scope: !4621)
!4681 = !DILocation(line: 247, column: 5, scope: !4682)
!4682 = distinct !DILexicalBlock(scope: !4621, file: !35, line: 246, column: 4)
!4683 = !DILocation(line: 247, column: 18, scope: !4682)
!4684 = !DILocation(line: 248, column: 5, scope: !4682)
!4685 = !DILocation(line: 248, column: 18, scope: !4682)
!4686 = !DILocation(line: 265, column: 11, scope: !4621)
!4687 = !DILocation(line: 247, column: 5, scope: !4688)
!4688 = distinct !DILexicalBlock(scope: !4621, file: !35, line: 246, column: 4)
!4689 = !DILocation(line: 247, column: 18, scope: !4688)
!4690 = !DILocation(line: 248, column: 5, scope: !4688)
!4691 = !DILocation(line: 248, column: 18, scope: !4688)
!4692 = !DILocalVariable(name: "flags", scope: !4693, file: !35, line: 267, type: !94, align: 4)
!4693 = distinct !DILexicalBlock(scope: !4333, file: !35, line: 267, column: 4)
!4694 = !DILocation(line: 267, column: 15, scope: !4693)
!4695 = !DILocation(line: 267, column: 23, scope: !4693)
!4696 = !DILocalVariable(name: "width", scope: !4693, file: !35, line: 268, type: !94, align: 4)
!4697 = !DILocation(line: 268, column: 9, scope: !4693)
!4698 = !DILocation(line: 268, column: 17, scope: !4693)
!4699 = !DILocation(line: 274, column: 4, scope: !4693)
!4700 = !DILocation(line: 275, column: 4, scope: !4693)
!4701 = !DILocation(line: 275, column: 17, scope: !4693)
!4702 = !DILocalVariable(name: "inner", scope: !4693, file: !35, line: 277, type: !92, align: 8)
!4703 = !DILocation(line: 277, column: 11, scope: !4693)
!4704 = !DILocation(line: 277, column: 19, scope: !4693)
!4705 = !DILocalVariable(name: "size", scope: !4693, file: !35, line: 278, type: !207, align: 8)
!4706 = !DILocation(line: 278, column: 8, scope: !4693)
!4707 = !DILocation(line: 278, column: 15, scope: !4693)
!4708 = !DILocalVariable(name: "vlen", scope: !4693, file: !35, line: 279, type: !207, align: 8)
!4709 = !DILocation(line: 279, column: 8, scope: !4693)
!4710 = !DILocation(line: 279, column: 15, scope: !4693)
!4711 = !DILocalVariable(name: "ptr", scope: !4693, file: !35, line: 281, type: !11, align: 8)
!4712 = !DILocation(line: 281, column: 10, scope: !4693)
!4713 = !DILocation(line: 281, column: 16, scope: !4693)
!4714 = !DILocalVariable(name: "len", scope: !4693, file: !35, line: 282, type: !207, align: 8)
!4715 = !DILocation(line: 282, column: 8, scope: !4693)
!4716 = !DILocation(line: 282, column: 14, scope: !4693)
!4717 = !DILocation(line: 271, column: 5, scope: !4718)
!4718 = distinct !DILexicalBlock(scope: !4693, file: !35, line: 270, column: 4)
!4719 = !DILocation(line: 271, column: 18, scope: !4718)
!4720 = !DILocation(line: 272, column: 5, scope: !4718)
!4721 = !DILocation(line: 272, column: 18, scope: !4718)
!4722 = !DILocalVariable(name: "i", scope: !4723, file: !35, line: 283, type: !207, align: 8)
!4723 = distinct !DILexicalBlock(scope: !4693, file: !35, line: 283, column: 4)
!4724 = !DILocation(line: 283, column: 13, scope: !4723)
!4725 = !DILocation(line: 283, column: 17, scope: !4723)
!4726 = !DILocation(line: 283, column: 20, scope: !4723)
!4727 = !DILocation(line: 283, column: 24, scope: !4723)
!4728 = !DILocation(line: 285, column: 9, scope: !4729)
!4729 = distinct !DILexicalBlock(scope: !4723, file: !35, line: 284, column: 4)
!4730 = !DILocation(line: 285, column: 17, scope: !4729)
!4731 = !DILocation(line: 285, column: 24, scope: !4729)
!4732 = !DILocation(line: 271, column: 5, scope: !4733)
!4733 = distinct !DILexicalBlock(scope: !4693, file: !35, line: 270, column: 4)
!4734 = !DILocation(line: 271, column: 18, scope: !4733)
!4735 = !DILocation(line: 272, column: 5, scope: !4733)
!4736 = !DILocation(line: 272, column: 18, scope: !4733)
!4737 = !DILocation(line: 286, column: 5, scope: !4729)
!4738 = !DILocation(line: 231, column: 20, scope: !4739, inlinedAt: !4740)
!4739 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !215, file: !215, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4740 = !DILocation(line: 286, column: 25, scope: !4729)
!4741 = !DILocation(line: 231, column: 25, scope: !4739, inlinedAt: !4740)
!4742 = !DILocation(line: 286, column: 12, scope: !4729)
!4743 = !DILocation(line: 271, column: 5, scope: !4744)
!4744 = distinct !DILexicalBlock(scope: !4693, file: !35, line: 270, column: 4)
!4745 = !DILocation(line: 271, column: 18, scope: !4744)
!4746 = !DILocation(line: 272, column: 5, scope: !4744)
!4747 = !DILocation(line: 272, column: 18, scope: !4744)
!4748 = !DILocation(line: 287, column: 5, scope: !4729)
!4749 = !DILocation(line: 287, column: 12, scope: !4729)
!4750 = !DILocation(line: 283, column: 30, scope: !4723)
!4751 = !DILocation(line: 289, column: 4, scope: !4693)
!4752 = !DILocation(line: 289, column: 11, scope: !4693)
!4753 = !DILocation(line: 271, column: 5, scope: !4754)
!4754 = distinct !DILexicalBlock(scope: !4693, file: !35, line: 270, column: 4)
!4755 = !DILocation(line: 271, column: 18, scope: !4754)
!4756 = !DILocation(line: 272, column: 5, scope: !4754)
!4757 = !DILocation(line: 272, column: 18, scope: !4754)
!4758 = !DILocation(line: 290, column: 11, scope: !4693)
!4759 = !DILocation(line: 271, column: 5, scope: !4760)
!4760 = distinct !DILexicalBlock(scope: !4693, file: !35, line: 270, column: 4)
!4761 = !DILocation(line: 271, column: 18, scope: !4760)
!4762 = !DILocation(line: 272, column: 5, scope: !4760)
!4763 = !DILocation(line: 272, column: 18, scope: !4760)
!4764 = !DILocalVariable(name: "inner", scope: !4765, file: !35, line: 293, type: !92, align: 8)
!4765 = distinct !DILexicalBlock(scope: !4333, file: !35, line: 293, column: 4)
!4766 = !DILocation(line: 293, column: 11, scope: !4765)
!4767 = !DILocation(line: 293, column: 19, scope: !4765)
!4768 = !DILocation(line: 294, column: 8, scope: !4765)
!4769 = !DILocation(line: 294, column: 38, scope: !4765)
!4770 = !DILocalVariable(name: "flags", scope: !4765, file: !35, line: 295, type: !94, align: 4)
!4771 = !DILocation(line: 295, column: 15, scope: !4765)
!4772 = !DILocation(line: 295, column: 23, scope: !4765)
!4773 = !DILocalVariable(name: "width", scope: !4765, file: !35, line: 296, type: !94, align: 4)
!4774 = !DILocation(line: 296, column: 9, scope: !4765)
!4775 = !DILocation(line: 296, column: 17, scope: !4765)
!4776 = !DILocation(line: 302, column: 4, scope: !4765)
!4777 = !DILocation(line: 303, column: 4, scope: !4765)
!4778 = !DILocation(line: 303, column: 17, scope: !4765)
!4779 = !DILocalVariable(name: "size", scope: !4765, file: !35, line: 304, type: !207, align: 8)
!4780 = !DILocation(line: 304, column: 8, scope: !4765)
!4781 = !DILocation(line: 304, column: 15, scope: !4765)
!4782 = !DILocalVariable(name: "temp", scope: !4765, file: !35, line: 306, type: !4783, align: 8)
!4783 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String*", baseType: !286, size: 64, align: 64, dwarfAddressSpace: 0)
!4784 = !DILocation(line: 306, column: 12, scope: !4765)
!4785 = !DILocation(line: 306, column: 19, scope: !4765)
!4786 = !DILocalVariable(name: "ptr", scope: !4765, file: !35, line: 307, type: !11, align: 8)
!4787 = !DILocation(line: 307, column: 10, scope: !4765)
!4788 = !DILocation(line: 307, column: 23, scope: !4765)
!4789 = !DILocalVariable(name: "slen", scope: !4765, file: !35, line: 308, type: !207, align: 8)
!4790 = !DILocation(line: 308, column: 8, scope: !4765)
!4791 = !DILocation(line: 308, column: 15, scope: !4765)
!4792 = !DILocalVariable(name: "len", scope: !4765, file: !35, line: 309, type: !207, align: 8)
!4793 = !DILocation(line: 309, column: 8, scope: !4765)
!4794 = !DILocation(line: 309, column: 14, scope: !4765)
!4795 = !DILocation(line: 299, column: 5, scope: !4796)
!4796 = distinct !DILexicalBlock(scope: !4765, file: !35, line: 298, column: 4)
!4797 = !DILocation(line: 299, column: 18, scope: !4796)
!4798 = !DILocation(line: 300, column: 5, scope: !4796)
!4799 = !DILocation(line: 300, column: 18, scope: !4796)
!4800 = !DILocalVariable(name: "i", scope: !4801, file: !35, line: 310, type: !207, align: 8)
!4801 = distinct !DILexicalBlock(scope: !4765, file: !35, line: 310, column: 4)
!4802 = !DILocation(line: 310, column: 13, scope: !4801)
!4803 = !DILocation(line: 310, column: 17, scope: !4801)
!4804 = !DILocation(line: 310, column: 20, scope: !4801)
!4805 = !DILocation(line: 310, column: 24, scope: !4801)
!4806 = !DILocation(line: 312, column: 9, scope: !4807)
!4807 = distinct !DILexicalBlock(scope: !4801, file: !35, line: 311, column: 4)
!4808 = !DILocation(line: 312, column: 17, scope: !4807)
!4809 = !DILocation(line: 312, column: 24, scope: !4807)
!4810 = !DILocation(line: 299, column: 5, scope: !4811)
!4811 = distinct !DILexicalBlock(scope: !4765, file: !35, line: 298, column: 4)
!4812 = !DILocation(line: 299, column: 18, scope: !4811)
!4813 = !DILocation(line: 300, column: 5, scope: !4811)
!4814 = !DILocation(line: 300, column: 18, scope: !4811)
!4815 = !DILocation(line: 313, column: 5, scope: !4807)
!4816 = !DILocation(line: 231, column: 20, scope: !4817, inlinedAt: !4818)
!4817 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !215, file: !215, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4818 = !DILocation(line: 313, column: 25, scope: !4807)
!4819 = !DILocation(line: 231, column: 25, scope: !4817, inlinedAt: !4818)
!4820 = !DILocation(line: 313, column: 12, scope: !4807)
!4821 = !DILocation(line: 299, column: 5, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !4765, file: !35, line: 298, column: 4)
!4823 = !DILocation(line: 299, column: 18, scope: !4822)
!4824 = !DILocation(line: 300, column: 5, scope: !4822)
!4825 = !DILocation(line: 300, column: 18, scope: !4822)
!4826 = !DILocation(line: 314, column: 5, scope: !4807)
!4827 = !DILocation(line: 314, column: 12, scope: !4807)
!4828 = !DILocation(line: 310, column: 30, scope: !4801)
!4829 = !DILocation(line: 316, column: 4, scope: !4765)
!4830 = !DILocation(line: 316, column: 11, scope: !4765)
!4831 = !DILocation(line: 299, column: 5, scope: !4832)
!4832 = distinct !DILexicalBlock(scope: !4765, file: !35, line: 298, column: 4)
!4833 = !DILocation(line: 299, column: 18, scope: !4832)
!4834 = !DILocation(line: 300, column: 5, scope: !4832)
!4835 = !DILocation(line: 300, column: 18, scope: !4832)
!4836 = !DILocation(line: 317, column: 11, scope: !4765)
!4837 = !DILocation(line: 299, column: 5, scope: !4838)
!4838 = distinct !DILexicalBlock(scope: !4765, file: !35, line: 298, column: 4)
!4839 = !DILocation(line: 299, column: 18, scope: !4838)
!4840 = !DILocation(line: 300, column: 5, scope: !4838)
!4841 = !DILocation(line: 300, column: 18, scope: !4838)
!4842 = !DILocation(line: 206, column: 33, scope: !4843, inlinedAt: !4844)
!4843 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !215, file: !215, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4844 = !DILocation(line: 320, column: 4, scope: !4845)
!4845 = distinct !DILexicalBlock(scope: !4333, file: !35, line: 320, column: 4)
!4846 = !DILocation(line: 206, column: 2, scope: !4843, inlinedAt: !4844)
!4847 = !DILocation(line: 208, column: 2, scope: !4843, inlinedAt: !4844)
!4848 = !DILocation(line: 323, column: 9, scope: !4243)
!4849 = distinct !DISubprogram(name: "vprintf", linkageName: "std.io.Formatter.vprintf", scope: !35, file: !35, line: 358, type: !4082, scopeLine: 358, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!4850 = !DILocation(line: 359, column: 1, scope: !4849)
!4851 = !DILocalVariable(name: "self", arg: 1, scope: !4849, file: !35, line: 358, type: !604)
!4852 = !DILocation(line: 358, column: 27, scope: !4849)
!4853 = !DILocalVariable(name: "format", arg: 2, scope: !4849, file: !35, line: 358, type: !286)
!4854 = !DILocation(line: 358, column: 41, scope: !4849)
!4855 = !DILocalVariable(name: "anys", arg: 3, scope: !4849, file: !35, line: 358, type: !287)
!4856 = !DILocation(line: 358, column: 55, scope: !4849)
!4857 = !DILocation(line: 360, column: 2, scope: !4849)
!4858 = !DILocation(line: 360, column: 21, scope: !4849)
!4859 = !DILocation(line: 361, column: 7, scope: !4849)
!4860 = !DILocation(line: 364, column: 3, scope: !4861)
!4861 = distinct !DILexicalBlock(scope: !4849, file: !35, line: 362, column: 2)
!4862 = !DILocation(line: 364, column: 18, scope: !4861)
!4863 = !DILocalVariable(name: "total_len", scope: !4849, file: !35, line: 366, type: !207, align: 8)
!4864 = !DILocation(line: 366, column: 6, scope: !4849)
!4865 = !DILocalVariable(name: "format_len", scope: !4849, file: !35, line: 367, type: !207, align: 8)
!4866 = !DILocation(line: 367, column: 6, scope: !4849)
!4867 = !DILocation(line: 367, column: 19, scope: !4849)
!4868 = !DILocalVariable(name: "variant_index", scope: !4849, file: !35, line: 368, type: !207, align: 8)
!4869 = !DILocation(line: 368, column: 6, scope: !4849)
!4870 = !DILocation(line: 368, column: 22, scope: !4849)
!4871 = !DILocalVariable(name: "i", scope: !4872, file: !35, line: 369, type: !207, align: 8)
!4872 = distinct !DILexicalBlock(scope: !4849, file: !35, line: 369, column: 2)
!4873 = !DILocation(line: 369, column: 11, scope: !4872)
!4874 = !DILocation(line: 369, column: 15, scope: !4872)
!4875 = !DILocation(line: 369, column: 18, scope: !4872)
!4876 = !DILocation(line: 369, column: 22, scope: !4872)
!4877 = !DILocalVariable(name: "c", scope: !4878, file: !35, line: 372, type: !20, align: 1)
!4878 = distinct !DILexicalBlock(scope: !4872, file: !35, line: 370, column: 2)
!4879 = !DILocation(line: 372, column: 8, scope: !4878)
!4880 = !DILocation(line: 372, column: 12, scope: !4878)
!4881 = !DILocation(line: 372, column: 19, scope: !4878)
!4882 = !DILocation(line: 373, column: 7, scope: !4878)
!4883 = !DILocation(line: 376, column: 4, scope: !4884)
!4884 = distinct !DILexicalBlock(scope: !4878, file: !35, line: 374, column: 3)
!4885 = !DILocation(line: 376, column: 17, scope: !4884)
!4886 = !DILocation(line: 377, column: 4, scope: !4884)
!4887 = !DILocation(line: 379, column: 3, scope: !4878)
!4888 = !DILocation(line: 380, column: 7, scope: !4878)
!4889 = !DILocation(line: 380, column: 12, scope: !4878)
!4890 = !DILocation(line: 335, column: 2, scope: !4891, inlinedAt: !4892)
!4891 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !35, file: !35, line: 333, scopeLine: 333, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4892 = !DILocation(line: 380, column: 31, scope: !4878)
!4893 = !DILocation(line: 336, column: 9, scope: !4891, inlinedAt: !4892)
!4894 = !DILocation(line: 381, column: 7, scope: !4878)
!4895 = !DILocation(line: 381, column: 14, scope: !4878)
!4896 = !DILocation(line: 382, column: 7, scope: !4878)
!4897 = !DILocation(line: 384, column: 4, scope: !4898)
!4898 = distinct !DILexicalBlock(scope: !4878, file: !35, line: 383, column: 3)
!4899 = !DILocation(line: 384, column: 17, scope: !4898)
!4900 = !DILocation(line: 385, column: 4, scope: !4898)
!4901 = !DILocation(line: 388, column: 3, scope: !4878)
!4902 = !DILocation(line: 389, column: 3, scope: !4878)
!4903 = !DILocation(line: 393, column: 15, scope: !4904)
!4904 = distinct !DILexicalBlock(scope: !4905, file: !35, line: 393, column: 15)
!4905 = distinct !DILexicalBlock(scope: !4906, file: !35, line: 391, column: 4)
!4906 = distinct !DILexicalBlock(scope: !4907, file: !35, line: 390, column: 3)
!4907 = distinct !DILexicalBlock(scope: !4878, file: !35, line: 389, column: 3)
!4908 = !DILocation(line: 393, column: 36, scope: !4904)
!4909 = !DILocation(line: 394, column: 15, scope: !4910)
!4910 = distinct !DILexicalBlock(scope: !4905, file: !35, line: 394, column: 15)
!4911 = !DILocation(line: 394, column: 33, scope: !4910)
!4912 = !DILocation(line: 395, column: 15, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4905, file: !35, line: 395, column: 15)
!4914 = !DILocation(line: 395, column: 33, scope: !4913)
!4915 = !DILocation(line: 396, column: 15, scope: !4916)
!4916 = distinct !DILexicalBlock(scope: !4905, file: !35, line: 396, column: 15)
!4917 = !DILocation(line: 396, column: 34, scope: !4916)
!4918 = !DILocation(line: 397, column: 15, scope: !4919)
!4919 = distinct !DILexicalBlock(scope: !4905, file: !35, line: 397, column: 15)
!4920 = !DILocation(line: 397, column: 33, scope: !4919)
!4921 = !DILocation(line: 398, column: 14, scope: !4922)
!4922 = distinct !DILexicalBlock(scope: !4905, file: !35, line: 398, column: 14)
!4923 = !DILocation(line: 400, column: 10, scope: !4906)
!4924 = !DILocation(line: 400, column: 15, scope: !4906)
!4925 = !DILocation(line: 400, column: 8, scope: !4906)
!4926 = !DILocation(line: 335, column: 2, scope: !4927, inlinedAt: !4928)
!4927 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !35, file: !35, line: 333, scopeLine: 333, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4928 = !DILocation(line: 400, column: 34, scope: !4906)
!4929 = !DILocation(line: 336, column: 9, scope: !4927, inlinedAt: !4928)
!4930 = !DILocation(line: 401, column: 8, scope: !4906)
!4931 = !DILocation(line: 401, column: 15, scope: !4906)
!4932 = !DILocalVariable(name: "w", scope: !4878, file: !35, line: 404, type: !3, align: 4)
!4933 = !DILocation(line: 404, column: 8, scope: !4878)
!4934 = !DILocation(line: 404, column: 48, scope: !4878)
!4935 = !DILocation(line: 404, column: 86, scope: !4878)
!4936 = !DILocation(line: 404, column: 12, scope: !4878)
!4937 = !DILocation(line: 405, column: 13, scope: !4878)
!4938 = !DILocation(line: 335, column: 2, scope: !4939, inlinedAt: !4940)
!4939 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !35, file: !35, line: 333, scopeLine: 333, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4940 = !DILocation(line: 405, column: 23, scope: !4878)
!4941 = !DILocation(line: 336, column: 9, scope: !4939, inlinedAt: !4940)
!4942 = !DILocation(line: 406, column: 7, scope: !4878)
!4943 = !DILocation(line: 406, column: 14, scope: !4878)
!4944 = !DILocation(line: 407, column: 7, scope: !4878)
!4945 = !DILocation(line: 409, column: 4, scope: !4946)
!4946 = distinct !DILexicalBlock(scope: !4878, file: !35, line: 408, column: 3)
!4947 = !DILocation(line: 409, column: 22, scope: !4946)
!4948 = !DILocation(line: 410, column: 9, scope: !4946)
!4949 = !DILocation(line: 412, column: 3, scope: !4878)
!4950 = !DILocation(line: 412, column: 16, scope: !4878)
!4951 = !DILocation(line: 414, column: 3, scope: !4878)
!4952 = !DILocation(line: 414, column: 15, scope: !4878)
!4953 = !DILocation(line: 415, column: 7, scope: !4878)
!4954 = !DILocation(line: 417, column: 4, scope: !4955)
!4955 = distinct !DILexicalBlock(scope: !4878, file: !35, line: 416, column: 3)
!4956 = !DILocation(line: 417, column: 27, scope: !4955)
!4957 = !DILocation(line: 418, column: 10, scope: !4955)
!4958 = !DILocation(line: 418, column: 15, scope: !4955)
!4959 = !DILocation(line: 418, column: 8, scope: !4955)
!4960 = !DILocation(line: 335, column: 2, scope: !4961, inlinedAt: !4962)
!4961 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !35, file: !35, line: 333, scopeLine: 333, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4962 = !DILocation(line: 418, column: 34, scope: !4955)
!4963 = !DILocation(line: 336, column: 9, scope: !4961, inlinedAt: !4962)
!4964 = !DILocalVariable(name: "prec", scope: !4955, file: !35, line: 419, type: !3, align: 4)
!4965 = !DILocation(line: 419, column: 9, scope: !4955)
!4966 = !DILocation(line: 419, column: 52, scope: !4955)
!4967 = !DILocation(line: 419, column: 90, scope: !4955)
!4968 = !DILocation(line: 419, column: 16, scope: !4955)
!4969 = !DILocation(line: 420, column: 14, scope: !4955)
!4970 = !DILocation(line: 335, column: 2, scope: !4971, inlinedAt: !4972)
!4971 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !35, file: !35, line: 333, scopeLine: 333, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4972 = !DILocation(line: 420, column: 27, scope: !4955)
!4973 = !DILocation(line: 336, column: 9, scope: !4971, inlinedAt: !4972)
!4974 = !DILocation(line: 421, column: 4, scope: !4955)
!4975 = !DILocation(line: 421, column: 16, scope: !4955)
!4976 = !DILocation(line: 421, column: 27, scope: !4955)
!4977 = !DILocation(line: 421, column: 31, scope: !4955)
!4978 = !DILocation(line: 422, column: 8, scope: !4955)
!4979 = !DILocation(line: 422, column: 15, scope: !4955)
!4980 = !DILocalVariable(name: "base", scope: !4878, file: !35, line: 426, type: !94, align: 4)
!4981 = !DILocation(line: 426, column: 8, scope: !4878)
!4982 = !DILocation(line: 426, column: 15, scope: !4878)
!4983 = !DILocation(line: 427, column: 7, scope: !4878)
!4984 = !DILocation(line: 427, column: 24, scope: !4878)
!4985 = !DILocation(line: 25, column: 27, scope: !4986, inlinedAt: !4988)
!4986 = distinct !DILexicalBlock(scope: !4987, file: !25, line: 26, column: 1)
!4987 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !25, file: !25, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!4988 = !DILocation(line: 429, column: 4, scope: !4989)
!4989 = distinct !DILexicalBlock(scope: !4878, file: !35, line: 428, column: 3)
!4990 = !DILocation(line: 27, column: 6, scope: !4987, inlinedAt: !4988)
!4991 = !DILocation(line: 27, column: 31, scope: !4987, inlinedAt: !4988)
!4992 = !DILocation(line: 28, column: 2, scope: !4987, inlinedAt: !4988)
!4993 = !DILocation(line: 28, column: 21, scope: !4987, inlinedAt: !4988)
!4994 = !DILocation(line: 29, column: 9, scope: !4987, inlinedAt: !4988)
!4995 = !DILocation(line: 430, column: 4, scope: !4989)
!4996 = !DILocation(line: 430, column: 17, scope: !4989)
!4997 = !DILocation(line: 431, column: 4, scope: !4989)
!4998 = !DILocalVariable(name: "current", scope: !4878, file: !35, line: 433, type: !291, align: 8)
!4999 = !DILocation(line: 433, column: 7, scope: !4878)
!5000 = !DILocation(line: 433, column: 17, scope: !4878)
!5001 = !DILocation(line: 433, column: 22, scope: !4878)
!5002 = !DILocation(line: 437, column: 12, scope: !5003)
!5003 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 437, column: 5)
!5004 = distinct !DILexicalBlock(scope: !4878, file: !35, line: 434, column: 3)
!5005 = !DILocation(line: 438, column: 5, scope: !5003)
!5006 = !DILocation(line: 438, column: 23, scope: !5003)
!5007 = !DILocation(line: 440, column: 5, scope: !5008)
!5008 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 440, column: 5)
!5009 = !DILocation(line: 440, column: 28, scope: !5008)
!5010 = !DILocation(line: 441, column: 5, scope: !5008)
!5011 = !DILocation(line: 443, column: 12, scope: !5012)
!5012 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 443, column: 5)
!5013 = !DILocation(line: 445, column: 5, scope: !5014)
!5014 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 445, column: 5)
!5015 = !DILocation(line: 445, column: 28, scope: !5014)
!5016 = !DILocation(line: 446, column: 5, scope: !5014)
!5017 = !DILocation(line: 448, column: 12, scope: !5018)
!5018 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 448, column: 5)
!5019 = !DILocation(line: 450, column: 5, scope: !5020)
!5020 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 450, column: 5)
!5021 = !DILocation(line: 450, column: 28, scope: !5020)
!5022 = !DILocation(line: 451, column: 5, scope: !5020)
!5023 = !DILocation(line: 453, column: 12, scope: !5024)
!5024 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 453, column: 5)
!5025 = !DILocation(line: 455, column: 5, scope: !5026)
!5026 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 455, column: 5)
!5027 = !DILocation(line: 455, column: 28, scope: !5026)
!5028 = !DILocation(line: 456, column: 5, scope: !5026)
!5029 = !DILocation(line: 458, column: 5, scope: !5030)
!5030 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 458, column: 5)
!5031 = !DILocalVariable(name: "len", scope: !5032, file: !35, line: 341, type: !208, align: 8)
!5032 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !35, file: !35, line: 339, scopeLine: 339, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!5033 = !DILocation(line: 341, column: 7, scope: !5032, inlinedAt: !5034)
!5034 = !DILocation(line: 458, column: 18, scope: !5030)
!5035 = !DILocation(line: 458, column: 44, scope: !5032, inlinedAt: !5034)
!5036 = !DILocation(line: 341, column: 13, scope: !5032, inlinedAt: !5034)
!5037 = !DILocalVariable(name: "err", scope: !5032, file: !35, line: 342, type: !115, align: 8)
!5038 = !DILocation(line: 342, column: 12, scope: !5032, inlinedAt: !5034)
!5039 = !DILocation(line: 342, column: 18, scope: !5032, inlinedAt: !5034)
!5040 = !DILocation(line: 346, column: 9, scope: !5041, inlinedAt: !5034)
!5041 = distinct !DILexicalBlock(scope: !5042, file: !35, line: 344, column: 3)
!5042 = distinct !DILexicalBlock(scope: !5032, file: !35, line: 343, column: 2)
!5043 = !DILocation(line: 347, column: 15, scope: !5041, inlinedAt: !5034)
!5044 = !DILocation(line: 25, column: 27, scope: !5045, inlinedAt: !5047)
!5045 = distinct !DILexicalBlock(scope: !5046, file: !25, line: 26, column: 1)
!5046 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !25, file: !25, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!5047 = !DILocation(line: 348, column: 18, scope: !5048, inlinedAt: !5034)
!5048 = distinct !DILexicalBlock(scope: !5041, file: !35, line: 348, column: 11)
!5049 = !DILocation(line: 27, column: 6, scope: !5046, inlinedAt: !5047)
!5050 = !DILocation(line: 27, column: 31, scope: !5046, inlinedAt: !5047)
!5051 = !DILocation(line: 28, column: 2, scope: !5046, inlinedAt: !5047)
!5052 = !DILocation(line: 28, column: 21, scope: !5046, inlinedAt: !5047)
!5053 = !DILocation(line: 29, column: 9, scope: !5046, inlinedAt: !5047)
!5054 = !DILocation(line: 25, column: 27, scope: !5055, inlinedAt: !5057)
!5055 = distinct !DILexicalBlock(scope: !5056, file: !25, line: 26, column: 1)
!5056 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !25, file: !25, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!5057 = !DILocation(line: 350, column: 11, scope: !5058, inlinedAt: !5034)
!5058 = distinct !DILexicalBlock(scope: !5041, file: !35, line: 350, column: 5)
!5059 = !DILocation(line: 27, column: 6, scope: !5056, inlinedAt: !5057)
!5060 = !DILocation(line: 27, column: 31, scope: !5056, inlinedAt: !5057)
!5061 = !DILocation(line: 28, column: 2, scope: !5056, inlinedAt: !5057)
!5062 = !DILocation(line: 28, column: 21, scope: !5056, inlinedAt: !5057)
!5063 = !DILocation(line: 29, column: 9, scope: !5056, inlinedAt: !5057)
!5064 = !DILocation(line: 351, column: 11, scope: !5058, inlinedAt: !5034)
!5065 = !DILocation(line: 352, column: 18, scope: !5058, inlinedAt: !5034)
!5066 = !DILocation(line: 355, column: 9, scope: !5032, inlinedAt: !5034)
!5067 = !DILocation(line: 459, column: 5, scope: !5030)
!5068 = !DILocation(line: 461, column: 5, scope: !5069)
!5069 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 461, column: 5)
!5070 = !DILocation(line: 461, column: 28, scope: !5069)
!5071 = !DILocation(line: 462, column: 5, scope: !5069)
!5072 = !DILocation(line: 464, column: 5, scope: !5073)
!5073 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 464, column: 5)
!5074 = !DILocalVariable(name: "len", scope: !5075, file: !35, line: 341, type: !208, align: 8)
!5075 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !35, file: !35, line: 339, scopeLine: 339, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!5076 = !DILocation(line: 341, column: 7, scope: !5075, inlinedAt: !5077)
!5077 = !DILocation(line: 464, column: 18, scope: !5073)
!5078 = !DILocation(line: 464, column: 44, scope: !5075, inlinedAt: !5077)
!5079 = !DILocation(line: 341, column: 13, scope: !5075, inlinedAt: !5077)
!5080 = !DILocalVariable(name: "err", scope: !5075, file: !35, line: 342, type: !115, align: 8)
!5081 = !DILocation(line: 342, column: 12, scope: !5075, inlinedAt: !5077)
!5082 = !DILocation(line: 342, column: 18, scope: !5075, inlinedAt: !5077)
!5083 = !DILocation(line: 346, column: 9, scope: !5084, inlinedAt: !5077)
!5084 = distinct !DILexicalBlock(scope: !5085, file: !35, line: 344, column: 3)
!5085 = distinct !DILexicalBlock(scope: !5075, file: !35, line: 343, column: 2)
!5086 = !DILocation(line: 347, column: 15, scope: !5084, inlinedAt: !5077)
!5087 = !DILocation(line: 25, column: 27, scope: !5088, inlinedAt: !5090)
!5088 = distinct !DILexicalBlock(scope: !5089, file: !25, line: 26, column: 1)
!5089 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !25, file: !25, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!5090 = !DILocation(line: 348, column: 18, scope: !5091, inlinedAt: !5077)
!5091 = distinct !DILexicalBlock(scope: !5084, file: !35, line: 348, column: 11)
!5092 = !DILocation(line: 27, column: 6, scope: !5089, inlinedAt: !5090)
!5093 = !DILocation(line: 27, column: 31, scope: !5089, inlinedAt: !5090)
!5094 = !DILocation(line: 28, column: 2, scope: !5089, inlinedAt: !5090)
!5095 = !DILocation(line: 28, column: 21, scope: !5089, inlinedAt: !5090)
!5096 = !DILocation(line: 29, column: 9, scope: !5089, inlinedAt: !5090)
!5097 = !DILocation(line: 25, column: 27, scope: !5098, inlinedAt: !5100)
!5098 = distinct !DILexicalBlock(scope: !5099, file: !25, line: 26, column: 1)
!5099 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !25, file: !25, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!5100 = !DILocation(line: 350, column: 11, scope: !5101, inlinedAt: !5077)
!5101 = distinct !DILexicalBlock(scope: !5084, file: !35, line: 350, column: 5)
!5102 = !DILocation(line: 27, column: 6, scope: !5099, inlinedAt: !5100)
!5103 = !DILocation(line: 27, column: 31, scope: !5099, inlinedAt: !5100)
!5104 = !DILocation(line: 28, column: 2, scope: !5099, inlinedAt: !5100)
!5105 = !DILocation(line: 28, column: 21, scope: !5099, inlinedAt: !5100)
!5106 = !DILocation(line: 29, column: 9, scope: !5099, inlinedAt: !5100)
!5107 = !DILocation(line: 351, column: 11, scope: !5101, inlinedAt: !5077)
!5108 = !DILocation(line: 352, column: 18, scope: !5101, inlinedAt: !5077)
!5109 = !DILocation(line: 355, column: 9, scope: !5075, inlinedAt: !5077)
!5110 = !DILocation(line: 465, column: 5, scope: !5073)
!5111 = !DILocation(line: 467, column: 5, scope: !5112)
!5112 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 467, column: 5)
!5113 = !DILocation(line: 467, column: 28, scope: !5112)
!5114 = !DILocation(line: 468, column: 5, scope: !5112)
!5115 = !DILocation(line: 470, column: 5, scope: !5116)
!5116 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 470, column: 5)
!5117 = !DILocalVariable(name: "len", scope: !5118, file: !35, line: 341, type: !208, align: 8)
!5118 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !35, file: !35, line: 339, scopeLine: 339, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!5119 = !DILocation(line: 341, column: 7, scope: !5118, inlinedAt: !5120)
!5120 = !DILocation(line: 470, column: 18, scope: !5116)
!5121 = !DILocation(line: 470, column: 44, scope: !5118, inlinedAt: !5120)
!5122 = !DILocation(line: 341, column: 13, scope: !5118, inlinedAt: !5120)
!5123 = !DILocalVariable(name: "err", scope: !5118, file: !35, line: 342, type: !115, align: 8)
!5124 = !DILocation(line: 342, column: 12, scope: !5118, inlinedAt: !5120)
!5125 = !DILocation(line: 342, column: 18, scope: !5118, inlinedAt: !5120)
!5126 = !DILocation(line: 346, column: 9, scope: !5127, inlinedAt: !5120)
!5127 = distinct !DILexicalBlock(scope: !5128, file: !35, line: 344, column: 3)
!5128 = distinct !DILexicalBlock(scope: !5118, file: !35, line: 343, column: 2)
!5129 = !DILocation(line: 347, column: 15, scope: !5127, inlinedAt: !5120)
!5130 = !DILocation(line: 25, column: 27, scope: !5131, inlinedAt: !5133)
!5131 = distinct !DILexicalBlock(scope: !5132, file: !25, line: 26, column: 1)
!5132 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !25, file: !25, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!5133 = !DILocation(line: 348, column: 18, scope: !5134, inlinedAt: !5120)
!5134 = distinct !DILexicalBlock(scope: !5127, file: !35, line: 348, column: 11)
!5135 = !DILocation(line: 27, column: 6, scope: !5132, inlinedAt: !5133)
!5136 = !DILocation(line: 27, column: 31, scope: !5132, inlinedAt: !5133)
!5137 = !DILocation(line: 28, column: 2, scope: !5132, inlinedAt: !5133)
!5138 = !DILocation(line: 28, column: 21, scope: !5132, inlinedAt: !5133)
!5139 = !DILocation(line: 29, column: 9, scope: !5132, inlinedAt: !5133)
!5140 = !DILocation(line: 25, column: 27, scope: !5141, inlinedAt: !5143)
!5141 = distinct !DILexicalBlock(scope: !5142, file: !25, line: 26, column: 1)
!5142 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !25, file: !25, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!5143 = !DILocation(line: 350, column: 11, scope: !5144, inlinedAt: !5120)
!5144 = distinct !DILexicalBlock(scope: !5127, file: !35, line: 350, column: 5)
!5145 = !DILocation(line: 27, column: 6, scope: !5142, inlinedAt: !5143)
!5146 = !DILocation(line: 27, column: 31, scope: !5142, inlinedAt: !5143)
!5147 = !DILocation(line: 28, column: 2, scope: !5142, inlinedAt: !5143)
!5148 = !DILocation(line: 28, column: 21, scope: !5142, inlinedAt: !5143)
!5149 = !DILocation(line: 29, column: 9, scope: !5142, inlinedAt: !5143)
!5150 = !DILocation(line: 351, column: 11, scope: !5144, inlinedAt: !5120)
!5151 = !DILocation(line: 352, column: 18, scope: !5144, inlinedAt: !5120)
!5152 = !DILocation(line: 355, column: 9, scope: !5118, inlinedAt: !5120)
!5153 = !DILocation(line: 471, column: 5, scope: !5116)
!5154 = !DILocation(line: 473, column: 5, scope: !5155)
!5155 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 473, column: 5)
!5156 = !DILocation(line: 473, column: 28, scope: !5155)
!5157 = !DILocation(line: 474, column: 5, scope: !5155)
!5158 = !DILocation(line: 476, column: 5, scope: !5159)
!5159 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 476, column: 5)
!5160 = !DILocalVariable(name: "len", scope: !5161, file: !35, line: 341, type: !208, align: 8)
!5161 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !35, file: !35, line: 339, scopeLine: 339, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!5162 = !DILocation(line: 341, column: 7, scope: !5161, inlinedAt: !5163)
!5163 = !DILocation(line: 476, column: 18, scope: !5159)
!5164 = !DILocation(line: 476, column: 44, scope: !5161, inlinedAt: !5163)
!5165 = !DILocation(line: 341, column: 13, scope: !5161, inlinedAt: !5163)
!5166 = !DILocalVariable(name: "err", scope: !5161, file: !35, line: 342, type: !115, align: 8)
!5167 = !DILocation(line: 342, column: 12, scope: !5161, inlinedAt: !5163)
!5168 = !DILocation(line: 342, column: 18, scope: !5161, inlinedAt: !5163)
!5169 = !DILocation(line: 346, column: 9, scope: !5170, inlinedAt: !5163)
!5170 = distinct !DILexicalBlock(scope: !5171, file: !35, line: 344, column: 3)
!5171 = distinct !DILexicalBlock(scope: !5161, file: !35, line: 343, column: 2)
!5172 = !DILocation(line: 347, column: 15, scope: !5170, inlinedAt: !5163)
!5173 = !DILocation(line: 25, column: 27, scope: !5174, inlinedAt: !5176)
!5174 = distinct !DILexicalBlock(scope: !5175, file: !25, line: 26, column: 1)
!5175 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !25, file: !25, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!5176 = !DILocation(line: 348, column: 18, scope: !5177, inlinedAt: !5163)
!5177 = distinct !DILexicalBlock(scope: !5170, file: !35, line: 348, column: 11)
!5178 = !DILocation(line: 27, column: 6, scope: !5175, inlinedAt: !5176)
!5179 = !DILocation(line: 27, column: 31, scope: !5175, inlinedAt: !5176)
!5180 = !DILocation(line: 28, column: 2, scope: !5175, inlinedAt: !5176)
!5181 = !DILocation(line: 28, column: 21, scope: !5175, inlinedAt: !5176)
!5182 = !DILocation(line: 29, column: 9, scope: !5175, inlinedAt: !5176)
!5183 = !DILocation(line: 25, column: 27, scope: !5184, inlinedAt: !5186)
!5184 = distinct !DILexicalBlock(scope: !5185, file: !25, line: 26, column: 1)
!5185 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !25, file: !25, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!5186 = !DILocation(line: 350, column: 11, scope: !5187, inlinedAt: !5163)
!5187 = distinct !DILexicalBlock(scope: !5170, file: !35, line: 350, column: 5)
!5188 = !DILocation(line: 27, column: 6, scope: !5185, inlinedAt: !5186)
!5189 = !DILocation(line: 27, column: 31, scope: !5185, inlinedAt: !5186)
!5190 = !DILocation(line: 28, column: 2, scope: !5185, inlinedAt: !5186)
!5191 = !DILocation(line: 28, column: 21, scope: !5185, inlinedAt: !5186)
!5192 = !DILocation(line: 29, column: 9, scope: !5185, inlinedAt: !5186)
!5193 = !DILocation(line: 351, column: 11, scope: !5187, inlinedAt: !5163)
!5194 = !DILocation(line: 352, column: 18, scope: !5187, inlinedAt: !5163)
!5195 = !DILocation(line: 355, column: 9, scope: !5161, inlinedAt: !5163)
!5196 = !DILocation(line: 477, column: 5, scope: !5159)
!5197 = !DILocation(line: 479, column: 5, scope: !5198)
!5198 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 479, column: 5)
!5199 = !DILocation(line: 479, column: 18, scope: !5198)
!5200 = !DILocation(line: 480, column: 5, scope: !5198)
!5201 = !DILocation(line: 482, column: 5, scope: !5202)
!5202 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 482, column: 5)
!5203 = !DILocation(line: 482, column: 28, scope: !5202)
!5204 = !DILocation(line: 483, column: 5, scope: !5202)
!5205 = !DILocalVariable(name: "out", scope: !5206, file: !35, line: 485, type: !203, align: 8)
!5206 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 485, column: 14)
!5207 = !DILocation(line: 485, column: 21, scope: !5206)
!5208 = !DILocation(line: 486, column: 13, scope: !5209)
!5209 = distinct !DILexicalBlock(scope: !5206, file: !35, line: 486, column: 5)
!5210 = !DILocation(line: 488, column: 11, scope: !5209)
!5211 = !DILocation(line: 489, column: 11, scope: !5209)
!5212 = !DILocation(line: 490, column: 14, scope: !5213)
!5213 = distinct !DILexicalBlock(scope: !5209, file: !35, line: 490, column: 7)
!5214 = !DILocation(line: 492, column: 11, scope: !5215)
!5215 = distinct !DILexicalBlock(scope: !5209, file: !35, line: 492, column: 7)
!5216 = !DILocation(line: 492, column: 44, scope: !5215)
!5217 = !DILocation(line: 492, column: 81, scope: !5215)
!5218 = !DILocation(line: 494, column: 22, scope: !5219)
!5219 = distinct !DILexicalBlock(scope: !5215, file: !35, line: 493, column: 7)
!5220 = !DILocation(line: 494, column: 36, scope: !5219)
!5221 = !DILocation(line: 494, column: 15, scope: !5219)
!5222 = !DILocation(line: 495, column: 8, scope: !5219)
!5223 = !DILocation(line: 497, column: 7, scope: !5215)
!5224 = !DILocation(line: 497, column: 20, scope: !5215)
!5225 = !DILocation(line: 498, column: 7, scope: !5215)
!5226 = !DILocation(line: 500, column: 9, scope: !5206)
!5227 = !DILocalVariable(name: "len", scope: !5228, file: !35, line: 502, type: !207, align: 8)
!5228 = distinct !DILexicalBlock(scope: !5206, file: !35, line: 501, column: 5)
!5229 = !DILocation(line: 502, column: 10, scope: !5228)
!5230 = !DILocation(line: 502, column: 43, scope: !5228)
!5231 = !DILocation(line: 502, column: 16, scope: !5228)
!5232 = !DILocation(line: 503, column: 6, scope: !5228)
!5233 = !DILocation(line: 503, column: 19, scope: !5228)
!5234 = !DILocation(line: 504, column: 6, scope: !5228)
!5235 = !DILocation(line: 504, column: 33, scope: !5228)
!5236 = !DILocation(line: 504, column: 45, scope: !5228)
!5237 = !DILocation(line: 504, column: 19, scope: !5228)
!5238 = !DILocation(line: 505, column: 6, scope: !5228)
!5239 = !DILocation(line: 507, column: 9, scope: !5206)
!5240 = !DILocation(line: 509, column: 6, scope: !5241)
!5241 = distinct !DILexicalBlock(scope: !5206, file: !35, line: 508, column: 5)
!5242 = !DILocation(line: 509, column: 33, scope: !5241)
!5243 = !DILocation(line: 509, column: 45, scope: !5241)
!5244 = !DILocation(line: 509, column: 19, scope: !5241)
!5245 = !DILocation(line: 511, column: 5, scope: !5206)
!5246 = !DILocation(line: 511, column: 45, scope: !5206)
!5247 = !DILocation(line: 511, column: 18, scope: !5206)
!5248 = !DILocation(line: 512, column: 5, scope: !5206)
!5249 = !DILocation(line: 514, column: 9, scope: !5250)
!5250 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 514, column: 5)
!5251 = !DILocalVariable(name: "len", scope: !5252, file: !35, line: 516, type: !207, align: 8)
!5252 = distinct !DILexicalBlock(scope: !5250, file: !35, line: 515, column: 5)
!5253 = !DILocation(line: 516, column: 10, scope: !5252)
!5254 = !DILocation(line: 516, column: 16, scope: !5252)
!5255 = !DILocation(line: 517, column: 6, scope: !5252)
!5256 = !DILocation(line: 517, column: 19, scope: !5252)
!5257 = !DILocation(line: 518, column: 6, scope: !5252)
!5258 = !DILocation(line: 518, column: 33, scope: !5252)
!5259 = !DILocation(line: 518, column: 45, scope: !5252)
!5260 = !DILocation(line: 518, column: 19, scope: !5252)
!5261 = !DILocation(line: 519, column: 6, scope: !5252)
!5262 = !DILocation(line: 521, column: 9, scope: !5250)
!5263 = !DILocalVariable(name: "out_fn", scope: !5264, file: !35, line: 523, type: !307, align: 8)
!5264 = distinct !DILexicalBlock(scope: !5250, file: !35, line: 522, column: 5)
!5265 = !DILocation(line: 523, column: 15, scope: !5264)
!5266 = !DILocation(line: 523, column: 24, scope: !5264)
!5267 = !DILocation(line: 524, column: 6, scope: !5264)
!5268 = !DILocation(line: 524, column: 31, scope: !5264)
!5269 = !DILocalVariable(name: "len", scope: !5264, file: !35, line: 525, type: !207, align: 8)
!5270 = !DILocation(line: 525, column: 10, scope: !5264)
!5271 = !DILocation(line: 525, column: 16, scope: !5264)
!5272 = !DILocation(line: 526, column: 6, scope: !5264)
!5273 = !DILocation(line: 526, column: 20, scope: !5264)
!5274 = !DILocation(line: 527, column: 6, scope: !5264)
!5275 = !DILocation(line: 527, column: 33, scope: !5264)
!5276 = !DILocation(line: 527, column: 45, scope: !5264)
!5277 = !DILocation(line: 527, column: 19, scope: !5264)
!5278 = !DILocation(line: 529, column: 5, scope: !5250)
!5279 = !DILocation(line: 529, column: 18, scope: !5250)
!5280 = !DILocation(line: 530, column: 5, scope: !5250)
!5281 = !DILocation(line: 532, column: 5, scope: !5282)
!5282 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 532, column: 5)
!5283 = !DILocation(line: 532, column: 26, scope: !5282)
!5284 = !DILocation(line: 533, column: 5, scope: !5282)
!5285 = !DILocation(line: 533, column: 23, scope: !5282)
!5286 = !DILocation(line: 534, column: 12, scope: !5282)
!5287 = !DILocation(line: 25, column: 27, scope: !5288, inlinedAt: !5290)
!5288 = distinct !DILexicalBlock(scope: !5289, file: !25, line: 26, column: 1)
!5289 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !25, file: !25, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!5290 = !DILocation(line: 536, column: 5, scope: !5291)
!5291 = distinct !DILexicalBlock(scope: !5004, file: !35, line: 536, column: 5)
!5292 = !DILocation(line: 27, column: 6, scope: !5289, inlinedAt: !5290)
!5293 = !DILocation(line: 27, column: 31, scope: !5289, inlinedAt: !5290)
!5294 = !DILocation(line: 28, column: 2, scope: !5289, inlinedAt: !5290)
!5295 = !DILocation(line: 28, column: 21, scope: !5289, inlinedAt: !5290)
!5296 = !DILocation(line: 29, column: 9, scope: !5289, inlinedAt: !5290)
!5297 = !DILocation(line: 537, column: 5, scope: !5291)
!5298 = !DILocation(line: 537, column: 18, scope: !5291)
!5299 = !DILocation(line: 538, column: 5, scope: !5291)
!5300 = !DILocation(line: 540, column: 7, scope: !4878)
!5301 = !DILocation(line: 542, column: 4, scope: !5302)
!5302 = distinct !DILexicalBlock(scope: !4878, file: !35, line: 541, column: 3)
!5303 = !DILocation(line: 542, column: 22, scope: !5302)
!5304 = !DILocation(line: 543, column: 4, scope: !5302)
!5305 = !DILocation(line: 543, column: 23, scope: !5302)
!5306 = !DILocation(line: 546, column: 7, scope: !4878)
!5307 = !DILocation(line: 546, column: 29, scope: !4878)
!5308 = !DILocation(line: 546, column: 50, scope: !4878)
!5309 = !DILocalVariable(name: "is_neg", scope: !4878, file: !35, line: 548, type: !753, align: 1)
!5310 = !DILocation(line: 548, column: 8, scope: !4878)
!5311 = !DILocation(line: 549, column: 3, scope: !4878)
!5312 = !DILocalVariable(name: "len", scope: !5313, file: !35, line: 341, type: !208, align: 8)
!5313 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !35, file: !35, line: 339, scopeLine: 339, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!5314 = !DILocation(line: 341, column: 7, scope: !5313, inlinedAt: !5315)
!5315 = !DILocation(line: 549, column: 16, scope: !4878)
!5316 = !DILocation(line: 549, column: 42, scope: !5313, inlinedAt: !5315)
!5317 = !DILocation(line: 341, column: 13, scope: !5313, inlinedAt: !5315)
!5318 = !DILocalVariable(name: "err", scope: !5313, file: !35, line: 342, type: !115, align: 8)
!5319 = !DILocation(line: 342, column: 12, scope: !5313, inlinedAt: !5315)
!5320 = !DILocation(line: 342, column: 18, scope: !5313, inlinedAt: !5315)
!5321 = !DILocation(line: 346, column: 9, scope: !5322, inlinedAt: !5315)
!5322 = distinct !DILexicalBlock(scope: !5323, file: !35, line: 344, column: 3)
!5323 = distinct !DILexicalBlock(scope: !5313, file: !35, line: 343, column: 2)
!5324 = !DILocation(line: 347, column: 15, scope: !5322, inlinedAt: !5315)
!5325 = !DILocation(line: 25, column: 27, scope: !5326, inlinedAt: !5328)
!5326 = distinct !DILexicalBlock(scope: !5327, file: !25, line: 26, column: 1)
!5327 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !25, file: !25, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!5328 = !DILocation(line: 348, column: 18, scope: !5329, inlinedAt: !5315)
!5329 = distinct !DILexicalBlock(scope: !5322, file: !35, line: 348, column: 11)
!5330 = !DILocation(line: 27, column: 6, scope: !5327, inlinedAt: !5328)
!5331 = !DILocation(line: 27, column: 31, scope: !5327, inlinedAt: !5328)
!5332 = !DILocation(line: 28, column: 2, scope: !5327, inlinedAt: !5328)
!5333 = !DILocation(line: 28, column: 21, scope: !5327, inlinedAt: !5328)
!5334 = !DILocation(line: 29, column: 9, scope: !5327, inlinedAt: !5328)
!5335 = !DILocation(line: 25, column: 27, scope: !5336, inlinedAt: !5338)
!5336 = distinct !DILexicalBlock(scope: !5337, file: !25, line: 26, column: 1)
!5337 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !25, file: !25, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43)
!5338 = !DILocation(line: 350, column: 11, scope: !5339, inlinedAt: !5315)
!5339 = distinct !DILexicalBlock(scope: !5322, file: !35, line: 350, column: 5)
!5340 = !DILocation(line: 27, column: 6, scope: !5337, inlinedAt: !5338)
!5341 = !DILocation(line: 27, column: 31, scope: !5337, inlinedAt: !5338)
!5342 = !DILocation(line: 28, column: 2, scope: !5337, inlinedAt: !5338)
!5343 = !DILocation(line: 28, column: 21, scope: !5337, inlinedAt: !5338)
!5344 = !DILocation(line: 29, column: 9, scope: !5337, inlinedAt: !5338)
!5345 = !DILocation(line: 351, column: 11, scope: !5339, inlinedAt: !5315)
!5346 = !DILocation(line: 352, column: 18, scope: !5339, inlinedAt: !5315)
!5347 = !DILocation(line: 355, column: 9, scope: !5313, inlinedAt: !5315)
!5348 = !DILocation(line: 369, column: 34, scope: !4872)
!5349 = !DILocation(line: 555, column: 6, scope: !4849)
!5350 = !DILocation(line: 555, column: 31, scope: !4849)
!5351 = !DILocation(line: 556, column: 9, scope: !4849)
!5352 = distinct !DISubprogram(name: "print", linkageName: "std.io.Formatter.print", scope: !35, file: !35, line: 560, type: !616, scopeLine: 560, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !43, retainedNodes: !96)
!5353 = !DILocation(line: 561, column: 1, scope: !5352)
!5354 = !DILocalVariable(name: "self", arg: 1, scope: !5352, file: !35, line: 560, type: !604)
!5355 = !DILocation(line: 560, column: 25, scope: !5352)
!5356 = !DILocalVariable(name: "str", arg: 2, scope: !5352, file: !35, line: 560, type: !286)
!5357 = !DILocation(line: 560, column: 39, scope: !5352)
!5358 = !DILocation(line: 562, column: 7, scope: !5352)
!5359 = !DILocation(line: 565, column: 3, scope: !5360)
!5360 = distinct !DILexicalBlock(scope: !5352, file: !35, line: 563, column: 2)
!5361 = !DILocation(line: 565, column: 18, scope: !5360)
!5362 = !DILocation(line: 567, column: 15, scope: !5363)
!5363 = distinct !DILexicalBlock(scope: !5352, file: !35, line: 567, column: 2)
!5364 = !DILocalVariable(name: ".temp", scope: !5363, file: !35, line: 567, type: !207, align: 8)
!5365 = !DILocalVariable(name: "c", scope: !5366, file: !35, line: 567, type: !20, align: 1)
!5366 = distinct !DILexicalBlock(scope: !5363, file: !35, line: 567, column: 20)
!5367 = !DILocation(line: 567, column: 11, scope: !5366)
!5368 = !DILocation(line: 567, column: 15, scope: !5366)
!5369 = !DILocation(line: 567, column: 20, scope: !5366)
!5370 = !DILocation(line: 568, column: 9, scope: !5352)
!5371 = distinct !DISubprogram(name: "out_null_fn", linkageName: "std.io.out_null_fn", scope: !35, file: !35, line: 329, type: !309, scopeLine: 329, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !43, retainedNodes: !96)
!5372 = !DILocalVariable(name: "data", arg: 1, scope: !5371, file: !35, line: 329, type: !11)
!5373 = !DILocation(line: 329, column: 28, scope: !5371)
!5374 = !DILocalVariable(name: "c", arg: 2, scope: !5371, file: !35, line: 329, type: !20)
!5375 = !DILocation(line: 329, column: 47, scope: !5371)
