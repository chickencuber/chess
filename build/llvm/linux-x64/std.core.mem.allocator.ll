; ModuleID = 'std::core::mem::allocator'
source_filename = "std::core::mem::allocator"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%"char[]" = type { ptr, i64 }
%Backtrace = type { i64, %"char[]", %"char[]", %"char[]", i32, %any, i8 }
%any = type { ptr, i64 }
%WasmMemory = type { i64, i64 }
%"any[]" = type { ptr, i64 }
%TrackingAllocator = type { %any, %HashMap, i64, i64 }
%HashMap = type { %"Entry*[]", %any, i32, i32, float }
%"Entry*[]" = type { ptr, i64 }
%"Allocation[]" = type { ptr, i64 }
%"void*[]" = type { ptr, i64 }
%Allocation = type { ptr, i64, [16 x ptr] }
%List = type { i64, i64, %any, ptr }
%AlignedBlock = type { i64, ptr }
%OnStackAllocatorExtraChunk = type { i8, ptr, ptr }

$std.core.mem.allocator.TrackingAllocator.init = comdat any

$std.core.mem.allocator.TrackingAllocator.free = comdat any

$std.core.mem.allocator.TrackingAllocator.allocated = comdat any

$std.core.mem.allocator.TrackingAllocator.total_allocated = comdat any

$std.core.mem.allocator.TrackingAllocator.total_allocation_count = comdat any

$std.core.mem.allocator.TrackingAllocator.allocations_tlist = comdat any

$std.core.mem.allocator.TrackingAllocator.allocation_count = comdat any

$std.core.mem.allocator.TrackingAllocator.acquire = comdat any

$std.core.mem.allocator.TrackingAllocator.resize = comdat any

$std.core.mem.allocator.TrackingAllocator.release = comdat any

$std.core.mem.allocator.TrackingAllocator.clear = comdat any

$std.core.mem.allocator.TrackingAllocator.has_leaks = comdat any

$std.core.mem.allocator.TrackingAllocator.print_report = comdat any

$std.core.mem.allocator.TrackingAllocator.fprint_report = comdat any

$std.core.mem.allocator.SimpleHeapAllocator.init = comdat any

$std.core.mem.allocator.SimpleHeapAllocator.acquire = comdat any

$std.core.mem.allocator.SimpleHeapAllocator.resize = comdat any

$std.core.mem.allocator.SimpleHeapAllocator.release = comdat any

$std.core.mem.allocator.LibcAllocator.to_string = comdat any

$std.core.mem.allocator.LibcAllocator.to_format = comdat any

$std.core.mem.allocator.LibcAllocator.acquire = comdat any

$std.core.mem.allocator.LibcAllocator.resize = comdat any

$std.core.mem.allocator.LibcAllocator.release = comdat any

$std.core.mem.allocator.OnStackAllocator.init = comdat any

$std.core.mem.allocator.OnStackAllocator.free = comdat any

$std.core.mem.allocator.OnStackAllocator.release = comdat any

$std.core.mem.allocator.OnStackAllocator.resize = comdat any

$std.core.mem.allocator.OnStackAllocator.acquire = comdat any

$std.core.mem.allocator.BackedArenaAllocator.destroy = comdat any

$std.core.mem.allocator.BackedArenaAllocator.mark = comdat any

$std.core.mem.allocator.BackedArenaAllocator.release = comdat any

$std.core.mem.allocator.BackedArenaAllocator.reset = comdat any

$std.core.mem.allocator.BackedArenaAllocator.resize = comdat any

$std.core.mem.allocator.BackedArenaAllocator.acquire = comdat any

$std.core.mem.allocator.new_backed_allocator = comdat any

$std.core.mem.allocator.TempAllocator.derive_allocator = comdat any

$std.core.mem.allocator.TempAllocator.reset = comdat any

$std.core.mem.allocator.TempAllocator.free = comdat any

$std.core.mem.allocator.TempAllocator.release = comdat any

$std.core.mem.allocator.TempAllocator.resize = comdat any

$std.core.mem.allocator.TempAllocator.acquire = comdat any

$std.core.mem.allocator.new_temp_allocator = comdat any

$std.core.mem.allocator.ArenaAllocator.init = comdat any

$std.core.mem.allocator.ArenaAllocator.clear = comdat any

$std.core.mem.allocator.ArenaAllocator.mark = comdat any

$std.core.mem.allocator.ArenaAllocator.reset = comdat any

$std.core.mem.allocator.ArenaAllocator.release = comdat any

$std.core.mem.allocator.ArenaAllocator.acquire = comdat any

$std.core.mem.allocator.ArenaAllocator.resize = comdat any

$std.core.mem.allocator.DynamicArenaAllocator.init = comdat any

$std.core.mem.allocator.DynamicArenaAllocator.free = comdat any

$std.core.mem.allocator.DynamicArenaAllocator.release = comdat any

$std.core.mem.allocator.DynamicArenaAllocator.resize = comdat any

$std.core.mem.allocator.DynamicArenaAllocator.reset = comdat any

$std.core.mem.allocator.DynamicArenaAllocator.acquire = comdat any

$std.core.mem.allocator.WasmMemory.allocate_block = comdat any

$std.core.mem.allocator.LazyTempAllocator.acquire = comdat any

$std.core.mem.allocator.LazyTempAllocator.resize = comdat any

$std.core.mem.allocator.LazyTempAllocator.release = comdat any

$std.core.mem.allocator.NullAllocator.acquire = comdat any

$std.core.mem.allocator.NullAllocator.resize = comdat any

$std.core.mem.allocator.NullAllocator.release = comdat any

$std.core.mem.allocator.clone_any = comdat any

$std.core.mem.allocator.push_pool = comdat any

$std.core.mem.allocator.pop_pool = comdat any

$std.core.mem.allocator.destroy_temp_allocators = comdat any

$.dyn_search = comdat any

$.__c3_atexit_std.core.mem.allocator.destroy_temp_allocators_after_exit = comdat any

$"$ct.std.core.mem.allocator.Allocation" = comdat any

$"$ct.std.core.mem.allocator.TrackingAllocator" = comdat any

$"$ct.std.core.mem.allocator.SimpleHeapAllocator" = comdat any

$"$ct.std.core.mem.allocator.$anon" = comdat any

$"$ct.std.core.mem.allocator.Header" = comdat any

$"$ct.std.core.mem.allocator.LibcAllocator" = comdat any

$"$ct.ulong" = comdat any

$"$ct.std.core.mem.allocator.OnStackAllocator" = comdat any

$"$ct.std.core.mem.allocator.OnStackAllocatorExtraChunk" = comdat any

$"$ct.std.core.mem.allocator.OnStackAllocatorHeader" = comdat any

$"$ct.std.core.mem.allocator.BackedArenaAllocator" = comdat any

$"$ct.std.core.mem.allocator.AllocChunk" = comdat any

$"$ct.std.core.mem.allocator.ExtraPage" = comdat any

$"$ct.std.core.mem.allocator.TempAllocator" = comdat any

$"$ct.std.core.mem.allocator.TempAllocatorChunk" = comdat any

$"$ct.std.core.mem.allocator.TempAllocatorPage" = comdat any

$"$ct.std.core.mem.allocator.ArenaAllocator" = comdat any

$"$ct.std.core.mem.allocator.ArenaAllocatorHeader" = comdat any

$"$ct.std.core.mem.allocator.DynamicArenaAllocator" = comdat any

$"$ct.std.core.mem.allocator.DynamicArenaPage" = comdat any

$"$ct.std.core.mem.allocator.DynamicArenaChunk" = comdat any

$"$ct.std.core.mem.allocator.WasmMemory" = comdat any

$"$ct.std.core.mem.allocator.TrackingEnv" = comdat any

$"$ct.std.core.mem.allocator.AlignedBlock" = comdat any

$"$ct.std.core.mem.allocator.PoolState" = comdat any

$"$ct.p$std.core.mem.allocator.TempAllocator" = comdat any

$"$ct.std.core.mem.allocator.LazyTempAllocator" = comdat any

$"$ct.std.core.mem.allocator.NullAllocator" = comdat any

$"$ct.int" = comdat any

$"$ct.std.core.mem.allocator.AllocInitType" = comdat any

$std.core.mem.allocator.MAX_BACKTRACE = comdat any

$"$sel.acquire" = comdat any

$"$sel.resize" = comdat any

$"$ct.p$void" = comdat any

$"$ct.void" = comdat any

$"$sel.release" = comdat any

$"$ct.std.io.File" = comdat any

$"$ct.fault" = comdat any

$"$ct.long" = comdat any

$"$sel.write" = comdat any

$"$sel.write_byte" = comdat any

$"$sel.flush" = comdat any

$"$ct.String" = comdat any

$"$ct.sa$char" = comdat any

$"$ct.char" = comdat any

$"$ct.uint" = comdat any

$std.core.mem.allocator.LIBC_ALLOCATOR = comdat any

$std.core.mem.OUT_OF_MEMORY = comdat any

$std.core.mem.INVALID_ALLOC_SIZE = comdat any

$std.core.mem.allocator.WASM_BLOCK_SIZE = comdat any

$std.core.mem.allocator.wasm_memory = comdat any

$std.core.mem.allocator.DEFAULT_SIZE_PREFIX = comdat any

$std.core.mem.allocator.DEFAULT_SIZE_PREFIX_ALIGNMENT = comdat any

$std.core.mem.allocator.thread_allocator = comdat any

$std.core.mem.allocator.current_temp = comdat any

$std.core.mem.allocator.top_temp = comdat any

$std.core.mem.allocator.auto_create_temp = comdat any

$std.core.mem.allocator.temp_allocator_min_size = comdat any

$std.core.mem.allocator.temp_allocator_buffer_size = comdat any

$std.core.mem.allocator.temp_allocator_new_mult = comdat any

$std.core.mem.allocator.NULL_ALLOCATOR = comdat any

$"$ct.dyn.std.core.mem.allocator.TrackingAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.TrackingAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.TrackingAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.LibcAllocator.to_string" = comdat any

$"$sel.to_string" = comdat any

$"$ct.dyn.std.core.mem.allocator.LibcAllocator.to_format" = comdat any

$"$sel.to_format" = comdat any

$"$ct.dyn.std.core.mem.allocator.LibcAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.LibcAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.LibcAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.OnStackAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.OnStackAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.OnStackAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.TempAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.TempAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.TempAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.ArenaAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.ArenaAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.ArenaAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.release" = comdat any

$"$ct.dyn.std.core.mem.allocator.NullAllocator.acquire" = comdat any

$"$ct.dyn.std.core.mem.allocator.NullAllocator.resize" = comdat any

$"$ct.dyn.std.core.mem.allocator.NullAllocator.release" = comdat any

@"$ct.std.core.mem.allocator.Allocation" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 144, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.TrackingAllocator" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 80, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.SimpleHeapAllocator" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 16, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.$anon" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 16, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.Header" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 16, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.LibcAllocator" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.OnStackAllocator" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.OnStackAllocatorExtraChunk" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 24, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.OnStackAllocatorHeader" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.BackedArenaAllocator" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 40, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.AllocChunk" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.ExtraPage" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 40, i64 0, i64 6, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.TempAllocator" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 64, i64 0, i64 8, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.TempAllocatorChunk" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.TempAllocatorPage" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 32, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.ArenaAllocator" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.ArenaAllocatorHeader" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.DynamicArenaAllocator" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 40, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.DynamicArenaPage" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 40, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.DynamicArenaChunk" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.WasmMemory" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 16, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.TrackingEnv" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.AlignedBlock" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 16, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.PoolState" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$std.core.mem.allocator.TempAllocator" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$std.core.mem.allocator.TempAllocator" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.LazyTempAllocator" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.NullAllocator" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.enum.NO_ZERO = internal constant [8 x i8] c"NO_ZERO\00", align 1
@.enum.ZERO = internal constant [5 x i8] c"ZERO\00", align 1
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.mem.allocator.AllocInitType" = linkonce global { i8, i64, ptr, i64, i64, i64, [2 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 2, [2 x %"char[]"] [%"char[]" { ptr @.enum.NO_ZERO, i64 7 }, %"char[]" { ptr @.enum.ZERO, i64 4 }] }, comdat, align 8
@std.core.mem.allocator.MAX_BACKTRACE = weak local_unnamed_addr constant i32 16, comdat, align 4, !dbg !0
@.panic_msg = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file = internal constant [22 x i8] c"tracking_allocator.c3\00", align 1
@.func = internal constant [5 x i8] c"init\00", align 1
@std.core.builtin.panic = extern_weak global ptr, align 8
@.panic_msg.2 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.panic_msg.3 = internal constant [95 x i8] c"Unaligned access: ptr %% %s = %s, use @unaligned_load / @unaligned_store for unaligned access.\00", align 1
@.panic_msg.4 = internal constant [70 x i8] c"@require \22capacity > 0\22 violated: 'The capacity must be 1 or higher'.\00", align 1
@.panic_msg.5 = internal constant [80 x i8] c"@require \22load_factor > 0.0\22 violated: 'The load factor must be higher than 0'.\00", align 1
@.panic_msg.6 = internal constant [75 x i8] c"@require \22!self.is_initialized()\22 violated: 'Map was already initialized'.\00", align 1
@.panic_msg.7 = internal constant [83 x i8] c"@require \22capacity < MAXIMUM_CAPACITY\22 violated: 'Capacity cannot exceed maximum'.\00", align 1
@.func.8 = internal constant [5 x i8] c"free\00", align 1
@.func.9 = internal constant [10 x i8] c"allocated\00", align 1
@.panic_msg.10 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.func.11 = internal constant [16 x i8] c"total_allocated\00", align 1
@.func.12 = internal constant [23 x i8] c"total_allocation_count\00", align 1
@.func.13 = internal constant [18 x i8] c"allocations_tlist\00", align 1
@.func.14 = internal constant [17 x i8] c"allocation_count\00", align 1
@.func.15 = internal constant [8 x i8] c"acquire\00", align 1
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", comdat, align 1
@.panic_msg.16 = internal constant [66 x i8] c"@require \22!alignment || math::is_power_of_2(alignment)\22 violated.\00", align 1
@.panic_msg.17 = internal constant [81 x i8] c"@require \22alignment <= mem::MAX_MEMORY_ALIGNMENT\22 violated: 'alignment too big'.\00", align 1
@.panic_msg.18 = internal constant [60 x i8] c"@require \22size > 0\22 violated: 'The size must be 1 or more'.\00", align 1
@.panic_msg.19 = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@.func.20 = internal constant [7 x i8] c"resize\00", align 1
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", comdat, align 1
@.panic_msg.21 = internal constant [33 x i8] c"@require \22ptr != null\22 violated.\00", align 1
@.panic_msg.22 = internal constant [34 x i8] c"@require \22new_size > 0\22 violated.\00", align 1
@.panic_msg.23 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.func.24 = internal constant [8 x i8] c"release\00", align 1
@.str = private unnamed_addr constant [63 x i8] c"Attempt to release untracked pointer %p, this is likely a bug.\00", align 1
@.str.25 = private unnamed_addr constant [22 x i8] c"tracking_allocator.c3\00", align 1
@.str.26 = private unnamed_addr constant [26 x i8] c"TrackingAllocator.release\00", align 1
@"$ct.p$void" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.void" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.void" = linkonce global %.introspect { i8 0, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", comdat, align 1
@.panic_msg.27 = internal constant [76 x i8] c"@require \22ptr != null\22 violated: 'Empty pointers should never be released'.\00", align 1
@.panic_msg.28 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@.func.29 = internal constant [6 x i8] c"clear\00", align 1
@.func.30 = internal constant [10 x i8] c"has_leaks\00", align 1
@.func.31 = internal constant [13 x i8] c"print_report\00", align 1
@"$ct.std.io.File" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.fault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.32 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@.func.33 = internal constant [14 x i8] c"fprint_report\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.str.34 = private unnamed_addr constant [32 x i8] c"======== Memory Report ========\00", align 1
@"$sel.write" = linkonce_odr constant [6 x i8] c"write\00", comdat, align 1
@.panic_msg.35 = internal constant [43 x i8] c"No method 'write' could be found on target\00", align 1
@.file.36 = internal constant [6 x i8] c"io.c3\00", align 1
@"$sel.write_byte" = linkonce_odr constant [11 x i8] c"write_byte\00", comdat, align 1
@.panic_msg.37 = internal constant [48 x i8] c"No method 'write_byte' could be found on target\00", align 1
@"$sel.flush" = linkonce_odr constant [6 x i8] c"flush\00", comdat, align 1
@.panic_msg.38 = internal constant [43 x i8] c"No method 'flush' could be found on target\00", align 1
@.str.39 = private unnamed_addr constant [24 x i8] c"Size in bytes   Address\00", align 1
@.str.40 = private unnamed_addr constant [10 x i8] c"%13s   %p\00", align 1
@.str.41 = private unnamed_addr constant [32 x i8] c"===============================\00", align 1
@.str.42 = private unnamed_addr constant [84 x i8] c"================================== Memory Report ==================================\00", align 1
@.str.43 = private unnamed_addr constant [65 x i8] c"Size in bytes   Address          Function                       \00", align 1
@std.os.backtrace.BACKTRACE_UNKNOWN = extern_weak constant %Backtrace, align 8
@.panic_msg.44 = internal constant [63 x i8] c"@require \22index < self.size\22 violated: 'Access out of bounds'.\00", align 1
@.str.45 = private unnamed_addr constant [18 x i8] c"%13s   %p   %s:%d\00", align 1
@.str.46 = private unnamed_addr constant [4 x i8] c"???\00", align 1
@"$ct.String" = linkonce global %.introspect { i8 17, i64 ptrtoint (ptr @"$ct.sa$char" to i64), ptr null, i64 16, i64 ptrtoint (ptr @"$ct.sa$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.sa$char" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.str.47 = private unnamed_addr constant [84 x i8] c"===================================================================================\00", align 1
@.str.48 = private unnamed_addr constant [25 x i8] c"* NO ALLOCATIONS FOUND *\00", align 1
@.str.49 = private unnamed_addr constant [50 x i8] c"- Total currently allocated memory:            %d\00", align 1
@.str.50 = private unnamed_addr constant [50 x i8] c"- Total current allocations:                   %d\00", align 1
@.str.51 = private unnamed_addr constant [50 x i8] c"- Total allocations (freed and retained):      %d\00", align 1
@.str.52 = private unnamed_addr constant [50 x i8] c"- Total allocated memory (freed and retained): %d\00", align 1
@.emptystr = internal constant [1 x i8] zeroinitializer, align 1
@.str.53 = private unnamed_addr constant [18 x i8] c"Full leak report:\00", align 1
@.str.54 = private unnamed_addr constant [51 x i8] c"Allocation %d (%d bytes) - no backtrace available.\00", align 1
@.panic_msg.55 = internal constant [62 x i8] c"Dereference of null pointer, 'allocation.backtrace' was null.\00", align 1
@.panic_msg.56 = internal constant [45 x i8] c"Negative size (start %d is less than end %d)\00", align 1
@.panic_msg.57 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@.str.58 = private unnamed_addr constant [27 x i8] c"Allocation %d (%d bytes): \00", align 1
@.panic_msg.59 = internal constant [33 x i8] c"Called a method on a null value.\00", align 1
@.file.60 = internal constant [8 x i8] c"list.c3\00", align 1
@.str.61 = private unnamed_addr constant [17 x i8] c"   %s (in %s:%d)\00", align 1
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.str.62 = private unnamed_addr constant [20 x i8] c"   ??? (in unknown)\00", align 1
@.str.63 = private unnamed_addr constant [27 x i8] c"   %s (source unavailable)\00", align 1
@.file.64 = internal constant [18 x i8] c"heap_allocator.c3\00", align 1
@.panic_msg.65 = internal constant [86 x i8] c"@require \22allocator != null\22 violated: 'An underlying memory provider must be given'.\00", align 1
@.panic_msg.66 = internal constant [85 x i8] c"@require \22!self.free_list\22 violated: 'The allocator may not be already initialized'.\00", align 1
@.panic_msg.67 = internal constant [31 x i8] c"@require \22bytes > 0\22 violated.\00", align 1
@.panic_msg.68 = internal constant [35 x i8] c"@require \22alignment > 0\22 violated.\00", align 1
@.panic_msg.69 = internal constant [38 x i8] c"@require \22bytes <= isz.max\22 violated.\00", align 1
@.panic_msg.70 = internal constant [52 x i8] c"@require \22math::is_power_of_2(alignment)\22 violated.\00", align 1
@.file.71 = internal constant [7 x i8] c"mem.c3\00", align 1
@.panic_msg.72 = internal constant [28 x i8] c"Assert \22mem > data\22 failed.\00", align 1
@.file.73 = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.panic_msg.74 = internal constant [46 x i8] c"Dereference of null pointer, 'desc' was null.\00", align 1
@.panic_msg.75 = internal constant [38 x i8] c"Passed null to a ref ('&') parameter.\00", align 1
@.panic_msg.76 = internal constant [95 x i8] c"@require \22src != null || len == 0\22 violated: 'Copying a null with non-zero length is invalid'.\00", align 1
@.panic_msg.77 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.panic_msg.78 = internal constant [46 x i8] c"@require \22old_pointer && bytes > 0\22 violated.\00", align 1
@.func.79 = internal constant [9 x i8] c"_realloc\00", align 1
@.func.80 = internal constant [8 x i8] c"_calloc\00", align 1
@.func.81 = internal constant [7 x i8] c"_alloc\00", align 1
@.func.82 = internal constant [10 x i8] c"add_block\00", align 1
@.panic_msg.83 = internal constant [97 x i8] c"Assert \22mem::aligned_offset(aligned_bytes, mem::DEFAULT_MEM_ALIGNMENT) == aligned_bytes\22 failed.\00", align 1
@.panic_msg.84 = internal constant [57 x i8] c"Calling null function pointer, 'self.alloc_fn' was null.\00", align 1
@.func.85 = internal constant [6 x i8] c"_free\00", align 1
@std.core.mem.allocator.LIBC_ALLOCATOR = weak constant i64 0, comdat, align 8, !dbg !4
@.file.87 = internal constant [18 x i8] c"libc_allocator.c3\00", align 1
@.func.88 = internal constant [10 x i8] c"to_string\00", align 1
@.str.89 = private unnamed_addr constant [15 x i8] c"Libc allocator\00", align 1
@.func.90 = internal constant [10 x i8] c"to_format\00", align 1
@.str.91 = private unnamed_addr constant [15 x i8] c"Libc allocator\00", align 1
@std.core.mem.OUT_OF_MEMORY = linkonce constant %"char[]" { ptr @std.core.mem.OUT_OF_MEMORY.nameof, i64 18 }, comdat, align 8
@std.core.mem.OUT_OF_MEMORY.nameof = internal constant [19 x i8] c"mem::OUT_OF_MEMORY\00", align 1
@.panic_msg.92 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.file.93 = internal constant [22 x i8] c"on_stack_allocator.c3\00", align 1
@.func.94 = internal constant [24 x i8] c"allocation_in_stack_mem\00", align 1
@.panic_msg.95 = internal constant [46 x i8] c"Dereference of null pointer, 'addr' was null.\00", align 1
@.func.96 = internal constant [32 x i8] c"on_stack_allocator_remove_chunk\00", align 1
@.str.97 = private unnamed_addr constant [14 x i8] c"Missing chunk\00", align 1
@.str.98 = private unnamed_addr constant [22 x i8] c"on_stack_allocator.c3\00", align 1
@.str.99 = private unnamed_addr constant [32 x i8] c"on_stack_allocator_remove_chunk\00", align 1
@.panic_msg.100 = internal constant [41 x i8] c"@require \22old_pointer != null\22 violated.\00", align 1
@.panic_msg.101 = internal constant [30 x i8] c"@require \22size > 0\22 violated.\00", align 1
@.panic_msg.102 = internal constant [56 x i8] c"Tried to realloc pointer not belonging to the allocator\00", align 1
@.panic_msg.103 = internal constant [47 x i8] c"Dereference of null pointer, 'chunk' was null.\00", align 1
@std.core.mem.allocator.PAGE_IS_ALIGNED = internal unnamed_addr constant i64 -9223372036854775808, align 8, !dbg !9
@.panic_msg.105 = internal constant [32 x i8] c"@require \22size >= 16\22 violated.\00", align 1
@.file.106 = internal constant [26 x i8] c"backed_arena_allocator.c3\00", align 1
@.func.107 = internal constant [21 x i8] c"new_backed_allocator\00", align 1
@.func.108 = internal constant [8 x i8] c"destroy\00", align 1
@.func.109 = internal constant [5 x i8] c"mark\00", align 1
@.panic_msg.110 = internal constant [43 x i8] c"Dereference of null pointer, '(' was null.\00", align 1
@.func.111 = internal constant [6 x i8] c"reset\00", align 1
@.panic_msg.112 = internal constant [44 x i8] c"Negative value (%d) given for slice length.\00", align 1
@.func.113 = internal constant [11 x i8] c"_free_page\00", align 1
@.func.114 = internal constant [14 x i8] c"_realloc_page\00", align 1
@.panic_msg.115 = internal constant [57 x i8] c"Dereference of null pointer, 'pointer_to_prev' was null.\00", align 1
@.panic_msg.116 = internal constant [29 x i8] c"Realloc of unrelated pointer\00", align 1
@.panic_msg.117 = internal constant [73 x i8] c"Assert \22mem::ptr_is_aligned(page, BackedArenaAllocator.alignof)\22 failed.\00", align 1
@.panic_msg.118 = internal constant [80 x i8] c"Assert \22mem::ptr_is_aligned(&page.data[0], mem::DEFAULT_MEM_ALIGNMENT)\22 failed.\00", align 1
@std.core.mem.allocator.PAGE_IS_ALIGNED.120 = internal unnamed_addr constant i64 -9223372036854775808, align 8, !dbg !13
@.file.121 = internal constant [18 x i8] c"temp_allocator.c3\00", align 1
@.func.122 = internal constant [19 x i8] c"new_temp_allocator\00", align 1
@.panic_msg.123 = internal constant [146 x i8] c"@require \22allocator.type != TempAllocator.typeid\22 violated: 'You may not create a temp allocator with a TempAllocator as the backing allocator.'.\00", align 1
@.func.124 = internal constant [17 x i8] c"derive_allocator\00", align 1
@.panic_msg.125 = internal constant [35 x i8] c"@require \22!self.derived\22 violated.\00", align 1
@.panic_msg.126 = internal constant [115 x i8] c"@require \22min_size > TempAllocator.sizeof + 64\22 violated: 'Min size must meaningfully hold the data + some bytes'.\00", align 1
@.panic_msg.127 = internal constant [64 x i8] c"@require \22mult > 0\22 violated: 'The multiple can never be zero'.\00", align 1
@.panic_msg.128 = internal constant [83 x i8] c"@require \22self.allocated\22 violated: 'Only a top level allocator should be freed.'.\00", align 1
@.panic_msg.129 = internal constant [28 x i8] c"Realloc of non temp pointer\00", align 1
@.panic_msg.130 = internal constant [66 x i8] c"Assert \22mem::ptr_is_aligned(page, TempAllocator.alignof)\22 failed.\00", align 1
@.file.131 = internal constant [19 x i8] c"arena_allocator.c3\00", align 1
@.panic_msg.132 = internal constant [70 x i8] c"@require \22mark <= self.used\22 violated: 'Invalid mark - out of range'.\00", align 1
@.panic_msg.133 = internal constant [47 x i8] c"Pointer originates from a different allocator.\00", align 1
@std.core.mem.INVALID_ALLOC_SIZE = linkonce constant %"char[]" { ptr @std.core.mem.INVALID_ALLOC_SIZE.nameof, i64 23 }, comdat, align 8
@std.core.mem.INVALID_ALLOC_SIZE.nameof = internal constant [24 x i8] c"mem::INVALID_ALLOC_SIZE\00", align 1
@.file.134 = internal constant [17 x i8] c"dynamic_arena.c3\00", align 1
@.panic_msg.135 = internal constant [38 x i8] c"@require \22page_size >= 128\22 violated.\00", align 1
@.panic_msg.136 = internal constant [85 x i8] c"@require \22self.page != null\22 violated: 'tried to free pointer on invalid allocator'.\00", align 1
@.panic_msg.137 = internal constant [64 x i8] c"@require \22size > 0\22 violated: 'Resize doesn't support zeroing'.\00", align 1
@.panic_msg.138 = internal constant [80 x i8] c"@require \22old_pointer != null\22 violated: 'Resize doesn't handle null pointers'.\00", align 1
@.panic_msg.139 = internal constant [88 x i8] c"@require \22self.page != null\22 violated: 'tried to realloc pointer on invalid allocator'.\00", align 1
@.panic_msg.140 = internal constant [54 x i8] c"Dereference of null pointer, 'old_size_ptr' was null.\00", align 1
@.panic_msg.141 = internal constant [33 x i8] c"Assert \22size > old_size\22 failed.\00", align 1
@.panic_msg.142 = internal constant [58 x i8] c"@require \22size > 0\22 violated: 'acquire expects size > 0'.\00", align 1
@.panic_msg.143 = internal constant [57 x i8] c"Dereference of null pointer, 'unused_page_ptr' was null.\00", align 1
@.func.144 = internal constant [11 x i8] c"_alloc_new\00", align 1
@.panic_msg.145 = internal constant [61 x i8] c"Assert \22page_size > size + DynamicArenaChunk.sizeof\22 failed.\00", align 1
@.panic_msg.146 = internal constant [52 x i8] c"Assert \22mem_start + size < mem + page_size\22 failed.\00", align 1
@.panic_msg.147 = internal constant [57 x i8] c"Assert \22start + size == page.memory + page.used\22 failed.\00", align 1
@std.core.mem.allocator.WASM_BLOCK_SIZE = weak local_unnamed_addr constant i64 65536, comdat, align 8, !dbg !16
@std.core.mem.allocator.wasm_memory = weak local_unnamed_addr global %WasmMemory zeroinitializer, comdat, align 8, !dbg !19
@.file.150 = internal constant [15 x i8] c"wasm_memory.c3\00", align 1
@.func.151 = internal constant [15 x i8] c"allocate_block\00", align 1
@std.core.mem.allocator.DEFAULT_SIZE_PREFIX = weak local_unnamed_addr constant i64 8, comdat, align 8, !dbg !26
@std.core.mem.allocator.DEFAULT_SIZE_PREFIX_ALIGNMENT = weak local_unnamed_addr constant i64 8, comdat, align 8, !dbg !29
@std.core.mem.allocator.thread_allocator = weak thread_local local_unnamed_addr global %any { ptr @std.core.mem.allocator.LIBC_ALLOCATOR, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.LibcAllocator" to i64) }, comdat, align 8, !dbg !31
@std.core.mem.allocator.temp_base_allocator = internal unnamed_addr global %any { ptr @std.core.mem.allocator.LIBC_ALLOCATOR, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.LibcAllocator" to i64) }, align 8, !dbg !39
@std.core.mem.allocator.LAZY_TEMP = internal constant i64 0, align 8, !dbg !41
@std.core.mem.allocator.current_temp = weak thread_local local_unnamed_addr global %any { ptr @std.core.mem.allocator.LAZY_TEMP, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.LazyTempAllocator" to i64) }, comdat, align 8, !dbg !44
@std.core.mem.allocator.top_temp = weak thread_local local_unnamed_addr global ptr null, comdat, align 8, !dbg !46
@std.core.mem.allocator.auto_create_temp = weak thread_local local_unnamed_addr global i8 0, comdat, align 1, !dbg !72
@std.core.mem.allocator.temp_allocator_min_size = weak local_unnamed_addr global i64 16384, comdat, align 8, !dbg !74
@std.core.mem.allocator.temp_allocator_buffer_size = weak local_unnamed_addr global i64 1024, comdat, align 8, !dbg !76
@std.core.mem.allocator.temp_allocator_new_mult = weak local_unnamed_addr global i64 4, comdat, align 8, !dbg !78
@std.core.mem.allocator.NULL_ALLOCATOR = weak local_unnamed_addr constant i64 0, comdat, align 8, !dbg !80
@.func.163 = internal constant [10 x i8] c"clone_any\00", align 1
@.panic_msg.164 = internal constant [87 x i8] c"@require \22!top_temp\22 violated: 'This should never be called when temp already exists'.\00", align 1
@.func.165 = internal constant [10 x i8] c"push_pool\00", align 1
@.func.166 = internal constant [32 x i8] c"create_temp_allocator_on_demand\00", align 1
@.str.167 = private unnamed_addr constant [129 x i8] c"Use '@pool_init()' to enable the temp allocator on a new thread. A temp allocator is only implicitly created on the main thread.\00", align 1
@.str.168 = private unnamed_addr constant [17 x i8] c"mem_allocator.c3\00", align 1
@.str.169 = private unnamed_addr constant [32 x i8] c"create_temp_allocator_on_demand\00", align 1
@.func.170 = internal constant [22 x i8] c"create_temp_allocator\00", align 1
@.func.171 = internal constant [24 x i8] c"destroy_temp_allocators\00", align 1
@"$ct.dyn.std.core.mem.allocator.TrackingAllocator.acquire" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.TrackingAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.TrackingAllocator.resize" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.TrackingAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.TrackingAllocator.release" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.TrackingAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.acquire" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.SimpleHeapAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.resize" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.SimpleHeapAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.release" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.SimpleHeapAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.LibcAllocator.to_string" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.LibcAllocator.to_string, ptr @"$sel.to_string", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.to_string" = linkonce_odr constant [10 x i8] c"to_string\00", comdat, align 1
@"$ct.dyn.std.core.mem.allocator.LibcAllocator.to_format" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.LibcAllocator.to_format, ptr @"$sel.to_format", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.to_format" = linkonce_odr constant [10 x i8] c"to_format\00", comdat, align 1
@"$ct.dyn.std.core.mem.allocator.LibcAllocator.acquire" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.LibcAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.LibcAllocator.resize" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.LibcAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.LibcAllocator.release" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.LibcAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.OnStackAllocator.release" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.OnStackAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.OnStackAllocator.resize" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.OnStackAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.OnStackAllocator.acquire" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.OnStackAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.release" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.BackedArenaAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.resize" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.BackedArenaAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.acquire" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.BackedArenaAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.TempAllocator.release" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.TempAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.TempAllocator.resize" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.TempAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.TempAllocator.acquire" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.TempAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.ArenaAllocator.release" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.ArenaAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.ArenaAllocator.acquire" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.ArenaAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.ArenaAllocator.resize" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.ArenaAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.release" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.DynamicArenaAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.resize" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.DynamicArenaAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.acquire" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.DynamicArenaAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.acquire" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.LazyTempAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.resize" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.LazyTempAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.release" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.LazyTempAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.NullAllocator.acquire" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.NullAllocator.acquire, ptr @"$sel.acquire", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.NullAllocator.resize" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.NullAllocator.resize, ptr @"$sel.resize", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.core.mem.allocator.NullAllocator.release" = weak global { ptr, ptr, ptr } { ptr @std.core.mem.allocator.NullAllocator.release, ptr @"$sel.release", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@llvm.global_ctors = appending global [3 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @std.core.mem.allocator.allow_implicit_temp_allocator_on_load_thread, ptr null }, { i32, ptr, ptr } { i32 65535, ptr @.__c3_atexit_std.core.mem.allocator.destroy_temp_allocators_after_exit, ptr null }, { i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_register, ptr null }]

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.TrackingAllocator.init(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !97 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %TrackingAllocator, align 8
  %taddr14 = alloca %any, align 8
  %3 = icmp eq ptr %0, null, !dbg !140
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !140
  br i1 %4, label %panic, label %checkok, !dbg !140

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !141, !DIExpression(), !142)
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !143, !DIExpression(), !144)
  %5 = load ptr, ptr %self, align 8, !dbg !145
  %checknull = icmp eq ptr %5, null, !dbg !145
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !145
  br i1 %6, label %panic1, label %checkok2, !dbg !145

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !145
  %8 = urem i64 %7, 8, !dbg !145
  %9 = icmp ne i64 %8, 0, !dbg !145
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !145
  br i1 %10, label %panic3, label %checkok6, !dbg !145

checkok6:                                         ; preds = %checkok2
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 80, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %allocator, i32 16, i1 false), !dbg !146
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 80, i1 false), !dbg !146
  %11 = load ptr, ptr %self, align 8, !dbg !147
  %ptradd7 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !147
  %12 = load %any, ptr %allocator, align 8, !dbg !148
  br i1 true, label %assert_ok, label %assert_fail, !dbg !147

assert_fail:                                      ; preds = %checkok6
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !147
  call void %13(ptr @.panic_msg.4, i64 69, ptr @.file, i64 21, ptr @.func, i64 4, i32 41) #6, !dbg !147
  unreachable, !dbg !147

assert_ok:                                        ; preds = %checkok6
  br i1 true, label %assert_ok9, label %assert_fail8, !dbg !147

assert_fail8:                                     ; preds = %assert_ok
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !147
  call void %14(ptr @.panic_msg.5, i64 79, ptr @.file, i64 21, ptr @.func, i64 4, i32 41) #6, !dbg !147
  unreachable, !dbg !147

assert_ok9:                                       ; preds = %assert_ok
  %15 = call i8 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.is_initialized"(ptr %ptradd7), !dbg !149
  %16 = trunc i8 %15 to i1, !dbg !149
  %not = xor i1 %16, true, !dbg !149
  br i1 %not, label %assert_ok11, label %assert_fail10, !dbg !149

assert_fail10:                                    ; preds = %assert_ok9
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !147
  call void %17(ptr @.panic_msg.6, i64 74, ptr @.file, i64 21, ptr @.func, i64 4, i32 41) #6, !dbg !147
  unreachable, !dbg !147

assert_ok11:                                      ; preds = %assert_ok9
  br i1 true, label %assert_ok13, label %assert_fail12, !dbg !147

assert_fail12:                                    ; preds = %assert_ok11
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !147
  call void %18(ptr @.panic_msg.7, i64 82, ptr @.file, i64 21, ptr @.func, i64 4, i32 41) #6, !dbg !147
  unreachable, !dbg !147

assert_ok13:                                      ; preds = %assert_ok11
  store %any %12, ptr %taddr14, align 8
  %lo = load i64, ptr %taddr14, align 8
  %ptradd15 = getelementptr inbounds i8, ptr %taddr14, i64 8
  %hi = load ptr, ptr %ptradd15, align 8
  %19 = call ptr @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.init"(ptr %ptradd7, i64 %lo, ptr %hi, i32 16, float 7.500000e-01), !dbg !147
  ret void, !dbg !147

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !142
  call void %20(ptr @.panic_msg, i64 62, ptr @.file, i64 21, ptr @.func, i64 4, i32 38) #6, !dbg !142
  unreachable, !dbg !142

panic1:                                           ; preds = %checkok
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !145
  call void %21(ptr @.panic_msg.2, i64 45, ptr @.file, i64 21, ptr @.func, i64 4, i32 40) #6, !dbg !145
  unreachable, !dbg !145

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %24 = insertvalue %any undef, ptr %taddr4, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd5, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file, i64 21, ptr @.func, i64 4, i32 40, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !145
  unreachable, !dbg !145
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.TrackingAllocator.free(ptr %0) #0 comdat !dbg !150 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !153
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !153
  br i1 %2, label %panic, label %checkok, !dbg !153

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !154, !DIExpression(), !155)
  %3 = load ptr, ptr %self, align 8, !dbg !156
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !156
  call void @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.free"(ptr %ptradd), !dbg !156
  %4 = load ptr, ptr %self, align 8, !dbg !157
  %checknull = icmp eq ptr %4, null, !dbg !157
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !157
  br i1 %5, label %panic1, label %checkok2, !dbg !157

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !157
  %7 = urem i64 %6, 8, !dbg !157
  %8 = icmp ne i64 %7, 0, !dbg !157
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !157
  br i1 %9, label %panic3, label %checkok6, !dbg !157

checkok6:                                         ; preds = %checkok2
  call void @llvm.memset.p0.i64(ptr align 8 %4, i8 0, i64 80, i1 false), !dbg !157
  ret void, !dbg !157

panic:                                            ; preds = %entry
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !155
  call void %10(ptr @.panic_msg, i64 62, ptr @.file, i64 21, ptr @.func.8, i64 4, i32 47) #6, !dbg !155
  unreachable, !dbg !155

panic1:                                           ; preds = %checkok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !157
  call void %11(ptr @.panic_msg.2, i64 45, ptr @.file, i64 21, ptr @.func.8, i64 4, i32 50) #6, !dbg !157
  unreachable, !dbg !157

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %12 = insertvalue %any undef, ptr %taddr, 0
  %13 = insertvalue %any %12, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %14 = insertvalue %any undef, ptr %taddr4, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %13, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %15, ptr %ptradd5, align 16
  %16 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %16, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file, i64 21, ptr @.func.8, i64 4, i32 50, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !157
  unreachable, !dbg !157
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.TrackingAllocator.allocated(ptr %0) #0 comdat !dbg !158 {
entry:
  %self = alloca ptr, align 8
  %state = alloca ptr, align 8
  %allocated = alloca i64, align 8
  %result = alloca %"Allocation[]", align 8
  %.anon = alloca i64, align 8
  %allocation = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !161
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !161
  br i1 %2, label %panic, label %checkok, !dbg !161

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !162, !DIExpression(), !163)
    #dbg_declare(ptr %state, !164, !DIExpression(), !168)
  %3 = call ptr @std.core.mem.allocator.push_pool() #7, !dbg !169
  store ptr %3, ptr %state, align 8, !dbg !169
    #dbg_declare(ptr %allocated, !170, !DIExpression(), !172)
  store i64 0, ptr %allocated, align 8, !dbg !173
  %4 = load ptr, ptr %self, align 8, !dbg !174
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !174
  %5 = call { ptr, i64 } @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.tvalues"(ptr %ptradd), !dbg !174
  store { ptr, i64 } %5, ptr %result, align 8
  %6 = load %"Allocation[]", ptr %result, align 8
  %7 = extractvalue %"Allocation[]" %6, 1, !dbg !174
    #dbg_declare(ptr %.anon, !176, !DIExpression(), !174)
  store i64 0, ptr %.anon, align 8, !dbg !174
  br label %loop.cond, !dbg !174

loop.cond:                                        ; preds = %checkok4, %checkok
  %8 = load i64, ptr %.anon, align 8, !dbg !174
  %lt = icmp ult i64 %8, %7, !dbg !174
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !174

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %allocation, !177, !DIExpression(), !180)
  %9 = extractvalue %"Allocation[]" %6, 1, !dbg !181
  %10 = extractvalue %"Allocation[]" %6, 0, !dbg !181
  %11 = load i64, ptr %.anon, align 8, !dbg !181
  %ge = icmp uge i64 %11, %9, !dbg !181
  %12 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !181
  br i1 %12, label %panic1, label %checkok4, !dbg !181

checkok4:                                         ; preds = %loop.body
  %ptroffset = getelementptr inbounds [144 x i8], ptr %10, i64 %11, !dbg !181
  store ptr %ptroffset, ptr %allocation, align 8, !dbg !181
  %13 = load i64, ptr %allocated, align 8, !dbg !182
  %14 = load ptr, ptr %allocation, align 8, !dbg !183
  %ptradd5 = getelementptr inbounds i8, ptr %14, i64 8, !dbg !183
  %15 = load i64, ptr %ptradd5, align 8, !dbg !183
  %add = add i64 %13, %15, !dbg !182
  store i64 %add, ptr %allocated, align 8, !dbg !182
  %16 = load i64, ptr %.anon, align 8, !dbg !174
  %addnuw = add nuw i64 %16, 1, !dbg !174
  store i64 %addnuw, ptr %.anon, align 8, !dbg !174
  br label %loop.cond, !dbg !174

loop.exit:                                        ; preds = %loop.cond
  %17 = load i64, ptr %allocated, align 8, !dbg !184
  %18 = load ptr, ptr %state, align 8, !dbg !185
  call void @std.core.mem.allocator.pop_pool(ptr %18) #7, !dbg !187
  ret i64 %17, !dbg !187

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !163
  call void %19(ptr @.panic_msg, i64 62, ptr @.file, i64 21, ptr @.func.9, i64 9, i32 56) #6, !dbg !163
  unreachable, !dbg !163

panic1:                                           ; preds = %loop.body
  store i64 %9, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr2, align 8
  %22 = insertvalue %any undef, ptr %taddr2, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %21, ptr %varargslots, align 16
  %ptradd3 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd3, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.10, i64 59, ptr @.file, i64 21, ptr @.func.9, i64 9, i32 59, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !181
  unreachable, !dbg !181
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.TrackingAllocator.total_allocated(ptr %0) #0 comdat !dbg !188 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !189
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !189
  br i1 %2, label %panic, label %checkok, !dbg !189

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !190, !DIExpression(), !191)
  %3 = load ptr, ptr %self, align 8, !dbg !189
  %ptradd = getelementptr inbounds i8, ptr %3, i64 64, !dbg !189
  %4 = load i64, ptr %ptradd, align 8, !dbg !189
  ret i64 %4, !dbg !189

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !191
  call void %5(ptr @.panic_msg, i64 62, ptr @.file, i64 21, ptr @.func.11, i64 15, i32 66) #6, !dbg !191
  unreachable, !dbg !191
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.TrackingAllocator.total_allocation_count(ptr %0) #0 comdat !dbg !192 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !193
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !193
  br i1 %2, label %panic, label %checkok, !dbg !193

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !194, !DIExpression(), !195)
  %3 = load ptr, ptr %self, align 8, !dbg !193
  %ptradd = getelementptr inbounds i8, ptr %3, i64 72, !dbg !193
  %4 = load i64, ptr %ptradd, align 8, !dbg !193
  ret i64 %4, !dbg !193

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !195
  call void %5(ptr @.panic_msg, i64 62, ptr @.file, i64 21, ptr @.func.12, i64 22, i32 71) #6, !dbg !195
  unreachable, !dbg !195
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.mem.allocator.TrackingAllocator.allocations_tlist(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !196 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %result = alloca %"Allocation[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !203
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !203
  br i1 %4, label %panic, label %checkok, !dbg !203

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !204, !DIExpression(), !205)
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !206, !DIExpression(), !207)
  %5 = load ptr, ptr %self, align 8, !dbg !208
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !208
  %6 = call { ptr, i64 } @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.tvalues"(ptr %ptradd1), !dbg !208
  store { ptr, i64 } %6, ptr %result, align 8
  %7 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %7

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !205
  call void %8(ptr @.panic_msg, i64 62, ptr @.file, i64 21, ptr @.func.13, i64 17, i32 73) #6, !dbg !205
  unreachable, !dbg !205
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.TrackingAllocator.allocation_count(ptr %0) #0 comdat !dbg !209 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !210
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !210
  br i1 %2, label %panic, label %checkok, !dbg !210

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !211, !DIExpression(), !212)
  %3 = load ptr, ptr %self, align 8, !dbg !210
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !210
  %ptradd1 = getelementptr inbounds i8, ptr %ptradd, i64 32, !dbg !210
  %4 = load i32, ptr %ptradd1, align 8, !dbg !210
  %zext = zext i32 %4 to i64, !dbg !210
  ret i64 %zext, !dbg !210

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !212
  call void %5(ptr @.panic_msg, i64 62, ptr @.file, i64 21, ptr @.func.14, i64 16, i32 81) #6, !dbg !212
  unreachable, !dbg !212
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.TrackingAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !213 {
entry:
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %bt = alloca [16 x ptr], align 16
  %result = alloca %"void*[]", align 8
  %literal = alloca %Allocation, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !219
  %5 = icmp eq ptr %1, null, !dbg !219
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !219
  br i1 %6, label %panic, label %checkok, !dbg !219

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !220, !DIExpression(), !221)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !222, !DIExpression(), !223)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !224, !DIExpression(), !225)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !226, !DIExpression(), !227)
    #dbg_declare(ptr %data, !228, !DIExpression(), !229)
  %7 = load ptr, ptr %self, align 8, !dbg !230
  %8 = load i64, ptr %size, align 8, !dbg !231
  %9 = load i32, ptr %init_type, align 4, !dbg !232
  %10 = load i64, ptr %alignment, align 8, !dbg !233
  %i2nb = icmp eq i64 %10, 0, !dbg !234
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !234

or.rhs:                                           ; preds = %checkok
  store i64 %10, ptr %x, align 8
  %11 = load i64, ptr %x, align 8, !dbg !235
  %neq = icmp ne i64 0, %11, !dbg !235
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !235

and.rhs:                                          ; preds = %or.rhs
  %12 = load i64, ptr %x, align 8, !dbg !239
  %13 = load i64, ptr %x, align 8, !dbg !240
  %sub = sub i64 %13, 1, !dbg !240
  %and = and i64 %12, %sub, !dbg !239
  %eq = icmp eq i64 %and, 0, !dbg !239
  br label %and.phi, !dbg !239

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !239
  br label %or.phi, !dbg !239

or.phi:                                           ; preds = %and.phi, %checkok
  %val1 = phi i1 [ true, %checkok ], [ %val, %and.phi ], !dbg !239
  br i1 %val1, label %assert_ok, label %assert_fail, !dbg !239

assert_fail:                                      ; preds = %or.phi
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !230
  call void %14(ptr @.panic_msg.16, i64 65, ptr @.file, i64 21, ptr @.func.15, i64 7, i32 85) #6, !dbg !230
  unreachable, !dbg !230

assert_ok:                                        ; preds = %or.phi
  %le = icmp ule i64 %10, 268435456, !dbg !230
  br i1 %le, label %assert_ok3, label %assert_fail2, !dbg !230

assert_fail2:                                     ; preds = %assert_ok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !230
  call void %15(ptr @.panic_msg.17, i64 80, ptr @.file, i64 21, ptr @.func.15, i64 7, i32 85) #6, !dbg !230
  unreachable, !dbg !230

assert_ok3:                                       ; preds = %assert_ok
  %lt = icmp ult i64 0, %8, !dbg !230
  br i1 %lt, label %assert_ok5, label %assert_fail4, !dbg !230

assert_fail4:                                     ; preds = %assert_ok3
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !230
  call void %16(ptr @.panic_msg.18, i64 59, ptr @.file, i64 21, ptr @.func.15, i64 7, i32 85) #6, !dbg !230
  unreachable, !dbg !230

assert_ok5:                                       ; preds = %assert_ok3
  %ptradd = getelementptr inbounds i8, ptr %7, i64 8, !dbg !230
  %17 = load i64, ptr %ptradd, align 8, !dbg !230
  %18 = inttoptr i64 %17 to ptr, !dbg !230
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !219
  %19 = icmp eq ptr %18, %type, !dbg !219
  br i1 %19, label %cache_hit, label %cache_miss, !dbg !219

cache_miss:                                       ; preds = %assert_ok5
  %ptradd6 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !219
  %20 = load ptr, ptr %ptradd6, align 8, !dbg !219
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.acquire"), !dbg !219
  store ptr %21, ptr %.inlinecache, align 8, !dbg !219
  store ptr %18, ptr %.cachedtype, align 8, !dbg !219
  br label %22, !dbg !219

cache_hit:                                        ; preds = %assert_ok5
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !219
  br label %22, !dbg !219

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ], !dbg !219
  %23 = icmp eq ptr %fn_phi, null, !dbg !219
  br i1 %23, label %missing_function, label %match, !dbg !219

missing_function:                                 ; preds = %22
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !219
  call void %24(ptr @.panic_msg.19, i64 44, ptr @.file, i64 21, ptr @.func.15, i64 7, i32 85) #6, !dbg !219
  unreachable, !dbg !219

match:                                            ; preds = %22
  %25 = load ptr, ptr %7, align 8
  %26 = call i64 %fn_phi(ptr %retparam, ptr %25, i64 %8, i32 %9, i64 %10), !dbg !230
  %not_err = icmp eq i64 %26, 0, !dbg !230
  %27 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !230
  br i1 %27, label %after_check, label %assign_optional, !dbg !230

assign_optional:                                  ; preds = %match
  store i64 %26, ptr %error_var, align 8, !dbg !230
  br label %guard_block, !dbg !230

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !230

guard_block:                                      ; preds = %assign_optional
  %28 = load i64, ptr %error_var, align 8, !dbg !230
  ret i64 %28, !dbg !230

noerr_block:                                      ; preds = %after_check
  %29 = load ptr, ptr %retparam, align 8, !dbg !230
  store ptr %29, ptr %data, align 8, !dbg !230
  %30 = load ptr, ptr %self, align 8, !dbg !241
  %ptradd7 = getelementptr inbounds i8, ptr %30, i64 72, !dbg !241
  %31 = load i64, ptr %ptradd7, align 8, !dbg !241
  %add = add i64 %31, 1, !dbg !241
  store i64 %add, ptr %ptradd7, align 8, !dbg !241
    #dbg_declare(ptr %bt, !242, !DIExpression(), !243)
  call void @llvm.memset.p0.i64(ptr align 16 %bt, i8 0, i64 128, i1 false), !dbg !243
  %32 = insertvalue %"void*[]" undef, ptr %bt, 0, !dbg !244
  %33 = insertvalue %"void*[]" %32, i64 16, 1, !dbg !244
  %34 = call { ptr, i64 } @std.os.backtrace.capture_current(ptr %bt, i64 16), !dbg !245
  store { ptr, i64 } %34, ptr %result, align 8
  %35 = load ptr, ptr %self, align 8, !dbg !246
  %ptradd8 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !246
  %36 = load ptr, ptr %data, align 8, !dbg !247
  %ptrxi = ptrtoint ptr %36 to i64, !dbg !247
  %37 = load ptr, ptr %data, align 8, !dbg !248
  store ptr %37, ptr %literal, align 8, !dbg !248
  %ptradd9 = getelementptr inbounds i8, ptr %literal, i64 8, !dbg !248
  %38 = load i64, ptr %size, align 8, !dbg !249
  store i64 %38, ptr %ptradd9, align 8, !dbg !249
  %ptradd10 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !249
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd10, ptr align 16 %bt, i32 128, i1 false), !dbg !250
  %39 = call i8 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.set"(ptr %ptradd8, i64 %ptrxi, ptr byval(%Allocation) align 8 %literal), !dbg !246
  %40 = load ptr, ptr %self, align 8, !dbg !251
  %ptradd11 = getelementptr inbounds i8, ptr %40, i64 64, !dbg !251
  %41 = load i64, ptr %ptradd11, align 8, !dbg !251
  %42 = load i64, ptr %size, align 8, !dbg !252
  %add12 = add i64 %41, %42, !dbg !251
  store i64 %add12, ptr %ptradd11, align 8, !dbg !251
  %43 = load ptr, ptr %data, align 8, !dbg !253
  store ptr %43, ptr %0, align 8, !dbg !253
  ret i64 0, !dbg !253

panic:                                            ; preds = %entry
  %44 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !221
  call void %44(ptr @.panic_msg, i64 62, ptr @.file, i64 21, ptr @.func.15, i64 7, i32 83) #6, !dbg !221
  unreachable, !dbg !221
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.TrackingAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !254 {
entry:
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %bt = alloca [16 x ptr], align 16
  %result = alloca %"void*[]", align 8
  %literal = alloca %Allocation, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !257
  %5 = icmp eq ptr %1, null, !dbg !257
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !257
  br i1 %6, label %panic, label %checkok, !dbg !257

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !258, !DIExpression(), !259)
  store ptr %2, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !260, !DIExpression(), !261)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !262, !DIExpression(), !263)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !264, !DIExpression(), !265)
    #dbg_declare(ptr %data, !266, !DIExpression(), !267)
  %7 = load ptr, ptr %self, align 8, !dbg !268
  %8 = load ptr, ptr %old_pointer, align 8, !dbg !269
  %9 = load i64, ptr %size, align 8, !dbg !270
  %10 = load i64, ptr %alignment, align 8, !dbg !271
  %i2nb = icmp eq i64 %10, 0, !dbg !272
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !272

or.rhs:                                           ; preds = %checkok
  store i64 %10, ptr %x, align 8
  %11 = load i64, ptr %x, align 8, !dbg !273
  %neq = icmp ne i64 0, %11, !dbg !273
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !273

and.rhs:                                          ; preds = %or.rhs
  %12 = load i64, ptr %x, align 8, !dbg !276
  %13 = load i64, ptr %x, align 8, !dbg !277
  %sub = sub i64 %13, 1, !dbg !277
  %and = and i64 %12, %sub, !dbg !276
  %eq = icmp eq i64 %and, 0, !dbg !276
  br label %and.phi, !dbg !276

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !276
  br label %or.phi, !dbg !276

or.phi:                                           ; preds = %and.phi, %checkok
  %val1 = phi i1 [ true, %checkok ], [ %val, %and.phi ], !dbg !276
  br i1 %val1, label %assert_ok, label %assert_fail, !dbg !276

assert_fail:                                      ; preds = %or.phi
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !268
  call void %14(ptr @.panic_msg.16, i64 65, ptr @.file, i64 21, ptr @.func.20, i64 6, i32 96) #6, !dbg !268
  unreachable, !dbg !268

assert_ok:                                        ; preds = %or.phi
  %le = icmp ule i64 %10, 268435456, !dbg !268
  br i1 %le, label %assert_ok3, label %assert_fail2, !dbg !268

assert_fail2:                                     ; preds = %assert_ok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !268
  call void %15(ptr @.panic_msg.17, i64 80, ptr @.file, i64 21, ptr @.func.20, i64 6, i32 96) #6, !dbg !268
  unreachable, !dbg !268

assert_ok3:                                       ; preds = %assert_ok
  %neq4 = icmp ne ptr %8, null, !dbg !268
  br i1 %neq4, label %assert_ok6, label %assert_fail5, !dbg !268

assert_fail5:                                     ; preds = %assert_ok3
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !268
  call void %16(ptr @.panic_msg.21, i64 32, ptr @.file, i64 21, ptr @.func.20, i64 6, i32 96) #6, !dbg !268
  unreachable, !dbg !268

assert_ok6:                                       ; preds = %assert_ok3
  %lt = icmp ult i64 0, %9, !dbg !268
  br i1 %lt, label %assert_ok8, label %assert_fail7, !dbg !268

assert_fail7:                                     ; preds = %assert_ok6
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !268
  call void %17(ptr @.panic_msg.22, i64 33, ptr @.file, i64 21, ptr @.func.20, i64 6, i32 96) #6, !dbg !268
  unreachable, !dbg !268

assert_ok8:                                       ; preds = %assert_ok6
  %ptradd = getelementptr inbounds i8, ptr %7, i64 8, !dbg !268
  %18 = load i64, ptr %ptradd, align 8, !dbg !268
  %19 = inttoptr i64 %18 to ptr, !dbg !268
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !257
  %20 = icmp eq ptr %19, %type, !dbg !257
  br i1 %20, label %cache_hit, label %cache_miss, !dbg !257

cache_miss:                                       ; preds = %assert_ok8
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !257
  %21 = load ptr, ptr %ptradd9, align 8, !dbg !257
  %22 = call ptr @.dyn_search(ptr %21, ptr @"$sel.resize"), !dbg !257
  store ptr %22, ptr %.inlinecache, align 8, !dbg !257
  store ptr %19, ptr %.cachedtype, align 8, !dbg !257
  br label %23, !dbg !257

cache_hit:                                        ; preds = %assert_ok8
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !257
  br label %23, !dbg !257

23:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %22, %cache_miss ], !dbg !257
  %24 = icmp eq ptr %fn_phi, null, !dbg !257
  br i1 %24, label %missing_function, label %match, !dbg !257

missing_function:                                 ; preds = %23
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !257
  call void %25(ptr @.panic_msg.23, i64 43, ptr @.file, i64 21, ptr @.func.20, i64 6, i32 96) #6, !dbg !257
  unreachable, !dbg !257

match:                                            ; preds = %23
  %26 = load ptr, ptr %7, align 8
  %27 = call i64 %fn_phi(ptr %retparam, ptr %26, ptr %8, i64 %9, i64 %10), !dbg !268
  %not_err = icmp eq i64 %27, 0, !dbg !268
  %28 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !268
  br i1 %28, label %after_check, label %assign_optional, !dbg !268

assign_optional:                                  ; preds = %match
  store i64 %27, ptr %error_var, align 8, !dbg !268
  br label %guard_block, !dbg !268

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !268

guard_block:                                      ; preds = %assign_optional
  %29 = load i64, ptr %error_var, align 8, !dbg !268
  ret i64 %29, !dbg !268

noerr_block:                                      ; preds = %after_check
  %30 = load ptr, ptr %retparam, align 8, !dbg !268
  store ptr %30, ptr %data, align 8, !dbg !268
  %31 = load ptr, ptr %self, align 8, !dbg !278
  %ptradd10 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !278
  %32 = load ptr, ptr %old_pointer, align 8, !dbg !279
  %ptrxi = ptrtoint ptr %32 to i64, !dbg !279
  %33 = call i64 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.remove"(ptr %ptradd10, i64 %ptrxi), !dbg !278
    #dbg_declare(ptr %bt, !280, !DIExpression(), !281)
  call void @llvm.memset.p0.i64(ptr align 16 %bt, i8 0, i64 128, i1 false), !dbg !281
  %34 = insertvalue %"void*[]" undef, ptr %bt, 0, !dbg !282
  %35 = insertvalue %"void*[]" %34, i64 16, 1, !dbg !282
  %36 = call { ptr, i64 } @std.os.backtrace.capture_current(ptr %bt, i64 16), !dbg !283
  store { ptr, i64 } %36, ptr %result, align 8
  %37 = load ptr, ptr %self, align 8, !dbg !284
  %ptradd13 = getelementptr inbounds i8, ptr %37, i64 16, !dbg !284
  %38 = load ptr, ptr %data, align 8, !dbg !285
  %ptrxi14 = ptrtoint ptr %38 to i64, !dbg !285
  %39 = load ptr, ptr %data, align 8, !dbg !286
  store ptr %39, ptr %literal, align 8, !dbg !286
  %ptradd15 = getelementptr inbounds i8, ptr %literal, i64 8, !dbg !286
  %40 = load i64, ptr %size, align 8, !dbg !287
  store i64 %40, ptr %ptradd15, align 8, !dbg !287
  %ptradd16 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !287
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd16, ptr align 16 %bt, i32 128, i1 false), !dbg !288
  %41 = call i8 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.set"(ptr %ptradd13, i64 %ptrxi14, ptr byval(%Allocation) align 8 %literal), !dbg !284
  %42 = load ptr, ptr %self, align 8, !dbg !289
  %ptradd17 = getelementptr inbounds i8, ptr %42, i64 64, !dbg !289
  %43 = load i64, ptr %ptradd17, align 8, !dbg !289
  %44 = load i64, ptr %size, align 8, !dbg !290
  %add = add i64 %43, %44, !dbg !289
  store i64 %add, ptr %ptradd17, align 8, !dbg !289
  %45 = load ptr, ptr %self, align 8, !dbg !291
  %ptradd18 = getelementptr inbounds i8, ptr %45, i64 72, !dbg !291
  %46 = load i64, ptr %ptradd18, align 8, !dbg !291
  %add19 = add i64 %46, 1, !dbg !291
  store i64 %add19, ptr %ptradd18, align 8, !dbg !291
  %47 = load ptr, ptr %data, align 8, !dbg !292
  store ptr %47, ptr %0, align 8, !dbg !292
  ret i64 0, !dbg !292

panic:                                            ; preds = %entry
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !259
  call void %48(ptr @.panic_msg, i64 62, ptr @.file, i64 21, ptr @.func.20, i64 6, i32 94) #6, !dbg !259
  unreachable, !dbg !259
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.TrackingAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !293 {
entry:
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %is_aligned = alloca i8, align 1
  %temp_err = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !296
  %3 = icmp eq ptr %0, null, !dbg !296
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !296
  br i1 %4, label %panic, label %checkok, !dbg !296

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !297, !DIExpression(), !298)
  store ptr %1, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !299, !DIExpression(), !300)
  store i8 %2, ptr %is_aligned, align 1
    #dbg_declare(ptr %is_aligned, !301, !DIExpression(), !302)
  br label %testblock

testblock:                                        ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !303
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !303
  %6 = load ptr, ptr %old_pointer, align 8, !dbg !304
  %ptrxi = ptrtoint ptr %6 to i64, !dbg !304
  %7 = call i64 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.remove"(ptr %ptradd, i64 %ptrxi), !dbg !303
  %not_err = icmp eq i64 %7, 0, !dbg !303
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !303
  br i1 %8, label %after_check, label %assign_optional, !dbg !303

assign_optional:                                  ; preds = %testblock
  store i64 %7, ptr %temp_err, align 8, !dbg !303
  br label %end_block, !dbg !303

after_check:                                      ; preds = %testblock
  store i64 0, ptr %temp_err, align 8, !dbg !303
  br label %end_block, !dbg !303

end_block:                                        ; preds = %after_check, %assign_optional
  %9 = load i64, ptr %temp_err, align 8, !dbg !303
  %i2b = icmp ne i64 %9, 0, !dbg !303
  br i1 %i2b, label %if.then, label %if.exit, !dbg !303

if.then:                                          ; preds = %end_block
  store %"char[]" { ptr @.str, i64 62 }, ptr %string, align 8
  %10 = insertvalue %any undef, ptr %old_pointer, 0, !dbg !305
  %11 = insertvalue %any %10, i64 ptrtoint (ptr @"$ct.p$void" to i64), 1, !dbg !305
  store %any %11, ptr %varargslots, align 16, !dbg !305
  %12 = insertvalue %"any[]" undef, ptr %varargslots, 0, !dbg !305
  %"$$temp" = insertvalue %"any[]" %12, i64 1, 1, !dbg !305
  %lo = load ptr, ptr %string, align 8, !dbg !305
  %ptradd1 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !305
  %hi = load i64, ptr %ptradd1, align 8, !dbg !305
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.25, i64 21, ptr @.str.26, i64 25, i32 110, ptr byval(%"any[]") align 8 %indirectarg), !dbg !310
  unreachable, !dbg !311

if.exit:                                          ; preds = %end_block
  %13 = load ptr, ptr %self, align 8, !dbg !312
  %14 = load ptr, ptr %old_pointer, align 8, !dbg !313
  %15 = load i8, ptr %is_aligned, align 1, !dbg !314
  %16 = trunc i8 %15 to i1, !dbg !314
  %neq = icmp ne ptr %14, null, !dbg !312
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !312

assert_fail:                                      ; preds = %if.exit
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !312
  call void %17(ptr @.panic_msg.27, i64 75, ptr @.file, i64 21, ptr @.func.24, i64 7, i32 112) #6, !dbg !312
  unreachable, !dbg !312

assert_ok:                                        ; preds = %if.exit
  %ptradd2 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !312
  %18 = load i64, ptr %ptradd2, align 8, !dbg !312
  %19 = inttoptr i64 %18 to ptr, !dbg !312
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !296
  %20 = icmp eq ptr %19, %type, !dbg !296
  br i1 %20, label %cache_hit, label %cache_miss, !dbg !296

cache_miss:                                       ; preds = %assert_ok
  %ptradd3 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !296
  %21 = load ptr, ptr %ptradd3, align 8, !dbg !296
  %22 = call ptr @.dyn_search(ptr %21, ptr @"$sel.release"), !dbg !296
  store ptr %22, ptr %.inlinecache, align 8, !dbg !296
  store ptr %19, ptr %.cachedtype, align 8, !dbg !296
  br label %23, !dbg !296

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !296
  br label %23, !dbg !296

23:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %22, %cache_miss ], !dbg !296
  %24 = icmp eq ptr %fn_phi, null, !dbg !296
  br i1 %24, label %missing_function, label %match, !dbg !296

missing_function:                                 ; preds = %23
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !296
  call void %25(ptr @.panic_msg.28, i64 44, ptr @.file, i64 21, ptr @.func.24, i64 7, i32 112) #6, !dbg !296
  unreachable, !dbg !296

match:                                            ; preds = %23
  %26 = load ptr, ptr %13, align 8, !dbg !296
  %27 = zext i1 %16 to i8, !dbg !296
  call void %fn_phi(ptr %26, ptr %14, i8 zeroext %27), !dbg !296
  ret void, !dbg !296

panic:                                            ; preds = %entry
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !298
  call void %28(ptr @.panic_msg, i64 62, ptr @.file, i64 21, ptr @.func.24, i64 7, i32 106) #6, !dbg !298
  unreachable, !dbg !298
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.TrackingAllocator.clear(ptr %0) #0 comdat !dbg !315 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !316
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !316
  br i1 %2, label %panic, label %checkok, !dbg !316

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !317, !DIExpression(), !318)
  %3 = load ptr, ptr %self, align 8, !dbg !319
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !319
  call void @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.clear"(ptr %ptradd), !dbg !319
  ret void, !dbg !319

panic:                                            ; preds = %entry
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !318
  call void %4(ptr @.panic_msg, i64 62, ptr @.file, i64 21, ptr @.func.29, i64 5, i32 115) #6, !dbg !318
  unreachable, !dbg !318
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.core.mem.allocator.TrackingAllocator.has_leaks(ptr %0) #0 comdat !dbg !320 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !323
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !323
  br i1 %2, label %panic, label %checkok, !dbg !323

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !324, !DIExpression(), !325)
  %3 = load ptr, ptr %self, align 8, !dbg !326
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !326
  %4 = call i64 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.len"(ptr %ptradd) #7, !dbg !326
  %lt = icmp ult i64 0, %4, !dbg !326
  %5 = zext i1 %lt to i8, !dbg !326
  ret i8 %5, !dbg !326

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !325
  call void %6(ptr @.panic_msg, i64 62, ptr @.file, i64 21, ptr @.func.30, i64 9, i32 120) #6, !dbg !325
  unreachable, !dbg !325
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.TrackingAllocator.print_report(ptr %0) #0 comdat !dbg !327 {
entry:
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca %any, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !328
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !328
  br i1 %2, label %panic, label %checkok, !dbg !328

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !329, !DIExpression(), !330)
  %3 = call ptr @std.io.stdout(), !dbg !331
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !331
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.io.File" to i64), 1, !dbg !331
  %6 = load ptr, ptr %self, align 8, !dbg !331
  store %any %5, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd, align 8
  %7 = call i64 @std.core.mem.allocator.TrackingAllocator.fprint_report(ptr %6, i64 %lo, ptr %hi), !dbg !328
  %not_err = icmp eq i64 %7, 0, !dbg !328
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !328
  br i1 %8, label %after_check, label %assign_optional, !dbg !328

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !328
  br label %panic_block, !dbg !328

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !328

panic_block:                                      ; preds = %assign_optional
  %9 = insertvalue %any undef, ptr %error_var, 0, !dbg !328
  %10 = insertvalue %any %9, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !328
  store %any %10, ptr %varargslots, align 16
  %11 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %11, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 36, ptr @.file, i64 21, ptr @.func.31, i64 12, i32 125, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !328
  unreachable, !dbg !328

noerr_block:                                      ; preds = %after_check
  ret void, !dbg !328

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !330
  call void %12(ptr @.panic_msg, i64 62, ptr @.file, i64 21, ptr @.func.31, i64 12, i32 125) #6, !dbg !330
  unreachable, !dbg !330
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.TrackingAllocator.fprint_report(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !332 {
entry:
  %self = alloca ptr, align 8
  %out = alloca %any, align 8
  %state = alloca ptr, align 8
  %total = alloca i64, align 8
  %entries = alloca i64, align 8
  %leaks = alloca i8, align 1
  %allocs = alloca %"Allocation[]", align 8
  %result = alloca %"Allocation[]", align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %out10 = alloca %any, align 8
  %x = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %error_var11 = alloca i64, align 8
  %out12 = alloca %any, align 8
  %x13 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %error_var18 = alloca i64, align 8
  %.inlinecache20 = alloca ptr, align 8
  %.cachedtype21 = alloca ptr, align 8
  %.inlinecache36 = alloca ptr, align 8
  %.cachedtype37 = alloca ptr, align 8
  %error_var46 = alloca i64, align 8
  %.inlinecache48 = alloca ptr, align 8
  %.cachedtype49 = alloca ptr, align 8
  %error_var65 = alloca i64, align 8
  %out66 = alloca %any, align 8
  %x67 = alloca %"char[]", align 8
  %len68 = alloca i64, align 8
  %error_var69 = alloca i64, align 8
  %out70 = alloca %any, align 8
  %x71 = alloca %"char[]", align 8
  %.inlinecache74 = alloca ptr, align 8
  %.cachedtype75 = alloca ptr, align 8
  %retparam84 = alloca i64, align 8
  %error_var93 = alloca i64, align 8
  %.inlinecache95 = alloca ptr, align 8
  %.cachedtype96 = alloca ptr, align 8
  %.inlinecache111 = alloca ptr, align 8
  %.cachedtype112 = alloca ptr, align 8
  %error_var121 = alloca i64, align 8
  %.inlinecache123 = alloca ptr, align 8
  %.cachedtype124 = alloca ptr, align 8
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %allocation = alloca ptr, align 8
  %taddr146 = alloca i64, align 8
  %taddr147 = alloca i64, align 8
  %varargslots148 = alloca [2 x %any], align 16
  %indirectarg151 = alloca %"any[]", align 8
  %error_var156 = alloca i64, align 8
  %varargslots157 = alloca [2 x %any], align 16
  %retparam161 = alloca i64, align 8
  %indirectarg165 = alloca %"any[]", align 8
  %error_var171 = alloca i64, align 8
  %out172 = alloca %any, align 8
  %x173 = alloca %"char[]", align 8
  %len174 = alloca i64, align 8
  %error_var175 = alloca i64, align 8
  %out176 = alloca %any, align 8
  %x177 = alloca %"char[]", align 8
  %.inlinecache180 = alloca ptr, align 8
  %.cachedtype181 = alloca ptr, align 8
  %retparam190 = alloca i64, align 8
  %error_var199 = alloca i64, align 8
  %.inlinecache201 = alloca ptr, align 8
  %.cachedtype202 = alloca ptr, align 8
  %.inlinecache217 = alloca ptr, align 8
  %.cachedtype218 = alloca ptr, align 8
  %error_var227 = alloca i64, align 8
  %.inlinecache229 = alloca ptr, align 8
  %.cachedtype230 = alloca ptr, align 8
  %error_var248 = alloca i64, align 8
  %out249 = alloca %any, align 8
  %x250 = alloca %"char[]", align 8
  %len251 = alloca i64, align 8
  %error_var252 = alloca i64, align 8
  %out253 = alloca %any, align 8
  %x254 = alloca %"char[]", align 8
  %.inlinecache257 = alloca ptr, align 8
  %.cachedtype258 = alloca ptr, align 8
  %retparam267 = alloca i64, align 8
  %error_var276 = alloca i64, align 8
  %.inlinecache278 = alloca ptr, align 8
  %.cachedtype279 = alloca ptr, align 8
  %.inlinecache294 = alloca ptr, align 8
  %.cachedtype295 = alloca ptr, align 8
  %error_var304 = alloca i64, align 8
  %.inlinecache306 = alloca ptr, align 8
  %.cachedtype307 = alloca ptr, align 8
  %error_var325 = alloca i64, align 8
  %out326 = alloca %any, align 8
  %x327 = alloca %"char[]", align 8
  %len328 = alloca i64, align 8
  %error_var329 = alloca i64, align 8
  %out330 = alloca %any, align 8
  %x331 = alloca %"char[]", align 8
  %.inlinecache334 = alloca ptr, align 8
  %.cachedtype335 = alloca ptr, align 8
  %retparam344 = alloca i64, align 8
  %error_var353 = alloca i64, align 8
  %.inlinecache355 = alloca ptr, align 8
  %.cachedtype356 = alloca ptr, align 8
  %.inlinecache371 = alloca ptr, align 8
  %.cachedtype372 = alloca ptr, align 8
  %error_var381 = alloca i64, align 8
  %.inlinecache383 = alloca ptr, align 8
  %.cachedtype384 = alloca ptr, align 8
  %.anon403 = alloca i64, align 8
  %i407 = alloca i64, align 8
  %allocation408 = alloca ptr, align 8
  %taddr412 = alloca i64, align 8
  %taddr413 = alloca i64, align 8
  %varargslots414 = alloca [2 x %any], align 16
  %indirectarg417 = alloca %"any[]", align 8
  %backtraces = alloca %List, align 8
  %trace = alloca %Backtrace, align 8
  %self427 = alloca ptr, align 8
  %self.f = alloca i64, align 8
  %retparam430 = alloca %List, align 8
  %sretparam = alloca %Backtrace, align 8
  %error_var443 = alloca i64, align 8
  %varargslots444 = alloca [4 x %any], align 16
  %taddr451 = alloca %"char[]", align 8
  %taddr460 = alloca i32, align 4
  %retparam463 = alloca i64, align 8
  %indirectarg467 = alloca %"any[]", align 8
  %error_var475 = alloca i64, align 8
  %out476 = alloca %any, align 8
  %x477 = alloca %"char[]", align 8
  %len478 = alloca i64, align 8
  %error_var479 = alloca i64, align 8
  %out480 = alloca %any, align 8
  %x481 = alloca %"char[]", align 8
  %.inlinecache484 = alloca ptr, align 8
  %.cachedtype485 = alloca ptr, align 8
  %retparam494 = alloca i64, align 8
  %error_var503 = alloca i64, align 8
  %.inlinecache505 = alloca ptr, align 8
  %.cachedtype506 = alloca ptr, align 8
  %.inlinecache521 = alloca ptr, align 8
  %.cachedtype522 = alloca ptr, align 8
  %error_var531 = alloca i64, align 8
  %.inlinecache533 = alloca ptr, align 8
  %.cachedtype534 = alloca ptr, align 8
  %error_var554 = alloca i64, align 8
  %out555 = alloca %any, align 8
  %x556 = alloca %"char[]", align 8
  %len557 = alloca i64, align 8
  %error_var558 = alloca i64, align 8
  %out559 = alloca %any, align 8
  %x560 = alloca %"char[]", align 8
  %.inlinecache563 = alloca ptr, align 8
  %.cachedtype564 = alloca ptr, align 8
  %retparam573 = alloca i64, align 8
  %error_var582 = alloca i64, align 8
  %.inlinecache584 = alloca ptr, align 8
  %.cachedtype585 = alloca ptr, align 8
  %.inlinecache600 = alloca ptr, align 8
  %.cachedtype601 = alloca ptr, align 8
  %error_var610 = alloca i64, align 8
  %.inlinecache612 = alloca ptr, align 8
  %.cachedtype613 = alloca ptr, align 8
  %error_var632 = alloca i64, align 8
  %varargslots633 = alloca [1 x %any], align 16
  %retparam635 = alloca i64, align 8
  %indirectarg639 = alloca %"any[]", align 8
  %error_var645 = alloca i64, align 8
  %varargslots646 = alloca [1 x %any], align 16
  %retparam648 = alloca i64, align 8
  %indirectarg652 = alloca %"any[]", align 8
  %error_var658 = alloca i64, align 8
  %varargslots659 = alloca [1 x %any], align 16
  %retparam662 = alloca i64, align 8
  %indirectarg666 = alloca %"any[]", align 8
  %error_var672 = alloca i64, align 8
  %varargslots673 = alloca [1 x %any], align 16
  %retparam676 = alloca i64, align 8
  %indirectarg680 = alloca %"any[]", align 8
  %error_var687 = alloca i64, align 8
  %out688 = alloca %any, align 8
  %x689 = alloca %"char[]", align 8
  %len690 = alloca i64, align 8
  %error_var691 = alloca i64, align 8
  %out692 = alloca %any, align 8
  %x693 = alloca %"char[]", align 8
  %.inlinecache696 = alloca ptr, align 8
  %.cachedtype697 = alloca ptr, align 8
  %retparam706 = alloca i64, align 8
  %error_var715 = alloca i64, align 8
  %.inlinecache717 = alloca ptr, align 8
  %.cachedtype718 = alloca ptr, align 8
  %.inlinecache733 = alloca ptr, align 8
  %.cachedtype734 = alloca ptr, align 8
  %error_var743 = alloca i64, align 8
  %.inlinecache745 = alloca ptr, align 8
  %.cachedtype746 = alloca ptr, align 8
  %error_var764 = alloca i64, align 8
  %out765 = alloca %any, align 8
  %x766 = alloca %"char[]", align 8
  %len767 = alloca i64, align 8
  %error_var768 = alloca i64, align 8
  %out769 = alloca %any, align 8
  %x770 = alloca %"char[]", align 8
  %.inlinecache773 = alloca ptr, align 8
  %.cachedtype774 = alloca ptr, align 8
  %retparam783 = alloca i64, align 8
  %error_var792 = alloca i64, align 8
  %.inlinecache794 = alloca ptr, align 8
  %.cachedtype795 = alloca ptr, align 8
  %.inlinecache810 = alloca ptr, align 8
  %.cachedtype811 = alloca ptr, align 8
  %error_var820 = alloca i64, align 8
  %.inlinecache822 = alloca ptr, align 8
  %.cachedtype823 = alloca ptr, align 8
  %.anon842 = alloca i64, align 8
  %i846 = alloca i64, align 8
  %allocation847 = alloca ptr, align 8
  %taddr851 = alloca i64, align 8
  %taddr852 = alloca i64, align 8
  %varargslots853 = alloca [2 x %any], align 16
  %indirectarg856 = alloca %"any[]", align 8
  %error_var863 = alloca i64, align 8
  %varargslots864 = alloca [2 x %any], align 16
  %taddr866 = alloca i64, align 8
  %retparam870 = alloca i64, align 8
  %indirectarg874 = alloca %"any[]", align 8
  %backtraces881 = alloca %List, align 8
  %end = alloca i64, align 8
  %.anon883 = alloca i64, align 8
  %j = alloca i64, align 8
  %val886 = alloca ptr, align 8
  %taddr890 = alloca i64, align 8
  %taddr891 = alloca i64, align 8
  %varargslots892 = alloca [2 x %any], align 16
  %indirectarg895 = alloca %"any[]", align 8
  %taddr899 = alloca i64, align 8
  %taddr900 = alloca i64, align 8
  %varargslots901 = alloca [2 x %any], align 16
  %indirectarg904 = alloca %"any[]", align 8
  %list = alloca %List, align 8
  %error_var912 = alloca i64, align 8
  %taddr916 = alloca i64, align 8
  %taddr917 = alloca i64, align 8
  %varargslots918 = alloca [2 x %any], align 16
  %indirectarg921 = alloca %"any[]", align 8
  %taddr924 = alloca i64, align 8
  %taddr925 = alloca i64, align 8
  %varargslots926 = alloca [2 x %any], align 16
  %indirectarg929 = alloca %"any[]", align 8
  %retparam932 = alloca %List, align 8
  %error_var940 = alloca i64, align 8
  %varargslots941 = alloca [2 x %any], align 16
  %taddr943 = alloca i64, align 8
  %retparam947 = alloca i64, align 8
  %indirectarg951 = alloca %"any[]", align 8
  %.anon957 = alloca i64, align 8
  %trace961 = alloca %Backtrace, align 8
  %self962 = alloca ptr, align 8
  %index = alloca i64, align 8
  %varargslots971 = alloca [3 x %any], align 16
  %retparam978 = alloca i64, align 8
  %indirectarg982 = alloca %"any[]", align 8
  %retparam987 = alloca i64, align 8
  %indirectarg991 = alloca %"any[]", align 8
  %varargslots995 = alloca [1 x %any], align 16
  %retparam998 = alloca i64, align 8
  %indirectarg1002 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype823, align 8, !dbg !339
  store ptr null, ptr %.cachedtype811, align 8, !dbg !339
  store ptr null, ptr %.cachedtype795, align 8, !dbg !339
  store ptr null, ptr %.cachedtype774, align 8, !dbg !339
  store ptr null, ptr %.cachedtype746, align 8, !dbg !339
  store ptr null, ptr %.cachedtype734, align 8, !dbg !339
  store ptr null, ptr %.cachedtype718, align 8, !dbg !339
  store ptr null, ptr %.cachedtype697, align 8, !dbg !339
  store ptr null, ptr %.cachedtype613, align 8, !dbg !339
  store ptr null, ptr %.cachedtype601, align 8, !dbg !339
  store ptr null, ptr %.cachedtype585, align 8, !dbg !339
  store ptr null, ptr %.cachedtype564, align 8, !dbg !339
  store ptr null, ptr %.cachedtype534, align 8, !dbg !339
  store ptr null, ptr %.cachedtype522, align 8, !dbg !339
  store ptr null, ptr %.cachedtype506, align 8, !dbg !339
  store ptr null, ptr %.cachedtype485, align 8, !dbg !339
  store ptr null, ptr %.cachedtype384, align 8, !dbg !339
  store ptr null, ptr %.cachedtype372, align 8, !dbg !339
  store ptr null, ptr %.cachedtype356, align 8, !dbg !339
  store ptr null, ptr %.cachedtype335, align 8, !dbg !339
  store ptr null, ptr %.cachedtype307, align 8, !dbg !339
  store ptr null, ptr %.cachedtype295, align 8, !dbg !339
  store ptr null, ptr %.cachedtype279, align 8, !dbg !339
  store ptr null, ptr %.cachedtype258, align 8, !dbg !339
  store ptr null, ptr %.cachedtype230, align 8, !dbg !339
  store ptr null, ptr %.cachedtype218, align 8, !dbg !339
  store ptr null, ptr %.cachedtype202, align 8, !dbg !339
  store ptr null, ptr %.cachedtype181, align 8, !dbg !339
  store ptr null, ptr %.cachedtype124, align 8, !dbg !339
  store ptr null, ptr %.cachedtype112, align 8, !dbg !339
  store ptr null, ptr %.cachedtype96, align 8, !dbg !339
  store ptr null, ptr %.cachedtype75, align 8, !dbg !339
  store ptr null, ptr %.cachedtype49, align 8, !dbg !339
  store ptr null, ptr %.cachedtype37, align 8, !dbg !339
  store ptr null, ptr %.cachedtype21, align 8, !dbg !339
  store ptr null, ptr %.cachedtype, align 8, !dbg !339
  %3 = icmp eq ptr %0, null, !dbg !339
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !339
  br i1 %4, label %panic, label %checkok, !dbg !339

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !340, !DIExpression(), !341)
  store i64 %1, ptr %out, align 8
  %ptradd = getelementptr inbounds i8, ptr %out, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %out, !342, !DIExpression(), !343)
    #dbg_declare(ptr %state, !344, !DIExpression(), !346)
  %5 = call ptr @std.core.mem.allocator.push_pool() #7, !dbg !347
  store ptr %5, ptr %state, align 8, !dbg !347
    #dbg_declare(ptr %total, !348, !DIExpression(), !350)
  store i64 0, ptr %total, align 8, !dbg !351
    #dbg_declare(ptr %entries, !352, !DIExpression(), !353)
  store i64 0, ptr %entries, align 8, !dbg !354
    #dbg_declare(ptr %leaks, !355, !DIExpression(), !356)
  store i8 0, ptr %leaks, align 1, !dbg !357
    #dbg_declare(ptr %allocs, !358, !DIExpression(), !359)
  %6 = load ptr, ptr %self, align 8, !dbg !360
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !360
  %7 = call { ptr, i64 } @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.tvalues"(ptr %ptradd1), !dbg !360
  store { ptr, i64 } %7, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocs, ptr align 8 %result, i32 16, i1 false)
  %ptradd2 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !361
  %8 = load i64, ptr %ptradd2, align 8, !dbg !361
  %i2b = icmp ne i64 %8, 0, !dbg !361
  br i1 %i2b, label %if.then, label %if.else553, !dbg !361

if.then:                                          ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !362
  %9 = load i64, ptr %ptradd3, align 8, !dbg !362
  %10 = load ptr, ptr %allocs, align 8, !dbg !362
  %ge = icmp sge i64 0, %9, !dbg !364
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !364
  br i1 %11, label %panic4, label %checkok7, !dbg !364

checkok7:                                         ; preds = %if.then
  %ptradd8 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !364
  %12 = load ptr, ptr %ptradd8, align 8, !dbg !365
  %i2nb = icmp eq ptr %12, null, !dbg !365
  br i1 %i2nb, label %if.then9, label %if.else, !dbg !365

if.then9:                                         ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out10, ptr align 8 %out, i32 16, i1 false)
  store %"char[]" { ptr @.str.34, i64 31 }, ptr %x, align 8
    #dbg_declare(ptr %len, !366, !DIExpression(), !369)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out12, ptr align 8 %out10, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x13, ptr align 8 %x, i32 16, i1 false)
  %ptradd15 = getelementptr inbounds i8, ptr %out12, i64 8, !dbg !372
  %13 = load i64, ptr %ptradd15, align 8, !dbg !372
  %14 = inttoptr i64 %13 to ptr, !dbg !372
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !339
  %15 = icmp eq ptr %14, %type, !dbg !339
  br i1 %15, label %cache_hit, label %cache_miss, !dbg !339

cache_miss:                                       ; preds = %if.then9
  %ptradd16 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !339
  %16 = load ptr, ptr %ptradd16, align 8, !dbg !339
  %17 = call ptr @.dyn_search(ptr %16, ptr @"$sel.write"), !dbg !339
  store ptr %17, ptr %.inlinecache, align 8, !dbg !339
  store ptr %14, ptr %.cachedtype, align 8, !dbg !339
  br label %18, !dbg !339

cache_hit:                                        ; preds = %if.then9
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !339
  br label %18, !dbg !339

18:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %17, %cache_miss ], !dbg !339
  %19 = icmp eq ptr %fn_phi, null, !dbg !339
  br i1 %19, label %missing_function, label %match, !dbg !339

missing_function:                                 ; preds = %18
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !375
  call void %20(ptr @.panic_msg.35, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 116) #6, !dbg !375
  unreachable, !dbg !375

match:                                            ; preds = %18
  %21 = load ptr, ptr %out12, align 8
  %lo = load ptr, ptr %x13, align 8
  %ptradd17 = getelementptr inbounds i8, ptr %x13, i64 8
  %hi = load i64, ptr %ptradd17, align 8
  %22 = call i64 %fn_phi(ptr %retparam, ptr %21, ptr %lo, i64 %hi), !dbg !375
  %not_err = icmp eq i64 %22, 0, !dbg !375
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !375
  br i1 %23, label %after_check, label %assign_optional, !dbg !375

assign_optional:                                  ; preds = %match
  store i64 %22, ptr %error_var11, align 8, !dbg !375
  br label %guard_block, !dbg !375

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !375

guard_block:                                      ; preds = %assign_optional
  %24 = load i64, ptr %error_var11, align 8, !dbg !375
  store i64 %24, ptr %error_var, align 8, !dbg !375
  br label %guard_block63, !dbg !375

noerr_block:                                      ; preds = %after_check
  %25 = load i64, ptr %retparam, align 8, !dbg !375
  store i64 %25, ptr %len, align 8, !dbg !375
  %ptradd19 = getelementptr inbounds i8, ptr %out10, i64 8, !dbg !376
  %26 = load i64, ptr %ptradd19, align 8, !dbg !376
  %27 = inttoptr i64 %26 to ptr, !dbg !376
  %type22 = load ptr, ptr %.cachedtype21, align 8, !dbg !339
  %28 = icmp eq ptr %27, %type22, !dbg !339
  br i1 %28, label %cache_hit25, label %cache_miss23, !dbg !339

cache_miss23:                                     ; preds = %noerr_block
  %ptradd24 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !339
  %29 = load ptr, ptr %ptradd24, align 8, !dbg !339
  %30 = call ptr @.dyn_search(ptr %29, ptr @"$sel.write_byte"), !dbg !339
  store ptr %30, ptr %.inlinecache20, align 8, !dbg !339
  store ptr %27, ptr %.cachedtype21, align 8, !dbg !339
  br label %31, !dbg !339

cache_hit25:                                      ; preds = %noerr_block
  %cache_hit_fn26 = load ptr, ptr %.inlinecache20, align 8, !dbg !339
  br label %31, !dbg !339

31:                                               ; preds = %cache_hit25, %cache_miss23
  %fn_phi27 = phi ptr [ %cache_hit_fn26, %cache_hit25 ], [ %30, %cache_miss23 ], !dbg !339
  %32 = icmp eq ptr %fn_phi27, null, !dbg !339
  br i1 %32, label %missing_function28, label %match29, !dbg !339

missing_function28:                               ; preds = %31
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !377
  call void %33(ptr @.panic_msg.37, i64 47, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 173) #6, !dbg !377
  unreachable, !dbg !377

match29:                                          ; preds = %31
  %34 = load ptr, ptr %out10, align 8, !dbg !377
  %35 = call i64 %fn_phi27(ptr %34, i8 zeroext 10), !dbg !377
  %not_err30 = icmp eq i64 %35, 0, !dbg !377
  %36 = call i1 @llvm.expect.i1(i1 %not_err30, i1 true), !dbg !377
  br i1 %36, label %after_check32, label %assign_optional31, !dbg !377

assign_optional31:                                ; preds = %match29
  store i64 %35, ptr %error_var18, align 8, !dbg !377
  br label %guard_block33, !dbg !377

after_check32:                                    ; preds = %match29
  br label %noerr_block34, !dbg !377

guard_block33:                                    ; preds = %assign_optional31
  %37 = load i64, ptr %error_var18, align 8, !dbg !377
  store i64 %37, ptr %error_var, align 8, !dbg !377
  br label %guard_block63, !dbg !377

noerr_block34:                                    ; preds = %after_check32
  %ptradd35 = getelementptr inbounds i8, ptr %out10, i64 8, !dbg !378
  %38 = load i64, ptr %ptradd35, align 8, !dbg !378
  %39 = inttoptr i64 %38 to ptr, !dbg !378
  %type38 = load ptr, ptr %.cachedtype37, align 8, !dbg !339
  %40 = icmp eq ptr %39, %type38, !dbg !339
  br i1 %40, label %cache_hit41, label %cache_miss39, !dbg !339

cache_miss39:                                     ; preds = %noerr_block34
  %ptradd40 = getelementptr inbounds i8, ptr %39, i64 16, !dbg !339
  %41 = load ptr, ptr %ptradd40, align 8, !dbg !339
  %42 = call ptr @.dyn_search(ptr %41, ptr @"$sel.flush"), !dbg !339
  store ptr %42, ptr %.inlinecache36, align 8, !dbg !339
  store ptr %39, ptr %.cachedtype37, align 8, !dbg !339
  br label %43, !dbg !339

cache_hit41:                                      ; preds = %noerr_block34
  %cache_hit_fn42 = load ptr, ptr %.inlinecache36, align 8, !dbg !339
  br label %43, !dbg !339

43:                                               ; preds = %cache_hit41, %cache_miss39
  %fn_phi43 = phi ptr [ %cache_hit_fn42, %cache_hit41 ], [ %42, %cache_miss39 ], !dbg !339
  %i2b44 = icmp ne ptr %fn_phi43, null, !dbg !339
  br i1 %i2b44, label %if.then45, label %if.exit, !dbg !339

if.then45:                                        ; preds = %43
  %ptradd47 = getelementptr inbounds i8, ptr %out10, i64 8, !dbg !379
  %44 = load i64, ptr %ptradd47, align 8, !dbg !379
  %45 = inttoptr i64 %44 to ptr, !dbg !379
  %type50 = load ptr, ptr %.cachedtype49, align 8, !dbg !339
  %46 = icmp eq ptr %45, %type50, !dbg !339
  br i1 %46, label %cache_hit53, label %cache_miss51, !dbg !339

cache_miss51:                                     ; preds = %if.then45
  %ptradd52 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !339
  %47 = load ptr, ptr %ptradd52, align 8, !dbg !339
  %48 = call ptr @.dyn_search(ptr %47, ptr @"$sel.flush"), !dbg !339
  store ptr %48, ptr %.inlinecache48, align 8, !dbg !339
  store ptr %45, ptr %.cachedtype49, align 8, !dbg !339
  br label %49, !dbg !339

cache_hit53:                                      ; preds = %if.then45
  %cache_hit_fn54 = load ptr, ptr %.inlinecache48, align 8, !dbg !339
  br label %49, !dbg !339

49:                                               ; preds = %cache_hit53, %cache_miss51
  %fn_phi55 = phi ptr [ %cache_hit_fn54, %cache_hit53 ], [ %48, %cache_miss51 ], !dbg !339
  %50 = icmp eq ptr %fn_phi55, null, !dbg !339
  br i1 %50, label %missing_function56, label %match57, !dbg !339

missing_function56:                               ; preds = %49
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !379
  call void %51(ptr @.panic_msg.38, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 176) #6, !dbg !379
  unreachable, !dbg !379

match57:                                          ; preds = %49
  %52 = load ptr, ptr %out10, align 8, !dbg !379
  %53 = call i64 %fn_phi55(ptr %52), !dbg !379
  %not_err58 = icmp eq i64 %53, 0, !dbg !379
  %54 = call i1 @llvm.expect.i1(i1 %not_err58, i1 true), !dbg !379
  br i1 %54, label %after_check60, label %assign_optional59, !dbg !379

assign_optional59:                                ; preds = %match57
  store i64 %53, ptr %error_var46, align 8, !dbg !379
  br label %guard_block61, !dbg !379

after_check60:                                    ; preds = %match57
  br label %noerr_block62, !dbg !379

guard_block61:                                    ; preds = %assign_optional59
  %55 = load i64, ptr %error_var46, align 8, !dbg !379
  store i64 %55, ptr %error_var, align 8, !dbg !379
  br label %guard_block63, !dbg !379

noerr_block62:                                    ; preds = %after_check60
  br label %if.exit, !dbg !379

if.exit:                                          ; preds = %noerr_block62, %43
  %56 = load i64, ptr %len, align 8, !dbg !380
  %add = add i64 %56, 1, !dbg !380
  br label %noerr_block64, !dbg !380

guard_block63:                                    ; preds = %guard_block61, %guard_block33, %guard_block
  %57 = load ptr, ptr %state, align 8, !dbg !381
  call void @std.core.mem.allocator.pop_pool(ptr %57) #7, !dbg !383
  %58 = load i64, ptr %error_var, align 8, !dbg !383
  ret i64 %58, !dbg !383

noerr_block64:                                    ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out66, ptr align 8 %out, i32 16, i1 false)
  store %"char[]" { ptr @.str.39, i64 23 }, ptr %x67, align 8
    #dbg_declare(ptr %len68, !384, !DIExpression(), !386)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out70, ptr align 8 %out66, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x71, ptr align 8 %x67, i32 16, i1 false)
  %ptradd73 = getelementptr inbounds i8, ptr %out70, i64 8, !dbg !388
  %59 = load i64, ptr %ptradd73, align 8, !dbg !388
  %60 = inttoptr i64 %59 to ptr, !dbg !388
  %type76 = load ptr, ptr %.cachedtype75, align 8, !dbg !339
  %61 = icmp eq ptr %60, %type76, !dbg !339
  br i1 %61, label %cache_hit79, label %cache_miss77, !dbg !339

cache_miss77:                                     ; preds = %noerr_block64
  %ptradd78 = getelementptr inbounds i8, ptr %60, i64 16, !dbg !339
  %62 = load ptr, ptr %ptradd78, align 8, !dbg !339
  %63 = call ptr @.dyn_search(ptr %62, ptr @"$sel.write"), !dbg !339
  store ptr %63, ptr %.inlinecache74, align 8, !dbg !339
  store ptr %60, ptr %.cachedtype75, align 8, !dbg !339
  br label %64, !dbg !339

cache_hit79:                                      ; preds = %noerr_block64
  %cache_hit_fn80 = load ptr, ptr %.inlinecache74, align 8, !dbg !339
  br label %64, !dbg !339

64:                                               ; preds = %cache_hit79, %cache_miss77
  %fn_phi81 = phi ptr [ %cache_hit_fn80, %cache_hit79 ], [ %63, %cache_miss77 ], !dbg !339
  %65 = icmp eq ptr %fn_phi81, null, !dbg !339
  br i1 %65, label %missing_function82, label %match83, !dbg !339

missing_function82:                               ; preds = %64
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !391
  call void %66(ptr @.panic_msg.35, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 116) #6, !dbg !391
  unreachable, !dbg !391

match83:                                          ; preds = %64
  %67 = load ptr, ptr %out70, align 8
  %lo85 = load ptr, ptr %x71, align 8
  %ptradd86 = getelementptr inbounds i8, ptr %x71, i64 8
  %hi87 = load i64, ptr %ptradd86, align 8
  %68 = call i64 %fn_phi81(ptr %retparam84, ptr %67, ptr %lo85, i64 %hi87), !dbg !391
  %not_err88 = icmp eq i64 %68, 0, !dbg !391
  %69 = call i1 @llvm.expect.i1(i1 %not_err88, i1 true), !dbg !391
  br i1 %69, label %after_check90, label %assign_optional89, !dbg !391

assign_optional89:                                ; preds = %match83
  store i64 %68, ptr %error_var69, align 8, !dbg !391
  br label %guard_block91, !dbg !391

after_check90:                                    ; preds = %match83
  br label %noerr_block92, !dbg !391

guard_block91:                                    ; preds = %assign_optional89
  %70 = load i64, ptr %error_var69, align 8, !dbg !391
  store i64 %70, ptr %error_var65, align 8, !dbg !391
  br label %guard_block140, !dbg !391

noerr_block92:                                    ; preds = %after_check90
  %71 = load i64, ptr %retparam84, align 8, !dbg !391
  store i64 %71, ptr %len68, align 8, !dbg !391
  %ptradd94 = getelementptr inbounds i8, ptr %out66, i64 8, !dbg !392
  %72 = load i64, ptr %ptradd94, align 8, !dbg !392
  %73 = inttoptr i64 %72 to ptr, !dbg !392
  %type97 = load ptr, ptr %.cachedtype96, align 8, !dbg !339
  %74 = icmp eq ptr %73, %type97, !dbg !339
  br i1 %74, label %cache_hit100, label %cache_miss98, !dbg !339

cache_miss98:                                     ; preds = %noerr_block92
  %ptradd99 = getelementptr inbounds i8, ptr %73, i64 16, !dbg !339
  %75 = load ptr, ptr %ptradd99, align 8, !dbg !339
  %76 = call ptr @.dyn_search(ptr %75, ptr @"$sel.write_byte"), !dbg !339
  store ptr %76, ptr %.inlinecache95, align 8, !dbg !339
  store ptr %73, ptr %.cachedtype96, align 8, !dbg !339
  br label %77, !dbg !339

cache_hit100:                                     ; preds = %noerr_block92
  %cache_hit_fn101 = load ptr, ptr %.inlinecache95, align 8, !dbg !339
  br label %77, !dbg !339

77:                                               ; preds = %cache_hit100, %cache_miss98
  %fn_phi102 = phi ptr [ %cache_hit_fn101, %cache_hit100 ], [ %76, %cache_miss98 ], !dbg !339
  %78 = icmp eq ptr %fn_phi102, null, !dbg !339
  br i1 %78, label %missing_function103, label %match104, !dbg !339

missing_function103:                              ; preds = %77
  %79 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !393
  call void %79(ptr @.panic_msg.37, i64 47, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 173) #6, !dbg !393
  unreachable, !dbg !393

match104:                                         ; preds = %77
  %80 = load ptr, ptr %out66, align 8, !dbg !393
  %81 = call i64 %fn_phi102(ptr %80, i8 zeroext 10), !dbg !393
  %not_err105 = icmp eq i64 %81, 0, !dbg !393
  %82 = call i1 @llvm.expect.i1(i1 %not_err105, i1 true), !dbg !393
  br i1 %82, label %after_check107, label %assign_optional106, !dbg !393

assign_optional106:                               ; preds = %match104
  store i64 %81, ptr %error_var93, align 8, !dbg !393
  br label %guard_block108, !dbg !393

after_check107:                                   ; preds = %match104
  br label %noerr_block109, !dbg !393

guard_block108:                                   ; preds = %assign_optional106
  %83 = load i64, ptr %error_var93, align 8, !dbg !393
  store i64 %83, ptr %error_var65, align 8, !dbg !393
  br label %guard_block140, !dbg !393

noerr_block109:                                   ; preds = %after_check107
  %ptradd110 = getelementptr inbounds i8, ptr %out66, i64 8, !dbg !394
  %84 = load i64, ptr %ptradd110, align 8, !dbg !394
  %85 = inttoptr i64 %84 to ptr, !dbg !394
  %type113 = load ptr, ptr %.cachedtype112, align 8, !dbg !339
  %86 = icmp eq ptr %85, %type113, !dbg !339
  br i1 %86, label %cache_hit116, label %cache_miss114, !dbg !339

cache_miss114:                                    ; preds = %noerr_block109
  %ptradd115 = getelementptr inbounds i8, ptr %85, i64 16, !dbg !339
  %87 = load ptr, ptr %ptradd115, align 8, !dbg !339
  %88 = call ptr @.dyn_search(ptr %87, ptr @"$sel.flush"), !dbg !339
  store ptr %88, ptr %.inlinecache111, align 8, !dbg !339
  store ptr %85, ptr %.cachedtype112, align 8, !dbg !339
  br label %89, !dbg !339

cache_hit116:                                     ; preds = %noerr_block109
  %cache_hit_fn117 = load ptr, ptr %.inlinecache111, align 8, !dbg !339
  br label %89, !dbg !339

89:                                               ; preds = %cache_hit116, %cache_miss114
  %fn_phi118 = phi ptr [ %cache_hit_fn117, %cache_hit116 ], [ %88, %cache_miss114 ], !dbg !339
  %i2b119 = icmp ne ptr %fn_phi118, null, !dbg !339
  br i1 %i2b119, label %if.then120, label %if.exit138, !dbg !339

if.then120:                                       ; preds = %89
  %ptradd122 = getelementptr inbounds i8, ptr %out66, i64 8, !dbg !395
  %90 = load i64, ptr %ptradd122, align 8, !dbg !395
  %91 = inttoptr i64 %90 to ptr, !dbg !395
  %type125 = load ptr, ptr %.cachedtype124, align 8, !dbg !339
  %92 = icmp eq ptr %91, %type125, !dbg !339
  br i1 %92, label %cache_hit128, label %cache_miss126, !dbg !339

cache_miss126:                                    ; preds = %if.then120
  %ptradd127 = getelementptr inbounds i8, ptr %91, i64 16, !dbg !339
  %93 = load ptr, ptr %ptradd127, align 8, !dbg !339
  %94 = call ptr @.dyn_search(ptr %93, ptr @"$sel.flush"), !dbg !339
  store ptr %94, ptr %.inlinecache123, align 8, !dbg !339
  store ptr %91, ptr %.cachedtype124, align 8, !dbg !339
  br label %95, !dbg !339

cache_hit128:                                     ; preds = %if.then120
  %cache_hit_fn129 = load ptr, ptr %.inlinecache123, align 8, !dbg !339
  br label %95, !dbg !339

95:                                               ; preds = %cache_hit128, %cache_miss126
  %fn_phi130 = phi ptr [ %cache_hit_fn129, %cache_hit128 ], [ %94, %cache_miss126 ], !dbg !339
  %96 = icmp eq ptr %fn_phi130, null, !dbg !339
  br i1 %96, label %missing_function131, label %match132, !dbg !339

missing_function131:                              ; preds = %95
  %97 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !395
  call void %97(ptr @.panic_msg.38, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 176) #6, !dbg !395
  unreachable, !dbg !395

match132:                                         ; preds = %95
  %98 = load ptr, ptr %out66, align 8, !dbg !395
  %99 = call i64 %fn_phi130(ptr %98), !dbg !395
  %not_err133 = icmp eq i64 %99, 0, !dbg !395
  %100 = call i1 @llvm.expect.i1(i1 %not_err133, i1 true), !dbg !395
  br i1 %100, label %after_check135, label %assign_optional134, !dbg !395

assign_optional134:                               ; preds = %match132
  store i64 %99, ptr %error_var121, align 8, !dbg !395
  br label %guard_block136, !dbg !395

after_check135:                                   ; preds = %match132
  br label %noerr_block137, !dbg !395

guard_block136:                                   ; preds = %assign_optional134
  %101 = load i64, ptr %error_var121, align 8, !dbg !395
  store i64 %101, ptr %error_var65, align 8, !dbg !395
  br label %guard_block140, !dbg !395

noerr_block137:                                   ; preds = %after_check135
  br label %if.exit138, !dbg !395

if.exit138:                                       ; preds = %noerr_block137, %89
  %102 = load i64, ptr %len68, align 8, !dbg !396
  %add139 = add i64 %102, 1, !dbg !396
  br label %noerr_block141, !dbg !396

guard_block140:                                   ; preds = %guard_block136, %guard_block108, %guard_block91
  %103 = load ptr, ptr %state, align 8, !dbg !397
  call void @std.core.mem.allocator.pop_pool(ptr %103) #7, !dbg !399
  %104 = load i64, ptr %error_var65, align 8, !dbg !399
  ret i64 %104, !dbg !399

noerr_block141:                                   ; preds = %if.exit138
  %ptradd142 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !400
  %105 = load i64, ptr %ptradd142, align 8, !dbg !400
    #dbg_declare(ptr %.anon, !402, !DIExpression(), !403)
  store i64 0, ptr %.anon, align 8, !dbg !403
  br label %loop.cond, !dbg !403

loop.cond:                                        ; preds = %noerr_block170, %noerr_block141
  %106 = load i64, ptr %.anon, align 8, !dbg !403
  %lt = icmp ult i64 %106, %105, !dbg !403
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !403

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !404, !DIExpression(), !406)
  %107 = load i64, ptr %.anon, align 8, !dbg !406
  store i64 %107, ptr %i, align 8, !dbg !406
    #dbg_declare(ptr %allocation, !407, !DIExpression(), !408)
  %ptradd143 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !409
  %108 = load i64, ptr %ptradd143, align 8, !dbg !409
  %109 = load ptr, ptr %allocs, align 8, !dbg !409
  %110 = load i64, ptr %.anon, align 8, !dbg !406
  %ge144 = icmp uge i64 %110, %108, !dbg !406
  %111 = call i1 @llvm.expect.i1(i1 %ge144, i1 false), !dbg !406
  br i1 %111, label %panic145, label %checkok152, !dbg !406

checkok152:                                       ; preds = %loop.body
  %ptroffset = getelementptr inbounds [144 x i8], ptr %109, i64 %110, !dbg !406
  store ptr %ptroffset, ptr %allocation, align 8, !dbg !406
  %112 = load i64, ptr %entries, align 8, !dbg !410
  %add153 = add i64 %112, 1, !dbg !410
  store i64 %add153, ptr %entries, align 8, !dbg !410
  %113 = load i64, ptr %total, align 8, !dbg !412
  %114 = load ptr, ptr %allocation, align 8, !dbg !413
  %ptradd154 = getelementptr inbounds i8, ptr %114, i64 8, !dbg !413
  %115 = load i64, ptr %ptradd154, align 8, !dbg !413
  %add155 = add i64 %113, %115, !dbg !412
  store i64 %add155, ptr %total, align 8, !dbg !412
  %116 = load ptr, ptr %allocation, align 8, !dbg !414
  %ptradd158 = getelementptr inbounds i8, ptr %116, i64 8, !dbg !414
  %117 = insertvalue %any undef, ptr %ptradd158, 0, !dbg !414
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !414
  store %any %118, ptr %varargslots157, align 16, !dbg !414
  %119 = load ptr, ptr %allocation, align 8, !dbg !415
  %120 = insertvalue %any undef, ptr %119, 0, !dbg !415
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.p$void" to i64), 1, !dbg !415
  %ptradd159 = getelementptr inbounds i8, ptr %varargslots157, i64 16, !dbg !415
  store %any %121, ptr %ptradd159, align 16, !dbg !415
  %122 = insertvalue %"any[]" undef, ptr %varargslots157, 0, !dbg !415
  %"$$temp160" = insertvalue %"any[]" %122, i64 2, 1, !dbg !415
  %lo162 = load i64, ptr %out, align 8
  %ptradd163 = getelementptr inbounds i8, ptr %out, i64 8
  %hi164 = load ptr, ptr %ptradd163, align 8
  store %"any[]" %"$$temp160", ptr %indirectarg165, align 8
  %123 = call i64 @std.io.fprintfn(ptr %retparam161, i64 %lo162, ptr %hi164, ptr @.str.40, i64 9, ptr byval(%"any[]") align 8 %indirectarg165), !dbg !416
  %not_err166 = icmp eq i64 %123, 0, !dbg !416
  %124 = call i1 @llvm.expect.i1(i1 %not_err166, i1 true), !dbg !416
  br i1 %124, label %after_check168, label %assign_optional167, !dbg !416

assign_optional167:                               ; preds = %checkok152
  store i64 %123, ptr %error_var156, align 8, !dbg !416
  br label %guard_block169, !dbg !416

after_check168:                                   ; preds = %checkok152
  br label %noerr_block170, !dbg !416

guard_block169:                                   ; preds = %assign_optional167
  %125 = load ptr, ptr %state, align 8, !dbg !417
  call void @std.core.mem.allocator.pop_pool(ptr %125) #7, !dbg !419
  %126 = load i64, ptr %error_var156, align 8, !dbg !419
  ret i64 %126, !dbg !419

noerr_block170:                                   ; preds = %after_check168
  %127 = load i64, ptr %.anon, align 8, !dbg !403
  %addnuw = add nuw i64 %127, 1, !dbg !403
  store i64 %addnuw, ptr %.anon, align 8, !dbg !403
  br label %loop.cond, !dbg !403

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out172, ptr align 8 %out, i32 16, i1 false)
  store %"char[]" { ptr @.str.41, i64 31 }, ptr %x173, align 8
    #dbg_declare(ptr %len174, !420, !DIExpression(), !422)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out176, ptr align 8 %out172, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x177, ptr align 8 %x173, i32 16, i1 false)
  %ptradd179 = getelementptr inbounds i8, ptr %out176, i64 8, !dbg !424
  %128 = load i64, ptr %ptradd179, align 8, !dbg !424
  %129 = inttoptr i64 %128 to ptr, !dbg !424
  %type182 = load ptr, ptr %.cachedtype181, align 8, !dbg !339
  %130 = icmp eq ptr %129, %type182, !dbg !339
  br i1 %130, label %cache_hit185, label %cache_miss183, !dbg !339

cache_miss183:                                    ; preds = %loop.exit
  %ptradd184 = getelementptr inbounds i8, ptr %129, i64 16, !dbg !339
  %131 = load ptr, ptr %ptradd184, align 8, !dbg !339
  %132 = call ptr @.dyn_search(ptr %131, ptr @"$sel.write"), !dbg !339
  store ptr %132, ptr %.inlinecache180, align 8, !dbg !339
  store ptr %129, ptr %.cachedtype181, align 8, !dbg !339
  br label %133, !dbg !339

cache_hit185:                                     ; preds = %loop.exit
  %cache_hit_fn186 = load ptr, ptr %.inlinecache180, align 8, !dbg !339
  br label %133, !dbg !339

133:                                              ; preds = %cache_hit185, %cache_miss183
  %fn_phi187 = phi ptr [ %cache_hit_fn186, %cache_hit185 ], [ %132, %cache_miss183 ], !dbg !339
  %134 = icmp eq ptr %fn_phi187, null, !dbg !339
  br i1 %134, label %missing_function188, label %match189, !dbg !339

missing_function188:                              ; preds = %133
  %135 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !427
  call void %135(ptr @.panic_msg.35, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 116) #6, !dbg !427
  unreachable, !dbg !427

match189:                                         ; preds = %133
  %136 = load ptr, ptr %out176, align 8
  %lo191 = load ptr, ptr %x177, align 8
  %ptradd192 = getelementptr inbounds i8, ptr %x177, i64 8
  %hi193 = load i64, ptr %ptradd192, align 8
  %137 = call i64 %fn_phi187(ptr %retparam190, ptr %136, ptr %lo191, i64 %hi193), !dbg !427
  %not_err194 = icmp eq i64 %137, 0, !dbg !427
  %138 = call i1 @llvm.expect.i1(i1 %not_err194, i1 true), !dbg !427
  br i1 %138, label %after_check196, label %assign_optional195, !dbg !427

assign_optional195:                               ; preds = %match189
  store i64 %137, ptr %error_var175, align 8, !dbg !427
  br label %guard_block197, !dbg !427

after_check196:                                   ; preds = %match189
  br label %noerr_block198, !dbg !427

guard_block197:                                   ; preds = %assign_optional195
  %139 = load i64, ptr %error_var175, align 8, !dbg !427
  store i64 %139, ptr %error_var171, align 8, !dbg !427
  br label %guard_block246, !dbg !427

noerr_block198:                                   ; preds = %after_check196
  %140 = load i64, ptr %retparam190, align 8, !dbg !427
  store i64 %140, ptr %len174, align 8, !dbg !427
  %ptradd200 = getelementptr inbounds i8, ptr %out172, i64 8, !dbg !428
  %141 = load i64, ptr %ptradd200, align 8, !dbg !428
  %142 = inttoptr i64 %141 to ptr, !dbg !428
  %type203 = load ptr, ptr %.cachedtype202, align 8, !dbg !339
  %143 = icmp eq ptr %142, %type203, !dbg !339
  br i1 %143, label %cache_hit206, label %cache_miss204, !dbg !339

cache_miss204:                                    ; preds = %noerr_block198
  %ptradd205 = getelementptr inbounds i8, ptr %142, i64 16, !dbg !339
  %144 = load ptr, ptr %ptradd205, align 8, !dbg !339
  %145 = call ptr @.dyn_search(ptr %144, ptr @"$sel.write_byte"), !dbg !339
  store ptr %145, ptr %.inlinecache201, align 8, !dbg !339
  store ptr %142, ptr %.cachedtype202, align 8, !dbg !339
  br label %146, !dbg !339

cache_hit206:                                     ; preds = %noerr_block198
  %cache_hit_fn207 = load ptr, ptr %.inlinecache201, align 8, !dbg !339
  br label %146, !dbg !339

146:                                              ; preds = %cache_hit206, %cache_miss204
  %fn_phi208 = phi ptr [ %cache_hit_fn207, %cache_hit206 ], [ %145, %cache_miss204 ], !dbg !339
  %147 = icmp eq ptr %fn_phi208, null, !dbg !339
  br i1 %147, label %missing_function209, label %match210, !dbg !339

missing_function209:                              ; preds = %146
  %148 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !429
  call void %148(ptr @.panic_msg.37, i64 47, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 173) #6, !dbg !429
  unreachable, !dbg !429

match210:                                         ; preds = %146
  %149 = load ptr, ptr %out172, align 8, !dbg !429
  %150 = call i64 %fn_phi208(ptr %149, i8 zeroext 10), !dbg !429
  %not_err211 = icmp eq i64 %150, 0, !dbg !429
  %151 = call i1 @llvm.expect.i1(i1 %not_err211, i1 true), !dbg !429
  br i1 %151, label %after_check213, label %assign_optional212, !dbg !429

assign_optional212:                               ; preds = %match210
  store i64 %150, ptr %error_var199, align 8, !dbg !429
  br label %guard_block214, !dbg !429

after_check213:                                   ; preds = %match210
  br label %noerr_block215, !dbg !429

guard_block214:                                   ; preds = %assign_optional212
  %152 = load i64, ptr %error_var199, align 8, !dbg !429
  store i64 %152, ptr %error_var171, align 8, !dbg !429
  br label %guard_block246, !dbg !429

noerr_block215:                                   ; preds = %after_check213
  %ptradd216 = getelementptr inbounds i8, ptr %out172, i64 8, !dbg !430
  %153 = load i64, ptr %ptradd216, align 8, !dbg !430
  %154 = inttoptr i64 %153 to ptr, !dbg !430
  %type219 = load ptr, ptr %.cachedtype218, align 8, !dbg !339
  %155 = icmp eq ptr %154, %type219, !dbg !339
  br i1 %155, label %cache_hit222, label %cache_miss220, !dbg !339

cache_miss220:                                    ; preds = %noerr_block215
  %ptradd221 = getelementptr inbounds i8, ptr %154, i64 16, !dbg !339
  %156 = load ptr, ptr %ptradd221, align 8, !dbg !339
  %157 = call ptr @.dyn_search(ptr %156, ptr @"$sel.flush"), !dbg !339
  store ptr %157, ptr %.inlinecache217, align 8, !dbg !339
  store ptr %154, ptr %.cachedtype218, align 8, !dbg !339
  br label %158, !dbg !339

cache_hit222:                                     ; preds = %noerr_block215
  %cache_hit_fn223 = load ptr, ptr %.inlinecache217, align 8, !dbg !339
  br label %158, !dbg !339

158:                                              ; preds = %cache_hit222, %cache_miss220
  %fn_phi224 = phi ptr [ %cache_hit_fn223, %cache_hit222 ], [ %157, %cache_miss220 ], !dbg !339
  %i2b225 = icmp ne ptr %fn_phi224, null, !dbg !339
  br i1 %i2b225, label %if.then226, label %if.exit244, !dbg !339

if.then226:                                       ; preds = %158
  %ptradd228 = getelementptr inbounds i8, ptr %out172, i64 8, !dbg !431
  %159 = load i64, ptr %ptradd228, align 8, !dbg !431
  %160 = inttoptr i64 %159 to ptr, !dbg !431
  %type231 = load ptr, ptr %.cachedtype230, align 8, !dbg !339
  %161 = icmp eq ptr %160, %type231, !dbg !339
  br i1 %161, label %cache_hit234, label %cache_miss232, !dbg !339

cache_miss232:                                    ; preds = %if.then226
  %ptradd233 = getelementptr inbounds i8, ptr %160, i64 16, !dbg !339
  %162 = load ptr, ptr %ptradd233, align 8, !dbg !339
  %163 = call ptr @.dyn_search(ptr %162, ptr @"$sel.flush"), !dbg !339
  store ptr %163, ptr %.inlinecache229, align 8, !dbg !339
  store ptr %160, ptr %.cachedtype230, align 8, !dbg !339
  br label %164, !dbg !339

cache_hit234:                                     ; preds = %if.then226
  %cache_hit_fn235 = load ptr, ptr %.inlinecache229, align 8, !dbg !339
  br label %164, !dbg !339

164:                                              ; preds = %cache_hit234, %cache_miss232
  %fn_phi236 = phi ptr [ %cache_hit_fn235, %cache_hit234 ], [ %163, %cache_miss232 ], !dbg !339
  %165 = icmp eq ptr %fn_phi236, null, !dbg !339
  br i1 %165, label %missing_function237, label %match238, !dbg !339

missing_function237:                              ; preds = %164
  %166 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !431
  call void %166(ptr @.panic_msg.38, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 176) #6, !dbg !431
  unreachable, !dbg !431

match238:                                         ; preds = %164
  %167 = load ptr, ptr %out172, align 8, !dbg !431
  %168 = call i64 %fn_phi236(ptr %167), !dbg !431
  %not_err239 = icmp eq i64 %168, 0, !dbg !431
  %169 = call i1 @llvm.expect.i1(i1 %not_err239, i1 true), !dbg !431
  br i1 %169, label %after_check241, label %assign_optional240, !dbg !431

assign_optional240:                               ; preds = %match238
  store i64 %168, ptr %error_var227, align 8, !dbg !431
  br label %guard_block242, !dbg !431

after_check241:                                   ; preds = %match238
  br label %noerr_block243, !dbg !431

guard_block242:                                   ; preds = %assign_optional240
  %170 = load i64, ptr %error_var227, align 8, !dbg !431
  store i64 %170, ptr %error_var171, align 8, !dbg !431
  br label %guard_block246, !dbg !431

noerr_block243:                                   ; preds = %after_check241
  br label %if.exit244, !dbg !431

if.exit244:                                       ; preds = %noerr_block243, %158
  %171 = load i64, ptr %len174, align 8, !dbg !432
  %add245 = add i64 %171, 1, !dbg !432
  br label %noerr_block247, !dbg !432

guard_block246:                                   ; preds = %guard_block242, %guard_block214, %guard_block197
  %172 = load ptr, ptr %state, align 8, !dbg !433
  call void @std.core.mem.allocator.pop_pool(ptr %172) #7, !dbg !435
  %173 = load i64, ptr %error_var171, align 8, !dbg !435
  ret i64 %173, !dbg !435

noerr_block247:                                   ; preds = %if.exit244
  br label %if.exit552, !dbg !435

if.else:                                          ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out249, ptr align 8 %out, i32 16, i1 false)
  store %"char[]" { ptr @.str.42, i64 83 }, ptr %x250, align 8
    #dbg_declare(ptr %len251, !436, !DIExpression(), !438)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out253, ptr align 8 %out249, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x254, ptr align 8 %x250, i32 16, i1 false)
  %ptradd256 = getelementptr inbounds i8, ptr %out253, i64 8, !dbg !441
  %174 = load i64, ptr %ptradd256, align 8, !dbg !441
  %175 = inttoptr i64 %174 to ptr, !dbg !441
  %type259 = load ptr, ptr %.cachedtype258, align 8, !dbg !339
  %176 = icmp eq ptr %175, %type259, !dbg !339
  br i1 %176, label %cache_hit262, label %cache_miss260, !dbg !339

cache_miss260:                                    ; preds = %if.else
  %ptradd261 = getelementptr inbounds i8, ptr %175, i64 16, !dbg !339
  %177 = load ptr, ptr %ptradd261, align 8, !dbg !339
  %178 = call ptr @.dyn_search(ptr %177, ptr @"$sel.write"), !dbg !339
  store ptr %178, ptr %.inlinecache257, align 8, !dbg !339
  store ptr %175, ptr %.cachedtype258, align 8, !dbg !339
  br label %179, !dbg !339

cache_hit262:                                     ; preds = %if.else
  %cache_hit_fn263 = load ptr, ptr %.inlinecache257, align 8, !dbg !339
  br label %179, !dbg !339

179:                                              ; preds = %cache_hit262, %cache_miss260
  %fn_phi264 = phi ptr [ %cache_hit_fn263, %cache_hit262 ], [ %178, %cache_miss260 ], !dbg !339
  %180 = icmp eq ptr %fn_phi264, null, !dbg !339
  br i1 %180, label %missing_function265, label %match266, !dbg !339

missing_function265:                              ; preds = %179
  %181 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !444
  call void %181(ptr @.panic_msg.35, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 116) #6, !dbg !444
  unreachable, !dbg !444

match266:                                         ; preds = %179
  %182 = load ptr, ptr %out253, align 8
  %lo268 = load ptr, ptr %x254, align 8
  %ptradd269 = getelementptr inbounds i8, ptr %x254, i64 8
  %hi270 = load i64, ptr %ptradd269, align 8
  %183 = call i64 %fn_phi264(ptr %retparam267, ptr %182, ptr %lo268, i64 %hi270), !dbg !444
  %not_err271 = icmp eq i64 %183, 0, !dbg !444
  %184 = call i1 @llvm.expect.i1(i1 %not_err271, i1 true), !dbg !444
  br i1 %184, label %after_check273, label %assign_optional272, !dbg !444

assign_optional272:                               ; preds = %match266
  store i64 %183, ptr %error_var252, align 8, !dbg !444
  br label %guard_block274, !dbg !444

after_check273:                                   ; preds = %match266
  br label %noerr_block275, !dbg !444

guard_block274:                                   ; preds = %assign_optional272
  %185 = load i64, ptr %error_var252, align 8, !dbg !444
  store i64 %185, ptr %error_var248, align 8, !dbg !444
  br label %guard_block323, !dbg !444

noerr_block275:                                   ; preds = %after_check273
  %186 = load i64, ptr %retparam267, align 8, !dbg !444
  store i64 %186, ptr %len251, align 8, !dbg !444
  %ptradd277 = getelementptr inbounds i8, ptr %out249, i64 8, !dbg !445
  %187 = load i64, ptr %ptradd277, align 8, !dbg !445
  %188 = inttoptr i64 %187 to ptr, !dbg !445
  %type280 = load ptr, ptr %.cachedtype279, align 8, !dbg !339
  %189 = icmp eq ptr %188, %type280, !dbg !339
  br i1 %189, label %cache_hit283, label %cache_miss281, !dbg !339

cache_miss281:                                    ; preds = %noerr_block275
  %ptradd282 = getelementptr inbounds i8, ptr %188, i64 16, !dbg !339
  %190 = load ptr, ptr %ptradd282, align 8, !dbg !339
  %191 = call ptr @.dyn_search(ptr %190, ptr @"$sel.write_byte"), !dbg !339
  store ptr %191, ptr %.inlinecache278, align 8, !dbg !339
  store ptr %188, ptr %.cachedtype279, align 8, !dbg !339
  br label %192, !dbg !339

cache_hit283:                                     ; preds = %noerr_block275
  %cache_hit_fn284 = load ptr, ptr %.inlinecache278, align 8, !dbg !339
  br label %192, !dbg !339

192:                                              ; preds = %cache_hit283, %cache_miss281
  %fn_phi285 = phi ptr [ %cache_hit_fn284, %cache_hit283 ], [ %191, %cache_miss281 ], !dbg !339
  %193 = icmp eq ptr %fn_phi285, null, !dbg !339
  br i1 %193, label %missing_function286, label %match287, !dbg !339

missing_function286:                              ; preds = %192
  %194 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !446
  call void %194(ptr @.panic_msg.37, i64 47, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 173) #6, !dbg !446
  unreachable, !dbg !446

match287:                                         ; preds = %192
  %195 = load ptr, ptr %out249, align 8, !dbg !446
  %196 = call i64 %fn_phi285(ptr %195, i8 zeroext 10), !dbg !446
  %not_err288 = icmp eq i64 %196, 0, !dbg !446
  %197 = call i1 @llvm.expect.i1(i1 %not_err288, i1 true), !dbg !446
  br i1 %197, label %after_check290, label %assign_optional289, !dbg !446

assign_optional289:                               ; preds = %match287
  store i64 %196, ptr %error_var276, align 8, !dbg !446
  br label %guard_block291, !dbg !446

after_check290:                                   ; preds = %match287
  br label %noerr_block292, !dbg !446

guard_block291:                                   ; preds = %assign_optional289
  %198 = load i64, ptr %error_var276, align 8, !dbg !446
  store i64 %198, ptr %error_var248, align 8, !dbg !446
  br label %guard_block323, !dbg !446

noerr_block292:                                   ; preds = %after_check290
  %ptradd293 = getelementptr inbounds i8, ptr %out249, i64 8, !dbg !447
  %199 = load i64, ptr %ptradd293, align 8, !dbg !447
  %200 = inttoptr i64 %199 to ptr, !dbg !447
  %type296 = load ptr, ptr %.cachedtype295, align 8, !dbg !339
  %201 = icmp eq ptr %200, %type296, !dbg !339
  br i1 %201, label %cache_hit299, label %cache_miss297, !dbg !339

cache_miss297:                                    ; preds = %noerr_block292
  %ptradd298 = getelementptr inbounds i8, ptr %200, i64 16, !dbg !339
  %202 = load ptr, ptr %ptradd298, align 8, !dbg !339
  %203 = call ptr @.dyn_search(ptr %202, ptr @"$sel.flush"), !dbg !339
  store ptr %203, ptr %.inlinecache294, align 8, !dbg !339
  store ptr %200, ptr %.cachedtype295, align 8, !dbg !339
  br label %204, !dbg !339

cache_hit299:                                     ; preds = %noerr_block292
  %cache_hit_fn300 = load ptr, ptr %.inlinecache294, align 8, !dbg !339
  br label %204, !dbg !339

204:                                              ; preds = %cache_hit299, %cache_miss297
  %fn_phi301 = phi ptr [ %cache_hit_fn300, %cache_hit299 ], [ %203, %cache_miss297 ], !dbg !339
  %i2b302 = icmp ne ptr %fn_phi301, null, !dbg !339
  br i1 %i2b302, label %if.then303, label %if.exit321, !dbg !339

if.then303:                                       ; preds = %204
  %ptradd305 = getelementptr inbounds i8, ptr %out249, i64 8, !dbg !448
  %205 = load i64, ptr %ptradd305, align 8, !dbg !448
  %206 = inttoptr i64 %205 to ptr, !dbg !448
  %type308 = load ptr, ptr %.cachedtype307, align 8, !dbg !339
  %207 = icmp eq ptr %206, %type308, !dbg !339
  br i1 %207, label %cache_hit311, label %cache_miss309, !dbg !339

cache_miss309:                                    ; preds = %if.then303
  %ptradd310 = getelementptr inbounds i8, ptr %206, i64 16, !dbg !339
  %208 = load ptr, ptr %ptradd310, align 8, !dbg !339
  %209 = call ptr @.dyn_search(ptr %208, ptr @"$sel.flush"), !dbg !339
  store ptr %209, ptr %.inlinecache306, align 8, !dbg !339
  store ptr %206, ptr %.cachedtype307, align 8, !dbg !339
  br label %210, !dbg !339

cache_hit311:                                     ; preds = %if.then303
  %cache_hit_fn312 = load ptr, ptr %.inlinecache306, align 8, !dbg !339
  br label %210, !dbg !339

210:                                              ; preds = %cache_hit311, %cache_miss309
  %fn_phi313 = phi ptr [ %cache_hit_fn312, %cache_hit311 ], [ %209, %cache_miss309 ], !dbg !339
  %211 = icmp eq ptr %fn_phi313, null, !dbg !339
  br i1 %211, label %missing_function314, label %match315, !dbg !339

missing_function314:                              ; preds = %210
  %212 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !448
  call void %212(ptr @.panic_msg.38, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 176) #6, !dbg !448
  unreachable, !dbg !448

match315:                                         ; preds = %210
  %213 = load ptr, ptr %out249, align 8, !dbg !448
  %214 = call i64 %fn_phi313(ptr %213), !dbg !448
  %not_err316 = icmp eq i64 %214, 0, !dbg !448
  %215 = call i1 @llvm.expect.i1(i1 %not_err316, i1 true), !dbg !448
  br i1 %215, label %after_check318, label %assign_optional317, !dbg !448

assign_optional317:                               ; preds = %match315
  store i64 %214, ptr %error_var304, align 8, !dbg !448
  br label %guard_block319, !dbg !448

after_check318:                                   ; preds = %match315
  br label %noerr_block320, !dbg !448

guard_block319:                                   ; preds = %assign_optional317
  %216 = load i64, ptr %error_var304, align 8, !dbg !448
  store i64 %216, ptr %error_var248, align 8, !dbg !448
  br label %guard_block323, !dbg !448

noerr_block320:                                   ; preds = %after_check318
  br label %if.exit321, !dbg !448

if.exit321:                                       ; preds = %noerr_block320, %204
  %217 = load i64, ptr %len251, align 8, !dbg !449
  %add322 = add i64 %217, 1, !dbg !449
  br label %noerr_block324, !dbg !449

guard_block323:                                   ; preds = %guard_block319, %guard_block291, %guard_block274
  %218 = load ptr, ptr %state, align 8, !dbg !450
  call void @std.core.mem.allocator.pop_pool(ptr %218) #7, !dbg !452
  %219 = load i64, ptr %error_var248, align 8, !dbg !452
  ret i64 %219, !dbg !452

noerr_block324:                                   ; preds = %if.exit321
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out326, ptr align 8 %out, i32 16, i1 false)
  store %"char[]" { ptr @.str.43, i64 64 }, ptr %x327, align 8
    #dbg_declare(ptr %len328, !453, !DIExpression(), !455)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out330, ptr align 8 %out326, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x331, ptr align 8 %x327, i32 16, i1 false)
  %ptradd333 = getelementptr inbounds i8, ptr %out330, i64 8, !dbg !457
  %220 = load i64, ptr %ptradd333, align 8, !dbg !457
  %221 = inttoptr i64 %220 to ptr, !dbg !457
  %type336 = load ptr, ptr %.cachedtype335, align 8, !dbg !339
  %222 = icmp eq ptr %221, %type336, !dbg !339
  br i1 %222, label %cache_hit339, label %cache_miss337, !dbg !339

cache_miss337:                                    ; preds = %noerr_block324
  %ptradd338 = getelementptr inbounds i8, ptr %221, i64 16, !dbg !339
  %223 = load ptr, ptr %ptradd338, align 8, !dbg !339
  %224 = call ptr @.dyn_search(ptr %223, ptr @"$sel.write"), !dbg !339
  store ptr %224, ptr %.inlinecache334, align 8, !dbg !339
  store ptr %221, ptr %.cachedtype335, align 8, !dbg !339
  br label %225, !dbg !339

cache_hit339:                                     ; preds = %noerr_block324
  %cache_hit_fn340 = load ptr, ptr %.inlinecache334, align 8, !dbg !339
  br label %225, !dbg !339

225:                                              ; preds = %cache_hit339, %cache_miss337
  %fn_phi341 = phi ptr [ %cache_hit_fn340, %cache_hit339 ], [ %224, %cache_miss337 ], !dbg !339
  %226 = icmp eq ptr %fn_phi341, null, !dbg !339
  br i1 %226, label %missing_function342, label %match343, !dbg !339

missing_function342:                              ; preds = %225
  %227 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !460
  call void %227(ptr @.panic_msg.35, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 116) #6, !dbg !460
  unreachable, !dbg !460

match343:                                         ; preds = %225
  %228 = load ptr, ptr %out330, align 8
  %lo345 = load ptr, ptr %x331, align 8
  %ptradd346 = getelementptr inbounds i8, ptr %x331, i64 8
  %hi347 = load i64, ptr %ptradd346, align 8
  %229 = call i64 %fn_phi341(ptr %retparam344, ptr %228, ptr %lo345, i64 %hi347), !dbg !460
  %not_err348 = icmp eq i64 %229, 0, !dbg !460
  %230 = call i1 @llvm.expect.i1(i1 %not_err348, i1 true), !dbg !460
  br i1 %230, label %after_check350, label %assign_optional349, !dbg !460

assign_optional349:                               ; preds = %match343
  store i64 %229, ptr %error_var329, align 8, !dbg !460
  br label %guard_block351, !dbg !460

after_check350:                                   ; preds = %match343
  br label %noerr_block352, !dbg !460

guard_block351:                                   ; preds = %assign_optional349
  %231 = load i64, ptr %error_var329, align 8, !dbg !460
  store i64 %231, ptr %error_var325, align 8, !dbg !460
  br label %guard_block400, !dbg !460

noerr_block352:                                   ; preds = %after_check350
  %232 = load i64, ptr %retparam344, align 8, !dbg !460
  store i64 %232, ptr %len328, align 8, !dbg !460
  %ptradd354 = getelementptr inbounds i8, ptr %out326, i64 8, !dbg !461
  %233 = load i64, ptr %ptradd354, align 8, !dbg !461
  %234 = inttoptr i64 %233 to ptr, !dbg !461
  %type357 = load ptr, ptr %.cachedtype356, align 8, !dbg !339
  %235 = icmp eq ptr %234, %type357, !dbg !339
  br i1 %235, label %cache_hit360, label %cache_miss358, !dbg !339

cache_miss358:                                    ; preds = %noerr_block352
  %ptradd359 = getelementptr inbounds i8, ptr %234, i64 16, !dbg !339
  %236 = load ptr, ptr %ptradd359, align 8, !dbg !339
  %237 = call ptr @.dyn_search(ptr %236, ptr @"$sel.write_byte"), !dbg !339
  store ptr %237, ptr %.inlinecache355, align 8, !dbg !339
  store ptr %234, ptr %.cachedtype356, align 8, !dbg !339
  br label %238, !dbg !339

cache_hit360:                                     ; preds = %noerr_block352
  %cache_hit_fn361 = load ptr, ptr %.inlinecache355, align 8, !dbg !339
  br label %238, !dbg !339

238:                                              ; preds = %cache_hit360, %cache_miss358
  %fn_phi362 = phi ptr [ %cache_hit_fn361, %cache_hit360 ], [ %237, %cache_miss358 ], !dbg !339
  %239 = icmp eq ptr %fn_phi362, null, !dbg !339
  br i1 %239, label %missing_function363, label %match364, !dbg !339

missing_function363:                              ; preds = %238
  %240 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !462
  call void %240(ptr @.panic_msg.37, i64 47, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 173) #6, !dbg !462
  unreachable, !dbg !462

match364:                                         ; preds = %238
  %241 = load ptr, ptr %out326, align 8, !dbg !462
  %242 = call i64 %fn_phi362(ptr %241, i8 zeroext 10), !dbg !462
  %not_err365 = icmp eq i64 %242, 0, !dbg !462
  %243 = call i1 @llvm.expect.i1(i1 %not_err365, i1 true), !dbg !462
  br i1 %243, label %after_check367, label %assign_optional366, !dbg !462

assign_optional366:                               ; preds = %match364
  store i64 %242, ptr %error_var353, align 8, !dbg !462
  br label %guard_block368, !dbg !462

after_check367:                                   ; preds = %match364
  br label %noerr_block369, !dbg !462

guard_block368:                                   ; preds = %assign_optional366
  %244 = load i64, ptr %error_var353, align 8, !dbg !462
  store i64 %244, ptr %error_var325, align 8, !dbg !462
  br label %guard_block400, !dbg !462

noerr_block369:                                   ; preds = %after_check367
  %ptradd370 = getelementptr inbounds i8, ptr %out326, i64 8, !dbg !463
  %245 = load i64, ptr %ptradd370, align 8, !dbg !463
  %246 = inttoptr i64 %245 to ptr, !dbg !463
  %type373 = load ptr, ptr %.cachedtype372, align 8, !dbg !339
  %247 = icmp eq ptr %246, %type373, !dbg !339
  br i1 %247, label %cache_hit376, label %cache_miss374, !dbg !339

cache_miss374:                                    ; preds = %noerr_block369
  %ptradd375 = getelementptr inbounds i8, ptr %246, i64 16, !dbg !339
  %248 = load ptr, ptr %ptradd375, align 8, !dbg !339
  %249 = call ptr @.dyn_search(ptr %248, ptr @"$sel.flush"), !dbg !339
  store ptr %249, ptr %.inlinecache371, align 8, !dbg !339
  store ptr %246, ptr %.cachedtype372, align 8, !dbg !339
  br label %250, !dbg !339

cache_hit376:                                     ; preds = %noerr_block369
  %cache_hit_fn377 = load ptr, ptr %.inlinecache371, align 8, !dbg !339
  br label %250, !dbg !339

250:                                              ; preds = %cache_hit376, %cache_miss374
  %fn_phi378 = phi ptr [ %cache_hit_fn377, %cache_hit376 ], [ %249, %cache_miss374 ], !dbg !339
  %i2b379 = icmp ne ptr %fn_phi378, null, !dbg !339
  br i1 %i2b379, label %if.then380, label %if.exit398, !dbg !339

if.then380:                                       ; preds = %250
  %ptradd382 = getelementptr inbounds i8, ptr %out326, i64 8, !dbg !464
  %251 = load i64, ptr %ptradd382, align 8, !dbg !464
  %252 = inttoptr i64 %251 to ptr, !dbg !464
  %type385 = load ptr, ptr %.cachedtype384, align 8, !dbg !339
  %253 = icmp eq ptr %252, %type385, !dbg !339
  br i1 %253, label %cache_hit388, label %cache_miss386, !dbg !339

cache_miss386:                                    ; preds = %if.then380
  %ptradd387 = getelementptr inbounds i8, ptr %252, i64 16, !dbg !339
  %254 = load ptr, ptr %ptradd387, align 8, !dbg !339
  %255 = call ptr @.dyn_search(ptr %254, ptr @"$sel.flush"), !dbg !339
  store ptr %255, ptr %.inlinecache383, align 8, !dbg !339
  store ptr %252, ptr %.cachedtype384, align 8, !dbg !339
  br label %256, !dbg !339

cache_hit388:                                     ; preds = %if.then380
  %cache_hit_fn389 = load ptr, ptr %.inlinecache383, align 8, !dbg !339
  br label %256, !dbg !339

256:                                              ; preds = %cache_hit388, %cache_miss386
  %fn_phi390 = phi ptr [ %cache_hit_fn389, %cache_hit388 ], [ %255, %cache_miss386 ], !dbg !339
  %257 = icmp eq ptr %fn_phi390, null, !dbg !339
  br i1 %257, label %missing_function391, label %match392, !dbg !339

missing_function391:                              ; preds = %256
  %258 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !464
  call void %258(ptr @.panic_msg.38, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 176) #6, !dbg !464
  unreachable, !dbg !464

match392:                                         ; preds = %256
  %259 = load ptr, ptr %out326, align 8, !dbg !464
  %260 = call i64 %fn_phi390(ptr %259), !dbg !464
  %not_err393 = icmp eq i64 %260, 0, !dbg !464
  %261 = call i1 @llvm.expect.i1(i1 %not_err393, i1 true), !dbg !464
  br i1 %261, label %after_check395, label %assign_optional394, !dbg !464

assign_optional394:                               ; preds = %match392
  store i64 %260, ptr %error_var381, align 8, !dbg !464
  br label %guard_block396, !dbg !464

after_check395:                                   ; preds = %match392
  br label %noerr_block397, !dbg !464

guard_block396:                                   ; preds = %assign_optional394
  %262 = load i64, ptr %error_var381, align 8, !dbg !464
  store i64 %262, ptr %error_var325, align 8, !dbg !464
  br label %guard_block400, !dbg !464

noerr_block397:                                   ; preds = %after_check395
  br label %if.exit398, !dbg !464

if.exit398:                                       ; preds = %noerr_block397, %250
  %263 = load i64, ptr %len328, align 8, !dbg !465
  %add399 = add i64 %263, 1, !dbg !465
  br label %noerr_block401, !dbg !465

guard_block400:                                   ; preds = %guard_block396, %guard_block368, %guard_block351
  %264 = load ptr, ptr %state, align 8, !dbg !466
  call void @std.core.mem.allocator.pop_pool(ptr %264) #7, !dbg !468
  %265 = load i64, ptr %error_var325, align 8, !dbg !468
  ret i64 %265, !dbg !468

noerr_block401:                                   ; preds = %if.exit398
  %ptradd402 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !469
  %266 = load i64, ptr %ptradd402, align 8, !dbg !469
    #dbg_declare(ptr %.anon403, !471, !DIExpression(), !472)
  store i64 0, ptr %.anon403, align 8, !dbg !472
  br label %loop.cond404, !dbg !472

loop.cond404:                                     ; preds = %noerr_block472, %noerr_block401
  %267 = load i64, ptr %.anon403, align 8, !dbg !472
  %lt405 = icmp ult i64 %267, %266, !dbg !472
  br i1 %lt405, label %loop.body406, label %loop.exit474, !dbg !472

loop.body406:                                     ; preds = %loop.cond404
    #dbg_declare(ptr %i407, !473, !DIExpression(), !475)
  %268 = load i64, ptr %.anon403, align 8, !dbg !475
  store i64 %268, ptr %i407, align 8, !dbg !475
    #dbg_declare(ptr %allocation408, !476, !DIExpression(), !477)
  %ptradd409 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !478
  %269 = load i64, ptr %ptradd409, align 8, !dbg !478
  %270 = load ptr, ptr %allocs, align 8, !dbg !478
  %271 = load i64, ptr %.anon403, align 8, !dbg !475
  %ge410 = icmp uge i64 %271, %269, !dbg !475
  %272 = call i1 @llvm.expect.i1(i1 %ge410, i1 false), !dbg !475
  br i1 %272, label %panic411, label %checkok418, !dbg !475

checkok418:                                       ; preds = %loop.body406
  %ptroffset419 = getelementptr inbounds [144 x i8], ptr %270, i64 %271, !dbg !475
  store ptr %ptroffset419, ptr %allocation408, align 8, !dbg !475
  %273 = load i64, ptr %entries, align 8, !dbg !479
  %add420 = add i64 %273, 1, !dbg !479
  store i64 %add420, ptr %entries, align 8, !dbg !479
  %274 = load i64, ptr %total, align 8, !dbg !481
  %275 = load ptr, ptr %allocation408, align 8, !dbg !482
  %ptradd421 = getelementptr inbounds i8, ptr %275, i64 8, !dbg !482
  %276 = load i64, ptr %ptradd421, align 8, !dbg !482
  %add422 = add i64 %274, %276, !dbg !481
  store i64 %add422, ptr %total, align 8, !dbg !481
    #dbg_declare(ptr %backtraces, !483, !DIExpression(), !508)
  call void @llvm.memset.p0.i64(ptr align 8 %backtraces, i8 0, i64 40, i1 false), !dbg !508
    #dbg_declare(ptr %trace, !509, !DIExpression(), !510)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %trace, ptr align 8 @std.os.backtrace.BACKTRACE_UNKNOWN, i32 88, i1 false), !dbg !511
  %277 = load ptr, ptr %allocation408, align 8, !dbg !512
  %ptradd423 = getelementptr inbounds i8, ptr %277, i64 16, !dbg !512
  %ptradd424 = getelementptr inbounds i8, ptr %ptradd423, i64 24, !dbg !513
  %278 = load ptr, ptr %ptradd424, align 8, !dbg !513
  %i2b425 = icmp ne ptr %278, null, !dbg !513
  br i1 %i2b425, label %if.then426, label %if.exit437, !dbg !513

if.then426:                                       ; preds = %checkok418
    #dbg_declare(ptr %self427, !514, !DIExpression(), !517)
  %279 = load ptr, ptr %allocation408, align 8, !dbg !518
  %ptradd428 = getelementptr inbounds i8, ptr %279, i64 16, !dbg !518
  %ptradd429 = getelementptr inbounds i8, ptr %ptradd428, i64 24, !dbg !518
  %280 = insertvalue %"void*[]" undef, ptr %ptradd429, 0, !dbg !518
  %281 = insertvalue %"void*[]" %280, i64 1, 1, !dbg !518
  %lo431 = load i64, ptr @std.core.mem.allocator.current_temp, align 8
  %hi432 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8
  %282 = call i64 @std.os.linux.symbolize_backtrace(ptr %retparam430, i64 %lo431, ptr %hi432, ptr %ptradd429, i64 1), !dbg !517
  %not_err433 = icmp eq i64 %282, 0, !dbg !517
  %283 = call i1 @llvm.expect.i1(i1 %not_err433, i1 true), !dbg !517
  br i1 %283, label %after_check435, label %assign_optional434, !dbg !517

assign_optional434:                               ; preds = %if.then426
  store i64 %282, ptr %self.f, align 8, !dbg !517
  br label %after_assign, !dbg !517

after_check435:                                   ; preds = %if.then426
  store ptr %retparam430, ptr %self427, align 8, !dbg !517
  store i64 0, ptr %self.f, align 8, !dbg !517
  br label %after_assign, !dbg !517

after_assign:                                     ; preds = %after_check435, %assign_optional434
  %284 = load ptr, ptr %self427, align 8, !dbg !519
  %285 = load i64, ptr %284, align 8, !dbg !519
  %lt436 = icmp ult i64 0, %285, !dbg !517
  br i1 %lt436, label %assert_ok, label %assert_fail, !dbg !517

assert_fail:                                      ; preds = %after_assign
  %286 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !517
  call void %286(ptr @.panic_msg.44, i64 62, ptr @.file, i64 21, ptr @.func.33, i64 13, i32 162) #6, !dbg !517
  unreachable, !dbg !517

assert_ok:                                        ; preds = %after_assign
  %287 = load ptr, ptr %self427, align 8
  call void @"std_collections_list$std.os.backtrace.Backtrace$.List.get"(ptr sret(%Backtrace) align 8 %sretparam, ptr %287, i64 0) #7, !dbg !517
  br label %phi_block, !dbg !517

phi_block:                                        ; preds = %assert_ok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %trace, ptr align 8 %sretparam, i32 88, i1 false), !dbg !520
  br label %if.exit437, !dbg !520

if.exit437:                                       ; preds = %phi_block, %checkok418
  %ptradd438 = getelementptr inbounds i8, ptr %trace, i64 8, !dbg !521
  %ptradd439 = getelementptr inbounds i8, ptr %ptradd438, i64 8, !dbg !521
  %288 = load i64, ptr %ptradd439, align 8, !dbg !521
  %i2b440 = icmp ne i64 %288, 0, !dbg !521
  br i1 %i2b440, label %if.then441, label %if.exit442, !dbg !521

if.then441:                                       ; preds = %if.exit437
  store i8 1, ptr %leaks, align 1, !dbg !522
  br label %if.exit442, !dbg !522

if.exit442:                                       ; preds = %if.then441, %if.exit437
  %289 = load ptr, ptr %allocation408, align 8, !dbg !523
  %ptradd445 = getelementptr inbounds i8, ptr %289, i64 8, !dbg !523
  %290 = insertvalue %any undef, ptr %ptradd445, 0, !dbg !523
  %291 = insertvalue %any %290, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !523
  store %any %291, ptr %varargslots444, align 16, !dbg !523
  %292 = load ptr, ptr %allocation408, align 8, !dbg !524
  %293 = insertvalue %any undef, ptr %292, 0, !dbg !524
  %294 = insertvalue %any %293, i64 ptrtoint (ptr @"$ct.p$void" to i64), 1, !dbg !524
  %ptradd446 = getelementptr inbounds i8, ptr %varargslots444, i64 16, !dbg !524
  store %any %294, ptr %ptradd446, align 16, !dbg !524
  %ptradd447 = getelementptr inbounds i8, ptr %trace, i64 8, !dbg !525
  %ptradd448 = getelementptr inbounds i8, ptr %ptradd447, i64 8, !dbg !525
  %295 = load i64, ptr %ptradd448, align 8, !dbg !525
  %i2b449 = icmp ne i64 %295, 0, !dbg !525
  br i1 %i2b449, label %cond.lhs, label %cond.rhs, !dbg !525

cond.lhs:                                         ; preds = %if.exit442
  %ptradd450 = getelementptr inbounds i8, ptr %trace, i64 8, !dbg !526
  %296 = load %"char[]", ptr %ptradd450, align 8, !dbg !526
  br label %cond.phi, !dbg !526

cond.rhs:                                         ; preds = %if.exit442
  br label %cond.phi, !dbg !527

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi %"char[]" [ %296, %cond.lhs ], [ { ptr @.str.46, i64 3 }, %cond.rhs ], !dbg !527
  store %"char[]" %val, ptr %taddr451, align 8
  %297 = insertvalue %any undef, ptr %taddr451, 0, !dbg !525
  %298 = insertvalue %any %297, i64 ptrtoint (ptr @"$ct.String" to i64), 1, !dbg !525
  %ptradd452 = getelementptr inbounds i8, ptr %varargslots444, i64 32, !dbg !525
  store %any %298, ptr %ptradd452, align 16, !dbg !525
  %ptradd453 = getelementptr inbounds i8, ptr %trace, i64 56, !dbg !528
  %299 = load i32, ptr %ptradd453, align 8, !dbg !528
  %i2b454 = icmp ne i32 %299, 0, !dbg !528
  br i1 %i2b454, label %cond.lhs455, label %cond.rhs457, !dbg !528

cond.lhs455:                                      ; preds = %cond.phi
  %ptradd456 = getelementptr inbounds i8, ptr %trace, i64 56, !dbg !529
  %300 = load i32, ptr %ptradd456, align 8, !dbg !529
  br label %cond.phi458, !dbg !529

cond.rhs457:                                      ; preds = %cond.phi
  br label %cond.phi458, !dbg !530

cond.phi458:                                      ; preds = %cond.rhs457, %cond.lhs455
  %val459 = phi i32 [ %300, %cond.lhs455 ], [ 0, %cond.rhs457 ], !dbg !530
  store i32 %val459, ptr %taddr460, align 4
  %301 = insertvalue %any undef, ptr %taddr460, 0, !dbg !528
  %302 = insertvalue %any %301, i64 ptrtoint (ptr @"$ct.int" to i64), 1, !dbg !528
  %ptradd461 = getelementptr inbounds i8, ptr %varargslots444, i64 48, !dbg !528
  store %any %302, ptr %ptradd461, align 16, !dbg !528
  %303 = insertvalue %"any[]" undef, ptr %varargslots444, 0, !dbg !528
  %"$$temp462" = insertvalue %"any[]" %303, i64 4, 1, !dbg !528
  %lo464 = load i64, ptr %out, align 8
  %ptradd465 = getelementptr inbounds i8, ptr %out, i64 8
  %hi466 = load ptr, ptr %ptradd465, align 8
  store %"any[]" %"$$temp462", ptr %indirectarg467, align 8
  %304 = call i64 @std.io.fprintfn(ptr %retparam463, i64 %lo464, ptr %hi466, ptr @.str.45, i64 17, ptr byval(%"any[]") align 8 %indirectarg467), !dbg !531
  %not_err468 = icmp eq i64 %304, 0, !dbg !531
  %305 = call i1 @llvm.expect.i1(i1 %not_err468, i1 true), !dbg !531
  br i1 %305, label %after_check470, label %assign_optional469, !dbg !531

assign_optional469:                               ; preds = %cond.phi458
  store i64 %304, ptr %error_var443, align 8, !dbg !531
  br label %guard_block471, !dbg !531

after_check470:                                   ; preds = %cond.phi458
  br label %noerr_block472, !dbg !531

guard_block471:                                   ; preds = %assign_optional469
  %306 = load ptr, ptr %state, align 8, !dbg !532
  call void @std.core.mem.allocator.pop_pool(ptr %306) #7, !dbg !534
  %307 = load i64, ptr %error_var443, align 8, !dbg !534
  ret i64 %307, !dbg !534

noerr_block472:                                   ; preds = %after_check470
  %308 = load i64, ptr %.anon403, align 8, !dbg !472
  %addnuw473 = add nuw i64 %308, 1, !dbg !472
  store i64 %addnuw473, ptr %.anon403, align 8, !dbg !472
  br label %loop.cond404, !dbg !472

loop.exit474:                                     ; preds = %loop.cond404
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out476, ptr align 8 %out, i32 16, i1 false)
  store %"char[]" { ptr @.str.47, i64 83 }, ptr %x477, align 8
    #dbg_declare(ptr %len478, !535, !DIExpression(), !537)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out480, ptr align 8 %out476, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x481, ptr align 8 %x477, i32 16, i1 false)
  %ptradd483 = getelementptr inbounds i8, ptr %out480, i64 8, !dbg !539
  %309 = load i64, ptr %ptradd483, align 8, !dbg !539
  %310 = inttoptr i64 %309 to ptr, !dbg !539
  %type486 = load ptr, ptr %.cachedtype485, align 8, !dbg !339
  %311 = icmp eq ptr %310, %type486, !dbg !339
  br i1 %311, label %cache_hit489, label %cache_miss487, !dbg !339

cache_miss487:                                    ; preds = %loop.exit474
  %ptradd488 = getelementptr inbounds i8, ptr %310, i64 16, !dbg !339
  %312 = load ptr, ptr %ptradd488, align 8, !dbg !339
  %313 = call ptr @.dyn_search(ptr %312, ptr @"$sel.write"), !dbg !339
  store ptr %313, ptr %.inlinecache484, align 8, !dbg !339
  store ptr %310, ptr %.cachedtype485, align 8, !dbg !339
  br label %314, !dbg !339

cache_hit489:                                     ; preds = %loop.exit474
  %cache_hit_fn490 = load ptr, ptr %.inlinecache484, align 8, !dbg !339
  br label %314, !dbg !339

314:                                              ; preds = %cache_hit489, %cache_miss487
  %fn_phi491 = phi ptr [ %cache_hit_fn490, %cache_hit489 ], [ %313, %cache_miss487 ], !dbg !339
  %315 = icmp eq ptr %fn_phi491, null, !dbg !339
  br i1 %315, label %missing_function492, label %match493, !dbg !339

missing_function492:                              ; preds = %314
  %316 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !542
  call void %316(ptr @.panic_msg.35, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 116) #6, !dbg !542
  unreachable, !dbg !542

match493:                                         ; preds = %314
  %317 = load ptr, ptr %out480, align 8
  %lo495 = load ptr, ptr %x481, align 8
  %ptradd496 = getelementptr inbounds i8, ptr %x481, i64 8
  %hi497 = load i64, ptr %ptradd496, align 8
  %318 = call i64 %fn_phi491(ptr %retparam494, ptr %317, ptr %lo495, i64 %hi497), !dbg !542
  %not_err498 = icmp eq i64 %318, 0, !dbg !542
  %319 = call i1 @llvm.expect.i1(i1 %not_err498, i1 true), !dbg !542
  br i1 %319, label %after_check500, label %assign_optional499, !dbg !542

assign_optional499:                               ; preds = %match493
  store i64 %318, ptr %error_var479, align 8, !dbg !542
  br label %guard_block501, !dbg !542

after_check500:                                   ; preds = %match493
  br label %noerr_block502, !dbg !542

guard_block501:                                   ; preds = %assign_optional499
  %320 = load i64, ptr %error_var479, align 8, !dbg !542
  store i64 %320, ptr %error_var475, align 8, !dbg !542
  br label %guard_block550, !dbg !542

noerr_block502:                                   ; preds = %after_check500
  %321 = load i64, ptr %retparam494, align 8, !dbg !542
  store i64 %321, ptr %len478, align 8, !dbg !542
  %ptradd504 = getelementptr inbounds i8, ptr %out476, i64 8, !dbg !543
  %322 = load i64, ptr %ptradd504, align 8, !dbg !543
  %323 = inttoptr i64 %322 to ptr, !dbg !543
  %type507 = load ptr, ptr %.cachedtype506, align 8, !dbg !339
  %324 = icmp eq ptr %323, %type507, !dbg !339
  br i1 %324, label %cache_hit510, label %cache_miss508, !dbg !339

cache_miss508:                                    ; preds = %noerr_block502
  %ptradd509 = getelementptr inbounds i8, ptr %323, i64 16, !dbg !339
  %325 = load ptr, ptr %ptradd509, align 8, !dbg !339
  %326 = call ptr @.dyn_search(ptr %325, ptr @"$sel.write_byte"), !dbg !339
  store ptr %326, ptr %.inlinecache505, align 8, !dbg !339
  store ptr %323, ptr %.cachedtype506, align 8, !dbg !339
  br label %327, !dbg !339

cache_hit510:                                     ; preds = %noerr_block502
  %cache_hit_fn511 = load ptr, ptr %.inlinecache505, align 8, !dbg !339
  br label %327, !dbg !339

327:                                              ; preds = %cache_hit510, %cache_miss508
  %fn_phi512 = phi ptr [ %cache_hit_fn511, %cache_hit510 ], [ %326, %cache_miss508 ], !dbg !339
  %328 = icmp eq ptr %fn_phi512, null, !dbg !339
  br i1 %328, label %missing_function513, label %match514, !dbg !339

missing_function513:                              ; preds = %327
  %329 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !544
  call void %329(ptr @.panic_msg.37, i64 47, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 173) #6, !dbg !544
  unreachable, !dbg !544

match514:                                         ; preds = %327
  %330 = load ptr, ptr %out476, align 8, !dbg !544
  %331 = call i64 %fn_phi512(ptr %330, i8 zeroext 10), !dbg !544
  %not_err515 = icmp eq i64 %331, 0, !dbg !544
  %332 = call i1 @llvm.expect.i1(i1 %not_err515, i1 true), !dbg !544
  br i1 %332, label %after_check517, label %assign_optional516, !dbg !544

assign_optional516:                               ; preds = %match514
  store i64 %331, ptr %error_var503, align 8, !dbg !544
  br label %guard_block518, !dbg !544

after_check517:                                   ; preds = %match514
  br label %noerr_block519, !dbg !544

guard_block518:                                   ; preds = %assign_optional516
  %333 = load i64, ptr %error_var503, align 8, !dbg !544
  store i64 %333, ptr %error_var475, align 8, !dbg !544
  br label %guard_block550, !dbg !544

noerr_block519:                                   ; preds = %after_check517
  %ptradd520 = getelementptr inbounds i8, ptr %out476, i64 8, !dbg !545
  %334 = load i64, ptr %ptradd520, align 8, !dbg !545
  %335 = inttoptr i64 %334 to ptr, !dbg !545
  %type523 = load ptr, ptr %.cachedtype522, align 8, !dbg !339
  %336 = icmp eq ptr %335, %type523, !dbg !339
  br i1 %336, label %cache_hit526, label %cache_miss524, !dbg !339

cache_miss524:                                    ; preds = %noerr_block519
  %ptradd525 = getelementptr inbounds i8, ptr %335, i64 16, !dbg !339
  %337 = load ptr, ptr %ptradd525, align 8, !dbg !339
  %338 = call ptr @.dyn_search(ptr %337, ptr @"$sel.flush"), !dbg !339
  store ptr %338, ptr %.inlinecache521, align 8, !dbg !339
  store ptr %335, ptr %.cachedtype522, align 8, !dbg !339
  br label %339, !dbg !339

cache_hit526:                                     ; preds = %noerr_block519
  %cache_hit_fn527 = load ptr, ptr %.inlinecache521, align 8, !dbg !339
  br label %339, !dbg !339

339:                                              ; preds = %cache_hit526, %cache_miss524
  %fn_phi528 = phi ptr [ %cache_hit_fn527, %cache_hit526 ], [ %338, %cache_miss524 ], !dbg !339
  %i2b529 = icmp ne ptr %fn_phi528, null, !dbg !339
  br i1 %i2b529, label %if.then530, label %if.exit548, !dbg !339

if.then530:                                       ; preds = %339
  %ptradd532 = getelementptr inbounds i8, ptr %out476, i64 8, !dbg !546
  %340 = load i64, ptr %ptradd532, align 8, !dbg !546
  %341 = inttoptr i64 %340 to ptr, !dbg !546
  %type535 = load ptr, ptr %.cachedtype534, align 8, !dbg !339
  %342 = icmp eq ptr %341, %type535, !dbg !339
  br i1 %342, label %cache_hit538, label %cache_miss536, !dbg !339

cache_miss536:                                    ; preds = %if.then530
  %ptradd537 = getelementptr inbounds i8, ptr %341, i64 16, !dbg !339
  %343 = load ptr, ptr %ptradd537, align 8, !dbg !339
  %344 = call ptr @.dyn_search(ptr %343, ptr @"$sel.flush"), !dbg !339
  store ptr %344, ptr %.inlinecache533, align 8, !dbg !339
  store ptr %341, ptr %.cachedtype534, align 8, !dbg !339
  br label %345, !dbg !339

cache_hit538:                                     ; preds = %if.then530
  %cache_hit_fn539 = load ptr, ptr %.inlinecache533, align 8, !dbg !339
  br label %345, !dbg !339

345:                                              ; preds = %cache_hit538, %cache_miss536
  %fn_phi540 = phi ptr [ %cache_hit_fn539, %cache_hit538 ], [ %344, %cache_miss536 ], !dbg !339
  %346 = icmp eq ptr %fn_phi540, null, !dbg !339
  br i1 %346, label %missing_function541, label %match542, !dbg !339

missing_function541:                              ; preds = %345
  %347 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !546
  call void %347(ptr @.panic_msg.38, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 176) #6, !dbg !546
  unreachable, !dbg !546

match542:                                         ; preds = %345
  %348 = load ptr, ptr %out476, align 8, !dbg !546
  %349 = call i64 %fn_phi540(ptr %348), !dbg !546
  %not_err543 = icmp eq i64 %349, 0, !dbg !546
  %350 = call i1 @llvm.expect.i1(i1 %not_err543, i1 true), !dbg !546
  br i1 %350, label %after_check545, label %assign_optional544, !dbg !546

assign_optional544:                               ; preds = %match542
  store i64 %349, ptr %error_var531, align 8, !dbg !546
  br label %guard_block546, !dbg !546

after_check545:                                   ; preds = %match542
  br label %noerr_block547, !dbg !546

guard_block546:                                   ; preds = %assign_optional544
  %351 = load i64, ptr %error_var531, align 8, !dbg !546
  store i64 %351, ptr %error_var475, align 8, !dbg !546
  br label %guard_block550, !dbg !546

noerr_block547:                                   ; preds = %after_check545
  br label %if.exit548, !dbg !546

if.exit548:                                       ; preds = %noerr_block547, %339
  %352 = load i64, ptr %len478, align 8, !dbg !547
  %add549 = add i64 %352, 1, !dbg !547
  br label %noerr_block551, !dbg !547

guard_block550:                                   ; preds = %guard_block546, %guard_block518, %guard_block501
  %353 = load ptr, ptr %state, align 8, !dbg !548
  call void @std.core.mem.allocator.pop_pool(ptr %353) #7, !dbg !550
  %354 = load i64, ptr %error_var475, align 8, !dbg !550
  ret i64 %354, !dbg !550

noerr_block551:                                   ; preds = %if.exit548
  br label %if.exit552, !dbg !550

if.exit552:                                       ; preds = %noerr_block551, %noerr_block247
  br label %if.exit631, !dbg !550

if.else553:                                       ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out555, ptr align 8 %out, i32 16, i1 false)
  store %"char[]" { ptr @.str.48, i64 24 }, ptr %x556, align 8
    #dbg_declare(ptr %len557, !551, !DIExpression(), !553)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out559, ptr align 8 %out555, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x560, ptr align 8 %x556, i32 16, i1 false)
  %ptradd562 = getelementptr inbounds i8, ptr %out559, i64 8, !dbg !556
  %355 = load i64, ptr %ptradd562, align 8, !dbg !556
  %356 = inttoptr i64 %355 to ptr, !dbg !556
  %type565 = load ptr, ptr %.cachedtype564, align 8, !dbg !339
  %357 = icmp eq ptr %356, %type565, !dbg !339
  br i1 %357, label %cache_hit568, label %cache_miss566, !dbg !339

cache_miss566:                                    ; preds = %if.else553
  %ptradd567 = getelementptr inbounds i8, ptr %356, i64 16, !dbg !339
  %358 = load ptr, ptr %ptradd567, align 8, !dbg !339
  %359 = call ptr @.dyn_search(ptr %358, ptr @"$sel.write"), !dbg !339
  store ptr %359, ptr %.inlinecache563, align 8, !dbg !339
  store ptr %356, ptr %.cachedtype564, align 8, !dbg !339
  br label %360, !dbg !339

cache_hit568:                                     ; preds = %if.else553
  %cache_hit_fn569 = load ptr, ptr %.inlinecache563, align 8, !dbg !339
  br label %360, !dbg !339

360:                                              ; preds = %cache_hit568, %cache_miss566
  %fn_phi570 = phi ptr [ %cache_hit_fn569, %cache_hit568 ], [ %359, %cache_miss566 ], !dbg !339
  %361 = icmp eq ptr %fn_phi570, null, !dbg !339
  br i1 %361, label %missing_function571, label %match572, !dbg !339

missing_function571:                              ; preds = %360
  %362 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !559
  call void %362(ptr @.panic_msg.35, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 116) #6, !dbg !559
  unreachable, !dbg !559

match572:                                         ; preds = %360
  %363 = load ptr, ptr %out559, align 8
  %lo574 = load ptr, ptr %x560, align 8
  %ptradd575 = getelementptr inbounds i8, ptr %x560, i64 8
  %hi576 = load i64, ptr %ptradd575, align 8
  %364 = call i64 %fn_phi570(ptr %retparam573, ptr %363, ptr %lo574, i64 %hi576), !dbg !559
  %not_err577 = icmp eq i64 %364, 0, !dbg !559
  %365 = call i1 @llvm.expect.i1(i1 %not_err577, i1 true), !dbg !559
  br i1 %365, label %after_check579, label %assign_optional578, !dbg !559

assign_optional578:                               ; preds = %match572
  store i64 %364, ptr %error_var558, align 8, !dbg !559
  br label %guard_block580, !dbg !559

after_check579:                                   ; preds = %match572
  br label %noerr_block581, !dbg !559

guard_block580:                                   ; preds = %assign_optional578
  %366 = load i64, ptr %error_var558, align 8, !dbg !559
  store i64 %366, ptr %error_var554, align 8, !dbg !559
  br label %guard_block629, !dbg !559

noerr_block581:                                   ; preds = %after_check579
  %367 = load i64, ptr %retparam573, align 8, !dbg !559
  store i64 %367, ptr %len557, align 8, !dbg !559
  %ptradd583 = getelementptr inbounds i8, ptr %out555, i64 8, !dbg !560
  %368 = load i64, ptr %ptradd583, align 8, !dbg !560
  %369 = inttoptr i64 %368 to ptr, !dbg !560
  %type586 = load ptr, ptr %.cachedtype585, align 8, !dbg !339
  %370 = icmp eq ptr %369, %type586, !dbg !339
  br i1 %370, label %cache_hit589, label %cache_miss587, !dbg !339

cache_miss587:                                    ; preds = %noerr_block581
  %ptradd588 = getelementptr inbounds i8, ptr %369, i64 16, !dbg !339
  %371 = load ptr, ptr %ptradd588, align 8, !dbg !339
  %372 = call ptr @.dyn_search(ptr %371, ptr @"$sel.write_byte"), !dbg !339
  store ptr %372, ptr %.inlinecache584, align 8, !dbg !339
  store ptr %369, ptr %.cachedtype585, align 8, !dbg !339
  br label %373, !dbg !339

cache_hit589:                                     ; preds = %noerr_block581
  %cache_hit_fn590 = load ptr, ptr %.inlinecache584, align 8, !dbg !339
  br label %373, !dbg !339

373:                                              ; preds = %cache_hit589, %cache_miss587
  %fn_phi591 = phi ptr [ %cache_hit_fn590, %cache_hit589 ], [ %372, %cache_miss587 ], !dbg !339
  %374 = icmp eq ptr %fn_phi591, null, !dbg !339
  br i1 %374, label %missing_function592, label %match593, !dbg !339

missing_function592:                              ; preds = %373
  %375 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !561
  call void %375(ptr @.panic_msg.37, i64 47, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 173) #6, !dbg !561
  unreachable, !dbg !561

match593:                                         ; preds = %373
  %376 = load ptr, ptr %out555, align 8, !dbg !561
  %377 = call i64 %fn_phi591(ptr %376, i8 zeroext 10), !dbg !561
  %not_err594 = icmp eq i64 %377, 0, !dbg !561
  %378 = call i1 @llvm.expect.i1(i1 %not_err594, i1 true), !dbg !561
  br i1 %378, label %after_check596, label %assign_optional595, !dbg !561

assign_optional595:                               ; preds = %match593
  store i64 %377, ptr %error_var582, align 8, !dbg !561
  br label %guard_block597, !dbg !561

after_check596:                                   ; preds = %match593
  br label %noerr_block598, !dbg !561

guard_block597:                                   ; preds = %assign_optional595
  %379 = load i64, ptr %error_var582, align 8, !dbg !561
  store i64 %379, ptr %error_var554, align 8, !dbg !561
  br label %guard_block629, !dbg !561

noerr_block598:                                   ; preds = %after_check596
  %ptradd599 = getelementptr inbounds i8, ptr %out555, i64 8, !dbg !562
  %380 = load i64, ptr %ptradd599, align 8, !dbg !562
  %381 = inttoptr i64 %380 to ptr, !dbg !562
  %type602 = load ptr, ptr %.cachedtype601, align 8, !dbg !339
  %382 = icmp eq ptr %381, %type602, !dbg !339
  br i1 %382, label %cache_hit605, label %cache_miss603, !dbg !339

cache_miss603:                                    ; preds = %noerr_block598
  %ptradd604 = getelementptr inbounds i8, ptr %381, i64 16, !dbg !339
  %383 = load ptr, ptr %ptradd604, align 8, !dbg !339
  %384 = call ptr @.dyn_search(ptr %383, ptr @"$sel.flush"), !dbg !339
  store ptr %384, ptr %.inlinecache600, align 8, !dbg !339
  store ptr %381, ptr %.cachedtype601, align 8, !dbg !339
  br label %385, !dbg !339

cache_hit605:                                     ; preds = %noerr_block598
  %cache_hit_fn606 = load ptr, ptr %.inlinecache600, align 8, !dbg !339
  br label %385, !dbg !339

385:                                              ; preds = %cache_hit605, %cache_miss603
  %fn_phi607 = phi ptr [ %cache_hit_fn606, %cache_hit605 ], [ %384, %cache_miss603 ], !dbg !339
  %i2b608 = icmp ne ptr %fn_phi607, null, !dbg !339
  br i1 %i2b608, label %if.then609, label %if.exit627, !dbg !339

if.then609:                                       ; preds = %385
  %ptradd611 = getelementptr inbounds i8, ptr %out555, i64 8, !dbg !563
  %386 = load i64, ptr %ptradd611, align 8, !dbg !563
  %387 = inttoptr i64 %386 to ptr, !dbg !563
  %type614 = load ptr, ptr %.cachedtype613, align 8, !dbg !339
  %388 = icmp eq ptr %387, %type614, !dbg !339
  br i1 %388, label %cache_hit617, label %cache_miss615, !dbg !339

cache_miss615:                                    ; preds = %if.then609
  %ptradd616 = getelementptr inbounds i8, ptr %387, i64 16, !dbg !339
  %389 = load ptr, ptr %ptradd616, align 8, !dbg !339
  %390 = call ptr @.dyn_search(ptr %389, ptr @"$sel.flush"), !dbg !339
  store ptr %390, ptr %.inlinecache612, align 8, !dbg !339
  store ptr %387, ptr %.cachedtype613, align 8, !dbg !339
  br label %391, !dbg !339

cache_hit617:                                     ; preds = %if.then609
  %cache_hit_fn618 = load ptr, ptr %.inlinecache612, align 8, !dbg !339
  br label %391, !dbg !339

391:                                              ; preds = %cache_hit617, %cache_miss615
  %fn_phi619 = phi ptr [ %cache_hit_fn618, %cache_hit617 ], [ %390, %cache_miss615 ], !dbg !339
  %392 = icmp eq ptr %fn_phi619, null, !dbg !339
  br i1 %392, label %missing_function620, label %match621, !dbg !339

missing_function620:                              ; preds = %391
  %393 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !563
  call void %393(ptr @.panic_msg.38, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 176) #6, !dbg !563
  unreachable, !dbg !563

match621:                                         ; preds = %391
  %394 = load ptr, ptr %out555, align 8, !dbg !563
  %395 = call i64 %fn_phi619(ptr %394), !dbg !563
  %not_err622 = icmp eq i64 %395, 0, !dbg !563
  %396 = call i1 @llvm.expect.i1(i1 %not_err622, i1 true), !dbg !563
  br i1 %396, label %after_check624, label %assign_optional623, !dbg !563

assign_optional623:                               ; preds = %match621
  store i64 %395, ptr %error_var610, align 8, !dbg !563
  br label %guard_block625, !dbg !563

after_check624:                                   ; preds = %match621
  br label %noerr_block626, !dbg !563

guard_block625:                                   ; preds = %assign_optional623
  %397 = load i64, ptr %error_var610, align 8, !dbg !563
  store i64 %397, ptr %error_var554, align 8, !dbg !563
  br label %guard_block629, !dbg !563

noerr_block626:                                   ; preds = %after_check624
  br label %if.exit627, !dbg !563

if.exit627:                                       ; preds = %noerr_block626, %385
  %398 = load i64, ptr %len557, align 8, !dbg !564
  %add628 = add i64 %398, 1, !dbg !564
  br label %noerr_block630, !dbg !564

guard_block629:                                   ; preds = %guard_block625, %guard_block597, %guard_block580
  %399 = load ptr, ptr %state, align 8, !dbg !565
  call void @std.core.mem.allocator.pop_pool(ptr %399) #7, !dbg !567
  %400 = load i64, ptr %error_var554, align 8, !dbg !567
  ret i64 %400, !dbg !567

noerr_block630:                                   ; preds = %if.exit627
  br label %if.exit631, !dbg !567

if.exit631:                                       ; preds = %noerr_block630, %if.exit552
  %401 = insertvalue %any undef, ptr %total, 0, !dbg !568
  %402 = insertvalue %any %401, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !568
  store %any %402, ptr %varargslots633, align 16, !dbg !568
  %403 = insertvalue %"any[]" undef, ptr %varargslots633, 0, !dbg !568
  %"$$temp634" = insertvalue %"any[]" %403, i64 1, 1, !dbg !568
  %lo636 = load i64, ptr %out, align 8
  %ptradd637 = getelementptr inbounds i8, ptr %out, i64 8
  %hi638 = load ptr, ptr %ptradd637, align 8
  store %"any[]" %"$$temp634", ptr %indirectarg639, align 8
  %404 = call i64 @std.io.fprintfn(ptr %retparam635, i64 %lo636, ptr %hi638, ptr @.str.49, i64 49, ptr byval(%"any[]") align 8 %indirectarg639), !dbg !569
  %not_err640 = icmp eq i64 %404, 0, !dbg !569
  %405 = call i1 @llvm.expect.i1(i1 %not_err640, i1 true), !dbg !569
  br i1 %405, label %after_check642, label %assign_optional641, !dbg !569

assign_optional641:                               ; preds = %if.exit631
  store i64 %404, ptr %error_var632, align 8, !dbg !569
  br label %guard_block643, !dbg !569

after_check642:                                   ; preds = %if.exit631
  br label %noerr_block644, !dbg !569

guard_block643:                                   ; preds = %assign_optional641
  %406 = load ptr, ptr %state, align 8, !dbg !570
  call void @std.core.mem.allocator.pop_pool(ptr %406) #7, !dbg !572
  %407 = load i64, ptr %error_var632, align 8, !dbg !572
  ret i64 %407, !dbg !572

noerr_block644:                                   ; preds = %after_check642
  %408 = insertvalue %any undef, ptr %entries, 0, !dbg !573
  %409 = insertvalue %any %408, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !573
  store %any %409, ptr %varargslots646, align 16, !dbg !573
  %410 = insertvalue %"any[]" undef, ptr %varargslots646, 0, !dbg !573
  %"$$temp647" = insertvalue %"any[]" %410, i64 1, 1, !dbg !573
  %lo649 = load i64, ptr %out, align 8
  %ptradd650 = getelementptr inbounds i8, ptr %out, i64 8
  %hi651 = load ptr, ptr %ptradd650, align 8
  store %"any[]" %"$$temp647", ptr %indirectarg652, align 8
  %411 = call i64 @std.io.fprintfn(ptr %retparam648, i64 %lo649, ptr %hi651, ptr @.str.50, i64 49, ptr byval(%"any[]") align 8 %indirectarg652), !dbg !574
  %not_err653 = icmp eq i64 %411, 0, !dbg !574
  %412 = call i1 @llvm.expect.i1(i1 %not_err653, i1 true), !dbg !574
  br i1 %412, label %after_check655, label %assign_optional654, !dbg !574

assign_optional654:                               ; preds = %noerr_block644
  store i64 %411, ptr %error_var645, align 8, !dbg !574
  br label %guard_block656, !dbg !574

after_check655:                                   ; preds = %noerr_block644
  br label %noerr_block657, !dbg !574

guard_block656:                                   ; preds = %assign_optional654
  %413 = load ptr, ptr %state, align 8, !dbg !575
  call void @std.core.mem.allocator.pop_pool(ptr %413) #7, !dbg !577
  %414 = load i64, ptr %error_var645, align 8, !dbg !577
  ret i64 %414, !dbg !577

noerr_block657:                                   ; preds = %after_check655
  %415 = load ptr, ptr %self, align 8, !dbg !578
  %ptradd660 = getelementptr inbounds i8, ptr %415, i64 72, !dbg !578
  %416 = insertvalue %any undef, ptr %ptradd660, 0, !dbg !578
  %417 = insertvalue %any %416, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !578
  store %any %417, ptr %varargslots659, align 16, !dbg !578
  %418 = insertvalue %"any[]" undef, ptr %varargslots659, 0, !dbg !578
  %"$$temp661" = insertvalue %"any[]" %418, i64 1, 1, !dbg !578
  %lo663 = load i64, ptr %out, align 8
  %ptradd664 = getelementptr inbounds i8, ptr %out, i64 8
  %hi665 = load ptr, ptr %ptradd664, align 8
  store %"any[]" %"$$temp661", ptr %indirectarg666, align 8
  %419 = call i64 @std.io.fprintfn(ptr %retparam662, i64 %lo663, ptr %hi665, ptr @.str.51, i64 49, ptr byval(%"any[]") align 8 %indirectarg666), !dbg !579
  %not_err667 = icmp eq i64 %419, 0, !dbg !579
  %420 = call i1 @llvm.expect.i1(i1 %not_err667, i1 true), !dbg !579
  br i1 %420, label %after_check669, label %assign_optional668, !dbg !579

assign_optional668:                               ; preds = %noerr_block657
  store i64 %419, ptr %error_var658, align 8, !dbg !579
  br label %guard_block670, !dbg !579

after_check669:                                   ; preds = %noerr_block657
  br label %noerr_block671, !dbg !579

guard_block670:                                   ; preds = %assign_optional668
  %421 = load ptr, ptr %state, align 8, !dbg !580
  call void @std.core.mem.allocator.pop_pool(ptr %421) #7, !dbg !582
  %422 = load i64, ptr %error_var658, align 8, !dbg !582
  ret i64 %422, !dbg !582

noerr_block671:                                   ; preds = %after_check669
  %423 = load ptr, ptr %self, align 8, !dbg !583
  %ptradd674 = getelementptr inbounds i8, ptr %423, i64 64, !dbg !583
  %424 = insertvalue %any undef, ptr %ptradd674, 0, !dbg !583
  %425 = insertvalue %any %424, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !583
  store %any %425, ptr %varargslots673, align 16, !dbg !583
  %426 = insertvalue %"any[]" undef, ptr %varargslots673, 0, !dbg !583
  %"$$temp675" = insertvalue %"any[]" %426, i64 1, 1, !dbg !583
  %lo677 = load i64, ptr %out, align 8
  %ptradd678 = getelementptr inbounds i8, ptr %out, i64 8
  %hi679 = load ptr, ptr %ptradd678, align 8
  store %"any[]" %"$$temp675", ptr %indirectarg680, align 8
  %427 = call i64 @std.io.fprintfn(ptr %retparam676, i64 %lo677, ptr %hi679, ptr @.str.52, i64 49, ptr byval(%"any[]") align 8 %indirectarg680), !dbg !584
  %not_err681 = icmp eq i64 %427, 0, !dbg !584
  %428 = call i1 @llvm.expect.i1(i1 %not_err681, i1 true), !dbg !584
  br i1 %428, label %after_check683, label %assign_optional682, !dbg !584

assign_optional682:                               ; preds = %noerr_block671
  store i64 %427, ptr %error_var672, align 8, !dbg !584
  br label %guard_block684, !dbg !584

after_check683:                                   ; preds = %noerr_block671
  br label %noerr_block685, !dbg !584

guard_block684:                                   ; preds = %assign_optional682
  %429 = load ptr, ptr %state, align 8, !dbg !585
  call void @std.core.mem.allocator.pop_pool(ptr %429) #7, !dbg !587
  %430 = load i64, ptr %error_var672, align 8, !dbg !587
  ret i64 %430, !dbg !587

noerr_block685:                                   ; preds = %after_check683
  %431 = load i8, ptr %leaks, align 1, !dbg !588
  %432 = trunc i8 %431 to i1, !dbg !588
  br i1 %432, label %if.then686, label %if.exit1010, !dbg !588

if.then686:                                       ; preds = %noerr_block685
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out688, ptr align 8 %out, i32 16, i1 false)
  store %"char[]" { ptr @.emptystr, i64 0 }, ptr %x689, align 8
    #dbg_declare(ptr %len690, !589, !DIExpression(), !591)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out692, ptr align 8 %out688, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x693, ptr align 8 %x689, i32 16, i1 false)
  %ptradd695 = getelementptr inbounds i8, ptr %out692, i64 8, !dbg !594
  %433 = load i64, ptr %ptradd695, align 8, !dbg !594
  %434 = inttoptr i64 %433 to ptr, !dbg !594
  %type698 = load ptr, ptr %.cachedtype697, align 8, !dbg !339
  %435 = icmp eq ptr %434, %type698, !dbg !339
  br i1 %435, label %cache_hit701, label %cache_miss699, !dbg !339

cache_miss699:                                    ; preds = %if.then686
  %ptradd700 = getelementptr inbounds i8, ptr %434, i64 16, !dbg !339
  %436 = load ptr, ptr %ptradd700, align 8, !dbg !339
  %437 = call ptr @.dyn_search(ptr %436, ptr @"$sel.write"), !dbg !339
  store ptr %437, ptr %.inlinecache696, align 8, !dbg !339
  store ptr %434, ptr %.cachedtype697, align 8, !dbg !339
  br label %438, !dbg !339

cache_hit701:                                     ; preds = %if.then686
  %cache_hit_fn702 = load ptr, ptr %.inlinecache696, align 8, !dbg !339
  br label %438, !dbg !339

438:                                              ; preds = %cache_hit701, %cache_miss699
  %fn_phi703 = phi ptr [ %cache_hit_fn702, %cache_hit701 ], [ %437, %cache_miss699 ], !dbg !339
  %439 = icmp eq ptr %fn_phi703, null, !dbg !339
  br i1 %439, label %missing_function704, label %match705, !dbg !339

missing_function704:                              ; preds = %438
  %440 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !597
  call void %440(ptr @.panic_msg.35, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 116) #6, !dbg !597
  unreachable, !dbg !597

match705:                                         ; preds = %438
  %441 = load ptr, ptr %out692, align 8
  %lo707 = load ptr, ptr %x693, align 8
  %ptradd708 = getelementptr inbounds i8, ptr %x693, i64 8
  %hi709 = load i64, ptr %ptradd708, align 8
  %442 = call i64 %fn_phi703(ptr %retparam706, ptr %441, ptr %lo707, i64 %hi709), !dbg !597
  %not_err710 = icmp eq i64 %442, 0, !dbg !597
  %443 = call i1 @llvm.expect.i1(i1 %not_err710, i1 true), !dbg !597
  br i1 %443, label %after_check712, label %assign_optional711, !dbg !597

assign_optional711:                               ; preds = %match705
  store i64 %442, ptr %error_var691, align 8, !dbg !597
  br label %guard_block713, !dbg !597

after_check712:                                   ; preds = %match705
  br label %noerr_block714, !dbg !597

guard_block713:                                   ; preds = %assign_optional711
  %444 = load i64, ptr %error_var691, align 8, !dbg !597
  store i64 %444, ptr %error_var687, align 8, !dbg !597
  br label %guard_block762, !dbg !597

noerr_block714:                                   ; preds = %after_check712
  %445 = load i64, ptr %retparam706, align 8, !dbg !597
  store i64 %445, ptr %len690, align 8, !dbg !597
  %ptradd716 = getelementptr inbounds i8, ptr %out688, i64 8, !dbg !598
  %446 = load i64, ptr %ptradd716, align 8, !dbg !598
  %447 = inttoptr i64 %446 to ptr, !dbg !598
  %type719 = load ptr, ptr %.cachedtype718, align 8, !dbg !339
  %448 = icmp eq ptr %447, %type719, !dbg !339
  br i1 %448, label %cache_hit722, label %cache_miss720, !dbg !339

cache_miss720:                                    ; preds = %noerr_block714
  %ptradd721 = getelementptr inbounds i8, ptr %447, i64 16, !dbg !339
  %449 = load ptr, ptr %ptradd721, align 8, !dbg !339
  %450 = call ptr @.dyn_search(ptr %449, ptr @"$sel.write_byte"), !dbg !339
  store ptr %450, ptr %.inlinecache717, align 8, !dbg !339
  store ptr %447, ptr %.cachedtype718, align 8, !dbg !339
  br label %451, !dbg !339

cache_hit722:                                     ; preds = %noerr_block714
  %cache_hit_fn723 = load ptr, ptr %.inlinecache717, align 8, !dbg !339
  br label %451, !dbg !339

451:                                              ; preds = %cache_hit722, %cache_miss720
  %fn_phi724 = phi ptr [ %cache_hit_fn723, %cache_hit722 ], [ %450, %cache_miss720 ], !dbg !339
  %452 = icmp eq ptr %fn_phi724, null, !dbg !339
  br i1 %452, label %missing_function725, label %match726, !dbg !339

missing_function725:                              ; preds = %451
  %453 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !599
  call void %453(ptr @.panic_msg.37, i64 47, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 173) #6, !dbg !599
  unreachable, !dbg !599

match726:                                         ; preds = %451
  %454 = load ptr, ptr %out688, align 8, !dbg !599
  %455 = call i64 %fn_phi724(ptr %454, i8 zeroext 10), !dbg !599
  %not_err727 = icmp eq i64 %455, 0, !dbg !599
  %456 = call i1 @llvm.expect.i1(i1 %not_err727, i1 true), !dbg !599
  br i1 %456, label %after_check729, label %assign_optional728, !dbg !599

assign_optional728:                               ; preds = %match726
  store i64 %455, ptr %error_var715, align 8, !dbg !599
  br label %guard_block730, !dbg !599

after_check729:                                   ; preds = %match726
  br label %noerr_block731, !dbg !599

guard_block730:                                   ; preds = %assign_optional728
  %457 = load i64, ptr %error_var715, align 8, !dbg !599
  store i64 %457, ptr %error_var687, align 8, !dbg !599
  br label %guard_block762, !dbg !599

noerr_block731:                                   ; preds = %after_check729
  %ptradd732 = getelementptr inbounds i8, ptr %out688, i64 8, !dbg !600
  %458 = load i64, ptr %ptradd732, align 8, !dbg !600
  %459 = inttoptr i64 %458 to ptr, !dbg !600
  %type735 = load ptr, ptr %.cachedtype734, align 8, !dbg !339
  %460 = icmp eq ptr %459, %type735, !dbg !339
  br i1 %460, label %cache_hit738, label %cache_miss736, !dbg !339

cache_miss736:                                    ; preds = %noerr_block731
  %ptradd737 = getelementptr inbounds i8, ptr %459, i64 16, !dbg !339
  %461 = load ptr, ptr %ptradd737, align 8, !dbg !339
  %462 = call ptr @.dyn_search(ptr %461, ptr @"$sel.flush"), !dbg !339
  store ptr %462, ptr %.inlinecache733, align 8, !dbg !339
  store ptr %459, ptr %.cachedtype734, align 8, !dbg !339
  br label %463, !dbg !339

cache_hit738:                                     ; preds = %noerr_block731
  %cache_hit_fn739 = load ptr, ptr %.inlinecache733, align 8, !dbg !339
  br label %463, !dbg !339

463:                                              ; preds = %cache_hit738, %cache_miss736
  %fn_phi740 = phi ptr [ %cache_hit_fn739, %cache_hit738 ], [ %462, %cache_miss736 ], !dbg !339
  %i2b741 = icmp ne ptr %fn_phi740, null, !dbg !339
  br i1 %i2b741, label %if.then742, label %if.exit760, !dbg !339

if.then742:                                       ; preds = %463
  %ptradd744 = getelementptr inbounds i8, ptr %out688, i64 8, !dbg !601
  %464 = load i64, ptr %ptradd744, align 8, !dbg !601
  %465 = inttoptr i64 %464 to ptr, !dbg !601
  %type747 = load ptr, ptr %.cachedtype746, align 8, !dbg !339
  %466 = icmp eq ptr %465, %type747, !dbg !339
  br i1 %466, label %cache_hit750, label %cache_miss748, !dbg !339

cache_miss748:                                    ; preds = %if.then742
  %ptradd749 = getelementptr inbounds i8, ptr %465, i64 16, !dbg !339
  %467 = load ptr, ptr %ptradd749, align 8, !dbg !339
  %468 = call ptr @.dyn_search(ptr %467, ptr @"$sel.flush"), !dbg !339
  store ptr %468, ptr %.inlinecache745, align 8, !dbg !339
  store ptr %465, ptr %.cachedtype746, align 8, !dbg !339
  br label %469, !dbg !339

cache_hit750:                                     ; preds = %if.then742
  %cache_hit_fn751 = load ptr, ptr %.inlinecache745, align 8, !dbg !339
  br label %469, !dbg !339

469:                                              ; preds = %cache_hit750, %cache_miss748
  %fn_phi752 = phi ptr [ %cache_hit_fn751, %cache_hit750 ], [ %468, %cache_miss748 ], !dbg !339
  %470 = icmp eq ptr %fn_phi752, null, !dbg !339
  br i1 %470, label %missing_function753, label %match754, !dbg !339

missing_function753:                              ; preds = %469
  %471 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !601
  call void %471(ptr @.panic_msg.38, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 176) #6, !dbg !601
  unreachable, !dbg !601

match754:                                         ; preds = %469
  %472 = load ptr, ptr %out688, align 8, !dbg !601
  %473 = call i64 %fn_phi752(ptr %472), !dbg !601
  %not_err755 = icmp eq i64 %473, 0, !dbg !601
  %474 = call i1 @llvm.expect.i1(i1 %not_err755, i1 true), !dbg !601
  br i1 %474, label %after_check757, label %assign_optional756, !dbg !601

assign_optional756:                               ; preds = %match754
  store i64 %473, ptr %error_var743, align 8, !dbg !601
  br label %guard_block758, !dbg !601

after_check757:                                   ; preds = %match754
  br label %noerr_block759, !dbg !601

guard_block758:                                   ; preds = %assign_optional756
  %475 = load i64, ptr %error_var743, align 8, !dbg !601
  store i64 %475, ptr %error_var687, align 8, !dbg !601
  br label %guard_block762, !dbg !601

noerr_block759:                                   ; preds = %after_check757
  br label %if.exit760, !dbg !601

if.exit760:                                       ; preds = %noerr_block759, %463
  %476 = load i64, ptr %len690, align 8, !dbg !602
  %add761 = add i64 %476, 1, !dbg !602
  br label %noerr_block763, !dbg !602

guard_block762:                                   ; preds = %guard_block758, %guard_block730, %guard_block713
  %477 = load ptr, ptr %state, align 8, !dbg !603
  call void @std.core.mem.allocator.pop_pool(ptr %477) #7, !dbg !605
  %478 = load i64, ptr %error_var687, align 8, !dbg !605
  ret i64 %478, !dbg !605

noerr_block763:                                   ; preds = %if.exit760
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out765, ptr align 8 %out, i32 16, i1 false)
  store %"char[]" { ptr @.str.53, i64 17 }, ptr %x766, align 8
    #dbg_declare(ptr %len767, !606, !DIExpression(), !608)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out769, ptr align 8 %out765, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %x770, ptr align 8 %x766, i32 16, i1 false)
  %ptradd772 = getelementptr inbounds i8, ptr %out769, i64 8, !dbg !610
  %479 = load i64, ptr %ptradd772, align 8, !dbg !610
  %480 = inttoptr i64 %479 to ptr, !dbg !610
  %type775 = load ptr, ptr %.cachedtype774, align 8, !dbg !339
  %481 = icmp eq ptr %480, %type775, !dbg !339
  br i1 %481, label %cache_hit778, label %cache_miss776, !dbg !339

cache_miss776:                                    ; preds = %noerr_block763
  %ptradd777 = getelementptr inbounds i8, ptr %480, i64 16, !dbg !339
  %482 = load ptr, ptr %ptradd777, align 8, !dbg !339
  %483 = call ptr @.dyn_search(ptr %482, ptr @"$sel.write"), !dbg !339
  store ptr %483, ptr %.inlinecache773, align 8, !dbg !339
  store ptr %480, ptr %.cachedtype774, align 8, !dbg !339
  br label %484, !dbg !339

cache_hit778:                                     ; preds = %noerr_block763
  %cache_hit_fn779 = load ptr, ptr %.inlinecache773, align 8, !dbg !339
  br label %484, !dbg !339

484:                                              ; preds = %cache_hit778, %cache_miss776
  %fn_phi780 = phi ptr [ %cache_hit_fn779, %cache_hit778 ], [ %483, %cache_miss776 ], !dbg !339
  %485 = icmp eq ptr %fn_phi780, null, !dbg !339
  br i1 %485, label %missing_function781, label %match782, !dbg !339

missing_function781:                              ; preds = %484
  %486 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !613
  call void %486(ptr @.panic_msg.35, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 116) #6, !dbg !613
  unreachable, !dbg !613

match782:                                         ; preds = %484
  %487 = load ptr, ptr %out769, align 8
  %lo784 = load ptr, ptr %x770, align 8
  %ptradd785 = getelementptr inbounds i8, ptr %x770, i64 8
  %hi786 = load i64, ptr %ptradd785, align 8
  %488 = call i64 %fn_phi780(ptr %retparam783, ptr %487, ptr %lo784, i64 %hi786), !dbg !613
  %not_err787 = icmp eq i64 %488, 0, !dbg !613
  %489 = call i1 @llvm.expect.i1(i1 %not_err787, i1 true), !dbg !613
  br i1 %489, label %after_check789, label %assign_optional788, !dbg !613

assign_optional788:                               ; preds = %match782
  store i64 %488, ptr %error_var768, align 8, !dbg !613
  br label %guard_block790, !dbg !613

after_check789:                                   ; preds = %match782
  br label %noerr_block791, !dbg !613

guard_block790:                                   ; preds = %assign_optional788
  %490 = load i64, ptr %error_var768, align 8, !dbg !613
  store i64 %490, ptr %error_var764, align 8, !dbg !613
  br label %guard_block839, !dbg !613

noerr_block791:                                   ; preds = %after_check789
  %491 = load i64, ptr %retparam783, align 8, !dbg !613
  store i64 %491, ptr %len767, align 8, !dbg !613
  %ptradd793 = getelementptr inbounds i8, ptr %out765, i64 8, !dbg !614
  %492 = load i64, ptr %ptradd793, align 8, !dbg !614
  %493 = inttoptr i64 %492 to ptr, !dbg !614
  %type796 = load ptr, ptr %.cachedtype795, align 8, !dbg !339
  %494 = icmp eq ptr %493, %type796, !dbg !339
  br i1 %494, label %cache_hit799, label %cache_miss797, !dbg !339

cache_miss797:                                    ; preds = %noerr_block791
  %ptradd798 = getelementptr inbounds i8, ptr %493, i64 16, !dbg !339
  %495 = load ptr, ptr %ptradd798, align 8, !dbg !339
  %496 = call ptr @.dyn_search(ptr %495, ptr @"$sel.write_byte"), !dbg !339
  store ptr %496, ptr %.inlinecache794, align 8, !dbg !339
  store ptr %493, ptr %.cachedtype795, align 8, !dbg !339
  br label %497, !dbg !339

cache_hit799:                                     ; preds = %noerr_block791
  %cache_hit_fn800 = load ptr, ptr %.inlinecache794, align 8, !dbg !339
  br label %497, !dbg !339

497:                                              ; preds = %cache_hit799, %cache_miss797
  %fn_phi801 = phi ptr [ %cache_hit_fn800, %cache_hit799 ], [ %496, %cache_miss797 ], !dbg !339
  %498 = icmp eq ptr %fn_phi801, null, !dbg !339
  br i1 %498, label %missing_function802, label %match803, !dbg !339

missing_function802:                              ; preds = %497
  %499 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !615
  call void %499(ptr @.panic_msg.37, i64 47, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 173) #6, !dbg !615
  unreachable, !dbg !615

match803:                                         ; preds = %497
  %500 = load ptr, ptr %out765, align 8, !dbg !615
  %501 = call i64 %fn_phi801(ptr %500, i8 zeroext 10), !dbg !615
  %not_err804 = icmp eq i64 %501, 0, !dbg !615
  %502 = call i1 @llvm.expect.i1(i1 %not_err804, i1 true), !dbg !615
  br i1 %502, label %after_check806, label %assign_optional805, !dbg !615

assign_optional805:                               ; preds = %match803
  store i64 %501, ptr %error_var792, align 8, !dbg !615
  br label %guard_block807, !dbg !615

after_check806:                                   ; preds = %match803
  br label %noerr_block808, !dbg !615

guard_block807:                                   ; preds = %assign_optional805
  %503 = load i64, ptr %error_var792, align 8, !dbg !615
  store i64 %503, ptr %error_var764, align 8, !dbg !615
  br label %guard_block839, !dbg !615

noerr_block808:                                   ; preds = %after_check806
  %ptradd809 = getelementptr inbounds i8, ptr %out765, i64 8, !dbg !616
  %504 = load i64, ptr %ptradd809, align 8, !dbg !616
  %505 = inttoptr i64 %504 to ptr, !dbg !616
  %type812 = load ptr, ptr %.cachedtype811, align 8, !dbg !339
  %506 = icmp eq ptr %505, %type812, !dbg !339
  br i1 %506, label %cache_hit815, label %cache_miss813, !dbg !339

cache_miss813:                                    ; preds = %noerr_block808
  %ptradd814 = getelementptr inbounds i8, ptr %505, i64 16, !dbg !339
  %507 = load ptr, ptr %ptradd814, align 8, !dbg !339
  %508 = call ptr @.dyn_search(ptr %507, ptr @"$sel.flush"), !dbg !339
  store ptr %508, ptr %.inlinecache810, align 8, !dbg !339
  store ptr %505, ptr %.cachedtype811, align 8, !dbg !339
  br label %509, !dbg !339

cache_hit815:                                     ; preds = %noerr_block808
  %cache_hit_fn816 = load ptr, ptr %.inlinecache810, align 8, !dbg !339
  br label %509, !dbg !339

509:                                              ; preds = %cache_hit815, %cache_miss813
  %fn_phi817 = phi ptr [ %cache_hit_fn816, %cache_hit815 ], [ %508, %cache_miss813 ], !dbg !339
  %i2b818 = icmp ne ptr %fn_phi817, null, !dbg !339
  br i1 %i2b818, label %if.then819, label %if.exit837, !dbg !339

if.then819:                                       ; preds = %509
  %ptradd821 = getelementptr inbounds i8, ptr %out765, i64 8, !dbg !617
  %510 = load i64, ptr %ptradd821, align 8, !dbg !617
  %511 = inttoptr i64 %510 to ptr, !dbg !617
  %type824 = load ptr, ptr %.cachedtype823, align 8, !dbg !339
  %512 = icmp eq ptr %511, %type824, !dbg !339
  br i1 %512, label %cache_hit827, label %cache_miss825, !dbg !339

cache_miss825:                                    ; preds = %if.then819
  %ptradd826 = getelementptr inbounds i8, ptr %511, i64 16, !dbg !339
  %513 = load ptr, ptr %ptradd826, align 8, !dbg !339
  %514 = call ptr @.dyn_search(ptr %513, ptr @"$sel.flush"), !dbg !339
  store ptr %514, ptr %.inlinecache822, align 8, !dbg !339
  store ptr %511, ptr %.cachedtype823, align 8, !dbg !339
  br label %515, !dbg !339

cache_hit827:                                     ; preds = %if.then819
  %cache_hit_fn828 = load ptr, ptr %.inlinecache822, align 8, !dbg !339
  br label %515, !dbg !339

515:                                              ; preds = %cache_hit827, %cache_miss825
  %fn_phi829 = phi ptr [ %cache_hit_fn828, %cache_hit827 ], [ %514, %cache_miss825 ], !dbg !339
  %516 = icmp eq ptr %fn_phi829, null, !dbg !339
  br i1 %516, label %missing_function830, label %match831, !dbg !339

missing_function830:                              ; preds = %515
  %517 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !617
  call void %517(ptr @.panic_msg.38, i64 42, ptr @.file.36, i64 5, ptr @.func.33, i64 13, i32 176) #6, !dbg !617
  unreachable, !dbg !617

match831:                                         ; preds = %515
  %518 = load ptr, ptr %out765, align 8, !dbg !617
  %519 = call i64 %fn_phi829(ptr %518), !dbg !617
  %not_err832 = icmp eq i64 %519, 0, !dbg !617
  %520 = call i1 @llvm.expect.i1(i1 %not_err832, i1 true), !dbg !617
  br i1 %520, label %after_check834, label %assign_optional833, !dbg !617

assign_optional833:                               ; preds = %match831
  store i64 %519, ptr %error_var820, align 8, !dbg !617
  br label %guard_block835, !dbg !617

after_check834:                                   ; preds = %match831
  br label %noerr_block836, !dbg !617

guard_block835:                                   ; preds = %assign_optional833
  %521 = load i64, ptr %error_var820, align 8, !dbg !617
  store i64 %521, ptr %error_var764, align 8, !dbg !617
  br label %guard_block839, !dbg !617

noerr_block836:                                   ; preds = %after_check834
  br label %if.exit837, !dbg !617

if.exit837:                                       ; preds = %noerr_block836, %509
  %522 = load i64, ptr %len767, align 8, !dbg !618
  %add838 = add i64 %522, 1, !dbg !618
  br label %noerr_block840, !dbg !618

guard_block839:                                   ; preds = %guard_block835, %guard_block807, %guard_block790
  %523 = load ptr, ptr %state, align 8, !dbg !619
  call void @std.core.mem.allocator.pop_pool(ptr %523) #7, !dbg !621
  %524 = load i64, ptr %error_var764, align 8, !dbg !621
  ret i64 %524, !dbg !621

noerr_block840:                                   ; preds = %if.exit837
  %ptradd841 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !622
  %525 = load i64, ptr %ptradd841, align 8, !dbg !622
    #dbg_declare(ptr %.anon842, !624, !DIExpression(), !625)
  store i64 0, ptr %.anon842, align 8, !dbg !625
  br label %loop.cond843, !dbg !625

loop.cond843:                                     ; preds = %loop.inc1007, %noerr_block840
  %526 = load i64, ptr %.anon842, align 8, !dbg !625
  %lt844 = icmp ult i64 %526, %525, !dbg !625
  br i1 %lt844, label %loop.body845, label %loop.exit1009, !dbg !625

loop.body845:                                     ; preds = %loop.cond843
    #dbg_declare(ptr %i846, !626, !DIExpression(), !628)
  %527 = load i64, ptr %.anon842, align 8, !dbg !628
  store i64 %527, ptr %i846, align 8, !dbg !628
    #dbg_declare(ptr %allocation847, !629, !DIExpression(), !630)
  %ptradd848 = getelementptr inbounds i8, ptr %allocs, i64 8, !dbg !631
  %528 = load i64, ptr %ptradd848, align 8, !dbg !631
  %529 = load ptr, ptr %allocs, align 8, !dbg !631
  %530 = load i64, ptr %.anon842, align 8, !dbg !628
  %ge849 = icmp uge i64 %530, %528, !dbg !628
  %531 = call i1 @llvm.expect.i1(i1 %ge849, i1 false), !dbg !628
  br i1 %531, label %panic850, label %checkok857, !dbg !628

checkok857:                                       ; preds = %loop.body845
  %ptroffset858 = getelementptr inbounds [144 x i8], ptr %529, i64 %530, !dbg !628
  store ptr %ptroffset858, ptr %allocation847, align 8, !dbg !628
  %532 = load ptr, ptr %allocation847, align 8, !dbg !632
  %ptradd859 = getelementptr inbounds i8, ptr %532, i64 16, !dbg !632
  %ptradd860 = getelementptr inbounds i8, ptr %ptradd859, i64 24, !dbg !634
  %533 = load ptr, ptr %ptradd860, align 8, !dbg !634
  %i2nb861 = icmp eq ptr %533, null, !dbg !634
  br i1 %i2nb861, label %if.then862, label %if.exit880, !dbg !634

if.then862:                                       ; preds = %checkok857
  %534 = load i64, ptr %i846, align 8, !dbg !635
  %add865 = add i64 %534, 1, !dbg !635
  store i64 %add865, ptr %taddr866, align 8
  %535 = insertvalue %any undef, ptr %taddr866, 0, !dbg !635
  %536 = insertvalue %any %535, i64 ptrtoint (ptr @"$ct.long" to i64), 1, !dbg !635
  store %any %536, ptr %varargslots864, align 16, !dbg !635
  %537 = load ptr, ptr %allocation847, align 8, !dbg !637
  %ptradd867 = getelementptr inbounds i8, ptr %537, i64 8, !dbg !637
  %538 = insertvalue %any undef, ptr %ptradd867, 0, !dbg !637
  %539 = insertvalue %any %538, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !637
  %ptradd868 = getelementptr inbounds i8, ptr %varargslots864, i64 16, !dbg !637
  store %any %539, ptr %ptradd868, align 16, !dbg !637
  %540 = insertvalue %"any[]" undef, ptr %varargslots864, 0, !dbg !637
  %"$$temp869" = insertvalue %"any[]" %540, i64 2, 1, !dbg !637
  %lo871 = load i64, ptr %out, align 8
  %ptradd872 = getelementptr inbounds i8, ptr %out, i64 8
  %hi873 = load ptr, ptr %ptradd872, align 8
  store %"any[]" %"$$temp869", ptr %indirectarg874, align 8
  %541 = call i64 @std.io.fprintfn(ptr %retparam870, i64 %lo871, ptr %hi873, ptr @.str.54, i64 50, ptr byval(%"any[]") align 8 %indirectarg874), !dbg !638
  %not_err875 = icmp eq i64 %541, 0, !dbg !638
  %542 = call i1 @llvm.expect.i1(i1 %not_err875, i1 true), !dbg !638
  br i1 %542, label %after_check877, label %assign_optional876, !dbg !638

assign_optional876:                               ; preds = %if.then862
  store i64 %541, ptr %error_var863, align 8, !dbg !638
  br label %guard_block878, !dbg !638

after_check877:                                   ; preds = %if.then862
  br label %noerr_block879, !dbg !638

guard_block878:                                   ; preds = %assign_optional876
  %543 = load ptr, ptr %state, align 8, !dbg !639
  call void @std.core.mem.allocator.pop_pool(ptr %543) #7, !dbg !641
  %544 = load i64, ptr %error_var863, align 8, !dbg !641
  ret i64 %544, !dbg !641

noerr_block879:                                   ; preds = %after_check877
  br label %loop.inc1007, !dbg !642

if.exit880:                                       ; preds = %checkok857
    #dbg_declare(ptr %backtraces881, !643, !DIExpression(), !644)
  call void @llvm.memset.p0.i64(ptr align 8 %backtraces881, i8 0, i64 40, i1 false), !dbg !644
    #dbg_declare(ptr %end, !645, !DIExpression(), !646)
  store i64 16, ptr %end, align 8, !dbg !647
  %545 = load ptr, ptr %allocation847, align 8, !dbg !648
  %ptradd882 = getelementptr inbounds i8, ptr %545, i64 16, !dbg !648
    #dbg_declare(ptr %.anon883, !650, !DIExpression(), !651)
  store i64 0, ptr %.anon883, align 8, !dbg !651
  br label %loop.cond884, !dbg !651

loop.cond884:                                     ; preds = %if.exit909, %if.exit880
  %546 = load i64, ptr %.anon883, align 8, !dbg !651
  %gt = icmp ugt i64 16, %546, !dbg !651
  br i1 %gt, label %loop.body885, label %loop.exit911, !dbg !651

loop.body885:                                     ; preds = %loop.cond884
    #dbg_declare(ptr %j, !652, !DIExpression(), !654)
  %547 = load i64, ptr %.anon883, align 8, !dbg !654
  store i64 %547, ptr %j, align 8, !dbg !654
    #dbg_declare(ptr %val886, !655, !DIExpression(), !656)
  %checknull = icmp eq ptr %ptradd882, null, !dbg !657
  %548 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !657
  br i1 %548, label %panic887, label %checkok888, !dbg !657

checkok888:                                       ; preds = %loop.body885
  %549 = ptrtoint ptr %ptradd882 to i64, !dbg !657
  %550 = urem i64 %549, 8, !dbg !657
  %551 = icmp ne i64 %550, 0, !dbg !657
  %552 = call i1 @llvm.expect.i1(i1 %551, i1 false), !dbg !657
  br i1 %552, label %panic889, label %checkok896, !dbg !657

checkok896:                                       ; preds = %checkok888
  %553 = load i64, ptr %.anon883, align 8, !dbg !654
  %ge897 = icmp uge i64 %553, 16, !dbg !654
  %554 = call i1 @llvm.expect.i1(i1 %ge897, i1 false), !dbg !654
  br i1 %554, label %panic898, label %checkok905, !dbg !654

checkok905:                                       ; preds = %checkok896
  %ptroffset906 = getelementptr inbounds [8 x i8], ptr %ptradd882, i64 %553, !dbg !654
  %555 = load ptr, ptr %ptroffset906, align 8, !dbg !654
  store ptr %555, ptr %val886, align 8, !dbg !654
  %556 = load ptr, ptr %val886, align 8, !dbg !658
  %i2nb907 = icmp eq ptr %556, null, !dbg !658
  br i1 %i2nb907, label %if.then908, label %if.exit909, !dbg !658

if.then908:                                       ; preds = %checkok905
  %557 = load i64, ptr %j, align 8, !dbg !660
  store i64 %557, ptr %end, align 8, !dbg !660
  br label %loop.exit911, !dbg !662

if.exit909:                                       ; preds = %checkok905
  %558 = load i64, ptr %.anon883, align 8, !dbg !651
  %addnuw910 = add nuw i64 %558, 1, !dbg !651
  store i64 %addnuw910, ptr %.anon883, align 8, !dbg !651
  br label %loop.cond884, !dbg !651

loop.exit911:                                     ; preds = %if.then908, %loop.cond884
    #dbg_declare(ptr %list, !663, !DIExpression(), !664)
  %559 = load ptr, ptr %allocation847, align 8, !dbg !665
  %ptradd913 = getelementptr inbounds i8, ptr %559, i64 16, !dbg !665
  %560 = load i64, ptr %end, align 8, !dbg !666
  %sub = sub i64 %560, 1, !dbg !666
  %gt914 = icmp sgt i64 3, %sub, !dbg !666
  %561 = call i1 @llvm.expect.i1(i1 %gt914, i1 false), !dbg !666
  br i1 %561, label %panic915, label %checkok922, !dbg !666

checkok922:                                       ; preds = %loop.exit911
  %le = icmp sle i64 16, %sub, !dbg !665
  %562 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !665
  br i1 %562, label %panic923, label %checkok930, !dbg !665

checkok930:                                       ; preds = %checkok922
  %563 = add i64 %sub, 1, !dbg !665
  %size = sub i64 %563, 3, !dbg !665
  %ptradd931 = getelementptr inbounds i8, ptr %ptradd913, i64 24, !dbg !665
  %564 = insertvalue %"void*[]" undef, ptr %ptradd931, 0, !dbg !665
  %565 = insertvalue %"void*[]" %564, i64 %size, 1, !dbg !665
  %lo933 = load i64, ptr @std.core.mem.allocator.current_temp, align 8
  %hi934 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8
  %566 = call i64 @std.os.linux.symbolize_backtrace(ptr %retparam932, i64 %lo933, ptr %hi934, ptr %ptradd931, i64 %size), !dbg !667
  %not_err935 = icmp eq i64 %566, 0, !dbg !667
  %567 = call i1 @llvm.expect.i1(i1 %not_err935, i1 true), !dbg !667
  br i1 %567, label %after_check937, label %assign_optional936, !dbg !667

assign_optional936:                               ; preds = %checkok930
  store i64 %566, ptr %error_var912, align 8, !dbg !667
  br label %guard_block938, !dbg !667

after_check937:                                   ; preds = %checkok930
  br label %noerr_block939, !dbg !667

guard_block938:                                   ; preds = %assign_optional936
  %568 = load ptr, ptr %state, align 8, !dbg !668
  call void @std.core.mem.allocator.pop_pool(ptr %568) #7, !dbg !670
  %569 = load i64, ptr %error_var912, align 8, !dbg !670
  ret i64 %569, !dbg !670

noerr_block939:                                   ; preds = %after_check937
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %list, ptr align 8 %retparam932, i32 40, i1 false), !dbg !670
  %570 = load i64, ptr %i846, align 8, !dbg !671
  %add942 = add i64 %570, 1, !dbg !671
  store i64 %add942, ptr %taddr943, align 8
  %571 = insertvalue %any undef, ptr %taddr943, 0, !dbg !671
  %572 = insertvalue %any %571, i64 ptrtoint (ptr @"$ct.long" to i64), 1, !dbg !671
  store %any %572, ptr %varargslots941, align 16, !dbg !671
  %573 = load ptr, ptr %allocation847, align 8, !dbg !672
  %ptradd944 = getelementptr inbounds i8, ptr %573, i64 8, !dbg !672
  %574 = insertvalue %any undef, ptr %ptradd944, 0, !dbg !672
  %575 = insertvalue %any %574, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !672
  %ptradd945 = getelementptr inbounds i8, ptr %varargslots941, i64 16, !dbg !672
  store %any %575, ptr %ptradd945, align 16, !dbg !672
  %576 = insertvalue %"any[]" undef, ptr %varargslots941, 0, !dbg !672
  %"$$temp946" = insertvalue %"any[]" %576, i64 2, 1, !dbg !672
  %lo948 = load i64, ptr %out, align 8
  %ptradd949 = getelementptr inbounds i8, ptr %out, i64 8
  %hi950 = load ptr, ptr %ptradd949, align 8
  store %"any[]" %"$$temp946", ptr %indirectarg951, align 8
  %577 = call i64 @std.io.fprintfn(ptr %retparam947, i64 %lo948, ptr %hi950, ptr @.str.58, i64 26, ptr byval(%"any[]") align 8 %indirectarg951), !dbg !673
  %not_err952 = icmp eq i64 %577, 0, !dbg !673
  %578 = call i1 @llvm.expect.i1(i1 %not_err952, i1 true), !dbg !673
  br i1 %578, label %after_check954, label %assign_optional953, !dbg !673

assign_optional953:                               ; preds = %noerr_block939
  store i64 %577, ptr %error_var940, align 8, !dbg !673
  br label %guard_block955, !dbg !673

after_check954:                                   ; preds = %noerr_block939
  br label %noerr_block956, !dbg !673

guard_block955:                                   ; preds = %assign_optional953
  %579 = load ptr, ptr %state, align 8, !dbg !674
  call void @std.core.mem.allocator.pop_pool(ptr %579) #7, !dbg !676
  %580 = load i64, ptr %error_var940, align 8, !dbg !676
  ret i64 %580, !dbg !676

noerr_block956:                                   ; preds = %after_check954
  %581 = call i64 @"std_collections_list$std.os.backtrace.Backtrace$.List.len"(ptr %list) #7, !dbg !677
    #dbg_declare(ptr %.anon957, !679, !DIExpression(), !677)
  store i64 0, ptr %.anon957, align 8, !dbg !677
  br label %loop.cond958, !dbg !677

loop.cond958:                                     ; preds = %loop.inc, %noerr_block956
  %582 = load i64, ptr %.anon957, align 8, !dbg !677
  %lt959 = icmp ult i64 %582, %581, !dbg !677
  br i1 %lt959, label %loop.body960, label %loop.exit1006, !dbg !677

loop.body960:                                     ; preds = %loop.cond958
    #dbg_declare(ptr %trace961, !680, !DIExpression(), !682)
  store ptr %list, ptr %self962, align 8
  %583 = load i64, ptr %.anon957, align 8
  store i64 %583, ptr %index, align 8
  %584 = load ptr, ptr %self962, align 8, !dbg !683
  %neq = icmp ne ptr %584, null, !dbg !683
  br i1 %neq, label %assert_ok964, label %assert_fail963, !dbg !683

assert_fail963:                                   ; preds = %loop.body960
  %585 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !683
  call void %585(ptr @.panic_msg.59, i64 32, ptr @.file.60, i64 7, ptr @.func.33, i64 13, i32 378) #6, !dbg !683
  unreachable, !dbg !683

assert_ok964:                                     ; preds = %loop.body960
  %586 = load i64, ptr %index, align 8, !dbg !687
  %587 = load ptr, ptr %self962, align 8, !dbg !688
  %588 = load i64, ptr %587, align 8, !dbg !688
  %lt965 = icmp ult i64 %586, %588, !dbg !689
  br i1 %lt965, label %assert_ok967, label %assert_fail966, !dbg !689

assert_fail966:                                   ; preds = %assert_ok964
  %589 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !689
  call void %589(ptr @.panic_msg.44, i64 62, ptr @.file, i64 21, ptr @.func.33, i64 13, i32 203) #6, !dbg !689
  unreachable, !dbg !689

assert_ok967:                                     ; preds = %assert_ok964
  %590 = load ptr, ptr %self962, align 8, !dbg !690
  %ptradd968 = getelementptr inbounds i8, ptr %590, i64 32, !dbg !690
  %591 = load ptr, ptr %ptradd968, align 8, !dbg !690
  %592 = load i64, ptr %index, align 8, !dbg !691
  %ptroffset969 = getelementptr inbounds [88 x i8], ptr %591, i64 %592, !dbg !691
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %trace961, ptr align 8 %ptroffset969, i32 88, i1 false), !dbg !691
  %593 = call i8 @std.os.backtrace.Backtrace.has_file(ptr %trace961), !dbg !692
  %594 = trunc i8 %593 to i1, !dbg !692
  br i1 %594, label %if.then970, label %if.exit985, !dbg !692

if.then970:                                       ; preds = %assert_ok967
  %ptradd972 = getelementptr inbounds i8, ptr %trace961, i64 8, !dbg !694
  %595 = insertvalue %any undef, ptr %ptradd972, 0, !dbg !694
  %596 = insertvalue %any %595, i64 ptrtoint (ptr @"$ct.String" to i64), 1, !dbg !694
  store %any %596, ptr %varargslots971, align 16, !dbg !694
  %ptradd973 = getelementptr inbounds i8, ptr %trace961, i64 40, !dbg !696
  %597 = insertvalue %any undef, ptr %ptradd973, 0, !dbg !696
  %598 = insertvalue %any %597, i64 ptrtoint (ptr @"$ct.String" to i64), 1, !dbg !696
  %ptradd974 = getelementptr inbounds i8, ptr %varargslots971, i64 16, !dbg !696
  store %any %598, ptr %ptradd974, align 16, !dbg !696
  %ptradd975 = getelementptr inbounds i8, ptr %trace961, i64 56, !dbg !697
  %599 = insertvalue %any undef, ptr %ptradd975, 0, !dbg !697
  %600 = insertvalue %any %599, i64 ptrtoint (ptr @"$ct.uint" to i64), 1, !dbg !697
  %ptradd976 = getelementptr inbounds i8, ptr %varargslots971, i64 32, !dbg !697
  store %any %600, ptr %ptradd976, align 16, !dbg !697
  %601 = insertvalue %"any[]" undef, ptr %varargslots971, 0, !dbg !697
  %"$$temp977" = insertvalue %"any[]" %601, i64 3, 1, !dbg !697
  %lo979 = load i64, ptr %out, align 8
  %ptradd980 = getelementptr inbounds i8, ptr %out, i64 8
  %hi981 = load ptr, ptr %ptradd980, align 8
  store %"any[]" %"$$temp977", ptr %indirectarg982, align 8
  %602 = call i64 @std.io.fprintfn(ptr %retparam978, i64 %lo979, ptr %hi981, ptr @.str.61, i64 16, ptr byval(%"any[]") align 8 %indirectarg982), !dbg !698
  br label %loop.inc, !dbg !699

if.exit985:                                       ; preds = %assert_ok967
  %603 = call i8 @std.os.backtrace.Backtrace.is_unknown(ptr %trace961), !dbg !700
  %604 = trunc i8 %603 to i1, !dbg !700
  br i1 %604, label %if.then986, label %if.exit994, !dbg !700

if.then986:                                       ; preds = %if.exit985
  %lo988 = load i64, ptr %out, align 8
  %ptradd989 = getelementptr inbounds i8, ptr %out, i64 8
  %hi990 = load ptr, ptr %ptradd989, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg991, align 8
  %605 = call i64 @std.io.fprintfn(ptr %retparam987, i64 %lo988, ptr %hi990, ptr @.str.62, i64 19, ptr byval(%"any[]") align 8 %indirectarg991), !dbg !701
  br label %loop.inc, !dbg !703

if.exit994:                                       ; preds = %if.exit985
  %ptradd996 = getelementptr inbounds i8, ptr %trace961, i64 8, !dbg !704
  %606 = insertvalue %any undef, ptr %ptradd996, 0, !dbg !704
  %607 = insertvalue %any %606, i64 ptrtoint (ptr @"$ct.String" to i64), 1, !dbg !704
  store %any %607, ptr %varargslots995, align 16, !dbg !704
  %608 = insertvalue %"any[]" undef, ptr %varargslots995, 0, !dbg !704
  %"$$temp997" = insertvalue %"any[]" %608, i64 1, 1, !dbg !704
  %lo999 = load i64, ptr %out, align 8
  %ptradd1000 = getelementptr inbounds i8, ptr %out, i64 8
  %hi1001 = load ptr, ptr %ptradd1000, align 8
  store %"any[]" %"$$temp997", ptr %indirectarg1002, align 8
  %609 = call i64 @std.io.fprintfn(ptr %retparam998, i64 %lo999, ptr %hi1001, ptr @.str.63, i64 26, ptr byval(%"any[]") align 8 %indirectarg1002), !dbg !705
  br label %loop.inc, !dbg !705

loop.inc:                                         ; preds = %if.exit994, %if.then986, %if.then970
  %610 = load i64, ptr %.anon957, align 8, !dbg !677
  %addnuw1005 = add nuw i64 %610, 1, !dbg !677
  store i64 %addnuw1005, ptr %.anon957, align 8, !dbg !677
  br label %loop.cond958, !dbg !677

loop.exit1006:                                    ; preds = %loop.cond958
  br label %loop.inc1007, !dbg !677

loop.inc1007:                                     ; preds = %loop.exit1006, %noerr_block879
  %611 = load i64, ptr %.anon842, align 8, !dbg !625
  %addnuw1008 = add nuw i64 %611, 1, !dbg !625
  store i64 %addnuw1008, ptr %.anon842, align 8, !dbg !625
  br label %loop.cond843, !dbg !625

loop.exit1009:                                    ; preds = %loop.cond843
  br label %if.exit1010, !dbg !625

if.exit1010:                                      ; preds = %loop.exit1009, %noerr_block685
  %612 = load ptr, ptr %state, align 8, !dbg !706
  call void @std.core.mem.allocator.pop_pool(ptr %612) #7, !dbg !708
  ret i64 0, !dbg !708

panic:                                            ; preds = %entry
  %613 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !341
  call void %613(ptr @.panic_msg, i64 62, ptr @.file, i64 21, ptr @.func.33, i64 13, i32 128) #6, !dbg !341
  unreachable, !dbg !341

panic4:                                           ; preds = %if.then
  store i64 %9, ptr %taddr, align 8
  %614 = insertvalue %any undef, ptr %taddr, 0
  %615 = insertvalue %any %614, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %616 = insertvalue %any undef, ptr %taddr5, 0
  %617 = insertvalue %any %616, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %615, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %617, ptr %ptradd6, align 16
  %618 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %618, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.10, i64 59, ptr @.file, i64 21, ptr @.func.33, i64 13, i32 137, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !364
  unreachable, !dbg !364

panic145:                                         ; preds = %loop.body
  store i64 %108, ptr %taddr146, align 8
  %619 = insertvalue %any undef, ptr %taddr146, 0
  %620 = insertvalue %any %619, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %110, ptr %taddr147, align 8
  %621 = insertvalue %any undef, ptr %taddr147, 0
  %622 = insertvalue %any %621, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %620, ptr %varargslots148, align 16
  %ptradd149 = getelementptr inbounds i8, ptr %varargslots148, i64 16
  store %any %622, ptr %ptradd149, align 16
  %623 = insertvalue %"any[]" undef, ptr %varargslots148, 0
  %"$$temp150" = insertvalue %"any[]" %623, i64 2, 1
  store %"any[]" %"$$temp150", ptr %indirectarg151, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.10, i64 59, ptr @.file, i64 21, ptr @.func.33, i64 13, i32 141, ptr byval(%"any[]") align 8 %indirectarg151) #6, !dbg !406
  unreachable, !dbg !406

panic411:                                         ; preds = %loop.body406
  store i64 %269, ptr %taddr412, align 8
  %624 = insertvalue %any undef, ptr %taddr412, 0
  %625 = insertvalue %any %624, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %271, ptr %taddr413, align 8
  %626 = insertvalue %any undef, ptr %taddr413, 0
  %627 = insertvalue %any %626, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %625, ptr %varargslots414, align 16
  %ptradd415 = getelementptr inbounds i8, ptr %varargslots414, i64 16
  store %any %627, ptr %ptradd415, align 16
  %628 = insertvalue %"any[]" undef, ptr %varargslots414, 0
  %"$$temp416" = insertvalue %"any[]" %628, i64 2, 1
  store %"any[]" %"$$temp416", ptr %indirectarg417, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.10, i64 59, ptr @.file, i64 21, ptr @.func.33, i64 13, i32 154, ptr byval(%"any[]") align 8 %indirectarg417) #6, !dbg !475
  unreachable, !dbg !475

panic850:                                         ; preds = %loop.body845
  store i64 %528, ptr %taddr851, align 8
  %629 = insertvalue %any undef, ptr %taddr851, 0
  %630 = insertvalue %any %629, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %530, ptr %taddr852, align 8
  %631 = insertvalue %any undef, ptr %taddr852, 0
  %632 = insertvalue %any %631, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %630, ptr %varargslots853, align 16
  %ptradd854 = getelementptr inbounds i8, ptr %varargslots853, i64 16
  store %any %632, ptr %ptradd854, align 16
  %633 = insertvalue %"any[]" undef, ptr %varargslots853, 0
  %"$$temp855" = insertvalue %"any[]" %633, i64 2, 1
  store %"any[]" %"$$temp855", ptr %indirectarg856, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.10, i64 59, ptr @.file, i64 21, ptr @.func.33, i64 13, i32 184, ptr byval(%"any[]") align 8 %indirectarg856) #6, !dbg !628
  unreachable, !dbg !628

panic887:                                         ; preds = %loop.body885
  %634 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !657
  call void %634(ptr @.panic_msg.55, i64 61, ptr @.file, i64 21, ptr @.func.33, i64 13, i32 193) #6, !dbg !657
  unreachable, !dbg !657

panic889:                                         ; preds = %checkok888
  store i64 8, ptr %taddr890, align 8
  %635 = insertvalue %any undef, ptr %taddr890, 0
  %636 = insertvalue %any %635, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %550, ptr %taddr891, align 8
  %637 = insertvalue %any undef, ptr %taddr891, 0
  %638 = insertvalue %any %637, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %636, ptr %varargslots892, align 16
  %ptradd893 = getelementptr inbounds i8, ptr %varargslots892, i64 16
  store %any %638, ptr %ptradd893, align 16
  %639 = insertvalue %"any[]" undef, ptr %varargslots892, 0
  %"$$temp894" = insertvalue %"any[]" %639, i64 2, 1
  store %"any[]" %"$$temp894", ptr %indirectarg895, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file, i64 21, ptr @.func.33, i64 13, i32 193, ptr byval(%"any[]") align 8 %indirectarg895) #6, !dbg !657
  unreachable, !dbg !657

panic898:                                         ; preds = %checkok896
  store i64 16, ptr %taddr899, align 8
  %640 = insertvalue %any undef, ptr %taddr899, 0
  %641 = insertvalue %any %640, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %553, ptr %taddr900, align 8
  %642 = insertvalue %any undef, ptr %taddr900, 0
  %643 = insertvalue %any %642, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %641, ptr %varargslots901, align 16
  %ptradd902 = getelementptr inbounds i8, ptr %varargslots901, i64 16
  store %any %643, ptr %ptradd902, align 16
  %644 = insertvalue %"any[]" undef, ptr %varargslots901, 0
  %"$$temp903" = insertvalue %"any[]" %644, i64 2, 1
  store %"any[]" %"$$temp903", ptr %indirectarg904, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.10, i64 59, ptr @.file, i64 21, ptr @.func.33, i64 13, i32 193, ptr byval(%"any[]") align 8 %indirectarg904) #6, !dbg !654
  unreachable, !dbg !654

panic915:                                         ; preds = %loop.exit911
  store i64 3, ptr %taddr916, align 8
  %645 = insertvalue %any undef, ptr %taddr916, 0
  %646 = insertvalue %any %645, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub, ptr %taddr917, align 8
  %647 = insertvalue %any undef, ptr %taddr917, 0
  %648 = insertvalue %any %647, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %646, ptr %varargslots918, align 16
  %ptradd919 = getelementptr inbounds i8, ptr %varargslots918, i64 16
  store %any %648, ptr %ptradd919, align 16
  %649 = insertvalue %"any[]" undef, ptr %varargslots918, 0
  %"$$temp920" = insertvalue %"any[]" %649, i64 2, 1
  store %"any[]" %"$$temp920", ptr %indirectarg921, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.56, i64 44, ptr @.file, i64 21, ptr @.func.33, i64 13, i32 201, ptr byval(%"any[]") align 8 %indirectarg921) #6, !dbg !665
  unreachable, !dbg !665

panic923:                                         ; preds = %checkok922
  store i64 %sub, ptr %taddr924, align 8
  %650 = insertvalue %any undef, ptr %taddr924, 0
  %651 = insertvalue %any %650, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 16, ptr %taddr925, align 8
  %652 = insertvalue %any undef, ptr %taddr925, 0
  %653 = insertvalue %any %652, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %651, ptr %varargslots926, align 16
  %ptradd927 = getelementptr inbounds i8, ptr %varargslots926, i64 16
  store %any %653, ptr %ptradd927, align 16
  %654 = insertvalue %"any[]" undef, ptr %varargslots926, 0
  %"$$temp928" = insertvalue %"any[]" %654, i64 2, 1
  store %"any[]" %"$$temp928", ptr %indirectarg929, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.57, i64 60, ptr @.file, i64 21, ptr @.func.33, i64 13, i32 201, ptr byval(%"any[]") align 8 %indirectarg929) #6, !dbg !665
  unreachable, !dbg !665
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.SimpleHeapAllocator.init(ptr %0, ptr %1) #0 comdat !dbg !709 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca ptr, align 8
  %2 = icmp eq ptr %0, null, !dbg !732
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !732
  br i1 %3, label %panic, label %checkok, !dbg !732

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !733, !DIExpression(), !734)
  store ptr %1, ptr %allocator, align 8
    #dbg_declare(ptr %allocator, !735, !DIExpression(), !736)
  %4 = load ptr, ptr %allocator, align 8, !dbg !737
  %neq = icmp ne ptr %4, null, !dbg !737
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !737

assert_fail:                                      ; preds = %checkok
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !737
  call void %5(ptr @.panic_msg.65, i64 85, ptr @.file.64, i64 17, ptr @.func, i64 4, i32 22) #6, !dbg !737
  unreachable, !dbg !737

assert_ok:                                        ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !739
  %ptradd = getelementptr inbounds i8, ptr %6, i64 8, !dbg !739
  %7 = load ptr, ptr %ptradd, align 8, !dbg !739
  %i2nb = icmp eq ptr %7, null, !dbg !739
  br i1 %i2nb, label %assert_ok2, label %assert_fail1, !dbg !739

assert_fail1:                                     ; preds = %assert_ok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !740
  call void %8(ptr @.panic_msg.66, i64 84, ptr @.file.64, i64 17, ptr @.func, i64 4, i32 23) #6, !dbg !740
  unreachable, !dbg !740

assert_ok2:                                       ; preds = %assert_ok
  %9 = load ptr, ptr %self, align 8, !dbg !741
  %10 = load ptr, ptr %allocator, align 8, !dbg !742
  store ptr %10, ptr %9, align 8, !dbg !742
  %11 = load ptr, ptr %self, align 8, !dbg !743
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !743
  store ptr null, ptr %ptradd3, align 8, !dbg !744
  ret void, !dbg !744

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !734
  call void %12(ptr @.panic_msg, i64 62, ptr @.file.64, i64 17, ptr @.func, i64 4, i32 25) #6, !dbg !734
  unreachable, !dbg !734
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.SimpleHeapAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !745 {
entry:
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %reterr = alloca i64, align 8
  %bytes = alloca i64, align 8
  %alignment1 = alloca i64, align 8
  %header = alloca i64, align 8
  %alignsize = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %mem = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %alignment11 = alloca i64, align 8
  %x = alloca i64, align 8
  %desc = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %AlignedBlock, align 8
  %retparam24 = alloca ptr, align 8
  %reterr30 = alloca i64, align 8
  %bytes33 = alloca i64, align 8
  %alignment34 = alloca i64, align 8
  %header47 = alloca i64, align 8
  %alignsize49 = alloca i64, align 8
  %data51 = alloca ptr, align 8
  %error_var52 = alloca i64, align 8
  %retparam53 = alloca ptr, align 8
  %mem59 = alloca ptr, align 8
  %ptr61 = alloca ptr, align 8
  %alignment62 = alloca i64, align 8
  %x64 = alloca i64, align 8
  %desc75 = alloca ptr, align 8
  %taddr84 = alloca i64, align 8
  %taddr85 = alloca i64, align 8
  %varargslots86 = alloca [2 x %any], align 16
  %indirectarg89 = alloca %"any[]", align 8
  %.assign_list91 = alloca %AlignedBlock, align 8
  %retparam94 = alloca ptr, align 8
  %5 = icmp eq ptr %1, null, !dbg !748
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !748
  br i1 %6, label %panic, label %checkok, !dbg !748

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !749, !DIExpression(), !750)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !751, !DIExpression(), !752)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !753, !DIExpression(), !754)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !755, !DIExpression(), !756)
  %7 = load i32, ptr %init_type, align 4, !dbg !757
  %eq = icmp eq i32 %7, 1, !dbg !757
  br i1 %eq, label %if.then, label %if.exit29, !dbg !757

if.then:                                          ; preds = %checkok
  %8 = load i64, ptr %alignment, align 8, !dbg !758
  %lt = icmp ult i64 0, %8, !dbg !758
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !758

cond.lhs:                                         ; preds = %if.then
  %9 = load i64, ptr %size, align 8
  store i64 %9, ptr %bytes, align 8
  %10 = load i64, ptr %alignment, align 8
  store i64 %10, ptr %alignment1, align 8
  %11 = load i64, ptr %bytes, align 8, !dbg !760
  %lt2 = icmp ult i64 0, %11, !dbg !764
  br i1 %lt2, label %assert_ok, label %assert_fail, !dbg !764

assert_fail:                                      ; preds = %cond.lhs
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !764
  call void %12(ptr @.panic_msg.67, i64 30, ptr @.file.64, i64 17, ptr @.func.15, i64 7, i32 35) #6, !dbg !764
  unreachable, !dbg !764

assert_ok:                                        ; preds = %cond.lhs
  %13 = load i64, ptr %alignment1, align 8, !dbg !765
  %lt3 = icmp ult i64 0, %13, !dbg !764
  br i1 %lt3, label %assert_ok5, label %assert_fail4, !dbg !764

assert_fail4:                                     ; preds = %assert_ok
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !764
  call void %14(ptr @.panic_msg.68, i64 34, ptr @.file.64, i64 17, ptr @.func.15, i64 7, i32 35) #6, !dbg !764
  unreachable, !dbg !764

assert_ok5:                                       ; preds = %assert_ok
  %15 = load i64, ptr %bytes, align 8, !dbg !766
  %ge = icmp uge i64 9223372036854775807, %15, !dbg !764
  br i1 %ge, label %assert_ok7, label %assert_fail6, !dbg !764

assert_fail6:                                     ; preds = %assert_ok5
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !764
  call void %16(ptr @.panic_msg.69, i64 37, ptr @.file.64, i64 17, ptr @.func.15, i64 7, i32 35) #6, !dbg !764
  unreachable, !dbg !764

assert_ok7:                                       ; preds = %assert_ok5
  %17 = load i64, ptr %alignment1, align 8, !dbg !767
  %lt8 = icmp ult i64 %17, 8, !dbg !767
  br i1 %lt8, label %if.then9, label %if.exit, !dbg !767

if.then9:                                         ; preds = %assert_ok7
  store i64 8, ptr %alignment1, align 8, !dbg !768
  br label %if.exit, !dbg !768

if.exit:                                          ; preds = %if.then9, %assert_ok7
    #dbg_declare(ptr %header, !769, !DIExpression(), !770)
  %18 = load i64, ptr %alignment1, align 8, !dbg !771
  %add = add i64 16, %18, !dbg !772
  store i64 %add, ptr %header, align 8, !dbg !772
    #dbg_declare(ptr %alignsize, !773, !DIExpression(), !774)
  %19 = load i64, ptr %bytes, align 8, !dbg !775
  %20 = load i64, ptr %header, align 8, !dbg !776
  %add10 = add i64 %19, %20, !dbg !775
  store i64 %add10, ptr %alignsize, align 8, !dbg !775
    #dbg_declare(ptr %data, !777, !DIExpression(), !778)
  %21 = load ptr, ptr %self, align 8
  %22 = load i64, ptr %alignsize, align 8
  %23 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._calloc(ptr %retparam, ptr %21, i64 %22), !dbg !779
  %not_err = icmp eq i64 %23, 0, !dbg !779
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !779
  br i1 %24, label %after_check, label %assign_optional, !dbg !779

assign_optional:                                  ; preds = %if.exit
  store i64 %23, ptr %error_var, align 8, !dbg !779
  br label %guard_block, !dbg !779

after_check:                                      ; preds = %if.exit
  br label %noerr_block, !dbg !779

guard_block:                                      ; preds = %assign_optional
  %25 = load i64, ptr %error_var, align 8, !dbg !779
  store i64 %25, ptr %reterr, align 8, !dbg !779
  br label %err_retblock, !dbg !779

noerr_block:                                      ; preds = %after_check
  %26 = load ptr, ptr %retparam, align 8, !dbg !779
  store ptr %26, ptr %data, align 8, !dbg !779
    #dbg_declare(ptr %mem, !780, !DIExpression(), !781)
  %27 = load ptr, ptr %data, align 8, !dbg !782
  %ptradd_any = getelementptr i8, ptr %27, i64 16, !dbg !783
  store ptr %ptradd_any, ptr %ptr, align 8
  %28 = load i64, ptr %alignment1, align 8
  store i64 %28, ptr %alignment11, align 8
  %29 = load ptr, ptr %ptr, align 8, !dbg !784
  %ptrxi = ptrtoint ptr %29 to i64, !dbg !784
  %30 = load i64, ptr %alignment11, align 8, !dbg !787
  store i64 %30, ptr %x, align 8
  %31 = load i64, ptr %x, align 8, !dbg !788
  %neq = icmp ne i64 0, %31, !dbg !788
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !788

and.rhs:                                          ; preds = %noerr_block
  %32 = load i64, ptr %x, align 8, !dbg !791
  %33 = load i64, ptr %x, align 8, !dbg !792
  %sub = sub i64 %33, 1, !dbg !792
  %and = and i64 %32, %sub, !dbg !791
  %eq12 = icmp eq i64 %and, 0, !dbg !791
  br label %and.phi, !dbg !791

and.phi:                                          ; preds = %and.rhs, %noerr_block
  %val = phi i1 [ false, %noerr_block ], [ %eq12, %and.rhs ], !dbg !791
  br i1 %val, label %assert_ok14, label %assert_fail13, !dbg !791

assert_fail13:                                    ; preds = %and.phi
  %34 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !790
  call void %34(ptr @.panic_msg.70, i64 51, ptr @.file.71, i64 6, ptr @.func.15, i64 7, i32 290) #6, !dbg !790
  unreachable, !dbg !790

assert_ok14:                                      ; preds = %and.phi
  %35 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %30), !dbg !793
  %intptr = inttoptr i64 %35 to ptr, !dbg !793
  store ptr %intptr, ptr %mem, align 8, !dbg !793
    #dbg_declare(ptr %desc, !794, !DIExpression(), !800)
  %36 = load ptr, ptr %mem, align 8, !dbg !801
  %ptradd_any15 = getelementptr i8, ptr %36, i64 -16, !dbg !802
  store ptr %ptradd_any15, ptr %desc, align 8, !dbg !802
  %37 = load ptr, ptr %mem, align 8, !dbg !803
  %38 = load ptr, ptr %data, align 8, !dbg !804
  %gt = icmp ugt ptr %37, %38, !dbg !803
  br i1 %gt, label %assert_ok17, label %assert_fail16, !dbg !803

assert_fail16:                                    ; preds = %assert_ok14
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !803
  call void %39(ptr @.panic_msg.72, i64 27, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 357) #6, !dbg !803
  unreachable, !dbg !803

assert_ok17:                                      ; preds = %assert_ok14
  %40 = load ptr, ptr %desc, align 8, !dbg !805
  %checknull = icmp eq ptr %40, null, !dbg !805
  %41 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !805
  br i1 %41, label %panic18, label %checkok19, !dbg !805

checkok19:                                        ; preds = %assert_ok17
  %42 = ptrtoint ptr %40 to i64, !dbg !805
  %43 = urem i64 %42, 8, !dbg !805
  %44 = icmp ne i64 %43, 0, !dbg !805
  %45 = call i1 @llvm.expect.i1(i1 %44, i1 false), !dbg !805
  br i1 %45, label %panic20, label %checkok22, !dbg !805

checkok22:                                        ; preds = %checkok19
  %46 = load i64, ptr %bytes, align 8, !dbg !806
  store i64 %46, ptr %.assign_list, align 8, !dbg !806
  %ptradd23 = getelementptr inbounds i8, ptr %.assign_list, i64 8, !dbg !806
  %47 = load ptr, ptr %data, align 8, !dbg !807
  store ptr %47, ptr %ptradd23, align 8, !dbg !807
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %40, ptr align 8 %.assign_list, i32 16, i1 false), !dbg !807
  %48 = load ptr, ptr %mem, align 8, !dbg !808
  br label %cond.phi, !dbg !808

cond.rhs:                                         ; preds = %if.then
  %49 = load ptr, ptr %self, align 8
  %50 = load i64, ptr %size, align 8
  %51 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._calloc(ptr %retparam24, ptr %49, i64 %50), !dbg !809
  %not_err25 = icmp eq i64 %51, 0, !dbg !809
  %52 = call i1 @llvm.expect.i1(i1 %not_err25, i1 true), !dbg !809
  br i1 %52, label %after_check27, label %assign_optional26, !dbg !809

assign_optional26:                                ; preds = %cond.rhs
  store i64 %51, ptr %reterr, align 8, !dbg !809
  br label %err_retblock, !dbg !809

after_check27:                                    ; preds = %cond.rhs
  %53 = load ptr, ptr %retparam24, align 8, !dbg !809
  br label %cond.phi, !dbg !809

cond.phi:                                         ; preds = %after_check27, %checkok22
  %val28 = phi ptr [ %48, %checkok22 ], [ %53, %after_check27 ], !dbg !809
  store ptr %val28, ptr %0, align 8, !dbg !809
  ret i64 0, !dbg !809

err_retblock:                                     ; preds = %assign_optional26, %guard_block
  %54 = load i64, ptr %reterr, align 8, !dbg !809
  ret i64 %54, !dbg !809

if.exit29:                                        ; preds = %checkok
  %55 = load i64, ptr %alignment, align 8, !dbg !810
  %lt31 = icmp ult i64 0, %55, !dbg !810
  br i1 %lt31, label %cond.lhs32, label %cond.rhs93, !dbg !810

cond.lhs32:                                       ; preds = %if.exit29
  %56 = load i64, ptr %size, align 8
  store i64 %56, ptr %bytes33, align 8
  %57 = load i64, ptr %alignment, align 8
  store i64 %57, ptr %alignment34, align 8
  %58 = load i64, ptr %bytes33, align 8, !dbg !811
  %lt35 = icmp ult i64 0, %58, !dbg !815
  br i1 %lt35, label %assert_ok37, label %assert_fail36, !dbg !815

assert_fail36:                                    ; preds = %cond.lhs32
  %59 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !815
  call void %59(ptr @.panic_msg.67, i64 30, ptr @.file.64, i64 17, ptr @.func.15, i64 7, i32 37) #6, !dbg !815
  unreachable, !dbg !815

assert_ok37:                                      ; preds = %cond.lhs32
  %60 = load i64, ptr %alignment34, align 8, !dbg !816
  %lt38 = icmp ult i64 0, %60, !dbg !815
  br i1 %lt38, label %assert_ok40, label %assert_fail39, !dbg !815

assert_fail39:                                    ; preds = %assert_ok37
  %61 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !815
  call void %61(ptr @.panic_msg.68, i64 34, ptr @.file.64, i64 17, ptr @.func.15, i64 7, i32 37) #6, !dbg !815
  unreachable, !dbg !815

assert_ok40:                                      ; preds = %assert_ok37
  %62 = load i64, ptr %bytes33, align 8, !dbg !817
  %ge41 = icmp uge i64 9223372036854775807, %62, !dbg !815
  br i1 %ge41, label %assert_ok43, label %assert_fail42, !dbg !815

assert_fail42:                                    ; preds = %assert_ok40
  %63 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !815
  call void %63(ptr @.panic_msg.69, i64 37, ptr @.file.64, i64 17, ptr @.func.15, i64 7, i32 37) #6, !dbg !815
  unreachable, !dbg !815

assert_ok43:                                      ; preds = %assert_ok40
  %64 = load i64, ptr %alignment34, align 8, !dbg !818
  %lt44 = icmp ult i64 %64, 8, !dbg !818
  br i1 %lt44, label %if.then45, label %if.exit46, !dbg !818

if.then45:                                        ; preds = %assert_ok43
  store i64 8, ptr %alignment34, align 8, !dbg !819
  br label %if.exit46, !dbg !819

if.exit46:                                        ; preds = %if.then45, %assert_ok43
    #dbg_declare(ptr %header47, !820, !DIExpression(), !821)
  %65 = load i64, ptr %alignment34, align 8, !dbg !822
  %add48 = add i64 16, %65, !dbg !823
  store i64 %add48, ptr %header47, align 8, !dbg !823
    #dbg_declare(ptr %alignsize49, !824, !DIExpression(), !825)
  %66 = load i64, ptr %bytes33, align 8, !dbg !826
  %67 = load i64, ptr %header47, align 8, !dbg !827
  %add50 = add i64 %66, %67, !dbg !826
  store i64 %add50, ptr %alignsize49, align 8, !dbg !826
    #dbg_declare(ptr %data51, !828, !DIExpression(), !829)
  %68 = load ptr, ptr %self, align 8
  %69 = load i64, ptr %alignsize49, align 8
  %70 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._alloc(ptr %retparam53, ptr %68, i64 %69), !dbg !830
  %not_err54 = icmp eq i64 %70, 0, !dbg !830
  %71 = call i1 @llvm.expect.i1(i1 %not_err54, i1 true), !dbg !830
  br i1 %71, label %after_check56, label %assign_optional55, !dbg !830

assign_optional55:                                ; preds = %if.exit46
  store i64 %70, ptr %error_var52, align 8, !dbg !830
  br label %guard_block57, !dbg !830

after_check56:                                    ; preds = %if.exit46
  br label %noerr_block58, !dbg !830

guard_block57:                                    ; preds = %assign_optional55
  %72 = load i64, ptr %error_var52, align 8, !dbg !830
  store i64 %72, ptr %reterr30, align 8, !dbg !830
  br label %err_retblock100, !dbg !830

noerr_block58:                                    ; preds = %after_check56
  %73 = load ptr, ptr %retparam53, align 8, !dbg !830
  store ptr %73, ptr %data51, align 8, !dbg !830
    #dbg_declare(ptr %mem59, !831, !DIExpression(), !832)
  %74 = load ptr, ptr %data51, align 8, !dbg !833
  %ptradd_any60 = getelementptr i8, ptr %74, i64 16, !dbg !834
  store ptr %ptradd_any60, ptr %ptr61, align 8
  %75 = load i64, ptr %alignment34, align 8
  store i64 %75, ptr %alignment62, align 8
  %76 = load ptr, ptr %ptr61, align 8, !dbg !835
  %ptrxi63 = ptrtoint ptr %76 to i64, !dbg !835
  %77 = load i64, ptr %alignment62, align 8, !dbg !838
  store i64 %77, ptr %x64, align 8
  %78 = load i64, ptr %x64, align 8, !dbg !839
  %neq65 = icmp ne i64 0, %78, !dbg !839
  br i1 %neq65, label %and.rhs66, label %and.phi70, !dbg !839

and.rhs66:                                        ; preds = %noerr_block58
  %79 = load i64, ptr %x64, align 8, !dbg !842
  %80 = load i64, ptr %x64, align 8, !dbg !843
  %sub67 = sub i64 %80, 1, !dbg !843
  %and68 = and i64 %79, %sub67, !dbg !842
  %eq69 = icmp eq i64 %and68, 0, !dbg !842
  br label %and.phi70, !dbg !842

and.phi70:                                        ; preds = %and.rhs66, %noerr_block58
  %val71 = phi i1 [ false, %noerr_block58 ], [ %eq69, %and.rhs66 ], !dbg !842
  br i1 %val71, label %assert_ok73, label %assert_fail72, !dbg !842

assert_fail72:                                    ; preds = %and.phi70
  %81 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !841
  call void %81(ptr @.panic_msg.70, i64 51, ptr @.file.71, i64 6, ptr @.func.15, i64 7, i32 290) #6, !dbg !841
  unreachable, !dbg !841

assert_ok73:                                      ; preds = %and.phi70
  %82 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi63, i64 %77), !dbg !844
  %intptr74 = inttoptr i64 %82 to ptr, !dbg !844
  store ptr %intptr74, ptr %mem59, align 8, !dbg !844
    #dbg_declare(ptr %desc75, !845, !DIExpression(), !846)
  %83 = load ptr, ptr %mem59, align 8, !dbg !847
  %ptradd_any76 = getelementptr i8, ptr %83, i64 -16, !dbg !848
  store ptr %ptradd_any76, ptr %desc75, align 8, !dbg !848
  %84 = load ptr, ptr %mem59, align 8, !dbg !849
  %85 = load ptr, ptr %data51, align 8, !dbg !850
  %gt77 = icmp ugt ptr %84, %85, !dbg !849
  br i1 %gt77, label %assert_ok79, label %assert_fail78, !dbg !849

assert_fail78:                                    ; preds = %assert_ok73
  %86 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !849
  call void %86(ptr @.panic_msg.72, i64 27, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 357) #6, !dbg !849
  unreachable, !dbg !849

assert_ok79:                                      ; preds = %assert_ok73
  %87 = load ptr, ptr %desc75, align 8, !dbg !851
  %checknull80 = icmp eq ptr %87, null, !dbg !851
  %88 = call i1 @llvm.expect.i1(i1 %checknull80, i1 false), !dbg !851
  br i1 %88, label %panic81, label %checkok82, !dbg !851

checkok82:                                        ; preds = %assert_ok79
  %89 = ptrtoint ptr %87 to i64, !dbg !851
  %90 = urem i64 %89, 8, !dbg !851
  %91 = icmp ne i64 %90, 0, !dbg !851
  %92 = call i1 @llvm.expect.i1(i1 %91, i1 false), !dbg !851
  br i1 %92, label %panic83, label %checkok90, !dbg !851

checkok90:                                        ; preds = %checkok82
  %93 = load i64, ptr %bytes33, align 8, !dbg !852
  store i64 %93, ptr %.assign_list91, align 8, !dbg !852
  %ptradd92 = getelementptr inbounds i8, ptr %.assign_list91, i64 8, !dbg !852
  %94 = load ptr, ptr %data51, align 8, !dbg !853
  store ptr %94, ptr %ptradd92, align 8, !dbg !853
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %87, ptr align 8 %.assign_list91, i32 16, i1 false), !dbg !853
  %95 = load ptr, ptr %mem59, align 8, !dbg !854
  br label %cond.phi98, !dbg !854

cond.rhs93:                                       ; preds = %if.exit29
  %96 = load ptr, ptr %self, align 8
  %97 = load i64, ptr %size, align 8
  %98 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._alloc(ptr %retparam94, ptr %96, i64 %97), !dbg !855
  %not_err95 = icmp eq i64 %98, 0, !dbg !855
  %99 = call i1 @llvm.expect.i1(i1 %not_err95, i1 true), !dbg !855
  br i1 %99, label %after_check97, label %assign_optional96, !dbg !855

assign_optional96:                                ; preds = %cond.rhs93
  store i64 %98, ptr %reterr30, align 8, !dbg !855
  br label %err_retblock100, !dbg !855

after_check97:                                    ; preds = %cond.rhs93
  %100 = load ptr, ptr %retparam94, align 8, !dbg !855
  br label %cond.phi98, !dbg !855

cond.phi98:                                       ; preds = %after_check97, %checkok90
  %val99 = phi ptr [ %95, %checkok90 ], [ %100, %after_check97 ], !dbg !855
  store ptr %val99, ptr %0, align 8, !dbg !855
  ret i64 0, !dbg !855

err_retblock100:                                  ; preds = %assign_optional96, %guard_block57
  %101 = load i64, ptr %reterr30, align 8, !dbg !855
  ret i64 %101, !dbg !855

panic:                                            ; preds = %entry
  %102 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !750
  call void %102(ptr @.panic_msg, i64 62, ptr @.file.64, i64 17, ptr @.func.15, i64 7, i32 31) #6, !dbg !750
  unreachable, !dbg !750

panic18:                                          ; preds = %assert_ok17
  %103 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !805
  call void %103(ptr @.panic_msg.74, i64 45, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 358) #6, !dbg !805
  unreachable, !dbg !805

panic20:                                          ; preds = %checkok19
  store i64 8, ptr %taddr, align 8
  %104 = insertvalue %any undef, ptr %taddr, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr21, align 8
  %106 = insertvalue %any undef, ptr %taddr21, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %105, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %107, ptr %ptradd, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 358, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !805
  unreachable, !dbg !805

panic81:                                          ; preds = %assert_ok79
  %109 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !851
  call void %109(ptr @.panic_msg.74, i64 45, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 358) #6, !dbg !851
  unreachable, !dbg !851

panic83:                                          ; preds = %checkok82
  store i64 8, ptr %taddr84, align 8
  %110 = insertvalue %any undef, ptr %taddr84, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %90, ptr %taddr85, align 8
  %112 = insertvalue %any undef, ptr %taddr85, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %111, ptr %varargslots86, align 16
  %ptradd87 = getelementptr inbounds i8, ptr %varargslots86, i64 16
  store %any %113, ptr %ptradd87, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots86, 0
  %"$$temp88" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp88", ptr %indirectarg89, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 358, ptr byval(%"any[]") align 8 %indirectarg89) #6, !dbg !851
  unreachable, !dbg !851
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.SimpleHeapAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !856 {
entry:
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %reterr = alloca i64, align 8
  %old_pointer1 = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %alignment2 = alloca i64, align 8
  %desc = alloca ptr, align 8
  %data_start = alloca ptr, align 8
  %new_data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %bytes7 = alloca i64, align 8
  %alignment8 = alloca i64, align 8
  %header = alloca i64, align 8
  %alignsize = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var20 = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %mem = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %alignment22 = alloca i64, align 8
  %x = alloca i64, align 8
  %desc25 = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %AlignedBlock, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %retparam68 = alloca ptr, align 8
  %5 = icmp eq ptr %1, null, !dbg !859
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !859
  br i1 %6, label %panic, label %checkok, !dbg !859

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !860, !DIExpression(), !861)
  store ptr %2, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !862, !DIExpression(), !863)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !864, !DIExpression(), !865)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !866, !DIExpression(), !867)
  %7 = load i64, ptr %alignment, align 8, !dbg !868
  %lt = icmp ult i64 0, %7, !dbg !868
  br i1 %lt, label %cond.lhs, label %cond.rhs61, !dbg !868

cond.lhs:                                         ; preds = %checkok
  %8 = load ptr, ptr %old_pointer, align 8
  store ptr %8, ptr %old_pointer1, align 8
  %9 = load i64, ptr %size, align 8
  store i64 %9, ptr %bytes, align 8
  %10 = load i64, ptr %alignment, align 8
  store i64 %10, ptr %alignment2, align 8
  %11 = load i64, ptr %bytes, align 8, !dbg !869
  %lt3 = icmp ult i64 0, %11, !dbg !873
  br i1 %lt3, label %assert_ok, label %assert_fail, !dbg !873

assert_fail:                                      ; preds = %cond.lhs
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !873
  call void %12(ptr @.panic_msg.67, i64 30, ptr @.file.64, i64 17, ptr @.func.20, i64 6, i32 43) #6, !dbg !873
  unreachable, !dbg !873

assert_ok:                                        ; preds = %cond.lhs
  %13 = load i64, ptr %alignment2, align 8, !dbg !874
  %lt4 = icmp ult i64 0, %13, !dbg !873
  br i1 %lt4, label %assert_ok6, label %assert_fail5, !dbg !873

assert_fail5:                                     ; preds = %assert_ok
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !873
  call void %14(ptr @.panic_msg.68, i64 34, ptr @.file.64, i64 17, ptr @.func.20, i64 6, i32 43) #6, !dbg !873
  unreachable, !dbg !873

assert_ok6:                                       ; preds = %assert_ok
    #dbg_declare(ptr %desc, !875, !DIExpression(), !876)
  %15 = load ptr, ptr %old_pointer1, align 8, !dbg !877
  %ptradd_any = getelementptr i8, ptr %15, i64 -16, !dbg !878
  store ptr %ptradd_any, ptr %desc, align 8, !dbg !878
    #dbg_declare(ptr %data_start, !879, !DIExpression(), !880)
  %16 = load ptr, ptr %desc, align 8, !dbg !881
  %ptradd = getelementptr inbounds i8, ptr %16, i64 8, !dbg !881
  %17 = load ptr, ptr %ptradd, align 8, !dbg !881
  store ptr %17, ptr %data_start, align 8, !dbg !881
    #dbg_declare(ptr %new_data, !882, !DIExpression(), !883)
  %18 = load i64, ptr %bytes, align 8
  store i64 %18, ptr %bytes7, align 8
  %19 = load i64, ptr %alignment2, align 8
  store i64 %19, ptr %alignment8, align 8
  %20 = load i64, ptr %bytes7, align 8, !dbg !884
  %lt10 = icmp ult i64 0, %20, !dbg !888
  br i1 %lt10, label %assert_ok12, label %assert_fail11, !dbg !888

assert_fail11:                                    ; preds = %assert_ok6
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !888
  call void %21(ptr @.panic_msg.67, i64 30, ptr @.file.73, i64 16, ptr @.func.20, i64 6, i32 386) #6, !dbg !888
  unreachable, !dbg !888

assert_ok12:                                      ; preds = %assert_ok6
  %22 = load i64, ptr %alignment8, align 8, !dbg !889
  %lt13 = icmp ult i64 0, %22, !dbg !888
  br i1 %lt13, label %assert_ok15, label %assert_fail14, !dbg !888

assert_fail14:                                    ; preds = %assert_ok12
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !888
  call void %23(ptr @.panic_msg.68, i64 34, ptr @.file.73, i64 16, ptr @.func.20, i64 6, i32 386) #6, !dbg !888
  unreachable, !dbg !888

assert_ok15:                                      ; preds = %assert_ok12
  %24 = load i64, ptr %bytes7, align 8, !dbg !890
  %ge = icmp uge i64 9223372036854775807, %24, !dbg !888
  br i1 %ge, label %assert_ok17, label %assert_fail16, !dbg !888

assert_fail16:                                    ; preds = %assert_ok15
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !888
  call void %25(ptr @.panic_msg.69, i64 37, ptr @.file.73, i64 16, ptr @.func.20, i64 6, i32 386) #6, !dbg !888
  unreachable, !dbg !888

assert_ok17:                                      ; preds = %assert_ok15
  %26 = load i64, ptr %alignment8, align 8, !dbg !891
  %lt18 = icmp ult i64 %26, 8, !dbg !891
  br i1 %lt18, label %if.then, label %if.exit, !dbg !891

if.then:                                          ; preds = %assert_ok17
  store i64 8, ptr %alignment8, align 8, !dbg !892
  br label %if.exit, !dbg !892

if.exit:                                          ; preds = %if.then, %assert_ok17
    #dbg_declare(ptr %header, !893, !DIExpression(), !894)
  %27 = load i64, ptr %alignment8, align 8, !dbg !895
  %add = add i64 16, %27, !dbg !896
  store i64 %add, ptr %header, align 8, !dbg !896
    #dbg_declare(ptr %alignsize, !897, !DIExpression(), !898)
  %28 = load i64, ptr %bytes7, align 8, !dbg !899
  %29 = load i64, ptr %header, align 8, !dbg !900
  %add19 = add i64 %28, %29, !dbg !899
  store i64 %add19, ptr %alignsize, align 8, !dbg !899
    #dbg_declare(ptr %data, !901, !DIExpression(), !902)
  %30 = load ptr, ptr %self, align 8
  %31 = load i64, ptr %alignsize, align 8
  %32 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._calloc(ptr %retparam, ptr %30, i64 %31), !dbg !903
  %not_err = icmp eq i64 %32, 0, !dbg !903
  %33 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !903
  br i1 %33, label %after_check, label %assign_optional, !dbg !903

assign_optional:                                  ; preds = %if.exit
  store i64 %32, ptr %error_var20, align 8, !dbg !903
  br label %guard_block, !dbg !903

after_check:                                      ; preds = %if.exit
  br label %noerr_block, !dbg !903

guard_block:                                      ; preds = %assign_optional
  %34 = load i64, ptr %error_var20, align 8, !dbg !903
  store i64 %34, ptr %error_var, align 8, !dbg !903
  br label %guard_block36, !dbg !903

noerr_block:                                      ; preds = %after_check
  %35 = load ptr, ptr %retparam, align 8, !dbg !903
  store ptr %35, ptr %data, align 8, !dbg !903
    #dbg_declare(ptr %mem, !904, !DIExpression(), !905)
  %36 = load ptr, ptr %data, align 8, !dbg !906
  %ptradd_any21 = getelementptr i8, ptr %36, i64 16, !dbg !907
  store ptr %ptradd_any21, ptr %ptr, align 8
  %37 = load i64, ptr %alignment8, align 8
  store i64 %37, ptr %alignment22, align 8
  %38 = load ptr, ptr %ptr, align 8, !dbg !908
  %ptrxi = ptrtoint ptr %38 to i64, !dbg !908
  %39 = load i64, ptr %alignment22, align 8, !dbg !911
  store i64 %39, ptr %x, align 8
  %40 = load i64, ptr %x, align 8, !dbg !912
  %neq = icmp ne i64 0, %40, !dbg !912
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !912

and.rhs:                                          ; preds = %noerr_block
  %41 = load i64, ptr %x, align 8, !dbg !915
  %42 = load i64, ptr %x, align 8, !dbg !916
  %sub = sub i64 %42, 1, !dbg !916
  %and = and i64 %41, %sub, !dbg !915
  %eq = icmp eq i64 %and, 0, !dbg !915
  br label %and.phi, !dbg !915

and.phi:                                          ; preds = %and.rhs, %noerr_block
  %val = phi i1 [ false, %noerr_block ], [ %eq, %and.rhs ], !dbg !915
  br i1 %val, label %assert_ok24, label %assert_fail23, !dbg !915

assert_fail23:                                    ; preds = %and.phi
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !914
  call void %43(ptr @.panic_msg.70, i64 51, ptr @.file.71, i64 6, ptr @.func.20, i64 6, i32 290) #6, !dbg !914
  unreachable, !dbg !914

assert_ok24:                                      ; preds = %and.phi
  %44 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %39), !dbg !917
  %intptr = inttoptr i64 %44 to ptr, !dbg !917
  store ptr %intptr, ptr %mem, align 8, !dbg !917
    #dbg_declare(ptr %desc25, !918, !DIExpression(), !919)
  %45 = load ptr, ptr %mem, align 8, !dbg !920
  %ptradd_any26 = getelementptr i8, ptr %45, i64 -16, !dbg !921
  store ptr %ptradd_any26, ptr %desc25, align 8, !dbg !921
  %46 = load ptr, ptr %mem, align 8, !dbg !922
  %47 = load ptr, ptr %data, align 8, !dbg !923
  %gt = icmp ugt ptr %46, %47, !dbg !922
  br i1 %gt, label %assert_ok28, label %assert_fail27, !dbg !922

assert_fail27:                                    ; preds = %assert_ok24
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !922
  call void %48(ptr @.panic_msg.72, i64 27, ptr @.file.73, i64 16, ptr @.func.20, i64 6, i32 357) #6, !dbg !922
  unreachable, !dbg !922

assert_ok28:                                      ; preds = %assert_ok24
  %49 = load ptr, ptr %desc25, align 8, !dbg !924
  %checknull = icmp eq ptr %49, null, !dbg !924
  %50 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !924
  br i1 %50, label %panic29, label %checkok30, !dbg !924

checkok30:                                        ; preds = %assert_ok28
  %51 = ptrtoint ptr %49 to i64, !dbg !924
  %52 = urem i64 %51, 8, !dbg !924
  %53 = icmp ne i64 %52, 0, !dbg !924
  %54 = call i1 @llvm.expect.i1(i1 %53, i1 false), !dbg !924
  br i1 %54, label %panic31, label %checkok34, !dbg !924

checkok34:                                        ; preds = %checkok30
  %55 = load i64, ptr %bytes7, align 8, !dbg !925
  store i64 %55, ptr %.assign_list, align 8, !dbg !925
  %ptradd35 = getelementptr inbounds i8, ptr %.assign_list, i64 8, !dbg !925
  %56 = load ptr, ptr %data, align 8, !dbg !926
  store ptr %56, ptr %ptradd35, align 8, !dbg !926
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %49, ptr align 8 %.assign_list, i32 16, i1 false), !dbg !926
  br label %noerr_block37, !dbg !927

guard_block36:                                    ; preds = %guard_block
  %57 = load i64, ptr %error_var, align 8, !dbg !927
  store i64 %57, ptr %reterr, align 8, !dbg !927
  br label %err_retblock, !dbg !927

noerr_block37:                                    ; preds = %checkok34
  %58 = load ptr, ptr %mem, align 8, !dbg !927
  store ptr %58, ptr %new_data, align 8, !dbg !927
  %59 = load ptr, ptr %new_data, align 8
  store ptr %59, ptr %dst, align 8
  %60 = load ptr, ptr %old_pointer1, align 8
  store ptr %60, ptr %src, align 8
  %61 = load ptr, ptr %desc, align 8, !dbg !928
  %62 = load i64, ptr %61, align 8, !dbg !928
  %63 = load i64, ptr %bytes, align 8, !dbg !929
  %lt38 = icmp ult i64 %62, %63, !dbg !928
  br i1 %lt38, label %cond.lhs39, label %cond.rhs, !dbg !928

cond.lhs39:                                       ; preds = %noerr_block37
  %64 = load ptr, ptr %desc, align 8, !dbg !930
  %65 = load i64, ptr %64, align 8, !dbg !930
  br label %cond.phi, !dbg !930

cond.rhs:                                         ; preds = %noerr_block37
  %66 = load i64, ptr %bytes, align 8, !dbg !931
  br label %cond.phi, !dbg !931

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs39
  %val40 = phi i64 [ %65, %cond.lhs39 ], [ %66, %cond.rhs ], !dbg !931
  store i64 %val40, ptr %len, align 8
  %67 = load ptr, ptr %dst, align 8, !dbg !932
  %neq41 = icmp ne ptr %67, null, !dbg !932
  br i1 %neq41, label %assert_ok43, label %assert_fail42, !dbg !932

assert_fail42:                                    ; preds = %cond.phi
  %68 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !932
  call void %68(ptr @.panic_msg.75, i64 37, ptr @.file.71, i64 6, ptr @.func.20, i64 6, i32 329) #6, !dbg !932
  unreachable, !dbg !932

assert_ok43:                                      ; preds = %cond.phi
  %69 = load ptr, ptr %src, align 8, !dbg !936
  %neq44 = icmp ne ptr %69, null, !dbg !936
  br i1 %neq44, label %or.phi, label %or.rhs, !dbg !936

or.rhs:                                           ; preds = %assert_ok43
  %70 = load i64, ptr %len, align 8, !dbg !937
  %eq45 = icmp eq i64 0, %70, !dbg !937
  br label %or.phi, !dbg !937

or.phi:                                           ; preds = %or.rhs, %assert_ok43
  %val46 = phi i1 [ true, %assert_ok43 ], [ %eq45, %or.rhs ], !dbg !937
  br i1 %val46, label %assert_ok48, label %assert_fail47, !dbg !937

assert_fail47:                                    ; preds = %or.phi
  %71 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !938
  call void %71(ptr @.panic_msg.76, i64 94, ptr @.file.73, i64 16, ptr @.func.20, i64 6, i32 387) #6, !dbg !938
  unreachable, !dbg !938

assert_ok48:                                      ; preds = %or.phi
  %72 = load i64, ptr %len, align 8, !dbg !939
  %eq49 = icmp eq i64 0, %72, !dbg !939
  br i1 %eq49, label %or.phi52, label %or.rhs50, !dbg !939

or.rhs50:                                         ; preds = %assert_ok48
  %73 = load ptr, ptr %dst, align 8, !dbg !940
  %74 = load i64, ptr %len, align 8, !dbg !941
  %ptradd_any51 = getelementptr i8, ptr %73, i64 %74, !dbg !941
  %75 = load ptr, ptr %src, align 8, !dbg !942
  %le = icmp ule ptr %ptradd_any51, %75, !dbg !940
  br label %or.phi52, !dbg !940

or.phi52:                                         ; preds = %or.rhs50, %assert_ok48
  %val53 = phi i1 [ true, %assert_ok48 ], [ %le, %or.rhs50 ], !dbg !940
  br i1 %val53, label %or.phi57, label %or.rhs54, !dbg !940

or.rhs54:                                         ; preds = %or.phi52
  %76 = load ptr, ptr %src, align 8, !dbg !943
  %77 = load i64, ptr %len, align 8, !dbg !944
  %ptradd_any55 = getelementptr i8, ptr %76, i64 %77, !dbg !944
  %78 = load ptr, ptr %dst, align 8, !dbg !945
  %le56 = icmp ule ptr %ptradd_any55, %78, !dbg !943
  br label %or.phi57, !dbg !943

or.phi57:                                         ; preds = %or.rhs54, %or.phi52
  %val58 = phi i1 [ true, %or.phi52 ], [ %le56, %or.rhs54 ], !dbg !943
  br i1 %val58, label %assert_ok60, label %assert_fail59, !dbg !943

assert_fail59:                                    ; preds = %or.phi57
  %79 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !938
  call void %79(ptr @.panic_msg.77, i64 95, ptr @.file.73, i64 16, ptr @.func.20, i64 6, i32 387) #6, !dbg !938
  unreachable, !dbg !938

assert_ok60:                                      ; preds = %or.phi57
  %80 = load ptr, ptr %dst, align 8, !dbg !946
  %81 = load ptr, ptr %src, align 8, !dbg !947
  %82 = load i64, ptr %len, align 8, !dbg !948
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %80, ptr align 1 %81, i64 %82, i1 false), !dbg !949
  %83 = load ptr, ptr %self, align 8, !dbg !950
  %84 = load ptr, ptr %data_start, align 8, !dbg !950
  call void @std.core.mem.allocator.SimpleHeapAllocator._free(ptr %83, ptr %84), !dbg !951
  %85 = load ptr, ptr %new_data, align 8, !dbg !952
  br label %cond.phi72, !dbg !952

cond.rhs61:                                       ; preds = %checkok
  %86 = load ptr, ptr %self, align 8, !dbg !953
  %87 = load ptr, ptr %old_pointer, align 8, !dbg !954
  %88 = load i64, ptr %size, align 8, !dbg !955
  %i2b = icmp ne ptr %87, null, !dbg !956
  br i1 %i2b, label %and.rhs62, label %and.phi64, !dbg !956

and.rhs62:                                        ; preds = %cond.rhs61
  %lt63 = icmp ult i64 0, %88, !dbg !957
  br label %and.phi64, !dbg !957

and.phi64:                                        ; preds = %and.rhs62, %cond.rhs61
  %val65 = phi i1 [ false, %cond.rhs61 ], [ %lt63, %and.rhs62 ], !dbg !957
  br i1 %val65, label %assert_ok67, label %assert_fail66, !dbg !957

assert_fail66:                                    ; preds = %and.phi64
  %89 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !953
  call void %89(ptr @.panic_msg.78, i64 45, ptr @.file.64, i64 17, ptr @.func.20, i64 6, i32 44) #6, !dbg !953
  unreachable, !dbg !953

assert_ok67:                                      ; preds = %and.phi64
  %90 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._realloc(ptr %retparam68, ptr %86, ptr %87, i64 %88), !dbg !953
  %not_err69 = icmp eq i64 %90, 0, !dbg !953
  %91 = call i1 @llvm.expect.i1(i1 %not_err69, i1 true), !dbg !953
  br i1 %91, label %after_check71, label %assign_optional70, !dbg !953

assign_optional70:                                ; preds = %assert_ok67
  store i64 %90, ptr %reterr, align 8, !dbg !953
  br label %err_retblock, !dbg !953

after_check71:                                    ; preds = %assert_ok67
  %92 = load ptr, ptr %retparam68, align 8, !dbg !953
  br label %cond.phi72, !dbg !953

cond.phi72:                                       ; preds = %after_check71, %assert_ok60
  %val73 = phi ptr [ %85, %assert_ok60 ], [ %92, %after_check71 ], !dbg !953
  store ptr %val73, ptr %0, align 8, !dbg !953
  ret i64 0, !dbg !953

err_retblock:                                     ; preds = %assign_optional70, %guard_block36
  %93 = load i64, ptr %reterr, align 8, !dbg !953
  ret i64 %93, !dbg !953

panic:                                            ; preds = %entry
  %94 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !861
  call void %94(ptr @.panic_msg, i64 62, ptr @.file.64, i64 17, ptr @.func.20, i64 6, i32 40) #6, !dbg !861
  unreachable, !dbg !861

panic29:                                          ; preds = %assert_ok28
  %95 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !924
  call void %95(ptr @.panic_msg.74, i64 45, ptr @.file.73, i64 16, ptr @.func.20, i64 6, i32 358) #6, !dbg !924
  unreachable, !dbg !924

panic31:                                          ; preds = %checkok30
  store i64 8, ptr %taddr, align 8
  %96 = insertvalue %any undef, ptr %taddr, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %52, ptr %taddr32, align 8
  %98 = insertvalue %any undef, ptr %taddr32, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %97, ptr %varargslots, align 16
  %ptradd33 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %99, ptr %ptradd33, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.73, i64 16, ptr @.func.20, i64 6, i32 358, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !924
  unreachable, !dbg !924
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.SimpleHeapAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !958 {
entry:
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %aligned = alloca i8, align 1
  %error_var = alloca i64, align 8
  %old_pointer1 = alloca ptr, align 8
  %desc = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !961
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !961
  br i1 %4, label %panic, label %checkok, !dbg !961

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !962, !DIExpression(), !963)
  store ptr %1, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !964, !DIExpression(), !965)
  store i8 %2, ptr %aligned, align 1
    #dbg_declare(ptr %aligned, !966, !DIExpression(), !967)
  %5 = load i8, ptr %aligned, align 1, !dbg !968
  %6 = trunc i8 %5 to i1, !dbg !968
  br i1 %6, label %if.then, label %if.else, !dbg !968

if.then:                                          ; preds = %checkok
  %7 = load ptr, ptr %old_pointer, align 8
  store ptr %7, ptr %old_pointer1, align 8
    #dbg_declare(ptr %desc, !969, !DIExpression(), !971)
  %8 = load ptr, ptr %old_pointer1, align 8, !dbg !974
  %ptradd_any = getelementptr i8, ptr %8, i64 -16, !dbg !975
  store ptr %ptradd_any, ptr %desc, align 8, !dbg !975
  %9 = load ptr, ptr %desc, align 8, !dbg !976
  %ptradd = getelementptr inbounds i8, ptr %9, i64 8, !dbg !976
  %10 = load ptr, ptr %self, align 8, !dbg !976
  %11 = load ptr, ptr %ptradd, align 8, !dbg !976
  call void @std.core.mem.allocator.SimpleHeapAllocator._free(ptr %10, ptr %11), !dbg !977
  br label %noerr_block, !dbg !977

noerr_block:                                      ; preds = %if.then
  br label %if.exit, !dbg !972

if.else:                                          ; preds = %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !978
  %13 = load ptr, ptr %old_pointer, align 8, !dbg !978
  call void @std.core.mem.allocator.SimpleHeapAllocator._free(ptr %12, ptr %13), !dbg !980
  br label %if.exit, !dbg !980

if.exit:                                          ; preds = %if.else, %noerr_block
  ret void, !dbg !980

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !963
  call void %14(ptr @.panic_msg, i64 62, ptr @.file.64, i64 17, ptr @.func.24, i64 7, i32 47) #6, !dbg !963
  unreachable, !dbg !963
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.SimpleHeapAllocator._realloc(ptr %0, ptr %1, ptr %2, i64 %3) #0 !dbg !981 {
entry:
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %block = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %new = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %max_to_copy = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr20 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !984
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !984
  br i1 %5, label %panic, label %checkok, !dbg !984

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !985, !DIExpression(), !986)
  store ptr %2, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !987, !DIExpression(), !988)
  store i64 %3, ptr %bytes, align 8
    #dbg_declare(ptr %bytes, !989, !DIExpression(), !990)
  %6 = load ptr, ptr %old_pointer, align 8, !dbg !991
  %i2b = icmp ne ptr %6, null, !dbg !991
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !991

and.rhs:                                          ; preds = %checkok
  %7 = load i64, ptr %bytes, align 8, !dbg !993
  %lt = icmp ult i64 0, %7, !dbg !993
  br label %and.phi, !dbg !993

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %lt, %and.rhs ], !dbg !993
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !993

assert_fail:                                      ; preds = %and.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !991
  call void %8(ptr @.panic_msg.78, i64 45, ptr @.file.64, i64 17, ptr @.func.79, i64 8, i32 60) #6, !dbg !991
  unreachable, !dbg !991

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %block, !994, !DIExpression(), !995)
  %9 = load ptr, ptr %old_pointer, align 8, !dbg !996
  %ptradd_any = getelementptr i8, ptr %9, i64 -16, !dbg !997
  store ptr %ptradd_any, ptr %block, align 8, !dbg !997
  %10 = load ptr, ptr %block, align 8, !dbg !998
  %ptradd = getelementptr inbounds i8, ptr %10, i64 8, !dbg !998
  %11 = load i64, ptr %ptradd, align 8, !dbg !998
  %12 = load i64, ptr %bytes, align 8, !dbg !999
  %ge = icmp uge i64 %11, %12, !dbg !998
  br i1 %ge, label %if.then, label %if.exit, !dbg !998

if.then:                                          ; preds = %assert_ok
  %13 = load ptr, ptr %old_pointer, align 8, !dbg !1000
  store ptr %13, ptr %0, align 8, !dbg !1000
  ret i64 0, !dbg !1000

if.exit:                                          ; preds = %assert_ok
    #dbg_declare(ptr %new, !1001, !DIExpression(), !1002)
  %14 = load ptr, ptr %self, align 8
  %15 = load i64, ptr %bytes, align 8
  %16 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._alloc(ptr %retparam, ptr %14, i64 %15), !dbg !1003
  %not_err = icmp eq i64 %16, 0, !dbg !1003
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1003
  br i1 %17, label %after_check, label %assign_optional, !dbg !1003

assign_optional:                                  ; preds = %if.exit
  store i64 %16, ptr %error_var, align 8, !dbg !1003
  br label %guard_block, !dbg !1003

after_check:                                      ; preds = %if.exit
  br label %noerr_block, !dbg !1003

guard_block:                                      ; preds = %assign_optional
  %18 = load i64, ptr %error_var, align 8, !dbg !1003
  ret i64 %18, !dbg !1003

noerr_block:                                      ; preds = %after_check
  %19 = load ptr, ptr %retparam, align 8, !dbg !1003
  store ptr %19, ptr %new, align 8, !dbg !1003
    #dbg_declare(ptr %max_to_copy, !1004, !DIExpression(), !1005)
  %20 = load ptr, ptr %block, align 8, !dbg !1006
  %ptradd1 = getelementptr inbounds i8, ptr %20, i64 8, !dbg !1006
  %21 = load i64, ptr %ptradd1, align 8
  store i64 %21, ptr %x, align 8
  %22 = load i64, ptr %bytes, align 8
  store i64 %22, ptr %y, align 8
  %23 = load i64, ptr %x, align 8, !dbg !1007
  %24 = load i64, ptr %y, align 8, !dbg !1010
  %25 = call i64 @llvm.umin.i64(i64 %23, i64 %24), !dbg !1010
  store i64 %25, ptr %max_to_copy, align 8, !dbg !1010
  %26 = load ptr, ptr %new, align 8
  store ptr %26, ptr %dst, align 8
  %27 = load ptr, ptr %old_pointer, align 8
  store ptr %27, ptr %src, align 8
  %28 = load i64, ptr %max_to_copy, align 8
  store i64 %28, ptr %len, align 8
  %29 = load ptr, ptr %dst, align 8, !dbg !1011
  %neq = icmp ne ptr %29, null, !dbg !1011
  br i1 %neq, label %assert_ok3, label %assert_fail2, !dbg !1011

assert_fail2:                                     ; preds = %noerr_block
  %30 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1011
  call void %30(ptr @.panic_msg.75, i64 37, ptr @.file.71, i64 6, ptr @.func.79, i64 8, i32 329) #6, !dbg !1011
  unreachable, !dbg !1011

assert_ok3:                                       ; preds = %noerr_block
  %31 = load ptr, ptr %src, align 8, !dbg !1015
  %neq4 = icmp ne ptr %31, null, !dbg !1015
  br i1 %neq4, label %or.phi, label %or.rhs, !dbg !1015

or.rhs:                                           ; preds = %assert_ok3
  %32 = load i64, ptr %len, align 8, !dbg !1016
  %eq = icmp eq i64 0, %32, !dbg !1016
  br label %or.phi, !dbg !1016

or.phi:                                           ; preds = %or.rhs, %assert_ok3
  %val5 = phi i1 [ true, %assert_ok3 ], [ %eq, %or.rhs ], !dbg !1016
  br i1 %val5, label %assert_ok7, label %assert_fail6, !dbg !1016

assert_fail6:                                     ; preds = %or.phi
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1017
  call void %33(ptr @.panic_msg.76, i64 94, ptr @.file.64, i64 17, ptr @.func.79, i64 8, i32 69) #6, !dbg !1017
  unreachable, !dbg !1017

assert_ok7:                                       ; preds = %or.phi
  %34 = load i64, ptr %len, align 8, !dbg !1018
  %eq8 = icmp eq i64 0, %34, !dbg !1018
  br i1 %eq8, label %or.phi11, label %or.rhs9, !dbg !1018

or.rhs9:                                          ; preds = %assert_ok7
  %35 = load ptr, ptr %dst, align 8, !dbg !1019
  %36 = load i64, ptr %len, align 8, !dbg !1020
  %ptradd_any10 = getelementptr i8, ptr %35, i64 %36, !dbg !1020
  %37 = load ptr, ptr %src, align 8, !dbg !1021
  %le = icmp ule ptr %ptradd_any10, %37, !dbg !1019
  br label %or.phi11, !dbg !1019

or.phi11:                                         ; preds = %or.rhs9, %assert_ok7
  %val12 = phi i1 [ true, %assert_ok7 ], [ %le, %or.rhs9 ], !dbg !1019
  br i1 %val12, label %or.phi16, label %or.rhs13, !dbg !1019

or.rhs13:                                         ; preds = %or.phi11
  %38 = load ptr, ptr %src, align 8, !dbg !1022
  %39 = load i64, ptr %len, align 8, !dbg !1023
  %ptradd_any14 = getelementptr i8, ptr %38, i64 %39, !dbg !1023
  %40 = load ptr, ptr %dst, align 8, !dbg !1024
  %le15 = icmp ule ptr %ptradd_any14, %40, !dbg !1022
  br label %or.phi16, !dbg !1022

or.phi16:                                         ; preds = %or.rhs13, %or.phi11
  %val17 = phi i1 [ true, %or.phi11 ], [ %le15, %or.rhs13 ], !dbg !1022
  br i1 %val17, label %assert_ok19, label %assert_fail18, !dbg !1022

assert_fail18:                                    ; preds = %or.phi16
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1017
  call void %41(ptr @.panic_msg.77, i64 95, ptr @.file.64, i64 17, ptr @.func.79, i64 8, i32 69) #6, !dbg !1017
  unreachable, !dbg !1017

assert_ok19:                                      ; preds = %or.phi16
  %42 = load ptr, ptr %dst, align 8, !dbg !1025
  %43 = load ptr, ptr %src, align 8, !dbg !1026
  %44 = load i64, ptr %len, align 8, !dbg !1027
  call void @llvm.memcpy.p0.p0.i64(ptr %42, ptr %43, i64 %44, i1 false), !dbg !1028
  %45 = load ptr, ptr %self, align 8, !dbg !1029
  %46 = load ptr, ptr %old_pointer, align 8, !dbg !1029
  call void @std.core.mem.allocator.SimpleHeapAllocator._free(ptr %45, ptr %46), !dbg !1030
  %47 = load ptr, ptr %new, align 8, !dbg !1031
  store ptr %47, ptr %0, align 8, !dbg !1031
  ret i64 0, !dbg !1031

panic:                                            ; preds = %entry
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !986
  call void %48(ptr @.panic_msg, i64 62, ptr @.file.64, i64 17, ptr @.func.79, i64 8, i32 62) #6, !dbg !986
  unreachable, !dbg !986
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.SimpleHeapAllocator._calloc(ptr %0, ptr %1, i64 %2) #0 !dbg !1032 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1035
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1035
  br i1 %4, label %panic, label %checkok, !dbg !1035

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1036, !DIExpression(), !1037)
  store i64 %2, ptr %bytes, align 8
    #dbg_declare(ptr %bytes, !1038, !DIExpression(), !1039)
    #dbg_declare(ptr %data, !1040, !DIExpression(), !1041)
  %5 = load ptr, ptr %self, align 8
  %6 = load i64, ptr %bytes, align 8
  %7 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._alloc(ptr %retparam, ptr %5, i64 %6), !dbg !1042
  %not_err = icmp eq i64 %7, 0, !dbg !1042
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1042
  br i1 %8, label %after_check, label %assign_optional, !dbg !1042

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !1042
  br label %guard_block, !dbg !1042

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !1042

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !1042
  ret i64 %9, !dbg !1042

noerr_block:                                      ; preds = %after_check
  %10 = load ptr, ptr %retparam, align 8, !dbg !1042
  store ptr %10, ptr %data, align 8, !dbg !1042
  %11 = load ptr, ptr %data, align 8
  store ptr %11, ptr %dst, align 8
  %12 = load i64, ptr %bytes, align 8
  store i64 %12, ptr %len, align 8
  %13 = load ptr, ptr %dst, align 8, !dbg !1043
  %14 = load i64, ptr %len, align 8, !dbg !1046
  call void @llvm.memset.p0.i64(ptr align 16 %13, i8 0, i64 %14, i1 false), !dbg !1047
  %15 = load ptr, ptr %data, align 8, !dbg !1048
  store ptr %15, ptr %0, align 8, !dbg !1048
  ret i64 0, !dbg !1048

panic:                                            ; preds = %entry
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1037
  call void %16(ptr @.panic_msg, i64 62, ptr @.file.64, i64 17, ptr @.func.80, i64 7, i32 74) #6, !dbg !1037
  unreachable, !dbg !1037
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.SimpleHeapAllocator._alloc(ptr %0, ptr %1, i64 %2) #0 !dbg !1049 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %aligned_bytes = alloca i64, align 8
  %x = alloca i64, align 8
  %error_var = alloca i64, align 8
  %current = alloca ptr, align 8
  %previous = alloca ptr, align 8
  %switch = alloca i8, align 1
  %reterr = alloca i64, align 8
  %unallocated = alloca ptr, align 8
  %reterr30 = alloca i64, align 8
  %error_var33 = alloca i64, align 8
  %reterr39 = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %3 = icmp eq ptr %1, null, !dbg !1050
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1050
  br i1 %4, label %panic, label %checkok, !dbg !1050

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1051, !DIExpression(), !1052)
  store i64 %2, ptr %bytes, align 8
    #dbg_declare(ptr %bytes, !1053, !DIExpression(), !1054)
    #dbg_declare(ptr %aligned_bytes, !1055, !DIExpression(), !1056)
  %5 = load i64, ptr %bytes, align 8, !dbg !1057
  store i64 16, ptr %x, align 8
  %6 = load i64, ptr %x, align 8, !dbg !1058
  %neq = icmp ne i64 0, %6, !dbg !1058
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1058

and.rhs:                                          ; preds = %checkok
  %7 = load i64, ptr %x, align 8, !dbg !1061
  %8 = load i64, ptr %x, align 8, !dbg !1062
  %sub = sub i64 %8, 1, !dbg !1062
  %and = and i64 %7, %sub, !dbg !1061
  %eq = icmp eq i64 %and, 0, !dbg !1061
  br label %and.phi, !dbg !1061

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %eq, %and.rhs ], !dbg !1061
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1061

assert_fail:                                      ; preds = %and.phi
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1060
  call void %9(ptr @.panic_msg.70, i64 51, ptr @.file.64, i64 17, ptr @.func.81, i64 6, i32 83) #6, !dbg !1060
  unreachable, !dbg !1060

assert_ok:                                        ; preds = %and.phi
  %10 = call i64 @std.core.mem.aligned_offset(i64 %5, i64 16), !dbg !1060
  store i64 %10, ptr %aligned_bytes, align 8, !dbg !1060
  %11 = load ptr, ptr %self, align 8, !dbg !1063
  %ptradd = getelementptr inbounds i8, ptr %11, i64 8, !dbg !1063
  %12 = load ptr, ptr %ptradd, align 8, !dbg !1063
  %i2nb = icmp eq ptr %12, null, !dbg !1063
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1063

if.then:                                          ; preds = %assert_ok
  %13 = load ptr, ptr %self, align 8, !dbg !1064
  %14 = load i64, ptr %aligned_bytes, align 8, !dbg !1064
  %15 = call i64 @std.core.mem.allocator.SimpleHeapAllocator.add_block(ptr %13, i64 %14), !dbg !1066
  %not_err = icmp eq i64 %15, 0, !dbg !1066
  %16 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1066
  br i1 %16, label %after_check, label %assign_optional, !dbg !1066

assign_optional:                                  ; preds = %if.then
  store i64 %15, ptr %error_var, align 8, !dbg !1066
  br label %guard_block, !dbg !1066

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !1066

guard_block:                                      ; preds = %assign_optional
  %17 = load i64, ptr %error_var, align 8, !dbg !1066
  ret i64 %17, !dbg !1066

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !1066

if.exit:                                          ; preds = %noerr_block, %assert_ok
    #dbg_declare(ptr %current, !1067, !DIExpression(), !1068)
  %18 = load ptr, ptr %self, align 8, !dbg !1069
  %ptradd1 = getelementptr inbounds i8, ptr %18, i64 8, !dbg !1069
  %19 = load ptr, ptr %ptradd1, align 8, !dbg !1069
  store ptr %19, ptr %current, align 8, !dbg !1069
    #dbg_declare(ptr %previous, !1070, !DIExpression(), !1071)
  %20 = load ptr, ptr %current, align 8, !dbg !1072
  store ptr %20, ptr %previous, align 8, !dbg !1072
  br label %loop.cond, !dbg !1073

loop.cond:                                        ; preds = %switch.exit, %if.exit
  %21 = load ptr, ptr %current, align 8, !dbg !1074
  %i2b = icmp ne ptr %21, null, !dbg !1074
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1074

loop.body:                                        ; preds = %loop.cond
  store i8 1, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %loop.body
  %22 = load i8, ptr %switch, align 1
  %23 = trunc i8 %22 to i1
  %24 = load ptr, ptr %current, align 8, !dbg !1076
  %ptradd2 = getelementptr inbounds i8, ptr %24, i64 8, !dbg !1076
  %25 = load i64, ptr %ptradd2, align 8, !dbg !1076
  %26 = load i64, ptr %aligned_bytes, align 8, !dbg !1079
  %ge = icmp uge i64 %25, %26, !dbg !1076
  br i1 %ge, label %and.rhs3, label %and.phi7, !dbg !1076

and.rhs3:                                         ; preds = %switch.entry
  %27 = load ptr, ptr %current, align 8, !dbg !1080
  %ptradd4 = getelementptr inbounds i8, ptr %27, i64 8, !dbg !1080
  %28 = load i64, ptr %ptradd4, align 8, !dbg !1080
  %29 = load i64, ptr %aligned_bytes, align 8, !dbg !1081
  %add = add i64 %29, 16, !dbg !1081
  %add5 = add i64 %add, 64, !dbg !1081
  %ge6 = icmp sge i64 %add5, %28, !dbg !1080
  %check = icmp sge i64 %28, 0, !dbg !1080
  %siui-ge = and i1 %check, %ge6, !dbg !1080
  br label %and.phi7, !dbg !1080

and.phi7:                                         ; preds = %and.rhs3, %switch.entry
  %val8 = phi i1 [ false, %switch.entry ], [ %siui-ge, %and.rhs3 ], !dbg !1080
  %eq9 = icmp eq i1 %val8, %23, !dbg !1080
  br i1 %eq9, label %switch.case, label %next_if, !dbg !1080

switch.case:                                      ; preds = %and.phi7
  %30 = load ptr, ptr %current, align 8, !dbg !1082
  %31 = load ptr, ptr %previous, align 8, !dbg !1084
  %eq10 = icmp eq ptr %30, %31, !dbg !1082
  br i1 %eq10, label %if.then11, label %if.else, !dbg !1082

if.then11:                                        ; preds = %switch.case
  %32 = load ptr, ptr %self, align 8, !dbg !1085
  %ptradd12 = getelementptr inbounds i8, ptr %32, i64 8, !dbg !1085
  %33 = load ptr, ptr %current, align 8, !dbg !1087
  %34 = load ptr, ptr %33, align 8, !dbg !1087
  store ptr %34, ptr %ptradd12, align 8, !dbg !1087
  br label %if.exit13, !dbg !1087

if.else:                                          ; preds = %switch.case
  %35 = load ptr, ptr %previous, align 8, !dbg !1088
  %36 = load ptr, ptr %current, align 8, !dbg !1090
  %37 = load ptr, ptr %36, align 8, !dbg !1090
  store ptr %37, ptr %35, align 8, !dbg !1090
  br label %if.exit13, !dbg !1090

if.exit13:                                        ; preds = %if.else, %if.then11
  %38 = load ptr, ptr %current, align 8, !dbg !1091
  store ptr null, ptr %38, align 8, !dbg !1092
  %39 = load ptr, ptr %current, align 8, !dbg !1093
  %ptradd_any = getelementptr i8, ptr %39, i64 16, !dbg !1094
  store ptr %ptradd_any, ptr %0, align 8, !dbg !1094
  ret i64 0, !dbg !1094

next_if:                                          ; preds = %and.phi7
  %40 = load ptr, ptr %current, align 8, !dbg !1095
  %ptradd14 = getelementptr inbounds i8, ptr %40, i64 8, !dbg !1095
  %41 = load i64, ptr %ptradd14, align 8, !dbg !1095
  %42 = load i64, ptr %aligned_bytes, align 8, !dbg !1096
  %gt = icmp ugt i64 %41, %42, !dbg !1095
  %eq15 = icmp eq i1 %gt, %23, !dbg !1095
  br i1 %eq15, label %switch.case16, label %next_if32, !dbg !1095

switch.case16:                                    ; preds = %next_if
    #dbg_declare(ptr %unallocated, !1097, !DIExpression(), !1099)
  %43 = load ptr, ptr %current, align 8, !dbg !1100
  %44 = load i64, ptr %aligned_bytes, align 8, !dbg !1101
  %add17 = add i64 %44, 16, !dbg !1102
  %ptradd_any18 = getelementptr i8, ptr %43, i64 %add17, !dbg !1102
  store ptr %ptradd_any18, ptr %unallocated, align 8, !dbg !1102
  %45 = load ptr, ptr %unallocated, align 8, !dbg !1103
  %ptradd19 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !1103
  %46 = load ptr, ptr %current, align 8, !dbg !1104
  %ptradd20 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !1104
  %47 = load i64, ptr %ptradd20, align 8, !dbg !1104
  %48 = load i64, ptr %aligned_bytes, align 8, !dbg !1105
  %sub21 = sub i64 %47, %48, !dbg !1104
  %sub22 = sub i64 %sub21, 16, !dbg !1104
  store i64 %sub22, ptr %ptradd19, align 8, !dbg !1104
  %49 = load ptr, ptr %unallocated, align 8, !dbg !1106
  %50 = load ptr, ptr %current, align 8, !dbg !1107
  %51 = load ptr, ptr %50, align 8, !dbg !1107
  store ptr %51, ptr %49, align 8, !dbg !1107
  %52 = load ptr, ptr %current, align 8, !dbg !1108
  %53 = load ptr, ptr %self, align 8, !dbg !1109
  %ptradd23 = getelementptr inbounds i8, ptr %53, i64 8, !dbg !1109
  %54 = load ptr, ptr %ptradd23, align 8, !dbg !1109
  %eq24 = icmp eq ptr %52, %54, !dbg !1108
  br i1 %eq24, label %if.then25, label %if.else27, !dbg !1108

if.then25:                                        ; preds = %switch.case16
  %55 = load ptr, ptr %self, align 8, !dbg !1110
  %ptradd26 = getelementptr inbounds i8, ptr %55, i64 8, !dbg !1110
  %56 = load ptr, ptr %unallocated, align 8, !dbg !1112
  store ptr %56, ptr %ptradd26, align 8, !dbg !1112
  br label %if.exit28, !dbg !1112

if.else27:                                        ; preds = %switch.case16
  %57 = load ptr, ptr %previous, align 8, !dbg !1113
  %58 = load ptr, ptr %unallocated, align 8, !dbg !1115
  store ptr %58, ptr %57, align 8, !dbg !1115
  br label %if.exit28, !dbg !1115

if.exit28:                                        ; preds = %if.else27, %if.then25
  %59 = load ptr, ptr %current, align 8, !dbg !1116
  %ptradd29 = getelementptr inbounds i8, ptr %59, i64 8, !dbg !1116
  %60 = load i64, ptr %aligned_bytes, align 8, !dbg !1117
  store i64 %60, ptr %ptradd29, align 8, !dbg !1117
  %61 = load ptr, ptr %current, align 8, !dbg !1118
  store ptr null, ptr %61, align 8, !dbg !1119
  %62 = load ptr, ptr %current, align 8, !dbg !1120
  %ptradd_any31 = getelementptr i8, ptr %62, i64 16, !dbg !1121
  store ptr %ptradd_any31, ptr %0, align 8, !dbg !1121
  ret i64 0, !dbg !1121

next_if32:                                        ; preds = %next_if
  br label %switch.default, !dbg !1121

switch.default:                                   ; preds = %next_if32
  %63 = load ptr, ptr %current, align 8, !dbg !1122
  store ptr %63, ptr %previous, align 8, !dbg !1122
  %64 = load ptr, ptr %current, align 8, !dbg !1124
  %65 = load ptr, ptr %64, align 8, !dbg !1124
  store ptr %65, ptr %current, align 8, !dbg !1124
  br label %switch.exit, !dbg !1124

switch.exit:                                      ; preds = %switch.default
  br label %loop.cond, !dbg !1124

loop.exit:                                        ; preds = %loop.cond
  %66 = load ptr, ptr %self, align 8, !dbg !1125
  %67 = load i64, ptr %aligned_bytes, align 8, !dbg !1125
  %68 = call i64 @std.core.mem.allocator.SimpleHeapAllocator.add_block(ptr %66, i64 %67), !dbg !1126
  %not_err34 = icmp eq i64 %68, 0, !dbg !1126
  %69 = call i1 @llvm.expect.i1(i1 %not_err34, i1 true), !dbg !1126
  br i1 %69, label %after_check36, label %assign_optional35, !dbg !1126

assign_optional35:                                ; preds = %loop.exit
  store i64 %68, ptr %error_var33, align 8, !dbg !1126
  br label %guard_block37, !dbg !1126

after_check36:                                    ; preds = %loop.exit
  br label %noerr_block38, !dbg !1126

guard_block37:                                    ; preds = %assign_optional35
  %70 = load i64, ptr %error_var33, align 8, !dbg !1126
  ret i64 %70, !dbg !1126

noerr_block38:                                    ; preds = %after_check36
  %71 = load ptr, ptr %self, align 8
  %72 = load i64, ptr %aligned_bytes, align 8
  %73 = call i64 @std.core.mem.allocator.SimpleHeapAllocator._alloc(ptr %retparam, ptr %71, i64 %72), !dbg !1127
  %not_err40 = icmp eq i64 %73, 0, !dbg !1127
  %74 = call i1 @llvm.expect.i1(i1 %not_err40, i1 true), !dbg !1127
  br i1 %74, label %after_check42, label %assign_optional41, !dbg !1127

assign_optional41:                                ; preds = %noerr_block38
  store i64 %73, ptr %reterr39, align 8, !dbg !1127
  br label %err_retblock, !dbg !1127

after_check42:                                    ; preds = %noerr_block38
  %75 = load ptr, ptr %retparam, align 8, !dbg !1127
  store ptr %75, ptr %0, align 8, !dbg !1127
  ret i64 0, !dbg !1127

err_retblock:                                     ; preds = %assign_optional41
  %76 = load i64, ptr %reterr39, align 8, !dbg !1127
  ret i64 %76, !dbg !1127

panic:                                            ; preds = %entry
  %77 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1052
  call void %77(ptr @.panic_msg, i64 62, ptr @.file.64, i64 17, ptr @.func.81, i64 6, i32 81) #6, !dbg !1052
  unreachable, !dbg !1052
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.SimpleHeapAllocator.add_block(ptr %0, i64 %1) #0 !dbg !1128 {
entry:
  %self = alloca ptr, align 8
  %aligned_bytes = alloca i64, align 8
  %x = alloca i64, align 8
  %result = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %new_block = alloca ptr, align 8
  %2 = icmp eq ptr %0, null, !dbg !1131
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1131
  br i1 %3, label %panic, label %checkok, !dbg !1131

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1132, !DIExpression(), !1133)
  store i64 %1, ptr %aligned_bytes, align 8
    #dbg_declare(ptr %aligned_bytes, !1134, !DIExpression(), !1135)
  %4 = load i64, ptr %aligned_bytes, align 8, !dbg !1136
  store i64 16, ptr %x, align 8
  %5 = load i64, ptr %x, align 8, !dbg !1137
  %neq = icmp ne i64 0, %5, !dbg !1137
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1137

and.rhs:                                          ; preds = %checkok
  %6 = load i64, ptr %x, align 8, !dbg !1140
  %7 = load i64, ptr %x, align 8, !dbg !1141
  %sub = sub i64 %7, 1, !dbg !1141
  %and = and i64 %6, %sub, !dbg !1140
  %eq = icmp eq i64 %and, 0, !dbg !1140
  br label %and.phi, !dbg !1140

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %eq, %and.rhs ], !dbg !1140
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1140

assert_fail:                                      ; preds = %and.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1139
  call void %8(ptr @.panic_msg.70, i64 51, ptr @.file.64, i64 17, ptr @.func.82, i64 9, i32 132) #6, !dbg !1139
  unreachable, !dbg !1139

assert_ok:                                        ; preds = %and.phi
  %9 = call i64 @std.core.mem.aligned_offset(i64 %4, i64 16), !dbg !1139
  %10 = load i64, ptr %aligned_bytes, align 8, !dbg !1142
  %eq1 = icmp eq i64 %9, %10, !dbg !1139
  br i1 %eq1, label %assert_ok3, label %assert_fail2, !dbg !1139

assert_fail2:                                     ; preds = %assert_ok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1139
  call void %11(ptr @.panic_msg.83, i64 96, ptr @.file.64, i64 17, ptr @.func.82, i64 9, i32 132) #6, !dbg !1139
  unreachable, !dbg !1139

assert_ok3:                                       ; preds = %assert_ok
    #dbg_declare(ptr %result, !1143, !DIExpression(), !1144)
  %12 = load ptr, ptr %self, align 8, !dbg !1145
  %13 = load ptr, ptr %12, align 8, !dbg !1145
  %checknull = icmp eq ptr %13, null, !dbg !1145
  %14 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1145
  br i1 %14, label %panic4, label %checkok5, !dbg !1145

checkok5:                                         ; preds = %assert_ok3
  %15 = load i64, ptr %aligned_bytes, align 8, !dbg !1146
  %add = add i64 %15, 16, !dbg !1146
  %16 = call i64 %13(ptr %retparam, i64 %add), !dbg !1145
  %not_err = icmp eq i64 %16, 0, !dbg !1145
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1145
  br i1 %17, label %after_check, label %assign_optional, !dbg !1145

assign_optional:                                  ; preds = %checkok5
  store i64 %16, ptr %error_var, align 8, !dbg !1145
  br label %guard_block, !dbg !1145

after_check:                                      ; preds = %checkok5
  br label %noerr_block, !dbg !1145

guard_block:                                      ; preds = %assign_optional
  %18 = load i64, ptr %error_var, align 8, !dbg !1145
  ret i64 %18, !dbg !1145

noerr_block:                                      ; preds = %after_check
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %result, ptr align 8 %retparam, i32 16, i1 false), !dbg !1145
    #dbg_declare(ptr %new_block, !1147, !DIExpression(), !1148)
  %19 = load ptr, ptr %result, align 8, !dbg !1149
  store ptr %19, ptr %new_block, align 8, !dbg !1149
  %20 = load ptr, ptr %new_block, align 8, !dbg !1150
  %ptradd = getelementptr inbounds i8, ptr %20, i64 8, !dbg !1150
  %ptradd6 = getelementptr inbounds i8, ptr %result, i64 8, !dbg !1151
  %21 = load i64, ptr %ptradd6, align 8, !dbg !1151
  %sub7 = sub i64 %21, 16, !dbg !1151
  store i64 %sub7, ptr %ptradd, align 8, !dbg !1151
  %22 = load ptr, ptr %new_block, align 8, !dbg !1152
  store ptr null, ptr %22, align 8, !dbg !1153
  %23 = load ptr, ptr %new_block, align 8, !dbg !1154
  %ptradd_any = getelementptr i8, ptr %23, i64 16, !dbg !1155
  %24 = load ptr, ptr %self, align 8, !dbg !1155
  call void @std.core.mem.allocator.SimpleHeapAllocator._free(ptr %24, ptr %ptradd_any), !dbg !1156
  ret i64 0, !dbg !1156

panic:                                            ; preds = %entry
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1133
  call void %25(ptr @.panic_msg, i64 62, ptr @.file.64, i64 17, ptr @.func.82, i64 9, i32 130) #6, !dbg !1133
  unreachable, !dbg !1133

panic4:                                           ; preds = %assert_ok3
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1145
  call void %26(ptr @.panic_msg.84, i64 56, ptr @.file.64, i64 17, ptr @.func.82, i64 9, i32 133) #6, !dbg !1145
  unreachable, !dbg !1145
}

; Function Attrs: nounwind ssp uwtable
define internal void @std.core.mem.allocator.SimpleHeapAllocator._free(ptr %0, ptr %1) #0 !dbg !1157 {
entry:
  %self = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %block = alloca ptr, align 8
  %current = alloca ptr, align 8
  %prev = alloca ptr, align 8
  %2 = icmp eq ptr %0, null, !dbg !1160
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1160
  br i1 %3, label %panic, label %checkok, !dbg !1160

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1161, !DIExpression(), !1162)
  store ptr %1, ptr %ptr, align 8
    #dbg_declare(ptr %ptr, !1163, !DIExpression(), !1164)
  %4 = load ptr, ptr %ptr, align 8, !dbg !1165
  %i2nb = icmp eq ptr %4, null, !dbg !1165
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1165

if.then:                                          ; preds = %checkok
  ret void, !dbg !1166

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %block, !1167, !DIExpression(), !1168)
  %5 = load ptr, ptr %ptr, align 8, !dbg !1169
  %ptradd_any = getelementptr i8, ptr %5, i64 -16, !dbg !1170
  store ptr %ptradd_any, ptr %block, align 8, !dbg !1170
  %6 = load ptr, ptr %self, align 8, !dbg !1171
  %ptradd = getelementptr inbounds i8, ptr %6, i64 8, !dbg !1171
  %7 = load ptr, ptr %ptradd, align 8, !dbg !1171
  %i2nb1 = icmp eq ptr %7, null, !dbg !1171
  br i1 %i2nb1, label %if.then2, label %if.exit4, !dbg !1171

if.then2:                                         ; preds = %if.exit
  %8 = load ptr, ptr %self, align 8, !dbg !1172
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !1172
  %9 = load ptr, ptr %block, align 8, !dbg !1174
  store ptr %9, ptr %ptradd3, align 8, !dbg !1174
  ret void, !dbg !1175

if.exit4:                                         ; preds = %if.exit
    #dbg_declare(ptr %current, !1176, !DIExpression(), !1177)
  %10 = load ptr, ptr %self, align 8, !dbg !1178
  %ptradd5 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !1178
  %11 = load ptr, ptr %ptradd5, align 8, !dbg !1178
  store ptr %11, ptr %current, align 8, !dbg !1178
    #dbg_declare(ptr %prev, !1179, !DIExpression(), !1180)
  %12 = load ptr, ptr %current, align 8, !dbg !1181
  store ptr %12, ptr %prev, align 8, !dbg !1181
  br label %loop.cond, !dbg !1182

loop.cond:                                        ; preds = %if.exit11, %if.exit4
  %13 = load ptr, ptr %current, align 8, !dbg !1183
  %i2b = icmp ne ptr %13, null, !dbg !1183
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1183

loop.body:                                        ; preds = %loop.cond
  %14 = load ptr, ptr %block, align 8, !dbg !1185
  %15 = load ptr, ptr %current, align 8, !dbg !1187
  %lt = icmp ult ptr %14, %15, !dbg !1185
  br i1 %lt, label %if.then6, label %if.exit11, !dbg !1185

if.then6:                                         ; preds = %loop.body
  %16 = load ptr, ptr %block, align 8, !dbg !1188
  %17 = load ptr, ptr %prev, align 8, !dbg !1190
  %gt = icmp ugt ptr %16, %17, !dbg !1188
  br i1 %gt, label %if.then7, label %if.exit8, !dbg !1188

if.then7:                                         ; preds = %if.then6
  br label %loop.exit, !dbg !1191

if.exit8:                                         ; preds = %if.then6
  %18 = load ptr, ptr %current, align 8, !dbg !1192
  %19 = load ptr, ptr %prev, align 8, !dbg !1193
  %eq = icmp eq ptr %18, %19, !dbg !1192
  br i1 %eq, label %if.then9, label %if.exit10, !dbg !1192

if.then9:                                         ; preds = %if.exit8
  br label %loop.exit, !dbg !1194

if.exit10:                                        ; preds = %if.exit8
  br label %if.exit11, !dbg !1194

if.exit11:                                        ; preds = %if.exit10, %loop.body
  %20 = load ptr, ptr %current, align 8, !dbg !1195
  store ptr %20, ptr %prev, align 8, !dbg !1195
  %21 = load ptr, ptr %prev, align 8, !dbg !1196
  %22 = load ptr, ptr %21, align 8, !dbg !1196
  store ptr %22, ptr %current, align 8, !dbg !1196
  br label %loop.cond, !dbg !1196

loop.exit:                                        ; preds = %if.then9, %if.then7, %loop.cond
  %23 = load ptr, ptr %current, align 8, !dbg !1197
  %i2b12 = icmp ne ptr %23, null, !dbg !1197
  br i1 %i2b12, label %if.then13, label %if.exit23, !dbg !1197

if.then13:                                        ; preds = %loop.exit
  %24 = load ptr, ptr %current, align 8, !dbg !1198
  %25 = load ptr, ptr %block, align 8, !dbg !1200
  %ptradd_any14 = getelementptr i8, ptr %25, i64 16, !dbg !1201
  %26 = load ptr, ptr %block, align 8, !dbg !1202
  %ptradd15 = getelementptr inbounds i8, ptr %26, i64 8, !dbg !1202
  %27 = load i64, ptr %ptradd15, align 8, !dbg !1202
  %ptradd_any16 = getelementptr i8, ptr %ptradd_any14, i64 %27, !dbg !1202
  %eq17 = icmp eq ptr %24, %ptradd_any16, !dbg !1198
  br i1 %eq17, label %if.then18, label %if.else, !dbg !1198

if.then18:                                        ; preds = %if.then13
  %28 = load ptr, ptr %block, align 8, !dbg !1203
  %ptradd19 = getelementptr inbounds i8, ptr %28, i64 8, !dbg !1203
  %29 = load i64, ptr %ptradd19, align 8, !dbg !1203
  %30 = load ptr, ptr %current, align 8, !dbg !1205
  %ptradd20 = getelementptr inbounds i8, ptr %30, i64 8, !dbg !1205
  %31 = load i64, ptr %ptradd20, align 8, !dbg !1205
  %add = add i64 %31, 16, !dbg !1205
  %add21 = add i64 %29, %add, !dbg !1203
  store i64 %add21, ptr %ptradd19, align 8, !dbg !1203
  %32 = load ptr, ptr %block, align 8, !dbg !1206
  %33 = load ptr, ptr %current, align 8, !dbg !1207
  %34 = load ptr, ptr %33, align 8, !dbg !1207
  store ptr %34, ptr %32, align 8, !dbg !1207
  br label %if.exit22, !dbg !1207

if.else:                                          ; preds = %if.then13
  %35 = load ptr, ptr %block, align 8, !dbg !1208
  %36 = load ptr, ptr %current, align 8, !dbg !1210
  store ptr %36, ptr %35, align 8, !dbg !1210
  br label %if.exit22, !dbg !1210

if.exit22:                                        ; preds = %if.else, %if.then18
  br label %if.exit23, !dbg !1210

if.exit23:                                        ; preds = %if.exit22, %loop.exit
  %37 = load ptr, ptr %prev, align 8, !dbg !1211
  %38 = load ptr, ptr %current, align 8, !dbg !1212
  %eq24 = icmp eq ptr %37, %38, !dbg !1211
  br i1 %eq24, label %if.then25, label %if.else27, !dbg !1211

if.then25:                                        ; preds = %if.exit23
  %39 = load ptr, ptr %self, align 8, !dbg !1213
  %ptradd26 = getelementptr inbounds i8, ptr %39, i64 8, !dbg !1213
  %40 = load ptr, ptr %block, align 8, !dbg !1215
  store ptr %40, ptr %ptradd26, align 8, !dbg !1215
  br label %if.exit39, !dbg !1215

if.else27:                                        ; preds = %if.exit23
  %41 = load ptr, ptr %block, align 8, !dbg !1216
  %42 = load ptr, ptr %prev, align 8, !dbg !1218
  %ptradd_any28 = getelementptr i8, ptr %42, i64 16, !dbg !1219
  %43 = load ptr, ptr %prev, align 8, !dbg !1220
  %ptradd29 = getelementptr inbounds i8, ptr %43, i64 8, !dbg !1220
  %44 = load i64, ptr %ptradd29, align 8, !dbg !1220
  %ptradd_any30 = getelementptr i8, ptr %ptradd_any28, i64 %44, !dbg !1220
  %eq31 = icmp eq ptr %41, %ptradd_any30, !dbg !1216
  br i1 %eq31, label %if.then32, label %if.else37, !dbg !1216

if.then32:                                        ; preds = %if.else27
  %45 = load ptr, ptr %prev, align 8, !dbg !1221
  %ptradd33 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !1221
  %46 = load i64, ptr %ptradd33, align 8, !dbg !1221
  %47 = load ptr, ptr %block, align 8, !dbg !1223
  %ptradd34 = getelementptr inbounds i8, ptr %47, i64 8, !dbg !1223
  %48 = load i64, ptr %ptradd34, align 8, !dbg !1223
  %add35 = add i64 %48, 16, !dbg !1223
  %add36 = add i64 %46, %add35, !dbg !1221
  store i64 %add36, ptr %ptradd33, align 8, !dbg !1221
  %49 = load ptr, ptr %prev, align 8, !dbg !1224
  %50 = load ptr, ptr %block, align 8, !dbg !1225
  %51 = load ptr, ptr %50, align 8, !dbg !1225
  store ptr %51, ptr %49, align 8, !dbg !1225
  br label %if.exit38, !dbg !1225

if.else37:                                        ; preds = %if.else27
  %52 = load ptr, ptr %prev, align 8, !dbg !1226
  %53 = load ptr, ptr %block, align 8, !dbg !1228
  store ptr %53, ptr %52, align 8, !dbg !1228
  br label %if.exit38, !dbg !1228

if.exit38:                                        ; preds = %if.else37, %if.then32
  br label %if.exit39, !dbg !1228

if.exit39:                                        ; preds = %if.exit38, %if.then25
  ret void, !dbg !1228

panic:                                            ; preds = %entry
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1162
  call void %54(ptr @.panic_msg, i64 62, ptr @.file.64, i64 17, ptr @.func.85, i64 5, i32 141) #6, !dbg !1162
  unreachable, !dbg !1162
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.mem.allocator.LibcAllocator.to_string(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !1229 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %result = alloca %"char[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1233
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1233
  br i1 %4, label %panic, label %checkok, !dbg !1233

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1234, !DIExpression(), !1235)
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !1236, !DIExpression(), !1237)
  %lo = load i64, ptr %allocator, align 8, !dbg !1238
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1238
  %hi = load ptr, ptr %ptradd1, align 8, !dbg !1238
  %5 = call { ptr, i64 } @std.core.String.copy(ptr @.str.89, i64 14, i64 %lo, ptr %hi), !dbg !1233
  store { ptr, i64 } %5, ptr %result, align 8
  %6 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %6

panic:                                            ; preds = %entry
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1235
  call void %7(ptr @.panic_msg, i64 62, ptr @.file.87, i64 17, ptr @.func.88, i64 9, i32 14) #6, !dbg !1235
  unreachable, !dbg !1235
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.LibcAllocator.to_format(ptr %0, ptr %1, ptr %2) #0 comdat !dbg !1239 {
entry:
  %self = alloca ptr, align 8
  %format = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1260
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1260
  br i1 %4, label %panic, label %checkok, !dbg !1260

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1261, !DIExpression(), !1262)
  store ptr %2, ptr %format, align 8
    #dbg_declare(ptr %format, !1263, !DIExpression(), !1264)
  %5 = load ptr, ptr %format, align 8
  %6 = call i64 @std.io.Formatter.print(ptr %retparam, ptr %5, ptr @.str.91, i64 14), !dbg !1260
  %not_err = icmp eq i64 %6, 0, !dbg !1260
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1260
  br i1 %7, label %after_check, label %assign_optional, !dbg !1260

assign_optional:                                  ; preds = %checkok
  store i64 %6, ptr %reterr, align 8, !dbg !1260
  br label %err_retblock, !dbg !1260

after_check:                                      ; preds = %checkok
  %8 = load i64, ptr %retparam, align 8, !dbg !1260
  store i64 %8, ptr %0, align 8, !dbg !1260
  ret i64 0, !dbg !1260

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !1260
  ret i64 %9, !dbg !1260

panic:                                            ; preds = %entry
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1262
  call void %10(ptr @.panic_msg, i64 62, ptr @.file.87, i64 17, ptr @.func.90, i64 9, i32 15) #6, !dbg !1262
  unreachable, !dbg !1262
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.LibcAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !1265 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %data = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %reterr4 = alloca i64, align 8
  %data6 = alloca ptr, align 8
  %reterr16 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !1268
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1268
  br i1 %6, label %panic, label %checkok, !dbg !1268

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1269, !DIExpression(), !1270)
  store i64 %2, ptr %bytes, align 8
    #dbg_declare(ptr %bytes, !1271, !DIExpression(), !1272)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !1273, !DIExpression(), !1274)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1275, !DIExpression(), !1276)
  %7 = load i32, ptr %init_type, align 4, !dbg !1277
  %eq = icmp eq i32 %7, 1, !dbg !1277
  br i1 %eq, label %if.then, label %if.else, !dbg !1277

if.then:                                          ; preds = %checkok
    #dbg_declare(ptr %data, !1278, !DIExpression(), !1280)
  %8 = load i64, ptr %alignment, align 8, !dbg !1281
  %lt = icmp ult i64 16, %8, !dbg !1281
  br i1 %lt, label %if.then1, label %if.exit3, !dbg !1281

if.then1:                                         ; preds = %if.then
  %9 = load i64, ptr %alignment, align 8, !dbg !1282
  %10 = load i64, ptr %bytes, align 8, !dbg !1282
  %11 = call i32 @posix_memalign(ptr %data, i64 %9, i64 %10), !dbg !1284
  %i2b = icmp ne i32 %11, 0, !dbg !1284
  br i1 %i2b, label %if.then2, label %if.exit, !dbg !1284

if.then2:                                         ; preds = %if.then1
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !1285

if.exit:                                          ; preds = %if.then1
  %12 = load ptr, ptr %data, align 8
  store ptr %12, ptr %dst, align 8
  %13 = load i64, ptr %bytes, align 8
  store i64 %13, ptr %len, align 8
  %14 = load ptr, ptr %dst, align 8, !dbg !1286
  %15 = load i64, ptr %len, align 8, !dbg !1289
  call void @llvm.memset.p0.i64(ptr align 16 %14, i8 0, i64 %15, i1 false), !dbg !1290
  %16 = load ptr, ptr %data, align 8, !dbg !1291
  store ptr %16, ptr %0, align 8, !dbg !1291
  ret i64 0, !dbg !1291

if.exit3:                                         ; preds = %if.then
  %17 = load i64, ptr %bytes, align 8, !dbg !1292
  %18 = call ptr @calloc(i64 1, i64 %17), !dbg !1293
  %i2b5 = icmp ne ptr %18, null, !dbg !1293
  br i1 %i2b5, label %cond.lhs, label %cond.rhs, !dbg !1293

cond.lhs:                                         ; preds = %if.exit3
  br label %cond.phi, !dbg !1293

cond.rhs:                                         ; preds = %if.exit3
  store i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), ptr %reterr4, align 8, !dbg !1294
  br label %err_retblock, !dbg !1294

cond.phi:                                         ; preds = %cond.lhs
  store ptr %18, ptr %0, align 8, !dbg !1294
  ret i64 0, !dbg !1294

err_retblock:                                     ; preds = %cond.rhs
  %19 = load i64, ptr %reterr4, align 8, !dbg !1294
  ret i64 %19, !dbg !1294

if.else:                                          ; preds = %checkok
    #dbg_declare(ptr %data6, !1295, !DIExpression(), !1297)
  %20 = load i64, ptr %alignment, align 8, !dbg !1298
  %lt7 = icmp ult i64 16, %20, !dbg !1298
  br i1 %lt7, label %if.then8, label %if.else12, !dbg !1298

if.then8:                                         ; preds = %if.else
  %21 = load i64, ptr %alignment, align 8, !dbg !1299
  %22 = load i64, ptr %bytes, align 8, !dbg !1299
  %23 = call i32 @posix_memalign(ptr %data6, i64 %21, i64 %22), !dbg !1301
  %i2b9 = icmp ne i32 %23, 0, !dbg !1301
  br i1 %i2b9, label %if.then10, label %if.exit11, !dbg !1301

if.then10:                                        ; preds = %if.then8
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !1302

if.exit11:                                        ; preds = %if.then8
  br label %if.exit15, !dbg !1302

if.else12:                                        ; preds = %if.else
  %24 = load i64, ptr %bytes, align 8, !dbg !1303
  %25 = call ptr @malloc(i64 %24), !dbg !1305
  store ptr %25, ptr %data6, align 8, !dbg !1305
  %i2nb = icmp eq ptr %25, null, !dbg !1305
  br i1 %i2nb, label %if.then13, label %if.exit14, !dbg !1305

if.then13:                                        ; preds = %if.else12
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !1306

if.exit14:                                        ; preds = %if.else12
  br label %if.exit15, !dbg !1306

if.exit15:                                        ; preds = %if.exit14, %if.exit11
  %26 = load ptr, ptr %data6, align 8, !dbg !1307
  store ptr %26, ptr %0, align 8, !dbg !1307
  ret i64 0, !dbg !1307

panic:                                            ; preds = %entry
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1270
  call void %27(ptr @.panic_msg, i64 62, ptr @.file.87, i64 17, ptr @.func.15, i64 7, i32 22) #6, !dbg !1270
  unreachable, !dbg !1270
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.LibcAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !1308 {
entry:
  %self = alloca ptr, align 8
  %old_ptr = alloca ptr, align 8
  %new_bytes = alloca i64, align 8
  %alignment = alloca i64, align 8
  %reterr = alloca i64, align 8
  %new_ptr = alloca ptr, align 8
  %old_usable_size = alloca i64, align 8
  %copy_size = alloca i64, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr22 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !1311
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1311
  br i1 %6, label %panic, label %checkok, !dbg !1311

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1312, !DIExpression(), !1313)
  store ptr %2, ptr %old_ptr, align 8
    #dbg_declare(ptr %old_ptr, !1314, !DIExpression(), !1315)
  store i64 %3, ptr %new_bytes, align 8
    #dbg_declare(ptr %new_bytes, !1316, !DIExpression(), !1317)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1318, !DIExpression(), !1319)
  %7 = load i64, ptr %alignment, align 8, !dbg !1320
  %ge = icmp uge i64 16, %7, !dbg !1320
  br i1 %ge, label %if.then, label %if.exit, !dbg !1320

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %old_ptr, align 8, !dbg !1321
  %9 = load i64, ptr %new_bytes, align 8, !dbg !1321
  %10 = call ptr @realloc(ptr %8, i64 %9), !dbg !1322
  %i2b = icmp ne ptr %10, null, !dbg !1322
  br i1 %i2b, label %cond.lhs, label %cond.rhs, !dbg !1322

cond.lhs:                                         ; preds = %if.then
  br label %cond.phi, !dbg !1322

cond.rhs:                                         ; preds = %if.then
  store i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), ptr %reterr, align 8, !dbg !1323
  br label %err_retblock, !dbg !1323

cond.phi:                                         ; preds = %cond.lhs
  store ptr %10, ptr %0, align 8, !dbg !1323
  ret i64 0, !dbg !1323

err_retblock:                                     ; preds = %cond.rhs
  %11 = load i64, ptr %reterr, align 8, !dbg !1323
  ret i64 %11, !dbg !1323

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %new_ptr, !1324, !DIExpression(), !1325)
  store ptr null, ptr %new_ptr, align 8, !dbg !1325
  %12 = load i64, ptr %alignment, align 8, !dbg !1326
  %13 = load i64, ptr %new_bytes, align 8, !dbg !1326
  %14 = call i32 @posix_memalign(ptr %new_ptr, i64 %12, i64 %13), !dbg !1327
  %i2b1 = icmp ne i32 %14, 0, !dbg !1327
  br i1 %i2b1, label %if.then2, label %if.exit3, !dbg !1327

if.then2:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !1328

if.exit3:                                         ; preds = %if.exit
    #dbg_declare(ptr %old_usable_size, !1329, !DIExpression(), !1330)
  %15 = load ptr, ptr %old_ptr, align 8, !dbg !1331
  %16 = call i64 @malloc_usable_size(ptr %15), !dbg !1332
  store i64 %16, ptr %old_usable_size, align 8, !dbg !1332
    #dbg_declare(ptr %copy_size, !1333, !DIExpression(), !1334)
  %17 = load i64, ptr %new_bytes, align 8, !dbg !1335
  %18 = load i64, ptr %old_usable_size, align 8, !dbg !1336
  %lt = icmp ult i64 %17, %18, !dbg !1335
  br i1 %lt, label %cond.lhs4, label %cond.rhs5, !dbg !1335

cond.lhs4:                                        ; preds = %if.exit3
  %19 = load i64, ptr %new_bytes, align 8, !dbg !1337
  br label %cond.phi6, !dbg !1337

cond.rhs5:                                        ; preds = %if.exit3
  %20 = load i64, ptr %old_usable_size, align 8, !dbg !1338
  br label %cond.phi6, !dbg !1338

cond.phi6:                                        ; preds = %cond.rhs5, %cond.lhs4
  %val = phi i64 [ %19, %cond.lhs4 ], [ %20, %cond.rhs5 ], !dbg !1338
  store i64 %val, ptr %copy_size, align 8, !dbg !1338
  %21 = load ptr, ptr %new_ptr, align 8
  store ptr %21, ptr %dst, align 8
  %22 = load ptr, ptr %old_ptr, align 8
  store ptr %22, ptr %src, align 8
  %23 = load i64, ptr %copy_size, align 8
  store i64 %23, ptr %len, align 8
  %24 = load ptr, ptr %dst, align 8, !dbg !1339
  %neq = icmp ne ptr %24, null, !dbg !1339
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1339

assert_fail:                                      ; preds = %cond.phi6
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1339
  call void %25(ptr @.panic_msg.75, i64 37, ptr @.file.71, i64 6, ptr @.func.20, i64 6, i32 329) #6, !dbg !1339
  unreachable, !dbg !1339

assert_ok:                                        ; preds = %cond.phi6
  %26 = load ptr, ptr %src, align 8, !dbg !1343
  %neq7 = icmp ne ptr %26, null, !dbg !1343
  br i1 %neq7, label %or.phi, label %or.rhs, !dbg !1343

or.rhs:                                           ; preds = %assert_ok
  %27 = load i64, ptr %len, align 8, !dbg !1344
  %eq = icmp eq i64 0, %27, !dbg !1344
  br label %or.phi, !dbg !1344

or.phi:                                           ; preds = %or.rhs, %assert_ok
  %val8 = phi i1 [ true, %assert_ok ], [ %eq, %or.rhs ], !dbg !1344
  br i1 %val8, label %assert_ok10, label %assert_fail9, !dbg !1344

assert_fail9:                                     ; preds = %or.phi
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1345
  call void %28(ptr @.panic_msg.76, i64 94, ptr @.file.87, i64 17, ptr @.func.20, i64 6, i32 69) #6, !dbg !1345
  unreachable, !dbg !1345

assert_ok10:                                      ; preds = %or.phi
  %29 = load i64, ptr %len, align 8, !dbg !1346
  %eq11 = icmp eq i64 0, %29, !dbg !1346
  br i1 %eq11, label %or.phi13, label %or.rhs12, !dbg !1346

or.rhs12:                                         ; preds = %assert_ok10
  %30 = load ptr, ptr %dst, align 8, !dbg !1347
  %31 = load i64, ptr %len, align 8, !dbg !1348
  %ptradd_any = getelementptr i8, ptr %30, i64 %31, !dbg !1348
  %32 = load ptr, ptr %src, align 8, !dbg !1349
  %le = icmp ule ptr %ptradd_any, %32, !dbg !1347
  br label %or.phi13, !dbg !1347

or.phi13:                                         ; preds = %or.rhs12, %assert_ok10
  %val14 = phi i1 [ true, %assert_ok10 ], [ %le, %or.rhs12 ], !dbg !1347
  br i1 %val14, label %or.phi18, label %or.rhs15, !dbg !1347

or.rhs15:                                         ; preds = %or.phi13
  %33 = load ptr, ptr %src, align 8, !dbg !1350
  %34 = load i64, ptr %len, align 8, !dbg !1351
  %ptradd_any16 = getelementptr i8, ptr %33, i64 %34, !dbg !1351
  %35 = load ptr, ptr %dst, align 8, !dbg !1352
  %le17 = icmp ule ptr %ptradd_any16, %35, !dbg !1350
  br label %or.phi18, !dbg !1350

or.phi18:                                         ; preds = %or.rhs15, %or.phi13
  %val19 = phi i1 [ true, %or.phi13 ], [ %le17, %or.rhs15 ], !dbg !1350
  br i1 %val19, label %assert_ok21, label %assert_fail20, !dbg !1350

assert_fail20:                                    ; preds = %or.phi18
  %36 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1345
  call void %36(ptr @.panic_msg.77, i64 95, ptr @.file.87, i64 17, ptr @.func.20, i64 6, i32 69) #6, !dbg !1345
  unreachable, !dbg !1345

assert_ok21:                                      ; preds = %or.phi18
  %37 = load ptr, ptr %dst, align 8, !dbg !1353
  %38 = load ptr, ptr %src, align 8, !dbg !1354
  %39 = load i64, ptr %len, align 8, !dbg !1355
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %37, ptr align 16 %38, i64 %39, i1 false), !dbg !1356
  %40 = load ptr, ptr %old_ptr, align 8, !dbg !1357
  %41 = call ptr @free(ptr %40), !dbg !1358
  %42 = load ptr, ptr %new_ptr, align 8, !dbg !1359
  store ptr %42, ptr %0, align 8, !dbg !1359
  ret i64 0, !dbg !1359

panic:                                            ; preds = %entry
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1313
  call void %43(ptr @.panic_msg, i64 62, ptr @.file.87, i64 17, ptr @.func.20, i64 6, i32 53) #6, !dbg !1313
  unreachable, !dbg !1313
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.LibcAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !1360 {
entry:
  %self = alloca ptr, align 8
  %old_ptr = alloca ptr, align 8
  %aligned = alloca i8, align 1
  %3 = icmp eq ptr %0, null, !dbg !1363
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1363
  br i1 %4, label %panic, label %checkok, !dbg !1363

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1364, !DIExpression(), !1365)
  store ptr %1, ptr %old_ptr, align 8
    #dbg_declare(ptr %old_ptr, !1366, !DIExpression(), !1367)
  store i8 %2, ptr %aligned, align 1
    #dbg_declare(ptr %aligned, !1368, !DIExpression(), !1369)
  %5 = load ptr, ptr %old_ptr, align 8, !dbg !1370
  %6 = call ptr @free(ptr %5), !dbg !1371
  ret void, !dbg !1371

panic:                                            ; preds = %entry
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1365
  call void %7(ptr @.panic_msg, i64 62, ptr @.file.87, i64 17, ptr @.func.24, i64 7, i32 74) #6, !dbg !1365
  unreachable, !dbg !1365
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.OnStackAllocator.init(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !1372 {
entry:
  %self = alloca ptr, align 8
  %data = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %5 = icmp eq ptr %0, null, !dbg !1389
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1389
  br i1 %6, label %panic, label %checkok, !dbg !1389

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1390, !DIExpression(), !1391)
  store ptr %1, ptr %data, align 8
  %ptradd = getelementptr inbounds i8, ptr %data, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %data, !1392, !DIExpression(), !1393)
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !1394, !DIExpression(), !1395)
  %7 = load ptr, ptr %self, align 8, !dbg !1396
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !1396
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd2, ptr align 8 %data, i32 16, i1 false), !dbg !1397
  %8 = load ptr, ptr %self, align 8, !dbg !1398
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %8, ptr align 8 %allocator, i32 16, i1 false), !dbg !1399
  %9 = load ptr, ptr %self, align 8, !dbg !1400
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 32, !dbg !1400
  store i64 0, ptr %ptradd3, align 8, !dbg !1401
  ret void, !dbg !1401

panic:                                            ; preds = %entry
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1391
  call void %10(ptr @.panic_msg, i64 62, ptr @.file.93, i64 21, ptr @.func, i64 4, i32 32) #6, !dbg !1391
  unreachable, !dbg !1391
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.OnStackAllocator.free(ptr %0) #0 comdat !dbg !1402 {
entry:
  %self = alloca ptr, align 8
  %chunk = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %allocator5 = alloca %any, align 8
  %ptr7 = alloca ptr, align 8
  %.inlinecache15 = alloca ptr, align 8
  %.cachedtype16 = alloca ptr, align 8
  %old = alloca ptr, align 8
  %allocator28 = alloca %any, align 8
  %ptr29 = alloca ptr, align 8
  %.inlinecache37 = alloca ptr, align 8
  %.cachedtype38 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype38, align 8, !dbg !1405
  store ptr null, ptr %.cachedtype16, align 8, !dbg !1405
  store ptr null, ptr %.cachedtype, align 8, !dbg !1405
  %1 = icmp eq ptr %0, null, !dbg !1405
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1405
  br i1 %2, label %panic, label %checkok, !dbg !1405

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1406, !DIExpression(), !1407)
    #dbg_declare(ptr %chunk, !1408, !DIExpression(), !1409)
  %3 = load ptr, ptr %self, align 8, !dbg !1410
  %ptradd = getelementptr inbounds i8, ptr %3, i64 40, !dbg !1410
  %4 = load ptr, ptr %ptradd, align 8, !dbg !1410
  store ptr %4, ptr %chunk, align 8, !dbg !1410
  br label %loop.cond, !dbg !1411

loop.cond:                                        ; preds = %expr_block.exit47, %checkok
  %5 = load ptr, ptr %chunk, align 8, !dbg !1412
  %i2b = icmp ne ptr %5, null, !dbg !1412
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1412

loop.body:                                        ; preds = %loop.cond
  %6 = load ptr, ptr %chunk, align 8, !dbg !1414
  %7 = load i8, ptr %6, align 8, !dbg !1414
  %8 = trunc i8 %7 to i1, !dbg !1414
  br i1 %8, label %if.then, label %if.else, !dbg !1414

if.then:                                          ; preds = %loop.body
  %9 = load ptr, ptr %self, align 8, !dbg !1416
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %9, i32 16, i1 false)
  %10 = load ptr, ptr %chunk, align 8, !dbg !1418
  %ptradd1 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1418
  %11 = load ptr, ptr %ptradd1, align 8
  store ptr %11, ptr %ptr, align 8
  %12 = load ptr, ptr %ptr, align 8, !dbg !1419
  %i2nb = icmp eq ptr %12, null, !dbg !1419
  br i1 %i2nb, label %if.then2, label %if.exit, !dbg !1419

if.then2:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !1422

if.exit:                                          ; preds = %if.then
  %13 = load ptr, ptr %ptr, align 8, !dbg !1423
  %neq = icmp ne ptr %13, null, !dbg !1424
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1424

assert_fail:                                      ; preds = %if.exit
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1424
  call void %14(ptr @.panic_msg.27, i64 75, ptr @.file.73, i64 16, ptr @.func.8, i64 4, i32 163) #6, !dbg !1424
  unreachable, !dbg !1424

assert_ok:                                        ; preds = %if.exit
  %ptradd3 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1424
  %15 = load i64, ptr %ptradd3, align 8, !dbg !1424
  %16 = inttoptr i64 %15 to ptr, !dbg !1424
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1405
  %17 = icmp eq ptr %16, %type, !dbg !1405
  br i1 %17, label %cache_hit, label %cache_miss, !dbg !1405

cache_miss:                                       ; preds = %assert_ok
  %ptradd4 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1405
  %18 = load ptr, ptr %ptradd4, align 8, !dbg !1405
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.release"), !dbg !1405
  store ptr %19, ptr %.inlinecache, align 8, !dbg !1405
  store ptr %16, ptr %.cachedtype, align 8, !dbg !1405
  br label %20, !dbg !1405

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1405
  br label %20, !dbg !1405

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ], !dbg !1405
  %21 = icmp eq ptr %fn_phi, null, !dbg !1405
  br i1 %21, label %missing_function, label %match, !dbg !1405

missing_function:                                 ; preds = %20
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1405
  call void %22(ptr @.panic_msg.28, i64 44, ptr @.file.73, i64 16, ptr @.func.8, i64 4, i32 163) #6, !dbg !1405
  unreachable, !dbg !1405

match:                                            ; preds = %20
  %23 = load ptr, ptr %allocator, align 8, !dbg !1405
  call void %fn_phi(ptr %23, ptr %13, i8 zeroext 1), !dbg !1405
  br label %expr_block.exit, !dbg !1405

expr_block.exit:                                  ; preds = %match, %if.then2
  br label %if.exit26, !dbg !1405

if.else:                                          ; preds = %loop.body
  %24 = load ptr, ptr %self, align 8, !dbg !1425
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %24, i32 16, i1 false)
  %25 = load ptr, ptr %chunk, align 8, !dbg !1427
  %ptradd6 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !1427
  %26 = load ptr, ptr %ptradd6, align 8
  store ptr %26, ptr %ptr7, align 8
  %27 = load ptr, ptr %ptr7, align 8, !dbg !1428
  %i2nb8 = icmp eq ptr %27, null, !dbg !1428
  br i1 %i2nb8, label %if.then9, label %if.exit10, !dbg !1428

if.then9:                                         ; preds = %if.else
  br label %expr_block.exit25, !dbg !1431

if.exit10:                                        ; preds = %if.else
  %28 = load ptr, ptr %ptr7, align 8, !dbg !1432
  %neq11 = icmp ne ptr %28, null, !dbg !1433
  br i1 %neq11, label %assert_ok13, label %assert_fail12, !dbg !1433

assert_fail12:                                    ; preds = %if.exit10
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1433
  call void %29(ptr @.panic_msg.27, i64 75, ptr @.file.73, i64 16, ptr @.func.8, i64 4, i32 122) #6, !dbg !1433
  unreachable, !dbg !1433

assert_ok13:                                      ; preds = %if.exit10
  %ptradd14 = getelementptr inbounds i8, ptr %allocator5, i64 8, !dbg !1433
  %30 = load i64, ptr %ptradd14, align 8, !dbg !1433
  %31 = inttoptr i64 %30 to ptr, !dbg !1433
  %type17 = load ptr, ptr %.cachedtype16, align 8, !dbg !1405
  %32 = icmp eq ptr %31, %type17, !dbg !1405
  br i1 %32, label %cache_hit20, label %cache_miss18, !dbg !1405

cache_miss18:                                     ; preds = %assert_ok13
  %ptradd19 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !1405
  %33 = load ptr, ptr %ptradd19, align 8, !dbg !1405
  %34 = call ptr @.dyn_search(ptr %33, ptr @"$sel.release"), !dbg !1405
  store ptr %34, ptr %.inlinecache15, align 8, !dbg !1405
  store ptr %31, ptr %.cachedtype16, align 8, !dbg !1405
  br label %35, !dbg !1405

cache_hit20:                                      ; preds = %assert_ok13
  %cache_hit_fn21 = load ptr, ptr %.inlinecache15, align 8, !dbg !1405
  br label %35, !dbg !1405

35:                                               ; preds = %cache_hit20, %cache_miss18
  %fn_phi22 = phi ptr [ %cache_hit_fn21, %cache_hit20 ], [ %34, %cache_miss18 ], !dbg !1405
  %36 = icmp eq ptr %fn_phi22, null, !dbg !1405
  br i1 %36, label %missing_function23, label %match24, !dbg !1405

missing_function23:                               ; preds = %35
  %37 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1405
  call void %37(ptr @.panic_msg.28, i64 44, ptr @.file.73, i64 16, ptr @.func.8, i64 4, i32 122) #6, !dbg !1405
  unreachable, !dbg !1405

match24:                                          ; preds = %35
  %38 = load ptr, ptr %allocator5, align 8, !dbg !1405
  call void %fn_phi22(ptr %38, ptr %28, i8 zeroext 0), !dbg !1405
  br label %expr_block.exit25, !dbg !1405

expr_block.exit25:                                ; preds = %match24, %if.then9
  br label %if.exit26, !dbg !1405

if.exit26:                                        ; preds = %expr_block.exit25, %expr_block.exit
    #dbg_declare(ptr %old, !1434, !DIExpression(), !1435)
  %39 = load ptr, ptr %chunk, align 8, !dbg !1436
  store ptr %39, ptr %old, align 8, !dbg !1436
  %40 = load ptr, ptr %chunk, align 8, !dbg !1437
  %ptradd27 = getelementptr inbounds i8, ptr %40, i64 8, !dbg !1437
  %41 = load ptr, ptr %ptradd27, align 8, !dbg !1437
  store ptr %41, ptr %chunk, align 8, !dbg !1437
  %42 = load ptr, ptr %self, align 8, !dbg !1438
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator28, ptr align 8 %42, i32 16, i1 false)
  %43 = load ptr, ptr %old, align 8
  store ptr %43, ptr %ptr29, align 8
  %44 = load ptr, ptr %ptr29, align 8, !dbg !1439
  %i2nb30 = icmp eq ptr %44, null, !dbg !1439
  br i1 %i2nb30, label %if.then31, label %if.exit32, !dbg !1439

if.then31:                                        ; preds = %if.exit26
  br label %expr_block.exit47, !dbg !1442

if.exit32:                                        ; preds = %if.exit26
  %45 = load ptr, ptr %ptr29, align 8, !dbg !1443
  %neq33 = icmp ne ptr %45, null, !dbg !1444
  br i1 %neq33, label %assert_ok35, label %assert_fail34, !dbg !1444

assert_fail34:                                    ; preds = %if.exit32
  %46 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1444
  call void %46(ptr @.panic_msg.27, i64 75, ptr @.file.73, i64 16, ptr @.func.8, i64 4, i32 122) #6, !dbg !1444
  unreachable, !dbg !1444

assert_ok35:                                      ; preds = %if.exit32
  %ptradd36 = getelementptr inbounds i8, ptr %allocator28, i64 8, !dbg !1444
  %47 = load i64, ptr %ptradd36, align 8, !dbg !1444
  %48 = inttoptr i64 %47 to ptr, !dbg !1444
  %type39 = load ptr, ptr %.cachedtype38, align 8, !dbg !1405
  %49 = icmp eq ptr %48, %type39, !dbg !1405
  br i1 %49, label %cache_hit42, label %cache_miss40, !dbg !1405

cache_miss40:                                     ; preds = %assert_ok35
  %ptradd41 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !1405
  %50 = load ptr, ptr %ptradd41, align 8, !dbg !1405
  %51 = call ptr @.dyn_search(ptr %50, ptr @"$sel.release"), !dbg !1405
  store ptr %51, ptr %.inlinecache37, align 8, !dbg !1405
  store ptr %48, ptr %.cachedtype38, align 8, !dbg !1405
  br label %52, !dbg !1405

cache_hit42:                                      ; preds = %assert_ok35
  %cache_hit_fn43 = load ptr, ptr %.inlinecache37, align 8, !dbg !1405
  br label %52, !dbg !1405

52:                                               ; preds = %cache_hit42, %cache_miss40
  %fn_phi44 = phi ptr [ %cache_hit_fn43, %cache_hit42 ], [ %51, %cache_miss40 ], !dbg !1405
  %53 = icmp eq ptr %fn_phi44, null, !dbg !1405
  br i1 %53, label %missing_function45, label %match46, !dbg !1405

missing_function45:                               ; preds = %52
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1405
  call void %54(ptr @.panic_msg.28, i64 44, ptr @.file.73, i64 16, ptr @.func.8, i64 4, i32 122) #6, !dbg !1405
  unreachable, !dbg !1405

match46:                                          ; preds = %52
  %55 = load ptr, ptr %allocator28, align 8, !dbg !1405
  call void %fn_phi44(ptr %55, ptr %45, i8 zeroext 0), !dbg !1405
  br label %expr_block.exit47, !dbg !1405

expr_block.exit47:                                ; preds = %match46, %if.then31
  br label %loop.cond, !dbg !1405

loop.exit:                                        ; preds = %loop.cond
  %56 = load ptr, ptr %self, align 8, !dbg !1445
  %ptradd48 = getelementptr inbounds i8, ptr %56, i64 40, !dbg !1445
  store ptr null, ptr %ptradd48, align 8, !dbg !1446
  %57 = load ptr, ptr %self, align 8, !dbg !1447
  %ptradd49 = getelementptr inbounds i8, ptr %57, i64 32, !dbg !1447
  store i64 0, ptr %ptradd49, align 8, !dbg !1448
  ret void, !dbg !1448

panic:                                            ; preds = %entry
  %58 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1407
  call void %58(ptr @.panic_msg, i64 62, ptr @.file.93, i64 21, ptr @.func.8, i64 4, i32 39) #6, !dbg !1407
  unreachable, !dbg !1407
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.OnStackAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !1449 {
entry:
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %aligned = alloca i8, align 1
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1452
  %3 = icmp eq ptr %0, null, !dbg !1452
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1452
  br i1 %4, label %panic, label %checkok, !dbg !1452

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1453, !DIExpression(), !1454)
  store ptr %1, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !1455, !DIExpression(), !1456)
  store i8 %2, ptr %aligned, align 1
    #dbg_declare(ptr %aligned, !1457, !DIExpression(), !1458)
  %5 = load ptr, ptr %old_pointer, align 8, !dbg !1459
  %neq = icmp ne ptr %5, null, !dbg !1459
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1459

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1459
  call void %6(ptr @.panic_msg.100, i64 40, ptr @.file.93, i64 21, ptr @.func.24, i64 7, i32 67) #6, !dbg !1459
  unreachable, !dbg !1459

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !1461
  %8 = load ptr, ptr %old_pointer, align 8, !dbg !1461
  %9 = call i8 @std.core.mem.allocator.allocation_in_stack_mem(ptr %7, ptr %8), !dbg !1462
  %10 = trunc i8 %9 to i1, !dbg !1462
  br i1 %10, label %if.then, label %if.exit, !dbg !1462

if.then:                                          ; preds = %assert_ok
  ret void, !dbg !1463

if.exit:                                          ; preds = %assert_ok
  %11 = load ptr, ptr %self, align 8, !dbg !1464
  %12 = load ptr, ptr %old_pointer, align 8, !dbg !1464
  call void @std.core.mem.allocator.on_stack_allocator_remove_chunk(ptr %11, ptr %12), !dbg !1465
  %13 = load ptr, ptr %self, align 8, !dbg !1466
  %14 = load ptr, ptr %old_pointer, align 8, !dbg !1467
  %15 = load i8, ptr %aligned, align 1, !dbg !1468
  %16 = trunc i8 %15 to i1, !dbg !1468
  %neq1 = icmp ne ptr %14, null, !dbg !1466
  br i1 %neq1, label %assert_ok3, label %assert_fail2, !dbg !1466

assert_fail2:                                     ; preds = %if.exit
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1466
  call void %17(ptr @.panic_msg.27, i64 75, ptr @.file.93, i64 21, ptr @.func.24, i64 7, i32 73) #6, !dbg !1466
  unreachable, !dbg !1466

assert_ok3:                                       ; preds = %if.exit
  %ptradd = getelementptr inbounds i8, ptr %13, i64 8, !dbg !1466
  %18 = load i64, ptr %ptradd, align 8, !dbg !1466
  %19 = inttoptr i64 %18 to ptr, !dbg !1466
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1452
  %20 = icmp eq ptr %19, %type, !dbg !1452
  br i1 %20, label %cache_hit, label %cache_miss, !dbg !1452

cache_miss:                                       ; preds = %assert_ok3
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !1452
  %21 = load ptr, ptr %ptradd4, align 8, !dbg !1452
  %22 = call ptr @.dyn_search(ptr %21, ptr @"$sel.release"), !dbg !1452
  store ptr %22, ptr %.inlinecache, align 8, !dbg !1452
  store ptr %19, ptr %.cachedtype, align 8, !dbg !1452
  br label %23, !dbg !1452

cache_hit:                                        ; preds = %assert_ok3
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1452
  br label %23, !dbg !1452

23:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %22, %cache_miss ], !dbg !1452
  %24 = icmp eq ptr %fn_phi, null, !dbg !1452
  br i1 %24, label %missing_function, label %match, !dbg !1452

missing_function:                                 ; preds = %23
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1452
  call void %25(ptr @.panic_msg.28, i64 44, ptr @.file.93, i64 21, ptr @.func.24, i64 7, i32 73) #6, !dbg !1452
  unreachable, !dbg !1452

match:                                            ; preds = %23
  %26 = load ptr, ptr %13, align 8, !dbg !1452
  %27 = zext i1 %16 to i8, !dbg !1452
  call void %fn_phi(ptr %26, ptr %14, i8 zeroext %27), !dbg !1452
  ret void, !dbg !1452

panic:                                            ; preds = %entry
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1454
  call void %28(ptr @.panic_msg, i64 62, ptr @.file.93, i64 21, ptr @.func.24, i64 7, i32 69) #6, !dbg !1454
  unreachable, !dbg !1454
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.OnStackAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !1469 {
entry:
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %chunk = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %header = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %mem = alloca ptr, align 8
  %error_var22 = alloca i64, align 8
  %retparam29 = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr58 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1472
  %5 = icmp eq ptr %1, null, !dbg !1472
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1472
  br i1 %6, label %panic, label %checkok, !dbg !1472

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1473, !DIExpression(), !1474)
  store ptr %2, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !1475, !DIExpression(), !1476)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !1477, !DIExpression(), !1478)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1479, !DIExpression(), !1480)
  %7 = load i64, ptr %size, align 8, !dbg !1481
  %lt = icmp ult i64 0, %7, !dbg !1481
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1481

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1481
  call void %8(ptr @.panic_msg.101, i64 29, ptr @.file.93, i64 21, ptr @.func.20, i64 6, i32 111) #6, !dbg !1481
  unreachable, !dbg !1481

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %old_pointer, align 8, !dbg !1483
  %neq = icmp ne ptr %9, null, !dbg !1483
  br i1 %neq, label %assert_ok2, label %assert_fail1, !dbg !1483

assert_fail1:                                     ; preds = %assert_ok
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1483
  call void %10(ptr @.panic_msg.100, i64 40, ptr @.file.93, i64 21, ptr @.func.20, i64 6, i32 112) #6, !dbg !1483
  unreachable, !dbg !1483

assert_ok2:                                       ; preds = %assert_ok
  %11 = load i64, ptr %alignment, align 8, !dbg !1484
  %le = icmp ule i64 %11, 268435456, !dbg !1484
  br i1 %le, label %assert_ok4, label %assert_fail3, !dbg !1484

assert_fail3:                                     ; preds = %assert_ok2
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1484
  call void %12(ptr @.panic_msg.17, i64 80, ptr @.file.93, i64 21, ptr @.func.20, i64 6, i32 113) #6, !dbg !1484
  unreachable, !dbg !1484

assert_ok4:                                       ; preds = %assert_ok2
  %13 = load ptr, ptr %self, align 8, !dbg !1485
  %14 = load ptr, ptr %old_pointer, align 8, !dbg !1485
  %15 = call i8 @std.core.mem.allocator.allocation_in_stack_mem(ptr %13, ptr %14), !dbg !1486
  %16 = trunc i8 %15 to i1, !dbg !1486
  %not = xor i1 %16, true, !dbg !1486
  br i1 %not, label %if.then, label %if.exit, !dbg !1486

if.then:                                          ; preds = %assert_ok4
    #dbg_declare(ptr %chunk, !1487, !DIExpression(), !1489)
  %17 = load ptr, ptr %self, align 8, !dbg !1490
  %18 = load ptr, ptr %old_pointer, align 8, !dbg !1490
  %19 = call ptr @std.core.mem.allocator.on_stack_allocator_find_chunk(ptr %17, ptr %18), !dbg !1491
  store ptr %19, ptr %chunk, align 8, !dbg !1491
  %20 = load ptr, ptr %chunk, align 8, !dbg !1492
  %i2b = icmp ne ptr %20, null, !dbg !1492
  br i1 %i2b, label %assert_ok6, label %assert_fail5, !dbg !1492

assert_fail5:                                     ; preds = %if.then
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1492
  call void %21(ptr @.panic_msg.102, i64 55, ptr @.file.93, i64 21, ptr @.func.20, i64 6, i32 120) #6, !dbg !1492
  unreachable, !dbg !1492

assert_ok6:                                       ; preds = %if.then
  %22 = load ptr, ptr %chunk, align 8, !dbg !1493
  %ptradd = getelementptr inbounds i8, ptr %22, i64 16, !dbg !1493
  %23 = load ptr, ptr %self, align 8, !dbg !1494
  %24 = load ptr, ptr %old_pointer, align 8, !dbg !1495
  %25 = load i64, ptr %size, align 8, !dbg !1496
  %26 = load i64, ptr %alignment, align 8, !dbg !1497
  %i2nb = icmp eq i64 %26, 0, !dbg !1498
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !1498

or.rhs:                                           ; preds = %assert_ok6
  store i64 %26, ptr %x, align 8
  %27 = load i64, ptr %x, align 8, !dbg !1499
  %neq7 = icmp ne i64 0, %27, !dbg !1499
  br i1 %neq7, label %and.rhs, label %and.phi, !dbg !1499

and.rhs:                                          ; preds = %or.rhs
  %28 = load i64, ptr %x, align 8, !dbg !1502
  %29 = load i64, ptr %x, align 8, !dbg !1503
  %sub = sub i64 %29, 1, !dbg !1503
  %and = and i64 %28, %sub, !dbg !1502
  %eq = icmp eq i64 %and, 0, !dbg !1502
  br label %and.phi, !dbg !1502

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !1502
  br label %or.phi, !dbg !1502

or.phi:                                           ; preds = %and.phi, %assert_ok6
  %val8 = phi i1 [ true, %assert_ok6 ], [ %val, %and.phi ], !dbg !1502
  br i1 %val8, label %assert_ok10, label %assert_fail9, !dbg !1502

assert_fail9:                                     ; preds = %or.phi
  %30 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1494
  call void %30(ptr @.panic_msg.16, i64 65, ptr @.file.93, i64 21, ptr @.func.20, i64 6, i32 121) #6, !dbg !1494
  unreachable, !dbg !1494

assert_ok10:                                      ; preds = %or.phi
  %le11 = icmp ule i64 %26, 268435456, !dbg !1494
  br i1 %le11, label %assert_ok13, label %assert_fail12, !dbg !1494

assert_fail12:                                    ; preds = %assert_ok10
  %31 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1494
  call void %31(ptr @.panic_msg.17, i64 80, ptr @.file.93, i64 21, ptr @.func.20, i64 6, i32 121) #6, !dbg !1494
  unreachable, !dbg !1494

assert_ok13:                                      ; preds = %assert_ok10
  %neq14 = icmp ne ptr %24, null, !dbg !1494
  br i1 %neq14, label %assert_ok16, label %assert_fail15, !dbg !1494

assert_fail15:                                    ; preds = %assert_ok13
  %32 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1494
  call void %32(ptr @.panic_msg.21, i64 32, ptr @.file.93, i64 21, ptr @.func.20, i64 6, i32 121) #6, !dbg !1494
  unreachable, !dbg !1494

assert_ok16:                                      ; preds = %assert_ok13
  %lt17 = icmp ult i64 0, %25, !dbg !1494
  br i1 %lt17, label %assert_ok19, label %assert_fail18, !dbg !1494

assert_fail18:                                    ; preds = %assert_ok16
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1494
  call void %33(ptr @.panic_msg.22, i64 33, ptr @.file.93, i64 21, ptr @.func.20, i64 6, i32 121) #6, !dbg !1494
  unreachable, !dbg !1494

assert_ok19:                                      ; preds = %assert_ok16
  %ptradd20 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !1494
  %34 = load i64, ptr %ptradd20, align 8, !dbg !1494
  %35 = inttoptr i64 %34 to ptr, !dbg !1494
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1472
  %36 = icmp eq ptr %35, %type, !dbg !1472
  br i1 %36, label %cache_hit, label %cache_miss, !dbg !1472

cache_miss:                                       ; preds = %assert_ok19
  %ptradd21 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !1472
  %37 = load ptr, ptr %ptradd21, align 8, !dbg !1472
  %38 = call ptr @.dyn_search(ptr %37, ptr @"$sel.resize"), !dbg !1472
  store ptr %38, ptr %.inlinecache, align 8, !dbg !1472
  store ptr %35, ptr %.cachedtype, align 8, !dbg !1472
  br label %39, !dbg !1472

cache_hit:                                        ; preds = %assert_ok19
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1472
  br label %39, !dbg !1472

39:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %38, %cache_miss ], !dbg !1472
  %40 = icmp eq ptr %fn_phi, null, !dbg !1472
  br i1 %40, label %missing_function, label %match, !dbg !1472

missing_function:                                 ; preds = %39
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1472
  call void %41(ptr @.panic_msg.23, i64 43, ptr @.file.93, i64 21, ptr @.func.20, i64 6, i32 121) #6, !dbg !1472
  unreachable, !dbg !1472

match:                                            ; preds = %39
  %42 = load ptr, ptr %23, align 8
  %43 = call i64 %fn_phi(ptr %retparam, ptr %42, ptr %24, i64 %25, i64 %26), !dbg !1494
  %not_err = icmp eq i64 %43, 0, !dbg !1494
  %44 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1494
  br i1 %44, label %after_check, label %assign_optional, !dbg !1494

assign_optional:                                  ; preds = %match
  store i64 %43, ptr %error_var, align 8, !dbg !1494
  br label %guard_block, !dbg !1494

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1494

guard_block:                                      ; preds = %assign_optional
  %45 = load i64, ptr %error_var, align 8, !dbg !1494
  ret i64 %45, !dbg !1494

noerr_block:                                      ; preds = %after_check
  %46 = load ptr, ptr %retparam, align 8, !dbg !1494
  store ptr %46, ptr %ptradd, align 8, !dbg !1494
  store ptr %46, ptr %0, align 8, !dbg !1494
  ret i64 0, !dbg !1494

if.exit:                                          ; preds = %assert_ok4
    #dbg_declare(ptr %header, !1504, !DIExpression(), !1510)
  %47 = load ptr, ptr %old_pointer, align 8, !dbg !1511
  %ptradd_any = getelementptr i8, ptr %47, i64 -8, !dbg !1512
  store ptr %ptradd_any, ptr %header, align 8, !dbg !1512
    #dbg_declare(ptr %old_size, !1513, !DIExpression(), !1514)
  %48 = load ptr, ptr %header, align 8, !dbg !1515
  %49 = load i64, ptr %48, align 8, !dbg !1515
  store i64 %49, ptr %old_size, align 8, !dbg !1515
    #dbg_declare(ptr %mem, !1516, !DIExpression(), !1517)
  %50 = load ptr, ptr %self, align 8, !dbg !1518
  %51 = load i64, ptr %size, align 8, !dbg !1519
  %52 = load i64, ptr %alignment, align 8, !dbg !1520
  %le23 = icmp ule i64 %52, 268435456, !dbg !1518
  br i1 %le23, label %assert_ok25, label %assert_fail24, !dbg !1518

assert_fail24:                                    ; preds = %if.exit
  %53 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1518
  call void %53(ptr @.panic_msg.17, i64 80, ptr @.file.93, i64 21, ptr @.func.20, i64 6, i32 126) #6, !dbg !1518
  unreachable, !dbg !1518

assert_ok25:                                      ; preds = %if.exit
  %lt26 = icmp ult i64 0, %51, !dbg !1518
  br i1 %lt26, label %assert_ok28, label %assert_fail27, !dbg !1518

assert_fail27:                                    ; preds = %assert_ok25
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1518
  call void %54(ptr @.panic_msg.101, i64 29, ptr @.file.93, i64 21, ptr @.func.20, i64 6, i32 126) #6, !dbg !1518
  unreachable, !dbg !1518

assert_ok28:                                      ; preds = %assert_ok25
  %55 = call i64 @std.core.mem.allocator.OnStackAllocator.acquire(ptr %retparam29, ptr %50, i64 %51, i32 0, i64 %52), !dbg !1518
  %not_err30 = icmp eq i64 %55, 0, !dbg !1518
  %56 = call i1 @llvm.expect.i1(i1 %not_err30, i1 true), !dbg !1518
  br i1 %56, label %after_check32, label %assign_optional31, !dbg !1518

assign_optional31:                                ; preds = %assert_ok28
  store i64 %55, ptr %error_var22, align 8, !dbg !1518
  br label %guard_block33, !dbg !1518

after_check32:                                    ; preds = %assert_ok28
  br label %noerr_block34, !dbg !1518

guard_block33:                                    ; preds = %assign_optional31
  %57 = load i64, ptr %error_var22, align 8, !dbg !1518
  ret i64 %57, !dbg !1518

noerr_block34:                                    ; preds = %after_check32
  %58 = load ptr, ptr %retparam29, align 8, !dbg !1518
  store ptr %58, ptr %mem, align 8, !dbg !1518
  %59 = load ptr, ptr %mem, align 8
  store ptr %59, ptr %dst, align 8
  %60 = load ptr, ptr %old_pointer, align 8
  store ptr %60, ptr %src, align 8
  %61 = load i64, ptr %old_size, align 8
  store i64 %61, ptr %len, align 8
  %62 = load ptr, ptr %dst, align 8, !dbg !1521
  %neq35 = icmp ne ptr %62, null, !dbg !1521
  br i1 %neq35, label %assert_ok37, label %assert_fail36, !dbg !1521

assert_fail36:                                    ; preds = %noerr_block34
  %63 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1521
  call void %63(ptr @.panic_msg.75, i64 37, ptr @.file.71, i64 6, ptr @.func.20, i64 6, i32 329) #6, !dbg !1521
  unreachable, !dbg !1521

assert_ok37:                                      ; preds = %noerr_block34
  %64 = load ptr, ptr %src, align 8, !dbg !1525
  %neq38 = icmp ne ptr %64, null, !dbg !1525
  br i1 %neq38, label %or.phi41, label %or.rhs39, !dbg !1525

or.rhs39:                                         ; preds = %assert_ok37
  %65 = load i64, ptr %len, align 8, !dbg !1526
  %eq40 = icmp eq i64 0, %65, !dbg !1526
  br label %or.phi41, !dbg !1526

or.phi41:                                         ; preds = %or.rhs39, %assert_ok37
  %val42 = phi i1 [ true, %assert_ok37 ], [ %eq40, %or.rhs39 ], !dbg !1526
  br i1 %val42, label %assert_ok44, label %assert_fail43, !dbg !1526

assert_fail43:                                    ; preds = %or.phi41
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1527
  call void %66(ptr @.panic_msg.76, i64 94, ptr @.file.93, i64 21, ptr @.func.20, i64 6, i32 127) #6, !dbg !1527
  unreachable, !dbg !1527

assert_ok44:                                      ; preds = %or.phi41
  %67 = load i64, ptr %len, align 8, !dbg !1528
  %eq45 = icmp eq i64 0, %67, !dbg !1528
  br i1 %eq45, label %or.phi49, label %or.rhs46, !dbg !1528

or.rhs46:                                         ; preds = %assert_ok44
  %68 = load ptr, ptr %dst, align 8, !dbg !1529
  %69 = load i64, ptr %len, align 8, !dbg !1530
  %ptradd_any47 = getelementptr i8, ptr %68, i64 %69, !dbg !1530
  %70 = load ptr, ptr %src, align 8, !dbg !1531
  %le48 = icmp ule ptr %ptradd_any47, %70, !dbg !1529
  br label %or.phi49, !dbg !1529

or.phi49:                                         ; preds = %or.rhs46, %assert_ok44
  %val50 = phi i1 [ true, %assert_ok44 ], [ %le48, %or.rhs46 ], !dbg !1529
  br i1 %val50, label %or.phi54, label %or.rhs51, !dbg !1529

or.rhs51:                                         ; preds = %or.phi49
  %71 = load ptr, ptr %src, align 8, !dbg !1532
  %72 = load i64, ptr %len, align 8, !dbg !1533
  %ptradd_any52 = getelementptr i8, ptr %71, i64 %72, !dbg !1533
  %73 = load ptr, ptr %dst, align 8, !dbg !1534
  %le53 = icmp ule ptr %ptradd_any52, %73, !dbg !1532
  br label %or.phi54, !dbg !1532

or.phi54:                                         ; preds = %or.rhs51, %or.phi49
  %val55 = phi i1 [ true, %or.phi49 ], [ %le53, %or.rhs51 ], !dbg !1532
  br i1 %val55, label %assert_ok57, label %assert_fail56, !dbg !1532

assert_fail56:                                    ; preds = %or.phi54
  %74 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1527
  call void %74(ptr @.panic_msg.77, i64 95, ptr @.file.93, i64 21, ptr @.func.20, i64 6, i32 127) #6, !dbg !1527
  unreachable, !dbg !1527

assert_ok57:                                      ; preds = %or.phi54
  %75 = load ptr, ptr %dst, align 8, !dbg !1535
  %76 = load ptr, ptr %src, align 8, !dbg !1536
  %77 = load i64, ptr %len, align 8, !dbg !1537
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %75, ptr align 16 %76, i64 %77, i1 false), !dbg !1538
  %78 = load ptr, ptr %mem, align 8, !dbg !1539
  store ptr %78, ptr %0, align 8, !dbg !1539
  ret i64 0, !dbg !1539

panic:                                            ; preds = %entry
  %79 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1474
  call void %79(ptr @.panic_msg, i64 62, ptr @.file.93, i64 21, ptr @.func.20, i64 6, i32 115) #6, !dbg !1474
  unreachable, !dbg !1474
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.OnStackAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !1540 {
entry:
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %aligned = alloca i8, align 1
  %total_len = alloca i64, align 8
  %start_mem = alloca ptr, align 8
  %unaligned_pointer_to_offset = alloca ptr, align 8
  %mem = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %alignment7 = alloca i64, align 8
  %x = alloca i64, align 8
  %end = alloca i64, align 8
  %backing_allocator = alloca %any, align 8
  %chunk = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %allocator12 = alloca %any, align 8
  %size13 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x15 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.assign_list = alloca %OnStackAllocatorExtraChunk, align 8
  %reterr = alloca i64, align 8
  %error_var42 = alloca i64, align 8
  %x46 = alloca i64, align 8
  %.inlinecache65 = alloca ptr, align 8
  %.cachedtype66 = alloca ptr, align 8
  %retparam75 = alloca ptr, align 8
  %allocator80 = alloca %any, align 8
  %ptr81 = alloca ptr, align 8
  %.inlinecache89 = alloca ptr, align 8
  %.cachedtype90 = alloca ptr, align 8
  %header = alloca ptr, align 8
  %reterr105 = alloca i64, align 8
  store ptr null, ptr %.cachedtype90, align 8, !dbg !1543
  store ptr null, ptr %.cachedtype66, align 8, !dbg !1543
  store ptr null, ptr %.cachedtype, align 8, !dbg !1543
  %5 = icmp eq ptr %1, null, !dbg !1543
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1543
  br i1 %6, label %panic, label %checkok, !dbg !1543

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1544, !DIExpression(), !1545)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !1546, !DIExpression(), !1547)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !1548, !DIExpression(), !1549)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1550, !DIExpression(), !1551)
  %7 = load i64, ptr %alignment, align 8, !dbg !1552
  %le = icmp ule i64 %7, 268435456, !dbg !1552
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !1552

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1552
  call void %8(ptr @.panic_msg.17, i64 80, ptr @.file.93, i64 21, ptr @.func.15, i64 7, i32 132) #6, !dbg !1552
  unreachable, !dbg !1552

assert_ok:                                        ; preds = %checkok
  %9 = load i64, ptr %size, align 8, !dbg !1554
  %lt = icmp ult i64 0, %9, !dbg !1554
  br i1 %lt, label %assert_ok2, label %assert_fail1, !dbg !1554

assert_fail1:                                     ; preds = %assert_ok
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1554
  call void %10(ptr @.panic_msg.101, i64 29, ptr @.file.93, i64 21, ptr @.func.15, i64 7, i32 133) #6, !dbg !1554
  unreachable, !dbg !1554

assert_ok2:                                       ; preds = %assert_ok
    #dbg_declare(ptr %aligned, !1555, !DIExpression(), !1556)
  %11 = load i64, ptr %alignment, align 8, !dbg !1557
  %lt3 = icmp ult i64 0, %11, !dbg !1557
  %12 = zext i1 %lt3 to i8, !dbg !1557
  store i8 %12, ptr %aligned, align 1, !dbg !1557
  %13 = load i64, ptr %alignment, align 8, !dbg !1558
  %14 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %13) #7, !dbg !1559
  store i64 %14, ptr %alignment, align 8, !dbg !1559
    #dbg_declare(ptr %total_len, !1560, !DIExpression(), !1561)
  %15 = load ptr, ptr %self, align 8, !dbg !1562
  %ptradd = getelementptr inbounds i8, ptr %15, i64 16, !dbg !1562
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !1562
  %16 = load i64, ptr %ptradd4, align 8, !dbg !1562
  store i64 %16, ptr %total_len, align 8, !dbg !1562
    #dbg_declare(ptr %start_mem, !1563, !DIExpression(), !1564)
  %17 = load ptr, ptr %self, align 8, !dbg !1565
  %ptradd5 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !1565
  %18 = load ptr, ptr %ptradd5, align 8, !dbg !1565
  store ptr %18, ptr %start_mem, align 8, !dbg !1565
    #dbg_declare(ptr %unaligned_pointer_to_offset, !1566, !DIExpression(), !1567)
  %19 = load ptr, ptr %start_mem, align 8, !dbg !1568
  %20 = load ptr, ptr %self, align 8, !dbg !1569
  %ptradd6 = getelementptr inbounds i8, ptr %20, i64 32, !dbg !1569
  %21 = load i64, ptr %ptradd6, align 8, !dbg !1569
  %add = add i64 %21, 8, !dbg !1568
  %ptradd_any = getelementptr i8, ptr %19, i64 %add, !dbg !1568
  store ptr %ptradd_any, ptr %unaligned_pointer_to_offset, align 8, !dbg !1568
    #dbg_declare(ptr %mem, !1570, !DIExpression(), !1571)
  %22 = load ptr, ptr %unaligned_pointer_to_offset, align 8
  store ptr %22, ptr %ptr, align 8
  %23 = load i64, ptr %alignment, align 8
  store i64 %23, ptr %alignment7, align 8
  %24 = load ptr, ptr %ptr, align 8, !dbg !1572
  %ptrxi = ptrtoint ptr %24 to i64, !dbg !1572
  %25 = load i64, ptr %alignment7, align 8, !dbg !1575
  store i64 %25, ptr %x, align 8
  %26 = load i64, ptr %x, align 8, !dbg !1576
  %neq = icmp ne i64 0, %26, !dbg !1576
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1576

and.rhs:                                          ; preds = %assert_ok2
  %27 = load i64, ptr %x, align 8, !dbg !1579
  %28 = load i64, ptr %x, align 8, !dbg !1580
  %sub = sub i64 %28, 1, !dbg !1580
  %and = and i64 %27, %sub, !dbg !1579
  %eq = icmp eq i64 %and, 0, !dbg !1579
  br label %and.phi, !dbg !1579

and.phi:                                          ; preds = %and.rhs, %assert_ok2
  %val = phi i1 [ false, %assert_ok2 ], [ %eq, %and.rhs ], !dbg !1579
  br i1 %val, label %assert_ok9, label %assert_fail8, !dbg !1579

assert_fail8:                                     ; preds = %and.phi
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1578
  call void %29(ptr @.panic_msg.70, i64 51, ptr @.file.71, i64 6, ptr @.func.15, i64 7, i32 290) #6, !dbg !1578
  unreachable, !dbg !1578

assert_ok9:                                       ; preds = %and.phi
  %30 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %25), !dbg !1581
  %intptr = inttoptr i64 %30 to ptr, !dbg !1581
  store ptr %intptr, ptr %mem, align 8, !dbg !1581
    #dbg_declare(ptr %end, !1582, !DIExpression(), !1583)
  %31 = load ptr, ptr %mem, align 8, !dbg !1584
  %32 = load ptr, ptr %self, align 8, !dbg !1585
  %ptradd10 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !1585
  %33 = load ptr, ptr %ptradd10, align 8, !dbg !1585
  %34 = ptrtoint ptr %33 to i64, !dbg !1586
  %35 = ptrtoint ptr %31 to i64, !dbg !1586
  %36 = sub i64 %35, %34, !dbg !1586
  %37 = sdiv exact i64 %36, 1, !dbg !1586
  %38 = load i64, ptr %size, align 8, !dbg !1587
  %add11 = add i64 %37, %38, !dbg !1586
  store i64 %add11, ptr %end, align 8, !dbg !1586
    #dbg_declare(ptr %backing_allocator, !1588, !DIExpression(), !1589)
  %39 = load ptr, ptr %self, align 8, !dbg !1590
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %backing_allocator, ptr align 8 %39, i32 16, i1 false), !dbg !1590
  %40 = load i64, ptr %end, align 8, !dbg !1591
  %41 = load i64, ptr %total_len, align 8, !dbg !1592
  %gt = icmp ugt i64 %40, %41, !dbg !1591
  br i1 %gt, label %if.then, label %if.exit102, !dbg !1591

if.then:                                          ; preds = %assert_ok9
    #dbg_declare(ptr %chunk, !1593, !DIExpression(), !1595)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %backing_allocator, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator12, ptr align 8 %allocator, i32 16, i1 false)
  store i64 24, ptr %size13, align 8
  %42 = load i64, ptr %size13, align 8, !dbg !1596
  %i2nb = icmp eq i64 %42, 0, !dbg !1596
  br i1 %i2nb, label %if.then14, label %if.exit, !dbg !1596

if.then14:                                        ; preds = %if.then
  store ptr null, ptr %blockret, align 8, !dbg !1601
  br label %expr_block.exit, !dbg !1601

if.exit:                                          ; preds = %if.then
  %43 = load i64, ptr %size13, align 8, !dbg !1602
  br i1 true, label %or.phi, label %or.rhs, !dbg !1603

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x15, align 8
  %44 = load i64, ptr %x15, align 8, !dbg !1604
  %neq16 = icmp ne i64 0, %44, !dbg !1604
  br i1 %neq16, label %and.rhs17, label %and.phi21, !dbg !1604

and.rhs17:                                        ; preds = %or.rhs
  %45 = load i64, ptr %x15, align 8, !dbg !1607
  %46 = load i64, ptr %x15, align 8, !dbg !1608
  %sub18 = sub i64 %46, 1, !dbg !1608
  %and19 = and i64 %45, %sub18, !dbg !1607
  %eq20 = icmp eq i64 %and19, 0, !dbg !1607
  br label %and.phi21, !dbg !1607

and.phi21:                                        ; preds = %and.rhs17, %or.rhs
  %val22 = phi i1 [ false, %or.rhs ], [ %eq20, %and.rhs17 ], !dbg !1607
  br label %or.phi, !dbg !1607

or.phi:                                           ; preds = %and.phi21, %if.exit
  %val23 = phi i1 [ true, %if.exit ], [ %val22, %and.phi21 ], !dbg !1607
  br i1 %val23, label %assert_ok25, label %assert_fail24, !dbg !1607

assert_fail24:                                    ; preds = %or.phi
  %47 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1609
  call void %47(ptr @.panic_msg.16, i64 65, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 85) #6, !dbg !1609
  unreachable, !dbg !1609

assert_ok25:                                      ; preds = %or.phi
  br i1 true, label %assert_ok27, label %assert_fail26, !dbg !1609

assert_fail26:                                    ; preds = %assert_ok25
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1609
  call void %48(ptr @.panic_msg.17, i64 80, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 85) #6, !dbg !1609
  unreachable, !dbg !1609

assert_ok27:                                      ; preds = %assert_ok25
  %lt28 = icmp ult i64 0, %43, !dbg !1609
  br i1 %lt28, label %assert_ok30, label %assert_fail29, !dbg !1609

assert_fail29:                                    ; preds = %assert_ok27
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1609
  call void %49(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 85) #6, !dbg !1609
  unreachable, !dbg !1609

assert_ok30:                                      ; preds = %assert_ok27
  %ptradd31 = getelementptr inbounds i8, ptr %allocator12, i64 8, !dbg !1609
  %50 = load i64, ptr %ptradd31, align 8, !dbg !1609
  %51 = inttoptr i64 %50 to ptr, !dbg !1609
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1543
  %52 = icmp eq ptr %51, %type, !dbg !1543
  br i1 %52, label %cache_hit, label %cache_miss, !dbg !1543

cache_miss:                                       ; preds = %assert_ok30
  %ptradd32 = getelementptr inbounds i8, ptr %51, i64 16, !dbg !1543
  %53 = load ptr, ptr %ptradd32, align 8, !dbg !1543
  %54 = call ptr @.dyn_search(ptr %53, ptr @"$sel.acquire"), !dbg !1543
  store ptr %54, ptr %.inlinecache, align 8, !dbg !1543
  store ptr %51, ptr %.cachedtype, align 8, !dbg !1543
  br label %55, !dbg !1543

cache_hit:                                        ; preds = %assert_ok30
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1543
  br label %55, !dbg !1543

55:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %54, %cache_miss ], !dbg !1543
  %56 = icmp eq ptr %fn_phi, null, !dbg !1543
  br i1 %56, label %missing_function, label %match, !dbg !1543

missing_function:                                 ; preds = %55
  %57 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1543
  call void %57(ptr @.panic_msg.19, i64 44, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 85) #6, !dbg !1543
  unreachable, !dbg !1543

match:                                            ; preds = %55
  %58 = load ptr, ptr %allocator12, align 8
  %59 = call i64 %fn_phi(ptr %retparam, ptr %58, i64 %43, i32 0, i64 0), !dbg !1609
  %not_err = icmp eq i64 %59, 0, !dbg !1609
  %60 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1609
  br i1 %60, label %after_check, label %assign_optional, !dbg !1609

assign_optional:                                  ; preds = %match
  store i64 %59, ptr %error_var, align 8, !dbg !1609
  br label %guard_block, !dbg !1609

after_check:                                      ; preds = %match
  %61 = load ptr, ptr %retparam, align 8, !dbg !1609
  store ptr %61, ptr %blockret, align 8, !dbg !1609
  br label %expr_block.exit, !dbg !1609

expr_block.exit:                                  ; preds = %after_check, %if.then14
  %62 = load ptr, ptr %blockret, align 8, !dbg !1609
  br label %noerr_block, !dbg !1609

guard_block:                                      ; preds = %assign_optional
  %63 = load i64, ptr %error_var, align 8, !dbg !1609
  ret i64 %63, !dbg !1609

noerr_block:                                      ; preds = %expr_block.exit
  store ptr %62, ptr %chunk, align 8, !dbg !1609
  %64 = load ptr, ptr %chunk, align 8, !dbg !1610
  %checknull = icmp eq ptr %64, null, !dbg !1610
  %65 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1610
  br i1 %65, label %panic33, label %checkok34, !dbg !1610

checkok34:                                        ; preds = %noerr_block
  %66 = ptrtoint ptr %64 to i64, !dbg !1610
  %67 = urem i64 %66, 8, !dbg !1610
  %68 = icmp ne i64 %67, 0, !dbg !1610
  %69 = call i1 @llvm.expect.i1(i1 %68, i1 false), !dbg !1610
  br i1 %69, label %panic35, label %checkok38, !dbg !1610

checkok38:                                        ; preds = %checkok34
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  %ptradd39 = getelementptr inbounds i8, ptr %.assign_list, i64 8
  %70 = load ptr, ptr %self, align 8, !dbg !1611
  %ptradd40 = getelementptr inbounds i8, ptr %70, i64 40, !dbg !1611
  %71 = load ptr, ptr %ptradd40, align 8, !dbg !1611
  store ptr %71, ptr %ptradd39, align 8, !dbg !1611
  %72 = load i8, ptr %aligned, align 1, !dbg !1612
  store i8 %72, ptr %.assign_list, align 8, !dbg !1612
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %64, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !1612
  %73 = load ptr, ptr %chunk, align 8, !dbg !1613
  %ptradd41 = getelementptr inbounds i8, ptr %73, i64 16, !dbg !1613
  %74 = load i64, ptr %size, align 8, !dbg !1614
  %75 = load i32, ptr %init_type, align 4, !dbg !1615
  %76 = load i8, ptr %aligned, align 1, !dbg !1616
  %77 = trunc i8 %76 to i1, !dbg !1616
  br i1 %77, label %cond.lhs, label %cond.rhs, !dbg !1616

cond.lhs:                                         ; preds = %checkok38
  %78 = load i64, ptr %alignment, align 8, !dbg !1617
  br label %cond.phi, !dbg !1617

cond.rhs:                                         ; preds = %checkok38
  br label %cond.phi, !dbg !1618

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val43 = phi i64 [ %78, %cond.lhs ], [ 0, %cond.rhs ], !dbg !1618
  %i2nb44 = icmp eq i64 %val43, 0, !dbg !1619
  br i1 %i2nb44, label %or.phi54, label %or.rhs45, !dbg !1619

or.rhs45:                                         ; preds = %cond.phi
  store i64 %val43, ptr %x46, align 8
  %79 = load i64, ptr %x46, align 8, !dbg !1620
  %neq47 = icmp ne i64 0, %79, !dbg !1620
  br i1 %neq47, label %and.rhs48, label %and.phi52, !dbg !1620

and.rhs48:                                        ; preds = %or.rhs45
  %80 = load i64, ptr %x46, align 8, !dbg !1623
  %81 = load i64, ptr %x46, align 8, !dbg !1624
  %sub49 = sub i64 %81, 1, !dbg !1624
  %and50 = and i64 %80, %sub49, !dbg !1623
  %eq51 = icmp eq i64 %and50, 0, !dbg !1623
  br label %and.phi52, !dbg !1623

and.phi52:                                        ; preds = %and.rhs48, %or.rhs45
  %val53 = phi i1 [ false, %or.rhs45 ], [ %eq51, %and.rhs48 ], !dbg !1623
  br label %or.phi54, !dbg !1623

or.phi54:                                         ; preds = %and.phi52, %cond.phi
  %val55 = phi i1 [ true, %cond.phi ], [ %val53, %and.phi52 ], !dbg !1623
  br i1 %val55, label %assert_ok57, label %assert_fail56, !dbg !1623

assert_fail56:                                    ; preds = %or.phi54
  %82 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1625
  call void %82(ptr @.panic_msg.16, i64 65, ptr @.file.93, i64 21, ptr @.func.15, i64 7, i32 152) #6, !dbg !1625
  unreachable, !dbg !1625

assert_ok57:                                      ; preds = %or.phi54
  %le58 = icmp ule i64 %val43, 268435456, !dbg !1625
  br i1 %le58, label %assert_ok60, label %assert_fail59, !dbg !1625

assert_fail59:                                    ; preds = %assert_ok57
  %83 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1625
  call void %83(ptr @.panic_msg.17, i64 80, ptr @.file.93, i64 21, ptr @.func.15, i64 7, i32 152) #6, !dbg !1625
  unreachable, !dbg !1625

assert_ok60:                                      ; preds = %assert_ok57
  %lt61 = icmp ult i64 0, %74, !dbg !1625
  br i1 %lt61, label %assert_ok63, label %assert_fail62, !dbg !1625

assert_fail62:                                    ; preds = %assert_ok60
  %84 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1625
  call void %84(ptr @.panic_msg.18, i64 59, ptr @.file.93, i64 21, ptr @.func.15, i64 7, i32 152) #6, !dbg !1625
  unreachable, !dbg !1625

assert_ok63:                                      ; preds = %assert_ok60
  %ptradd64 = getelementptr inbounds i8, ptr %backing_allocator, i64 8, !dbg !1625
  %85 = load i64, ptr %ptradd64, align 8, !dbg !1625
  %86 = inttoptr i64 %85 to ptr, !dbg !1625
  %type67 = load ptr, ptr %.cachedtype66, align 8, !dbg !1543
  %87 = icmp eq ptr %86, %type67, !dbg !1543
  br i1 %87, label %cache_hit70, label %cache_miss68, !dbg !1543

cache_miss68:                                     ; preds = %assert_ok63
  %ptradd69 = getelementptr inbounds i8, ptr %86, i64 16, !dbg !1543
  %88 = load ptr, ptr %ptradd69, align 8, !dbg !1543
  %89 = call ptr @.dyn_search(ptr %88, ptr @"$sel.acquire"), !dbg !1543
  store ptr %89, ptr %.inlinecache65, align 8, !dbg !1543
  store ptr %86, ptr %.cachedtype66, align 8, !dbg !1543
  br label %90, !dbg !1543

cache_hit70:                                      ; preds = %assert_ok63
  %cache_hit_fn71 = load ptr, ptr %.inlinecache65, align 8, !dbg !1543
  br label %90, !dbg !1543

90:                                               ; preds = %cache_hit70, %cache_miss68
  %fn_phi72 = phi ptr [ %cache_hit_fn71, %cache_hit70 ], [ %89, %cache_miss68 ], !dbg !1543
  %91 = icmp eq ptr %fn_phi72, null, !dbg !1543
  br i1 %91, label %missing_function73, label %match74, !dbg !1543

missing_function73:                               ; preds = %90
  %92 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1543
  call void %92(ptr @.panic_msg.19, i64 44, ptr @.file.93, i64 21, ptr @.func.15, i64 7, i32 152) #6, !dbg !1543
  unreachable, !dbg !1543

match74:                                          ; preds = %90
  %93 = load ptr, ptr %backing_allocator, align 8
  %94 = call i64 %fn_phi72(ptr %retparam75, ptr %93, i64 %74, i32 %75, i64 %val43), !dbg !1625
  %not_err76 = icmp eq i64 %94, 0, !dbg !1625
  %95 = call i1 @llvm.expect.i1(i1 %not_err76, i1 true), !dbg !1625
  br i1 %95, label %after_check78, label %assign_optional77, !dbg !1625

assign_optional77:                                ; preds = %match74
  store i64 %94, ptr %error_var42, align 8, !dbg !1625
  br label %guard_block79, !dbg !1625

after_check78:                                    ; preds = %match74
  br label %noerr_block100, !dbg !1625

guard_block79:                                    ; preds = %assign_optional77
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator80, ptr align 8 %backing_allocator, i32 16, i1 false)
  %96 = load ptr, ptr %chunk, align 8, !dbg !1626
  store ptr %96, ptr %ptr81, align 8
  %97 = load ptr, ptr %ptr81, align 8, !dbg !1628
  %i2nb82 = icmp eq ptr %97, null, !dbg !1628
  br i1 %i2nb82, label %if.then83, label %if.exit84, !dbg !1628

if.then83:                                        ; preds = %guard_block79
  br label %expr_block.exit99, !dbg !1631

if.exit84:                                        ; preds = %guard_block79
  %98 = load ptr, ptr %ptr81, align 8, !dbg !1632
  %neq85 = icmp ne ptr %98, null, !dbg !1633
  br i1 %neq85, label %assert_ok87, label %assert_fail86, !dbg !1633

assert_fail86:                                    ; preds = %if.exit84
  %99 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1633
  call void %99(ptr @.panic_msg.27, i64 75, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 122) #6, !dbg !1633
  unreachable, !dbg !1633

assert_ok87:                                      ; preds = %if.exit84
  %ptradd88 = getelementptr inbounds i8, ptr %allocator80, i64 8, !dbg !1633
  %100 = load i64, ptr %ptradd88, align 8, !dbg !1633
  %101 = inttoptr i64 %100 to ptr, !dbg !1633
  %type91 = load ptr, ptr %.cachedtype90, align 8, !dbg !1543
  %102 = icmp eq ptr %101, %type91, !dbg !1543
  br i1 %102, label %cache_hit94, label %cache_miss92, !dbg !1543

cache_miss92:                                     ; preds = %assert_ok87
  %ptradd93 = getelementptr inbounds i8, ptr %101, i64 16, !dbg !1543
  %103 = load ptr, ptr %ptradd93, align 8, !dbg !1543
  %104 = call ptr @.dyn_search(ptr %103, ptr @"$sel.release"), !dbg !1543
  store ptr %104, ptr %.inlinecache89, align 8, !dbg !1543
  store ptr %101, ptr %.cachedtype90, align 8, !dbg !1543
  br label %105, !dbg !1543

cache_hit94:                                      ; preds = %assert_ok87
  %cache_hit_fn95 = load ptr, ptr %.inlinecache89, align 8, !dbg !1543
  br label %105, !dbg !1543

105:                                              ; preds = %cache_hit94, %cache_miss92
  %fn_phi96 = phi ptr [ %cache_hit_fn95, %cache_hit94 ], [ %104, %cache_miss92 ], !dbg !1543
  %106 = icmp eq ptr %fn_phi96, null, !dbg !1543
  br i1 %106, label %missing_function97, label %match98, !dbg !1543

missing_function97:                               ; preds = %105
  %107 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1543
  call void %107(ptr @.panic_msg.28, i64 44, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 122) #6, !dbg !1543
  unreachable, !dbg !1543

match98:                                          ; preds = %105
  %108 = load ptr, ptr %allocator80, align 8, !dbg !1543
  call void %fn_phi96(ptr %108, ptr %98, i8 zeroext 0), !dbg !1543
  br label %expr_block.exit99, !dbg !1543

expr_block.exit99:                                ; preds = %match98, %if.then83
  %109 = load i64, ptr %error_var42, align 8, !dbg !1543
  ret i64 %109, !dbg !1543

noerr_block100:                                   ; preds = %after_check78
  %110 = load ptr, ptr %retparam75, align 8, !dbg !1543
  store ptr %110, ptr %ptradd41, align 8, !dbg !1543
  %111 = load ptr, ptr %self, align 8, !dbg !1634
  %ptradd101 = getelementptr inbounds i8, ptr %111, i64 40, !dbg !1634
  %112 = load ptr, ptr %chunk, align 8, !dbg !1636
  store ptr %112, ptr %ptradd101, align 8, !dbg !1636
  store ptr %110, ptr %0, align 8, !dbg !1636
  ret i64 0, !dbg !1636

if.exit102:                                       ; preds = %assert_ok9
  %113 = load ptr, ptr %self, align 8, !dbg !1637
  %ptradd103 = getelementptr inbounds i8, ptr %113, i64 32, !dbg !1637
  %114 = load i64, ptr %end, align 8, !dbg !1638
  store i64 %114, ptr %ptradd103, align 8, !dbg !1638
    #dbg_declare(ptr %header, !1639, !DIExpression(), !1640)
  %115 = load ptr, ptr %mem, align 8, !dbg !1641
  %ptradd_any104 = getelementptr i8, ptr %115, i64 -8, !dbg !1642
  store ptr %ptradd_any104, ptr %header, align 8, !dbg !1642
  %116 = load ptr, ptr %header, align 8, !dbg !1643
  %117 = load i64, ptr %size, align 8, !dbg !1644
  store i64 %117, ptr %116, align 8, !dbg !1644
  %118 = load ptr, ptr %mem, align 8, !dbg !1645
  store ptr %118, ptr %0, align 8, !dbg !1645
  ret i64 0, !dbg !1645

panic:                                            ; preds = %entry
  %119 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1545
  call void %119(ptr @.panic_msg, i64 62, ptr @.file.93, i64 21, ptr @.func.15, i64 7, i32 135) #6, !dbg !1545
  unreachable, !dbg !1545

panic33:                                          ; preds = %noerr_block
  %120 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1610
  call void %120(ptr @.panic_msg.103, i64 46, ptr @.file.93, i64 21, ptr @.func.15, i64 7, i32 151) #6, !dbg !1610
  unreachable, !dbg !1610

panic35:                                          ; preds = %checkok34
  store i64 8, ptr %taddr, align 8
  %121 = insertvalue %any undef, ptr %taddr, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %67, ptr %taddr36, align 8
  %123 = insertvalue %any undef, ptr %taddr36, 0
  %124 = insertvalue %any %123, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %122, ptr %varargslots, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %124, ptr %ptradd37, align 16
  %125 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %125, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.93, i64 21, ptr @.func.15, i64 7, i32 151, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1610
  unreachable, !dbg !1610
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i8 @std.core.mem.allocator.allocation_in_stack_mem(ptr %0, ptr %1) #0 !dbg !1646 {
entry:
  %a = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr5 = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots7 = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  store ptr %0, ptr %a, align 8
    #dbg_declare(ptr %a, !1649, !DIExpression(), !1650)
  store ptr %1, ptr %ptr, align 8
    #dbg_declare(ptr %ptr, !1651, !DIExpression(), !1652)
  %2 = load ptr, ptr %ptr, align 8, !dbg !1653
  %3 = load ptr, ptr %a, align 8, !dbg !1654
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !1654
  %4 = load ptr, ptr %ptradd, align 8, !dbg !1654
  %ge = icmp uge ptr %2, %4, !dbg !1653
  br i1 %ge, label %and.rhs, label %and.phi, !dbg !1653

and.rhs:                                          ; preds = %entry
  %5 = load ptr, ptr %ptr, align 8, !dbg !1655
  %6 = load ptr, ptr %a, align 8, !dbg !1656
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1656
  %ptradd2 = getelementptr inbounds i8, ptr %ptradd1, i64 8, !dbg !1656
  %7 = load i64, ptr %ptradd2, align 8, !dbg !1656
  %8 = load ptr, ptr %ptradd1, align 8, !dbg !1656
  %9 = sub nuw i64 %7, 1, !dbg !1657
  %lt = icmp slt i64 %9, 0, !dbg !1657
  %10 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !1657
  br i1 %10, label %panic, label %checkok, !dbg !1657

checkok:                                          ; preds = %and.rhs
  %ge3 = icmp sge i64 %9, %7, !dbg !1657
  %11 = call i1 @llvm.expect.i1(i1 %ge3, i1 false), !dbg !1657
  br i1 %11, label %panic4, label %checkok11, !dbg !1657

checkok11:                                        ; preds = %checkok
  %ptradd12 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !1657
  %le = icmp ule ptr %5, %ptradd12, !dbg !1655
  br label %and.phi, !dbg !1655

and.phi:                                          ; preds = %checkok11, %entry
  %val = phi i1 [ false, %entry ], [ %le, %checkok11 ], !dbg !1655
  %12 = zext i1 %val to i8, !dbg !1655
  ret i8 %12, !dbg !1655

panic:                                            ; preds = %and.rhs
  store i64 %9, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %14, ptr %varargslots, align 16
  %15 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %15, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.92, i64 38, ptr @.file.93, i64 21, ptr @.func.94, i64 23, i32 78, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1657
  unreachable, !dbg !1657

panic4:                                           ; preds = %checkok
  store i64 %7, ptr %taddr5, align 8
  %16 = insertvalue %any undef, ptr %taddr5, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %9, ptr %taddr6, align 8
  %18 = insertvalue %any undef, ptr %taddr6, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %17, ptr %varargslots7, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots7, i64 16
  store %any %19, ptr %ptradd8, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots7, 0
  %"$$temp9" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp9", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.10, i64 59, ptr @.file.93, i64 21, ptr @.func.94, i64 23, i32 78, ptr byval(%"any[]") align 8 %indirectarg10) #6, !dbg !1657
  unreachable, !dbg !1657
}

; Function Attrs: nounwind ssp uwtable
define internal void @std.core.mem.allocator.on_stack_allocator_remove_chunk(ptr %0, ptr %1) #0 !dbg !1658 {
entry:
  %a = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %chunk = alloca ptr, align 8
  %addr = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %ptr8 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg26 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %a, align 8
    #dbg_declare(ptr %a, !1661, !DIExpression(), !1662)
  store ptr %1, ptr %ptr, align 8
    #dbg_declare(ptr %ptr, !1663, !DIExpression(), !1664)
    #dbg_declare(ptr %chunk, !1665, !DIExpression(), !1666)
  %2 = load ptr, ptr %a, align 8, !dbg !1667
  %ptradd = getelementptr inbounds i8, ptr %2, i64 40, !dbg !1667
  %3 = load ptr, ptr %ptradd, align 8, !dbg !1667
  store ptr %3, ptr %chunk, align 8, !dbg !1667
    #dbg_declare(ptr %addr, !1668, !DIExpression(), !1670)
  %4 = load ptr, ptr %a, align 8, !dbg !1671
  %ptradd1 = getelementptr inbounds i8, ptr %4, i64 40, !dbg !1671
  store ptr %ptradd1, ptr %addr, align 8, !dbg !1671
  br label %loop.cond, !dbg !1672

loop.cond:                                        ; preds = %checkok24, %entry
  %5 = load ptr, ptr %chunk, align 8, !dbg !1673
  %i2b = icmp ne ptr %5, null, !dbg !1673
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1673

loop.body:                                        ; preds = %loop.cond
  %6 = load ptr, ptr %chunk, align 8, !dbg !1675
  %ptradd2 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1675
  %7 = load ptr, ptr %ptradd2, align 8, !dbg !1675
  %8 = load ptr, ptr %ptr, align 8, !dbg !1677
  %eq = icmp eq ptr %7, %8, !dbg !1675
  br i1 %eq, label %if.then, label %if.exit12, !dbg !1675

if.then:                                          ; preds = %loop.body
  %9 = load ptr, ptr %addr, align 8, !dbg !1678
  %checknull = icmp eq ptr %9, null, !dbg !1678
  %10 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1678
  br i1 %10, label %panic, label %checkok, !dbg !1678

checkok:                                          ; preds = %if.then
  %11 = ptrtoint ptr %9 to i64, !dbg !1678
  %12 = urem i64 %11, 8, !dbg !1678
  %13 = icmp ne i64 %12, 0, !dbg !1678
  %14 = call i1 @llvm.expect.i1(i1 %13, i1 false), !dbg !1678
  br i1 %14, label %panic3, label %checkok6, !dbg !1678

checkok6:                                         ; preds = %checkok
  %15 = load ptr, ptr %chunk, align 8, !dbg !1680
  %ptradd7 = getelementptr inbounds i8, ptr %15, i64 8, !dbg !1680
  %16 = load ptr, ptr %ptradd7, align 8, !dbg !1680
  store ptr %16, ptr %9, align 8, !dbg !1680
  %17 = load ptr, ptr %a, align 8, !dbg !1681
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %17, i32 16, i1 false)
  %18 = load ptr, ptr %chunk, align 8, !dbg !1682
  store ptr %18, ptr %ptr8, align 8
  %19 = load ptr, ptr %ptr8, align 8, !dbg !1683
  %i2nb = icmp eq ptr %19, null, !dbg !1683
  br i1 %i2nb, label %if.then9, label %if.exit, !dbg !1683

if.then9:                                         ; preds = %checkok6
  br label %expr_block.exit, !dbg !1686

if.exit:                                          ; preds = %checkok6
  %20 = load ptr, ptr %ptr8, align 8, !dbg !1687
  %neq = icmp ne ptr %20, null, !dbg !1688
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1688

assert_fail:                                      ; preds = %if.exit
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1688
  call void %21(ptr @.panic_msg.27, i64 75, ptr @.file.73, i64 16, ptr @.func.96, i64 31, i32 122) #6, !dbg !1688
  unreachable, !dbg !1688

assert_ok:                                        ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1688
  %22 = load i64, ptr %ptradd10, align 8, !dbg !1688
  %23 = inttoptr i64 %22 to ptr, !dbg !1688
  %type = load ptr, ptr %.cachedtype, align 8
  %24 = icmp eq ptr %23, %type
  br i1 %24, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok
  %ptradd11 = getelementptr inbounds i8, ptr %23, i64 16
  %25 = load ptr, ptr %ptradd11, align 8
  %26 = call ptr @.dyn_search(ptr %25, ptr @"$sel.release")
  store ptr %26, ptr %.inlinecache, align 8
  store ptr %23, ptr %.cachedtype, align 8
  br label %27

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %27

27:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %26, %cache_miss ]
  %28 = icmp eq ptr %fn_phi, null
  br i1 %28, label %missing_function, label %match

missing_function:                                 ; preds = %27
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1688
  call void %29(ptr @.panic_msg.28, i64 44, ptr @.file.73, i64 16, ptr @.func.96, i64 31, i32 122) #6, !dbg !1688
  unreachable, !dbg !1688

match:                                            ; preds = %27
  %30 = load ptr, ptr %allocator, align 8, !dbg !1688
  call void %fn_phi(ptr %30, ptr %20, i8 zeroext 0), !dbg !1688
  br label %expr_block.exit, !dbg !1688

expr_block.exit:                                  ; preds = %match, %if.then9
  ret void, !dbg !1689

if.exit12:                                        ; preds = %loop.body
  %31 = load ptr, ptr %chunk, align 8, !dbg !1690
  %ptradd13 = getelementptr inbounds i8, ptr %31, i64 8, !dbg !1690
  store ptr %ptradd13, ptr %addr, align 8, !dbg !1690
  %32 = load ptr, ptr %addr, align 8, !dbg !1691
  %checknull14 = icmp eq ptr %32, null, !dbg !1691
  %33 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !1691
  br i1 %33, label %panic15, label %checkok16, !dbg !1691

checkok16:                                        ; preds = %if.exit12
  %34 = ptrtoint ptr %32 to i64, !dbg !1691
  %35 = urem i64 %34, 8, !dbg !1691
  %36 = icmp ne i64 %35, 0, !dbg !1691
  %37 = call i1 @llvm.expect.i1(i1 %36, i1 false), !dbg !1691
  br i1 %37, label %panic17, label %checkok24, !dbg !1691

checkok24:                                        ; preds = %checkok16
  %38 = load ptr, ptr %32, align 8, !dbg !1691
  store ptr %38, ptr %chunk, align 8, !dbg !1691
  br label %loop.cond, !dbg !1691

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.97, i64 13 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1692
  %ptradd25 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1692
  %hi = load i64, ptr %ptradd25, align 8, !dbg !1692
  store %"any[]" zeroinitializer, ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.98, i64 21, ptr @.str.99, i64 31, i32 96, ptr byval(%"any[]") align 8 %indirectarg26), !dbg !1695
  unreachable, !dbg !1696

panic:                                            ; preds = %if.then
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1678
  call void %39(ptr @.panic_msg.95, i64 45, ptr @.file.93, i64 21, ptr @.func.96, i64 31, i32 89) #6, !dbg !1678
  unreachable, !dbg !1678

panic3:                                           ; preds = %checkok
  store i64 8, ptr %taddr, align 8
  %40 = insertvalue %any undef, ptr %taddr, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr4, align 8
  %42 = insertvalue %any undef, ptr %taddr4, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %41, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %43, ptr %ptradd5, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.93, i64 21, ptr @.func.96, i64 31, i32 89, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1678
  unreachable, !dbg !1678

panic15:                                          ; preds = %if.exit12
  %45 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1691
  call void %45(ptr @.panic_msg.95, i64 45, ptr @.file.93, i64 21, ptr @.func.96, i64 31, i32 94) #6, !dbg !1691
  unreachable, !dbg !1691

panic17:                                          ; preds = %checkok16
  store i64 8, ptr %taddr18, align 8
  %46 = insertvalue %any undef, ptr %taddr18, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr19, align 8
  %48 = insertvalue %any undef, ptr %taddr19, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %47, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %49, ptr %ptradd21, align 16
  %50 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %50, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.93, i64 21, ptr @.func.96, i64 31, i32 94, ptr byval(%"any[]") align 8 %indirectarg23) #6, !dbg !1691
  unreachable, !dbg !1691
}

; Function Attrs: nounwind ssp uwtable
define internal ptr @std.core.mem.allocator.on_stack_allocator_find_chunk(ptr %0, ptr %1) #0 !dbg !1697 {
entry:
  %a = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %chunk = alloca ptr, align 8
  store ptr %0, ptr %a, align 8
    #dbg_declare(ptr %a, !1700, !DIExpression(), !1701)
  store ptr %1, ptr %ptr, align 8
    #dbg_declare(ptr %ptr, !1702, !DIExpression(), !1703)
    #dbg_declare(ptr %chunk, !1704, !DIExpression(), !1705)
  %2 = load ptr, ptr %a, align 8, !dbg !1706
  %ptradd = getelementptr inbounds i8, ptr %2, i64 40, !dbg !1706
  %3 = load ptr, ptr %ptradd, align 8, !dbg !1706
  store ptr %3, ptr %chunk, align 8, !dbg !1706
  br label %loop.cond, !dbg !1707

loop.cond:                                        ; preds = %if.exit, %entry
  %4 = load ptr, ptr %chunk, align 8, !dbg !1708
  %i2b = icmp ne ptr %4, null, !dbg !1708
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1708

loop.body:                                        ; preds = %loop.cond
  %5 = load ptr, ptr %chunk, align 8, !dbg !1710
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1710
  %6 = load ptr, ptr %ptradd1, align 8, !dbg !1710
  %7 = load ptr, ptr %ptr, align 8, !dbg !1712
  %eq = icmp eq ptr %6, %7, !dbg !1710
  br i1 %eq, label %if.then, label %if.exit, !dbg !1710

if.then:                                          ; preds = %loop.body
  %8 = load ptr, ptr %chunk, align 8, !dbg !1713
  ret ptr %8, !dbg !1713

if.exit:                                          ; preds = %loop.body
  %9 = load ptr, ptr %chunk, align 8, !dbg !1714
  %ptradd2 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !1714
  %10 = load ptr, ptr %ptradd2, align 8, !dbg !1714
  store ptr %10, ptr %chunk, align 8, !dbg !1714
  br label %loop.cond, !dbg !1714

loop.exit:                                        ; preds = %loop.cond
  ret ptr null, !dbg !1715
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.BackedArenaAllocator.destroy(ptr %0) #0 comdat !dbg !1716 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1736
  %1 = icmp eq ptr %0, null, !dbg !1736
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1736
  br i1 %2, label %panic, label %checkok, !dbg !1736

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1737, !DIExpression(), !1738)
  %3 = load ptr, ptr %self, align 8, !dbg !1739
  call void @std.core.mem.allocator.BackedArenaAllocator.reset(ptr %3, i64 0), !dbg !1740
  %4 = load ptr, ptr %self, align 8, !dbg !1741
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !1741
  %5 = load ptr, ptr %ptradd, align 8, !dbg !1741
  %i2b = icmp ne ptr %5, null, !dbg !1741
  br i1 %i2b, label %if.then, label %if.exit, !dbg !1741

if.then:                                          ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !1742
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1742
  %7 = load ptr, ptr %self, align 8, !dbg !1742
  %8 = load ptr, ptr %ptradd1, align 8, !dbg !1742
  %9 = call i64 @std.core.mem.allocator.BackedArenaAllocator._free_page(ptr %7, ptr %8) #7, !dbg !1743
  br label %if.exit, !dbg !1743

if.exit:                                          ; preds = %if.then, %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !1744
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %10, i32 16, i1 false)
  %11 = load ptr, ptr %self, align 8, !dbg !1745
  store ptr %11, ptr %ptr, align 8
  %12 = load ptr, ptr %ptr, align 8, !dbg !1746
  %i2nb = icmp eq ptr %12, null, !dbg !1746
  br i1 %i2nb, label %if.then2, label %if.exit3, !dbg !1746

if.then2:                                         ; preds = %if.exit
  br label %expr_block.exit, !dbg !1749

if.exit3:                                         ; preds = %if.exit
  %13 = load ptr, ptr %ptr, align 8, !dbg !1750
  %neq = icmp ne ptr %13, null, !dbg !1751
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1751

assert_fail:                                      ; preds = %if.exit3
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1751
  call void %14(ptr @.panic_msg.27, i64 75, ptr @.file.73, i64 16, ptr @.func.108, i64 7, i32 122) #6, !dbg !1751
  unreachable, !dbg !1751

assert_ok:                                        ; preds = %if.exit3
  %ptradd4 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1751
  %15 = load i64, ptr %ptradd4, align 8, !dbg !1751
  %16 = inttoptr i64 %15 to ptr, !dbg !1751
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1736
  %17 = icmp eq ptr %16, %type, !dbg !1736
  br i1 %17, label %cache_hit, label %cache_miss, !dbg !1736

cache_miss:                                       ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1736
  %18 = load ptr, ptr %ptradd5, align 8, !dbg !1736
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.release"), !dbg !1736
  store ptr %19, ptr %.inlinecache, align 8, !dbg !1736
  store ptr %16, ptr %.cachedtype, align 8, !dbg !1736
  br label %20, !dbg !1736

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1736
  br label %20, !dbg !1736

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ], !dbg !1736
  %21 = icmp eq ptr %fn_phi, null, !dbg !1736
  br i1 %21, label %missing_function, label %match, !dbg !1736

missing_function:                                 ; preds = %20
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1736
  call void %22(ptr @.panic_msg.28, i64 44, ptr @.file.73, i64 16, ptr @.func.108, i64 7, i32 122) #6, !dbg !1736
  unreachable, !dbg !1736

match:                                            ; preds = %20
  %23 = load ptr, ptr %allocator, align 8, !dbg !1736
  call void %fn_phi(ptr %23, ptr %13, i8 zeroext 0), !dbg !1736
  br label %expr_block.exit, !dbg !1736

expr_block.exit:                                  ; preds = %match, %if.then2
  ret void, !dbg !1736

panic:                                            ; preds = %entry
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1738
  call void %24(ptr @.panic_msg, i64 62, ptr @.file.106, i64 25, ptr @.func.108, i64 7, i32 56) #6, !dbg !1738
  unreachable, !dbg !1738
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.BackedArenaAllocator.mark(ptr %0) #0 comdat !dbg !1752 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1755
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1755
  br i1 %2, label %panic, label %checkok, !dbg !1755

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1756, !DIExpression(), !1757)
  %3 = load ptr, ptr %self, align 8, !dbg !1755
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !1755
  %4 = load i64, ptr %ptradd, align 8, !dbg !1755
  ret i64 %4, !dbg !1755

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1757
  call void %5(ptr @.panic_msg, i64 62, ptr @.file.106, i64 25, ptr @.func.109, i64 4, i32 63) #6, !dbg !1757
  unreachable, !dbg !1757
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.BackedArenaAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !1758 {
entry:
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %.anon = alloca i8, align 1
  %old_size = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %addr = alloca ptr, align 8
  %size = alloca i64, align 8
  %3 = icmp eq ptr %0, null, !dbg !1761
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1761
  br i1 %4, label %panic, label %checkok, !dbg !1761

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1762, !DIExpression(), !1763)
  store ptr %1, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !1764, !DIExpression(), !1765)
  store i8 %2, ptr %.anon, align 1
    #dbg_declare(ptr %.anon, !1766, !DIExpression(), !1767)
    #dbg_declare(ptr %old_size, !1768, !DIExpression(), !1769)
  %5 = load ptr, ptr %old_pointer, align 8, !dbg !1770
  %ptradd_any = getelementptr i8, ptr %5, i64 -8, !dbg !1771
  %checknull = icmp eq ptr %ptradd_any, null, !dbg !1771
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1771
  br i1 %6, label %panic1, label %checkok2, !dbg !1771

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %ptradd_any to i64, !dbg !1772
  %8 = urem i64 %7, 8, !dbg !1772
  %9 = icmp ne i64 %8, 0, !dbg !1772
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1772
  br i1 %10, label %panic3, label %checkok5, !dbg !1772

checkok5:                                         ; preds = %checkok2
  %11 = load i64, ptr %ptradd_any, align 8, !dbg !1772
  store i64 %11, ptr %old_size, align 8, !dbg !1772
  %12 = load ptr, ptr %old_pointer, align 8, !dbg !1773
  %13 = load i64, ptr %old_size, align 8, !dbg !1774
  %ptradd_any6 = getelementptr i8, ptr %12, i64 %13, !dbg !1774
  %14 = load ptr, ptr %self, align 8, !dbg !1775
  %ptradd7 = getelementptr inbounds i8, ptr %14, i64 40, !dbg !1775
  %15 = load ptr, ptr %self, align 8, !dbg !1776
  %ptradd8 = getelementptr inbounds i8, ptr %15, i64 24, !dbg !1776
  %16 = load i64, ptr %ptradd8, align 8, !dbg !1776
  %ptradd9 = getelementptr inbounds i8, ptr %ptradd7, i64 %16, !dbg !1776
  %eq = icmp eq ptr %ptradd_any6, %ptradd9, !dbg !1773
  br i1 %eq, label %if.then, label %if.exit, !dbg !1773

if.then:                                          ; preds = %checkok5
  %17 = load ptr, ptr %self, align 8, !dbg !1777
  %ptradd10 = getelementptr inbounds i8, ptr %17, i64 24, !dbg !1777
  %18 = load i64, ptr %ptradd10, align 8, !dbg !1777
  %19 = load i64, ptr %old_size, align 8, !dbg !1779
  %sub = sub i64 %18, %19, !dbg !1777
  store i64 %sub, ptr %ptradd10, align 8, !dbg !1777
  %20 = load ptr, ptr %self, align 8, !dbg !1780
  %ptradd11 = getelementptr inbounds i8, ptr %20, i64 40, !dbg !1780
  %21 = load ptr, ptr %self, align 8, !dbg !1781
  %ptradd12 = getelementptr inbounds i8, ptr %21, i64 24, !dbg !1781
  %22 = load i64, ptr %ptradd12, align 8, !dbg !1781
  %ptradd13 = getelementptr inbounds i8, ptr %ptradd11, i64 %22, !dbg !1781
  store ptr %ptradd13, ptr %addr, align 8
  %23 = load i64, ptr %old_size, align 8
  store i64 %23, ptr %size, align 8
  br label %if.exit, !dbg !1782

if.exit:                                          ; preds = %if.then, %checkok5
  ret void, !dbg !1782

panic:                                            ; preds = %entry
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1763
  call void %24(ptr @.panic_msg, i64 62, ptr @.file.106, i64 25, ptr @.func.24, i64 7, i32 65) #6, !dbg !1763
  unreachable, !dbg !1763

panic1:                                           ; preds = %checkok
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1772
  call void %25(ptr @.panic_msg.110, i64 42, ptr @.file.106, i64 25, ptr @.func.24, i64 7, i32 67) #6, !dbg !1772
  unreachable, !dbg !1772

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %26 = insertvalue %any undef, ptr %taddr, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %28 = insertvalue %any undef, ptr %taddr4, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %27, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %29, ptr %ptradd, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.106, i64 25, ptr @.func.24, i64 7, i32 67, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1772
  unreachable, !dbg !1772
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.BackedArenaAllocator.reset(ptr %0, i64 %1) #0 comdat !dbg !1786 {
entry:
  %self = alloca ptr, align 8
  %mark = alloca i64, align 8
  %last_page = alloca ptr, align 8
  %to_free = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %cleaned = alloca i64, align 8
  %taddr = alloca i64, align 8
  %varargslots11 = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %addr = alloca ptr, align 8
  %size = alloca i64, align 8
  %2 = icmp eq ptr %0, null, !dbg !1789
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1789
  br i1 %3, label %panic, label %checkok, !dbg !1789

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1790, !DIExpression(), !1791)
  store i64 %1, ptr %mark, align 8
    #dbg_declare(ptr %mark, !1792, !DIExpression(), !1793)
    #dbg_declare(ptr %last_page, !1794, !DIExpression(), !1795)
  %4 = load ptr, ptr %self, align 8, !dbg !1796
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !1796
  %5 = load ptr, ptr %ptradd, align 8, !dbg !1796
  store ptr %5, ptr %last_page, align 8, !dbg !1796
  br label %loop.cond, !dbg !1797

loop.cond:                                        ; preds = %noerr_block, %checkok
  %6 = load ptr, ptr %last_page, align 8, !dbg !1798
  %i2b = icmp ne ptr %6, null, !dbg !1798
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !1798

and.rhs:                                          ; preds = %loop.cond
  %7 = load ptr, ptr %last_page, align 8, !dbg !1800
  %ptradd1 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !1800
  %8 = load i64, ptr %ptradd1, align 8, !dbg !1800
  %9 = load i64, ptr %mark, align 8, !dbg !1801
  %gt = icmp ugt i64 %8, %9, !dbg !1800
  br label %and.phi, !dbg !1800

and.phi:                                          ; preds = %and.rhs, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %gt, %and.rhs ], !dbg !1800
  br i1 %val, label %loop.body, label %loop.exit, !dbg !1800

loop.body:                                        ; preds = %and.phi
  %10 = load ptr, ptr %self, align 8, !dbg !1802
  %ptradd2 = getelementptr inbounds i8, ptr %10, i64 24, !dbg !1802
  %11 = load ptr, ptr %last_page, align 8, !dbg !1804
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !1804
  %12 = load i64, ptr %ptradd3, align 8, !dbg !1804
  store i64 %12, ptr %ptradd2, align 8, !dbg !1804
    #dbg_declare(ptr %to_free, !1805, !DIExpression(), !1806)
  %13 = load ptr, ptr %last_page, align 8, !dbg !1807
  store ptr %13, ptr %to_free, align 8, !dbg !1807
  %14 = load ptr, ptr %last_page, align 8, !dbg !1808
  %15 = load ptr, ptr %14, align 8, !dbg !1808
  store ptr %15, ptr %last_page, align 8, !dbg !1808
  %16 = load ptr, ptr %self, align 8, !dbg !1809
  %17 = load ptr, ptr %to_free, align 8, !dbg !1809
  %18 = call i64 @std.core.mem.allocator.BackedArenaAllocator._free_page(ptr %16, ptr %17) #7, !dbg !1810
  %not_err = icmp eq i64 %18, 0, !dbg !1810
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1810
  br i1 %19, label %after_check, label %assign_optional, !dbg !1810

assign_optional:                                  ; preds = %loop.body
  store i64 %18, ptr %error_var, align 8, !dbg !1810
  br label %panic_block, !dbg !1810

after_check:                                      ; preds = %loop.body
  br label %noerr_block, !dbg !1810

panic_block:                                      ; preds = %assign_optional
  %20 = insertvalue %any undef, ptr %error_var, 0, !dbg !1810
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !1810
  store %any %21, ptr %varargslots, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 36, ptr @.file.106, i64 25, ptr @.func.111, i64 5, i32 82, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1810
  unreachable, !dbg !1810

noerr_block:                                      ; preds = %after_check
  br label %loop.cond, !dbg !1810

loop.exit:                                        ; preds = %and.phi
  %23 = load ptr, ptr %self, align 8, !dbg !1811
  %ptradd4 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !1811
  %24 = load ptr, ptr %last_page, align 8, !dbg !1812
  store ptr %24, ptr %ptradd4, align 8, !dbg !1812
  %25 = load ptr, ptr %last_page, align 8, !dbg !1813
  %i2nb = icmp eq ptr %25, null, !dbg !1813
  br i1 %i2nb, label %if.then, label %if.exit20, !dbg !1813

if.then:                                          ; preds = %loop.exit
    #dbg_declare(ptr %cleaned, !1814, !DIExpression(), !1816)
  %26 = load ptr, ptr %self, align 8, !dbg !1817
  %ptradd5 = getelementptr inbounds i8, ptr %26, i64 24, !dbg !1817
  %27 = load i64, ptr %ptradd5, align 8, !dbg !1817
  %28 = load i64, ptr %mark, align 8, !dbg !1818
  %sub = sub i64 %27, %28, !dbg !1817
  store i64 %sub, ptr %cleaned, align 8, !dbg !1817
  %29 = load i64, ptr %cleaned, align 8, !dbg !1819
  %lt = icmp ult i64 0, %29, !dbg !1819
  br i1 %lt, label %if.then6, label %if.exit, !dbg !1819

if.then6:                                         ; preds = %if.then
  %30 = load ptr, ptr %self, align 8, !dbg !1820
  %ptradd7 = getelementptr inbounds i8, ptr %30, i64 40, !dbg !1820
  %31 = load i64, ptr %mark, align 8, !dbg !1822
  %32 = load i64, ptr %cleaned, align 8, !dbg !1823
  %add = add i64 %31, %32, !dbg !1823
  %gt8 = icmp ugt i64 %31, %add, !dbg !1823
  %sub9 = sub i64 %add, %31, !dbg !1823
  %33 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !1823
  br i1 %33, label %panic10, label %checkok14, !dbg !1823

checkok14:                                        ; preds = %if.then6
  br label %cond, !dbg !1820

cond:                                             ; preds = %assign, %checkok14
  %34 = phi i64 [ %31, %checkok14 ], [ %add17, %assign ], !dbg !1820
  %lt15 = icmp ult i64 %34, %add, !dbg !1820
  br i1 %lt15, label %assign, label %exit, !dbg !1820

assign:                                           ; preds = %cond
  %ptradd16 = getelementptr inbounds i8, ptr %ptradd7, i64 %34, !dbg !1820
  store i8 -86, ptr %ptradd16, align 1, !dbg !1820
  %add17 = add i64 %34, 1, !dbg !1820
  br label %cond, !dbg !1820

exit:                                             ; preds = %cond
  %35 = load ptr, ptr %self, align 8, !dbg !1824
  %ptradd18 = getelementptr inbounds i8, ptr %35, i64 40, !dbg !1824
  %36 = load i64, ptr %mark, align 8, !dbg !1825
  %ptradd19 = getelementptr inbounds i8, ptr %ptradd18, i64 %36, !dbg !1825
  store ptr %ptradd19, ptr %addr, align 8
  %37 = load i64, ptr %cleaned, align 8
  store i64 %37, ptr %size, align 8
  br label %if.exit, !dbg !1826

if.exit:                                          ; preds = %exit, %if.then
  br label %if.exit20, !dbg !1826

if.exit20:                                        ; preds = %if.exit, %loop.exit
  %38 = load ptr, ptr %self, align 8, !dbg !1829
  %ptradd21 = getelementptr inbounds i8, ptr %38, i64 24, !dbg !1829
  %39 = load i64, ptr %mark, align 8, !dbg !1830
  store i64 %39, ptr %ptradd21, align 8, !dbg !1830
  ret void, !dbg !1830

panic:                                            ; preds = %entry
  %40 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1791
  call void %40(ptr @.panic_msg, i64 62, ptr @.file.106, i64 25, ptr @.func.111, i64 5, i32 74) #6, !dbg !1791
  unreachable, !dbg !1791

panic10:                                          ; preds = %if.then6
  store i64 %sub9, ptr %taddr, align 8
  %41 = insertvalue %any undef, ptr %taddr, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %42, ptr %varargslots11, align 16
  %43 = insertvalue %"any[]" undef, ptr %varargslots11, 0
  %"$$temp12" = insertvalue %"any[]" %43, i64 1, 1
  store %"any[]" %"$$temp12", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.112, i64 43, ptr @.file.106, i64 25, ptr @.func.111, i64 5, i32 92, ptr byval(%"any[]") align 8 %indirectarg13) #6, !dbg !1820
  unreachable, !dbg !1820
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.BackedArenaAllocator._free_page(ptr %0, ptr %1) #0 !dbg !1831 {
entry:
  %self = alloca ptr, align 8
  %page = alloca ptr, align 8
  %mem = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %self1 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1834
  %2 = icmp eq ptr %0, null, !dbg !1834
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1834
  br i1 %3, label %panic, label %checkok, !dbg !1834

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1835, !DIExpression(), !1836)
  store ptr %1, ptr %page, align 8
    #dbg_declare(ptr %page, !1837, !DIExpression(), !1838)
    #dbg_declare(ptr %mem, !1839, !DIExpression(), !1840)
  %4 = load ptr, ptr %page, align 8, !dbg !1841
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !1841
  %5 = load ptr, ptr %ptradd, align 8, !dbg !1841
  store ptr %5, ptr %mem, align 8, !dbg !1841
  %6 = load ptr, ptr %self, align 8, !dbg !1842
  %7 = load ptr, ptr %mem, align 8, !dbg !1843
  %8 = load ptr, ptr %page, align 8
  store ptr %8, ptr %self1, align 8
  %9 = load ptr, ptr %self1, align 8, !dbg !1844
  %neq = icmp ne ptr %9, null, !dbg !1844
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1844

assert_fail:                                      ; preds = %checkok
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1844
  call void %10(ptr @.panic_msg.59, i64 32, ptr @.file.106, i64 25, ptr @.func.113, i64 10, i32 41) #6, !dbg !1844
  unreachable, !dbg !1844

assert_ok:                                        ; preds = %checkok
  %11 = load ptr, ptr %self1, align 8, !dbg !1848
  %ptradd2 = getelementptr inbounds i8, ptr %11, i64 24, !dbg !1848
  %12 = load i64, ptr %ptradd2, align 8, !dbg !1848
  %and = and i64 %12, -9223372036854775808, !dbg !1848
  %eq = icmp eq i64 %and, -9223372036854775808, !dbg !1848
  %neq3 = icmp ne ptr %7, null, !dbg !1842
  br i1 %neq3, label %assert_ok5, label %assert_fail4, !dbg !1842

assert_fail4:                                     ; preds = %assert_ok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1842
  call void %13(ptr @.panic_msg.27, i64 75, ptr @.file.106, i64 25, ptr @.func.113, i64 10, i32 104) #6, !dbg !1842
  unreachable, !dbg !1842

assert_ok5:                                       ; preds = %assert_ok
  %ptradd6 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !1842
  %14 = load i64, ptr %ptradd6, align 8, !dbg !1842
  %15 = inttoptr i64 %14 to ptr, !dbg !1842
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1834
  %16 = icmp eq ptr %15, %type, !dbg !1834
  br i1 %16, label %cache_hit, label %cache_miss, !dbg !1834

cache_miss:                                       ; preds = %assert_ok5
  %ptradd7 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !1834
  %17 = load ptr, ptr %ptradd7, align 8, !dbg !1834
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.release"), !dbg !1834
  store ptr %18, ptr %.inlinecache, align 8, !dbg !1834
  store ptr %15, ptr %.cachedtype, align 8, !dbg !1834
  br label %19, !dbg !1834

cache_hit:                                        ; preds = %assert_ok5
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1834
  br label %19, !dbg !1834

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ], !dbg !1834
  %20 = icmp eq ptr %fn_phi, null, !dbg !1834
  br i1 %20, label %missing_function, label %match, !dbg !1834

missing_function:                                 ; preds = %19
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1834
  call void %21(ptr @.panic_msg.28, i64 44, ptr @.file.106, i64 25, ptr @.func.113, i64 10, i32 104) #6, !dbg !1834
  unreachable, !dbg !1834

match:                                            ; preds = %19
  %22 = load ptr, ptr %6, align 8, !dbg !1834
  %23 = zext i1 %eq to i8, !dbg !1834
  call void %fn_phi(ptr %22, ptr %7, i8 zeroext %23), !dbg !1834
  ret i64 0, !dbg !1834

panic:                                            ; preds = %entry
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1836
  call void %24(ptr @.panic_msg, i64 62, ptr @.file.106, i64 25, ptr @.func.113, i64 10, i32 101) #6, !dbg !1836
  unreachable, !dbg !1836
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.BackedArenaAllocator._realloc_page(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 !dbg !1849 {
entry:
  %self = alloca ptr, align 8
  %page = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %real_pointer = alloca ptr, align 8
  %pointer_to_prev = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %varargslots25 = alloca [2 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
  %page_size = alloca i64, align 8
  %self30 = alloca ptr, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %x = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %self65 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1852
  %5 = icmp eq ptr %1, null, !dbg !1852
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1852
  br i1 %6, label %panic, label %checkok, !dbg !1852

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1853, !DIExpression(), !1854)
  store ptr %2, ptr %page, align 8
    #dbg_declare(ptr %page, !1855, !DIExpression(), !1856)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !1857, !DIExpression(), !1858)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1859, !DIExpression(), !1860)
    #dbg_declare(ptr %real_pointer, !1861, !DIExpression(), !1862)
  %7 = load ptr, ptr %page, align 8, !dbg !1863
  %ptradd = getelementptr inbounds i8, ptr %7, i64 8, !dbg !1863
  %8 = load ptr, ptr %ptradd, align 8, !dbg !1863
  store ptr %8, ptr %real_pointer, align 8, !dbg !1863
    #dbg_declare(ptr %pointer_to_prev, !1864, !DIExpression(), !1866)
  %9 = load ptr, ptr %self, align 8, !dbg !1867
  %ptradd1 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1867
  store ptr %ptradd1, ptr %pointer_to_prev, align 8, !dbg !1867
  br label %loop.cond, !dbg !1868

loop.cond:                                        ; preds = %checkok18, %checkok
  %10 = load ptr, ptr %pointer_to_prev, align 8, !dbg !1869
  %checknull = icmp eq ptr %10, null, !dbg !1869
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1869
  br i1 %11, label %panic2, label %checkok3, !dbg !1869

checkok3:                                         ; preds = %loop.cond
  %12 = ptrtoint ptr %10 to i64, !dbg !1869
  %13 = urem i64 %12, 8, !dbg !1869
  %14 = icmp ne i64 %13, 0, !dbg !1869
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !1869
  br i1 %15, label %panic4, label %checkok7, !dbg !1869

checkok7:                                         ; preds = %checkok3
  %16 = load ptr, ptr %10, align 8, !dbg !1869
  %17 = load ptr, ptr %page, align 8, !dbg !1871
  %neq = icmp ne ptr %16, %17, !dbg !1872
  br i1 %neq, label %loop.body, label %loop.exit, !dbg !1872

loop.body:                                        ; preds = %checkok7
  %18 = load ptr, ptr %pointer_to_prev, align 8, !dbg !1873
  %checknull8 = icmp eq ptr %18, null, !dbg !1873
  %19 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1873
  br i1 %19, label %panic9, label %checkok10, !dbg !1873

checkok10:                                        ; preds = %loop.body
  %20 = ptrtoint ptr %18 to i64, !dbg !1873
  %21 = urem i64 %20, 8, !dbg !1873
  %22 = icmp ne i64 %21, 0, !dbg !1873
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false), !dbg !1873
  br i1 %23, label %panic11, label %checkok18, !dbg !1873

checkok18:                                        ; preds = %checkok10
  %24 = load ptr, ptr %18, align 8, !dbg !1873
  store ptr %24, ptr %pointer_to_prev, align 8, !dbg !1873
  br label %loop.cond, !dbg !1873

loop.exit:                                        ; preds = %checkok7
  %25 = load ptr, ptr %pointer_to_prev, align 8, !dbg !1875
  %checknull19 = icmp eq ptr %25, null, !dbg !1875
  %26 = call i1 @llvm.expect.i1(i1 %checknull19, i1 false), !dbg !1875
  br i1 %26, label %panic20, label %checkok21, !dbg !1875

checkok21:                                        ; preds = %loop.exit
  %27 = ptrtoint ptr %25 to i64, !dbg !1875
  %28 = urem i64 %27, 8, !dbg !1875
  %29 = icmp ne i64 %28, 0, !dbg !1875
  %30 = call i1 @llvm.expect.i1(i1 %29, i1 false), !dbg !1875
  br i1 %30, label %panic22, label %checkok29, !dbg !1875

checkok29:                                        ; preds = %checkok21
  %31 = load ptr, ptr %page, align 8, !dbg !1876
  %32 = load ptr, ptr %31, align 8, !dbg !1876
  store ptr %32, ptr %25, align 8, !dbg !1876
    #dbg_declare(ptr %page_size, !1877, !DIExpression(), !1878)
  %33 = load ptr, ptr %page, align 8
  store ptr %33, ptr %self30, align 8
  %34 = load ptr, ptr %self30, align 8, !dbg !1879
  %neq31 = icmp ne ptr %34, null, !dbg !1879
  br i1 %neq31, label %assert_ok, label %assert_fail, !dbg !1879

assert_fail:                                      ; preds = %checkok29
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1879
  call void %35(ptr @.panic_msg.59, i64 32, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 40) #6, !dbg !1879
  unreachable, !dbg !1879

assert_ok:                                        ; preds = %checkok29
  %36 = load ptr, ptr %self30, align 8, !dbg !1883
  %ptradd32 = getelementptr inbounds i8, ptr %36, i64 24, !dbg !1883
  %37 = load i64, ptr %ptradd32, align 8, !dbg !1883
  %and = and i64 %37, 9223372036854775807, !dbg !1883
  store i64 %and, ptr %page_size, align 8, !dbg !1883
    #dbg_declare(ptr %data, !1884, !DIExpression(), !1885)
  %38 = load ptr, ptr %self, align 8, !dbg !1886
  %39 = load i64, ptr %size, align 8, !dbg !1887
  %40 = load i64, ptr %alignment, align 8, !dbg !1888
  %lt = icmp ult i64 0, %39, !dbg !1886
  br i1 %lt, label %assert_ok34, label %assert_fail33, !dbg !1886

assert_fail33:                                    ; preds = %assert_ok
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1886
  call void %41(ptr @.panic_msg.101, i64 29, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 122) #6, !dbg !1886
  unreachable, !dbg !1886

assert_ok34:                                      ; preds = %assert_ok
  %i2nb = icmp eq i64 %40, 0, !dbg !1889
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !1889

or.rhs:                                           ; preds = %assert_ok34
  store i64 %40, ptr %x, align 8
  %42 = load i64, ptr %x, align 8, !dbg !1890
  %neq35 = icmp ne i64 0, %42, !dbg !1890
  br i1 %neq35, label %and.rhs, label %and.phi, !dbg !1890

and.rhs:                                          ; preds = %or.rhs
  %43 = load i64, ptr %x, align 8, !dbg !1893
  %44 = load i64, ptr %x, align 8, !dbg !1894
  %sub = sub i64 %44, 1, !dbg !1894
  %and36 = and i64 %43, %sub, !dbg !1893
  %eq = icmp eq i64 %and36, 0, !dbg !1893
  br label %and.phi, !dbg !1893

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !1893
  br label %or.phi, !dbg !1893

or.phi:                                           ; preds = %and.phi, %assert_ok34
  %val37 = phi i1 [ true, %assert_ok34 ], [ %val, %and.phi ], !dbg !1893
  br i1 %val37, label %assert_ok39, label %assert_fail38, !dbg !1893

assert_fail38:                                    ; preds = %or.phi
  %45 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1886
  call void %45(ptr @.panic_msg.16, i64 65, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 122) #6, !dbg !1886
  unreachable, !dbg !1886

assert_ok39:                                      ; preds = %or.phi
  %le = icmp ule i64 %40, 268435456, !dbg !1886
  br i1 %le, label %assert_ok41, label %assert_fail40, !dbg !1886

assert_fail40:                                    ; preds = %assert_ok39
  %46 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1886
  call void %46(ptr @.panic_msg.17, i64 80, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 122) #6, !dbg !1886
  unreachable, !dbg !1886

assert_ok41:                                      ; preds = %assert_ok39
  %47 = call i64 @std.core.mem.allocator.BackedArenaAllocator.acquire(ptr %retparam, ptr %38, i64 %39, i32 0, i64 %40), !dbg !1886
  %not_err = icmp eq i64 %47, 0, !dbg !1886
  %48 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1886
  br i1 %48, label %after_check, label %assign_optional, !dbg !1886

assign_optional:                                  ; preds = %assert_ok41
  store i64 %47, ptr %error_var, align 8, !dbg !1886
  br label %guard_block, !dbg !1886

after_check:                                      ; preds = %assert_ok41
  br label %noerr_block, !dbg !1886

guard_block:                                      ; preds = %assign_optional
  %49 = load i64, ptr %error_var, align 8, !dbg !1886
  ret i64 %49, !dbg !1886

noerr_block:                                      ; preds = %after_check
  %50 = load ptr, ptr %retparam, align 8, !dbg !1886
  store ptr %50, ptr %data, align 8, !dbg !1886
  %51 = load ptr, ptr %data, align 8
  store ptr %51, ptr %dst, align 8
  %52 = load ptr, ptr %page, align 8, !dbg !1895
  %ptradd42 = getelementptr inbounds i8, ptr %52, i64 40, !dbg !1895
  store ptr %ptradd42, ptr %src, align 8
  %53 = load i64, ptr %page_size, align 8
  store i64 %53, ptr %len, align 8
  %54 = load ptr, ptr %dst, align 8, !dbg !1896
  %neq43 = icmp ne ptr %54, null, !dbg !1896
  br i1 %neq43, label %assert_ok45, label %assert_fail44, !dbg !1896

assert_fail44:                                    ; preds = %noerr_block
  %55 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1896
  call void %55(ptr @.panic_msg.75, i64 37, ptr @.file.71, i64 6, ptr @.func.114, i64 13, i32 329) #6, !dbg !1896
  unreachable, !dbg !1896

assert_ok45:                                      ; preds = %noerr_block
  %56 = load ptr, ptr %src, align 8, !dbg !1900
  %neq46 = icmp ne ptr %56, null, !dbg !1900
  br i1 %neq46, label %or.phi49, label %or.rhs47, !dbg !1900

or.rhs47:                                         ; preds = %assert_ok45
  %57 = load i64, ptr %len, align 8, !dbg !1901
  %eq48 = icmp eq i64 0, %57, !dbg !1901
  br label %or.phi49, !dbg !1901

or.phi49:                                         ; preds = %or.rhs47, %assert_ok45
  %val50 = phi i1 [ true, %assert_ok45 ], [ %eq48, %or.rhs47 ], !dbg !1901
  br i1 %val50, label %assert_ok52, label %assert_fail51, !dbg !1901

assert_fail51:                                    ; preds = %or.phi49
  %58 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1902
  call void %58(ptr @.panic_msg.76, i64 94, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 123) #6, !dbg !1902
  unreachable, !dbg !1902

assert_ok52:                                      ; preds = %or.phi49
  %59 = load i64, ptr %len, align 8, !dbg !1903
  %eq53 = icmp eq i64 0, %59, !dbg !1903
  br i1 %eq53, label %or.phi56, label %or.rhs54, !dbg !1903

or.rhs54:                                         ; preds = %assert_ok52
  %60 = load ptr, ptr %dst, align 8, !dbg !1904
  %61 = load i64, ptr %len, align 8, !dbg !1905
  %ptradd_any = getelementptr i8, ptr %60, i64 %61, !dbg !1905
  %62 = load ptr, ptr %src, align 8, !dbg !1906
  %le55 = icmp ule ptr %ptradd_any, %62, !dbg !1904
  br label %or.phi56, !dbg !1904

or.phi56:                                         ; preds = %or.rhs54, %assert_ok52
  %val57 = phi i1 [ true, %assert_ok52 ], [ %le55, %or.rhs54 ], !dbg !1904
  br i1 %val57, label %or.phi61, label %or.rhs58, !dbg !1904

or.rhs58:                                         ; preds = %or.phi56
  %63 = load ptr, ptr %src, align 8, !dbg !1907
  %64 = load i64, ptr %len, align 8, !dbg !1908
  %ptradd_any59 = getelementptr i8, ptr %63, i64 %64, !dbg !1908
  %65 = load ptr, ptr %dst, align 8, !dbg !1909
  %le60 = icmp ule ptr %ptradd_any59, %65, !dbg !1907
  br label %or.phi61, !dbg !1907

or.phi61:                                         ; preds = %or.rhs58, %or.phi56
  %val62 = phi i1 [ true, %or.phi56 ], [ %le60, %or.rhs58 ], !dbg !1907
  br i1 %val62, label %assert_ok64, label %assert_fail63, !dbg !1907

assert_fail63:                                    ; preds = %or.phi61
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1902
  call void %66(ptr @.panic_msg.77, i64 95, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 123) #6, !dbg !1902
  unreachable, !dbg !1902

assert_ok64:                                      ; preds = %or.phi61
  %67 = load ptr, ptr %dst, align 8, !dbg !1910
  %68 = load ptr, ptr %src, align 8, !dbg !1911
  %69 = load i64, ptr %len, align 8, !dbg !1912
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %67, ptr align 16 %68, i64 %69, i1 false), !dbg !1913
  %70 = load ptr, ptr %self, align 8, !dbg !1914
  %71 = load ptr, ptr %real_pointer, align 8, !dbg !1915
  %72 = load ptr, ptr %page, align 8
  store ptr %72, ptr %self65, align 8
  %73 = load ptr, ptr %self65, align 8, !dbg !1916
  %neq66 = icmp ne ptr %73, null, !dbg !1916
  br i1 %neq66, label %assert_ok68, label %assert_fail67, !dbg !1916

assert_fail67:                                    ; preds = %assert_ok64
  %74 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1916
  call void %74(ptr @.panic_msg.59, i64 32, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 41) #6, !dbg !1916
  unreachable, !dbg !1916

assert_ok68:                                      ; preds = %assert_ok64
  %75 = load ptr, ptr %self65, align 8, !dbg !1920
  %ptradd69 = getelementptr inbounds i8, ptr %75, i64 24, !dbg !1920
  %76 = load i64, ptr %ptradd69, align 8, !dbg !1920
  %and70 = and i64 %76, -9223372036854775808, !dbg !1920
  %eq71 = icmp eq i64 %and70, -9223372036854775808, !dbg !1920
  %neq72 = icmp ne ptr %71, null, !dbg !1914
  br i1 %neq72, label %assert_ok74, label %assert_fail73, !dbg !1914

assert_fail73:                                    ; preds = %assert_ok68
  %77 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1914
  call void %77(ptr @.panic_msg.27, i64 75, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 124) #6, !dbg !1914
  unreachable, !dbg !1914

assert_ok74:                                      ; preds = %assert_ok68
  %ptradd75 = getelementptr inbounds i8, ptr %70, i64 8, !dbg !1914
  %78 = load i64, ptr %ptradd75, align 8, !dbg !1914
  %79 = inttoptr i64 %78 to ptr, !dbg !1914
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1852
  %80 = icmp eq ptr %79, %type, !dbg !1852
  br i1 %80, label %cache_hit, label %cache_miss, !dbg !1852

cache_miss:                                       ; preds = %assert_ok74
  %ptradd76 = getelementptr inbounds i8, ptr %79, i64 16, !dbg !1852
  %81 = load ptr, ptr %ptradd76, align 8, !dbg !1852
  %82 = call ptr @.dyn_search(ptr %81, ptr @"$sel.release"), !dbg !1852
  store ptr %82, ptr %.inlinecache, align 8, !dbg !1852
  store ptr %79, ptr %.cachedtype, align 8, !dbg !1852
  br label %83, !dbg !1852

cache_hit:                                        ; preds = %assert_ok74
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1852
  br label %83, !dbg !1852

83:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %82, %cache_miss ], !dbg !1852
  %84 = icmp eq ptr %fn_phi, null, !dbg !1852
  br i1 %84, label %missing_function, label %match, !dbg !1852

missing_function:                                 ; preds = %83
  %85 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1852
  call void %85(ptr @.panic_msg.28, i64 44, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 124) #6, !dbg !1852
  unreachable, !dbg !1852

match:                                            ; preds = %83
  %86 = load ptr, ptr %70, align 8, !dbg !1852
  %87 = zext i1 %eq71 to i8, !dbg !1852
  call void %fn_phi(ptr %86, ptr %71, i8 zeroext %87), !dbg !1852
  %88 = load ptr, ptr %data, align 8, !dbg !1921
  store ptr %88, ptr %0, align 8, !dbg !1921
  ret i64 0, !dbg !1921

panic:                                            ; preds = %entry
  %89 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1854
  call void %89(ptr @.panic_msg, i64 62, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 107) #6, !dbg !1854
  unreachable, !dbg !1854

panic2:                                           ; preds = %loop.cond
  %90 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1869
  call void %90(ptr @.panic_msg.115, i64 56, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 115) #6, !dbg !1869
  unreachable, !dbg !1869

panic4:                                           ; preds = %checkok3
  store i64 8, ptr %taddr, align 8
  %91 = insertvalue %any undef, ptr %taddr, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr5, align 8
  %93 = insertvalue %any undef, ptr %taddr5, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %92, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %94, ptr %ptradd6, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 115, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1869
  unreachable, !dbg !1869

panic9:                                           ; preds = %loop.body
  %96 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1873
  call void %96(ptr @.panic_msg.115, i64 56, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 117) #6, !dbg !1873
  unreachable, !dbg !1873

panic11:                                          ; preds = %checkok10
  store i64 8, ptr %taddr12, align 8
  %97 = insertvalue %any undef, ptr %taddr12, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr13, align 8
  %99 = insertvalue %any undef, ptr %taddr13, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %98, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %100, ptr %ptradd15, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 117, ptr byval(%"any[]") align 8 %indirectarg17) #6, !dbg !1873
  unreachable, !dbg !1873

panic20:                                          ; preds = %loop.exit
  %102 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1875
  call void %102(ptr @.panic_msg.115, i64 56, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 119) #6, !dbg !1875
  unreachable, !dbg !1875

panic22:                                          ; preds = %checkok21
  store i64 8, ptr %taddr23, align 8
  %103 = insertvalue %any undef, ptr %taddr23, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %28, ptr %taddr24, align 8
  %105 = insertvalue %any undef, ptr %taddr24, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %104, ptr %varargslots25, align 16
  %ptradd26 = getelementptr inbounds i8, ptr %varargslots25, i64 16
  store %any %106, ptr %ptradd26, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots25, 0
  %"$$temp27" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp27", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.106, i64 25, ptr @.func.114, i64 13, i32 119, ptr byval(%"any[]") align 8 %indirectarg28) #6, !dbg !1875
  unreachable, !dbg !1875
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.BackedArenaAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !1922 {
entry:
  %self = alloca ptr, align 8
  %pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %chunk = alloca ptr, align 8
  %page = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %x = alloca i64, align 8
  %retparam10 = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr37 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !1925
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1925
  br i1 %6, label %panic, label %checkok, !dbg !1925

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1926, !DIExpression(), !1927)
  store ptr %2, ptr %pointer, align 8
    #dbg_declare(ptr %pointer, !1928, !DIExpression(), !1929)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !1930, !DIExpression(), !1931)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1932, !DIExpression(), !1933)
    #dbg_declare(ptr %chunk, !1934, !DIExpression(), !1940)
  %7 = load ptr, ptr %pointer, align 8, !dbg !1941
  %ptradd_any = getelementptr i8, ptr %7, i64 -8, !dbg !1942
  store ptr %ptradd_any, ptr %chunk, align 8, !dbg !1942
  %8 = load ptr, ptr %chunk, align 8, !dbg !1943
  %9 = load i64, ptr %8, align 8, !dbg !1943
  %eq = icmp eq i64 %9, -1, !dbg !1943
  br i1 %eq, label %if.then, label %if.exit, !dbg !1943

if.then:                                          ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !1944
  %ptradd = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1944
  %11 = load ptr, ptr %ptradd, align 8, !dbg !1944
  %i2b = icmp ne ptr %11, null, !dbg !1944
  br i1 %i2b, label %assert_ok, label %assert_fail, !dbg !1944

assert_fail:                                      ; preds = %if.then
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1944
  call void %12(ptr @.panic_msg.116, i64 28, ptr @.file.106, i64 25, ptr @.func.20, i64 6, i32 133) #6, !dbg !1944
  unreachable, !dbg !1944

assert_ok:                                        ; preds = %if.then
    #dbg_declare(ptr %page, !1946, !DIExpression(), !1947)
  %13 = load ptr, ptr %pointer, align 8, !dbg !1948
  %ptradd_any1 = getelementptr i8, ptr %13, i64 -40, !dbg !1949
  store ptr %ptradd_any1, ptr %page, align 8, !dbg !1949
  %14 = load ptr, ptr %self, align 8
  %15 = load ptr, ptr %page, align 8
  %16 = load i64, ptr %size, align 8
  %17 = load i64, ptr %alignment, align 8
  %18 = call i64 @std.core.mem.allocator.BackedArenaAllocator._realloc_page(ptr %retparam, ptr %14, ptr %15, i64 %16, i64 %17) #7, !dbg !1950
  %not_err = icmp eq i64 %18, 0, !dbg !1950
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1950
  br i1 %19, label %after_check, label %assign_optional, !dbg !1950

assign_optional:                                  ; preds = %assert_ok
  store i64 %18, ptr %reterr, align 8, !dbg !1950
  br label %err_retblock, !dbg !1950

after_check:                                      ; preds = %assert_ok
  %20 = load ptr, ptr %retparam, align 8, !dbg !1950
  store ptr %20, ptr %0, align 8, !dbg !1950
  ret i64 0, !dbg !1950

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !1950
  ret i64 %21, !dbg !1950

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %data, !1951, !DIExpression(), !1952)
  %22 = load ptr, ptr %self, align 8, !dbg !1953
  %23 = load i64, ptr %size, align 8, !dbg !1954
  %24 = load i64, ptr %alignment, align 8, !dbg !1955
  %lt = icmp ult i64 0, %23, !dbg !1953
  br i1 %lt, label %assert_ok3, label %assert_fail2, !dbg !1953

assert_fail2:                                     ; preds = %if.exit
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1953
  call void %25(ptr @.panic_msg.101, i64 29, ptr @.file.106, i64 25, ptr @.func.20, i64 6, i32 139) #6, !dbg !1953
  unreachable, !dbg !1953

assert_ok3:                                       ; preds = %if.exit
  %i2nb = icmp eq i64 %24, 0, !dbg !1956
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !1956

or.rhs:                                           ; preds = %assert_ok3
  store i64 %24, ptr %x, align 8
  %26 = load i64, ptr %x, align 8, !dbg !1957
  %neq = icmp ne i64 0, %26, !dbg !1957
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1957

and.rhs:                                          ; preds = %or.rhs
  %27 = load i64, ptr %x, align 8, !dbg !1960
  %28 = load i64, ptr %x, align 8, !dbg !1961
  %sub = sub i64 %28, 1, !dbg !1961
  %and = and i64 %27, %sub, !dbg !1960
  %eq4 = icmp eq i64 %and, 0, !dbg !1960
  br label %and.phi, !dbg !1960

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq4, %and.rhs ], !dbg !1960
  br label %or.phi, !dbg !1960

or.phi:                                           ; preds = %and.phi, %assert_ok3
  %val5 = phi i1 [ true, %assert_ok3 ], [ %val, %and.phi ], !dbg !1960
  br i1 %val5, label %assert_ok7, label %assert_fail6, !dbg !1960

assert_fail6:                                     ; preds = %or.phi
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1953
  call void %29(ptr @.panic_msg.16, i64 65, ptr @.file.106, i64 25, ptr @.func.20, i64 6, i32 139) #6, !dbg !1953
  unreachable, !dbg !1953

assert_ok7:                                       ; preds = %or.phi
  %le = icmp ule i64 %24, 268435456, !dbg !1953
  br i1 %le, label %assert_ok9, label %assert_fail8, !dbg !1953

assert_fail8:                                     ; preds = %assert_ok7
  %30 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1953
  call void %30(ptr @.panic_msg.17, i64 80, ptr @.file.106, i64 25, ptr @.func.20, i64 6, i32 139) #6, !dbg !1953
  unreachable, !dbg !1953

assert_ok9:                                       ; preds = %assert_ok7
  %31 = call i64 @std.core.mem.allocator.BackedArenaAllocator.acquire(ptr %retparam10, ptr %22, i64 %23, i32 0, i64 %24), !dbg !1953
  %not_err11 = icmp eq i64 %31, 0, !dbg !1953
  %32 = call i1 @llvm.expect.i1(i1 %not_err11, i1 true), !dbg !1953
  br i1 %32, label %after_check13, label %assign_optional12, !dbg !1953

assign_optional12:                                ; preds = %assert_ok9
  store i64 %31, ptr %error_var, align 8, !dbg !1953
  br label %guard_block, !dbg !1953

after_check13:                                    ; preds = %assert_ok9
  br label %noerr_block, !dbg !1953

guard_block:                                      ; preds = %assign_optional12
  %33 = load i64, ptr %error_var, align 8, !dbg !1953
  ret i64 %33, !dbg !1953

noerr_block:                                      ; preds = %after_check13
  %34 = load ptr, ptr %retparam10, align 8, !dbg !1953
  store ptr %34, ptr %data, align 8, !dbg !1953
  %35 = load ptr, ptr %data, align 8, !dbg !1962
  store ptr %35, ptr %dst, align 8
  %36 = load ptr, ptr %pointer, align 8
  store ptr %36, ptr %src, align 8
  %37 = load ptr, ptr %chunk, align 8, !dbg !1963
  %38 = load i64, ptr %37, align 8
  store i64 %38, ptr %len, align 8
  %39 = load ptr, ptr %dst, align 8, !dbg !1964
  %neq14 = icmp ne ptr %39, null, !dbg !1964
  br i1 %neq14, label %assert_ok16, label %assert_fail15, !dbg !1964

assert_fail15:                                    ; preds = %noerr_block
  %40 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1964
  call void %40(ptr @.panic_msg.75, i64 37, ptr @.file.71, i64 6, ptr @.func.20, i64 6, i32 329) #6, !dbg !1964
  unreachable, !dbg !1964

assert_ok16:                                      ; preds = %noerr_block
  %41 = load ptr, ptr %src, align 8, !dbg !1968
  %neq17 = icmp ne ptr %41, null, !dbg !1968
  br i1 %neq17, label %or.phi20, label %or.rhs18, !dbg !1968

or.rhs18:                                         ; preds = %assert_ok16
  %42 = load i64, ptr %len, align 8, !dbg !1969
  %eq19 = icmp eq i64 0, %42, !dbg !1969
  br label %or.phi20, !dbg !1969

or.phi20:                                         ; preds = %or.rhs18, %assert_ok16
  %val21 = phi i1 [ true, %assert_ok16 ], [ %eq19, %or.rhs18 ], !dbg !1969
  br i1 %val21, label %assert_ok23, label %assert_fail22, !dbg !1969

assert_fail22:                                    ; preds = %or.phi20
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1970
  call void %43(ptr @.panic_msg.76, i64 94, ptr @.file.106, i64 25, ptr @.func.20, i64 6, i32 140) #6, !dbg !1970
  unreachable, !dbg !1970

assert_ok23:                                      ; preds = %or.phi20
  %44 = load i64, ptr %len, align 8, !dbg !1971
  %eq24 = icmp eq i64 0, %44, !dbg !1971
  br i1 %eq24, label %or.phi28, label %or.rhs25, !dbg !1971

or.rhs25:                                         ; preds = %assert_ok23
  %45 = load ptr, ptr %dst, align 8, !dbg !1972
  %46 = load i64, ptr %len, align 8, !dbg !1973
  %ptradd_any26 = getelementptr i8, ptr %45, i64 %46, !dbg !1973
  %47 = load ptr, ptr %src, align 8, !dbg !1974
  %le27 = icmp ule ptr %ptradd_any26, %47, !dbg !1972
  br label %or.phi28, !dbg !1972

or.phi28:                                         ; preds = %or.rhs25, %assert_ok23
  %val29 = phi i1 [ true, %assert_ok23 ], [ %le27, %or.rhs25 ], !dbg !1972
  br i1 %val29, label %or.phi33, label %or.rhs30, !dbg !1972

or.rhs30:                                         ; preds = %or.phi28
  %48 = load ptr, ptr %src, align 8, !dbg !1975
  %49 = load i64, ptr %len, align 8, !dbg !1976
  %ptradd_any31 = getelementptr i8, ptr %48, i64 %49, !dbg !1976
  %50 = load ptr, ptr %dst, align 8, !dbg !1977
  %le32 = icmp ule ptr %ptradd_any31, %50, !dbg !1975
  br label %or.phi33, !dbg !1975

or.phi33:                                         ; preds = %or.rhs30, %or.phi28
  %val34 = phi i1 [ true, %or.phi28 ], [ %le32, %or.rhs30 ], !dbg !1975
  br i1 %val34, label %assert_ok36, label %assert_fail35, !dbg !1975

assert_fail35:                                    ; preds = %or.phi33
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1970
  call void %51(ptr @.panic_msg.77, i64 95, ptr @.file.106, i64 25, ptr @.func.20, i64 6, i32 140) #6, !dbg !1970
  unreachable, !dbg !1970

assert_ok36:                                      ; preds = %or.phi33
  %52 = load ptr, ptr %dst, align 8, !dbg !1978
  %53 = load ptr, ptr %src, align 8, !dbg !1979
  %54 = load i64, ptr %len, align 8, !dbg !1980
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %52, ptr align 16 %53, i64 %54, i1 false), !dbg !1981
  %55 = load ptr, ptr %data, align 8, !dbg !1982
  store ptr %55, ptr %0, align 8, !dbg !1982
  ret i64 0, !dbg !1982

panic:                                            ; preds = %entry
  %56 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1927
  call void %56(ptr @.panic_msg, i64 62, ptr @.file.106, i64 25, ptr @.func.20, i64 6, i32 128) #6, !dbg !1927
  unreachable, !dbg !1927
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.BackedArenaAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !1983 {
entry:
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %x = alloca i64, align 8
  %start_mem = alloca ptr, align 8
  %starting_ptr = alloca ptr, align 8
  %aligned_header_start = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %alignment7 = alloca i64, align 8
  %x8 = alloca i64, align 8
  %mem = alloca ptr, align 8
  %ptr19 = alloca ptr, align 8
  %alignment20 = alloca i64, align 8
  %x22 = alloca i64, align 8
  %new_usage = alloca i64, align 8
  %addr = alloca ptr, align 8
  %size38 = alloca i64, align 8
  %chunk_start = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %page = alloca ptr, align 8
  %total_alloc_size = alloca i64, align 8
  %x48 = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %size60 = alloca i64, align 8
  %alignment61 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x67 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %error_var87 = alloca i64, align 8
  %allocator88 = alloca %any, align 8
  %size89 = alloca i64, align 8
  %alignment90 = alloca i64, align 8
  %blockret91 = alloca ptr, align 8
  %x97 = alloca i64, align 8
  %.inlinecache116 = alloca ptr, align 8
  %.cachedtype117 = alloca ptr, align 8
  %retparam126 = alloca ptr, align 8
  %start = alloca ptr, align 8
  %x134 = alloca i64, align 8
  %padded_header_size = alloca i64, align 8
  %x149 = alloca i64, align 8
  %total_alloc_size159 = alloca i64, align 8
  %alloc = alloca ptr, align 8
  %error_var161 = alloca i64, align 8
  %x163 = alloca i64, align 8
  %.inlinecache179 = alloca ptr, align 8
  %.cachedtype180 = alloca ptr, align 8
  %retparam189 = alloca ptr, align 8
  %x197 = alloca i64, align 8
  %x210 = alloca i64, align 8
  %reterr231 = alloca i64, align 8
  store ptr null, ptr %.cachedtype180, align 8, !dbg !1986
  store ptr null, ptr %.cachedtype117, align 8, !dbg !1986
  store ptr null, ptr %.cachedtype, align 8, !dbg !1986
  %5 = icmp eq ptr %1, null, !dbg !1986
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1986
  br i1 %6, label %panic, label %checkok, !dbg !1986

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1987, !DIExpression(), !1988)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !1989, !DIExpression(), !1990)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !1991, !DIExpression(), !1992)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !1993, !DIExpression(), !1994)
  %7 = load i64, ptr %size, align 8, !dbg !1995
  %lt = icmp ult i64 0, %7, !dbg !1995
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1995

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1995
  call void %8(ptr @.panic_msg.101, i64 29, ptr @.file.106, i64 25, ptr @.func.15, i64 7, i32 146) #6, !dbg !1995
  unreachable, !dbg !1995

assert_ok:                                        ; preds = %checkok
  %9 = load i64, ptr %alignment, align 8, !dbg !1997
  %i2nb = icmp eq i64 %9, 0, !dbg !1997
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !1997

or.rhs:                                           ; preds = %assert_ok
  %10 = load i64, ptr %alignment, align 8
  store i64 %10, ptr %x, align 8
  %11 = load i64, ptr %x, align 8, !dbg !1998
  %neq = icmp ne i64 0, %11, !dbg !1998
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1998

and.rhs:                                          ; preds = %or.rhs
  %12 = load i64, ptr %x, align 8, !dbg !2001
  %13 = load i64, ptr %x, align 8, !dbg !2002
  %sub = sub i64 %13, 1, !dbg !2002
  %and = and i64 %12, %sub, !dbg !2001
  %eq = icmp eq i64 %and, 0, !dbg !2001
  br label %and.phi, !dbg !2001

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2001
  br label %or.phi, !dbg !2001

or.phi:                                           ; preds = %and.phi, %assert_ok
  %val1 = phi i1 [ true, %assert_ok ], [ %val, %and.phi ], !dbg !2001
  br i1 %val1, label %assert_ok3, label %assert_fail2, !dbg !2001

assert_fail2:                                     ; preds = %or.phi
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1997
  call void %14(ptr @.panic_msg.16, i64 65, ptr @.file.106, i64 25, ptr @.func.15, i64 7, i32 147) #6, !dbg !1997
  unreachable, !dbg !1997

assert_ok3:                                       ; preds = %or.phi
  %15 = load i64, ptr %alignment, align 8, !dbg !2003
  %le = icmp ule i64 %15, 268435456, !dbg !2003
  br i1 %le, label %assert_ok5, label %assert_fail4, !dbg !2003

assert_fail4:                                     ; preds = %assert_ok3
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2003
  call void %16(ptr @.panic_msg.17, i64 80, ptr @.file.106, i64 25, ptr @.func.15, i64 7, i32 148) #6, !dbg !2003
  unreachable, !dbg !2003

assert_ok5:                                       ; preds = %assert_ok3
  %17 = load i64, ptr %alignment, align 8, !dbg !2004
  %18 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %17) #7, !dbg !2005
  store i64 %18, ptr %alignment, align 8, !dbg !2005
    #dbg_declare(ptr %start_mem, !2006, !DIExpression(), !2007)
  %19 = load ptr, ptr %self, align 8, !dbg !2008
  %ptradd = getelementptr inbounds i8, ptr %19, i64 40, !dbg !2008
  store ptr %ptradd, ptr %start_mem, align 8, !dbg !2008
    #dbg_declare(ptr %starting_ptr, !2009, !DIExpression(), !2010)
  %20 = load ptr, ptr %start_mem, align 8, !dbg !2011
  %21 = load ptr, ptr %self, align 8, !dbg !2012
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 24, !dbg !2012
  %22 = load i64, ptr %ptradd6, align 8, !dbg !2012
  %ptradd_any = getelementptr i8, ptr %20, i64 %22, !dbg !2012
  store ptr %ptradd_any, ptr %starting_ptr, align 8, !dbg !2012
    #dbg_declare(ptr %aligned_header_start, !2013, !DIExpression(), !2014)
  %23 = load ptr, ptr %starting_ptr, align 8
  store ptr %23, ptr %ptr, align 8
  store i64 8, ptr %alignment7, align 8
  %24 = load ptr, ptr %ptr, align 8, !dbg !2015
  %ptrxi = ptrtoint ptr %24 to i64, !dbg !2015
  %25 = load i64, ptr %alignment7, align 8, !dbg !2018
  store i64 %25, ptr %x8, align 8
  %26 = load i64, ptr %x8, align 8, !dbg !2019
  %neq9 = icmp ne i64 0, %26, !dbg !2019
  br i1 %neq9, label %and.rhs10, label %and.phi14, !dbg !2019

and.rhs10:                                        ; preds = %assert_ok5
  %27 = load i64, ptr %x8, align 8, !dbg !2022
  %28 = load i64, ptr %x8, align 8, !dbg !2023
  %sub11 = sub i64 %28, 1, !dbg !2023
  %and12 = and i64 %27, %sub11, !dbg !2022
  %eq13 = icmp eq i64 %and12, 0, !dbg !2022
  br label %and.phi14, !dbg !2022

and.phi14:                                        ; preds = %and.rhs10, %assert_ok5
  %val15 = phi i1 [ false, %assert_ok5 ], [ %eq13, %and.rhs10 ], !dbg !2022
  br i1 %val15, label %assert_ok17, label %assert_fail16, !dbg !2022

assert_fail16:                                    ; preds = %and.phi14
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2021
  call void %29(ptr @.panic_msg.70, i64 51, ptr @.file.71, i64 6, ptr @.func.15, i64 7, i32 290) #6, !dbg !2021
  unreachable, !dbg !2021

assert_ok17:                                      ; preds = %and.phi14
  %30 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %25), !dbg !2024
  %intptr = inttoptr i64 %30 to ptr, !dbg !2024
  store ptr %intptr, ptr %aligned_header_start, align 8, !dbg !2024
    #dbg_declare(ptr %mem, !2025, !DIExpression(), !2026)
  %31 = load ptr, ptr %aligned_header_start, align 8, !dbg !2027
  %ptradd_any18 = getelementptr i8, ptr %31, i64 8, !dbg !2028
  store ptr %ptradd_any18, ptr %mem, align 8, !dbg !2028
  %32 = load i64, ptr %alignment, align 8, !dbg !2029
  %gt = icmp ugt i64 %32, 8, !dbg !2029
  br i1 %gt, label %if.then, label %if.exit, !dbg !2029

if.then:                                          ; preds = %assert_ok17
  %33 = load ptr, ptr %mem, align 8
  store ptr %33, ptr %ptr19, align 8
  %34 = load i64, ptr %alignment, align 8
  store i64 %34, ptr %alignment20, align 8
  %35 = load ptr, ptr %ptr19, align 8, !dbg !2030
  %ptrxi21 = ptrtoint ptr %35 to i64, !dbg !2030
  %36 = load i64, ptr %alignment20, align 8, !dbg !2034
  store i64 %36, ptr %x22, align 8
  %37 = load i64, ptr %x22, align 8, !dbg !2035
  %neq23 = icmp ne i64 0, %37, !dbg !2035
  br i1 %neq23, label %and.rhs24, label %and.phi28, !dbg !2035

and.rhs24:                                        ; preds = %if.then
  %38 = load i64, ptr %x22, align 8, !dbg !2038
  %39 = load i64, ptr %x22, align 8, !dbg !2039
  %sub25 = sub i64 %39, 1, !dbg !2039
  %and26 = and i64 %38, %sub25, !dbg !2038
  %eq27 = icmp eq i64 %and26, 0, !dbg !2038
  br label %and.phi28, !dbg !2038

and.phi28:                                        ; preds = %and.rhs24, %if.then
  %val29 = phi i1 [ false, %if.then ], [ %eq27, %and.rhs24 ], !dbg !2038
  br i1 %val29, label %assert_ok31, label %assert_fail30, !dbg !2038

assert_fail30:                                    ; preds = %and.phi28
  %40 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2037
  call void %40(ptr @.panic_msg.70, i64 51, ptr @.file.71, i64 6, ptr @.func.15, i64 7, i32 290) #6, !dbg !2037
  unreachable, !dbg !2037

assert_ok31:                                      ; preds = %and.phi28
  %41 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi21, i64 %36), !dbg !2040
  %intptr32 = inttoptr i64 %41 to ptr, !dbg !2040
  store ptr %intptr32, ptr %mem, align 8, !dbg !2040
  br label %if.exit, !dbg !2040

if.exit:                                          ; preds = %assert_ok31, %assert_ok17
    #dbg_declare(ptr %new_usage, !2041, !DIExpression(), !2042)
  %42 = load ptr, ptr %mem, align 8, !dbg !2043
  %43 = load ptr, ptr %start_mem, align 8, !dbg !2044
  %44 = ptrtoint ptr %43 to i64, !dbg !2045
  %45 = ptrtoint ptr %42 to i64, !dbg !2045
  %46 = sub i64 %45, %44, !dbg !2045
  %47 = sdiv exact i64 %46, 1, !dbg !2045
  %48 = load i64, ptr %size, align 8, !dbg !2046
  %add = add i64 %47, %48, !dbg !2045
  store i64 %add, ptr %new_usage, align 8, !dbg !2045
  %49 = load i64, ptr %new_usage, align 8, !dbg !2047
  %50 = load ptr, ptr %self, align 8, !dbg !2048
  %ptradd33 = getelementptr inbounds i8, ptr %50, i64 32, !dbg !2048
  %51 = load i64, ptr %ptradd33, align 8, !dbg !2048
  %le34 = icmp ule i64 %49, %51, !dbg !2047
  br i1 %le34, label %if.then35, label %if.exit44, !dbg !2047

if.then35:                                        ; preds = %if.exit
  %52 = load ptr, ptr %starting_ptr, align 8
  store ptr %52, ptr %addr, align 8
  %53 = load i64, ptr %new_usage, align 8, !dbg !2049
  %54 = load ptr, ptr %self, align 8, !dbg !2051
  %ptradd36 = getelementptr inbounds i8, ptr %54, i64 24, !dbg !2051
  %55 = load i64, ptr %ptradd36, align 8, !dbg !2051
  %sub37 = sub i64 %53, %55, !dbg !2049
  store i64 %sub37, ptr %size38, align 8
    #dbg_declare(ptr %chunk_start, !2052, !DIExpression(), !2053)
  %56 = load ptr, ptr %mem, align 8, !dbg !2054
  %ptradd_any39 = getelementptr i8, ptr %56, i64 -8, !dbg !2055
  store ptr %ptradd_any39, ptr %chunk_start, align 8, !dbg !2055
  %57 = load ptr, ptr %chunk_start, align 8, !dbg !2056
  %58 = load i64, ptr %size, align 8, !dbg !2057
  store i64 %58, ptr %57, align 8, !dbg !2057
  %59 = load ptr, ptr %self, align 8, !dbg !2058
  %ptradd40 = getelementptr inbounds i8, ptr %59, i64 24, !dbg !2058
  %60 = load i64, ptr %new_usage, align 8, !dbg !2059
  store i64 %60, ptr %ptradd40, align 8, !dbg !2059
  %61 = load i32, ptr %init_type, align 4, !dbg !2060
  %eq41 = icmp eq i32 %61, 1, !dbg !2060
  br i1 %eq41, label %if.then42, label %if.exit43, !dbg !2060

if.then42:                                        ; preds = %if.then35
  %62 = load ptr, ptr %mem, align 8
  store ptr %62, ptr %dst, align 8
  %63 = load i64, ptr %size, align 8
  store i64 %63, ptr %len, align 8
  %64 = load ptr, ptr %dst, align 8, !dbg !2061
  %65 = load i64, ptr %len, align 8, !dbg !2064
  call void @llvm.memset.p0.i64(ptr align 16 %64, i8 0, i64 %65, i1 false), !dbg !2065
  br label %if.exit43, !dbg !2065

if.exit43:                                        ; preds = %if.then42, %if.then35
  %66 = load ptr, ptr %mem, align 8, !dbg !2066
  store ptr %66, ptr %0, align 8, !dbg !2066
  ret i64 0, !dbg !2066

if.exit44:                                        ; preds = %if.exit
    #dbg_declare(ptr %page, !2067, !DIExpression(), !2068)
  store ptr null, ptr %page, align 8, !dbg !2068
  %67 = load i64, ptr %alignment, align 8, !dbg !2069
  %lt45 = icmp ult i64 16, %67, !dbg !2069
  br i1 %lt45, label %if.then46, label %if.else148, !dbg !2069

if.then46:                                        ; preds = %if.exit44
    #dbg_declare(ptr %total_alloc_size, !2070, !DIExpression(), !2072)
  %68 = load i64, ptr %size, align 8, !dbg !2073
  %add47 = add i64 40, %68, !dbg !2074
  %69 = load i64, ptr %alignment, align 8, !dbg !2075
  store i64 %69, ptr %x48, align 8
  %70 = load i64, ptr %x48, align 8, !dbg !2076
  %neq49 = icmp ne i64 0, %70, !dbg !2076
  br i1 %neq49, label %and.rhs50, label %and.phi54, !dbg !2076

and.rhs50:                                        ; preds = %if.then46
  %71 = load i64, ptr %x48, align 8, !dbg !2079
  %72 = load i64, ptr %x48, align 8, !dbg !2080
  %sub51 = sub i64 %72, 1, !dbg !2080
  %and52 = and i64 %71, %sub51, !dbg !2079
  %eq53 = icmp eq i64 %and52, 0, !dbg !2079
  br label %and.phi54, !dbg !2079

and.phi54:                                        ; preds = %and.rhs50, %if.then46
  %val55 = phi i1 [ false, %if.then46 ], [ %eq53, %and.rhs50 ], !dbg !2079
  br i1 %val55, label %assert_ok57, label %assert_fail56, !dbg !2079

assert_fail56:                                    ; preds = %and.phi54
  %73 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2078
  call void %73(ptr @.panic_msg.70, i64 51, ptr @.file.106, i64 25, ptr @.func.15, i64 7, i32 181) #6, !dbg !2078
  unreachable, !dbg !2078

assert_ok57:                                      ; preds = %and.phi54
  %74 = call i64 @std.core.mem.aligned_offset(i64 %add47, i64 %69), !dbg !2078
  store i64 %74, ptr %total_alloc_size, align 8, !dbg !2078
  %75 = load i32, ptr %init_type, align 4, !dbg !2081
  %eq58 = icmp eq i32 %75, 1, !dbg !2081
  br i1 %eq58, label %if.then59, label %if.else, !dbg !2081

if.then59:                                        ; preds = %assert_ok57
  %76 = load ptr, ptr %self, align 8, !dbg !2082
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %76, i32 16, i1 false)
  %77 = load i64, ptr %total_alloc_size, align 8
  store i64 %77, ptr %size60, align 8
  %78 = load i64, ptr %alignment, align 8
  store i64 %78, ptr %alignment61, align 8
  %79 = load i64, ptr %size60, align 8, !dbg !2084
  %i2nb62 = icmp eq i64 %79, 0, !dbg !2084
  br i1 %i2nb62, label %if.then63, label %if.exit64, !dbg !2084

if.then63:                                        ; preds = %if.then59
  store ptr null, ptr %blockret, align 8, !dbg !2087
  br label %expr_block.exit, !dbg !2087

if.exit64:                                        ; preds = %if.then59
  %80 = load i64, ptr %size60, align 8, !dbg !2088
  %81 = load i64, ptr %alignment61, align 8, !dbg !2089
  %i2nb65 = icmp eq i64 %81, 0, !dbg !2090
  br i1 %i2nb65, label %or.phi75, label %or.rhs66, !dbg !2090

or.rhs66:                                         ; preds = %if.exit64
  store i64 %81, ptr %x67, align 8
  %82 = load i64, ptr %x67, align 8, !dbg !2091
  %neq68 = icmp ne i64 0, %82, !dbg !2091
  br i1 %neq68, label %and.rhs69, label %and.phi73, !dbg !2091

and.rhs69:                                        ; preds = %or.rhs66
  %83 = load i64, ptr %x67, align 8, !dbg !2094
  %84 = load i64, ptr %x67, align 8, !dbg !2095
  %sub70 = sub i64 %84, 1, !dbg !2095
  %and71 = and i64 %83, %sub70, !dbg !2094
  %eq72 = icmp eq i64 %and71, 0, !dbg !2094
  br label %and.phi73, !dbg !2094

and.phi73:                                        ; preds = %and.rhs69, %or.rhs66
  %val74 = phi i1 [ false, %or.rhs66 ], [ %eq72, %and.rhs69 ], !dbg !2094
  br label %or.phi75, !dbg !2094

or.phi75:                                         ; preds = %and.phi73, %if.exit64
  %val76 = phi i1 [ true, %if.exit64 ], [ %val74, %and.phi73 ], !dbg !2094
  br i1 %val76, label %assert_ok78, label %assert_fail77, !dbg !2094

assert_fail77:                                    ; preds = %or.phi75
  %85 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2096
  call void %85(ptr @.panic_msg.16, i64 65, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 140) #6, !dbg !2096
  unreachable, !dbg !2096

assert_ok78:                                      ; preds = %or.phi75
  %le79 = icmp ule i64 %81, 268435456, !dbg !2096
  br i1 %le79, label %assert_ok81, label %assert_fail80, !dbg !2096

assert_fail80:                                    ; preds = %assert_ok78
  %86 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2096
  call void %86(ptr @.panic_msg.17, i64 80, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 140) #6, !dbg !2096
  unreachable, !dbg !2096

assert_ok81:                                      ; preds = %assert_ok78
  %lt82 = icmp ult i64 0, %80, !dbg !2096
  br i1 %lt82, label %assert_ok84, label %assert_fail83, !dbg !2096

assert_fail83:                                    ; preds = %assert_ok81
  %87 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2096
  call void %87(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 140) #6, !dbg !2096
  unreachable, !dbg !2096

assert_ok84:                                      ; preds = %assert_ok81
  %ptradd85 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2096
  %88 = load i64, ptr %ptradd85, align 8, !dbg !2096
  %89 = inttoptr i64 %88 to ptr, !dbg !2096
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1986
  %90 = icmp eq ptr %89, %type, !dbg !1986
  br i1 %90, label %cache_hit, label %cache_miss, !dbg !1986

cache_miss:                                       ; preds = %assert_ok84
  %ptradd86 = getelementptr inbounds i8, ptr %89, i64 16, !dbg !1986
  %91 = load ptr, ptr %ptradd86, align 8, !dbg !1986
  %92 = call ptr @.dyn_search(ptr %91, ptr @"$sel.acquire"), !dbg !1986
  store ptr %92, ptr %.inlinecache, align 8, !dbg !1986
  store ptr %89, ptr %.cachedtype, align 8, !dbg !1986
  br label %93, !dbg !1986

cache_hit:                                        ; preds = %assert_ok84
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1986
  br label %93, !dbg !1986

93:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %92, %cache_miss ], !dbg !1986
  %94 = icmp eq ptr %fn_phi, null, !dbg !1986
  br i1 %94, label %missing_function, label %match, !dbg !1986

missing_function:                                 ; preds = %93
  %95 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1986
  call void %95(ptr @.panic_msg.19, i64 44, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 140) #6, !dbg !1986
  unreachable, !dbg !1986

match:                                            ; preds = %93
  %96 = load ptr, ptr %allocator, align 8
  %97 = call i64 %fn_phi(ptr %retparam, ptr %96, i64 %80, i32 1, i64 %81), !dbg !2096
  %not_err = icmp eq i64 %97, 0, !dbg !2096
  %98 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2096
  br i1 %98, label %after_check, label %assign_optional, !dbg !2096

assign_optional:                                  ; preds = %match
  store i64 %97, ptr %error_var, align 8, !dbg !2096
  br label %guard_block, !dbg !2096

after_check:                                      ; preds = %match
  %99 = load ptr, ptr %retparam, align 8, !dbg !2096
  store ptr %99, ptr %blockret, align 8, !dbg !2096
  br label %expr_block.exit, !dbg !2096

expr_block.exit:                                  ; preds = %after_check, %if.then63
  br label %noerr_block, !dbg !2096

guard_block:                                      ; preds = %assign_optional
  %100 = load i64, ptr %error_var, align 8, !dbg !2096
  ret i64 %100, !dbg !2096

noerr_block:                                      ; preds = %expr_block.exit
  %101 = load ptr, ptr %blockret, align 8, !dbg !2096
  store ptr %101, ptr %mem, align 8, !dbg !2096
  br label %if.exit133, !dbg !2096

if.else:                                          ; preds = %assert_ok57
  %102 = load ptr, ptr %self, align 8, !dbg !2097
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator88, ptr align 8 %102, i32 16, i1 false)
  %103 = load i64, ptr %total_alloc_size, align 8
  store i64 %103, ptr %size89, align 8
  %104 = load i64, ptr %alignment, align 8
  store i64 %104, ptr %alignment90, align 8
  %105 = load i64, ptr %size89, align 8, !dbg !2099
  %i2nb92 = icmp eq i64 %105, 0, !dbg !2099
  br i1 %i2nb92, label %if.then93, label %if.exit94, !dbg !2099

if.then93:                                        ; preds = %if.else
  store ptr null, ptr %blockret91, align 8, !dbg !2102
  br label %expr_block.exit130, !dbg !2102

if.exit94:                                        ; preds = %if.else
  %106 = load i64, ptr %size89, align 8, !dbg !2103
  %107 = load i64, ptr %alignment90, align 8, !dbg !2104
  %i2nb95 = icmp eq i64 %107, 0, !dbg !2105
  br i1 %i2nb95, label %or.phi105, label %or.rhs96, !dbg !2105

or.rhs96:                                         ; preds = %if.exit94
  store i64 %107, ptr %x97, align 8
  %108 = load i64, ptr %x97, align 8, !dbg !2106
  %neq98 = icmp ne i64 0, %108, !dbg !2106
  br i1 %neq98, label %and.rhs99, label %and.phi103, !dbg !2106

and.rhs99:                                        ; preds = %or.rhs96
  %109 = load i64, ptr %x97, align 8, !dbg !2109
  %110 = load i64, ptr %x97, align 8, !dbg !2110
  %sub100 = sub i64 %110, 1, !dbg !2110
  %and101 = and i64 %109, %sub100, !dbg !2109
  %eq102 = icmp eq i64 %and101, 0, !dbg !2109
  br label %and.phi103, !dbg !2109

and.phi103:                                       ; preds = %and.rhs99, %or.rhs96
  %val104 = phi i1 [ false, %or.rhs96 ], [ %eq102, %and.rhs99 ], !dbg !2109
  br label %or.phi105, !dbg !2109

or.phi105:                                        ; preds = %and.phi103, %if.exit94
  %val106 = phi i1 [ true, %if.exit94 ], [ %val104, %and.phi103 ], !dbg !2109
  br i1 %val106, label %assert_ok108, label %assert_fail107, !dbg !2109

assert_fail107:                                   ; preds = %or.phi105
  %111 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2111
  call void %111(ptr @.panic_msg.16, i64 65, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 133) #6, !dbg !2111
  unreachable, !dbg !2111

assert_ok108:                                     ; preds = %or.phi105
  %le109 = icmp ule i64 %107, 268435456, !dbg !2111
  br i1 %le109, label %assert_ok111, label %assert_fail110, !dbg !2111

assert_fail110:                                   ; preds = %assert_ok108
  %112 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2111
  call void %112(ptr @.panic_msg.17, i64 80, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 133) #6, !dbg !2111
  unreachable, !dbg !2111

assert_ok111:                                     ; preds = %assert_ok108
  %lt112 = icmp ult i64 0, %106, !dbg !2111
  br i1 %lt112, label %assert_ok114, label %assert_fail113, !dbg !2111

assert_fail113:                                   ; preds = %assert_ok111
  %113 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2111
  call void %113(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 133) #6, !dbg !2111
  unreachable, !dbg !2111

assert_ok114:                                     ; preds = %assert_ok111
  %ptradd115 = getelementptr inbounds i8, ptr %allocator88, i64 8, !dbg !2111
  %114 = load i64, ptr %ptradd115, align 8, !dbg !2111
  %115 = inttoptr i64 %114 to ptr, !dbg !2111
  %type118 = load ptr, ptr %.cachedtype117, align 8, !dbg !1986
  %116 = icmp eq ptr %115, %type118, !dbg !1986
  br i1 %116, label %cache_hit121, label %cache_miss119, !dbg !1986

cache_miss119:                                    ; preds = %assert_ok114
  %ptradd120 = getelementptr inbounds i8, ptr %115, i64 16, !dbg !1986
  %117 = load ptr, ptr %ptradd120, align 8, !dbg !1986
  %118 = call ptr @.dyn_search(ptr %117, ptr @"$sel.acquire"), !dbg !1986
  store ptr %118, ptr %.inlinecache116, align 8, !dbg !1986
  store ptr %115, ptr %.cachedtype117, align 8, !dbg !1986
  br label %119, !dbg !1986

cache_hit121:                                     ; preds = %assert_ok114
  %cache_hit_fn122 = load ptr, ptr %.inlinecache116, align 8, !dbg !1986
  br label %119, !dbg !1986

119:                                              ; preds = %cache_hit121, %cache_miss119
  %fn_phi123 = phi ptr [ %cache_hit_fn122, %cache_hit121 ], [ %118, %cache_miss119 ], !dbg !1986
  %120 = icmp eq ptr %fn_phi123, null, !dbg !1986
  br i1 %120, label %missing_function124, label %match125, !dbg !1986

missing_function124:                              ; preds = %119
  %121 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1986
  call void %121(ptr @.panic_msg.19, i64 44, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 133) #6, !dbg !1986
  unreachable, !dbg !1986

match125:                                         ; preds = %119
  %122 = load ptr, ptr %allocator88, align 8
  %123 = call i64 %fn_phi123(ptr %retparam126, ptr %122, i64 %106, i32 0, i64 %107), !dbg !2111
  %not_err127 = icmp eq i64 %123, 0, !dbg !2111
  %124 = call i1 @llvm.expect.i1(i1 %not_err127, i1 true), !dbg !2111
  br i1 %124, label %after_check129, label %assign_optional128, !dbg !2111

assign_optional128:                               ; preds = %match125
  store i64 %123, ptr %error_var87, align 8, !dbg !2111
  br label %guard_block131, !dbg !2111

after_check129:                                   ; preds = %match125
  %125 = load ptr, ptr %retparam126, align 8, !dbg !2111
  store ptr %125, ptr %blockret91, align 8, !dbg !2111
  br label %expr_block.exit130, !dbg !2111

expr_block.exit130:                               ; preds = %after_check129, %if.then93
  br label %noerr_block132, !dbg !2111

guard_block131:                                   ; preds = %assign_optional128
  %126 = load i64, ptr %error_var87, align 8, !dbg !2111
  ret i64 %126, !dbg !2111

noerr_block132:                                   ; preds = %expr_block.exit130
  %127 = load ptr, ptr %blockret91, align 8, !dbg !2111
  store ptr %127, ptr %mem, align 8, !dbg !2111
  br label %if.exit133, !dbg !2111

if.exit133:                                       ; preds = %noerr_block132, %noerr_block
    #dbg_declare(ptr %start, !2112, !DIExpression(), !2113)
  %128 = load ptr, ptr %mem, align 8, !dbg !2114
  store ptr %128, ptr %start, align 8, !dbg !2114
  %129 = load ptr, ptr %mem, align 8, !dbg !2115
  %130 = load i64, ptr %alignment, align 8, !dbg !2116
  store i64 %130, ptr %x134, align 8
  %131 = load i64, ptr %x134, align 8, !dbg !2117
  %neq135 = icmp ne i64 0, %131, !dbg !2117
  br i1 %neq135, label %and.rhs136, label %and.phi140, !dbg !2117

and.rhs136:                                       ; preds = %if.exit133
  %132 = load i64, ptr %x134, align 8, !dbg !2120
  %133 = load i64, ptr %x134, align 8, !dbg !2121
  %sub137 = sub i64 %133, 1, !dbg !2121
  %and138 = and i64 %132, %sub137, !dbg !2120
  %eq139 = icmp eq i64 %and138, 0, !dbg !2120
  br label %and.phi140, !dbg !2120

and.phi140:                                       ; preds = %and.rhs136, %if.exit133
  %val141 = phi i1 [ false, %if.exit133 ], [ %eq139, %and.rhs136 ], !dbg !2120
  br i1 %val141, label %assert_ok143, label %assert_fail142, !dbg !2120

assert_fail142:                                   ; preds = %and.phi140
  %134 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2119
  call void %134(ptr @.panic_msg.70, i64 51, ptr @.file.106, i64 25, ptr @.func.15, i64 7, i32 191) #6, !dbg !2119
  unreachable, !dbg !2119

assert_ok143:                                     ; preds = %and.phi140
  %135 = call i64 @std.core.mem.aligned_offset(i64 40, i64 %130), !dbg !2119
  %ptradd_any144 = getelementptr i8, ptr %129, i64 %135, !dbg !2115
  store ptr %ptradd_any144, ptr %mem, align 8, !dbg !2115
  %136 = load ptr, ptr %mem, align 8, !dbg !2122
  %ptradd_any145 = getelementptr i8, ptr %136, i64 -40, !dbg !2123
  store ptr %ptradd_any145, ptr %page, align 8, !dbg !2123
  %137 = load ptr, ptr %page, align 8, !dbg !2124
  %ptradd146 = getelementptr inbounds i8, ptr %137, i64 8, !dbg !2124
  %138 = load ptr, ptr %start, align 8, !dbg !2125
  store ptr %138, ptr %ptradd146, align 8, !dbg !2125
  %139 = load ptr, ptr %page, align 8, !dbg !2126
  %ptradd147 = getelementptr inbounds i8, ptr %139, i64 24, !dbg !2126
  %140 = load i64, ptr %size, align 8, !dbg !2127
  %or = or i64 %140, -9223372036854775808, !dbg !2127
  store i64 %or, ptr %ptradd147, align 8, !dbg !2127
  br label %if.exit224, !dbg !2127

if.else148:                                       ; preds = %if.exit44
    #dbg_declare(ptr %padded_header_size, !2128, !DIExpression(), !2130)
  store i64 16, ptr %x149, align 8
  %141 = load i64, ptr %x149, align 8, !dbg !2131
  %neq150 = icmp ne i64 0, %141, !dbg !2131
  br i1 %neq150, label %and.rhs151, label %and.phi155, !dbg !2131

and.rhs151:                                       ; preds = %if.else148
  %142 = load i64, ptr %x149, align 8, !dbg !2134
  %143 = load i64, ptr %x149, align 8, !dbg !2135
  %sub152 = sub i64 %143, 1, !dbg !2135
  %and153 = and i64 %142, %sub152, !dbg !2134
  %eq154 = icmp eq i64 %and153, 0, !dbg !2134
  br label %and.phi155, !dbg !2134

and.phi155:                                       ; preds = %and.rhs151, %if.else148
  %val156 = phi i1 [ false, %if.else148 ], [ %eq154, %and.rhs151 ], !dbg !2134
  br i1 %val156, label %assert_ok158, label %assert_fail157, !dbg !2134

assert_fail157:                                   ; preds = %and.phi155
  %144 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2133
  call void %144(ptr @.panic_msg.70, i64 51, ptr @.file.106, i64 25, ptr @.func.15, i64 7, i32 199) #6, !dbg !2133
  unreachable, !dbg !2133

assert_ok158:                                     ; preds = %and.phi155
  %145 = call i64 @std.core.mem.aligned_offset(i64 40, i64 16), !dbg !2133
  store i64 %145, ptr %padded_header_size, align 8, !dbg !2133
    #dbg_declare(ptr %total_alloc_size159, !2136, !DIExpression(), !2137)
  %146 = load i64, ptr %padded_header_size, align 8, !dbg !2138
  %147 = load i64, ptr %size, align 8, !dbg !2139
  %add160 = add i64 %146, %147, !dbg !2138
  store i64 %add160, ptr %total_alloc_size159, align 8, !dbg !2138
    #dbg_declare(ptr %alloc, !2140, !DIExpression(), !2141)
  %148 = load ptr, ptr %self, align 8, !dbg !2142
  %149 = load i64, ptr %total_alloc_size159, align 8, !dbg !2143
  %150 = load i32, ptr %init_type, align 4, !dbg !2144
  br i1 true, label %or.phi171, label %or.rhs162, !dbg !2145

or.rhs162:                                        ; preds = %assert_ok158
  store i64 0, ptr %x163, align 8
  %151 = load i64, ptr %x163, align 8, !dbg !2146
  %neq164 = icmp ne i64 0, %151, !dbg !2146
  br i1 %neq164, label %and.rhs165, label %and.phi169, !dbg !2146

and.rhs165:                                       ; preds = %or.rhs162
  %152 = load i64, ptr %x163, align 8, !dbg !2149
  %153 = load i64, ptr %x163, align 8, !dbg !2150
  %sub166 = sub i64 %153, 1, !dbg !2150
  %and167 = and i64 %152, %sub166, !dbg !2149
  %eq168 = icmp eq i64 %and167, 0, !dbg !2149
  br label %and.phi169, !dbg !2149

and.phi169:                                       ; preds = %and.rhs165, %or.rhs162
  %val170 = phi i1 [ false, %or.rhs162 ], [ %eq168, %and.rhs165 ], !dbg !2149
  br label %or.phi171, !dbg !2149

or.phi171:                                        ; preds = %and.phi169, %assert_ok158
  %val172 = phi i1 [ true, %assert_ok158 ], [ %val170, %and.phi169 ], !dbg !2149
  br i1 %val172, label %assert_ok174, label %assert_fail173, !dbg !2149

assert_fail173:                                   ; preds = %or.phi171
  %154 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2142
  call void %154(ptr @.panic_msg.16, i64 65, ptr @.file.106, i64 25, ptr @.func.15, i64 7, i32 201) #6, !dbg !2142
  unreachable, !dbg !2142

assert_ok174:                                     ; preds = %or.phi171
  %lt175 = icmp ult i64 0, %149, !dbg !2142
  br i1 %lt175, label %assert_ok177, label %assert_fail176, !dbg !2142

assert_fail176:                                   ; preds = %assert_ok174
  %155 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2142
  call void %155(ptr @.panic_msg.18, i64 59, ptr @.file.106, i64 25, ptr @.func.15, i64 7, i32 201) #6, !dbg !2142
  unreachable, !dbg !2142

assert_ok177:                                     ; preds = %assert_ok174
  %ptradd178 = getelementptr inbounds i8, ptr %148, i64 8, !dbg !2142
  %156 = load i64, ptr %ptradd178, align 8, !dbg !2142
  %157 = inttoptr i64 %156 to ptr, !dbg !2142
  %type181 = load ptr, ptr %.cachedtype180, align 8, !dbg !1986
  %158 = icmp eq ptr %157, %type181, !dbg !1986
  br i1 %158, label %cache_hit184, label %cache_miss182, !dbg !1986

cache_miss182:                                    ; preds = %assert_ok177
  %ptradd183 = getelementptr inbounds i8, ptr %157, i64 16, !dbg !1986
  %159 = load ptr, ptr %ptradd183, align 8, !dbg !1986
  %160 = call ptr @.dyn_search(ptr %159, ptr @"$sel.acquire"), !dbg !1986
  store ptr %160, ptr %.inlinecache179, align 8, !dbg !1986
  store ptr %157, ptr %.cachedtype180, align 8, !dbg !1986
  br label %161, !dbg !1986

cache_hit184:                                     ; preds = %assert_ok177
  %cache_hit_fn185 = load ptr, ptr %.inlinecache179, align 8, !dbg !1986
  br label %161, !dbg !1986

161:                                              ; preds = %cache_hit184, %cache_miss182
  %fn_phi186 = phi ptr [ %cache_hit_fn185, %cache_hit184 ], [ %160, %cache_miss182 ], !dbg !1986
  %162 = icmp eq ptr %fn_phi186, null, !dbg !1986
  br i1 %162, label %missing_function187, label %match188, !dbg !1986

missing_function187:                              ; preds = %161
  %163 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1986
  call void %163(ptr @.panic_msg.19, i64 44, ptr @.file.106, i64 25, ptr @.func.15, i64 7, i32 201) #6, !dbg !1986
  unreachable, !dbg !1986

match188:                                         ; preds = %161
  %164 = load ptr, ptr %148, align 8
  %165 = call i64 %fn_phi186(ptr %retparam189, ptr %164, i64 %149, i32 %150, i64 0), !dbg !2142
  %not_err190 = icmp eq i64 %165, 0, !dbg !2142
  %166 = call i1 @llvm.expect.i1(i1 %not_err190, i1 true), !dbg !2142
  br i1 %166, label %after_check192, label %assign_optional191, !dbg !2142

assign_optional191:                               ; preds = %match188
  store i64 %165, ptr %error_var161, align 8, !dbg !2142
  br label %guard_block193, !dbg !2142

after_check192:                                   ; preds = %match188
  br label %noerr_block194, !dbg !2142

guard_block193:                                   ; preds = %assign_optional191
  %167 = load i64, ptr %error_var161, align 8, !dbg !2142
  ret i64 %167, !dbg !2142

noerr_block194:                                   ; preds = %after_check192
  %168 = load ptr, ptr %retparam189, align 8, !dbg !2142
  store ptr %168, ptr %alloc, align 8, !dbg !2142
  %169 = load ptr, ptr %alloc, align 8, !dbg !2151
  %170 = load i64, ptr %padded_header_size, align 8, !dbg !2152
  %sub195 = sub i64 %170, 40, !dbg !2151
  %ptradd_any196 = getelementptr i8, ptr %169, i64 %sub195, !dbg !2151
  store ptr %ptradd_any196, ptr %page, align 8, !dbg !2151
  %171 = load ptr, ptr %page, align 8, !dbg !2153
  store i64 8, ptr %x197, align 8
  %172 = load i64, ptr %x197, align 8, !dbg !2154
  %neq198 = icmp ne i64 0, %172, !dbg !2154
  br i1 %neq198, label %and.rhs199, label %and.phi203, !dbg !2154

and.rhs199:                                       ; preds = %noerr_block194
  %173 = load i64, ptr %x197, align 8, !dbg !2157
  %174 = load i64, ptr %x197, align 8, !dbg !2158
  %sub200 = sub i64 %174, 1, !dbg !2158
  %and201 = and i64 %173, %sub200, !dbg !2157
  %eq202 = icmp eq i64 %and201, 0, !dbg !2157
  br label %and.phi203, !dbg !2157

and.phi203:                                       ; preds = %and.rhs199, %noerr_block194
  %val204 = phi i1 [ false, %noerr_block194 ], [ %eq202, %and.rhs199 ], !dbg !2157
  br i1 %val204, label %assert_ok206, label %assert_fail205, !dbg !2157

assert_fail205:                                   ; preds = %and.phi203
  %175 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2156
  call void %175(ptr @.panic_msg.70, i64 51, ptr @.file.106, i64 25, ptr @.func.15, i64 7, i32 205) #6, !dbg !2156
  unreachable, !dbg !2156

assert_ok206:                                     ; preds = %and.phi203
  %176 = call i8 @std.core.mem.ptr_is_aligned(ptr %171, i64 8) #7, !dbg !2156
  %177 = trunc i8 %176 to i1, !dbg !2156
  br i1 %177, label %assert_ok208, label %assert_fail207, !dbg !2156

assert_fail207:                                   ; preds = %assert_ok206
  %178 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2156
  call void %178(ptr @.panic_msg.117, i64 72, ptr @.file.106, i64 25, ptr @.func.15, i64 7, i32 205) #6, !dbg !2156
  unreachable, !dbg !2156

assert_ok208:                                     ; preds = %assert_ok206
  %179 = load ptr, ptr %page, align 8, !dbg !2159
  %ptradd209 = getelementptr inbounds i8, ptr %179, i64 40, !dbg !2159
  store i64 16, ptr %x210, align 8
  %180 = load i64, ptr %x210, align 8, !dbg !2160
  %neq211 = icmp ne i64 0, %180, !dbg !2160
  br i1 %neq211, label %and.rhs212, label %and.phi216, !dbg !2160

and.rhs212:                                       ; preds = %assert_ok208
  %181 = load i64, ptr %x210, align 8, !dbg !2163
  %182 = load i64, ptr %x210, align 8, !dbg !2164
  %sub213 = sub i64 %182, 1, !dbg !2164
  %and214 = and i64 %181, %sub213, !dbg !2163
  %eq215 = icmp eq i64 %and214, 0, !dbg !2163
  br label %and.phi216, !dbg !2163

and.phi216:                                       ; preds = %and.rhs212, %assert_ok208
  %val217 = phi i1 [ false, %assert_ok208 ], [ %eq215, %and.rhs212 ], !dbg !2163
  br i1 %val217, label %assert_ok219, label %assert_fail218, !dbg !2163

assert_fail218:                                   ; preds = %and.phi216
  %183 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2162
  call void %183(ptr @.panic_msg.70, i64 51, ptr @.file.106, i64 25, ptr @.func.15, i64 7, i32 206) #6, !dbg !2162
  unreachable, !dbg !2162

assert_ok219:                                     ; preds = %and.phi216
  %184 = call i8 @std.core.mem.ptr_is_aligned(ptr %ptradd209, i64 16) #7, !dbg !2162
  %185 = trunc i8 %184 to i1, !dbg !2162
  br i1 %185, label %assert_ok221, label %assert_fail220, !dbg !2162

assert_fail220:                                   ; preds = %assert_ok219
  %186 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2162
  call void %186(ptr @.panic_msg.118, i64 79, ptr @.file.106, i64 25, ptr @.func.15, i64 7, i32 206) #6, !dbg !2162
  unreachable, !dbg !2162

assert_ok221:                                     ; preds = %assert_ok219
  %187 = load ptr, ptr %page, align 8, !dbg !2165
  %ptradd222 = getelementptr inbounds i8, ptr %187, i64 8, !dbg !2165
  %188 = load ptr, ptr %alloc, align 8, !dbg !2166
  store ptr %188, ptr %ptradd222, align 8, !dbg !2166
  %189 = load ptr, ptr %page, align 8, !dbg !2167
  %ptradd223 = getelementptr inbounds i8, ptr %189, i64 24, !dbg !2167
  %190 = load i64, ptr %size, align 8, !dbg !2168
  store i64 %190, ptr %ptradd223, align 8, !dbg !2168
  br label %if.exit224, !dbg !2168

if.exit224:                                       ; preds = %assert_ok221, %assert_ok143
  %191 = load ptr, ptr %page, align 8, !dbg !2169
  %ptradd225 = getelementptr inbounds i8, ptr %191, i64 32, !dbg !2169
  store i64 -1, ptr %ptradd225, align 8, !dbg !2170
  %192 = load ptr, ptr %page, align 8, !dbg !2171
  %ptradd226 = getelementptr inbounds i8, ptr %192, i64 16, !dbg !2171
  %193 = load ptr, ptr %self, align 8, !dbg !2172
  %ptradd227 = getelementptr inbounds i8, ptr %193, i64 24, !dbg !2172
  %194 = load i64, ptr %ptradd227, align 8, !dbg !2172
  %add228 = add i64 %194, 1, !dbg !2172
  store i64 %add228, ptr %ptradd227, align 8, !dbg !2172
  store i64 %add228, ptr %ptradd226, align 8, !dbg !2172
  %195 = load ptr, ptr %page, align 8, !dbg !2173
  %196 = load ptr, ptr %self, align 8, !dbg !2174
  %ptradd229 = getelementptr inbounds i8, ptr %196, i64 16, !dbg !2174
  %197 = load ptr, ptr %ptradd229, align 8, !dbg !2174
  store ptr %197, ptr %195, align 8, !dbg !2174
  %198 = load ptr, ptr %self, align 8, !dbg !2175
  %ptradd230 = getelementptr inbounds i8, ptr %198, i64 16, !dbg !2175
  %199 = load ptr, ptr %page, align 8, !dbg !2176
  store ptr %199, ptr %ptradd230, align 8, !dbg !2176
  %200 = load ptr, ptr %page, align 8, !dbg !2177
  %ptradd232 = getelementptr inbounds i8, ptr %200, i64 40, !dbg !2177
  store ptr %ptradd232, ptr %0, align 8, !dbg !2178
  ret i64 0, !dbg !2178

panic:                                            ; preds = %entry
  %201 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1988
  call void %201(ptr @.panic_msg, i64 62, ptr @.file.106, i64 25, ptr @.func.15, i64 7, i32 150) #6, !dbg !1988
  unreachable, !dbg !1988
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.new_backed_allocator(ptr %0, i64 %1, i64 %2, ptr %3) #0 comdat !dbg !2179 {
entry:
  %size = alloca i64, align 8
  %allocator = alloca %any, align 8
  %temp = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %padding = alloca i64, align 8
  %allocator2 = alloca %any, align 8
  %size3 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %1, ptr %size, align 8
    #dbg_declare(ptr %size, !2183, !DIExpression(), !2184)
  store i64 %2, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !2185, !DIExpression(), !2186)
  %4 = load i64, ptr %size, align 8, !dbg !2187
  %le = icmp ule i64 16, %4, !dbg !2187
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !2187

assert_fail:                                      ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2187
  call void %5(ptr @.panic_msg.105, i64 31, ptr @.file.106, i64 25, ptr @.func.107, i64 20, i32 44) #6, !dbg !2187
  unreachable, !dbg !2187

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %temp, !2189, !DIExpression(), !2190)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %6 = load i64, ptr %size, align 8
  store i64 %6, ptr %padding, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator2, ptr align 8 %allocator1, i32 16, i1 false)
  %7 = load i64, ptr %padding, align 8, !dbg !2191
  %add = add i64 40, %7, !dbg !2194
  store i64 %add, ptr %size3, align 8
  %8 = load i64, ptr %size3, align 8, !dbg !2195
  %i2nb = icmp eq i64 %8, 0, !dbg !2195
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2195

if.then:                                          ; preds = %assert_ok
  store ptr null, ptr %blockret, align 8, !dbg !2198
  br label %expr_block.exit, !dbg !2198

if.exit:                                          ; preds = %assert_ok
  %9 = load i64, ptr %size3, align 8, !dbg !2199
  br i1 true, label %or.phi, label %or.rhs, !dbg !2200

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %10 = load i64, ptr %x, align 8, !dbg !2201
  %neq = icmp ne i64 0, %10, !dbg !2201
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !2201

and.rhs:                                          ; preds = %or.rhs
  %11 = load i64, ptr %x, align 8, !dbg !2204
  %12 = load i64, ptr %x, align 8, !dbg !2205
  %sub = sub i64 %12, 1, !dbg !2205
  %and = and i64 %11, %sub, !dbg !2204
  %eq = icmp eq i64 %and, 0, !dbg !2204
  br label %and.phi, !dbg !2204

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2204
  br label %or.phi, !dbg !2204

or.phi:                                           ; preds = %and.phi, %if.exit
  %val4 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !2204
  br i1 %val4, label %assert_ok6, label %assert_fail5, !dbg !2204

assert_fail5:                                     ; preds = %or.phi
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2206
  call void %13(ptr @.panic_msg.16, i64 65, ptr @.file.73, i64 16, ptr @.func.107, i64 20, i32 85) #6, !dbg !2206
  unreachable, !dbg !2206

assert_ok6:                                       ; preds = %or.phi
  br i1 true, label %assert_ok8, label %assert_fail7, !dbg !2206

assert_fail7:                                     ; preds = %assert_ok6
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2206
  call void %14(ptr @.panic_msg.17, i64 80, ptr @.file.73, i64 16, ptr @.func.107, i64 20, i32 85) #6, !dbg !2206
  unreachable, !dbg !2206

assert_ok8:                                       ; preds = %assert_ok6
  %lt = icmp ult i64 0, %9, !dbg !2206
  br i1 %lt, label %assert_ok10, label %assert_fail9, !dbg !2206

assert_fail9:                                     ; preds = %assert_ok8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2206
  call void %15(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 16, ptr @.func.107, i64 20, i32 85) #6, !dbg !2206
  unreachable, !dbg !2206

assert_ok10:                                      ; preds = %assert_ok8
  %ptradd11 = getelementptr inbounds i8, ptr %allocator2, i64 8, !dbg !2206
  %16 = load i64, ptr %ptradd11, align 8, !dbg !2206
  %17 = inttoptr i64 %16 to ptr, !dbg !2206
  %type = load ptr, ptr %.cachedtype, align 8
  %18 = icmp eq ptr %17, %type
  br i1 %18, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok10
  %ptradd12 = getelementptr inbounds i8, ptr %17, i64 16
  %19 = load ptr, ptr %ptradd12, align 8
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.acquire")
  store ptr %20, ptr %.inlinecache, align 8
  store ptr %17, ptr %.cachedtype, align 8
  br label %21

cache_hit:                                        ; preds = %assert_ok10
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %21

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ]
  %22 = icmp eq ptr %fn_phi, null
  br i1 %22, label %missing_function, label %match

missing_function:                                 ; preds = %21
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2206
  call void %23(ptr @.panic_msg.19, i64 44, ptr @.file.73, i64 16, ptr @.func.107, i64 20, i32 85) #6, !dbg !2206
  unreachable, !dbg !2206

match:                                            ; preds = %21
  %24 = load ptr, ptr %allocator2, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24, i64 %9, i32 0, i64 0), !dbg !2206
  %not_err = icmp eq i64 %25, 0, !dbg !2206
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2206
  br i1 %26, label %after_check, label %assign_optional, !dbg !2206

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %error_var, align 8, !dbg !2206
  br label %guard_block, !dbg !2206

after_check:                                      ; preds = %match
  %27 = load ptr, ptr %retparam, align 8, !dbg !2206
  store ptr %27, ptr %blockret, align 8, !dbg !2206
  br label %expr_block.exit, !dbg !2206

expr_block.exit:                                  ; preds = %after_check, %if.then
  %28 = load ptr, ptr %blockret, align 8, !dbg !2206
  br label %noerr_block, !dbg !2206

guard_block:                                      ; preds = %assign_optional
  %29 = load i64, ptr %error_var, align 8, !dbg !2206
  ret i64 %29, !dbg !2206

noerr_block:                                      ; preds = %expr_block.exit
  store ptr %28, ptr %temp, align 8, !dbg !2206
  %30 = load ptr, ptr %temp, align 8, !dbg !2207
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !2207
  store ptr null, ptr %ptradd13, align 8, !dbg !2208
  %31 = load ptr, ptr %temp, align 8, !dbg !2209
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %31, ptr align 8 %allocator, i32 16, i1 false), !dbg !2210
  %32 = load ptr, ptr %temp, align 8, !dbg !2211
  %ptradd14 = getelementptr inbounds i8, ptr %32, i64 24, !dbg !2211
  store i64 0, ptr %ptradd14, align 8, !dbg !2212
  %33 = load ptr, ptr %temp, align 8, !dbg !2213
  %ptradd15 = getelementptr inbounds i8, ptr %33, i64 32, !dbg !2213
  %34 = load i64, ptr %size, align 8, !dbg !2214
  store i64 %34, ptr %ptradd15, align 8, !dbg !2214
  %35 = load ptr, ptr %temp, align 8, !dbg !2215
  store ptr %35, ptr %0, align 8, !dbg !2215
  ret i64 0, !dbg !2215
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.TempAllocator.derive_allocator(ptr %0, ptr %1, i64 %2, i64 %3, i64 %4) #0 comdat !dbg !2216 {
entry:
  %self = alloca ptr, align 8
  %min_size = alloca i64, align 8
  %buffer = alloca i64, align 8
  %mult = alloca i64, align 8
  %remaining = alloca i64, align 8
  %mem = alloca ptr, align 8
  %size = alloca i64, align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca %any, align 8
  %start = alloca i64, align 8
  %x = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %temp = alloca ptr, align 8
  %reterr33 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !2220
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2220
  br i1 %6, label %panic, label %checkok, !dbg !2220

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2221, !DIExpression(), !2222)
  store i64 %2, ptr %min_size, align 8
    #dbg_declare(ptr %min_size, !2223, !DIExpression(), !2224)
  store i64 %3, ptr %buffer, align 8
    #dbg_declare(ptr %buffer, !2225, !DIExpression(), !2226)
  store i64 %4, ptr %mult, align 8
    #dbg_declare(ptr %mult, !2227, !DIExpression(), !2228)
  %7 = load ptr, ptr %self, align 8, !dbg !2229
  %ptradd = getelementptr inbounds i8, ptr %7, i64 24, !dbg !2229
  %8 = load ptr, ptr %ptradd, align 8, !dbg !2229
  %i2nb = icmp eq ptr %8, null, !dbg !2229
  br i1 %i2nb, label %assert_ok, label %assert_fail, !dbg !2229

assert_fail:                                      ; preds = %checkok
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2231
  call void %9(ptr @.panic_msg.125, i64 34, ptr @.file.121, i64 17, ptr @.func.124, i64 16, i32 80) #6, !dbg !2231
  unreachable, !dbg !2231

assert_ok:                                        ; preds = %checkok
  %10 = load i64, ptr %min_size, align 8, !dbg !2232
  %lt = icmp ult i64 128, %10, !dbg !2232
  br i1 %lt, label %assert_ok2, label %assert_fail1, !dbg !2232

assert_fail1:                                     ; preds = %assert_ok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2232
  call void %11(ptr @.panic_msg.126, i64 114, ptr @.file.121, i64 17, ptr @.func.124, i64 16, i32 81) #6, !dbg !2232
  unreachable, !dbg !2232

assert_ok2:                                       ; preds = %assert_ok
  %12 = load i64, ptr %mult, align 8, !dbg !2233
  %lt3 = icmp ult i64 0, %12, !dbg !2233
  br i1 %lt3, label %assert_ok5, label %assert_fail4, !dbg !2233

assert_fail4:                                     ; preds = %assert_ok2
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2233
  call void %13(ptr @.panic_msg.127, i64 63, ptr @.file.121, i64 17, ptr @.func.124, i64 16, i32 82) #6, !dbg !2233
  unreachable, !dbg !2233

assert_ok5:                                       ; preds = %assert_ok2
    #dbg_declare(ptr %remaining, !2234, !DIExpression(), !2235)
  %14 = load ptr, ptr %self, align 8, !dbg !2236
  %ptradd6 = getelementptr inbounds i8, ptr %14, i64 48, !dbg !2236
  %15 = load i64, ptr %ptradd6, align 8, !dbg !2236
  %16 = load ptr, ptr %self, align 8, !dbg !2237
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 40, !dbg !2237
  %17 = load i64, ptr %ptradd7, align 8, !dbg !2237
  %sub = sub i64 %15, %17, !dbg !2236
  store i64 %sub, ptr %remaining, align 8, !dbg !2236
    #dbg_declare(ptr %mem, !2238, !DIExpression(), !2239)
    #dbg_declare(ptr %size, !2240, !DIExpression(), !2241)
  %18 = load i64, ptr %min_size, align 8, !dbg !2242
  %19 = load i64, ptr %buffer, align 8, !dbg !2243
  %add = add i64 %18, %19, !dbg !2242
  %20 = load i64, ptr %remaining, align 8, !dbg !2244
  %gt = icmp ugt i64 %add, %20, !dbg !2242
  br i1 %gt, label %if.then, label %if.exit, !dbg !2242

if.then:                                          ; preds = %assert_ok5
  %21 = load ptr, ptr %self, align 8, !dbg !2245
  %ptradd8 = getelementptr inbounds i8, ptr %21, i64 24, !dbg !2245
  %22 = load ptr, ptr %self, align 8, !dbg !2247
  %23 = load %any, ptr %22, align 8, !dbg !2247
  %24 = load i64, ptr %min_size, align 8, !dbg !2248
  %25 = load i64, ptr %mult, align 8, !dbg !2249
  %mul = mul i64 %24, %25, !dbg !2248
  %le = icmp ule i64 16, %mul, !dbg !2250
  br i1 %le, label %assert_ok10, label %assert_fail9, !dbg !2250

assert_fail9:                                     ; preds = %if.then
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2250
  call void %26(ptr @.panic_msg.105, i64 31, ptr @.file.121, i64 17, ptr @.func.124, i64 16, i32 91) #6, !dbg !2250
  unreachable, !dbg !2250

assert_ok10:                                      ; preds = %if.then
  %27 = extractvalue %any %23, 1, !dbg !2251
  %neq = icmp ne i64 %27, ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), !dbg !2250
  br i1 %neq, label %assert_ok12, label %assert_fail11, !dbg !2250

assert_fail11:                                    ; preds = %assert_ok10
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2250
  call void %28(ptr @.panic_msg.123, i64 145, ptr @.file.121, i64 17, ptr @.func.124, i64 16, i32 91) #6, !dbg !2250
  unreachable, !dbg !2250

assert_ok12:                                      ; preds = %assert_ok10
  store %any %23, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd13 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd13, align 8
  %29 = call i64 @std.core.mem.allocator.new_temp_allocator(ptr %retparam, i64 %lo, ptr %hi, i64 %mul), !dbg !2250
  %not_err = icmp eq i64 %29, 0, !dbg !2250
  %30 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2250
  br i1 %30, label %after_check, label %assign_optional, !dbg !2250

assign_optional:                                  ; preds = %assert_ok12
  store i64 %29, ptr %error_var, align 8, !dbg !2250
  br label %guard_block, !dbg !2250

after_check:                                      ; preds = %assert_ok12
  br label %noerr_block, !dbg !2250

guard_block:                                      ; preds = %assign_optional
  %31 = load i64, ptr %error_var, align 8, !dbg !2250
  ret i64 %31, !dbg !2250

noerr_block:                                      ; preds = %after_check
  %32 = load ptr, ptr %retparam, align 8, !dbg !2250
  store ptr %32, ptr %ptradd8, align 8, !dbg !2250
  store ptr %32, ptr %0, align 8, !dbg !2250
  ret i64 0, !dbg !2250

if.exit:                                          ; preds = %assert_ok5
    #dbg_declare(ptr %start, !2252, !DIExpression(), !2253)
  %33 = load ptr, ptr %self, align 8, !dbg !2254
  %ptradd14 = getelementptr inbounds i8, ptr %33, i64 40, !dbg !2254
  %34 = load i64, ptr %ptradd14, align 8, !dbg !2254
  %35 = load i64, ptr %buffer, align 8, !dbg !2255
  %add15 = add i64 %34, %35, !dbg !2254
  store i64 16, ptr %x, align 8
  %36 = load i64, ptr %x, align 8, !dbg !2256
  %neq16 = icmp ne i64 0, %36, !dbg !2256
  br i1 %neq16, label %and.rhs, label %and.phi, !dbg !2256

and.rhs:                                          ; preds = %if.exit
  %37 = load i64, ptr %x, align 8, !dbg !2259
  %38 = load i64, ptr %x, align 8, !dbg !2260
  %sub17 = sub i64 %38, 1, !dbg !2260
  %and = and i64 %37, %sub17, !dbg !2259
  %eq = icmp eq i64 %and, 0, !dbg !2259
  br label %and.phi, !dbg !2259

and.phi:                                          ; preds = %and.rhs, %if.exit
  %val = phi i1 [ false, %if.exit ], [ %eq, %and.rhs ], !dbg !2259
  br i1 %val, label %assert_ok19, label %assert_fail18, !dbg !2259

assert_fail18:                                    ; preds = %and.phi
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2258
  call void %39(ptr @.panic_msg.70, i64 51, ptr @.file.121, i64 17, ptr @.func.124, i64 16, i32 93) #6, !dbg !2258
  unreachable, !dbg !2258

assert_ok19:                                      ; preds = %and.phi
  %40 = call i64 @std.core.mem.aligned_offset(i64 %add15, i64 16), !dbg !2258
  store i64 %40, ptr %start, align 8, !dbg !2258
    #dbg_declare(ptr %ptr, !2261, !DIExpression(), !2262)
  %41 = load ptr, ptr %self, align 8, !dbg !2263
  %ptradd20 = getelementptr inbounds i8, ptr %41, i64 64, !dbg !2263
  %42 = load i64, ptr %start, align 8, !dbg !2264
  %ptradd21 = getelementptr inbounds i8, ptr %ptradd20, i64 %42, !dbg !2264
  store ptr %ptradd21, ptr %ptr, align 8, !dbg !2264
    #dbg_declare(ptr %temp, !2265, !DIExpression(), !2266)
  %43 = load ptr, ptr %ptr, align 8, !dbg !2267
  store ptr %43, ptr %temp, align 8, !dbg !2267
  %44 = load ptr, ptr %temp, align 8, !dbg !2268
  %ptradd22 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !2268
  store ptr null, ptr %ptradd22, align 8, !dbg !2269
  %45 = load ptr, ptr %temp, align 8, !dbg !2270
  %46 = load ptr, ptr %self, align 8, !dbg !2271
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %45, ptr align 8 %46, i32 16, i1 false), !dbg !2271
  %47 = load ptr, ptr %temp, align 8, !dbg !2272
  %ptradd23 = getelementptr inbounds i8, ptr %47, i64 40, !dbg !2272
  store i64 0, ptr %ptradd23, align 8, !dbg !2273
  %48 = load ptr, ptr %temp, align 8, !dbg !2274
  %ptradd24 = getelementptr inbounds i8, ptr %48, i64 32, !dbg !2274
  store i8 0, ptr %ptradd24, align 8, !dbg !2275
  %49 = load ptr, ptr %temp, align 8, !dbg !2276
  %ptradd25 = getelementptr inbounds i8, ptr %49, i64 24, !dbg !2276
  store ptr null, ptr %ptradd25, align 8, !dbg !2277
  %50 = load ptr, ptr %temp, align 8, !dbg !2278
  %ptradd26 = getelementptr inbounds i8, ptr %50, i64 56, !dbg !2278
  %51 = load ptr, ptr %temp, align 8, !dbg !2279
  %ptradd27 = getelementptr inbounds i8, ptr %51, i64 48, !dbg !2279
  %52 = load ptr, ptr %self, align 8, !dbg !2280
  %ptradd28 = getelementptr inbounds i8, ptr %52, i64 48, !dbg !2280
  %53 = load i64, ptr %ptradd28, align 8, !dbg !2280
  %54 = load i64, ptr %start, align 8, !dbg !2281
  %sub29 = sub i64 %53, %54, !dbg !2280
  %sub30 = sub i64 %sub29, 64, !dbg !2280
  store i64 %sub30, ptr %ptradd27, align 8, !dbg !2280
  store i64 %sub30, ptr %ptradd26, align 8, !dbg !2280
  %55 = load ptr, ptr %self, align 8, !dbg !2282
  %ptradd31 = getelementptr inbounds i8, ptr %55, i64 48, !dbg !2282
  %56 = load i64, ptr %start, align 8, !dbg !2283
  store i64 %56, ptr %ptradd31, align 8, !dbg !2283
  %57 = load ptr, ptr %self, align 8, !dbg !2284
  %ptradd32 = getelementptr inbounds i8, ptr %57, i64 24, !dbg !2284
  %58 = load ptr, ptr %temp, align 8, !dbg !2285
  store ptr %58, ptr %ptradd32, align 8, !dbg !2285
  %59 = load ptr, ptr %temp, align 8, !dbg !2286
  store ptr %59, ptr %0, align 8, !dbg !2286
  ret i64 0, !dbg !2286

panic:                                            ; preds = %entry
  %60 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2222
  call void %60(ptr @.panic_msg, i64 62, ptr @.file.121, i64 17, ptr @.func.124, i64 16, i32 84) #6, !dbg !2222
  unreachable, !dbg !2222
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.TempAllocator.reset(ptr %0) #0 comdat !dbg !2287 {
entry:
  %self = alloca ptr, align 8
  %child = alloca ptr, align 8
  %old = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2290
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2290
  br i1 %2, label %panic, label %checkok, !dbg !2290

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2291, !DIExpression(), !2292)
    #dbg_declare(ptr %child, !2293, !DIExpression(), !2294)
  %3 = load ptr, ptr %self, align 8, !dbg !2295
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !2295
  %4 = load ptr, ptr %ptradd, align 8, !dbg !2295
  store ptr %4, ptr %child, align 8, !dbg !2295
  %5 = load ptr, ptr %child, align 8, !dbg !2296
  %i2nb = icmp eq ptr %5, null, !dbg !2296
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2296

if.then:                                          ; preds = %checkok
  ret void, !dbg !2297

if.exit:                                          ; preds = %checkok
  br label %loop.cond, !dbg !2298

loop.cond:                                        ; preds = %loop.body, %if.exit
  %6 = load ptr, ptr %child, align 8, !dbg !2299
  %i2b = icmp ne ptr %6, null, !dbg !2299
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !2299

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %old, !2301, !DIExpression(), !2303)
  %7 = load ptr, ptr %child, align 8, !dbg !2304
  store ptr %7, ptr %old, align 8, !dbg !2304
  %8 = load ptr, ptr %old, align 8, !dbg !2305
  %ptradd1 = getelementptr inbounds i8, ptr %8, i64 24, !dbg !2305
  %9 = load ptr, ptr %ptradd1, align 8, !dbg !2305
  store ptr %9, ptr %child, align 8, !dbg !2305
  %10 = load ptr, ptr %old, align 8, !dbg !2306
  call void @std.core.mem.allocator.TempAllocator.destroy(ptr %10), !dbg !2306
  br label %loop.cond, !dbg !2306

loop.exit:                                        ; preds = %loop.cond
  %11 = load ptr, ptr %self, align 8, !dbg !2307
  %ptradd2 = getelementptr inbounds i8, ptr %11, i64 48, !dbg !2307
  %12 = load ptr, ptr %self, align 8, !dbg !2308
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 56, !dbg !2308
  %13 = load i64, ptr %ptradd3, align 8, !dbg !2308
  store i64 %13, ptr %ptradd2, align 8, !dbg !2308
  %14 = load ptr, ptr %self, align 8, !dbg !2309
  %ptradd4 = getelementptr inbounds i8, ptr %14, i64 24, !dbg !2309
  store ptr null, ptr %ptradd4, align 8, !dbg !2310
  ret void, !dbg !2310

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2292
  call void %15(ptr @.panic_msg, i64 62, ptr @.file.121, i64 17, ptr @.func.111, i64 5, i32 113) #6, !dbg !2292
  unreachable, !dbg !2292
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.TempAllocator.free(ptr %0) #0 comdat !dbg !2311 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2312
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2312
  br i1 %2, label %panic, label %checkok, !dbg !2312

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2313, !DIExpression(), !2314)
  %3 = load ptr, ptr %self, align 8, !dbg !2315
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !2315
  %4 = load i8, ptr %ptradd, align 8, !dbg !2315
  %5 = trunc i8 %4 to i1, !dbg !2315
  br i1 %5, label %assert_ok, label %assert_fail, !dbg !2315

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2315
  call void %6(ptr @.panic_msg.128, i64 82, ptr @.file.121, i64 17, ptr @.func.8, i64 4, i32 131) #6, !dbg !2315
  unreachable, !dbg !2315

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !2317
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %7), !dbg !2317
  %8 = load ptr, ptr %self, align 8, !dbg !2318
  call void @std.core.mem.allocator.TempAllocator.destroy(ptr %8), !dbg !2318
  ret void, !dbg !2318

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2314
  call void %9(ptr @.panic_msg, i64 62, ptr @.file.121, i64 17, ptr @.func.8, i64 4, i32 133) #6, !dbg !2314
  unreachable, !dbg !2314
}

; Function Attrs: nounwind ssp uwtable
define internal void @std.core.mem.allocator.TempAllocator.destroy(ptr %0) #0 !dbg !2319 {
entry:
  %self = alloca ptr, align 8
  %last_page = alloca ptr, align 8
  %to_free = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %varargslots9 = alloca [1 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2320
  %1 = icmp eq ptr %0, null, !dbg !2320
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2320
  br i1 %2, label %panic, label %checkok, !dbg !2320

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2321, !DIExpression(), !2322)
    #dbg_declare(ptr %last_page, !2323, !DIExpression(), !2324)
  %3 = load ptr, ptr %self, align 8, !dbg !2325
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !2325
  %4 = load ptr, ptr %ptradd, align 8, !dbg !2325
  store ptr %4, ptr %last_page, align 8, !dbg !2325
  br label %loop.cond, !dbg !2326

loop.cond:                                        ; preds = %noerr_block, %checkok
  %5 = load ptr, ptr %last_page, align 8, !dbg !2327
  %i2b = icmp ne ptr %5, null, !dbg !2327
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !2327

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %to_free, !2329, !DIExpression(), !2331)
  %6 = load ptr, ptr %last_page, align 8, !dbg !2332
  store ptr %6, ptr %to_free, align 8, !dbg !2332
  %7 = load ptr, ptr %last_page, align 8, !dbg !2333
  %8 = load ptr, ptr %7, align 8, !dbg !2333
  store ptr %8, ptr %last_page, align 8, !dbg !2333
  %9 = load ptr, ptr %self, align 8, !dbg !2334
  %10 = load ptr, ptr %to_free, align 8, !dbg !2334
  %11 = call i64 @std.core.mem.allocator.TempAllocator._free_page(ptr %9, ptr %10) #7, !dbg !2335
  %not_err = icmp eq i64 %11, 0, !dbg !2335
  %12 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2335
  br i1 %12, label %after_check, label %assign_optional, !dbg !2335

assign_optional:                                  ; preds = %loop.body
  store i64 %11, ptr %error_var, align 8, !dbg !2335
  br label %panic_block, !dbg !2335

after_check:                                      ; preds = %loop.body
  br label %noerr_block, !dbg !2335

panic_block:                                      ; preds = %assign_optional
  %13 = insertvalue %any undef, ptr %error_var, 0, !dbg !2335
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !2335
  store %any %14, ptr %varargslots, align 16
  %15 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %15, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 36, ptr @.file.121, i64 17, ptr @.func.108, i64 7, i32 146, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !2335
  unreachable, !dbg !2335

noerr_block:                                      ; preds = %after_check
  br label %loop.cond, !dbg !2335

loop.exit:                                        ; preds = %loop.cond
  %16 = load ptr, ptr %self, align 8, !dbg !2336
  %ptradd1 = getelementptr inbounds i8, ptr %16, i64 32, !dbg !2336
  %17 = load i8, ptr %ptradd1, align 8, !dbg !2336
  %18 = trunc i8 %17 to i1, !dbg !2336
  br i1 %18, label %if.then, label %if.exit5, !dbg !2336

if.then:                                          ; preds = %loop.exit
  %19 = load ptr, ptr %self, align 8, !dbg !2337
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %19, i32 16, i1 false)
  %20 = load ptr, ptr %self, align 8, !dbg !2339
  store ptr %20, ptr %ptr, align 8
  %21 = load ptr, ptr %ptr, align 8, !dbg !2340
  %i2nb = icmp eq ptr %21, null, !dbg !2340
  br i1 %i2nb, label %if.then2, label %if.exit, !dbg !2340

if.then2:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !2343

if.exit:                                          ; preds = %if.then
  %22 = load ptr, ptr %ptr, align 8, !dbg !2344
  %neq = icmp ne ptr %22, null, !dbg !2345
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2345

assert_fail:                                      ; preds = %if.exit
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2345
  call void %23(ptr @.panic_msg.27, i64 75, ptr @.file.73, i64 16, ptr @.func.108, i64 7, i32 122) #6, !dbg !2345
  unreachable, !dbg !2345

assert_ok:                                        ; preds = %if.exit
  %ptradd3 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2345
  %24 = load i64, ptr %ptradd3, align 8, !dbg !2345
  %25 = inttoptr i64 %24 to ptr, !dbg !2345
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2320
  %26 = icmp eq ptr %25, %type, !dbg !2320
  br i1 %26, label %cache_hit, label %cache_miss, !dbg !2320

cache_miss:                                       ; preds = %assert_ok
  %ptradd4 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !2320
  %27 = load ptr, ptr %ptradd4, align 8, !dbg !2320
  %28 = call ptr @.dyn_search(ptr %27, ptr @"$sel.release"), !dbg !2320
  store ptr %28, ptr %.inlinecache, align 8, !dbg !2320
  store ptr %25, ptr %.cachedtype, align 8, !dbg !2320
  br label %29, !dbg !2320

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2320
  br label %29, !dbg !2320

29:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %28, %cache_miss ], !dbg !2320
  %30 = icmp eq ptr %fn_phi, null, !dbg !2320
  br i1 %30, label %missing_function, label %match, !dbg !2320

missing_function:                                 ; preds = %29
  %31 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2320
  call void %31(ptr @.panic_msg.28, i64 44, ptr @.file.73, i64 16, ptr @.func.108, i64 7, i32 122) #6, !dbg !2320
  unreachable, !dbg !2320

match:                                            ; preds = %29
  %32 = load ptr, ptr %allocator, align 8, !dbg !2320
  call void %fn_phi(ptr %32, ptr %22, i8 zeroext 0), !dbg !2320
  br label %expr_block.exit, !dbg !2320

expr_block.exit:                                  ; preds = %match, %if.then2
  ret void, !dbg !2346

if.exit5:                                         ; preds = %loop.exit
  %33 = load ptr, ptr %self, align 8, !dbg !2347
  %ptradd6 = getelementptr inbounds i8, ptr %33, i64 64, !dbg !2347
  %34 = load ptr, ptr %self, align 8, !dbg !2348
  %ptradd7 = getelementptr inbounds i8, ptr %34, i64 40, !dbg !2348
  %35 = load i64, ptr %ptradd7, align 8, !dbg !2348
  %add = add i64 0, %35, !dbg !2348
  %gt = icmp sgt i64 0, %add, !dbg !2348
  %sub = sub i64 %add, 0, !dbg !2348
  %36 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2348
  br i1 %36, label %panic8, label %checkok12, !dbg !2348

checkok12:                                        ; preds = %if.exit5
  br label %cond, !dbg !2347

cond:                                             ; preds = %assign, %checkok12
  %37 = phi i64 [ 0, %checkok12 ], [ %add14, %assign ], !dbg !2347
  %lt = icmp slt i64 %37, %add, !dbg !2347
  br i1 %lt, label %assign, label %exit, !dbg !2347

assign:                                           ; preds = %cond
  %ptradd13 = getelementptr inbounds i8, ptr %ptradd6, i64 %37, !dbg !2347
  store i8 -86, ptr %ptradd13, align 1, !dbg !2347
  %add14 = add i64 %37, 1, !dbg !2347
  br label %cond, !dbg !2347

exit:                                             ; preds = %cond
  ret void, !dbg !2347

panic:                                            ; preds = %entry
  %38 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2322
  call void %38(ptr @.panic_msg, i64 62, ptr @.file.121, i64 17, ptr @.func.108, i64 7, i32 139) #6, !dbg !2322
  unreachable, !dbg !2322

panic8:                                           ; preds = %if.exit5
  store i64 %sub, ptr %taddr, align 8
  %39 = insertvalue %any undef, ptr %taddr, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %40, ptr %varargslots9, align 16
  %41 = insertvalue %"any[]" undef, ptr %varargslots9, 0
  %"$$temp10" = insertvalue %"any[]" %41, i64 1, 1
  store %"any[]" %"$$temp10", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.112, i64 43, ptr @.file.121, i64 17, ptr @.func.108, i64 7, i32 155, ptr byval(%"any[]") align 8 %indirectarg11) #6, !dbg !2347
  unreachable, !dbg !2347
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.TempAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !2349 {
entry:
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %.anon = alloca i8, align 1
  %old_size = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %addr = alloca ptr, align 8
  %size = alloca i64, align 8
  %3 = icmp eq ptr %0, null, !dbg !2352
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2352
  br i1 %4, label %panic, label %checkok, !dbg !2352

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2353, !DIExpression(), !2354)
  store ptr %1, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !2355, !DIExpression(), !2356)
  store i8 %2, ptr %.anon, align 1
    #dbg_declare(ptr %.anon, !2357, !DIExpression(), !2358)
    #dbg_declare(ptr %old_size, !2359, !DIExpression(), !2360)
  %5 = load ptr, ptr %old_pointer, align 8, !dbg !2361
  %ptradd_any = getelementptr i8, ptr %5, i64 -8, !dbg !2362
  %checknull = icmp eq ptr %ptradd_any, null, !dbg !2362
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2362
  br i1 %6, label %panic1, label %checkok2, !dbg !2362

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %ptradd_any to i64, !dbg !2363
  %8 = urem i64 %7, 8, !dbg !2363
  %9 = icmp ne i64 %8, 0, !dbg !2363
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2363
  br i1 %10, label %panic3, label %checkok5, !dbg !2363

checkok5:                                         ; preds = %checkok2
  %11 = load i64, ptr %ptradd_any, align 8, !dbg !2363
  store i64 %11, ptr %old_size, align 8, !dbg !2363
  %12 = load ptr, ptr %old_pointer, align 8, !dbg !2364
  %13 = load i64, ptr %old_size, align 8, !dbg !2365
  %ptradd_any6 = getelementptr i8, ptr %12, i64 %13, !dbg !2365
  %14 = load ptr, ptr %self, align 8, !dbg !2366
  %ptradd7 = getelementptr inbounds i8, ptr %14, i64 64, !dbg !2366
  %15 = load ptr, ptr %self, align 8, !dbg !2367
  %ptradd8 = getelementptr inbounds i8, ptr %15, i64 40, !dbg !2367
  %16 = load i64, ptr %ptradd8, align 8, !dbg !2367
  %ptradd9 = getelementptr inbounds i8, ptr %ptradd7, i64 %16, !dbg !2367
  %eq = icmp eq ptr %ptradd_any6, %ptradd9, !dbg !2364
  br i1 %eq, label %if.then, label %if.exit, !dbg !2364

if.then:                                          ; preds = %checkok5
  %17 = load ptr, ptr %self, align 8, !dbg !2368
  %ptradd10 = getelementptr inbounds i8, ptr %17, i64 40, !dbg !2368
  %18 = load i64, ptr %ptradd10, align 8, !dbg !2368
  %19 = load i64, ptr %old_size, align 8, !dbg !2370
  %sub = sub i64 %18, %19, !dbg !2368
  store i64 %sub, ptr %ptradd10, align 8, !dbg !2368
  %20 = load ptr, ptr %self, align 8, !dbg !2371
  %ptradd11 = getelementptr inbounds i8, ptr %20, i64 64, !dbg !2371
  %21 = load ptr, ptr %self, align 8, !dbg !2372
  %ptradd12 = getelementptr inbounds i8, ptr %21, i64 40, !dbg !2372
  %22 = load i64, ptr %ptradd12, align 8, !dbg !2372
  %ptradd13 = getelementptr inbounds i8, ptr %ptradd11, i64 %22, !dbg !2372
  store ptr %ptradd13, ptr %addr, align 8
  %23 = load i64, ptr %old_size, align 8
  store i64 %23, ptr %size, align 8
  br label %if.exit, !dbg !2373

if.exit:                                          ; preds = %if.then, %checkok5
  ret void, !dbg !2373

panic:                                            ; preds = %entry
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2354
  call void %24(ptr @.panic_msg, i64 62, ptr @.file.121, i64 17, ptr @.func.24, i64 7, i32 162) #6, !dbg !2354
  unreachable, !dbg !2354

panic1:                                           ; preds = %checkok
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2363
  call void %25(ptr @.panic_msg.110, i64 42, ptr @.file.121, i64 17, ptr @.func.24, i64 7, i32 164) #6, !dbg !2363
  unreachable, !dbg !2363

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %26 = insertvalue %any undef, ptr %taddr, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %28 = insertvalue %any undef, ptr %taddr4, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %27, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %29, ptr %ptradd, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.121, i64 17, ptr @.func.24, i64 7, i32 164, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !2363
  unreachable, !dbg !2363
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.TempAllocator._free_page(ptr %0, ptr %1) #0 !dbg !2376 {
entry:
  %self = alloca ptr, align 8
  %page = alloca ptr, align 8
  %mem = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %self1 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2379
  %2 = icmp eq ptr %0, null, !dbg !2379
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2379
  br i1 %3, label %panic, label %checkok, !dbg !2379

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2380, !DIExpression(), !2381)
  store ptr %1, ptr %page, align 8
    #dbg_declare(ptr %page, !2382, !DIExpression(), !2383)
    #dbg_declare(ptr %mem, !2384, !DIExpression(), !2385)
  %4 = load ptr, ptr %page, align 8, !dbg !2386
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !2386
  %5 = load ptr, ptr %ptradd, align 8, !dbg !2386
  store ptr %5, ptr %mem, align 8, !dbg !2386
  %6 = load ptr, ptr %self, align 8, !dbg !2387
  %7 = load ptr, ptr %mem, align 8, !dbg !2388
  %8 = load ptr, ptr %page, align 8
  store ptr %8, ptr %self1, align 8
  %9 = load ptr, ptr %self1, align 8, !dbg !2389
  %neq = icmp ne ptr %9, null, !dbg !2389
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2389

assert_fail:                                      ; preds = %checkok
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2389
  call void %10(ptr @.panic_msg.59, i64 32, ptr @.file.121, i64 17, ptr @.func.113, i64 10, i32 62) #6, !dbg !2389
  unreachable, !dbg !2389

assert_ok:                                        ; preds = %checkok
  %11 = load ptr, ptr %self1, align 8, !dbg !2393
  %ptradd2 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !2393
  %12 = load i64, ptr %ptradd2, align 8, !dbg !2393
  %and = and i64 %12, -9223372036854775808, !dbg !2393
  %eq = icmp eq i64 %and, -9223372036854775808, !dbg !2393
  %neq3 = icmp ne ptr %7, null, !dbg !2387
  br i1 %neq3, label %assert_ok5, label %assert_fail4, !dbg !2387

assert_fail4:                                     ; preds = %assert_ok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2387
  call void %13(ptr @.panic_msg.27, i64 75, ptr @.file.121, i64 17, ptr @.func.113, i64 10, i32 176) #6, !dbg !2387
  unreachable, !dbg !2387

assert_ok5:                                       ; preds = %assert_ok
  %ptradd6 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !2387
  %14 = load i64, ptr %ptradd6, align 8, !dbg !2387
  %15 = inttoptr i64 %14 to ptr, !dbg !2387
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2379
  %16 = icmp eq ptr %15, %type, !dbg !2379
  br i1 %16, label %cache_hit, label %cache_miss, !dbg !2379

cache_miss:                                       ; preds = %assert_ok5
  %ptradd7 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !2379
  %17 = load ptr, ptr %ptradd7, align 8, !dbg !2379
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.release"), !dbg !2379
  store ptr %18, ptr %.inlinecache, align 8, !dbg !2379
  store ptr %15, ptr %.cachedtype, align 8, !dbg !2379
  br label %19, !dbg !2379

cache_hit:                                        ; preds = %assert_ok5
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2379
  br label %19, !dbg !2379

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ], !dbg !2379
  %20 = icmp eq ptr %fn_phi, null, !dbg !2379
  br i1 %20, label %missing_function, label %match, !dbg !2379

missing_function:                                 ; preds = %19
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2379
  call void %21(ptr @.panic_msg.28, i64 44, ptr @.file.121, i64 17, ptr @.func.113, i64 10, i32 176) #6, !dbg !2379
  unreachable, !dbg !2379

match:                                            ; preds = %19
  %22 = load ptr, ptr %6, align 8, !dbg !2379
  %23 = zext i1 %eq to i8, !dbg !2379
  call void %fn_phi(ptr %22, ptr %7, i8 zeroext %23), !dbg !2379
  ret i64 0, !dbg !2379

panic:                                            ; preds = %entry
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2381
  call void %24(ptr @.panic_msg, i64 62, ptr @.file.121, i64 17, ptr @.func.113, i64 10, i32 173) #6, !dbg !2381
  unreachable, !dbg !2381
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.TempAllocator._realloc_page(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 !dbg !2394 {
entry:
  %self = alloca ptr, align 8
  %page = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %real_pointer = alloca ptr, align 8
  %pointer_to_prev = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %varargslots25 = alloca [2 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
  %page_size = alloca i64, align 8
  %self30 = alloca ptr, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %x = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %self65 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2397
  %5 = icmp eq ptr %1, null, !dbg !2397
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2397
  br i1 %6, label %panic, label %checkok, !dbg !2397

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2398, !DIExpression(), !2399)
  store ptr %2, ptr %page, align 8
    #dbg_declare(ptr %page, !2400, !DIExpression(), !2401)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !2402, !DIExpression(), !2403)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !2404, !DIExpression(), !2405)
    #dbg_declare(ptr %real_pointer, !2406, !DIExpression(), !2407)
  %7 = load ptr, ptr %page, align 8, !dbg !2408
  %ptradd = getelementptr inbounds i8, ptr %7, i64 8, !dbg !2408
  %8 = load ptr, ptr %ptradd, align 8, !dbg !2408
  store ptr %8, ptr %real_pointer, align 8, !dbg !2408
    #dbg_declare(ptr %pointer_to_prev, !2409, !DIExpression(), !2411)
  %9 = load ptr, ptr %self, align 8, !dbg !2412
  %ptradd1 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2412
  store ptr %ptradd1, ptr %pointer_to_prev, align 8, !dbg !2412
  br label %loop.cond, !dbg !2413

loop.cond:                                        ; preds = %checkok18, %checkok
  %10 = load ptr, ptr %pointer_to_prev, align 8, !dbg !2414
  %checknull = icmp eq ptr %10, null, !dbg !2414
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2414
  br i1 %11, label %panic2, label %checkok3, !dbg !2414

checkok3:                                         ; preds = %loop.cond
  %12 = ptrtoint ptr %10 to i64, !dbg !2414
  %13 = urem i64 %12, 8, !dbg !2414
  %14 = icmp ne i64 %13, 0, !dbg !2414
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !2414
  br i1 %15, label %panic4, label %checkok7, !dbg !2414

checkok7:                                         ; preds = %checkok3
  %16 = load ptr, ptr %10, align 8, !dbg !2414
  %17 = load ptr, ptr %page, align 8, !dbg !2416
  %neq = icmp ne ptr %16, %17, !dbg !2417
  br i1 %neq, label %loop.body, label %loop.exit, !dbg !2417

loop.body:                                        ; preds = %checkok7
  %18 = load ptr, ptr %pointer_to_prev, align 8, !dbg !2418
  %checknull8 = icmp eq ptr %18, null, !dbg !2418
  %19 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !2418
  br i1 %19, label %panic9, label %checkok10, !dbg !2418

checkok10:                                        ; preds = %loop.body
  %20 = ptrtoint ptr %18 to i64, !dbg !2418
  %21 = urem i64 %20, 8, !dbg !2418
  %22 = icmp ne i64 %21, 0, !dbg !2418
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false), !dbg !2418
  br i1 %23, label %panic11, label %checkok18, !dbg !2418

checkok18:                                        ; preds = %checkok10
  %24 = load ptr, ptr %18, align 8, !dbg !2418
  store ptr %24, ptr %pointer_to_prev, align 8, !dbg !2418
  br label %loop.cond, !dbg !2418

loop.exit:                                        ; preds = %checkok7
  %25 = load ptr, ptr %pointer_to_prev, align 8, !dbg !2420
  %checknull19 = icmp eq ptr %25, null, !dbg !2420
  %26 = call i1 @llvm.expect.i1(i1 %checknull19, i1 false), !dbg !2420
  br i1 %26, label %panic20, label %checkok21, !dbg !2420

checkok21:                                        ; preds = %loop.exit
  %27 = ptrtoint ptr %25 to i64, !dbg !2420
  %28 = urem i64 %27, 8, !dbg !2420
  %29 = icmp ne i64 %28, 0, !dbg !2420
  %30 = call i1 @llvm.expect.i1(i1 %29, i1 false), !dbg !2420
  br i1 %30, label %panic22, label %checkok29, !dbg !2420

checkok29:                                        ; preds = %checkok21
  %31 = load ptr, ptr %page, align 8, !dbg !2421
  %32 = load ptr, ptr %31, align 8, !dbg !2421
  store ptr %32, ptr %25, align 8, !dbg !2421
    #dbg_declare(ptr %page_size, !2422, !DIExpression(), !2423)
  %33 = load ptr, ptr %page, align 8
  store ptr %33, ptr %self30, align 8
  %34 = load ptr, ptr %self30, align 8, !dbg !2424
  %neq31 = icmp ne ptr %34, null, !dbg !2424
  br i1 %neq31, label %assert_ok, label %assert_fail, !dbg !2424

assert_fail:                                      ; preds = %checkok29
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2424
  call void %35(ptr @.panic_msg.59, i64 32, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 61) #6, !dbg !2424
  unreachable, !dbg !2424

assert_ok:                                        ; preds = %checkok29
  %36 = load ptr, ptr %self30, align 8, !dbg !2428
  %ptradd32 = getelementptr inbounds i8, ptr %36, i64 16, !dbg !2428
  %37 = load i64, ptr %ptradd32, align 8, !dbg !2428
  %and = and i64 %37, 9223372036854775807, !dbg !2428
  store i64 %and, ptr %page_size, align 8, !dbg !2428
    #dbg_declare(ptr %data, !2429, !DIExpression(), !2430)
  %38 = load ptr, ptr %self, align 8, !dbg !2431
  %39 = load i64, ptr %size, align 8, !dbg !2432
  %40 = load i64, ptr %alignment, align 8, !dbg !2433
  %lt = icmp ult i64 0, %39, !dbg !2431
  br i1 %lt, label %assert_ok34, label %assert_fail33, !dbg !2431

assert_fail33:                                    ; preds = %assert_ok
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2431
  call void %41(ptr @.panic_msg.101, i64 29, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 194) #6, !dbg !2431
  unreachable, !dbg !2431

assert_ok34:                                      ; preds = %assert_ok
  %i2nb = icmp eq i64 %40, 0, !dbg !2434
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !2434

or.rhs:                                           ; preds = %assert_ok34
  store i64 %40, ptr %x, align 8
  %42 = load i64, ptr %x, align 8, !dbg !2435
  %neq35 = icmp ne i64 0, %42, !dbg !2435
  br i1 %neq35, label %and.rhs, label %and.phi, !dbg !2435

and.rhs:                                          ; preds = %or.rhs
  %43 = load i64, ptr %x, align 8, !dbg !2438
  %44 = load i64, ptr %x, align 8, !dbg !2439
  %sub = sub i64 %44, 1, !dbg !2439
  %and36 = and i64 %43, %sub, !dbg !2438
  %eq = icmp eq i64 %and36, 0, !dbg !2438
  br label %and.phi, !dbg !2438

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2438
  br label %or.phi, !dbg !2438

or.phi:                                           ; preds = %and.phi, %assert_ok34
  %val37 = phi i1 [ true, %assert_ok34 ], [ %val, %and.phi ], !dbg !2438
  br i1 %val37, label %assert_ok39, label %assert_fail38, !dbg !2438

assert_fail38:                                    ; preds = %or.phi
  %45 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2431
  call void %45(ptr @.panic_msg.16, i64 65, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 194) #6, !dbg !2431
  unreachable, !dbg !2431

assert_ok39:                                      ; preds = %or.phi
  %le = icmp ule i64 %40, 268435456, !dbg !2431
  br i1 %le, label %assert_ok41, label %assert_fail40, !dbg !2431

assert_fail40:                                    ; preds = %assert_ok39
  %46 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2431
  call void %46(ptr @.panic_msg.17, i64 80, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 194) #6, !dbg !2431
  unreachable, !dbg !2431

assert_ok41:                                      ; preds = %assert_ok39
  %47 = call i64 @std.core.mem.allocator.TempAllocator.acquire(ptr %retparam, ptr %38, i64 %39, i32 0, i64 %40), !dbg !2431
  %not_err = icmp eq i64 %47, 0, !dbg !2431
  %48 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2431
  br i1 %48, label %after_check, label %assign_optional, !dbg !2431

assign_optional:                                  ; preds = %assert_ok41
  store i64 %47, ptr %error_var, align 8, !dbg !2431
  br label %guard_block, !dbg !2431

after_check:                                      ; preds = %assert_ok41
  br label %noerr_block, !dbg !2431

guard_block:                                      ; preds = %assign_optional
  %49 = load i64, ptr %error_var, align 8, !dbg !2431
  ret i64 %49, !dbg !2431

noerr_block:                                      ; preds = %after_check
  %50 = load ptr, ptr %retparam, align 8, !dbg !2431
  store ptr %50, ptr %data, align 8, !dbg !2431
  %51 = load i64, ptr %page_size, align 8, !dbg !2440
  %52 = load i64, ptr %size, align 8, !dbg !2441
  %gt = icmp ugt i64 %51, %52, !dbg !2440
  br i1 %gt, label %if.then, label %if.exit, !dbg !2440

if.then:                                          ; preds = %noerr_block
  %53 = load i64, ptr %size, align 8, !dbg !2442
  store i64 %53, ptr %page_size, align 8, !dbg !2442
  br label %if.exit, !dbg !2442

if.exit:                                          ; preds = %if.then, %noerr_block
  %54 = load ptr, ptr %data, align 8
  store ptr %54, ptr %dst, align 8
  %55 = load ptr, ptr %page, align 8, !dbg !2443
  %ptradd42 = getelementptr inbounds i8, ptr %55, i64 32, !dbg !2443
  store ptr %ptradd42, ptr %src, align 8
  %56 = load i64, ptr %page_size, align 8
  store i64 %56, ptr %len, align 8
  %57 = load ptr, ptr %dst, align 8, !dbg !2444
  %neq43 = icmp ne ptr %57, null, !dbg !2444
  br i1 %neq43, label %assert_ok45, label %assert_fail44, !dbg !2444

assert_fail44:                                    ; preds = %if.exit
  %58 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2444
  call void %58(ptr @.panic_msg.75, i64 37, ptr @.file.71, i64 6, ptr @.func.114, i64 13, i32 329) #6, !dbg !2444
  unreachable, !dbg !2444

assert_ok45:                                      ; preds = %if.exit
  %59 = load ptr, ptr %src, align 8, !dbg !2448
  %neq46 = icmp ne ptr %59, null, !dbg !2448
  br i1 %neq46, label %or.phi49, label %or.rhs47, !dbg !2448

or.rhs47:                                         ; preds = %assert_ok45
  %60 = load i64, ptr %len, align 8, !dbg !2449
  %eq48 = icmp eq i64 0, %60, !dbg !2449
  br label %or.phi49, !dbg !2449

or.phi49:                                         ; preds = %or.rhs47, %assert_ok45
  %val50 = phi i1 [ true, %assert_ok45 ], [ %eq48, %or.rhs47 ], !dbg !2449
  br i1 %val50, label %assert_ok52, label %assert_fail51, !dbg !2449

assert_fail51:                                    ; preds = %or.phi49
  %61 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2450
  call void %61(ptr @.panic_msg.76, i64 94, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 196) #6, !dbg !2450
  unreachable, !dbg !2450

assert_ok52:                                      ; preds = %or.phi49
  %62 = load i64, ptr %len, align 8, !dbg !2451
  %eq53 = icmp eq i64 0, %62, !dbg !2451
  br i1 %eq53, label %or.phi56, label %or.rhs54, !dbg !2451

or.rhs54:                                         ; preds = %assert_ok52
  %63 = load ptr, ptr %dst, align 8, !dbg !2452
  %64 = load i64, ptr %len, align 8, !dbg !2453
  %ptradd_any = getelementptr i8, ptr %63, i64 %64, !dbg !2453
  %65 = load ptr, ptr %src, align 8, !dbg !2454
  %le55 = icmp ule ptr %ptradd_any, %65, !dbg !2452
  br label %or.phi56, !dbg !2452

or.phi56:                                         ; preds = %or.rhs54, %assert_ok52
  %val57 = phi i1 [ true, %assert_ok52 ], [ %le55, %or.rhs54 ], !dbg !2452
  br i1 %val57, label %or.phi61, label %or.rhs58, !dbg !2452

or.rhs58:                                         ; preds = %or.phi56
  %66 = load ptr, ptr %src, align 8, !dbg !2455
  %67 = load i64, ptr %len, align 8, !dbg !2456
  %ptradd_any59 = getelementptr i8, ptr %66, i64 %67, !dbg !2456
  %68 = load ptr, ptr %dst, align 8, !dbg !2457
  %le60 = icmp ule ptr %ptradd_any59, %68, !dbg !2455
  br label %or.phi61, !dbg !2455

or.phi61:                                         ; preds = %or.rhs58, %or.phi56
  %val62 = phi i1 [ true, %or.phi56 ], [ %le60, %or.rhs58 ], !dbg !2455
  br i1 %val62, label %assert_ok64, label %assert_fail63, !dbg !2455

assert_fail63:                                    ; preds = %or.phi61
  %69 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2450
  call void %69(ptr @.panic_msg.77, i64 95, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 196) #6, !dbg !2450
  unreachable, !dbg !2450

assert_ok64:                                      ; preds = %or.phi61
  %70 = load ptr, ptr %dst, align 8, !dbg !2458
  %71 = load ptr, ptr %src, align 8, !dbg !2459
  %72 = load i64, ptr %len, align 8, !dbg !2460
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %70, ptr align 16 %71, i64 %72, i1 false), !dbg !2461
  %73 = load ptr, ptr %self, align 8, !dbg !2462
  %74 = load ptr, ptr %real_pointer, align 8, !dbg !2463
  %75 = load ptr, ptr %page, align 8
  store ptr %75, ptr %self65, align 8
  %76 = load ptr, ptr %self65, align 8, !dbg !2464
  %neq66 = icmp ne ptr %76, null, !dbg !2464
  br i1 %neq66, label %assert_ok68, label %assert_fail67, !dbg !2464

assert_fail67:                                    ; preds = %assert_ok64
  %77 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2464
  call void %77(ptr @.panic_msg.59, i64 32, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 62) #6, !dbg !2464
  unreachable, !dbg !2464

assert_ok68:                                      ; preds = %assert_ok64
  %78 = load ptr, ptr %self65, align 8, !dbg !2468
  %ptradd69 = getelementptr inbounds i8, ptr %78, i64 16, !dbg !2468
  %79 = load i64, ptr %ptradd69, align 8, !dbg !2468
  %and70 = and i64 %79, -9223372036854775808, !dbg !2468
  %eq71 = icmp eq i64 %and70, -9223372036854775808, !dbg !2468
  %neq72 = icmp ne ptr %74, null, !dbg !2462
  br i1 %neq72, label %assert_ok74, label %assert_fail73, !dbg !2462

assert_fail73:                                    ; preds = %assert_ok68
  %80 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2462
  call void %80(ptr @.panic_msg.27, i64 75, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 197) #6, !dbg !2462
  unreachable, !dbg !2462

assert_ok74:                                      ; preds = %assert_ok68
  %ptradd75 = getelementptr inbounds i8, ptr %73, i64 8, !dbg !2462
  %81 = load i64, ptr %ptradd75, align 8, !dbg !2462
  %82 = inttoptr i64 %81 to ptr, !dbg !2462
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2397
  %83 = icmp eq ptr %82, %type, !dbg !2397
  br i1 %83, label %cache_hit, label %cache_miss, !dbg !2397

cache_miss:                                       ; preds = %assert_ok74
  %ptradd76 = getelementptr inbounds i8, ptr %82, i64 16, !dbg !2397
  %84 = load ptr, ptr %ptradd76, align 8, !dbg !2397
  %85 = call ptr @.dyn_search(ptr %84, ptr @"$sel.release"), !dbg !2397
  store ptr %85, ptr %.inlinecache, align 8, !dbg !2397
  store ptr %82, ptr %.cachedtype, align 8, !dbg !2397
  br label %86, !dbg !2397

cache_hit:                                        ; preds = %assert_ok74
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2397
  br label %86, !dbg !2397

86:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %85, %cache_miss ], !dbg !2397
  %87 = icmp eq ptr %fn_phi, null, !dbg !2397
  br i1 %87, label %missing_function, label %match, !dbg !2397

missing_function:                                 ; preds = %86
  %88 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2397
  call void %88(ptr @.panic_msg.28, i64 44, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 197) #6, !dbg !2397
  unreachable, !dbg !2397

match:                                            ; preds = %86
  %89 = load ptr, ptr %73, align 8, !dbg !2397
  %90 = zext i1 %eq71 to i8, !dbg !2397
  call void %fn_phi(ptr %89, ptr %74, i8 zeroext %90), !dbg !2397
  %91 = load ptr, ptr %data, align 8, !dbg !2469
  store ptr %91, ptr %0, align 8, !dbg !2469
  ret i64 0, !dbg !2469

panic:                                            ; preds = %entry
  %92 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2399
  call void %92(ptr @.panic_msg, i64 62, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 179) #6, !dbg !2399
  unreachable, !dbg !2399

panic2:                                           ; preds = %loop.cond
  %93 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2414
  call void %93(ptr @.panic_msg.115, i64 56, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 187) #6, !dbg !2414
  unreachable, !dbg !2414

panic4:                                           ; preds = %checkok3
  store i64 8, ptr %taddr, align 8
  %94 = insertvalue %any undef, ptr %taddr, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr5, align 8
  %96 = insertvalue %any undef, ptr %taddr5, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %97, ptr %ptradd6, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 187, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !2414
  unreachable, !dbg !2414

panic9:                                           ; preds = %loop.body
  %99 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2418
  call void %99(ptr @.panic_msg.115, i64 56, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 189) #6, !dbg !2418
  unreachable, !dbg !2418

panic11:                                          ; preds = %checkok10
  store i64 8, ptr %taddr12, align 8
  %100 = insertvalue %any undef, ptr %taddr12, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr13, align 8
  %102 = insertvalue %any undef, ptr %taddr13, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %103, ptr %ptradd15, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 189, ptr byval(%"any[]") align 8 %indirectarg17) #6, !dbg !2418
  unreachable, !dbg !2418

panic20:                                          ; preds = %loop.exit
  %105 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2420
  call void %105(ptr @.panic_msg.115, i64 56, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 191) #6, !dbg !2420
  unreachable, !dbg !2420

panic22:                                          ; preds = %checkok21
  store i64 8, ptr %taddr23, align 8
  %106 = insertvalue %any undef, ptr %taddr23, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %28, ptr %taddr24, align 8
  %108 = insertvalue %any undef, ptr %taddr24, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %107, ptr %varargslots25, align 16
  %ptradd26 = getelementptr inbounds i8, ptr %varargslots25, i64 16
  store %any %109, ptr %ptradd26, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots25, 0
  %"$$temp27" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp27", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.121, i64 17, ptr @.func.114, i64 13, i32 191, ptr byval(%"any[]") align 8 %indirectarg28) #6, !dbg !2420
  unreachable, !dbg !2420
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.TempAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !2470 {
entry:
  %self = alloca ptr, align 8
  %pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %chunk = alloca ptr, align 8
  %page = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %is_realloc_of_last = alloca i8, align 1
  %diff = alloca i64, align 8
  %reterr10 = alloca i64, align 8
  %reterr18 = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %x = alloca i64, align 8
  %retparam31 = alloca ptr, align 8
  %len_to_copy = alloca i64, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr65 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !2473
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2473
  br i1 %6, label %panic, label %checkok, !dbg !2473

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2474, !DIExpression(), !2475)
  store ptr %2, ptr %pointer, align 8
    #dbg_declare(ptr %pointer, !2476, !DIExpression(), !2477)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !2478, !DIExpression(), !2479)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !2480, !DIExpression(), !2481)
    #dbg_declare(ptr %chunk, !2482, !DIExpression(), !2488)
  %7 = load ptr, ptr %pointer, align 8, !dbg !2489
  %ptradd_any = getelementptr i8, ptr %7, i64 -8, !dbg !2490
  store ptr %ptradd_any, ptr %chunk, align 8, !dbg !2490
  %8 = load ptr, ptr %chunk, align 8, !dbg !2491
  %9 = load i64, ptr %8, align 8, !dbg !2491
  %eq = icmp eq i64 %9, -1, !dbg !2491
  br i1 %eq, label %if.then, label %if.exit, !dbg !2491

if.then:                                          ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !2492
  %ptradd = getelementptr inbounds i8, ptr %10, i64 16, !dbg !2492
  %11 = load ptr, ptr %ptradd, align 8, !dbg !2492
  %i2b = icmp ne ptr %11, null, !dbg !2492
  br i1 %i2b, label %assert_ok, label %assert_fail, !dbg !2492

assert_fail:                                      ; preds = %if.then
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2492
  call void %12(ptr @.panic_msg.129, i64 27, ptr @.file.121, i64 17, ptr @.func.20, i64 6, i32 206) #6, !dbg !2492
  unreachable, !dbg !2492

assert_ok:                                        ; preds = %if.then
    #dbg_declare(ptr %page, !2494, !DIExpression(), !2495)
  %13 = load ptr, ptr %pointer, align 8, !dbg !2496
  %ptradd_any1 = getelementptr i8, ptr %13, i64 -32, !dbg !2497
  store ptr %ptradd_any1, ptr %page, align 8, !dbg !2497
  %14 = load ptr, ptr %self, align 8
  %15 = load ptr, ptr %page, align 8
  %16 = load i64, ptr %size, align 8
  %17 = load i64, ptr %alignment, align 8
  %18 = call i64 @std.core.mem.allocator.TempAllocator._realloc_page(ptr %retparam, ptr %14, ptr %15, i64 %16, i64 %17) #7, !dbg !2498
  %not_err = icmp eq i64 %18, 0, !dbg !2498
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2498
  br i1 %19, label %after_check, label %assign_optional, !dbg !2498

assign_optional:                                  ; preds = %assert_ok
  store i64 %18, ptr %reterr, align 8, !dbg !2498
  br label %err_retblock, !dbg !2498

after_check:                                      ; preds = %assert_ok
  %20 = load ptr, ptr %retparam, align 8, !dbg !2498
  store ptr %20, ptr %0, align 8, !dbg !2498
  ret i64 0, !dbg !2498

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !2498
  ret i64 %21, !dbg !2498

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %is_realloc_of_last, !2499, !DIExpression(), !2500)
  %22 = load ptr, ptr %pointer, align 8, !dbg !2501
  %23 = load ptr, ptr %chunk, align 8, !dbg !2502
  %24 = load i64, ptr %23, align 8, !dbg !2502
  %ptradd_any2 = getelementptr i8, ptr %22, i64 %24, !dbg !2502
  %25 = load ptr, ptr %self, align 8, !dbg !2503
  %ptradd3 = getelementptr inbounds i8, ptr %25, i64 64, !dbg !2503
  %26 = load ptr, ptr %self, align 8, !dbg !2504
  %ptradd4 = getelementptr inbounds i8, ptr %26, i64 40, !dbg !2504
  %27 = load i64, ptr %ptradd4, align 8, !dbg !2504
  %ptradd5 = getelementptr inbounds i8, ptr %ptradd3, i64 %27, !dbg !2504
  %eq6 = icmp eq ptr %ptradd_any2, %ptradd5, !dbg !2502
  %28 = zext i1 %eq6 to i8, !dbg !2502
  store i8 %28, ptr %is_realloc_of_last, align 1, !dbg !2502
  %29 = load i8, ptr %is_realloc_of_last, align 1, !dbg !2505
  %30 = trunc i8 %29 to i1, !dbg !2505
  br i1 %30, label %if.then7, label %if.exit20, !dbg !2505

if.then7:                                         ; preds = %if.exit
    #dbg_declare(ptr %diff, !2506, !DIExpression(), !2509)
  %31 = load i64, ptr %size, align 8, !dbg !2510
  %32 = load ptr, ptr %chunk, align 8, !dbg !2511
  %33 = load i64, ptr %32, align 8, !dbg !2511
  %sub = sub i64 %31, %33, !dbg !2510
  store i64 %sub, ptr %diff, align 8, !dbg !2510
  %34 = load i64, ptr %diff, align 8, !dbg !2512
  %eq8 = icmp eq i64 %34, 0, !dbg !2512
  br i1 %eq8, label %if.then9, label %if.exit11, !dbg !2512

if.then9:                                         ; preds = %if.then7
  %35 = load ptr, ptr %pointer, align 8, !dbg !2513
  store ptr %35, ptr %0, align 8, !dbg !2513
  ret i64 0, !dbg !2513

if.exit11:                                        ; preds = %if.then7
  %36 = load ptr, ptr %self, align 8, !dbg !2514
  %ptradd12 = getelementptr inbounds i8, ptr %36, i64 48, !dbg !2514
  %37 = load i64, ptr %ptradd12, align 8, !dbg !2514
  %38 = load ptr, ptr %self, align 8, !dbg !2515
  %ptradd13 = getelementptr inbounds i8, ptr %38, i64 40, !dbg !2515
  %39 = load i64, ptr %ptradd13, align 8, !dbg !2515
  %sub14 = sub i64 %37, %39, !dbg !2514
  %40 = load i64, ptr %diff, align 8, !dbg !2516
  %lt = icmp slt i64 %40, %sub14, !dbg !2514
  %check = icmp slt i64 %sub14, 0, !dbg !2514
  %siui-lt = or i1 %check, %lt, !dbg !2514
  br i1 %siui-lt, label %if.then15, label %if.exit19, !dbg !2514

if.then15:                                        ; preds = %if.exit11
  %41 = load ptr, ptr %chunk, align 8, !dbg !2517
  %42 = load i64, ptr %41, align 8, !dbg !2517
  %43 = load i64, ptr %diff, align 8, !dbg !2519
  %add = add i64 %42, %43, !dbg !2517
  store i64 %add, ptr %41, align 8, !dbg !2517
  %44 = load ptr, ptr %self, align 8, !dbg !2520
  %ptradd16 = getelementptr inbounds i8, ptr %44, i64 40, !dbg !2520
  %45 = load i64, ptr %ptradd16, align 8, !dbg !2520
  %46 = load i64, ptr %diff, align 8, !dbg !2521
  %add17 = add i64 %45, %46, !dbg !2520
  store i64 %add17, ptr %ptradd16, align 8, !dbg !2520
  %47 = load ptr, ptr %pointer, align 8, !dbg !2522
  store ptr %47, ptr %0, align 8, !dbg !2522
  ret i64 0, !dbg !2522

if.exit19:                                        ; preds = %if.exit11
  br label %if.exit20, !dbg !2522

if.exit20:                                        ; preds = %if.exit19, %if.exit
    #dbg_declare(ptr %data, !2523, !DIExpression(), !2524)
  %48 = load ptr, ptr %self, align 8, !dbg !2525
  %49 = load i64, ptr %size, align 8, !dbg !2526
  %50 = load i64, ptr %alignment, align 8, !dbg !2527
  %lt21 = icmp ult i64 0, %49, !dbg !2525
  br i1 %lt21, label %assert_ok23, label %assert_fail22, !dbg !2525

assert_fail22:                                    ; preds = %if.exit20
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2525
  call void %51(ptr @.panic_msg.101, i64 29, ptr @.file.121, i64 17, ptr @.func.20, i64 6, i32 233) #6, !dbg !2525
  unreachable, !dbg !2525

assert_ok23:                                      ; preds = %if.exit20
  %i2nb = icmp eq i64 %50, 0, !dbg !2528
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !2528

or.rhs:                                           ; preds = %assert_ok23
  store i64 %50, ptr %x, align 8
  %52 = load i64, ptr %x, align 8, !dbg !2529
  %neq = icmp ne i64 0, %52, !dbg !2529
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !2529

and.rhs:                                          ; preds = %or.rhs
  %53 = load i64, ptr %x, align 8, !dbg !2532
  %54 = load i64, ptr %x, align 8, !dbg !2533
  %sub24 = sub i64 %54, 1, !dbg !2533
  %and = and i64 %53, %sub24, !dbg !2532
  %eq25 = icmp eq i64 %and, 0, !dbg !2532
  br label %and.phi, !dbg !2532

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq25, %and.rhs ], !dbg !2532
  br label %or.phi, !dbg !2532

or.phi:                                           ; preds = %and.phi, %assert_ok23
  %val26 = phi i1 [ true, %assert_ok23 ], [ %val, %and.phi ], !dbg !2532
  br i1 %val26, label %assert_ok28, label %assert_fail27, !dbg !2532

assert_fail27:                                    ; preds = %or.phi
  %55 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2525
  call void %55(ptr @.panic_msg.16, i64 65, ptr @.file.121, i64 17, ptr @.func.20, i64 6, i32 233) #6, !dbg !2525
  unreachable, !dbg !2525

assert_ok28:                                      ; preds = %or.phi
  %le = icmp ule i64 %50, 268435456, !dbg !2525
  br i1 %le, label %assert_ok30, label %assert_fail29, !dbg !2525

assert_fail29:                                    ; preds = %assert_ok28
  %56 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2525
  call void %56(ptr @.panic_msg.17, i64 80, ptr @.file.121, i64 17, ptr @.func.20, i64 6, i32 233) #6, !dbg !2525
  unreachable, !dbg !2525

assert_ok30:                                      ; preds = %assert_ok28
  %57 = call i64 @std.core.mem.allocator.TempAllocator.acquire(ptr %retparam31, ptr %48, i64 %49, i32 0, i64 %50), !dbg !2525
  %not_err32 = icmp eq i64 %57, 0, !dbg !2525
  %58 = call i1 @llvm.expect.i1(i1 %not_err32, i1 true), !dbg !2525
  br i1 %58, label %after_check34, label %assign_optional33, !dbg !2525

assign_optional33:                                ; preds = %assert_ok30
  store i64 %57, ptr %error_var, align 8, !dbg !2525
  br label %guard_block, !dbg !2525

after_check34:                                    ; preds = %assert_ok30
  br label %noerr_block, !dbg !2525

guard_block:                                      ; preds = %assign_optional33
  %59 = load i64, ptr %error_var, align 8, !dbg !2525
  ret i64 %59, !dbg !2525

noerr_block:                                      ; preds = %after_check34
  %60 = load ptr, ptr %retparam31, align 8, !dbg !2525
  store ptr %60, ptr %data, align 8, !dbg !2525
    #dbg_declare(ptr %len_to_copy, !2534, !DIExpression(), !2535)
  %61 = load ptr, ptr %chunk, align 8, !dbg !2536
  %62 = load i64, ptr %61, align 8, !dbg !2536
  %63 = load i64, ptr %size, align 8, !dbg !2537
  %gt = icmp ugt i64 %62, %63, !dbg !2536
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !2536

cond.lhs:                                         ; preds = %noerr_block
  %64 = load i64, ptr %size, align 8, !dbg !2538
  br label %cond.phi, !dbg !2538

cond.rhs:                                         ; preds = %noerr_block
  %65 = load ptr, ptr %chunk, align 8, !dbg !2539
  %66 = load i64, ptr %65, align 8, !dbg !2539
  br label %cond.phi, !dbg !2539

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val35 = phi i64 [ %64, %cond.lhs ], [ %66, %cond.rhs ], !dbg !2539
  store i64 %val35, ptr %len_to_copy, align 8, !dbg !2539
  %67 = load ptr, ptr %data, align 8
  store ptr %67, ptr %dst, align 8
  %68 = load ptr, ptr %pointer, align 8
  store ptr %68, ptr %src, align 8
  %69 = load i64, ptr %len_to_copy, align 8
  store i64 %69, ptr %len, align 8
  %70 = load ptr, ptr %dst, align 8, !dbg !2540
  %neq36 = icmp ne ptr %70, null, !dbg !2540
  br i1 %neq36, label %assert_ok38, label %assert_fail37, !dbg !2540

assert_fail37:                                    ; preds = %cond.phi
  %71 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2540
  call void %71(ptr @.panic_msg.75, i64 37, ptr @.file.71, i64 6, ptr @.func.20, i64 6, i32 329) #6, !dbg !2540
  unreachable, !dbg !2540

assert_ok38:                                      ; preds = %cond.phi
  %72 = load ptr, ptr %src, align 8, !dbg !2544
  %neq39 = icmp ne ptr %72, null, !dbg !2544
  br i1 %neq39, label %or.phi42, label %or.rhs40, !dbg !2544

or.rhs40:                                         ; preds = %assert_ok38
  %73 = load i64, ptr %len, align 8, !dbg !2545
  %eq41 = icmp eq i64 0, %73, !dbg !2545
  br label %or.phi42, !dbg !2545

or.phi42:                                         ; preds = %or.rhs40, %assert_ok38
  %val43 = phi i1 [ true, %assert_ok38 ], [ %eq41, %or.rhs40 ], !dbg !2545
  br i1 %val43, label %assert_ok45, label %assert_fail44, !dbg !2545

assert_fail44:                                    ; preds = %or.phi42
  %74 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2546
  call void %74(ptr @.panic_msg.76, i64 94, ptr @.file.121, i64 17, ptr @.func.20, i64 6, i32 235) #6, !dbg !2546
  unreachable, !dbg !2546

assert_ok45:                                      ; preds = %or.phi42
  %75 = load i64, ptr %len, align 8, !dbg !2547
  %eq46 = icmp eq i64 0, %75, !dbg !2547
  br i1 %eq46, label %or.phi50, label %or.rhs47, !dbg !2547

or.rhs47:                                         ; preds = %assert_ok45
  %76 = load ptr, ptr %dst, align 8, !dbg !2548
  %77 = load i64, ptr %len, align 8, !dbg !2549
  %ptradd_any48 = getelementptr i8, ptr %76, i64 %77, !dbg !2549
  %78 = load ptr, ptr %src, align 8, !dbg !2550
  %le49 = icmp ule ptr %ptradd_any48, %78, !dbg !2548
  br label %or.phi50, !dbg !2548

or.phi50:                                         ; preds = %or.rhs47, %assert_ok45
  %val51 = phi i1 [ true, %assert_ok45 ], [ %le49, %or.rhs47 ], !dbg !2548
  br i1 %val51, label %or.phi55, label %or.rhs52, !dbg !2548

or.rhs52:                                         ; preds = %or.phi50
  %79 = load ptr, ptr %src, align 8, !dbg !2551
  %80 = load i64, ptr %len, align 8, !dbg !2552
  %ptradd_any53 = getelementptr i8, ptr %79, i64 %80, !dbg !2552
  %81 = load ptr, ptr %dst, align 8, !dbg !2553
  %le54 = icmp ule ptr %ptradd_any53, %81, !dbg !2551
  br label %or.phi55, !dbg !2551

or.phi55:                                         ; preds = %or.rhs52, %or.phi50
  %val56 = phi i1 [ true, %or.phi50 ], [ %le54, %or.rhs52 ], !dbg !2551
  br i1 %val56, label %assert_ok58, label %assert_fail57, !dbg !2551

assert_fail57:                                    ; preds = %or.phi55
  %82 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2546
  call void %82(ptr @.panic_msg.77, i64 95, ptr @.file.121, i64 17, ptr @.func.20, i64 6, i32 235) #6, !dbg !2546
  unreachable, !dbg !2546

assert_ok58:                                      ; preds = %or.phi55
  %83 = load ptr, ptr %dst, align 8, !dbg !2554
  %84 = load ptr, ptr %src, align 8, !dbg !2555
  %85 = load i64, ptr %len, align 8, !dbg !2556
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %83, ptr align 16 %84, i64 %85, i1 false), !dbg !2557
  %86 = load i8, ptr %is_realloc_of_last, align 1, !dbg !2558
  %87 = trunc i8 %86 to i1, !dbg !2558
  br i1 %87, label %if.then59, label %if.exit64, !dbg !2558

if.then59:                                        ; preds = %assert_ok58
  %88 = load ptr, ptr %self, align 8, !dbg !2559
  %ptradd60 = getelementptr inbounds i8, ptr %88, i64 40, !dbg !2559
  %89 = load ptr, ptr %chunk, align 8, !dbg !2561
  %ptrxi = ptrtoint ptr %89 to i64, !dbg !2561
  %90 = load ptr, ptr %self, align 8, !dbg !2562
  %ptradd61 = getelementptr inbounds i8, ptr %90, i64 64, !dbg !2562
  %ptrxi62 = ptrtoint ptr %ptradd61 to i64, !dbg !2562
  %sub63 = sub i64 %ptrxi, %ptrxi62, !dbg !2561
  store i64 %sub63, ptr %ptradd60, align 8, !dbg !2561
  br label %if.exit64, !dbg !2563

if.exit64:                                        ; preds = %if.then59, %assert_ok58
  %91 = load ptr, ptr %data, align 8, !dbg !2564
  store ptr %91, ptr %0, align 8, !dbg !2564
  ret i64 0, !dbg !2564

panic:                                            ; preds = %entry
  %92 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2475
  call void %92(ptr @.panic_msg, i64 62, ptr @.file.121, i64 17, ptr @.func.20, i64 6, i32 201) #6, !dbg !2475
  unreachable, !dbg !2475
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.TempAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !2565 {
entry:
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %x = alloca i64, align 8
  %start_mem = alloca ptr, align 8
  %starting_ptr = alloca ptr, align 8
  %aligned_header_start = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %alignment7 = alloca i64, align 8
  %x8 = alloca i64, align 8
  %mem = alloca ptr, align 8
  %ptr19 = alloca ptr, align 8
  %alignment20 = alloca i64, align 8
  %x22 = alloca i64, align 8
  %new_usage = alloca i64, align 8
  %addr = alloca ptr, align 8
  %size38 = alloca i64, align 8
  %chunk_start = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %page = alloca ptr, align 8
  %total_alloc_size = alloca i64, align 8
  %x48 = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %size60 = alloca i64, align 8
  %alignment61 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x67 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %error_var87 = alloca i64, align 8
  %allocator88 = alloca %any, align 8
  %size89 = alloca i64, align 8
  %alignment90 = alloca i64, align 8
  %blockret91 = alloca ptr, align 8
  %x97 = alloca i64, align 8
  %.inlinecache116 = alloca ptr, align 8
  %.cachedtype117 = alloca ptr, align 8
  %retparam126 = alloca ptr, align 8
  %start = alloca ptr, align 8
  %x134 = alloca i64, align 8
  %padded_header_size = alloca i64, align 8
  %x149 = alloca i64, align 8
  %total_alloc_size159 = alloca i64, align 8
  %alloc = alloca ptr, align 8
  %error_var161 = alloca i64, align 8
  %x163 = alloca i64, align 8
  %.inlinecache179 = alloca ptr, align 8
  %.cachedtype180 = alloca ptr, align 8
  %retparam189 = alloca ptr, align 8
  %x197 = alloca i64, align 8
  %x210 = alloca i64, align 8
  %reterr228 = alloca i64, align 8
  store ptr null, ptr %.cachedtype180, align 8, !dbg !2568
  store ptr null, ptr %.cachedtype117, align 8, !dbg !2568
  store ptr null, ptr %.cachedtype, align 8, !dbg !2568
  %5 = icmp eq ptr %1, null, !dbg !2568
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2568
  br i1 %6, label %panic, label %checkok, !dbg !2568

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2569, !DIExpression(), !2570)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !2571, !DIExpression(), !2572)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !2573, !DIExpression(), !2574)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !2575, !DIExpression(), !2576)
  %7 = load i64, ptr %size, align 8, !dbg !2577
  %lt = icmp ult i64 0, %7, !dbg !2577
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2577

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2577
  call void %8(ptr @.panic_msg.101, i64 29, ptr @.file.121, i64 17, ptr @.func.15, i64 7, i32 247) #6, !dbg !2577
  unreachable, !dbg !2577

assert_ok:                                        ; preds = %checkok
  %9 = load i64, ptr %alignment, align 8, !dbg !2579
  %i2nb = icmp eq i64 %9, 0, !dbg !2579
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !2579

or.rhs:                                           ; preds = %assert_ok
  %10 = load i64, ptr %alignment, align 8
  store i64 %10, ptr %x, align 8
  %11 = load i64, ptr %x, align 8, !dbg !2580
  %neq = icmp ne i64 0, %11, !dbg !2580
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !2580

and.rhs:                                          ; preds = %or.rhs
  %12 = load i64, ptr %x, align 8, !dbg !2583
  %13 = load i64, ptr %x, align 8, !dbg !2584
  %sub = sub i64 %13, 1, !dbg !2584
  %and = and i64 %12, %sub, !dbg !2583
  %eq = icmp eq i64 %and, 0, !dbg !2583
  br label %and.phi, !dbg !2583

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2583
  br label %or.phi, !dbg !2583

or.phi:                                           ; preds = %and.phi, %assert_ok
  %val1 = phi i1 [ true, %assert_ok ], [ %val, %and.phi ], !dbg !2583
  br i1 %val1, label %assert_ok3, label %assert_fail2, !dbg !2583

assert_fail2:                                     ; preds = %or.phi
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2579
  call void %14(ptr @.panic_msg.16, i64 65, ptr @.file.121, i64 17, ptr @.func.15, i64 7, i32 248) #6, !dbg !2579
  unreachable, !dbg !2579

assert_ok3:                                       ; preds = %or.phi
  %15 = load i64, ptr %alignment, align 8, !dbg !2585
  %le = icmp ule i64 %15, 268435456, !dbg !2585
  br i1 %le, label %assert_ok5, label %assert_fail4, !dbg !2585

assert_fail4:                                     ; preds = %assert_ok3
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2585
  call void %16(ptr @.panic_msg.17, i64 80, ptr @.file.121, i64 17, ptr @.func.15, i64 7, i32 249) #6, !dbg !2585
  unreachable, !dbg !2585

assert_ok5:                                       ; preds = %assert_ok3
  %17 = load i64, ptr %alignment, align 8, !dbg !2586
  %18 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %17) #7, !dbg !2587
  store i64 %18, ptr %alignment, align 8, !dbg !2587
    #dbg_declare(ptr %start_mem, !2588, !DIExpression(), !2589)
  %19 = load ptr, ptr %self, align 8, !dbg !2590
  %ptradd = getelementptr inbounds i8, ptr %19, i64 64, !dbg !2590
  store ptr %ptradd, ptr %start_mem, align 8, !dbg !2590
    #dbg_declare(ptr %starting_ptr, !2591, !DIExpression(), !2592)
  %20 = load ptr, ptr %start_mem, align 8, !dbg !2593
  %21 = load ptr, ptr %self, align 8, !dbg !2594
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 40, !dbg !2594
  %22 = load i64, ptr %ptradd6, align 8, !dbg !2594
  %ptradd_any = getelementptr i8, ptr %20, i64 %22, !dbg !2594
  store ptr %ptradd_any, ptr %starting_ptr, align 8, !dbg !2594
    #dbg_declare(ptr %aligned_header_start, !2595, !DIExpression(), !2596)
  %23 = load ptr, ptr %starting_ptr, align 8
  store ptr %23, ptr %ptr, align 8
  store i64 8, ptr %alignment7, align 8
  %24 = load ptr, ptr %ptr, align 8, !dbg !2597
  %ptrxi = ptrtoint ptr %24 to i64, !dbg !2597
  %25 = load i64, ptr %alignment7, align 8, !dbg !2600
  store i64 %25, ptr %x8, align 8
  %26 = load i64, ptr %x8, align 8, !dbg !2601
  %neq9 = icmp ne i64 0, %26, !dbg !2601
  br i1 %neq9, label %and.rhs10, label %and.phi14, !dbg !2601

and.rhs10:                                        ; preds = %assert_ok5
  %27 = load i64, ptr %x8, align 8, !dbg !2604
  %28 = load i64, ptr %x8, align 8, !dbg !2605
  %sub11 = sub i64 %28, 1, !dbg !2605
  %and12 = and i64 %27, %sub11, !dbg !2604
  %eq13 = icmp eq i64 %and12, 0, !dbg !2604
  br label %and.phi14, !dbg !2604

and.phi14:                                        ; preds = %and.rhs10, %assert_ok5
  %val15 = phi i1 [ false, %assert_ok5 ], [ %eq13, %and.rhs10 ], !dbg !2604
  br i1 %val15, label %assert_ok17, label %assert_fail16, !dbg !2604

assert_fail16:                                    ; preds = %and.phi14
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2603
  call void %29(ptr @.panic_msg.70, i64 51, ptr @.file.71, i64 6, ptr @.func.15, i64 7, i32 290) #6, !dbg !2603
  unreachable, !dbg !2603

assert_ok17:                                      ; preds = %and.phi14
  %30 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %25), !dbg !2606
  %intptr = inttoptr i64 %30 to ptr, !dbg !2606
  store ptr %intptr, ptr %aligned_header_start, align 8, !dbg !2606
    #dbg_declare(ptr %mem, !2607, !DIExpression(), !2608)
  %31 = load ptr, ptr %aligned_header_start, align 8, !dbg !2609
  %ptradd_any18 = getelementptr i8, ptr %31, i64 8, !dbg !2610
  store ptr %ptradd_any18, ptr %mem, align 8, !dbg !2610
  %32 = load i64, ptr %alignment, align 8, !dbg !2611
  %gt = icmp ugt i64 %32, 8, !dbg !2611
  br i1 %gt, label %if.then, label %if.exit, !dbg !2611

if.then:                                          ; preds = %assert_ok17
  %33 = load ptr, ptr %mem, align 8
  store ptr %33, ptr %ptr19, align 8
  %34 = load i64, ptr %alignment, align 8
  store i64 %34, ptr %alignment20, align 8
  %35 = load ptr, ptr %ptr19, align 8, !dbg !2612
  %ptrxi21 = ptrtoint ptr %35 to i64, !dbg !2612
  %36 = load i64, ptr %alignment20, align 8, !dbg !2616
  store i64 %36, ptr %x22, align 8
  %37 = load i64, ptr %x22, align 8, !dbg !2617
  %neq23 = icmp ne i64 0, %37, !dbg !2617
  br i1 %neq23, label %and.rhs24, label %and.phi28, !dbg !2617

and.rhs24:                                        ; preds = %if.then
  %38 = load i64, ptr %x22, align 8, !dbg !2620
  %39 = load i64, ptr %x22, align 8, !dbg !2621
  %sub25 = sub i64 %39, 1, !dbg !2621
  %and26 = and i64 %38, %sub25, !dbg !2620
  %eq27 = icmp eq i64 %and26, 0, !dbg !2620
  br label %and.phi28, !dbg !2620

and.phi28:                                        ; preds = %and.rhs24, %if.then
  %val29 = phi i1 [ false, %if.then ], [ %eq27, %and.rhs24 ], !dbg !2620
  br i1 %val29, label %assert_ok31, label %assert_fail30, !dbg !2620

assert_fail30:                                    ; preds = %and.phi28
  %40 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2619
  call void %40(ptr @.panic_msg.70, i64 51, ptr @.file.71, i64 6, ptr @.func.15, i64 7, i32 290) #6, !dbg !2619
  unreachable, !dbg !2619

assert_ok31:                                      ; preds = %and.phi28
  %41 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi21, i64 %36), !dbg !2622
  %intptr32 = inttoptr i64 %41 to ptr, !dbg !2622
  store ptr %intptr32, ptr %mem, align 8, !dbg !2622
  br label %if.exit, !dbg !2622

if.exit:                                          ; preds = %assert_ok31, %assert_ok17
    #dbg_declare(ptr %new_usage, !2623, !DIExpression(), !2624)
  %42 = load ptr, ptr %mem, align 8, !dbg !2625
  %43 = load ptr, ptr %start_mem, align 8, !dbg !2626
  %44 = ptrtoint ptr %43 to i64, !dbg !2627
  %45 = ptrtoint ptr %42 to i64, !dbg !2627
  %46 = sub i64 %45, %44, !dbg !2627
  %47 = sdiv exact i64 %46, 1, !dbg !2627
  %48 = load i64, ptr %size, align 8, !dbg !2628
  %add = add i64 %47, %48, !dbg !2627
  store i64 %add, ptr %new_usage, align 8, !dbg !2627
  %49 = load i64, ptr %new_usage, align 8, !dbg !2629
  %50 = load ptr, ptr %self, align 8, !dbg !2630
  %ptradd33 = getelementptr inbounds i8, ptr %50, i64 48, !dbg !2630
  %51 = load i64, ptr %ptradd33, align 8, !dbg !2630
  %le34 = icmp ule i64 %49, %51, !dbg !2629
  br i1 %le34, label %if.then35, label %if.exit44, !dbg !2629

if.then35:                                        ; preds = %if.exit
  %52 = load ptr, ptr %starting_ptr, align 8
  store ptr %52, ptr %addr, align 8
  %53 = load i64, ptr %new_usage, align 8, !dbg !2631
  %54 = load ptr, ptr %self, align 8, !dbg !2633
  %ptradd36 = getelementptr inbounds i8, ptr %54, i64 40, !dbg !2633
  %55 = load i64, ptr %ptradd36, align 8, !dbg !2633
  %sub37 = sub i64 %53, %55, !dbg !2631
  store i64 %sub37, ptr %size38, align 8
    #dbg_declare(ptr %chunk_start, !2634, !DIExpression(), !2635)
  %56 = load ptr, ptr %mem, align 8, !dbg !2636
  %ptradd_any39 = getelementptr i8, ptr %56, i64 -8, !dbg !2637
  store ptr %ptradd_any39, ptr %chunk_start, align 8, !dbg !2637
  %57 = load ptr, ptr %chunk_start, align 8, !dbg !2638
  %58 = load i64, ptr %size, align 8, !dbg !2639
  store i64 %58, ptr %57, align 8, !dbg !2639
  %59 = load ptr, ptr %self, align 8, !dbg !2640
  %ptradd40 = getelementptr inbounds i8, ptr %59, i64 40, !dbg !2640
  %60 = load i64, ptr %new_usage, align 8, !dbg !2641
  store i64 %60, ptr %ptradd40, align 8, !dbg !2641
  %61 = load i32, ptr %init_type, align 4, !dbg !2642
  %eq41 = icmp eq i32 %61, 1, !dbg !2642
  br i1 %eq41, label %if.then42, label %if.exit43, !dbg !2642

if.then42:                                        ; preds = %if.then35
  %62 = load ptr, ptr %mem, align 8
  store ptr %62, ptr %dst, align 8
  %63 = load i64, ptr %size, align 8
  store i64 %63, ptr %len, align 8
  %64 = load ptr, ptr %dst, align 8, !dbg !2643
  %65 = load i64, ptr %len, align 8, !dbg !2646
  call void @llvm.memset.p0.i64(ptr align 16 %64, i8 0, i64 %65, i1 false), !dbg !2647
  br label %if.exit43, !dbg !2647

if.exit43:                                        ; preds = %if.then42, %if.then35
  %66 = load ptr, ptr %mem, align 8, !dbg !2648
  store ptr %66, ptr %0, align 8, !dbg !2648
  ret i64 0, !dbg !2648

if.exit44:                                        ; preds = %if.exit
    #dbg_declare(ptr %page, !2649, !DIExpression(), !2650)
  store ptr null, ptr %page, align 8, !dbg !2650
  %67 = load i64, ptr %alignment, align 8, !dbg !2651
  %lt45 = icmp ult i64 16, %67, !dbg !2651
  br i1 %lt45, label %if.then46, label %if.else148, !dbg !2651

if.then46:                                        ; preds = %if.exit44
    #dbg_declare(ptr %total_alloc_size, !2652, !DIExpression(), !2654)
  %68 = load i64, ptr %size, align 8, !dbg !2655
  %add47 = add i64 32, %68, !dbg !2656
  %69 = load i64, ptr %alignment, align 8, !dbg !2657
  store i64 %69, ptr %x48, align 8
  %70 = load i64, ptr %x48, align 8, !dbg !2658
  %neq49 = icmp ne i64 0, %70, !dbg !2658
  br i1 %neq49, label %and.rhs50, label %and.phi54, !dbg !2658

and.rhs50:                                        ; preds = %if.then46
  %71 = load i64, ptr %x48, align 8, !dbg !2661
  %72 = load i64, ptr %x48, align 8, !dbg !2662
  %sub51 = sub i64 %72, 1, !dbg !2662
  %and52 = and i64 %71, %sub51, !dbg !2661
  %eq53 = icmp eq i64 %and52, 0, !dbg !2661
  br label %and.phi54, !dbg !2661

and.phi54:                                        ; preds = %and.rhs50, %if.then46
  %val55 = phi i1 [ false, %if.then46 ], [ %eq53, %and.rhs50 ], !dbg !2661
  br i1 %val55, label %assert_ok57, label %assert_fail56, !dbg !2661

assert_fail56:                                    ; preds = %and.phi54
  %73 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2660
  call void %73(ptr @.panic_msg.70, i64 51, ptr @.file.121, i64 17, ptr @.func.15, i64 7, i32 282) #6, !dbg !2660
  unreachable, !dbg !2660

assert_ok57:                                      ; preds = %and.phi54
  %74 = call i64 @std.core.mem.aligned_offset(i64 %add47, i64 %69), !dbg !2660
  store i64 %74, ptr %total_alloc_size, align 8, !dbg !2660
  %75 = load i32, ptr %init_type, align 4, !dbg !2663
  %eq58 = icmp eq i32 %75, 1, !dbg !2663
  br i1 %eq58, label %if.then59, label %if.else, !dbg !2663

if.then59:                                        ; preds = %assert_ok57
  %76 = load ptr, ptr %self, align 8, !dbg !2664
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %76, i32 16, i1 false)
  %77 = load i64, ptr %total_alloc_size, align 8
  store i64 %77, ptr %size60, align 8
  %78 = load i64, ptr %alignment, align 8
  store i64 %78, ptr %alignment61, align 8
  %79 = load i64, ptr %size60, align 8, !dbg !2666
  %i2nb62 = icmp eq i64 %79, 0, !dbg !2666
  br i1 %i2nb62, label %if.then63, label %if.exit64, !dbg !2666

if.then63:                                        ; preds = %if.then59
  store ptr null, ptr %blockret, align 8, !dbg !2669
  br label %expr_block.exit, !dbg !2669

if.exit64:                                        ; preds = %if.then59
  %80 = load i64, ptr %size60, align 8, !dbg !2670
  %81 = load i64, ptr %alignment61, align 8, !dbg !2671
  %i2nb65 = icmp eq i64 %81, 0, !dbg !2672
  br i1 %i2nb65, label %or.phi75, label %or.rhs66, !dbg !2672

or.rhs66:                                         ; preds = %if.exit64
  store i64 %81, ptr %x67, align 8
  %82 = load i64, ptr %x67, align 8, !dbg !2673
  %neq68 = icmp ne i64 0, %82, !dbg !2673
  br i1 %neq68, label %and.rhs69, label %and.phi73, !dbg !2673

and.rhs69:                                        ; preds = %or.rhs66
  %83 = load i64, ptr %x67, align 8, !dbg !2676
  %84 = load i64, ptr %x67, align 8, !dbg !2677
  %sub70 = sub i64 %84, 1, !dbg !2677
  %and71 = and i64 %83, %sub70, !dbg !2676
  %eq72 = icmp eq i64 %and71, 0, !dbg !2676
  br label %and.phi73, !dbg !2676

and.phi73:                                        ; preds = %and.rhs69, %or.rhs66
  %val74 = phi i1 [ false, %or.rhs66 ], [ %eq72, %and.rhs69 ], !dbg !2676
  br label %or.phi75, !dbg !2676

or.phi75:                                         ; preds = %and.phi73, %if.exit64
  %val76 = phi i1 [ true, %if.exit64 ], [ %val74, %and.phi73 ], !dbg !2676
  br i1 %val76, label %assert_ok78, label %assert_fail77, !dbg !2676

assert_fail77:                                    ; preds = %or.phi75
  %85 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2678
  call void %85(ptr @.panic_msg.16, i64 65, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 140) #6, !dbg !2678
  unreachable, !dbg !2678

assert_ok78:                                      ; preds = %or.phi75
  %le79 = icmp ule i64 %81, 268435456, !dbg !2678
  br i1 %le79, label %assert_ok81, label %assert_fail80, !dbg !2678

assert_fail80:                                    ; preds = %assert_ok78
  %86 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2678
  call void %86(ptr @.panic_msg.17, i64 80, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 140) #6, !dbg !2678
  unreachable, !dbg !2678

assert_ok81:                                      ; preds = %assert_ok78
  %lt82 = icmp ult i64 0, %80, !dbg !2678
  br i1 %lt82, label %assert_ok84, label %assert_fail83, !dbg !2678

assert_fail83:                                    ; preds = %assert_ok81
  %87 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2678
  call void %87(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 140) #6, !dbg !2678
  unreachable, !dbg !2678

assert_ok84:                                      ; preds = %assert_ok81
  %ptradd85 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2678
  %88 = load i64, ptr %ptradd85, align 8, !dbg !2678
  %89 = inttoptr i64 %88 to ptr, !dbg !2678
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2568
  %90 = icmp eq ptr %89, %type, !dbg !2568
  br i1 %90, label %cache_hit, label %cache_miss, !dbg !2568

cache_miss:                                       ; preds = %assert_ok84
  %ptradd86 = getelementptr inbounds i8, ptr %89, i64 16, !dbg !2568
  %91 = load ptr, ptr %ptradd86, align 8, !dbg !2568
  %92 = call ptr @.dyn_search(ptr %91, ptr @"$sel.acquire"), !dbg !2568
  store ptr %92, ptr %.inlinecache, align 8, !dbg !2568
  store ptr %89, ptr %.cachedtype, align 8, !dbg !2568
  br label %93, !dbg !2568

cache_hit:                                        ; preds = %assert_ok84
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2568
  br label %93, !dbg !2568

93:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %92, %cache_miss ], !dbg !2568
  %94 = icmp eq ptr %fn_phi, null, !dbg !2568
  br i1 %94, label %missing_function, label %match, !dbg !2568

missing_function:                                 ; preds = %93
  %95 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2568
  call void %95(ptr @.panic_msg.19, i64 44, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 140) #6, !dbg !2568
  unreachable, !dbg !2568

match:                                            ; preds = %93
  %96 = load ptr, ptr %allocator, align 8
  %97 = call i64 %fn_phi(ptr %retparam, ptr %96, i64 %80, i32 1, i64 %81), !dbg !2678
  %not_err = icmp eq i64 %97, 0, !dbg !2678
  %98 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2678
  br i1 %98, label %after_check, label %assign_optional, !dbg !2678

assign_optional:                                  ; preds = %match
  store i64 %97, ptr %error_var, align 8, !dbg !2678
  br label %guard_block, !dbg !2678

after_check:                                      ; preds = %match
  %99 = load ptr, ptr %retparam, align 8, !dbg !2678
  store ptr %99, ptr %blockret, align 8, !dbg !2678
  br label %expr_block.exit, !dbg !2678

expr_block.exit:                                  ; preds = %after_check, %if.then63
  br label %noerr_block, !dbg !2678

guard_block:                                      ; preds = %assign_optional
  %100 = load i64, ptr %error_var, align 8, !dbg !2678
  ret i64 %100, !dbg !2678

noerr_block:                                      ; preds = %expr_block.exit
  %101 = load ptr, ptr %blockret, align 8, !dbg !2678
  store ptr %101, ptr %mem, align 8, !dbg !2678
  br label %if.exit133, !dbg !2678

if.else:                                          ; preds = %assert_ok57
  %102 = load ptr, ptr %self, align 8, !dbg !2679
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator88, ptr align 8 %102, i32 16, i1 false)
  %103 = load i64, ptr %total_alloc_size, align 8
  store i64 %103, ptr %size89, align 8
  %104 = load i64, ptr %alignment, align 8
  store i64 %104, ptr %alignment90, align 8
  %105 = load i64, ptr %size89, align 8, !dbg !2681
  %i2nb92 = icmp eq i64 %105, 0, !dbg !2681
  br i1 %i2nb92, label %if.then93, label %if.exit94, !dbg !2681

if.then93:                                        ; preds = %if.else
  store ptr null, ptr %blockret91, align 8, !dbg !2684
  br label %expr_block.exit130, !dbg !2684

if.exit94:                                        ; preds = %if.else
  %106 = load i64, ptr %size89, align 8, !dbg !2685
  %107 = load i64, ptr %alignment90, align 8, !dbg !2686
  %i2nb95 = icmp eq i64 %107, 0, !dbg !2687
  br i1 %i2nb95, label %or.phi105, label %or.rhs96, !dbg !2687

or.rhs96:                                         ; preds = %if.exit94
  store i64 %107, ptr %x97, align 8
  %108 = load i64, ptr %x97, align 8, !dbg !2688
  %neq98 = icmp ne i64 0, %108, !dbg !2688
  br i1 %neq98, label %and.rhs99, label %and.phi103, !dbg !2688

and.rhs99:                                        ; preds = %or.rhs96
  %109 = load i64, ptr %x97, align 8, !dbg !2691
  %110 = load i64, ptr %x97, align 8, !dbg !2692
  %sub100 = sub i64 %110, 1, !dbg !2692
  %and101 = and i64 %109, %sub100, !dbg !2691
  %eq102 = icmp eq i64 %and101, 0, !dbg !2691
  br label %and.phi103, !dbg !2691

and.phi103:                                       ; preds = %and.rhs99, %or.rhs96
  %val104 = phi i1 [ false, %or.rhs96 ], [ %eq102, %and.rhs99 ], !dbg !2691
  br label %or.phi105, !dbg !2691

or.phi105:                                        ; preds = %and.phi103, %if.exit94
  %val106 = phi i1 [ true, %if.exit94 ], [ %val104, %and.phi103 ], !dbg !2691
  br i1 %val106, label %assert_ok108, label %assert_fail107, !dbg !2691

assert_fail107:                                   ; preds = %or.phi105
  %111 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2693
  call void %111(ptr @.panic_msg.16, i64 65, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 133) #6, !dbg !2693
  unreachable, !dbg !2693

assert_ok108:                                     ; preds = %or.phi105
  %le109 = icmp ule i64 %107, 268435456, !dbg !2693
  br i1 %le109, label %assert_ok111, label %assert_fail110, !dbg !2693

assert_fail110:                                   ; preds = %assert_ok108
  %112 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2693
  call void %112(ptr @.panic_msg.17, i64 80, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 133) #6, !dbg !2693
  unreachable, !dbg !2693

assert_ok111:                                     ; preds = %assert_ok108
  %lt112 = icmp ult i64 0, %106, !dbg !2693
  br i1 %lt112, label %assert_ok114, label %assert_fail113, !dbg !2693

assert_fail113:                                   ; preds = %assert_ok111
  %113 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2693
  call void %113(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 133) #6, !dbg !2693
  unreachable, !dbg !2693

assert_ok114:                                     ; preds = %assert_ok111
  %ptradd115 = getelementptr inbounds i8, ptr %allocator88, i64 8, !dbg !2693
  %114 = load i64, ptr %ptradd115, align 8, !dbg !2693
  %115 = inttoptr i64 %114 to ptr, !dbg !2693
  %type118 = load ptr, ptr %.cachedtype117, align 8, !dbg !2568
  %116 = icmp eq ptr %115, %type118, !dbg !2568
  br i1 %116, label %cache_hit121, label %cache_miss119, !dbg !2568

cache_miss119:                                    ; preds = %assert_ok114
  %ptradd120 = getelementptr inbounds i8, ptr %115, i64 16, !dbg !2568
  %117 = load ptr, ptr %ptradd120, align 8, !dbg !2568
  %118 = call ptr @.dyn_search(ptr %117, ptr @"$sel.acquire"), !dbg !2568
  store ptr %118, ptr %.inlinecache116, align 8, !dbg !2568
  store ptr %115, ptr %.cachedtype117, align 8, !dbg !2568
  br label %119, !dbg !2568

cache_hit121:                                     ; preds = %assert_ok114
  %cache_hit_fn122 = load ptr, ptr %.inlinecache116, align 8, !dbg !2568
  br label %119, !dbg !2568

119:                                              ; preds = %cache_hit121, %cache_miss119
  %fn_phi123 = phi ptr [ %cache_hit_fn122, %cache_hit121 ], [ %118, %cache_miss119 ], !dbg !2568
  %120 = icmp eq ptr %fn_phi123, null, !dbg !2568
  br i1 %120, label %missing_function124, label %match125, !dbg !2568

missing_function124:                              ; preds = %119
  %121 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2568
  call void %121(ptr @.panic_msg.19, i64 44, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 133) #6, !dbg !2568
  unreachable, !dbg !2568

match125:                                         ; preds = %119
  %122 = load ptr, ptr %allocator88, align 8
  %123 = call i64 %fn_phi123(ptr %retparam126, ptr %122, i64 %106, i32 0, i64 %107), !dbg !2693
  %not_err127 = icmp eq i64 %123, 0, !dbg !2693
  %124 = call i1 @llvm.expect.i1(i1 %not_err127, i1 true), !dbg !2693
  br i1 %124, label %after_check129, label %assign_optional128, !dbg !2693

assign_optional128:                               ; preds = %match125
  store i64 %123, ptr %error_var87, align 8, !dbg !2693
  br label %guard_block131, !dbg !2693

after_check129:                                   ; preds = %match125
  %125 = load ptr, ptr %retparam126, align 8, !dbg !2693
  store ptr %125, ptr %blockret91, align 8, !dbg !2693
  br label %expr_block.exit130, !dbg !2693

expr_block.exit130:                               ; preds = %after_check129, %if.then93
  br label %noerr_block132, !dbg !2693

guard_block131:                                   ; preds = %assign_optional128
  %126 = load i64, ptr %error_var87, align 8, !dbg !2693
  ret i64 %126, !dbg !2693

noerr_block132:                                   ; preds = %expr_block.exit130
  %127 = load ptr, ptr %blockret91, align 8, !dbg !2693
  store ptr %127, ptr %mem, align 8, !dbg !2693
  br label %if.exit133, !dbg !2693

if.exit133:                                       ; preds = %noerr_block132, %noerr_block
    #dbg_declare(ptr %start, !2694, !DIExpression(), !2695)
  %128 = load ptr, ptr %mem, align 8, !dbg !2696
  store ptr %128, ptr %start, align 8, !dbg !2696
  %129 = load ptr, ptr %mem, align 8, !dbg !2697
  %130 = load i64, ptr %alignment, align 8, !dbg !2698
  store i64 %130, ptr %x134, align 8
  %131 = load i64, ptr %x134, align 8, !dbg !2699
  %neq135 = icmp ne i64 0, %131, !dbg !2699
  br i1 %neq135, label %and.rhs136, label %and.phi140, !dbg !2699

and.rhs136:                                       ; preds = %if.exit133
  %132 = load i64, ptr %x134, align 8, !dbg !2702
  %133 = load i64, ptr %x134, align 8, !dbg !2703
  %sub137 = sub i64 %133, 1, !dbg !2703
  %and138 = and i64 %132, %sub137, !dbg !2702
  %eq139 = icmp eq i64 %and138, 0, !dbg !2702
  br label %and.phi140, !dbg !2702

and.phi140:                                       ; preds = %and.rhs136, %if.exit133
  %val141 = phi i1 [ false, %if.exit133 ], [ %eq139, %and.rhs136 ], !dbg !2702
  br i1 %val141, label %assert_ok143, label %assert_fail142, !dbg !2702

assert_fail142:                                   ; preds = %and.phi140
  %134 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2701
  call void %134(ptr @.panic_msg.70, i64 51, ptr @.file.121, i64 17, ptr @.func.15, i64 7, i32 292) #6, !dbg !2701
  unreachable, !dbg !2701

assert_ok143:                                     ; preds = %and.phi140
  %135 = call i64 @std.core.mem.aligned_offset(i64 32, i64 %130), !dbg !2701
  %ptradd_any144 = getelementptr i8, ptr %129, i64 %135, !dbg !2697
  store ptr %ptradd_any144, ptr %mem, align 8, !dbg !2697
  %136 = load ptr, ptr %mem, align 8, !dbg !2704
  %ptradd_any145 = getelementptr i8, ptr %136, i64 -32, !dbg !2705
  store ptr %ptradd_any145, ptr %page, align 8, !dbg !2705
  %137 = load ptr, ptr %page, align 8, !dbg !2706
  %ptradd146 = getelementptr inbounds i8, ptr %137, i64 8, !dbg !2706
  %138 = load ptr, ptr %start, align 8, !dbg !2707
  store ptr %138, ptr %ptradd146, align 8, !dbg !2707
  %139 = load ptr, ptr %page, align 8, !dbg !2708
  %ptradd147 = getelementptr inbounds i8, ptr %139, i64 16, !dbg !2708
  %140 = load i64, ptr %size, align 8, !dbg !2709
  %or = or i64 %140, -9223372036854775808, !dbg !2709
  store i64 %or, ptr %ptradd147, align 8, !dbg !2709
  br label %if.exit224, !dbg !2709

if.else148:                                       ; preds = %if.exit44
    #dbg_declare(ptr %padded_header_size, !2710, !DIExpression(), !2712)
  store i64 16, ptr %x149, align 8
  %141 = load i64, ptr %x149, align 8, !dbg !2713
  %neq150 = icmp ne i64 0, %141, !dbg !2713
  br i1 %neq150, label %and.rhs151, label %and.phi155, !dbg !2713

and.rhs151:                                       ; preds = %if.else148
  %142 = load i64, ptr %x149, align 8, !dbg !2716
  %143 = load i64, ptr %x149, align 8, !dbg !2717
  %sub152 = sub i64 %143, 1, !dbg !2717
  %and153 = and i64 %142, %sub152, !dbg !2716
  %eq154 = icmp eq i64 %and153, 0, !dbg !2716
  br label %and.phi155, !dbg !2716

and.phi155:                                       ; preds = %and.rhs151, %if.else148
  %val156 = phi i1 [ false, %if.else148 ], [ %eq154, %and.rhs151 ], !dbg !2716
  br i1 %val156, label %assert_ok158, label %assert_fail157, !dbg !2716

assert_fail157:                                   ; preds = %and.phi155
  %144 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2715
  call void %144(ptr @.panic_msg.70, i64 51, ptr @.file.121, i64 17, ptr @.func.15, i64 7, i32 300) #6, !dbg !2715
  unreachable, !dbg !2715

assert_ok158:                                     ; preds = %and.phi155
  %145 = call i64 @std.core.mem.aligned_offset(i64 32, i64 16), !dbg !2715
  store i64 %145, ptr %padded_header_size, align 8, !dbg !2715
    #dbg_declare(ptr %total_alloc_size159, !2718, !DIExpression(), !2719)
  %146 = load i64, ptr %padded_header_size, align 8, !dbg !2720
  %147 = load i64, ptr %size, align 8, !dbg !2721
  %add160 = add i64 %146, %147, !dbg !2720
  store i64 %add160, ptr %total_alloc_size159, align 8, !dbg !2720
    #dbg_declare(ptr %alloc, !2722, !DIExpression(), !2723)
  %148 = load ptr, ptr %self, align 8, !dbg !2724
  %149 = load i64, ptr %total_alloc_size159, align 8, !dbg !2725
  %150 = load i32, ptr %init_type, align 4, !dbg !2726
  br i1 true, label %or.phi171, label %or.rhs162, !dbg !2727

or.rhs162:                                        ; preds = %assert_ok158
  store i64 0, ptr %x163, align 8
  %151 = load i64, ptr %x163, align 8, !dbg !2728
  %neq164 = icmp ne i64 0, %151, !dbg !2728
  br i1 %neq164, label %and.rhs165, label %and.phi169, !dbg !2728

and.rhs165:                                       ; preds = %or.rhs162
  %152 = load i64, ptr %x163, align 8, !dbg !2731
  %153 = load i64, ptr %x163, align 8, !dbg !2732
  %sub166 = sub i64 %153, 1, !dbg !2732
  %and167 = and i64 %152, %sub166, !dbg !2731
  %eq168 = icmp eq i64 %and167, 0, !dbg !2731
  br label %and.phi169, !dbg !2731

and.phi169:                                       ; preds = %and.rhs165, %or.rhs162
  %val170 = phi i1 [ false, %or.rhs162 ], [ %eq168, %and.rhs165 ], !dbg !2731
  br label %or.phi171, !dbg !2731

or.phi171:                                        ; preds = %and.phi169, %assert_ok158
  %val172 = phi i1 [ true, %assert_ok158 ], [ %val170, %and.phi169 ], !dbg !2731
  br i1 %val172, label %assert_ok174, label %assert_fail173, !dbg !2731

assert_fail173:                                   ; preds = %or.phi171
  %154 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2724
  call void %154(ptr @.panic_msg.16, i64 65, ptr @.file.121, i64 17, ptr @.func.15, i64 7, i32 302) #6, !dbg !2724
  unreachable, !dbg !2724

assert_ok174:                                     ; preds = %or.phi171
  %lt175 = icmp ult i64 0, %149, !dbg !2724
  br i1 %lt175, label %assert_ok177, label %assert_fail176, !dbg !2724

assert_fail176:                                   ; preds = %assert_ok174
  %155 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2724
  call void %155(ptr @.panic_msg.18, i64 59, ptr @.file.121, i64 17, ptr @.func.15, i64 7, i32 302) #6, !dbg !2724
  unreachable, !dbg !2724

assert_ok177:                                     ; preds = %assert_ok174
  %ptradd178 = getelementptr inbounds i8, ptr %148, i64 8, !dbg !2724
  %156 = load i64, ptr %ptradd178, align 8, !dbg !2724
  %157 = inttoptr i64 %156 to ptr, !dbg !2724
  %type181 = load ptr, ptr %.cachedtype180, align 8, !dbg !2568
  %158 = icmp eq ptr %157, %type181, !dbg !2568
  br i1 %158, label %cache_hit184, label %cache_miss182, !dbg !2568

cache_miss182:                                    ; preds = %assert_ok177
  %ptradd183 = getelementptr inbounds i8, ptr %157, i64 16, !dbg !2568
  %159 = load ptr, ptr %ptradd183, align 8, !dbg !2568
  %160 = call ptr @.dyn_search(ptr %159, ptr @"$sel.acquire"), !dbg !2568
  store ptr %160, ptr %.inlinecache179, align 8, !dbg !2568
  store ptr %157, ptr %.cachedtype180, align 8, !dbg !2568
  br label %161, !dbg !2568

cache_hit184:                                     ; preds = %assert_ok177
  %cache_hit_fn185 = load ptr, ptr %.inlinecache179, align 8, !dbg !2568
  br label %161, !dbg !2568

161:                                              ; preds = %cache_hit184, %cache_miss182
  %fn_phi186 = phi ptr [ %cache_hit_fn185, %cache_hit184 ], [ %160, %cache_miss182 ], !dbg !2568
  %162 = icmp eq ptr %fn_phi186, null, !dbg !2568
  br i1 %162, label %missing_function187, label %match188, !dbg !2568

missing_function187:                              ; preds = %161
  %163 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2568
  call void %163(ptr @.panic_msg.19, i64 44, ptr @.file.121, i64 17, ptr @.func.15, i64 7, i32 302) #6, !dbg !2568
  unreachable, !dbg !2568

match188:                                         ; preds = %161
  %164 = load ptr, ptr %148, align 8
  %165 = call i64 %fn_phi186(ptr %retparam189, ptr %164, i64 %149, i32 %150, i64 0), !dbg !2724
  %not_err190 = icmp eq i64 %165, 0, !dbg !2724
  %166 = call i1 @llvm.expect.i1(i1 %not_err190, i1 true), !dbg !2724
  br i1 %166, label %after_check192, label %assign_optional191, !dbg !2724

assign_optional191:                               ; preds = %match188
  store i64 %165, ptr %error_var161, align 8, !dbg !2724
  br label %guard_block193, !dbg !2724

after_check192:                                   ; preds = %match188
  br label %noerr_block194, !dbg !2724

guard_block193:                                   ; preds = %assign_optional191
  %167 = load i64, ptr %error_var161, align 8, !dbg !2724
  ret i64 %167, !dbg !2724

noerr_block194:                                   ; preds = %after_check192
  %168 = load ptr, ptr %retparam189, align 8, !dbg !2724
  store ptr %168, ptr %alloc, align 8, !dbg !2724
  %169 = load ptr, ptr %alloc, align 8, !dbg !2733
  %170 = load i64, ptr %padded_header_size, align 8, !dbg !2734
  %sub195 = sub i64 %170, 32, !dbg !2733
  %ptradd_any196 = getelementptr i8, ptr %169, i64 %sub195, !dbg !2733
  store ptr %ptradd_any196, ptr %page, align 8, !dbg !2733
  %171 = load ptr, ptr %page, align 8, !dbg !2735
  store i64 8, ptr %x197, align 8
  %172 = load i64, ptr %x197, align 8, !dbg !2736
  %neq198 = icmp ne i64 0, %172, !dbg !2736
  br i1 %neq198, label %and.rhs199, label %and.phi203, !dbg !2736

and.rhs199:                                       ; preds = %noerr_block194
  %173 = load i64, ptr %x197, align 8, !dbg !2739
  %174 = load i64, ptr %x197, align 8, !dbg !2740
  %sub200 = sub i64 %174, 1, !dbg !2740
  %and201 = and i64 %173, %sub200, !dbg !2739
  %eq202 = icmp eq i64 %and201, 0, !dbg !2739
  br label %and.phi203, !dbg !2739

and.phi203:                                       ; preds = %and.rhs199, %noerr_block194
  %val204 = phi i1 [ false, %noerr_block194 ], [ %eq202, %and.rhs199 ], !dbg !2739
  br i1 %val204, label %assert_ok206, label %assert_fail205, !dbg !2739

assert_fail205:                                   ; preds = %and.phi203
  %175 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2738
  call void %175(ptr @.panic_msg.70, i64 51, ptr @.file.121, i64 17, ptr @.func.15, i64 7, i32 306) #6, !dbg !2738
  unreachable, !dbg !2738

assert_ok206:                                     ; preds = %and.phi203
  %176 = call i8 @std.core.mem.ptr_is_aligned(ptr %171, i64 8) #7, !dbg !2738
  %177 = trunc i8 %176 to i1, !dbg !2738
  br i1 %177, label %assert_ok208, label %assert_fail207, !dbg !2738

assert_fail207:                                   ; preds = %assert_ok206
  %178 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2738
  call void %178(ptr @.panic_msg.130, i64 65, ptr @.file.121, i64 17, ptr @.func.15, i64 7, i32 306) #6, !dbg !2738
  unreachable, !dbg !2738

assert_ok208:                                     ; preds = %assert_ok206
  %179 = load ptr, ptr %page, align 8, !dbg !2741
  %ptradd209 = getelementptr inbounds i8, ptr %179, i64 32, !dbg !2741
  store i64 16, ptr %x210, align 8
  %180 = load i64, ptr %x210, align 8, !dbg !2742
  %neq211 = icmp ne i64 0, %180, !dbg !2742
  br i1 %neq211, label %and.rhs212, label %and.phi216, !dbg !2742

and.rhs212:                                       ; preds = %assert_ok208
  %181 = load i64, ptr %x210, align 8, !dbg !2745
  %182 = load i64, ptr %x210, align 8, !dbg !2746
  %sub213 = sub i64 %182, 1, !dbg !2746
  %and214 = and i64 %181, %sub213, !dbg !2745
  %eq215 = icmp eq i64 %and214, 0, !dbg !2745
  br label %and.phi216, !dbg !2745

and.phi216:                                       ; preds = %and.rhs212, %assert_ok208
  %val217 = phi i1 [ false, %assert_ok208 ], [ %eq215, %and.rhs212 ], !dbg !2745
  br i1 %val217, label %assert_ok219, label %assert_fail218, !dbg !2745

assert_fail218:                                   ; preds = %and.phi216
  %183 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2744
  call void %183(ptr @.panic_msg.70, i64 51, ptr @.file.121, i64 17, ptr @.func.15, i64 7, i32 307) #6, !dbg !2744
  unreachable, !dbg !2744

assert_ok219:                                     ; preds = %and.phi216
  %184 = call i8 @std.core.mem.ptr_is_aligned(ptr %ptradd209, i64 16) #7, !dbg !2744
  %185 = trunc i8 %184 to i1, !dbg !2744
  br i1 %185, label %assert_ok221, label %assert_fail220, !dbg !2744

assert_fail220:                                   ; preds = %assert_ok219
  %186 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2744
  call void %186(ptr @.panic_msg.118, i64 79, ptr @.file.121, i64 17, ptr @.func.15, i64 7, i32 307) #6, !dbg !2744
  unreachable, !dbg !2744

assert_ok221:                                     ; preds = %assert_ok219
  %187 = load ptr, ptr %page, align 8, !dbg !2747
  %ptradd222 = getelementptr inbounds i8, ptr %187, i64 8, !dbg !2747
  %188 = load ptr, ptr %alloc, align 8, !dbg !2748
  store ptr %188, ptr %ptradd222, align 8, !dbg !2748
  %189 = load ptr, ptr %page, align 8, !dbg !2749
  %ptradd223 = getelementptr inbounds i8, ptr %189, i64 16, !dbg !2749
  %190 = load i64, ptr %size, align 8, !dbg !2750
  store i64 %190, ptr %ptradd223, align 8, !dbg !2750
  br label %if.exit224, !dbg !2750

if.exit224:                                       ; preds = %assert_ok221, %assert_ok143
  %191 = load ptr, ptr %page, align 8, !dbg !2751
  %ptradd225 = getelementptr inbounds i8, ptr %191, i64 24, !dbg !2751
  store i64 -1, ptr %ptradd225, align 8, !dbg !2752
  %192 = load ptr, ptr %page, align 8, !dbg !2753
  %193 = load ptr, ptr %self, align 8, !dbg !2754
  %ptradd226 = getelementptr inbounds i8, ptr %193, i64 16, !dbg !2754
  %194 = load ptr, ptr %ptradd226, align 8, !dbg !2754
  store ptr %194, ptr %192, align 8, !dbg !2754
  %195 = load ptr, ptr %self, align 8, !dbg !2755
  %ptradd227 = getelementptr inbounds i8, ptr %195, i64 16, !dbg !2755
  %196 = load ptr, ptr %page, align 8, !dbg !2756
  store ptr %196, ptr %ptradd227, align 8, !dbg !2756
  %197 = load ptr, ptr %page, align 8, !dbg !2757
  %ptradd229 = getelementptr inbounds i8, ptr %197, i64 32, !dbg !2757
  store ptr %ptradd229, ptr %0, align 8, !dbg !2758
  ret i64 0, !dbg !2758

panic:                                            ; preds = %entry
  %198 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2570
  call void %198(ptr @.panic_msg, i64 62, ptr @.file.121, i64 17, ptr @.func.15, i64 7, i32 251) #6, !dbg !2570
  unreachable, !dbg !2570
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.new_temp_allocator(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !2759 {
entry:
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %temp = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %padding = alloca i64, align 8
  %allocator5 = alloca %any, align 8
  %size6 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !2762, !DIExpression(), !2763)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !2764, !DIExpression(), !2765)
  %4 = load i64, ptr %size, align 8, !dbg !2766
  %le = icmp ule i64 16, %4, !dbg !2766
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !2766

assert_fail:                                      ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2766
  call void %5(ptr @.panic_msg.105, i64 31, ptr @.file.121, i64 17, ptr @.func.122, i64 18, i32 65) #6, !dbg !2766
  unreachable, !dbg !2766

assert_ok:                                        ; preds = %entry
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2768
  %6 = load i64, ptr %ptradd1, align 8, !dbg !2768
  %neq = icmp ne i64 %6, ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), !dbg !2768
  br i1 %neq, label %assert_ok3, label %assert_fail2, !dbg !2768

assert_fail2:                                     ; preds = %assert_ok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2768
  call void %7(ptr @.panic_msg.123, i64 145, ptr @.file.121, i64 17, ptr @.func.122, i64 18, i32 66) #6, !dbg !2768
  unreachable, !dbg !2768

assert_ok3:                                       ; preds = %assert_ok
    #dbg_declare(ptr %temp, !2769, !DIExpression(), !2770)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator, i32 16, i1 false)
  %8 = load i64, ptr %size, align 8
  store i64 %8, ptr %padding, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator4, i32 16, i1 false)
  %9 = load i64, ptr %padding, align 8, !dbg !2771
  %add = add i64 64, %9, !dbg !2774
  store i64 %add, ptr %size6, align 8
  %10 = load i64, ptr %size6, align 8, !dbg !2775
  %i2nb = icmp eq i64 %10, 0, !dbg !2775
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2775

if.then:                                          ; preds = %assert_ok3
  store ptr null, ptr %blockret, align 8, !dbg !2778
  br label %expr_block.exit, !dbg !2778

if.exit:                                          ; preds = %assert_ok3
  %11 = load i64, ptr %size6, align 8, !dbg !2779
  br i1 true, label %or.phi, label %or.rhs, !dbg !2780

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %12 = load i64, ptr %x, align 8, !dbg !2781
  %neq7 = icmp ne i64 0, %12, !dbg !2781
  br i1 %neq7, label %and.rhs, label %and.phi, !dbg !2781

and.rhs:                                          ; preds = %or.rhs
  %13 = load i64, ptr %x, align 8, !dbg !2784
  %14 = load i64, ptr %x, align 8, !dbg !2785
  %sub = sub i64 %14, 1, !dbg !2785
  %and = and i64 %13, %sub, !dbg !2784
  %eq = icmp eq i64 %and, 0, !dbg !2784
  br label %and.phi, !dbg !2784

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2784
  br label %or.phi, !dbg !2784

or.phi:                                           ; preds = %and.phi, %if.exit
  %val8 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !2784
  br i1 %val8, label %assert_ok10, label %assert_fail9, !dbg !2784

assert_fail9:                                     ; preds = %or.phi
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2786
  call void %15(ptr @.panic_msg.16, i64 65, ptr @.file.73, i64 16, ptr @.func.122, i64 18, i32 85) #6, !dbg !2786
  unreachable, !dbg !2786

assert_ok10:                                      ; preds = %or.phi
  br i1 true, label %assert_ok12, label %assert_fail11, !dbg !2786

assert_fail11:                                    ; preds = %assert_ok10
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2786
  call void %16(ptr @.panic_msg.17, i64 80, ptr @.file.73, i64 16, ptr @.func.122, i64 18, i32 85) #6, !dbg !2786
  unreachable, !dbg !2786

assert_ok12:                                      ; preds = %assert_ok10
  %lt = icmp ult i64 0, %11, !dbg !2786
  br i1 %lt, label %assert_ok14, label %assert_fail13, !dbg !2786

assert_fail13:                                    ; preds = %assert_ok12
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2786
  call void %17(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 16, ptr @.func.122, i64 18, i32 85) #6, !dbg !2786
  unreachable, !dbg !2786

assert_ok14:                                      ; preds = %assert_ok12
  %ptradd15 = getelementptr inbounds i8, ptr %allocator5, i64 8, !dbg !2786
  %18 = load i64, ptr %ptradd15, align 8, !dbg !2786
  %19 = inttoptr i64 %18 to ptr, !dbg !2786
  %type = load ptr, ptr %.cachedtype, align 8
  %20 = icmp eq ptr %19, %type
  br i1 %20, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok14
  %ptradd16 = getelementptr inbounds i8, ptr %19, i64 16
  %21 = load ptr, ptr %ptradd16, align 8
  %22 = call ptr @.dyn_search(ptr %21, ptr @"$sel.acquire")
  store ptr %22, ptr %.inlinecache, align 8
  store ptr %19, ptr %.cachedtype, align 8
  br label %23

cache_hit:                                        ; preds = %assert_ok14
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %23

23:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %22, %cache_miss ]
  %24 = icmp eq ptr %fn_phi, null
  br i1 %24, label %missing_function, label %match

missing_function:                                 ; preds = %23
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2786
  call void %25(ptr @.panic_msg.19, i64 44, ptr @.file.73, i64 16, ptr @.func.122, i64 18, i32 85) #6, !dbg !2786
  unreachable, !dbg !2786

match:                                            ; preds = %23
  %26 = load ptr, ptr %allocator5, align 8
  %27 = call i64 %fn_phi(ptr %retparam, ptr %26, i64 %11, i32 0, i64 0), !dbg !2786
  %not_err = icmp eq i64 %27, 0, !dbg !2786
  %28 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2786
  br i1 %28, label %after_check, label %assign_optional, !dbg !2786

assign_optional:                                  ; preds = %match
  store i64 %27, ptr %error_var, align 8, !dbg !2786
  br label %guard_block, !dbg !2786

after_check:                                      ; preds = %match
  %29 = load ptr, ptr %retparam, align 8, !dbg !2786
  store ptr %29, ptr %blockret, align 8, !dbg !2786
  br label %expr_block.exit, !dbg !2786

expr_block.exit:                                  ; preds = %after_check, %if.then
  %30 = load ptr, ptr %blockret, align 8, !dbg !2786
  br label %noerr_block, !dbg !2786

guard_block:                                      ; preds = %assign_optional
  %31 = load i64, ptr %error_var, align 8, !dbg !2786
  ret i64 %31, !dbg !2786

noerr_block:                                      ; preds = %expr_block.exit
  store ptr %30, ptr %temp, align 8, !dbg !2786
  %32 = load ptr, ptr %temp, align 8, !dbg !2787
  %ptradd17 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !2787
  store ptr null, ptr %ptradd17, align 8, !dbg !2788
  %33 = load ptr, ptr %temp, align 8, !dbg !2789
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %33, ptr align 8 %allocator, i32 16, i1 false), !dbg !2790
  %34 = load ptr, ptr %temp, align 8, !dbg !2791
  %ptradd18 = getelementptr inbounds i8, ptr %34, i64 40, !dbg !2791
  store i64 0, ptr %ptradd18, align 8, !dbg !2792
  %35 = load ptr, ptr %temp, align 8, !dbg !2793
  %ptradd19 = getelementptr inbounds i8, ptr %35, i64 32, !dbg !2793
  store i8 1, ptr %ptradd19, align 8, !dbg !2794
  %36 = load ptr, ptr %temp, align 8, !dbg !2795
  %ptradd20 = getelementptr inbounds i8, ptr %36, i64 24, !dbg !2795
  store ptr null, ptr %ptradd20, align 8, !dbg !2796
  %37 = load ptr, ptr %temp, align 8, !dbg !2797
  %ptradd21 = getelementptr inbounds i8, ptr %37, i64 56, !dbg !2797
  %38 = load ptr, ptr %temp, align 8, !dbg !2798
  %ptradd22 = getelementptr inbounds i8, ptr %38, i64 48, !dbg !2798
  %39 = load i64, ptr %size, align 8, !dbg !2799
  store i64 %39, ptr %ptradd22, align 8, !dbg !2799
  store i64 %39, ptr %ptradd21, align 8, !dbg !2799
  %40 = load ptr, ptr %temp, align 8, !dbg !2800
  store ptr %40, ptr %0, align 8, !dbg !2800
  ret i64 0, !dbg !2800
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.mem.allocator.ArenaAllocator.init(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2801 {
entry:
  %self = alloca ptr, align 8
  %data = alloca %"char[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2810
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2810
  br i1 %4, label %panic, label %checkok, !dbg !2810

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2811, !DIExpression(), !2812)
  store ptr %1, ptr %data, align 8
  %ptradd = getelementptr inbounds i8, ptr %data, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %data, !2813, !DIExpression(), !2814)
  %5 = load ptr, ptr %self, align 8, !dbg !2815
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %data, i32 16, i1 false), !dbg !2816
  %6 = load ptr, ptr %self, align 8, !dbg !2817
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2817
  store i64 0, ptr %ptradd1, align 8, !dbg !2818
  %7 = load ptr, ptr %self, align 8, !dbg !2819
  ret ptr %7, !dbg !2819

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2812
  call void %8(ptr @.panic_msg, i64 62, ptr @.file.131, i64 18, ptr @.func, i64 4, i32 22) #6, !dbg !2812
  unreachable, !dbg !2812
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.ArenaAllocator.clear(ptr %0) #0 comdat !dbg !2820 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2823
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2823
  br i1 %2, label %panic, label %checkok, !dbg !2823

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2824, !DIExpression(), !2825)
  %3 = load ptr, ptr %self, align 8, !dbg !2826
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !2826
  store i64 0, ptr %ptradd, align 8, !dbg !2827
  ret void, !dbg !2827

panic:                                            ; preds = %entry
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2825
  call void %4(ptr @.panic_msg, i64 62, ptr @.file.131, i64 18, ptr @.func.29, i64 5, i32 32) #6, !dbg !2825
  unreachable, !dbg !2825
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.ArenaAllocator.mark(ptr %0) #0 comdat !dbg !2828 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2831
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2831
  br i1 %2, label %panic, label %checkok, !dbg !2831

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2832, !DIExpression(), !2833)
  %3 = load ptr, ptr %self, align 8, !dbg !2831
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !2831
  %4 = load i64, ptr %ptradd, align 8, !dbg !2831
  ret i64 %4, !dbg !2831

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2833
  call void %5(ptr @.panic_msg, i64 62, ptr @.file.131, i64 18, ptr @.func.109, i64 4, i32 54) #6, !dbg !2833
  unreachable, !dbg !2833
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.ArenaAllocator.reset(ptr %0, i64 %1) #0 comdat !dbg !2834 {
entry:
  %self = alloca ptr, align 8
  %mark = alloca i64, align 8
  %2 = icmp eq ptr %0, null, !dbg !2837
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2837
  br i1 %3, label %panic, label %checkok, !dbg !2837

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2838, !DIExpression(), !2839)
  store i64 %1, ptr %mark, align 8
    #dbg_declare(ptr %mark, !2840, !DIExpression(), !2841)
  %4 = load i64, ptr %mark, align 8, !dbg !2842
  %5 = load ptr, ptr %self, align 8, !dbg !2844
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2844
  %6 = load i64, ptr %ptradd, align 8, !dbg !2844
  %le = icmp ule i64 %4, %6, !dbg !2842
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !2842

assert_fail:                                      ; preds = %checkok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2842
  call void %7(ptr @.panic_msg.132, i64 69, ptr @.file.131, i64 18, ptr @.func.111, i64 5, i32 60) #6, !dbg !2842
  unreachable, !dbg !2842

assert_ok:                                        ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !2837
  %ptradd1 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !2837
  %9 = load i64, ptr %mark, align 8, !dbg !2845
  store i64 %9, ptr %ptradd1, align 8, !dbg !2845
  ret void, !dbg !2845

panic:                                            ; preds = %entry
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2839
  call void %10(ptr @.panic_msg, i64 62, ptr @.file.131, i64 18, ptr @.func.111, i64 5, i32 62) #6, !dbg !2839
  unreachable, !dbg !2839
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.ArenaAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !2846 {
entry:
  %self = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %.anon = alloca i8, align 1
  %header = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2849
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2849
  br i1 %4, label %panic, label %checkok, !dbg !2849

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2850, !DIExpression(), !2851)
  store ptr %1, ptr %ptr, align 8
    #dbg_declare(ptr %ptr, !2852, !DIExpression(), !2853)
  store i8 %2, ptr %.anon, align 1
    #dbg_declare(ptr %.anon, !2854, !DIExpression(), !2855)
  %5 = load ptr, ptr %ptr, align 8, !dbg !2856
  %neq = icmp ne ptr %5, null, !dbg !2856
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !2856

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2856
  call void %6(ptr @.panic_msg.21, i64 32, ptr @.file.131, i64 18, ptr @.func.24, i64 7, i32 67) #6, !dbg !2856
  unreachable, !dbg !2856

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %ptr, align 8, !dbg !2858
  %ptrxi = ptrtoint ptr %7 to i64, !dbg !2858
  %8 = load ptr, ptr %self, align 8, !dbg !2859
  %9 = load ptr, ptr %8, align 8, !dbg !2859
  %ptrxi1 = ptrtoint ptr %9 to i64, !dbg !2859
  %ge = icmp uge i64 %ptrxi, %ptrxi1, !dbg !2858
  br i1 %ge, label %assert_ok3, label %assert_fail2, !dbg !2858

assert_fail2:                                     ; preds = %assert_ok
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2858
  call void %10(ptr @.panic_msg.133, i64 46, ptr @.file.131, i64 18, ptr @.func.24, i64 7, i32 71) #6, !dbg !2858
  unreachable, !dbg !2858

assert_ok3:                                       ; preds = %assert_ok
    #dbg_declare(ptr %header, !2860, !DIExpression(), !2866)
  %11 = load ptr, ptr %ptr, align 8, !dbg !2867
  %ptradd_any = getelementptr i8, ptr %11, i64 -8, !dbg !2868
  store ptr %ptradd_any, ptr %header, align 8, !dbg !2868
  %12 = load ptr, ptr %ptr, align 8, !dbg !2869
  %13 = load ptr, ptr %header, align 8, !dbg !2870
  %14 = load i64, ptr %13, align 8, !dbg !2870
  %ptradd_any4 = getelementptr i8, ptr %12, i64 %14, !dbg !2870
  %15 = load ptr, ptr %self, align 8, !dbg !2871
  %ptradd = getelementptr inbounds i8, ptr %15, i64 8, !dbg !2871
  %16 = load i64, ptr %ptradd, align 8, !dbg !2871
  %17 = load ptr, ptr %15, align 8, !dbg !2871
  %18 = load ptr, ptr %self, align 8, !dbg !2872
  %ptradd5 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !2872
  %19 = load i64, ptr %ptradd5, align 8, !dbg !2872
  %ge6 = icmp uge i64 %19, %16, !dbg !2872
  %20 = call i1 @llvm.expect.i1(i1 %ge6, i1 false), !dbg !2872
  br i1 %20, label %panic7, label %checkok10, !dbg !2872

checkok10:                                        ; preds = %assert_ok3
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 %19, !dbg !2872
  %eq = icmp eq ptr %ptradd_any4, %ptradd11, !dbg !2869
  br i1 %eq, label %if.then, label %if.exit, !dbg !2869

if.then:                                          ; preds = %checkok10
  %21 = load ptr, ptr %self, align 8, !dbg !2873
  %ptradd12 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !2873
  %22 = load i64, ptr %ptradd12, align 8, !dbg !2873
  %23 = load ptr, ptr %header, align 8, !dbg !2875
  %24 = load i64, ptr %23, align 8, !dbg !2875
  %add = add i64 %24, 8, !dbg !2875
  %sub = sub i64 %22, %add, !dbg !2873
  store i64 %sub, ptr %ptradd12, align 8, !dbg !2873
  br label %if.exit, !dbg !2873

if.exit:                                          ; preds = %if.then, %checkok10
  ret void, !dbg !2873

panic:                                            ; preds = %entry
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2851
  call void %25(ptr @.panic_msg, i64 62, ptr @.file.131, i64 18, ptr @.func.24, i64 7, i32 69) #6, !dbg !2851
  unreachable, !dbg !2851

panic7:                                           ; preds = %assert_ok3
  store i64 %16, ptr %taddr, align 8
  %26 = insertvalue %any undef, ptr %taddr, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %19, ptr %taddr8, align 8
  %28 = insertvalue %any undef, ptr %taddr8, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %27, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %29, ptr %ptradd9, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.10, i64 59, ptr @.file.131, i64 18, ptr @.func.24, i64 7, i32 74, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !2872
  unreachable, !dbg !2872
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.ArenaAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !2876 {
entry:
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %x = alloca i64, align 8
  %total_len = alloca i64, align 8
  %start_mem = alloca ptr, align 8
  %unaligned_pointer_to_offset = alloca ptr, align 8
  %mem = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %alignment7 = alloca i64, align 8
  %x8 = alloca i64, align 8
  %end = alloca i64, align 8
  %header = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !2879
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2879
  br i1 %6, label %panic, label %checkok, !dbg !2879

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2880, !DIExpression(), !2881)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !2882, !DIExpression(), !2883)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !2884, !DIExpression(), !2885)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !2886, !DIExpression(), !2887)
  %7 = load i64, ptr %alignment, align 8, !dbg !2888
  %i2nb = icmp eq i64 %7, 0, !dbg !2888
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !2888

or.rhs:                                           ; preds = %checkok
  %8 = load i64, ptr %alignment, align 8
  store i64 %8, ptr %x, align 8
  %9 = load i64, ptr %x, align 8, !dbg !2890
  %neq = icmp ne i64 0, %9, !dbg !2890
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !2890

and.rhs:                                          ; preds = %or.rhs
  %10 = load i64, ptr %x, align 8, !dbg !2893
  %11 = load i64, ptr %x, align 8, !dbg !2894
  %sub = sub i64 %11, 1, !dbg !2894
  %and = and i64 %10, %sub, !dbg !2893
  %eq = icmp eq i64 %and, 0, !dbg !2893
  br label %and.phi, !dbg !2893

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2893
  br label %or.phi, !dbg !2893

or.phi:                                           ; preds = %and.phi, %checkok
  %val1 = phi i1 [ true, %checkok ], [ %val, %and.phi ], !dbg !2893
  br i1 %val1, label %assert_ok, label %assert_fail, !dbg !2893

assert_fail:                                      ; preds = %or.phi
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2888
  call void %12(ptr @.panic_msg.16, i64 65, ptr @.file.131, i64 18, ptr @.func.15, i64 7, i32 84) #6, !dbg !2888
  unreachable, !dbg !2888

assert_ok:                                        ; preds = %or.phi
  %13 = load i64, ptr %alignment, align 8, !dbg !2895
  %le = icmp ule i64 %13, 268435456, !dbg !2895
  br i1 %le, label %assert_ok3, label %assert_fail2, !dbg !2895

assert_fail2:                                     ; preds = %assert_ok
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2895
  call void %14(ptr @.panic_msg.17, i64 80, ptr @.file.131, i64 18, ptr @.func.15, i64 7, i32 85) #6, !dbg !2895
  unreachable, !dbg !2895

assert_ok3:                                       ; preds = %assert_ok
  %15 = load i64, ptr %size, align 8, !dbg !2896
  %lt = icmp ult i64 0, %15, !dbg !2896
  br i1 %lt, label %assert_ok5, label %assert_fail4, !dbg !2896

assert_fail4:                                     ; preds = %assert_ok3
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2896
  call void %16(ptr @.panic_msg.101, i64 29, ptr @.file.131, i64 18, ptr @.func.15, i64 7, i32 86) #6, !dbg !2896
  unreachable, !dbg !2896

assert_ok5:                                       ; preds = %assert_ok3
  %17 = load i64, ptr %alignment, align 8, !dbg !2897
  %18 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %17) #7, !dbg !2898
  store i64 %18, ptr %alignment, align 8, !dbg !2898
    #dbg_declare(ptr %total_len, !2899, !DIExpression(), !2900)
  %19 = load ptr, ptr %self, align 8, !dbg !2901
  %ptradd = getelementptr inbounds i8, ptr %19, i64 8, !dbg !2901
  %20 = load i64, ptr %ptradd, align 8, !dbg !2901
  store i64 %20, ptr %total_len, align 8, !dbg !2901
  %21 = load i64, ptr %size, align 8, !dbg !2902
  %22 = load i64, ptr %total_len, align 8, !dbg !2903
  %gt = icmp ugt i64 %21, %22, !dbg !2902
  br i1 %gt, label %if.then, label %if.exit, !dbg !2902

if.then:                                          ; preds = %assert_ok5
  ret i64 ptrtoint (ptr @std.core.mem.INVALID_ALLOC_SIZE to i64), !dbg !2904

if.exit:                                          ; preds = %assert_ok5
    #dbg_declare(ptr %start_mem, !2905, !DIExpression(), !2906)
  %23 = load ptr, ptr %self, align 8, !dbg !2907
  %24 = load ptr, ptr %23, align 8, !dbg !2907
  store ptr %24, ptr %start_mem, align 8, !dbg !2907
    #dbg_declare(ptr %unaligned_pointer_to_offset, !2908, !DIExpression(), !2909)
  %25 = load ptr, ptr %start_mem, align 8, !dbg !2910
  %26 = load ptr, ptr %self, align 8, !dbg !2911
  %ptradd6 = getelementptr inbounds i8, ptr %26, i64 16, !dbg !2911
  %27 = load i64, ptr %ptradd6, align 8, !dbg !2911
  %add = add i64 %27, 8, !dbg !2910
  %ptradd_any = getelementptr i8, ptr %25, i64 %add, !dbg !2910
  store ptr %ptradd_any, ptr %unaligned_pointer_to_offset, align 8, !dbg !2910
    #dbg_declare(ptr %mem, !2912, !DIExpression(), !2913)
  %28 = load ptr, ptr %unaligned_pointer_to_offset, align 8
  store ptr %28, ptr %ptr, align 8
  %29 = load i64, ptr %alignment, align 8
  store i64 %29, ptr %alignment7, align 8
  %30 = load ptr, ptr %ptr, align 8, !dbg !2914
  %ptrxi = ptrtoint ptr %30 to i64, !dbg !2914
  %31 = load i64, ptr %alignment7, align 8, !dbg !2917
  store i64 %31, ptr %x8, align 8
  %32 = load i64, ptr %x8, align 8, !dbg !2918
  %neq9 = icmp ne i64 0, %32, !dbg !2918
  br i1 %neq9, label %and.rhs10, label %and.phi14, !dbg !2918

and.rhs10:                                        ; preds = %if.exit
  %33 = load i64, ptr %x8, align 8, !dbg !2921
  %34 = load i64, ptr %x8, align 8, !dbg !2922
  %sub11 = sub i64 %34, 1, !dbg !2922
  %and12 = and i64 %33, %sub11, !dbg !2921
  %eq13 = icmp eq i64 %and12, 0, !dbg !2921
  br label %and.phi14, !dbg !2921

and.phi14:                                        ; preds = %and.rhs10, %if.exit
  %val15 = phi i1 [ false, %if.exit ], [ %eq13, %and.rhs10 ], !dbg !2921
  br i1 %val15, label %assert_ok17, label %assert_fail16, !dbg !2921

assert_fail16:                                    ; preds = %and.phi14
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2920
  call void %35(ptr @.panic_msg.70, i64 51, ptr @.file.71, i64 6, ptr @.func.15, i64 7, i32 290) #6, !dbg !2920
  unreachable, !dbg !2920

assert_ok17:                                      ; preds = %and.phi14
  %36 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %31), !dbg !2923
  %intptr = inttoptr i64 %36 to ptr, !dbg !2923
  store ptr %intptr, ptr %mem, align 8, !dbg !2923
    #dbg_declare(ptr %end, !2924, !DIExpression(), !2925)
  %37 = load ptr, ptr %mem, align 8, !dbg !2926
  %38 = load ptr, ptr %self, align 8, !dbg !2927
  %39 = load ptr, ptr %38, align 8, !dbg !2927
  %40 = ptrtoint ptr %39 to i64, !dbg !2928
  %41 = ptrtoint ptr %37 to i64, !dbg !2928
  %42 = sub i64 %41, %40, !dbg !2928
  %43 = sdiv exact i64 %42, 1, !dbg !2928
  %44 = load i64, ptr %size, align 8, !dbg !2929
  %add18 = add i64 %43, %44, !dbg !2928
  store i64 %add18, ptr %end, align 8, !dbg !2928
  %45 = load i64, ptr %end, align 8, !dbg !2930
  %46 = load i64, ptr %total_len, align 8, !dbg !2931
  %gt19 = icmp ugt i64 %45, %46, !dbg !2930
  br i1 %gt19, label %if.then20, label %if.exit21, !dbg !2930

if.then20:                                        ; preds = %assert_ok17
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !2932

if.exit21:                                        ; preds = %assert_ok17
  %47 = load ptr, ptr %self, align 8, !dbg !2933
  %ptradd22 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !2933
  %48 = load i64, ptr %end, align 8, !dbg !2934
  store i64 %48, ptr %ptradd22, align 8, !dbg !2934
    #dbg_declare(ptr %header, !2935, !DIExpression(), !2936)
  %49 = load ptr, ptr %mem, align 8, !dbg !2937
  %ptradd_any23 = getelementptr i8, ptr %49, i64 -8, !dbg !2938
  store ptr %ptradd_any23, ptr %header, align 8, !dbg !2938
  %50 = load ptr, ptr %header, align 8, !dbg !2939
  %51 = load i64, ptr %size, align 8, !dbg !2940
  store i64 %51, ptr %50, align 8, !dbg !2940
  %52 = load i32, ptr %init_type, align 4, !dbg !2941
  %eq24 = icmp eq i32 %52, 1, !dbg !2941
  br i1 %eq24, label %if.then25, label %if.exit26, !dbg !2941

if.then25:                                        ; preds = %if.exit21
  %53 = load ptr, ptr %mem, align 8
  store ptr %53, ptr %dst, align 8
  %54 = load i64, ptr %size, align 8
  store i64 %54, ptr %len, align 8
  %55 = load ptr, ptr %dst, align 8, !dbg !2942
  %56 = load i64, ptr %len, align 8, !dbg !2945
  call void @llvm.memset.p0.i64(ptr align 16 %55, i8 0, i64 %56, i1 false), !dbg !2946
  br label %if.exit26, !dbg !2946

if.exit26:                                        ; preds = %if.then25, %if.exit21
  %57 = load ptr, ptr %mem, align 8, !dbg !2947
  store ptr %57, ptr %0, align 8, !dbg !2947
  ret i64 0, !dbg !2947

panic:                                            ; preds = %entry
  %58 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2881
  call void %58(ptr @.panic_msg, i64 62, ptr @.file.131, i64 18, ptr @.func.15, i64 7, i32 89) #6, !dbg !2881
  unreachable, !dbg !2881
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.ArenaAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !2948 {
entry:
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %x = alloca i64, align 8
  %total_len = alloca i64, align 8
  %header = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %x22 = alloca i64, align 8
  %new_used = alloca i64, align 8
  %reterr = alloca i64, align 8
  %mem = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %x50 = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr91 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !2951
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2951
  br i1 %6, label %panic, label %checkok, !dbg !2951

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2952, !DIExpression(), !2953)
  store ptr %2, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !2954, !DIExpression(), !2955)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !2956, !DIExpression(), !2957)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !2958, !DIExpression(), !2959)
  %7 = load i64, ptr %alignment, align 8, !dbg !2960
  %i2nb = icmp eq i64 %7, 0, !dbg !2960
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !2960

or.rhs:                                           ; preds = %checkok
  %8 = load i64, ptr %alignment, align 8
  store i64 %8, ptr %x, align 8
  %9 = load i64, ptr %x, align 8, !dbg !2962
  %neq = icmp ne i64 0, %9, !dbg !2962
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !2962

and.rhs:                                          ; preds = %or.rhs
  %10 = load i64, ptr %x, align 8, !dbg !2965
  %11 = load i64, ptr %x, align 8, !dbg !2966
  %sub = sub i64 %11, 1, !dbg !2966
  %and = and i64 %10, %sub, !dbg !2965
  %eq = icmp eq i64 %and, 0, !dbg !2965
  br label %and.phi, !dbg !2965

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !2965
  br label %or.phi, !dbg !2965

or.phi:                                           ; preds = %and.phi, %checkok
  %val1 = phi i1 [ true, %checkok ], [ %val, %and.phi ], !dbg !2965
  br i1 %val1, label %assert_ok, label %assert_fail, !dbg !2965

assert_fail:                                      ; preds = %or.phi
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2960
  call void %12(ptr @.panic_msg.16, i64 65, ptr @.file.131, i64 18, ptr @.func.20, i64 6, i32 109) #6, !dbg !2960
  unreachable, !dbg !2960

assert_ok:                                        ; preds = %or.phi
  %13 = load i64, ptr %alignment, align 8, !dbg !2967
  %le = icmp ule i64 %13, 268435456, !dbg !2967
  br i1 %le, label %assert_ok3, label %assert_fail2, !dbg !2967

assert_fail2:                                     ; preds = %assert_ok
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2967
  call void %14(ptr @.panic_msg.17, i64 80, ptr @.file.131, i64 18, ptr @.func.20, i64 6, i32 110) #6, !dbg !2967
  unreachable, !dbg !2967

assert_ok3:                                       ; preds = %assert_ok
  %15 = load ptr, ptr %old_pointer, align 8, !dbg !2968
  %neq4 = icmp ne ptr %15, null, !dbg !2968
  br i1 %neq4, label %assert_ok6, label %assert_fail5, !dbg !2968

assert_fail5:                                     ; preds = %assert_ok3
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2968
  call void %16(ptr @.panic_msg.100, i64 40, ptr @.file.131, i64 18, ptr @.func.20, i64 6, i32 111) #6, !dbg !2968
  unreachable, !dbg !2968

assert_ok6:                                       ; preds = %assert_ok3
  %17 = load i64, ptr %size, align 8, !dbg !2969
  %lt = icmp ult i64 0, %17, !dbg !2969
  br i1 %lt, label %assert_ok8, label %assert_fail7, !dbg !2969

assert_fail7:                                     ; preds = %assert_ok6
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2969
  call void %18(ptr @.panic_msg.101, i64 29, ptr @.file.131, i64 18, ptr @.func.20, i64 6, i32 112) #6, !dbg !2969
  unreachable, !dbg !2969

assert_ok8:                                       ; preds = %assert_ok6
  %19 = load i64, ptr %alignment, align 8, !dbg !2970
  %20 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %19) #7, !dbg !2971
  store i64 %20, ptr %alignment, align 8, !dbg !2971
  %21 = load ptr, ptr %old_pointer, align 8, !dbg !2972
  %22 = load ptr, ptr %self, align 8, !dbg !2973
  %23 = load ptr, ptr %22, align 8, !dbg !2973
  %ge = icmp uge ptr %21, %23, !dbg !2972
  br i1 %ge, label %assert_ok10, label %assert_fail9, !dbg !2972

assert_fail9:                                     ; preds = %assert_ok8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2972
  call void %24(ptr @.panic_msg.133, i64 46, ptr @.file.131, i64 18, ptr @.func.20, i64 6, i32 118) #6, !dbg !2972
  unreachable, !dbg !2972

assert_ok10:                                      ; preds = %assert_ok8
    #dbg_declare(ptr %total_len, !2974, !DIExpression(), !2975)
  %25 = load ptr, ptr %self, align 8, !dbg !2976
  %ptradd = getelementptr inbounds i8, ptr %25, i64 8, !dbg !2976
  %26 = load i64, ptr %ptradd, align 8, !dbg !2976
  store i64 %26, ptr %total_len, align 8, !dbg !2976
  %27 = load i64, ptr %size, align 8, !dbg !2977
  %28 = load i64, ptr %total_len, align 8, !dbg !2978
  %gt = icmp ugt i64 %27, %28, !dbg !2977
  br i1 %gt, label %if.then, label %if.exit, !dbg !2977

if.then:                                          ; preds = %assert_ok10
  ret i64 ptrtoint (ptr @std.core.mem.INVALID_ALLOC_SIZE to i64), !dbg !2979

if.exit:                                          ; preds = %assert_ok10
    #dbg_declare(ptr %header, !2980, !DIExpression(), !2981)
  %29 = load ptr, ptr %old_pointer, align 8, !dbg !2982
  %ptradd_any = getelementptr i8, ptr %29, i64 -8, !dbg !2983
  store ptr %ptradd_any, ptr %header, align 8, !dbg !2983
    #dbg_declare(ptr %old_size, !2984, !DIExpression(), !2985)
  %30 = load ptr, ptr %header, align 8, !dbg !2986
  %31 = load i64, ptr %30, align 8, !dbg !2986
  store i64 %31, ptr %old_size, align 8, !dbg !2986
  %32 = load ptr, ptr %self, align 8, !dbg !2987
  %ptradd11 = getelementptr inbounds i8, ptr %32, i64 8, !dbg !2987
  %33 = load i64, ptr %ptradd11, align 8, !dbg !2987
  %34 = load ptr, ptr %32, align 8, !dbg !2987
  %35 = load ptr, ptr %self, align 8, !dbg !2988
  %ptradd12 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !2988
  %36 = load i64, ptr %ptradd12, align 8, !dbg !2988
  %ge13 = icmp uge i64 %36, %33, !dbg !2988
  %37 = call i1 @llvm.expect.i1(i1 %ge13, i1 false), !dbg !2988
  br i1 %37, label %panic14, label %checkok17, !dbg !2988

checkok17:                                        ; preds = %if.exit
  %ptradd18 = getelementptr inbounds i8, ptr %34, i64 %36, !dbg !2988
  %38 = load ptr, ptr %old_pointer, align 8, !dbg !2989
  %39 = load i64, ptr %old_size, align 8, !dbg !2990
  %ptradd_any19 = getelementptr i8, ptr %38, i64 %39, !dbg !2990
  %eq20 = icmp eq ptr %ptradd18, %ptradd_any19, !dbg !2991
  br i1 %eq20, label %and.rhs21, label %and.phi32, !dbg !2991

and.rhs21:                                        ; preds = %checkok17
  %40 = load ptr, ptr %old_pointer, align 8, !dbg !2992
  %41 = load i64, ptr %alignment, align 8, !dbg !2993
  store i64 %41, ptr %x22, align 8
  %42 = load i64, ptr %x22, align 8, !dbg !2994
  %neq23 = icmp ne i64 0, %42, !dbg !2994
  br i1 %neq23, label %and.rhs24, label %and.phi28, !dbg !2994

and.rhs24:                                        ; preds = %and.rhs21
  %43 = load i64, ptr %x22, align 8, !dbg !2997
  %44 = load i64, ptr %x22, align 8, !dbg !2998
  %sub25 = sub i64 %44, 1, !dbg !2998
  %and26 = and i64 %43, %sub25, !dbg !2997
  %eq27 = icmp eq i64 %and26, 0, !dbg !2997
  br label %and.phi28, !dbg !2997

and.phi28:                                        ; preds = %and.rhs24, %and.rhs21
  %val29 = phi i1 [ false, %and.rhs21 ], [ %eq27, %and.rhs24 ], !dbg !2997
  br i1 %val29, label %assert_ok31, label %assert_fail30, !dbg !2997

assert_fail30:                                    ; preds = %and.phi28
  %45 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2996
  call void %45(ptr @.panic_msg.70, i64 51, ptr @.file.131, i64 18, ptr @.func.20, i64 6, i32 124) #6, !dbg !2996
  unreachable, !dbg !2996

assert_ok31:                                      ; preds = %and.phi28
  %46 = call i8 @std.core.mem.ptr_is_aligned(ptr %40, i64 %41) #7, !dbg !2996
  %47 = trunc i8 %46 to i1, !dbg !2996
  br label %and.phi32, !dbg !2996

and.phi32:                                        ; preds = %assert_ok31, %checkok17
  %val33 = phi i1 [ false, %checkok17 ], [ %47, %assert_ok31 ], !dbg !2996
  br i1 %val33, label %if.then34, label %if.exit47, !dbg !2996

if.then34:                                        ; preds = %and.phi32
  %48 = load i64, ptr %old_size, align 8, !dbg !2999
  %49 = load i64, ptr %size, align 8, !dbg !3001
  %ge35 = icmp uge i64 %48, %49, !dbg !2999
  br i1 %ge35, label %if.then36, label %if.else, !dbg !2999

if.then36:                                        ; preds = %if.then34
  %50 = load ptr, ptr %self, align 8, !dbg !3002
  %ptradd37 = getelementptr inbounds i8, ptr %50, i64 16, !dbg !3002
  %51 = load i64, ptr %ptradd37, align 8, !dbg !3002
  %52 = load i64, ptr %old_size, align 8, !dbg !3004
  %53 = load i64, ptr %size, align 8, !dbg !3005
  %sub38 = sub i64 %52, %53, !dbg !3004
  %sub39 = sub i64 %51, %sub38, !dbg !3002
  store i64 %sub39, ptr %ptradd37, align 8, !dbg !3002
  br label %if.exit46, !dbg !3002

if.else:                                          ; preds = %if.then34
    #dbg_declare(ptr %new_used, !3006, !DIExpression(), !3008)
  %54 = load ptr, ptr %self, align 8, !dbg !3009
  %ptradd40 = getelementptr inbounds i8, ptr %54, i64 16, !dbg !3009
  %55 = load i64, ptr %ptradd40, align 8, !dbg !3009
  %56 = load i64, ptr %size, align 8, !dbg !3010
  %add = add i64 %55, %56, !dbg !3009
  %57 = load i64, ptr %old_size, align 8, !dbg !3011
  %sub41 = sub i64 %add, %57, !dbg !3009
  store i64 %sub41, ptr %new_used, align 8, !dbg !3009
  %58 = load i64, ptr %new_used, align 8, !dbg !3012
  %59 = load i64, ptr %total_len, align 8, !dbg !3013
  %gt42 = icmp ugt i64 %58, %59, !dbg !3012
  br i1 %gt42, label %if.then43, label %if.exit44, !dbg !3012

if.then43:                                        ; preds = %if.else
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !3014

if.exit44:                                        ; preds = %if.else
  %60 = load ptr, ptr %self, align 8, !dbg !3015
  %ptradd45 = getelementptr inbounds i8, ptr %60, i64 16, !dbg !3015
  %61 = load i64, ptr %new_used, align 8, !dbg !3016
  store i64 %61, ptr %ptradd45, align 8, !dbg !3016
  br label %if.exit46, !dbg !3016

if.exit46:                                        ; preds = %if.exit44, %if.then36
  %62 = load ptr, ptr %header, align 8, !dbg !3017
  %63 = load i64, ptr %size, align 8, !dbg !3018
  store i64 %63, ptr %62, align 8, !dbg !3018
  %64 = load ptr, ptr %old_pointer, align 8, !dbg !3019
  store ptr %64, ptr %0, align 8, !dbg !3019
  ret i64 0, !dbg !3019

if.exit47:                                        ; preds = %and.phi32
    #dbg_declare(ptr %mem, !3020, !DIExpression(), !3021)
  %65 = load ptr, ptr %self, align 8, !dbg !3022
  %66 = load i64, ptr %size, align 8, !dbg !3023
  %67 = load i64, ptr %alignment, align 8, !dbg !3024
  %i2nb48 = icmp eq i64 %67, 0, !dbg !3025
  br i1 %i2nb48, label %or.phi58, label %or.rhs49, !dbg !3025

or.rhs49:                                         ; preds = %if.exit47
  store i64 %67, ptr %x50, align 8
  %68 = load i64, ptr %x50, align 8, !dbg !3026
  %neq51 = icmp ne i64 0, %68, !dbg !3026
  br i1 %neq51, label %and.rhs52, label %and.phi56, !dbg !3026

and.rhs52:                                        ; preds = %or.rhs49
  %69 = load i64, ptr %x50, align 8, !dbg !3029
  %70 = load i64, ptr %x50, align 8, !dbg !3030
  %sub53 = sub i64 %70, 1, !dbg !3030
  %and54 = and i64 %69, %sub53, !dbg !3029
  %eq55 = icmp eq i64 %and54, 0, !dbg !3029
  br label %and.phi56, !dbg !3029

and.phi56:                                        ; preds = %and.rhs52, %or.rhs49
  %val57 = phi i1 [ false, %or.rhs49 ], [ %eq55, %and.rhs52 ], !dbg !3029
  br label %or.phi58, !dbg !3029

or.phi58:                                         ; preds = %and.phi56, %if.exit47
  %val59 = phi i1 [ true, %if.exit47 ], [ %val57, %and.phi56 ], !dbg !3029
  br i1 %val59, label %assert_ok61, label %assert_fail60, !dbg !3029

assert_fail60:                                    ; preds = %or.phi58
  %71 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3022
  call void %71(ptr @.panic_msg.16, i64 65, ptr @.file.131, i64 18, ptr @.func.20, i64 6, i32 140) #6, !dbg !3022
  unreachable, !dbg !3022

assert_ok61:                                      ; preds = %or.phi58
  %le62 = icmp ule i64 %67, 268435456, !dbg !3022
  br i1 %le62, label %assert_ok64, label %assert_fail63, !dbg !3022

assert_fail63:                                    ; preds = %assert_ok61
  %72 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3022
  call void %72(ptr @.panic_msg.17, i64 80, ptr @.file.131, i64 18, ptr @.func.20, i64 6, i32 140) #6, !dbg !3022
  unreachable, !dbg !3022

assert_ok64:                                      ; preds = %assert_ok61
  %lt65 = icmp ult i64 0, %66, !dbg !3022
  br i1 %lt65, label %assert_ok67, label %assert_fail66, !dbg !3022

assert_fail66:                                    ; preds = %assert_ok64
  %73 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3022
  call void %73(ptr @.panic_msg.101, i64 29, ptr @.file.131, i64 18, ptr @.func.20, i64 6, i32 140) #6, !dbg !3022
  unreachable, !dbg !3022

assert_ok67:                                      ; preds = %assert_ok64
  %74 = call i64 @std.core.mem.allocator.ArenaAllocator.acquire(ptr %retparam, ptr %65, i64 %66, i32 0, i64 %67), !dbg !3022
  %not_err = icmp eq i64 %74, 0, !dbg !3022
  %75 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3022
  br i1 %75, label %after_check, label %assign_optional, !dbg !3022

assign_optional:                                  ; preds = %assert_ok67
  store i64 %74, ptr %error_var, align 8, !dbg !3022
  br label %guard_block, !dbg !3022

after_check:                                      ; preds = %assert_ok67
  br label %noerr_block, !dbg !3022

guard_block:                                      ; preds = %assign_optional
  %76 = load i64, ptr %error_var, align 8, !dbg !3022
  ret i64 %76, !dbg !3022

noerr_block:                                      ; preds = %after_check
  %77 = load ptr, ptr %retparam, align 8, !dbg !3022
  store ptr %77, ptr %mem, align 8, !dbg !3022
  %78 = load ptr, ptr %mem, align 8
  store ptr %78, ptr %dst, align 8
  %79 = load ptr, ptr %old_pointer, align 8
  store ptr %79, ptr %src, align 8
  %80 = load i64, ptr %old_size, align 8
  store i64 %80, ptr %len, align 8
  %81 = load ptr, ptr %dst, align 8, !dbg !3031
  %neq68 = icmp ne ptr %81, null, !dbg !3031
  br i1 %neq68, label %assert_ok70, label %assert_fail69, !dbg !3031

assert_fail69:                                    ; preds = %noerr_block
  %82 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3031
  call void %82(ptr @.panic_msg.75, i64 37, ptr @.file.71, i64 6, ptr @.func.20, i64 6, i32 329) #6, !dbg !3031
  unreachable, !dbg !3031

assert_ok70:                                      ; preds = %noerr_block
  %83 = load ptr, ptr %src, align 8, !dbg !3035
  %neq71 = icmp ne ptr %83, null, !dbg !3035
  br i1 %neq71, label %or.phi74, label %or.rhs72, !dbg !3035

or.rhs72:                                         ; preds = %assert_ok70
  %84 = load i64, ptr %len, align 8, !dbg !3036
  %eq73 = icmp eq i64 0, %84, !dbg !3036
  br label %or.phi74, !dbg !3036

or.phi74:                                         ; preds = %or.rhs72, %assert_ok70
  %val75 = phi i1 [ true, %assert_ok70 ], [ %eq73, %or.rhs72 ], !dbg !3036
  br i1 %val75, label %assert_ok77, label %assert_fail76, !dbg !3036

assert_fail76:                                    ; preds = %or.phi74
  %85 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3037
  call void %85(ptr @.panic_msg.76, i64 94, ptr @.file.131, i64 18, ptr @.func.20, i64 6, i32 141) #6, !dbg !3037
  unreachable, !dbg !3037

assert_ok77:                                      ; preds = %or.phi74
  %86 = load i64, ptr %len, align 8, !dbg !3038
  %eq78 = icmp eq i64 0, %86, !dbg !3038
  br i1 %eq78, label %or.phi82, label %or.rhs79, !dbg !3038

or.rhs79:                                         ; preds = %assert_ok77
  %87 = load ptr, ptr %dst, align 8, !dbg !3039
  %88 = load i64, ptr %len, align 8, !dbg !3040
  %ptradd_any80 = getelementptr i8, ptr %87, i64 %88, !dbg !3040
  %89 = load ptr, ptr %src, align 8, !dbg !3041
  %le81 = icmp ule ptr %ptradd_any80, %89, !dbg !3039
  br label %or.phi82, !dbg !3039

or.phi82:                                         ; preds = %or.rhs79, %assert_ok77
  %val83 = phi i1 [ true, %assert_ok77 ], [ %le81, %or.rhs79 ], !dbg !3039
  br i1 %val83, label %or.phi87, label %or.rhs84, !dbg !3039

or.rhs84:                                         ; preds = %or.phi82
  %90 = load ptr, ptr %src, align 8, !dbg !3042
  %91 = load i64, ptr %len, align 8, !dbg !3043
  %ptradd_any85 = getelementptr i8, ptr %90, i64 %91, !dbg !3043
  %92 = load ptr, ptr %dst, align 8, !dbg !3044
  %le86 = icmp ule ptr %ptradd_any85, %92, !dbg !3042
  br label %or.phi87, !dbg !3042

or.phi87:                                         ; preds = %or.rhs84, %or.phi82
  %val88 = phi i1 [ true, %or.phi82 ], [ %le86, %or.rhs84 ], !dbg !3042
  br i1 %val88, label %assert_ok90, label %assert_fail89, !dbg !3042

assert_fail89:                                    ; preds = %or.phi87
  %93 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3037
  call void %93(ptr @.panic_msg.77, i64 95, ptr @.file.131, i64 18, ptr @.func.20, i64 6, i32 141) #6, !dbg !3037
  unreachable, !dbg !3037

assert_ok90:                                      ; preds = %or.phi87
  %94 = load ptr, ptr %dst, align 8, !dbg !3045
  %95 = load ptr, ptr %src, align 8, !dbg !3046
  %96 = load i64, ptr %len, align 8, !dbg !3047
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %94, ptr align 16 %95, i64 %96, i1 false), !dbg !3048
  %97 = load ptr, ptr %mem, align 8, !dbg !3049
  store ptr %97, ptr %0, align 8, !dbg !3049
  ret i64 0, !dbg !3049

panic:                                            ; preds = %entry
  %98 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2953
  call void %98(ptr @.panic_msg, i64 62, ptr @.file.131, i64 18, ptr @.func.20, i64 6, i32 115) #6, !dbg !2953
  unreachable, !dbg !2953

panic14:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr, align 8
  %99 = insertvalue %any undef, ptr %taddr, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr15, align 8
  %101 = insertvalue %any undef, ptr %taddr15, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %100, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %102, ptr %ptradd16, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.10, i64 59, ptr @.file.131, i64 18, ptr @.func.20, i64 6, i32 124, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !2988
  unreachable, !dbg !2988
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.DynamicArenaAllocator.init(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !3050 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %page_size = alloca i64, align 8
  %4 = icmp eq ptr %0, null, !dbg !3069
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3069
  br i1 %5, label %panic, label %checkok, !dbg !3069

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3070, !DIExpression(), !3071)
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !3072, !DIExpression(), !3073)
  store i64 %3, ptr %page_size, align 8
    #dbg_declare(ptr %page_size, !3074, !DIExpression(), !3075)
  %6 = load i64, ptr %page_size, align 8, !dbg !3076
  %le = icmp ule i64 128, %6, !dbg !3076
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !3076

assert_fail:                                      ; preds = %checkok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3076
  call void %7(ptr @.panic_msg.135, i64 37, ptr @.file.134, i64 16, ptr @.func, i64 4, i32 28) #6, !dbg !3076
  unreachable, !dbg !3076

assert_ok:                                        ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !3078
  %ptradd1 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !3078
  store ptr null, ptr %ptradd1, align 8, !dbg !3079
  %9 = load ptr, ptr %self, align 8, !dbg !3080
  %ptradd2 = getelementptr inbounds i8, ptr %9, i64 24, !dbg !3080
  store ptr null, ptr %ptradd2, align 8, !dbg !3081
  %10 = load ptr, ptr %self, align 8, !dbg !3082
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 32, !dbg !3082
  %11 = load i64, ptr %page_size, align 8, !dbg !3083
  store i64 %11, ptr %ptradd3, align 8, !dbg !3083
  %12 = load ptr, ptr %self, align 8, !dbg !3084
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %12, ptr align 8 %allocator, i32 16, i1 false), !dbg !3085
  ret void, !dbg !3085

panic:                                            ; preds = %entry
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3071
  call void %13(ptr @.panic_msg, i64 62, ptr @.file.134, i64 16, ptr @.func, i64 4, i32 30) #6, !dbg !3071
  unreachable, !dbg !3071
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.DynamicArenaAllocator.free(ptr %0) #0 comdat !dbg !3086 {
entry:
  %self = alloca ptr, align 8
  %page = alloca ptr, align 8
  %next_page = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %allocator4 = alloca %any, align 8
  %ptr5 = alloca ptr, align 8
  %.inlinecache13 = alloca ptr, align 8
  %.cachedtype14 = alloca ptr, align 8
  %next_page28 = alloca ptr, align 8
  %allocator30 = alloca %any, align 8
  %ptr31 = alloca ptr, align 8
  %.inlinecache39 = alloca ptr, align 8
  %.cachedtype40 = alloca ptr, align 8
  %allocator50 = alloca %any, align 8
  %ptr51 = alloca ptr, align 8
  %.inlinecache59 = alloca ptr, align 8
  %.cachedtype60 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype60, align 8, !dbg !3089
  store ptr null, ptr %.cachedtype40, align 8, !dbg !3089
  store ptr null, ptr %.cachedtype14, align 8, !dbg !3089
  store ptr null, ptr %.cachedtype, align 8, !dbg !3089
  %1 = icmp eq ptr %0, null, !dbg !3089
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3089
  br i1 %2, label %panic, label %checkok, !dbg !3089

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3090, !DIExpression(), !3091)
    #dbg_declare(ptr %page, !3092, !DIExpression(), !3093)
  %3 = load ptr, ptr %self, align 8, !dbg !3094
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !3094
  %4 = load ptr, ptr %ptradd, align 8, !dbg !3094
  store ptr %4, ptr %page, align 8, !dbg !3094
  br label %loop.cond, !dbg !3095

loop.cond:                                        ; preds = %expr_block.exit23, %checkok
  %5 = load ptr, ptr %page, align 8, !dbg !3096
  %i2b = icmp ne ptr %5, null, !dbg !3096
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !3096

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %next_page, !3098, !DIExpression(), !3100)
  %6 = load ptr, ptr %page, align 8, !dbg !3101
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !3101
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !3101
  store ptr %7, ptr %next_page, align 8, !dbg !3101
  %8 = load ptr, ptr %self, align 8, !dbg !3102
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %8, i32 16, i1 false)
  %9 = load ptr, ptr %page, align 8, !dbg !3103
  %10 = load ptr, ptr %9, align 8
  store ptr %10, ptr %ptr, align 8
  %11 = load ptr, ptr %ptr, align 8, !dbg !3104
  %i2nb = icmp eq ptr %11, null, !dbg !3104
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3104

if.then:                                          ; preds = %loop.body
  br label %expr_block.exit, !dbg !3107

if.exit:                                          ; preds = %loop.body
  %12 = load ptr, ptr %ptr, align 8, !dbg !3108
  %neq = icmp ne ptr %12, null, !dbg !3109
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !3109

assert_fail:                                      ; preds = %if.exit
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3109
  call void %13(ptr @.panic_msg.27, i64 75, ptr @.file.73, i64 16, ptr @.func.8, i64 4, i32 122) #6, !dbg !3109
  unreachable, !dbg !3109

assert_ok:                                        ; preds = %if.exit
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !3109
  %14 = load i64, ptr %ptradd2, align 8, !dbg !3109
  %15 = inttoptr i64 %14 to ptr, !dbg !3109
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3089
  %16 = icmp eq ptr %15, %type, !dbg !3089
  br i1 %16, label %cache_hit, label %cache_miss, !dbg !3089

cache_miss:                                       ; preds = %assert_ok
  %ptradd3 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !3089
  %17 = load ptr, ptr %ptradd3, align 8, !dbg !3089
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.release"), !dbg !3089
  store ptr %18, ptr %.inlinecache, align 8, !dbg !3089
  store ptr %15, ptr %.cachedtype, align 8, !dbg !3089
  br label %19, !dbg !3089

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3089
  br label %19, !dbg !3089

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ], !dbg !3089
  %20 = icmp eq ptr %fn_phi, null, !dbg !3089
  br i1 %20, label %missing_function, label %match, !dbg !3089

missing_function:                                 ; preds = %19
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3089
  call void %21(ptr @.panic_msg.28, i64 44, ptr @.file.73, i64 16, ptr @.func.8, i64 4, i32 122) #6, !dbg !3089
  unreachable, !dbg !3089

match:                                            ; preds = %19
  %22 = load ptr, ptr %allocator, align 8, !dbg !3089
  call void %fn_phi(ptr %22, ptr %12, i8 zeroext 0), !dbg !3089
  br label %expr_block.exit, !dbg !3089

expr_block.exit:                                  ; preds = %match, %if.then
  %23 = load ptr, ptr %self, align 8, !dbg !3110
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %23, i32 16, i1 false)
  %24 = load ptr, ptr %page, align 8, !dbg !3111
  store ptr %24, ptr %ptr5, align 8
  %25 = load ptr, ptr %ptr5, align 8, !dbg !3112
  %i2nb6 = icmp eq ptr %25, null, !dbg !3112
  br i1 %i2nb6, label %if.then7, label %if.exit8, !dbg !3112

if.then7:                                         ; preds = %expr_block.exit
  br label %expr_block.exit23, !dbg !3115

if.exit8:                                         ; preds = %expr_block.exit
  %26 = load ptr, ptr %ptr5, align 8, !dbg !3116
  %neq9 = icmp ne ptr %26, null, !dbg !3117
  br i1 %neq9, label %assert_ok11, label %assert_fail10, !dbg !3117

assert_fail10:                                    ; preds = %if.exit8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3117
  call void %27(ptr @.panic_msg.27, i64 75, ptr @.file.73, i64 16, ptr @.func.8, i64 4, i32 122) #6, !dbg !3117
  unreachable, !dbg !3117

assert_ok11:                                      ; preds = %if.exit8
  %ptradd12 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !3117
  %28 = load i64, ptr %ptradd12, align 8, !dbg !3117
  %29 = inttoptr i64 %28 to ptr, !dbg !3117
  %type15 = load ptr, ptr %.cachedtype14, align 8, !dbg !3089
  %30 = icmp eq ptr %29, %type15, !dbg !3089
  br i1 %30, label %cache_hit18, label %cache_miss16, !dbg !3089

cache_miss16:                                     ; preds = %assert_ok11
  %ptradd17 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !3089
  %31 = load ptr, ptr %ptradd17, align 8, !dbg !3089
  %32 = call ptr @.dyn_search(ptr %31, ptr @"$sel.release"), !dbg !3089
  store ptr %32, ptr %.inlinecache13, align 8, !dbg !3089
  store ptr %29, ptr %.cachedtype14, align 8, !dbg !3089
  br label %33, !dbg !3089

cache_hit18:                                      ; preds = %assert_ok11
  %cache_hit_fn19 = load ptr, ptr %.inlinecache13, align 8, !dbg !3089
  br label %33, !dbg !3089

33:                                               ; preds = %cache_hit18, %cache_miss16
  %fn_phi20 = phi ptr [ %cache_hit_fn19, %cache_hit18 ], [ %32, %cache_miss16 ], !dbg !3089
  %34 = icmp eq ptr %fn_phi20, null, !dbg !3089
  br i1 %34, label %missing_function21, label %match22, !dbg !3089

missing_function21:                               ; preds = %33
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3089
  call void %35(ptr @.panic_msg.28, i64 44, ptr @.file.73, i64 16, ptr @.func.8, i64 4, i32 122) #6, !dbg !3089
  unreachable, !dbg !3089

match22:                                          ; preds = %33
  %36 = load ptr, ptr %allocator4, align 8, !dbg !3089
  call void %fn_phi20(ptr %36, ptr %26, i8 zeroext 0), !dbg !3089
  br label %expr_block.exit23, !dbg !3089

expr_block.exit23:                                ; preds = %match22, %if.then7
  %37 = load ptr, ptr %next_page, align 8, !dbg !3118
  store ptr %37, ptr %page, align 8, !dbg !3118
  br label %loop.cond, !dbg !3118

loop.exit:                                        ; preds = %loop.cond
  %38 = load ptr, ptr %self, align 8, !dbg !3119
  %ptradd24 = getelementptr inbounds i8, ptr %38, i64 24, !dbg !3119
  %39 = load ptr, ptr %ptradd24, align 8, !dbg !3119
  store ptr %39, ptr %page, align 8, !dbg !3119
  br label %loop.cond25, !dbg !3120

loop.cond25:                                      ; preds = %expr_block.exit69, %loop.exit
  %40 = load ptr, ptr %page, align 8, !dbg !3121
  %i2b26 = icmp ne ptr %40, null, !dbg !3121
  br i1 %i2b26, label %loop.body27, label %loop.exit70, !dbg !3121

loop.body27:                                      ; preds = %loop.cond25
    #dbg_declare(ptr %next_page28, !3123, !DIExpression(), !3125)
  %41 = load ptr, ptr %page, align 8, !dbg !3126
  %ptradd29 = getelementptr inbounds i8, ptr %41, i64 8, !dbg !3126
  %42 = load ptr, ptr %ptradd29, align 8, !dbg !3126
  store ptr %42, ptr %next_page28, align 8, !dbg !3126
  %43 = load ptr, ptr %self, align 8, !dbg !3127
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator30, ptr align 8 %43, i32 16, i1 false)
  %44 = load ptr, ptr %page, align 8, !dbg !3128
  %45 = load ptr, ptr %44, align 8
  store ptr %45, ptr %ptr31, align 8
  %46 = load ptr, ptr %ptr31, align 8, !dbg !3129
  %i2nb32 = icmp eq ptr %46, null, !dbg !3129
  br i1 %i2nb32, label %if.then33, label %if.exit34, !dbg !3129

if.then33:                                        ; preds = %loop.body27
  br label %expr_block.exit49, !dbg !3132

if.exit34:                                        ; preds = %loop.body27
  %47 = load ptr, ptr %ptr31, align 8, !dbg !3133
  %neq35 = icmp ne ptr %47, null, !dbg !3134
  br i1 %neq35, label %assert_ok37, label %assert_fail36, !dbg !3134

assert_fail36:                                    ; preds = %if.exit34
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3134
  call void %48(ptr @.panic_msg.27, i64 75, ptr @.file.73, i64 16, ptr @.func.8, i64 4, i32 122) #6, !dbg !3134
  unreachable, !dbg !3134

assert_ok37:                                      ; preds = %if.exit34
  %ptradd38 = getelementptr inbounds i8, ptr %allocator30, i64 8, !dbg !3134
  %49 = load i64, ptr %ptradd38, align 8, !dbg !3134
  %50 = inttoptr i64 %49 to ptr, !dbg !3134
  %type41 = load ptr, ptr %.cachedtype40, align 8, !dbg !3089
  %51 = icmp eq ptr %50, %type41, !dbg !3089
  br i1 %51, label %cache_hit44, label %cache_miss42, !dbg !3089

cache_miss42:                                     ; preds = %assert_ok37
  %ptradd43 = getelementptr inbounds i8, ptr %50, i64 16, !dbg !3089
  %52 = load ptr, ptr %ptradd43, align 8, !dbg !3089
  %53 = call ptr @.dyn_search(ptr %52, ptr @"$sel.release"), !dbg !3089
  store ptr %53, ptr %.inlinecache39, align 8, !dbg !3089
  store ptr %50, ptr %.cachedtype40, align 8, !dbg !3089
  br label %54, !dbg !3089

cache_hit44:                                      ; preds = %assert_ok37
  %cache_hit_fn45 = load ptr, ptr %.inlinecache39, align 8, !dbg !3089
  br label %54, !dbg !3089

54:                                               ; preds = %cache_hit44, %cache_miss42
  %fn_phi46 = phi ptr [ %cache_hit_fn45, %cache_hit44 ], [ %53, %cache_miss42 ], !dbg !3089
  %55 = icmp eq ptr %fn_phi46, null, !dbg !3089
  br i1 %55, label %missing_function47, label %match48, !dbg !3089

missing_function47:                               ; preds = %54
  %56 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3089
  call void %56(ptr @.panic_msg.28, i64 44, ptr @.file.73, i64 16, ptr @.func.8, i64 4, i32 122) #6, !dbg !3089
  unreachable, !dbg !3089

match48:                                          ; preds = %54
  %57 = load ptr, ptr %allocator30, align 8, !dbg !3089
  call void %fn_phi46(ptr %57, ptr %47, i8 zeroext 0), !dbg !3089
  br label %expr_block.exit49, !dbg !3089

expr_block.exit49:                                ; preds = %match48, %if.then33
  %58 = load ptr, ptr %self, align 8, !dbg !3135
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator50, ptr align 8 %58, i32 16, i1 false)
  %59 = load ptr, ptr %page, align 8, !dbg !3136
  store ptr %59, ptr %ptr51, align 8
  %60 = load ptr, ptr %ptr51, align 8, !dbg !3137
  %i2nb52 = icmp eq ptr %60, null, !dbg !3137
  br i1 %i2nb52, label %if.then53, label %if.exit54, !dbg !3137

if.then53:                                        ; preds = %expr_block.exit49
  br label %expr_block.exit69, !dbg !3140

if.exit54:                                        ; preds = %expr_block.exit49
  %61 = load ptr, ptr %ptr51, align 8, !dbg !3141
  %neq55 = icmp ne ptr %61, null, !dbg !3142
  br i1 %neq55, label %assert_ok57, label %assert_fail56, !dbg !3142

assert_fail56:                                    ; preds = %if.exit54
  %62 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3142
  call void %62(ptr @.panic_msg.27, i64 75, ptr @.file.73, i64 16, ptr @.func.8, i64 4, i32 122) #6, !dbg !3142
  unreachable, !dbg !3142

assert_ok57:                                      ; preds = %if.exit54
  %ptradd58 = getelementptr inbounds i8, ptr %allocator50, i64 8, !dbg !3142
  %63 = load i64, ptr %ptradd58, align 8, !dbg !3142
  %64 = inttoptr i64 %63 to ptr, !dbg !3142
  %type61 = load ptr, ptr %.cachedtype60, align 8, !dbg !3089
  %65 = icmp eq ptr %64, %type61, !dbg !3089
  br i1 %65, label %cache_hit64, label %cache_miss62, !dbg !3089

cache_miss62:                                     ; preds = %assert_ok57
  %ptradd63 = getelementptr inbounds i8, ptr %64, i64 16, !dbg !3089
  %66 = load ptr, ptr %ptradd63, align 8, !dbg !3089
  %67 = call ptr @.dyn_search(ptr %66, ptr @"$sel.release"), !dbg !3089
  store ptr %67, ptr %.inlinecache59, align 8, !dbg !3089
  store ptr %64, ptr %.cachedtype60, align 8, !dbg !3089
  br label %68, !dbg !3089

cache_hit64:                                      ; preds = %assert_ok57
  %cache_hit_fn65 = load ptr, ptr %.inlinecache59, align 8, !dbg !3089
  br label %68, !dbg !3089

68:                                               ; preds = %cache_hit64, %cache_miss62
  %fn_phi66 = phi ptr [ %cache_hit_fn65, %cache_hit64 ], [ %67, %cache_miss62 ], !dbg !3089
  %69 = icmp eq ptr %fn_phi66, null, !dbg !3089
  br i1 %69, label %missing_function67, label %match68, !dbg !3089

missing_function67:                               ; preds = %68
  %70 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3089
  call void %70(ptr @.panic_msg.28, i64 44, ptr @.file.73, i64 16, ptr @.func.8, i64 4, i32 122) #6, !dbg !3089
  unreachable, !dbg !3089

match68:                                          ; preds = %68
  %71 = load ptr, ptr %allocator50, align 8, !dbg !3089
  call void %fn_phi66(ptr %71, ptr %61, i8 zeroext 0), !dbg !3089
  br label %expr_block.exit69, !dbg !3089

expr_block.exit69:                                ; preds = %match68, %if.then53
  %72 = load ptr, ptr %next_page28, align 8, !dbg !3143
  store ptr %72, ptr %page, align 8, !dbg !3143
  br label %loop.cond25, !dbg !3143

loop.exit70:                                      ; preds = %loop.cond25
  %73 = load ptr, ptr %self, align 8, !dbg !3144
  %ptradd71 = getelementptr inbounds i8, ptr %73, i64 16, !dbg !3144
  store ptr null, ptr %ptradd71, align 8, !dbg !3145
  %74 = load ptr, ptr %self, align 8, !dbg !3146
  %ptradd72 = getelementptr inbounds i8, ptr %74, i64 24, !dbg !3146
  store ptr null, ptr %ptradd72, align 8, !dbg !3147
  ret void, !dbg !3147

panic:                                            ; preds = %entry
  %75 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3091
  call void %75(ptr @.panic_msg, i64 62, ptr @.file.134, i64 16, ptr @.func.8, i64 4, i32 38) #6, !dbg !3091
  unreachable, !dbg !3091
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.DynamicArenaAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !3148 {
entry:
  %self = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %.anon = alloca i8, align 1
  %current_page = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !3151
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3151
  br i1 %4, label %panic, label %checkok, !dbg !3151

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3152, !DIExpression(), !3153)
  store ptr %1, ptr %ptr, align 8
    #dbg_declare(ptr %ptr, !3154, !DIExpression(), !3155)
  store i8 %2, ptr %.anon, align 1
    #dbg_declare(ptr %.anon, !3156, !DIExpression(), !3157)
  %5 = load ptr, ptr %ptr, align 8, !dbg !3158
  %neq = icmp ne ptr %5, null, !dbg !3158
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !3158

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3158
  call void %6(ptr @.panic_msg.21, i64 32, ptr @.file.134, i64 16, ptr @.func.24, i64 7, i32 75) #6, !dbg !3158
  unreachable, !dbg !3158

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !3160
  %ptradd = getelementptr inbounds i8, ptr %7, i64 16, !dbg !3160
  %8 = load ptr, ptr %ptradd, align 8, !dbg !3160
  %neq1 = icmp ne ptr %8, null, !dbg !3160
  br i1 %neq1, label %assert_ok3, label %assert_fail2, !dbg !3160

assert_fail2:                                     ; preds = %assert_ok
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3160
  call void %9(ptr @.panic_msg.136, i64 84, ptr @.file.134, i64 16, ptr @.func.24, i64 7, i32 76) #6, !dbg !3160
  unreachable, !dbg !3160

assert_ok3:                                       ; preds = %assert_ok
    #dbg_declare(ptr %current_page, !3161, !DIExpression(), !3162)
  %10 = load ptr, ptr %self, align 8, !dbg !3163
  %ptradd4 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !3163
  %11 = load ptr, ptr %ptradd4, align 8, !dbg !3163
  store ptr %11, ptr %current_page, align 8, !dbg !3163
  %12 = load ptr, ptr %ptr, align 8, !dbg !3164
  %13 = load ptr, ptr %current_page, align 8, !dbg !3165
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 32, !dbg !3165
  %14 = load ptr, ptr %ptradd5, align 8, !dbg !3165
  %eq = icmp eq ptr %12, %14, !dbg !3164
  br i1 %eq, label %if.then, label %if.exit, !dbg !3164

if.then:                                          ; preds = %assert_ok3
  %15 = load ptr, ptr %current_page, align 8, !dbg !3166
  %ptradd6 = getelementptr inbounds i8, ptr %15, i64 24, !dbg !3166
  %16 = load ptr, ptr %ptr, align 8, !dbg !3168
  %ptradd_any = getelementptr i8, ptr %16, i64 -8, !dbg !3169
  %17 = load ptr, ptr %current_page, align 8, !dbg !3170
  %18 = load ptr, ptr %17, align 8, !dbg !3170
  %19 = ptrtoint ptr %18 to i64, !dbg !3171
  %20 = ptrtoint ptr %ptradd_any to i64, !dbg !3171
  %21 = sub i64 %20, %19, !dbg !3171
  %22 = sdiv exact i64 %21, 1, !dbg !3171
  store i64 %22, ptr %ptradd6, align 8, !dbg !3171
  br label %if.exit, !dbg !3171

if.exit:                                          ; preds = %if.then, %assert_ok3
  %23 = load ptr, ptr %current_page, align 8, !dbg !3172
  %ptradd7 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !3172
  store ptr null, ptr %ptradd7, align 8, !dbg !3173
  ret void, !dbg !3173

panic:                                            ; preds = %entry
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3153
  call void %24(ptr @.panic_msg, i64 62, ptr @.file.134, i64 16, ptr @.func.24, i64 7, i32 78) #6, !dbg !3153
  unreachable, !dbg !3153
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.DynamicArenaAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !3174 {
entry:
  %self = alloca ptr, align 8
  %old_pointer = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %current_page = alloca ptr, align 8
  %old_size_ptr = alloca ptr, align 8
  %old_size = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %x = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %varargslots25 = alloca [2 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %x39 = alloca i64, align 8
  %add_size = alloca i64, align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %varargslots66 = alloca [2 x %any], align 16
  %indirectarg69 = alloca %"any[]", align 8
  %reterr73 = alloca i64, align 8
  %new_mem = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %x78 = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr111 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !3177
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !3177
  br i1 %6, label %panic, label %checkok, !dbg !3177

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3178, !DIExpression(), !3179)
  store ptr %2, ptr %old_pointer, align 8
    #dbg_declare(ptr %old_pointer, !3180, !DIExpression(), !3181)
  store i64 %3, ptr %size, align 8
    #dbg_declare(ptr %size, !3182, !DIExpression(), !3183)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !3184, !DIExpression(), !3185)
  %7 = load i64, ptr %size, align 8, !dbg !3186
  %lt = icmp ult i64 0, %7, !dbg !3186
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3186

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3186
  call void %8(ptr @.panic_msg.137, i64 63, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 89) #6, !dbg !3186
  unreachable, !dbg !3186

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %old_pointer, align 8, !dbg !3188
  %neq = icmp ne ptr %9, null, !dbg !3188
  br i1 %neq, label %assert_ok2, label %assert_fail1, !dbg !3188

assert_fail1:                                     ; preds = %assert_ok
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3188
  call void %10(ptr @.panic_msg.138, i64 79, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 90) #6, !dbg !3188
  unreachable, !dbg !3188

assert_ok2:                                       ; preds = %assert_ok
  %11 = load ptr, ptr %self, align 8, !dbg !3189
  %ptradd = getelementptr inbounds i8, ptr %11, i64 16, !dbg !3189
  %12 = load ptr, ptr %ptradd, align 8, !dbg !3189
  %neq3 = icmp ne ptr %12, null, !dbg !3189
  br i1 %neq3, label %assert_ok5, label %assert_fail4, !dbg !3189

assert_fail4:                                     ; preds = %assert_ok2
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3189
  call void %13(ptr @.panic_msg.139, i64 87, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 91) #6, !dbg !3189
  unreachable, !dbg !3189

assert_ok5:                                       ; preds = %assert_ok2
    #dbg_declare(ptr %current_page, !3190, !DIExpression(), !3191)
  %14 = load ptr, ptr %self, align 8, !dbg !3192
  %ptradd6 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !3192
  %15 = load ptr, ptr %ptradd6, align 8, !dbg !3192
  store ptr %15, ptr %current_page, align 8, !dbg !3192
  %16 = load i64, ptr %alignment, align 8, !dbg !3193
  %17 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %16) #7, !dbg !3194
  store i64 %17, ptr %alignment, align 8, !dbg !3194
    #dbg_declare(ptr %old_size_ptr, !3195, !DIExpression(), !3196)
  %18 = load ptr, ptr %old_pointer, align 8, !dbg !3197
  %ptradd_any = getelementptr i8, ptr %18, i64 -8, !dbg !3198
  store ptr %ptradd_any, ptr %old_size_ptr, align 8, !dbg !3198
    #dbg_declare(ptr %old_size, !3199, !DIExpression(), !3200)
  %19 = load ptr, ptr %old_size_ptr, align 8, !dbg !3201
  %checknull = icmp eq ptr %19, null, !dbg !3201
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3201
  br i1 %20, label %panic7, label %checkok8, !dbg !3201

checkok8:                                         ; preds = %assert_ok5
  %21 = ptrtoint ptr %19 to i64, !dbg !3201
  %22 = urem i64 %21, 8, !dbg !3201
  %23 = icmp ne i64 %22, 0, !dbg !3201
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !3201
  br i1 %24, label %panic9, label %checkok12, !dbg !3201

checkok12:                                        ; preds = %checkok8
  %25 = load i64, ptr %19, align 8, !dbg !3201
  store i64 %25, ptr %old_size, align 8, !dbg !3201
  %26 = load i64, ptr %old_size, align 8, !dbg !3202
  %27 = load i64, ptr %size, align 8, !dbg !3203
  %ge = icmp uge i64 %26, %27, !dbg !3202
  br i1 %ge, label %and.rhs, label %and.phi17, !dbg !3202

and.rhs:                                          ; preds = %checkok12
  %28 = load ptr, ptr %old_pointer, align 8, !dbg !3204
  %29 = load i64, ptr %alignment, align 8, !dbg !3205
  store i64 %29, ptr %x, align 8
  %30 = load i64, ptr %x, align 8, !dbg !3206
  %neq13 = icmp ne i64 0, %30, !dbg !3206
  br i1 %neq13, label %and.rhs14, label %and.phi, !dbg !3206

and.rhs14:                                        ; preds = %and.rhs
  %31 = load i64, ptr %x, align 8, !dbg !3209
  %32 = load i64, ptr %x, align 8, !dbg !3210
  %sub = sub i64 %32, 1, !dbg !3210
  %and = and i64 %31, %sub, !dbg !3209
  %eq = icmp eq i64 %and, 0, !dbg !3209
  br label %and.phi, !dbg !3209

and.phi:                                          ; preds = %and.rhs14, %and.rhs
  %val = phi i1 [ false, %and.rhs ], [ %eq, %and.rhs14 ], !dbg !3209
  br i1 %val, label %assert_ok16, label %assert_fail15, !dbg !3209

assert_fail15:                                    ; preds = %and.phi
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3208
  call void %33(ptr @.panic_msg.70, i64 51, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 101) #6, !dbg !3208
  unreachable, !dbg !3208

assert_ok16:                                      ; preds = %and.phi
  %34 = call i8 @std.core.mem.ptr_is_aligned(ptr %28, i64 %29) #7, !dbg !3208
  %35 = trunc i8 %34 to i1, !dbg !3208
  br label %and.phi17, !dbg !3208

and.phi17:                                        ; preds = %assert_ok16, %checkok12
  %val18 = phi i1 [ false, %checkok12 ], [ %35, %assert_ok16 ], !dbg !3208
  br i1 %val18, label %if.then, label %if.exit35, !dbg !3208

if.then:                                          ; preds = %and.phi17
  %36 = load ptr, ptr %old_size_ptr, align 8, !dbg !3211
  %checknull19 = icmp eq ptr %36, null, !dbg !3211
  %37 = call i1 @llvm.expect.i1(i1 %checknull19, i1 false), !dbg !3211
  br i1 %37, label %panic20, label %checkok21, !dbg !3211

checkok21:                                        ; preds = %if.then
  %38 = ptrtoint ptr %36 to i64, !dbg !3211
  %39 = urem i64 %38, 8, !dbg !3211
  %40 = icmp ne i64 %39, 0, !dbg !3211
  %41 = call i1 @llvm.expect.i1(i1 %40, i1 false), !dbg !3211
  br i1 %41, label %panic22, label %checkok29, !dbg !3211

checkok29:                                        ; preds = %checkok21
  %42 = load i64, ptr %size, align 8, !dbg !3213
  store i64 %42, ptr %36, align 8, !dbg !3213
  %43 = load ptr, ptr %current_page, align 8, !dbg !3214
  %ptradd30 = getelementptr inbounds i8, ptr %43, i64 32, !dbg !3214
  %44 = load ptr, ptr %ptradd30, align 8, !dbg !3214
  %45 = load ptr, ptr %old_pointer, align 8, !dbg !3215
  %eq31 = icmp eq ptr %44, %45, !dbg !3214
  br i1 %eq31, label %if.then32, label %if.exit, !dbg !3214

if.then32:                                        ; preds = %checkok29
  %46 = load ptr, ptr %current_page, align 8, !dbg !3216
  %ptradd33 = getelementptr inbounds i8, ptr %46, i64 24, !dbg !3216
  %47 = load ptr, ptr %old_pointer, align 8, !dbg !3218
  %ptradd_any34 = getelementptr i8, ptr %47, i64 -8, !dbg !3219
  %48 = load ptr, ptr %current_page, align 8, !dbg !3220
  %49 = load ptr, ptr %48, align 8, !dbg !3220
  %50 = ptrtoint ptr %49 to i64, !dbg !3221
  %51 = ptrtoint ptr %ptradd_any34 to i64, !dbg !3221
  %52 = sub i64 %51, %50, !dbg !3221
  %53 = sdiv exact i64 %52, 1, !dbg !3221
  store i64 %53, ptr %ptradd33, align 8, !dbg !3221
  br label %if.exit, !dbg !3221

if.exit:                                          ; preds = %if.then32, %checkok29
  %54 = load ptr, ptr %old_pointer, align 8, !dbg !3222
  store ptr %54, ptr %0, align 8, !dbg !3222
  ret i64 0, !dbg !3222

if.exit35:                                        ; preds = %and.phi17
  %55 = load ptr, ptr %current_page, align 8, !dbg !3223
  %ptradd36 = getelementptr inbounds i8, ptr %55, i64 32, !dbg !3223
  %56 = load ptr, ptr %ptradd36, align 8, !dbg !3223
  %57 = load ptr, ptr %old_pointer, align 8, !dbg !3224
  %eq37 = icmp eq ptr %56, %57, !dbg !3223
  br i1 %eq37, label %and.rhs38, label %and.phi49, !dbg !3223

and.rhs38:                                        ; preds = %if.exit35
  %58 = load ptr, ptr %old_pointer, align 8, !dbg !3225
  %59 = load i64, ptr %alignment, align 8, !dbg !3226
  store i64 %59, ptr %x39, align 8
  %60 = load i64, ptr %x39, align 8, !dbg !3227
  %neq40 = icmp ne i64 0, %60, !dbg !3227
  br i1 %neq40, label %and.rhs41, label %and.phi45, !dbg !3227

and.rhs41:                                        ; preds = %and.rhs38
  %61 = load i64, ptr %x39, align 8, !dbg !3230
  %62 = load i64, ptr %x39, align 8, !dbg !3231
  %sub42 = sub i64 %62, 1, !dbg !3231
  %and43 = and i64 %61, %sub42, !dbg !3230
  %eq44 = icmp eq i64 %and43, 0, !dbg !3230
  br label %and.phi45, !dbg !3230

and.phi45:                                        ; preds = %and.rhs41, %and.rhs38
  %val46 = phi i1 [ false, %and.rhs38 ], [ %eq44, %and.rhs41 ], !dbg !3230
  br i1 %val46, label %assert_ok48, label %assert_fail47, !dbg !3230

assert_fail47:                                    ; preds = %and.phi45
  %63 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3229
  call void %63(ptr @.panic_msg.70, i64 51, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 110) #6, !dbg !3229
  unreachable, !dbg !3229

assert_ok48:                                      ; preds = %and.phi45
  %64 = call i8 @std.core.mem.ptr_is_aligned(ptr %58, i64 %59) #7, !dbg !3229
  %65 = trunc i8 %64 to i1, !dbg !3229
  br label %and.phi49, !dbg !3229

and.phi49:                                        ; preds = %assert_ok48, %if.exit35
  %val50 = phi i1 [ false, %if.exit35 ], [ %65, %assert_ok48 ], !dbg !3229
  br i1 %val50, label %if.then51, label %if.exit74, !dbg !3229

if.then51:                                        ; preds = %and.phi49
  %66 = load i64, ptr %size, align 8, !dbg !3232
  %67 = load i64, ptr %old_size, align 8, !dbg !3234
  %gt = icmp ugt i64 %66, %67, !dbg !3232
  br i1 %gt, label %assert_ok53, label %assert_fail52, !dbg !3232

assert_fail52:                                    ; preds = %if.then51
  %68 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3232
  call void %68(ptr @.panic_msg.141, i64 32, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 112) #6, !dbg !3232
  unreachable, !dbg !3232

assert_ok53:                                      ; preds = %if.then51
    #dbg_declare(ptr %add_size, !3235, !DIExpression(), !3236)
  %69 = load i64, ptr %size, align 8, !dbg !3237
  %70 = load i64, ptr %old_size, align 8, !dbg !3238
  %sub54 = sub i64 %69, %70, !dbg !3237
  store i64 %sub54, ptr %add_size, align 8, !dbg !3237
  %71 = load i64, ptr %add_size, align 8, !dbg !3239
  %72 = load ptr, ptr %current_page, align 8, !dbg !3240
  %ptradd55 = getelementptr inbounds i8, ptr %72, i64 24, !dbg !3240
  %73 = load i64, ptr %ptradd55, align 8, !dbg !3240
  %add = add i64 %71, %73, !dbg !3239
  %74 = load ptr, ptr %current_page, align 8, !dbg !3241
  %ptradd56 = getelementptr inbounds i8, ptr %74, i64 16, !dbg !3241
  %75 = load i64, ptr %ptradd56, align 8, !dbg !3241
  %gt57 = icmp ugt i64 %add, %75, !dbg !3239
  br i1 %gt57, label %if.then58, label %if.exit59, !dbg !3239

if.then58:                                        ; preds = %assert_ok53
  br label %if.exit74, !dbg !3242

if.exit59:                                        ; preds = %assert_ok53
  %76 = load ptr, ptr %old_size_ptr, align 8, !dbg !3243
  %checknull60 = icmp eq ptr %76, null, !dbg !3243
  %77 = call i1 @llvm.expect.i1(i1 %checknull60, i1 false), !dbg !3243
  br i1 %77, label %panic61, label %checkok62, !dbg !3243

checkok62:                                        ; preds = %if.exit59
  %78 = ptrtoint ptr %76 to i64, !dbg !3243
  %79 = urem i64 %78, 8, !dbg !3243
  %80 = icmp ne i64 %79, 0, !dbg !3243
  %81 = call i1 @llvm.expect.i1(i1 %80, i1 false), !dbg !3243
  br i1 %81, label %panic63, label %checkok70, !dbg !3243

checkok70:                                        ; preds = %checkok62
  %82 = load i64, ptr %size, align 8, !dbg !3244
  store i64 %82, ptr %76, align 8, !dbg !3244
  %83 = load ptr, ptr %current_page, align 8, !dbg !3245
  %ptradd71 = getelementptr inbounds i8, ptr %83, i64 24, !dbg !3245
  %84 = load i64, ptr %ptradd71, align 8, !dbg !3245
  %85 = load i64, ptr %add_size, align 8, !dbg !3246
  %add72 = add i64 %84, %85, !dbg !3245
  store i64 %add72, ptr %ptradd71, align 8, !dbg !3245
  %86 = load ptr, ptr %old_pointer, align 8, !dbg !3247
  store ptr %86, ptr %0, align 8, !dbg !3247
  ret i64 0, !dbg !3247

if.exit74:                                        ; preds = %if.then58, %and.phi49
    #dbg_declare(ptr %new_mem, !3248, !DIExpression(), !3249)
  %87 = load ptr, ptr %self, align 8, !dbg !3250
  %88 = load i64, ptr %size, align 8, !dbg !3251
  %89 = load i64, ptr %alignment, align 8, !dbg !3252
  %lt75 = icmp ult i64 0, %88, !dbg !3250
  br i1 %lt75, label %assert_ok77, label %assert_fail76, !dbg !3250

assert_fail76:                                    ; preds = %if.exit74
  %90 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3250
  call void %90(ptr @.panic_msg.142, i64 57, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 119) #6, !dbg !3250
  unreachable, !dbg !3250

assert_ok77:                                      ; preds = %if.exit74
  %i2nb = icmp eq i64 %89, 0, !dbg !3253
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !3253

or.rhs:                                           ; preds = %assert_ok77
  store i64 %89, ptr %x78, align 8
  %91 = load i64, ptr %x78, align 8, !dbg !3254
  %neq79 = icmp ne i64 0, %91, !dbg !3254
  br i1 %neq79, label %and.rhs80, label %and.phi84, !dbg !3254

and.rhs80:                                        ; preds = %or.rhs
  %92 = load i64, ptr %x78, align 8, !dbg !3257
  %93 = load i64, ptr %x78, align 8, !dbg !3258
  %sub81 = sub i64 %93, 1, !dbg !3258
  %and82 = and i64 %92, %sub81, !dbg !3257
  %eq83 = icmp eq i64 %and82, 0, !dbg !3257
  br label %and.phi84, !dbg !3257

and.phi84:                                        ; preds = %and.rhs80, %or.rhs
  %val85 = phi i1 [ false, %or.rhs ], [ %eq83, %and.rhs80 ], !dbg !3257
  br label %or.phi, !dbg !3257

or.phi:                                           ; preds = %and.phi84, %assert_ok77
  %val86 = phi i1 [ true, %assert_ok77 ], [ %val85, %and.phi84 ], !dbg !3257
  br i1 %val86, label %assert_ok88, label %assert_fail87, !dbg !3257

assert_fail87:                                    ; preds = %or.phi
  %94 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3250
  call void %94(ptr @.panic_msg.16, i64 65, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 119) #6, !dbg !3250
  unreachable, !dbg !3250

assert_ok88:                                      ; preds = %or.phi
  %95 = call i64 @std.core.mem.allocator.DynamicArenaAllocator.acquire(ptr %retparam, ptr %87, i64 %88, i32 0, i64 %89), !dbg !3250
  %not_err = icmp eq i64 %95, 0, !dbg !3250
  %96 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3250
  br i1 %96, label %after_check, label %assign_optional, !dbg !3250

assign_optional:                                  ; preds = %assert_ok88
  store i64 %95, ptr %error_var, align 8, !dbg !3250
  br label %guard_block, !dbg !3250

after_check:                                      ; preds = %assert_ok88
  br label %noerr_block, !dbg !3250

guard_block:                                      ; preds = %assign_optional
  %97 = load i64, ptr %error_var, align 8, !dbg !3250
  ret i64 %97, !dbg !3250

noerr_block:                                      ; preds = %after_check
  %98 = load ptr, ptr %retparam, align 8, !dbg !3250
  store ptr %98, ptr %new_mem, align 8, !dbg !3250
  %99 = load ptr, ptr %new_mem, align 8
  store ptr %99, ptr %dst, align 8
  %100 = load ptr, ptr %old_pointer, align 8
  store ptr %100, ptr %src, align 8
  %101 = load i64, ptr %old_size, align 8
  store i64 %101, ptr %len, align 8
  %102 = load ptr, ptr %dst, align 8, !dbg !3259
  %neq89 = icmp ne ptr %102, null, !dbg !3259
  br i1 %neq89, label %assert_ok91, label %assert_fail90, !dbg !3259

assert_fail90:                                    ; preds = %noerr_block
  %103 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3259
  call void %103(ptr @.panic_msg.75, i64 37, ptr @.file.71, i64 6, ptr @.func.20, i64 6, i32 329) #6, !dbg !3259
  unreachable, !dbg !3259

assert_ok91:                                      ; preds = %noerr_block
  %104 = load ptr, ptr %src, align 8, !dbg !3263
  %neq92 = icmp ne ptr %104, null, !dbg !3263
  br i1 %neq92, label %or.phi95, label %or.rhs93, !dbg !3263

or.rhs93:                                         ; preds = %assert_ok91
  %105 = load i64, ptr %len, align 8, !dbg !3264
  %eq94 = icmp eq i64 0, %105, !dbg !3264
  br label %or.phi95, !dbg !3264

or.phi95:                                         ; preds = %or.rhs93, %assert_ok91
  %val96 = phi i1 [ true, %assert_ok91 ], [ %eq94, %or.rhs93 ], !dbg !3264
  br i1 %val96, label %assert_ok98, label %assert_fail97, !dbg !3264

assert_fail97:                                    ; preds = %or.phi95
  %106 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3265
  call void %106(ptr @.panic_msg.76, i64 94, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 120) #6, !dbg !3265
  unreachable, !dbg !3265

assert_ok98:                                      ; preds = %or.phi95
  %107 = load i64, ptr %len, align 8, !dbg !3266
  %eq99 = icmp eq i64 0, %107, !dbg !3266
  br i1 %eq99, label %or.phi102, label %or.rhs100, !dbg !3266

or.rhs100:                                        ; preds = %assert_ok98
  %108 = load ptr, ptr %dst, align 8, !dbg !3267
  %109 = load i64, ptr %len, align 8, !dbg !3268
  %ptradd_any101 = getelementptr i8, ptr %108, i64 %109, !dbg !3268
  %110 = load ptr, ptr %src, align 8, !dbg !3269
  %le = icmp ule ptr %ptradd_any101, %110, !dbg !3267
  br label %or.phi102, !dbg !3267

or.phi102:                                        ; preds = %or.rhs100, %assert_ok98
  %val103 = phi i1 [ true, %assert_ok98 ], [ %le, %or.rhs100 ], !dbg !3267
  br i1 %val103, label %or.phi107, label %or.rhs104, !dbg !3267

or.rhs104:                                        ; preds = %or.phi102
  %111 = load ptr, ptr %src, align 8, !dbg !3270
  %112 = load i64, ptr %len, align 8, !dbg !3271
  %ptradd_any105 = getelementptr i8, ptr %111, i64 %112, !dbg !3271
  %113 = load ptr, ptr %dst, align 8, !dbg !3272
  %le106 = icmp ule ptr %ptradd_any105, %113, !dbg !3270
  br label %or.phi107, !dbg !3270

or.phi107:                                        ; preds = %or.rhs104, %or.phi102
  %val108 = phi i1 [ true, %or.phi102 ], [ %le106, %or.rhs104 ], !dbg !3270
  br i1 %val108, label %assert_ok110, label %assert_fail109, !dbg !3270

assert_fail109:                                   ; preds = %or.phi107
  %114 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3265
  call void %114(ptr @.panic_msg.77, i64 95, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 120) #6, !dbg !3265
  unreachable, !dbg !3265

assert_ok110:                                     ; preds = %or.phi107
  %115 = load ptr, ptr %dst, align 8, !dbg !3273
  %116 = load ptr, ptr %src, align 8, !dbg !3274
  %117 = load i64, ptr %len, align 8, !dbg !3275
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %115, ptr %116, i64 %117, i1 false), !dbg !3276
  %118 = load ptr, ptr %new_mem, align 8, !dbg !3277
  store ptr %118, ptr %0, align 8, !dbg !3277
  ret i64 0, !dbg !3277

panic:                                            ; preds = %entry
  %119 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3179
  call void %119(ptr @.panic_msg, i64 62, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 94) #6, !dbg !3179
  unreachable, !dbg !3179

panic7:                                           ; preds = %assert_ok5
  %120 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3201
  call void %120(ptr @.panic_msg.140, i64 53, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 99) #6, !dbg !3201
  unreachable, !dbg !3201

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr, align 8
  %121 = insertvalue %any undef, ptr %taddr, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr10, align 8
  %123 = insertvalue %any undef, ptr %taddr10, 0
  %124 = insertvalue %any %123, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %122, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %124, ptr %ptradd11, align 16
  %125 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %125, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 99, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !3201
  unreachable, !dbg !3201

panic20:                                          ; preds = %if.then
  %126 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3211
  call void %126(ptr @.panic_msg.140, i64 53, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 103) #6, !dbg !3211
  unreachable, !dbg !3211

panic22:                                          ; preds = %checkok21
  store i64 8, ptr %taddr23, align 8
  %127 = insertvalue %any undef, ptr %taddr23, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr24, align 8
  %129 = insertvalue %any undef, ptr %taddr24, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %128, ptr %varargslots25, align 16
  %ptradd26 = getelementptr inbounds i8, ptr %varargslots25, i64 16
  store %any %130, ptr %ptradd26, align 16
  %131 = insertvalue %"any[]" undef, ptr %varargslots25, 0
  %"$$temp27" = insertvalue %"any[]" %131, i64 2, 1
  store %"any[]" %"$$temp27", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 103, ptr byval(%"any[]") align 8 %indirectarg28) #6, !dbg !3211
  unreachable, !dbg !3211

panic61:                                          ; preds = %if.exit59
  %132 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3243
  call void %132(ptr @.panic_msg.140, i64 53, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 115) #6, !dbg !3243
  unreachable, !dbg !3243

panic63:                                          ; preds = %checkok62
  store i64 8, ptr %taddr64, align 8
  %133 = insertvalue %any undef, ptr %taddr64, 0
  %134 = insertvalue %any %133, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %79, ptr %taddr65, align 8
  %135 = insertvalue %any undef, ptr %taddr65, 0
  %136 = insertvalue %any %135, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %134, ptr %varargslots66, align 16
  %ptradd67 = getelementptr inbounds i8, ptr %varargslots66, i64 16
  store %any %136, ptr %ptradd67, align 16
  %137 = insertvalue %"any[]" undef, ptr %varargslots66, 0
  %"$$temp68" = insertvalue %"any[]" %137, i64 2, 1
  store %"any[]" %"$$temp68", ptr %indirectarg69, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.134, i64 16, ptr @.func.20, i64 6, i32 115, ptr byval(%"any[]") align 8 %indirectarg69) #6, !dbg !3243
  unreachable, !dbg !3243
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.DynamicArenaAllocator.reset(ptr %0) #0 comdat !dbg !3278 {
entry:
  %self = alloca ptr, align 8
  %page = alloca ptr, align 8
  %unused_page_ptr = alloca ptr, align 8
  %next_page = alloca ptr, align 8
  %prev_unused = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !3279
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3279
  br i1 %2, label %panic, label %checkok, !dbg !3279

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3280, !DIExpression(), !3281)
    #dbg_declare(ptr %page, !3282, !DIExpression(), !3283)
  %3 = load ptr, ptr %self, align 8, !dbg !3284
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !3284
  %4 = load ptr, ptr %ptradd, align 8, !dbg !3284
  store ptr %4, ptr %page, align 8, !dbg !3284
    #dbg_declare(ptr %unused_page_ptr, !3285, !DIExpression(), !3287)
  %5 = load ptr, ptr %self, align 8, !dbg !3288
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 24, !dbg !3288
  store ptr %ptradd1, ptr %unused_page_ptr, align 8, !dbg !3288
  br label %loop.cond, !dbg !3289

loop.cond:                                        ; preds = %checkok20, %checkok
  %6 = load ptr, ptr %page, align 8, !dbg !3290
  %i2b = icmp ne ptr %6, null, !dbg !3290
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !3290

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %next_page, !3292, !DIExpression(), !3294)
  %7 = load ptr, ptr %page, align 8, !dbg !3295
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !3295
  %8 = load ptr, ptr %ptradd2, align 8, !dbg !3295
  store ptr %8, ptr %next_page, align 8, !dbg !3295
  %9 = load ptr, ptr %page, align 8, !dbg !3296
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 24, !dbg !3296
  store i64 0, ptr %ptradd3, align 8, !dbg !3297
    #dbg_declare(ptr %prev_unused, !3298, !DIExpression(), !3299)
  %10 = load ptr, ptr %unused_page_ptr, align 8, !dbg !3300
  %checknull = icmp eq ptr %10, null, !dbg !3300
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3300
  br i1 %11, label %panic4, label %checkok5, !dbg !3300

checkok5:                                         ; preds = %loop.body
  %12 = ptrtoint ptr %10 to i64, !dbg !3300
  %13 = urem i64 %12, 8, !dbg !3300
  %14 = icmp ne i64 %13, 0, !dbg !3300
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !3300
  br i1 %15, label %panic6, label %checkok9, !dbg !3300

checkok9:                                         ; preds = %checkok5
  %16 = load ptr, ptr %10, align 8, !dbg !3300
  store ptr %16, ptr %prev_unused, align 8, !dbg !3300
  %17 = load ptr, ptr %unused_page_ptr, align 8, !dbg !3301
  %checknull10 = icmp eq ptr %17, null, !dbg !3301
  %18 = call i1 @llvm.expect.i1(i1 %checknull10, i1 false), !dbg !3301
  br i1 %18, label %panic11, label %checkok12, !dbg !3301

checkok12:                                        ; preds = %checkok9
  %19 = ptrtoint ptr %17 to i64, !dbg !3301
  %20 = urem i64 %19, 8, !dbg !3301
  %21 = icmp ne i64 %20, 0, !dbg !3301
  %22 = call i1 @llvm.expect.i1(i1 %21, i1 false), !dbg !3301
  br i1 %22, label %panic13, label %checkok20, !dbg !3301

checkok20:                                        ; preds = %checkok12
  %23 = load ptr, ptr %page, align 8, !dbg !3302
  store ptr %23, ptr %17, align 8, !dbg !3302
  %24 = load ptr, ptr %page, align 8, !dbg !3303
  %ptradd21 = getelementptr inbounds i8, ptr %24, i64 8, !dbg !3303
  %25 = load ptr, ptr %prev_unused, align 8, !dbg !3304
  store ptr %25, ptr %ptradd21, align 8, !dbg !3304
  %26 = load ptr, ptr %next_page, align 8, !dbg !3305
  store ptr %26, ptr %page, align 8, !dbg !3305
  br label %loop.cond, !dbg !3305

loop.exit:                                        ; preds = %loop.cond
  %27 = load ptr, ptr %self, align 8, !dbg !3306
  %ptradd22 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !3306
  %28 = load ptr, ptr %page, align 8, !dbg !3307
  store ptr %28, ptr %ptradd22, align 8, !dbg !3307
  ret void, !dbg !3307

panic:                                            ; preds = %entry
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3281
  call void %29(ptr @.panic_msg, i64 62, ptr @.file.134, i64 16, ptr @.func.111, i64 5, i32 124) #6, !dbg !3281
  unreachable, !dbg !3281

panic4:                                           ; preds = %loop.body
  %30 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3300
  call void %30(ptr @.panic_msg.143, i64 56, ptr @.file.134, i64 16, ptr @.func.111, i64 5, i32 132) #6, !dbg !3300
  unreachable, !dbg !3300

panic6:                                           ; preds = %checkok5
  store i64 8, ptr %taddr, align 8
  %31 = insertvalue %any undef, ptr %taddr, 0
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr7, align 8
  %33 = insertvalue %any undef, ptr %taddr7, 0
  %34 = insertvalue %any %33, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %32, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %34, ptr %ptradd8, align 16
  %35 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %35, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.134, i64 16, ptr @.func.111, i64 5, i32 132, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !3300
  unreachable, !dbg !3300

panic11:                                          ; preds = %checkok9
  %36 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3301
  call void %36(ptr @.panic_msg.143, i64 56, ptr @.file.134, i64 16, ptr @.func.111, i64 5, i32 133) #6, !dbg !3301
  unreachable, !dbg !3301

panic13:                                          ; preds = %checkok12
  store i64 8, ptr %taddr14, align 8
  %37 = insertvalue %any undef, ptr %taddr14, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr15, align 8
  %39 = insertvalue %any undef, ptr %taddr15, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %38, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %40, ptr %ptradd17, align 16
  %41 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %41, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 94, ptr @.file.134, i64 16, ptr @.func.111, i64 5, i32 133, ptr byval(%"any[]") align 8 %indirectarg19) #6, !dbg !3301
  unreachable, !dbg !3301
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.DynamicArenaAllocator._alloc_new(ptr %0, ptr %1, i64 %2, i64 %3) #0 !dbg !3308 {
entry:
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %x = alloca i64, align 8
  %page_size = alloca i64, align 8
  %x3 = alloca i64, align 8
  %x5 = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %mem = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %size20 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x21 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %page = alloca ptr, align 8
  %page.f = alloca i64, align 8
  %allocator39 = alloca %any, align 8
  %allocator41 = alloca %any, align 8
  %size42 = alloca i64, align 8
  %blockret43 = alloca ptr, align 8
  %x48 = alloca i64, align 8
  %.inlinecache66 = alloca ptr, align 8
  %.cachedtype67 = alloca ptr, align 8
  %retparam76 = alloca ptr, align 8
  %err = alloca i64, align 8
  %allocator85 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache93 = alloca ptr, align 8
  %.cachedtype94 = alloca ptr, align 8
  %mem_start = alloca ptr, align 8
  %ptr105 = alloca ptr, align 8
  %alignment106 = alloca i64, align 8
  %x107 = alloca i64, align 8
  %chunk = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype94, align 8, !dbg !3311
  store ptr null, ptr %.cachedtype67, align 8, !dbg !3311
  store ptr null, ptr %.cachedtype, align 8, !dbg !3311
  %4 = icmp eq ptr %1, null, !dbg !3311
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3311
  br i1 %5, label %panic, label %checkok, !dbg !3311

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3312, !DIExpression(), !3313)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !3314, !DIExpression(), !3315)
  store i64 %3, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !3316, !DIExpression(), !3317)
  %6 = load i64, ptr %alignment, align 8
  store i64 %6, ptr %x, align 8
  %7 = load i64, ptr %x, align 8, !dbg !3318
  %neq = icmp ne i64 0, %7, !dbg !3318
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !3318

and.rhs:                                          ; preds = %checkok
  %8 = load i64, ptr %x, align 8, !dbg !3322
  %9 = load i64, ptr %x, align 8, !dbg !3323
  %sub = sub i64 %9, 1, !dbg !3323
  %and = and i64 %8, %sub, !dbg !3322
  %eq = icmp eq i64 %and, 0, !dbg !3322
  br label %and.phi, !dbg !3322

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %eq, %and.rhs ], !dbg !3322
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !3322

assert_fail:                                      ; preds = %and.phi
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3320
  call void %10(ptr @.panic_msg.70, i64 51, ptr @.file.134, i64 16, ptr @.func.144, i64 10, i32 141) #6, !dbg !3320
  unreachable, !dbg !3320

assert_ok:                                        ; preds = %and.phi
  %11 = load i64, ptr %size, align 8, !dbg !3324
  %lt = icmp ult i64 0, %11, !dbg !3324
  br i1 %lt, label %assert_ok2, label %assert_fail1, !dbg !3324

assert_fail1:                                     ; preds = %assert_ok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3324
  call void %12(ptr @.panic_msg.101, i64 29, ptr @.file.134, i64 16, ptr @.func.144, i64 10, i32 142) #6, !dbg !3324
  unreachable, !dbg !3324

assert_ok2:                                       ; preds = %assert_ok
    #dbg_declare(ptr %page_size, !3325, !DIExpression(), !3326)
  %13 = load ptr, ptr %self, align 8, !dbg !3327
  %ptradd = getelementptr inbounds i8, ptr %13, i64 32, !dbg !3327
  %14 = load i64, ptr %ptradd, align 8
  store i64 %14, ptr %x3, align 8
  %15 = load i64, ptr %size, align 8, !dbg !3328
  %add = add i64 %15, 8, !dbg !3328
  %16 = load i64, ptr %alignment, align 8, !dbg !3329
  %add4 = add i64 %add, %16, !dbg !3328
  %17 = load i64, ptr %alignment, align 8, !dbg !3330
  store i64 %17, ptr %x5, align 8
  %18 = load i64, ptr %x5, align 8, !dbg !3331
  %neq6 = icmp ne i64 0, %18, !dbg !3331
  br i1 %neq6, label %and.rhs7, label %and.phi11, !dbg !3331

and.rhs7:                                         ; preds = %assert_ok2
  %19 = load i64, ptr %x5, align 8, !dbg !3334
  %20 = load i64, ptr %x5, align 8, !dbg !3335
  %sub8 = sub i64 %20, 1, !dbg !3335
  %and9 = and i64 %19, %sub8, !dbg !3334
  %eq10 = icmp eq i64 %and9, 0, !dbg !3334
  br label %and.phi11, !dbg !3334

and.phi11:                                        ; preds = %and.rhs7, %assert_ok2
  %val12 = phi i1 [ false, %assert_ok2 ], [ %eq10, %and.rhs7 ], !dbg !3334
  br i1 %val12, label %assert_ok14, label %assert_fail13, !dbg !3334

assert_fail13:                                    ; preds = %and.phi11
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3333
  call void %21(ptr @.panic_msg.70, i64 51, ptr @.file.134, i64 16, ptr @.func.144, i64 10, i32 148) #6, !dbg !3333
  unreachable, !dbg !3333

assert_ok14:                                      ; preds = %and.phi11
  %22 = call i64 @std.core.mem.aligned_offset(i64 %add4, i64 %17), !dbg !3333
  store i64 %22, ptr %.anon, align 8
  %23 = load i64, ptr %x3, align 8
  store i64 %23, ptr %a, align 8
  %24 = load i64, ptr %.anon, align 8
  store i64 %24, ptr %b, align 8
  %25 = load i64, ptr %a, align 8, !dbg !3336
  %26 = load i64, ptr %b, align 8, !dbg !3342
  %gt = icmp ugt i64 %25, %26, !dbg !3336
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !3336

cond.lhs:                                         ; preds = %assert_ok14
  %27 = load i64, ptr %x3, align 8, !dbg !3343
  br label %cond.phi, !dbg !3343

cond.rhs:                                         ; preds = %assert_ok14
  %28 = load i64, ptr %.anon, align 8, !dbg !3344
  br label %cond.phi, !dbg !3344

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val15 = phi i64 [ %27, %cond.lhs ], [ %28, %cond.rhs ], !dbg !3344
  store i64 %val15, ptr %page_size, align 8, !dbg !3344
  %29 = load i64, ptr %page_size, align 8, !dbg !3345
  %30 = load i64, ptr %size, align 8, !dbg !3346
  %add16 = add i64 %30, 8, !dbg !3346
  %gt17 = icmp ugt i64 %29, %add16, !dbg !3345
  br i1 %gt17, label %assert_ok19, label %assert_fail18, !dbg !3345

assert_fail18:                                    ; preds = %cond.phi
  %31 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3345
  call void %31(ptr @.panic_msg.145, i64 60, ptr @.file.134, i64 16, ptr @.func.144, i64 10, i32 149) #6, !dbg !3345
  unreachable, !dbg !3345

assert_ok19:                                      ; preds = %cond.phi
    #dbg_declare(ptr %mem, !3347, !DIExpression(), !3348)
  %32 = load ptr, ptr %self, align 8, !dbg !3349
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %32, i32 16, i1 false)
  %33 = load i64, ptr %page_size, align 8
  store i64 %33, ptr %size20, align 8
  %34 = load i64, ptr %size20, align 8, !dbg !3350
  %i2nb = icmp eq i64 %34, 0, !dbg !3350
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3350

if.then:                                          ; preds = %assert_ok19
  store ptr null, ptr %blockret, align 8, !dbg !3353
  br label %expr_block.exit, !dbg !3353

if.exit:                                          ; preds = %assert_ok19
  %35 = load i64, ptr %size20, align 8, !dbg !3354
  br i1 true, label %or.phi, label %or.rhs, !dbg !3355

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x21, align 8
  %36 = load i64, ptr %x21, align 8, !dbg !3356
  %neq22 = icmp ne i64 0, %36, !dbg !3356
  br i1 %neq22, label %and.rhs23, label %and.phi27, !dbg !3356

and.rhs23:                                        ; preds = %or.rhs
  %37 = load i64, ptr %x21, align 8, !dbg !3359
  %38 = load i64, ptr %x21, align 8, !dbg !3360
  %sub24 = sub i64 %38, 1, !dbg !3360
  %and25 = and i64 %37, %sub24, !dbg !3359
  %eq26 = icmp eq i64 %and25, 0, !dbg !3359
  br label %and.phi27, !dbg !3359

and.phi27:                                        ; preds = %and.rhs23, %or.rhs
  %val28 = phi i1 [ false, %or.rhs ], [ %eq26, %and.rhs23 ], !dbg !3359
  br label %or.phi, !dbg !3359

or.phi:                                           ; preds = %and.phi27, %if.exit
  %val29 = phi i1 [ true, %if.exit ], [ %val28, %and.phi27 ], !dbg !3359
  br i1 %val29, label %assert_ok31, label %assert_fail30, !dbg !3359

assert_fail30:                                    ; preds = %or.phi
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3361
  call void %39(ptr @.panic_msg.16, i64 65, ptr @.file.73, i64 16, ptr @.func.144, i64 10, i32 85) #6, !dbg !3361
  unreachable, !dbg !3361

assert_ok31:                                      ; preds = %or.phi
  br i1 true, label %assert_ok33, label %assert_fail32, !dbg !3361

assert_fail32:                                    ; preds = %assert_ok31
  %40 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3361
  call void %40(ptr @.panic_msg.17, i64 80, ptr @.file.73, i64 16, ptr @.func.144, i64 10, i32 85) #6, !dbg !3361
  unreachable, !dbg !3361

assert_ok33:                                      ; preds = %assert_ok31
  %lt34 = icmp ult i64 0, %35, !dbg !3361
  br i1 %lt34, label %assert_ok36, label %assert_fail35, !dbg !3361

assert_fail35:                                    ; preds = %assert_ok33
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3361
  call void %41(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 16, ptr @.func.144, i64 10, i32 85) #6, !dbg !3361
  unreachable, !dbg !3361

assert_ok36:                                      ; preds = %assert_ok33
  %ptradd37 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !3361
  %42 = load i64, ptr %ptradd37, align 8, !dbg !3361
  %43 = inttoptr i64 %42 to ptr, !dbg !3361
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3311
  %44 = icmp eq ptr %43, %type, !dbg !3311
  br i1 %44, label %cache_hit, label %cache_miss, !dbg !3311

cache_miss:                                       ; preds = %assert_ok36
  %ptradd38 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !3311
  %45 = load ptr, ptr %ptradd38, align 8, !dbg !3311
  %46 = call ptr @.dyn_search(ptr %45, ptr @"$sel.acquire"), !dbg !3311
  store ptr %46, ptr %.inlinecache, align 8, !dbg !3311
  store ptr %43, ptr %.cachedtype, align 8, !dbg !3311
  br label %47, !dbg !3311

cache_hit:                                        ; preds = %assert_ok36
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3311
  br label %47, !dbg !3311

47:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %46, %cache_miss ], !dbg !3311
  %48 = icmp eq ptr %fn_phi, null, !dbg !3311
  br i1 %48, label %missing_function, label %match, !dbg !3311

missing_function:                                 ; preds = %47
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3311
  call void %49(ptr @.panic_msg.19, i64 44, ptr @.file.73, i64 16, ptr @.func.144, i64 10, i32 85) #6, !dbg !3311
  unreachable, !dbg !3311

match:                                            ; preds = %47
  %50 = load ptr, ptr %allocator, align 8
  %51 = call i64 %fn_phi(ptr %retparam, ptr %50, i64 %35, i32 0, i64 0), !dbg !3361
  %not_err = icmp eq i64 %51, 0, !dbg !3361
  %52 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3361
  br i1 %52, label %after_check, label %assign_optional, !dbg !3361

assign_optional:                                  ; preds = %match
  store i64 %51, ptr %error_var, align 8, !dbg !3361
  br label %guard_block, !dbg !3361

after_check:                                      ; preds = %match
  %53 = load ptr, ptr %retparam, align 8, !dbg !3361
  store ptr %53, ptr %blockret, align 8, !dbg !3361
  br label %expr_block.exit, !dbg !3361

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !3361

guard_block:                                      ; preds = %assign_optional
  %54 = load i64, ptr %error_var, align 8, !dbg !3361
  ret i64 %54, !dbg !3361

noerr_block:                                      ; preds = %expr_block.exit
  %55 = load ptr, ptr %blockret, align 8, !dbg !3361
  store ptr %55, ptr %mem, align 8, !dbg !3361
    #dbg_declare(ptr %page, !3362, !DIExpression(), !3363)
  %56 = load ptr, ptr %self, align 8, !dbg !3364
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator39, ptr align 8 %56, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator41, ptr align 8 %allocator39, i32 16, i1 false)
  store i64 40, ptr %size42, align 8
  %57 = load i64, ptr %size42, align 8, !dbg !3365
  %i2nb44 = icmp eq i64 %57, 0, !dbg !3365
  br i1 %i2nb44, label %if.then45, label %if.exit46, !dbg !3365

if.then45:                                        ; preds = %noerr_block
  store ptr null, ptr %blockret43, align 8, !dbg !3370
  br label %expr_block.exit80, !dbg !3370

if.exit46:                                        ; preds = %noerr_block
  %58 = load i64, ptr %size42, align 8, !dbg !3371
  br i1 true, label %or.phi56, label %or.rhs47, !dbg !3372

or.rhs47:                                         ; preds = %if.exit46
  store i64 0, ptr %x48, align 8
  %59 = load i64, ptr %x48, align 8, !dbg !3373
  %neq49 = icmp ne i64 0, %59, !dbg !3373
  br i1 %neq49, label %and.rhs50, label %and.phi54, !dbg !3373

and.rhs50:                                        ; preds = %or.rhs47
  %60 = load i64, ptr %x48, align 8, !dbg !3376
  %61 = load i64, ptr %x48, align 8, !dbg !3377
  %sub51 = sub i64 %61, 1, !dbg !3377
  %and52 = and i64 %60, %sub51, !dbg !3376
  %eq53 = icmp eq i64 %and52, 0, !dbg !3376
  br label %and.phi54, !dbg !3376

and.phi54:                                        ; preds = %and.rhs50, %or.rhs47
  %val55 = phi i1 [ false, %or.rhs47 ], [ %eq53, %and.rhs50 ], !dbg !3376
  br label %or.phi56, !dbg !3376

or.phi56:                                         ; preds = %and.phi54, %if.exit46
  %val57 = phi i1 [ true, %if.exit46 ], [ %val55, %and.phi54 ], !dbg !3376
  br i1 %val57, label %assert_ok59, label %assert_fail58, !dbg !3376

assert_fail58:                                    ; preds = %or.phi56
  %62 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3378
  call void %62(ptr @.panic_msg.16, i64 65, ptr @.file.73, i64 16, ptr @.func.144, i64 10, i32 97) #6, !dbg !3378
  unreachable, !dbg !3378

assert_ok59:                                      ; preds = %or.phi56
  br i1 true, label %assert_ok61, label %assert_fail60, !dbg !3378

assert_fail60:                                    ; preds = %assert_ok59
  %63 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3378
  call void %63(ptr @.panic_msg.17, i64 80, ptr @.file.73, i64 16, ptr @.func.144, i64 10, i32 97) #6, !dbg !3378
  unreachable, !dbg !3378

assert_ok61:                                      ; preds = %assert_ok59
  %lt62 = icmp ult i64 0, %58, !dbg !3378
  br i1 %lt62, label %assert_ok64, label %assert_fail63, !dbg !3378

assert_fail63:                                    ; preds = %assert_ok61
  %64 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3378
  call void %64(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 16, ptr @.func.144, i64 10, i32 97) #6, !dbg !3378
  unreachable, !dbg !3378

assert_ok64:                                      ; preds = %assert_ok61
  %ptradd65 = getelementptr inbounds i8, ptr %allocator41, i64 8, !dbg !3378
  %65 = load i64, ptr %ptradd65, align 8, !dbg !3378
  %66 = inttoptr i64 %65 to ptr, !dbg !3378
  %type68 = load ptr, ptr %.cachedtype67, align 8, !dbg !3311
  %67 = icmp eq ptr %66, %type68, !dbg !3311
  br i1 %67, label %cache_hit71, label %cache_miss69, !dbg !3311

cache_miss69:                                     ; preds = %assert_ok64
  %ptradd70 = getelementptr inbounds i8, ptr %66, i64 16, !dbg !3311
  %68 = load ptr, ptr %ptradd70, align 8, !dbg !3311
  %69 = call ptr @.dyn_search(ptr %68, ptr @"$sel.acquire"), !dbg !3311
  store ptr %69, ptr %.inlinecache66, align 8, !dbg !3311
  store ptr %66, ptr %.cachedtype67, align 8, !dbg !3311
  br label %70, !dbg !3311

cache_hit71:                                      ; preds = %assert_ok64
  %cache_hit_fn72 = load ptr, ptr %.inlinecache66, align 8, !dbg !3311
  br label %70, !dbg !3311

70:                                               ; preds = %cache_hit71, %cache_miss69
  %fn_phi73 = phi ptr [ %cache_hit_fn72, %cache_hit71 ], [ %69, %cache_miss69 ], !dbg !3311
  %71 = icmp eq ptr %fn_phi73, null, !dbg !3311
  br i1 %71, label %missing_function74, label %match75, !dbg !3311

missing_function74:                               ; preds = %70
  %72 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3311
  call void %72(ptr @.panic_msg.19, i64 44, ptr @.file.73, i64 16, ptr @.func.144, i64 10, i32 97) #6, !dbg !3311
  unreachable, !dbg !3311

match75:                                          ; preds = %70
  %73 = load ptr, ptr %allocator41, align 8
  %74 = call i64 %fn_phi73(ptr %retparam76, ptr %73, i64 %58, i32 1, i64 0), !dbg !3378
  %not_err77 = icmp eq i64 %74, 0, !dbg !3378
  %75 = call i1 @llvm.expect.i1(i1 %not_err77, i1 true), !dbg !3378
  br i1 %75, label %after_check79, label %assign_optional78, !dbg !3378

assign_optional78:                                ; preds = %match75
  store i64 %74, ptr %page.f, align 8, !dbg !3378
  br label %after_assign, !dbg !3378

after_check79:                                    ; preds = %match75
  %76 = load ptr, ptr %retparam76, align 8, !dbg !3378
  store ptr %76, ptr %blockret43, align 8, !dbg !3378
  br label %expr_block.exit80, !dbg !3378

expr_block.exit80:                                ; preds = %after_check79, %if.then45
  %77 = load ptr, ptr %blockret43, align 8, !dbg !3378
  store ptr %77, ptr %page, align 8, !dbg !3378
  store i64 0, ptr %page.f, align 8, !dbg !3378
  br label %after_assign, !dbg !3378

after_assign:                                     ; preds = %expr_block.exit80, %assign_optional78
    #dbg_declare(ptr %err, !3379, !DIExpression(), !3380)
  br label %testblock, !dbg !3380

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %page.f, align 8, !dbg !3381
  %not_err81 = icmp eq i64 %optval, 0, !dbg !3381
  %78 = call i1 @llvm.expect.i1(i1 %not_err81, i1 true), !dbg !3381
  br i1 %78, label %after_check83, label %assign_optional82, !dbg !3381

assign_optional82:                                ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !3381
  br label %end_block, !dbg !3381

after_check83:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !3381
  br label %end_block, !dbg !3381

end_block:                                        ; preds = %after_check83, %assign_optional82
  %79 = load i64, ptr %err, align 8, !dbg !3381
  %i2b = icmp ne i64 %79, 0, !dbg !3381
  br i1 %i2b, label %if.then84, label %if.exit104, !dbg !3381

if.then84:                                        ; preds = %end_block
  %80 = load ptr, ptr %self, align 8, !dbg !3382
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator85, ptr align 8 %80, i32 16, i1 false)
  %81 = load ptr, ptr %mem, align 8
  store ptr %81, ptr %ptr, align 8
  %82 = load ptr, ptr %ptr, align 8, !dbg !3384
  %i2nb86 = icmp eq ptr %82, null, !dbg !3384
  br i1 %i2nb86, label %if.then87, label %if.exit88, !dbg !3384

if.then87:                                        ; preds = %if.then84
  br label %expr_block.exit103, !dbg !3387

if.exit88:                                        ; preds = %if.then84
  %83 = load ptr, ptr %ptr, align 8, !dbg !3388
  %neq89 = icmp ne ptr %83, null, !dbg !3389
  br i1 %neq89, label %assert_ok91, label %assert_fail90, !dbg !3389

assert_fail90:                                    ; preds = %if.exit88
  %84 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3389
  call void %84(ptr @.panic_msg.27, i64 75, ptr @.file.73, i64 16, ptr @.func.144, i64 10, i32 122) #6, !dbg !3389
  unreachable, !dbg !3389

assert_ok91:                                      ; preds = %if.exit88
  %ptradd92 = getelementptr inbounds i8, ptr %allocator85, i64 8, !dbg !3389
  %85 = load i64, ptr %ptradd92, align 8, !dbg !3389
  %86 = inttoptr i64 %85 to ptr, !dbg !3389
  %type95 = load ptr, ptr %.cachedtype94, align 8, !dbg !3311
  %87 = icmp eq ptr %86, %type95, !dbg !3311
  br i1 %87, label %cache_hit98, label %cache_miss96, !dbg !3311

cache_miss96:                                     ; preds = %assert_ok91
  %ptradd97 = getelementptr inbounds i8, ptr %86, i64 16, !dbg !3311
  %88 = load ptr, ptr %ptradd97, align 8, !dbg !3311
  %89 = call ptr @.dyn_search(ptr %88, ptr @"$sel.release"), !dbg !3311
  store ptr %89, ptr %.inlinecache93, align 8, !dbg !3311
  store ptr %86, ptr %.cachedtype94, align 8, !dbg !3311
  br label %90, !dbg !3311

cache_hit98:                                      ; preds = %assert_ok91
  %cache_hit_fn99 = load ptr, ptr %.inlinecache93, align 8, !dbg !3311
  br label %90, !dbg !3311

90:                                               ; preds = %cache_hit98, %cache_miss96
  %fn_phi100 = phi ptr [ %cache_hit_fn99, %cache_hit98 ], [ %89, %cache_miss96 ], !dbg !3311
  %91 = icmp eq ptr %fn_phi100, null, !dbg !3311
  br i1 %91, label %missing_function101, label %match102, !dbg !3311

missing_function101:                              ; preds = %90
  %92 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3311
  call void %92(ptr @.panic_msg.28, i64 44, ptr @.file.73, i64 16, ptr @.func.144, i64 10, i32 122) #6, !dbg !3311
  unreachable, !dbg !3311

match102:                                         ; preds = %90
  %93 = load ptr, ptr %allocator85, align 8, !dbg !3311
  call void %fn_phi100(ptr %93, ptr %83, i8 zeroext 0), !dbg !3311
  br label %expr_block.exit103, !dbg !3311

expr_block.exit103:                               ; preds = %match102, %if.then87
  %94 = load i64, ptr %err, align 8, !dbg !3390
  ret i64 %94, !dbg !3390

if.exit104:                                       ; preds = %end_block
  %95 = load ptr, ptr %page, align 8, !dbg !3391
  %96 = load ptr, ptr %mem, align 8, !dbg !3392
  store ptr %96, ptr %95, align 8, !dbg !3392
    #dbg_declare(ptr %mem_start, !3393, !DIExpression(), !3394)
  %97 = load ptr, ptr %mem, align 8, !dbg !3395
  %ptradd_any = getelementptr i8, ptr %97, i64 8, !dbg !3396
  store ptr %ptradd_any, ptr %ptr105, align 8
  %98 = load i64, ptr %alignment, align 8
  store i64 %98, ptr %alignment106, align 8
  %99 = load ptr, ptr %ptr105, align 8, !dbg !3397
  %ptrxi = ptrtoint ptr %99 to i64, !dbg !3397
  %100 = load i64, ptr %alignment106, align 8, !dbg !3400
  store i64 %100, ptr %x107, align 8
  %101 = load i64, ptr %x107, align 8, !dbg !3401
  %neq108 = icmp ne i64 0, %101, !dbg !3401
  br i1 %neq108, label %and.rhs109, label %and.phi113, !dbg !3401

and.rhs109:                                       ; preds = %if.exit104
  %102 = load i64, ptr %x107, align 8, !dbg !3404
  %103 = load i64, ptr %x107, align 8, !dbg !3405
  %sub110 = sub i64 %103, 1, !dbg !3405
  %and111 = and i64 %102, %sub110, !dbg !3404
  %eq112 = icmp eq i64 %and111, 0, !dbg !3404
  br label %and.phi113, !dbg !3404

and.phi113:                                       ; preds = %and.rhs109, %if.exit104
  %val114 = phi i1 [ false, %if.exit104 ], [ %eq112, %and.rhs109 ], !dbg !3404
  br i1 %val114, label %assert_ok116, label %assert_fail115, !dbg !3404

assert_fail115:                                   ; preds = %and.phi113
  %104 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3403
  call void %104(ptr @.panic_msg.70, i64 51, ptr @.file.71, i64 6, ptr @.func.144, i64 10, i32 290) #6, !dbg !3403
  unreachable, !dbg !3403

assert_ok116:                                     ; preds = %and.phi113
  %105 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %100), !dbg !3406
  %intptr = inttoptr i64 %105 to ptr, !dbg !3406
  store ptr %intptr, ptr %mem_start, align 8, !dbg !3406
  %106 = load ptr, ptr %mem_start, align 8, !dbg !3407
  %107 = load i64, ptr %size, align 8, !dbg !3408
  %ptradd_any117 = getelementptr i8, ptr %106, i64 %107, !dbg !3408
  %108 = load ptr, ptr %mem, align 8, !dbg !3409
  %109 = load i64, ptr %page_size, align 8, !dbg !3410
  %ptradd_any118 = getelementptr i8, ptr %108, i64 %109, !dbg !3410
  %lt119 = icmp ult ptr %ptradd_any117, %ptradd_any118, !dbg !3407
  br i1 %lt119, label %assert_ok121, label %assert_fail120, !dbg !3407

assert_fail120:                                   ; preds = %assert_ok116
  %110 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3407
  call void %110(ptr @.panic_msg.146, i64 51, ptr @.file.134, i64 16, ptr @.func.144, i64 10, i32 160) #6, !dbg !3407
  unreachable, !dbg !3407

assert_ok121:                                     ; preds = %assert_ok116
    #dbg_declare(ptr %chunk, !3411, !DIExpression(), !3416)
  %111 = load ptr, ptr %mem_start, align 8, !dbg !3417
  %ptradd_any122 = getelementptr i8, ptr %111, i64 -8, !dbg !3418
  store ptr %ptradd_any122, ptr %chunk, align 8, !dbg !3418
  %112 = load ptr, ptr %chunk, align 8, !dbg !3419
  %113 = load i64, ptr %size, align 8, !dbg !3420
  store i64 %113, ptr %112, align 8, !dbg !3420
  %114 = load ptr, ptr %page, align 8, !dbg !3421
  %ptradd123 = getelementptr inbounds i8, ptr %114, i64 8, !dbg !3421
  %115 = load ptr, ptr %self, align 8, !dbg !3422
  %ptradd124 = getelementptr inbounds i8, ptr %115, i64 16, !dbg !3422
  %116 = load ptr, ptr %ptradd124, align 8, !dbg !3422
  store ptr %116, ptr %ptradd123, align 8, !dbg !3422
  %117 = load ptr, ptr %page, align 8, !dbg !3423
  %ptradd125 = getelementptr inbounds i8, ptr %117, i64 16, !dbg !3423
  %118 = load i64, ptr %page_size, align 8, !dbg !3424
  store i64 %118, ptr %ptradd125, align 8, !dbg !3424
  %119 = load ptr, ptr %page, align 8, !dbg !3425
  %ptradd126 = getelementptr inbounds i8, ptr %119, i64 24, !dbg !3425
  %120 = load ptr, ptr %mem_start, align 8, !dbg !3426
  %121 = load i64, ptr %size, align 8, !dbg !3427
  %ptradd_any127 = getelementptr i8, ptr %120, i64 %121, !dbg !3427
  %122 = load ptr, ptr %page, align 8, !dbg !3428
  %123 = load ptr, ptr %122, align 8, !dbg !3428
  %124 = ptrtoint ptr %123 to i64, !dbg !3426
  %125 = ptrtoint ptr %ptradd_any127 to i64, !dbg !3426
  %126 = sub i64 %125, %124, !dbg !3426
  %127 = sdiv exact i64 %126, 1, !dbg !3426
  store i64 %127, ptr %ptradd126, align 8, !dbg !3426
  %128 = load ptr, ptr %self, align 8, !dbg !3429
  %ptradd128 = getelementptr inbounds i8, ptr %128, i64 16, !dbg !3429
  %129 = load ptr, ptr %page, align 8, !dbg !3430
  store ptr %129, ptr %ptradd128, align 8, !dbg !3430
  %130 = load ptr, ptr %page, align 8, !dbg !3431
  %ptradd129 = getelementptr inbounds i8, ptr %130, i64 32, !dbg !3431
  %131 = load ptr, ptr %mem_start, align 8, !dbg !3432
  store ptr %131, ptr %ptradd129, align 8, !dbg !3432
  %132 = load ptr, ptr %mem_start, align 8, !dbg !3433
  store ptr %132, ptr %0, align 8, !dbg !3433
  ret i64 0, !dbg !3433

panic:                                            ; preds = %entry
  %133 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3313
  call void %133(ptr @.panic_msg, i64 62, ptr @.file.134, i64 16, ptr @.func.144, i64 10, i32 145) #6, !dbg !3313
  unreachable, !dbg !3313
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.DynamicArenaAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !3434 {
entry:
  %self = alloca ptr, align 8
  %size = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %x = alloca i64, align 8
  %page = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %x16 = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %start = alloca ptr, align 8
  %ptr31 = alloca ptr, align 8
  %alignment32 = alloca i64, align 8
  %x33 = alloca i64, align 8
  %new_used = alloca i64, align 8
  %ptr52 = alloca ptr, align 8
  %alignment53 = alloca i64, align 8
  %x55 = alloca i64, align 8
  %error_var76 = alloca i64, align 8
  %x77 = alloca i64, align 8
  %retparam90 = alloca ptr, align 8
  %chunk = alloca ptr, align 8
  %dst = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !3437
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !3437
  br i1 %6, label %panic, label %checkok, !dbg !3437

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3438, !DIExpression(), !3439)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !3440, !DIExpression(), !3441)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !3442, !DIExpression(), !3443)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !3444, !DIExpression(), !3445)
  %7 = load i64, ptr %size, align 8, !dbg !3446
  %lt = icmp ult i64 0, %7, !dbg !3446
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3446

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3446
  call void %8(ptr @.panic_msg.142, i64 57, ptr @.file.134, i64 16, ptr @.func.15, i64 7, i32 172) #6, !dbg !3446
  unreachable, !dbg !3446

assert_ok:                                        ; preds = %checkok
  %9 = load i64, ptr %alignment, align 8, !dbg !3448
  %i2nb = icmp eq i64 %9, 0, !dbg !3448
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !3448

or.rhs:                                           ; preds = %assert_ok
  %10 = load i64, ptr %alignment, align 8
  store i64 %10, ptr %x, align 8
  %11 = load i64, ptr %x, align 8, !dbg !3449
  %neq = icmp ne i64 0, %11, !dbg !3449
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !3449

and.rhs:                                          ; preds = %or.rhs
  %12 = load i64, ptr %x, align 8, !dbg !3452
  %13 = load i64, ptr %x, align 8, !dbg !3453
  %sub = sub i64 %13, 1, !dbg !3453
  %and = and i64 %12, %sub, !dbg !3452
  %eq = icmp eq i64 %and, 0, !dbg !3452
  br label %and.phi, !dbg !3452

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !3452
  br label %or.phi, !dbg !3452

or.phi:                                           ; preds = %and.phi, %assert_ok
  %val1 = phi i1 [ true, %assert_ok ], [ %val, %and.phi ], !dbg !3452
  br i1 %val1, label %assert_ok3, label %assert_fail2, !dbg !3452

assert_fail2:                                     ; preds = %or.phi
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3448
  call void %14(ptr @.panic_msg.16, i64 65, ptr @.file.134, i64 16, ptr @.func.15, i64 7, i32 173) #6, !dbg !3448
  unreachable, !dbg !3448

assert_ok3:                                       ; preds = %or.phi
  %15 = load i64, ptr %alignment, align 8, !dbg !3454
  %16 = call i64 @std.core.mem.allocator.alignment_for_allocation(i64 %15) #7, !dbg !3455
  store i64 %16, ptr %alignment, align 8, !dbg !3455
    #dbg_declare(ptr %page, !3456, !DIExpression(), !3457)
  %17 = load ptr, ptr %self, align 8, !dbg !3458
  %ptradd = getelementptr inbounds i8, ptr %17, i64 16, !dbg !3458
  %18 = load ptr, ptr %ptradd, align 8, !dbg !3458
  store ptr %18, ptr %page, align 8, !dbg !3458
    #dbg_declare(ptr %ptr, !3459, !DIExpression(), !3460)
  %19 = load ptr, ptr %page, align 8, !dbg !3461
  %i2nb4 = icmp eq ptr %19, null, !dbg !3461
  br i1 %i2nb4, label %and.rhs5, label %and.phi7, !dbg !3461

and.rhs5:                                         ; preds = %assert_ok3
  %20 = load ptr, ptr %self, align 8, !dbg !3464
  %ptradd6 = getelementptr inbounds i8, ptr %20, i64 24, !dbg !3464
  %21 = load ptr, ptr %ptradd6, align 8, !dbg !3464
  %i2b = icmp ne ptr %21, null, !dbg !3464
  br label %and.phi7, !dbg !3464

and.phi7:                                         ; preds = %and.rhs5, %assert_ok3
  %val8 = phi i1 [ false, %assert_ok3 ], [ %i2b, %and.rhs5 ], !dbg !3464
  br i1 %val8, label %if.then, label %if.exit, !dbg !3464

if.then:                                          ; preds = %and.phi7
  %22 = load ptr, ptr %self, align 8, !dbg !3465
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !3465
  %23 = load ptr, ptr %self, align 8, !dbg !3467
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 24, !dbg !3467
  %24 = load ptr, ptr %ptradd10, align 8, !dbg !3467
  store ptr %24, ptr %page, align 8, !dbg !3467
  store ptr %24, ptr %ptradd9, align 8, !dbg !3467
  %25 = load ptr, ptr %self, align 8, !dbg !3468
  %ptradd11 = getelementptr inbounds i8, ptr %25, i64 24, !dbg !3468
  %26 = load ptr, ptr %page, align 8, !dbg !3469
  %ptradd12 = getelementptr inbounds i8, ptr %26, i64 8, !dbg !3469
  %27 = load ptr, ptr %ptradd12, align 8, !dbg !3469
  store ptr %27, ptr %ptradd11, align 8, !dbg !3469
  %28 = load ptr, ptr %page, align 8, !dbg !3470
  %ptradd13 = getelementptr inbounds i8, ptr %28, i64 8, !dbg !3470
  store ptr null, ptr %ptradd13, align 8, !dbg !3471
  br label %if.exit, !dbg !3471

if.exit:                                          ; preds = %if.then, %and.phi7
  %29 = load ptr, ptr %page, align 8, !dbg !3472
  %i2nb14 = icmp eq ptr %29, null, !dbg !3472
  br i1 %i2nb14, label %if.then15, label %if.exit29, !dbg !3472

if.then15:                                        ; preds = %if.exit
  %30 = load ptr, ptr %self, align 8, !dbg !3473
  %31 = load i64, ptr %size, align 8, !dbg !3475
  %32 = load i64, ptr %alignment, align 8, !dbg !3476
  store i64 %32, ptr %x16, align 8
  %33 = load i64, ptr %x16, align 8, !dbg !3477
  %neq17 = icmp ne i64 0, %33, !dbg !3477
  br i1 %neq17, label %and.rhs18, label %and.phi22, !dbg !3477

and.rhs18:                                        ; preds = %if.then15
  %34 = load i64, ptr %x16, align 8, !dbg !3479
  %35 = load i64, ptr %x16, align 8, !dbg !3480
  %sub19 = sub i64 %35, 1, !dbg !3480
  %and20 = and i64 %34, %sub19, !dbg !3479
  %eq21 = icmp eq i64 %and20, 0, !dbg !3479
  br label %and.phi22, !dbg !3479

and.phi22:                                        ; preds = %and.rhs18, %if.then15
  %val23 = phi i1 [ false, %if.then15 ], [ %eq21, %and.rhs18 ], !dbg !3479
  br i1 %val23, label %assert_ok25, label %assert_fail24, !dbg !3479

assert_fail24:                                    ; preds = %and.phi22
  %36 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3473
  call void %36(ptr @.panic_msg.70, i64 51, ptr @.file.134, i64 16, ptr @.func.15, i64 7, i32 192) #6, !dbg !3473
  unreachable, !dbg !3473

assert_ok25:                                      ; preds = %and.phi22
  %lt26 = icmp ult i64 0, %31, !dbg !3473
  br i1 %lt26, label %assert_ok28, label %assert_fail27, !dbg !3473

assert_fail27:                                    ; preds = %assert_ok25
  %37 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3473
  call void %37(ptr @.panic_msg.101, i64 29, ptr @.file.134, i64 16, ptr @.func.15, i64 7, i32 192) #6, !dbg !3473
  unreachable, !dbg !3473

assert_ok28:                                      ; preds = %assert_ok25
  %38 = call i64 @std.core.mem.allocator.DynamicArenaAllocator._alloc_new(ptr %retparam, ptr %30, i64 %31, i64 %32), !dbg !3473
  %not_err = icmp eq i64 %38, 0, !dbg !3473
  %39 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3473
  br i1 %39, label %after_check, label %assign_optional, !dbg !3473

assign_optional:                                  ; preds = %assert_ok28
  store i64 %38, ptr %error_var, align 8, !dbg !3473
  br label %guard_block, !dbg !3473

after_check:                                      ; preds = %assert_ok28
  br label %noerr_block, !dbg !3473

guard_block:                                      ; preds = %assign_optional
  %40 = load i64, ptr %error_var, align 8, !dbg !3473
  ret i64 %40, !dbg !3473

noerr_block:                                      ; preds = %after_check
  %41 = load ptr, ptr %retparam, align 8, !dbg !3473
  store ptr %41, ptr %ptr, align 8, !dbg !3473
  br label %loop.exit, !dbg !3481

if.exit29:                                        ; preds = %if.exit
    #dbg_declare(ptr %start, !3482, !DIExpression(), !3483)
  %42 = load ptr, ptr %page, align 8, !dbg !3484
  %43 = load ptr, ptr %42, align 8, !dbg !3484
  %44 = load ptr, ptr %page, align 8, !dbg !3485
  %ptradd30 = getelementptr inbounds i8, ptr %44, i64 24, !dbg !3485
  %45 = load i64, ptr %ptradd30, align 8, !dbg !3485
  %add = add i64 %45, 8, !dbg !3484
  %ptradd_any = getelementptr i8, ptr %43, i64 %add, !dbg !3484
  store ptr %ptradd_any, ptr %ptr31, align 8
  %46 = load i64, ptr %alignment, align 8
  store i64 %46, ptr %alignment32, align 8
  %47 = load ptr, ptr %ptr31, align 8, !dbg !3486
  %ptrxi = ptrtoint ptr %47 to i64, !dbg !3486
  %48 = load i64, ptr %alignment32, align 8, !dbg !3489
  store i64 %48, ptr %x33, align 8
  %49 = load i64, ptr %x33, align 8, !dbg !3490
  %neq34 = icmp ne i64 0, %49, !dbg !3490
  br i1 %neq34, label %and.rhs35, label %and.phi39, !dbg !3490

and.rhs35:                                        ; preds = %if.exit29
  %50 = load i64, ptr %x33, align 8, !dbg !3493
  %51 = load i64, ptr %x33, align 8, !dbg !3494
  %sub36 = sub i64 %51, 1, !dbg !3494
  %and37 = and i64 %50, %sub36, !dbg !3493
  %eq38 = icmp eq i64 %and37, 0, !dbg !3493
  br label %and.phi39, !dbg !3493

and.phi39:                                        ; preds = %and.rhs35, %if.exit29
  %val40 = phi i1 [ false, %if.exit29 ], [ %eq38, %and.rhs35 ], !dbg !3493
  br i1 %val40, label %assert_ok42, label %assert_fail41, !dbg !3493

assert_fail41:                                    ; preds = %and.phi39
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3492
  call void %52(ptr @.panic_msg.70, i64 51, ptr @.file.71, i64 6, ptr @.func.15, i64 7, i32 290) #6, !dbg !3492
  unreachable, !dbg !3492

assert_ok42:                                      ; preds = %and.phi39
  %53 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi, i64 %48), !dbg !3495
  %intptr = inttoptr i64 %53 to ptr, !dbg !3495
  store ptr %intptr, ptr %start, align 8, !dbg !3495
    #dbg_declare(ptr %new_used, !3496, !DIExpression(), !3497)
  %54 = load ptr, ptr %start, align 8, !dbg !3498
  %55 = load ptr, ptr %page, align 8, !dbg !3499
  %56 = load ptr, ptr %55, align 8, !dbg !3499
  %57 = ptrtoint ptr %56 to i64, !dbg !3498
  %58 = ptrtoint ptr %54 to i64, !dbg !3498
  %59 = sub i64 %58, %57, !dbg !3498
  %60 = sdiv exact i64 %59, 1, !dbg !3498
  %61 = load i64, ptr %size, align 8, !dbg !3500
  %add43 = add i64 %60, %61, !dbg !3498
  store i64 %add43, ptr %new_used, align 8, !dbg !3498
  %62 = load i64, ptr %new_used, align 8, !dbg !3501
  %63 = load ptr, ptr %page, align 8, !dbg !3502
  %ptradd44 = getelementptr inbounds i8, ptr %63, i64 16, !dbg !3502
  %64 = load i64, ptr %ptradd44, align 8, !dbg !3502
  %gt = icmp ugt i64 %62, %64, !dbg !3501
  br i1 %gt, label %if.then45, label %if.exit96, !dbg !3501

if.then45:                                        ; preds = %assert_ok42
  %65 = load ptr, ptr %self, align 8, !dbg !3503
  %ptradd46 = getelementptr inbounds i8, ptr %65, i64 24, !dbg !3503
  %66 = load ptr, ptr %ptradd46, align 8, !dbg !3503
  store ptr %66, ptr %page, align 8, !dbg !3503
  %i2b47 = icmp ne ptr %66, null, !dbg !3503
  br i1 %i2b47, label %if.then48, label %if.exit75, !dbg !3503

if.then48:                                        ; preds = %if.then45
  %67 = load ptr, ptr %page, align 8, !dbg !3505
  %68 = load ptr, ptr %67, align 8, !dbg !3505
  %69 = load ptr, ptr %page, align 8, !dbg !3507
  %ptradd49 = getelementptr inbounds i8, ptr %69, i64 24, !dbg !3507
  %70 = load i64, ptr %ptradd49, align 8, !dbg !3507
  %add50 = add i64 %70, 8, !dbg !3505
  %ptradd_any51 = getelementptr i8, ptr %68, i64 %add50, !dbg !3505
  store ptr %ptradd_any51, ptr %ptr52, align 8
  %71 = load i64, ptr %alignment, align 8
  store i64 %71, ptr %alignment53, align 8
  %72 = load ptr, ptr %ptr52, align 8, !dbg !3508
  %ptrxi54 = ptrtoint ptr %72 to i64, !dbg !3508
  %73 = load i64, ptr %alignment53, align 8, !dbg !3511
  store i64 %73, ptr %x55, align 8
  %74 = load i64, ptr %x55, align 8, !dbg !3512
  %neq56 = icmp ne i64 0, %74, !dbg !3512
  br i1 %neq56, label %and.rhs57, label %and.phi61, !dbg !3512

and.rhs57:                                        ; preds = %if.then48
  %75 = load i64, ptr %x55, align 8, !dbg !3515
  %76 = load i64, ptr %x55, align 8, !dbg !3516
  %sub58 = sub i64 %76, 1, !dbg !3516
  %and59 = and i64 %75, %sub58, !dbg !3515
  %eq60 = icmp eq i64 %and59, 0, !dbg !3515
  br label %and.phi61, !dbg !3515

and.phi61:                                        ; preds = %and.rhs57, %if.then48
  %val62 = phi i1 [ false, %if.then48 ], [ %eq60, %and.rhs57 ], !dbg !3515
  br i1 %val62, label %assert_ok64, label %assert_fail63, !dbg !3515

assert_fail63:                                    ; preds = %and.phi61
  %77 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3514
  call void %77(ptr @.panic_msg.70, i64 51, ptr @.file.71, i64 6, ptr @.func.15, i64 7, i32 290) #6, !dbg !3514
  unreachable, !dbg !3514

assert_ok64:                                      ; preds = %and.phi61
  %78 = call i64 @std.core.mem.aligned_offset(i64 %ptrxi54, i64 %73), !dbg !3517
  %intptr65 = inttoptr i64 %78 to ptr, !dbg !3517
  store ptr %intptr65, ptr %start, align 8, !dbg !3517
  %79 = load ptr, ptr %start, align 8, !dbg !3518
  %80 = load i64, ptr %size, align 8, !dbg !3519
  %ptradd_any66 = getelementptr i8, ptr %79, i64 %80, !dbg !3519
  %81 = load ptr, ptr %page, align 8, !dbg !3520
  %82 = load ptr, ptr %81, align 8, !dbg !3520
  %83 = ptrtoint ptr %82 to i64, !dbg !3518
  %84 = ptrtoint ptr %ptradd_any66 to i64, !dbg !3518
  %85 = sub i64 %84, %83, !dbg !3518
  %86 = sdiv exact i64 %85, 1, !dbg !3518
  store i64 %86, ptr %new_used, align 8, !dbg !3518
  %87 = load ptr, ptr %page, align 8, !dbg !3521
  %ptradd67 = getelementptr inbounds i8, ptr %87, i64 16, !dbg !3521
  %88 = load i64, ptr %ptradd67, align 8, !dbg !3521
  %89 = load i64, ptr %new_used, align 8, !dbg !3522
  %ge = icmp uge i64 %88, %89, !dbg !3521
  br i1 %ge, label %if.then68, label %if.exit74, !dbg !3521

if.then68:                                        ; preds = %assert_ok64
  %90 = load ptr, ptr %self, align 8, !dbg !3523
  %ptradd69 = getelementptr inbounds i8, ptr %90, i64 24, !dbg !3523
  %91 = load ptr, ptr %page, align 8, !dbg !3525
  %ptradd70 = getelementptr inbounds i8, ptr %91, i64 8, !dbg !3525
  %92 = load ptr, ptr %ptradd70, align 8, !dbg !3525
  store ptr %92, ptr %ptradd69, align 8, !dbg !3525
  %93 = load ptr, ptr %page, align 8, !dbg !3526
  %ptradd71 = getelementptr inbounds i8, ptr %93, i64 8, !dbg !3526
  %94 = load ptr, ptr %self, align 8, !dbg !3527
  %ptradd72 = getelementptr inbounds i8, ptr %94, i64 16, !dbg !3527
  %95 = load ptr, ptr %ptradd72, align 8, !dbg !3527
  store ptr %95, ptr %ptradd71, align 8, !dbg !3527
  %96 = load ptr, ptr %self, align 8, !dbg !3528
  %ptradd73 = getelementptr inbounds i8, ptr %96, i64 16, !dbg !3528
  %97 = load ptr, ptr %page, align 8, !dbg !3529
  store ptr %97, ptr %ptradd73, align 8, !dbg !3529
  br label %if.exit96, !dbg !3530

if.exit74:                                        ; preds = %assert_ok64
  br label %if.exit75, !dbg !3530

if.exit75:                                        ; preds = %if.exit74, %if.then45
  %98 = load ptr, ptr %self, align 8, !dbg !3531
  %99 = load i64, ptr %size, align 8, !dbg !3532
  %100 = load i64, ptr %alignment, align 8, !dbg !3533
  store i64 %100, ptr %x77, align 8
  %101 = load i64, ptr %x77, align 8, !dbg !3534
  %neq78 = icmp ne i64 0, %101, !dbg !3534
  br i1 %neq78, label %and.rhs79, label %and.phi83, !dbg !3534

and.rhs79:                                        ; preds = %if.exit75
  %102 = load i64, ptr %x77, align 8, !dbg !3536
  %103 = load i64, ptr %x77, align 8, !dbg !3537
  %sub80 = sub i64 %103, 1, !dbg !3537
  %and81 = and i64 %102, %sub80, !dbg !3536
  %eq82 = icmp eq i64 %and81, 0, !dbg !3536
  br label %and.phi83, !dbg !3536

and.phi83:                                        ; preds = %and.rhs79, %if.exit75
  %val84 = phi i1 [ false, %if.exit75 ], [ %eq82, %and.rhs79 ], !dbg !3536
  br i1 %val84, label %assert_ok86, label %assert_fail85, !dbg !3536

assert_fail85:                                    ; preds = %and.phi83
  %104 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3531
  call void %104(ptr @.panic_msg.70, i64 51, ptr @.file.134, i64 16, ptr @.func.15, i64 7, i32 211) #6, !dbg !3531
  unreachable, !dbg !3531

assert_ok86:                                      ; preds = %and.phi83
  %lt87 = icmp ult i64 0, %99, !dbg !3531
  br i1 %lt87, label %assert_ok89, label %assert_fail88, !dbg !3531

assert_fail88:                                    ; preds = %assert_ok86
  %105 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3531
  call void %105(ptr @.panic_msg.101, i64 29, ptr @.file.134, i64 16, ptr @.func.15, i64 7, i32 211) #6, !dbg !3531
  unreachable, !dbg !3531

assert_ok89:                                      ; preds = %assert_ok86
  %106 = call i64 @std.core.mem.allocator.DynamicArenaAllocator._alloc_new(ptr %retparam90, ptr %98, i64 %99, i64 %100), !dbg !3531
  %not_err91 = icmp eq i64 %106, 0, !dbg !3531
  %107 = call i1 @llvm.expect.i1(i1 %not_err91, i1 true), !dbg !3531
  br i1 %107, label %after_check93, label %assign_optional92, !dbg !3531

assign_optional92:                                ; preds = %assert_ok89
  store i64 %106, ptr %error_var76, align 8, !dbg !3531
  br label %guard_block94, !dbg !3531

after_check93:                                    ; preds = %assert_ok89
  br label %noerr_block95, !dbg !3531

guard_block94:                                    ; preds = %assign_optional92
  %108 = load i64, ptr %error_var76, align 8, !dbg !3531
  ret i64 %108, !dbg !3531

noerr_block95:                                    ; preds = %after_check93
  %109 = load ptr, ptr %retparam90, align 8, !dbg !3531
  store ptr %109, ptr %ptr, align 8, !dbg !3531
  br label %loop.exit, !dbg !3538

if.exit96:                                        ; preds = %if.then68, %assert_ok42
  %110 = load ptr, ptr %page, align 8, !dbg !3539
  %ptradd97 = getelementptr inbounds i8, ptr %110, i64 24, !dbg !3539
  %111 = load i64, ptr %new_used, align 8, !dbg !3540
  store i64 %111, ptr %ptradd97, align 8, !dbg !3540
  %112 = load ptr, ptr %start, align 8, !dbg !3541
  %113 = load i64, ptr %size, align 8, !dbg !3542
  %ptradd_any98 = getelementptr i8, ptr %112, i64 %113, !dbg !3542
  %114 = load ptr, ptr %page, align 8, !dbg !3543
  %115 = load ptr, ptr %114, align 8, !dbg !3543
  %116 = load ptr, ptr %page, align 8, !dbg !3544
  %ptradd99 = getelementptr inbounds i8, ptr %116, i64 24, !dbg !3544
  %117 = load i64, ptr %ptradd99, align 8, !dbg !3544
  %ptradd_any100 = getelementptr i8, ptr %115, i64 %117, !dbg !3544
  %eq101 = icmp eq ptr %ptradd_any98, %ptradd_any100, !dbg !3541
  br i1 %eq101, label %assert_ok103, label %assert_fail102, !dbg !3541

assert_fail102:                                   ; preds = %if.exit96
  %118 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3541
  call void %118(ptr @.panic_msg.147, i64 56, ptr @.file.134, i64 16, ptr @.func.15, i64 7, i32 215) #6, !dbg !3541
  unreachable, !dbg !3541

assert_ok103:                                     ; preds = %if.exit96
  %119 = load ptr, ptr %start, align 8, !dbg !3545
  store ptr %119, ptr %ptr, align 8, !dbg !3545
    #dbg_declare(ptr %chunk, !3546, !DIExpression(), !3547)
  %120 = load ptr, ptr %ptr, align 8, !dbg !3548
  %ptradd_any104 = getelementptr i8, ptr %120, i64 -8, !dbg !3549
  store ptr %ptradd_any104, ptr %chunk, align 8, !dbg !3549
  %121 = load ptr, ptr %chunk, align 8, !dbg !3550
  %122 = load i64, ptr %size, align 8, !dbg !3551
  store i64 %122, ptr %121, align 8, !dbg !3551
  br label %loop.exit, !dbg !3551

loop.exit:                                        ; preds = %assert_ok103, %noerr_block95, %noerr_block
  %123 = load i32, ptr %init_type, align 4, !dbg !3552
  %eq105 = icmp eq i32 %123, 1, !dbg !3552
  br i1 %eq105, label %if.then106, label %if.exit107, !dbg !3552

if.then106:                                       ; preds = %loop.exit
  %124 = load ptr, ptr %ptr, align 8
  store ptr %124, ptr %dst, align 8
  %125 = load i64, ptr %size, align 8
  store i64 %125, ptr %len, align 8
  %126 = load ptr, ptr %dst, align 8, !dbg !3553
  %127 = load i64, ptr %len, align 8, !dbg !3556
  call void @llvm.memset.p0.i64(ptr align 16 %126, i8 0, i64 %127, i1 false), !dbg !3557
  br label %if.exit107, !dbg !3557

if.exit107:                                       ; preds = %if.then106, %loop.exit
  %128 = load ptr, ptr %ptr, align 8, !dbg !3558
  store ptr %128, ptr %0, align 8, !dbg !3558
  ret i64 0, !dbg !3558

panic:                                            ; preds = %entry
  %129 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3439
  call void %129(ptr @.panic_msg, i64 62, ptr @.file.134, i64 16, ptr @.func.15, i64 7, i32 176) #6, !dbg !3439
  unreachable, !dbg !3439
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.WasmMemory.allocate_block(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3559 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %bytes_required = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %blocks_required = alloca i64, align 8
  %reterr15 = alloca i64, align 8
  %taddr18 = alloca ptr, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [1 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %3 = icmp eq ptr %1, null, !dbg !3563
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3563
  br i1 %4, label %panic, label %checkok, !dbg !3563

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3564, !DIExpression(), !3565)
  store i64 %2, ptr %bytes, align 8
    #dbg_declare(ptr %bytes, !3566, !DIExpression(), !3567)
  %5 = load ptr, ptr %self, align 8, !dbg !3568
  %6 = load i64, ptr %5, align 8, !dbg !3568
  %i2nb = icmp eq i64 %6, 0, !dbg !3568
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3568

if.then:                                          ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !3569
  store i64 0, ptr %7, align 8, !dbg !3571
  br label %if.exit, !dbg !3571

if.exit:                                          ; preds = %if.then, %checkok
    #dbg_declare(ptr %bytes_required, !3572, !DIExpression(), !3573)
  %8 = load i64, ptr %bytes, align 8, !dbg !3574
  %9 = load ptr, ptr %self, align 8, !dbg !3575
  %ptradd = getelementptr inbounds i8, ptr %9, i64 8, !dbg !3575
  %10 = load i64, ptr %ptradd, align 8, !dbg !3575
  %add = add i64 %8, %10, !dbg !3574
  %11 = load ptr, ptr %self, align 8, !dbg !3576
  %12 = load i64, ptr %11, align 8, !dbg !3576
  %sub = sub i64 %add, %12, !dbg !3574
  store i64 %sub, ptr %bytes_required, align 8, !dbg !3574
  %13 = load i64, ptr %bytes_required, align 8, !dbg !3577
  %le = icmp sle i64 %13, 0, !dbg !3577
  br i1 %le, label %if.then1, label %if.exit10, !dbg !3577

if.then1:                                         ; preds = %if.exit
  %14 = load ptr, ptr %self, align 8, !dbg !3578
  %ptradd2 = getelementptr inbounds i8, ptr %14, i64 8, !dbg !3578
  %15 = load i64, ptr %ptradd2, align 8, !dbg !3578
  %intptr = inttoptr i64 %15 to ptr, !dbg !3578
  store ptr %intptr, ptr %taddr, align 8
  %16 = load ptr, ptr %taddr, align 8
  %17 = load i64, ptr %bytes, align 8, !dbg !3580
  %add3 = add i64 0, %17, !dbg !3580
  %gt = icmp ugt i64 0, %add3, !dbg !3580
  %sub4 = sub i64 %add3, 0, !dbg !3580
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3580
  br i1 %18, label %panic5, label %checkok7, !dbg !3580

checkok7:                                         ; preds = %if.then1
  %size = sub i64 %add3, 0, !dbg !3581
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !3581
  %20 = insertvalue %"char[]" %19, i64 %size, 1, !dbg !3581
  %21 = load ptr, ptr %self, align 8, !dbg !3582
  %ptradd8 = getelementptr inbounds i8, ptr %21, i64 8, !dbg !3582
  %22 = load i64, ptr %ptradd8, align 8, !dbg !3582
  %23 = load i64, ptr %bytes, align 8, !dbg !3584
  %add9 = add i64 %22, %23, !dbg !3582
  store i64 %add9, ptr %ptradd8, align 8, !dbg !3582
  store %"char[]" %20, ptr %0, align 8, !dbg !3582
  ret i64 0, !dbg !3582

if.exit10:                                        ; preds = %if.exit
    #dbg_declare(ptr %blocks_required, !3585, !DIExpression(), !3586)
  %24 = load i64, ptr %bytes_required, align 8, !dbg !3587
  %add11 = add i64 %24, 65536, !dbg !3587
  %add12 = add i64 %add11, 1, !dbg !3587
  %sdiv = sdiv i64 %add12, 65536, !dbg !3587
  store i64 %sdiv, ptr %blocks_required, align 8, !dbg !3587
  br label %if.then13, !dbg !3588

if.then13:                                        ; preds = %if.exit10
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !3589

if.exit14:                                        ; No predecessors!
  %25 = load ptr, ptr %self, align 8, !dbg !3590
  store i64 0, ptr %25, align 8, !dbg !3591
  %26 = load ptr, ptr %self, align 8, !dbg !3592
  %ptradd16 = getelementptr inbounds i8, ptr %26, i64 8, !dbg !3592
  %27 = load i64, ptr %ptradd16, align 8, !dbg !3592
  %intptr17 = inttoptr i64 %27 to ptr, !dbg !3592
  store ptr %intptr17, ptr %taddr18, align 8
  %28 = load ptr, ptr %taddr18, align 8
  %29 = load i64, ptr %bytes, align 8, !dbg !3593
  %add19 = add i64 0, %29, !dbg !3593
  %gt20 = icmp ugt i64 0, %add19, !dbg !3593
  %sub21 = sub i64 %add19, 0, !dbg !3593
  %30 = call i1 @llvm.expect.i1(i1 %gt20, i1 false), !dbg !3593
  br i1 %30, label %panic22, label %checkok27, !dbg !3593

checkok27:                                        ; preds = %if.exit14
  %size28 = sub i64 %add19, 0, !dbg !3594
  %31 = insertvalue %"char[]" undef, ptr %28, 0, !dbg !3594
  %32 = insertvalue %"char[]" %31, i64 %size28, 1, !dbg !3594
  %33 = load ptr, ptr %self, align 8, !dbg !3595
  %ptradd29 = getelementptr inbounds i8, ptr %33, i64 8, !dbg !3595
  %34 = load i64, ptr %ptradd29, align 8, !dbg !3595
  %35 = load i64, ptr %bytes, align 8, !dbg !3597
  %add30 = add i64 %34, %35, !dbg !3595
  store i64 %add30, ptr %ptradd29, align 8, !dbg !3595
  store %"char[]" %32, ptr %0, align 8, !dbg !3595
  ret i64 0, !dbg !3595

panic:                                            ; preds = %entry
  %36 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3565
  call void %36(ptr @.panic_msg, i64 62, ptr @.file.150, i64 14, ptr @.func.151, i64 14, i32 14) #6, !dbg !3565
  unreachable, !dbg !3565

panic5:                                           ; preds = %if.then1
  store i64 %sub4, ptr %taddr6, align 8
  %37 = insertvalue %any undef, ptr %taddr6, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %38, ptr %varargslots, align 16
  %39 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %39, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.112, i64 43, ptr @.file.150, i64 14, ptr @.func.151, i64 14, i32 24, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !3581
  unreachable, !dbg !3581

panic22:                                          ; preds = %if.exit14
  store i64 %sub21, ptr %taddr23, align 8
  %40 = insertvalue %any undef, ptr %taddr23, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %41, ptr %varargslots24, align 16
  %42 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp25" = insertvalue %"any[]" %42, i64 1, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.112, i64 43, ptr @.file.150, i64 14, ptr @.func.151, i64 14, i32 31, ptr byval(%"any[]") align 8 %indirectarg26) #6, !dbg !3594
  unreachable, !dbg !3594
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.LazyTempAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !3598 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %result = alloca %any, align 8
  %reterr = alloca i64, align 8
  %x = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %5 = icmp eq ptr %1, null, !dbg !3602
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !3602
  br i1 %6, label %panic, label %checkok, !dbg !3602

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3603, !DIExpression(), !3604)
  store i64 %2, ptr %bytes, align 8
    #dbg_declare(ptr %bytes, !3605, !DIExpression(), !3606)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !3607, !DIExpression(), !3608)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !3609, !DIExpression(), !3610)
  %7 = load ptr, ptr @std.core.mem.allocator.top_temp, align 8, !dbg !3611
  %i2nb = icmp eq ptr %7, null, !dbg !3611
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3611

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr @std.core.mem.allocator.top_temp, align 8, !dbg !3612
  %i2nb1 = icmp eq ptr %8, null, !dbg !3612
  br i1 %i2nb1, label %assert_ok, label %assert_fail, !dbg !3612

assert_fail:                                      ; preds = %if.then
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3613
  call void %9(ptr @.panic_msg.164, i64 86, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 521) #6, !dbg !3613
  unreachable, !dbg !3613

assert_ok:                                        ; preds = %if.then
  %10 = call { i64, ptr } @std.core.mem.allocator.create_temp_allocator_on_demand(), !dbg !3613
  store { i64, ptr } %10, ptr %result, align 8
  br label %if.exit

if.exit:                                          ; preds = %assert_ok, %checkok
  %11 = load ptr, ptr @std.core.mem.allocator.top_temp, align 8, !dbg !3614
  %12 = load i64, ptr %bytes, align 8, !dbg !3615
  %13 = load i32, ptr %init_type, align 4, !dbg !3616
  %14 = load i64, ptr %alignment, align 8, !dbg !3617
  %lt = icmp ult i64 0, %12, !dbg !3614
  br i1 %lt, label %assert_ok3, label %assert_fail2, !dbg !3614

assert_fail2:                                     ; preds = %if.exit
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3614
  call void %15(ptr @.panic_msg.101, i64 29, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 522) #6, !dbg !3614
  unreachable, !dbg !3614

assert_ok3:                                       ; preds = %if.exit
  %i2nb4 = icmp eq i64 %14, 0, !dbg !3618
  br i1 %i2nb4, label %or.phi, label %or.rhs, !dbg !3618

or.rhs:                                           ; preds = %assert_ok3
  store i64 %14, ptr %x, align 8
  %16 = load i64, ptr %x, align 8, !dbg !3619
  %neq = icmp ne i64 0, %16, !dbg !3619
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !3619

and.rhs:                                          ; preds = %or.rhs
  %17 = load i64, ptr %x, align 8, !dbg !3622
  %18 = load i64, ptr %x, align 8, !dbg !3623
  %sub = sub i64 %18, 1, !dbg !3623
  %and = and i64 %17, %sub, !dbg !3622
  %eq = icmp eq i64 %and, 0, !dbg !3622
  br label %and.phi, !dbg !3622

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !3622
  br label %or.phi, !dbg !3622

or.phi:                                           ; preds = %and.phi, %assert_ok3
  %val5 = phi i1 [ true, %assert_ok3 ], [ %val, %and.phi ], !dbg !3622
  br i1 %val5, label %assert_ok7, label %assert_fail6, !dbg !3622

assert_fail6:                                     ; preds = %or.phi
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3614
  call void %19(ptr @.panic_msg.16, i64 65, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 522) #6, !dbg !3614
  unreachable, !dbg !3614

assert_ok7:                                       ; preds = %or.phi
  %le = icmp ule i64 %14, 268435456, !dbg !3614
  br i1 %le, label %assert_ok9, label %assert_fail8, !dbg !3614

assert_fail8:                                     ; preds = %assert_ok7
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3614
  call void %20(ptr @.panic_msg.17, i64 80, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 522) #6, !dbg !3614
  unreachable, !dbg !3614

assert_ok9:                                       ; preds = %assert_ok7
  %21 = call i64 @std.core.mem.allocator.TempAllocator.acquire(ptr %retparam, ptr %11, i64 %12, i32 %13, i64 %14), !dbg !3614
  %not_err = icmp eq i64 %21, 0, !dbg !3614
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3614
  br i1 %22, label %after_check, label %assign_optional, !dbg !3614

assign_optional:                                  ; preds = %assert_ok9
  store i64 %21, ptr %reterr, align 8, !dbg !3614
  br label %err_retblock, !dbg !3614

after_check:                                      ; preds = %assert_ok9
  %23 = load ptr, ptr %retparam, align 8, !dbg !3614
  store ptr %23, ptr %0, align 8, !dbg !3614
  ret i64 0, !dbg !3614

err_retblock:                                     ; preds = %assign_optional
  %24 = load i64, ptr %reterr, align 8, !dbg !3614
  ret i64 %24, !dbg !3614

panic:                                            ; preds = %entry
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3604
  call void %25(ptr @.panic_msg, i64 62, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 519) #6, !dbg !3604
  unreachable, !dbg !3604
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.LazyTempAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !3624 {
entry:
  %self = alloca ptr, align 8
  %old_ptr = alloca ptr, align 8
  %new_bytes = alloca i64, align 8
  %alignment = alloca i64, align 8
  %result = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %5 = icmp eq ptr %1, null, !dbg !3627
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !3627
  br i1 %6, label %panic, label %checkok, !dbg !3627

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3628, !DIExpression(), !3629)
  store ptr %2, ptr %old_ptr, align 8
    #dbg_declare(ptr %old_ptr, !3630, !DIExpression(), !3631)
  store i64 %3, ptr %new_bytes, align 8
    #dbg_declare(ptr %new_bytes, !3632, !DIExpression(), !3633)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !3634, !DIExpression(), !3635)
  %7 = load ptr, ptr @std.core.mem.allocator.top_temp, align 8, !dbg !3636
  %i2nb = icmp eq ptr %7, null, !dbg !3636
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3636

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr @std.core.mem.allocator.top_temp, align 8, !dbg !3637
  %i2nb1 = icmp eq ptr %8, null, !dbg !3637
  br i1 %i2nb1, label %assert_ok, label %assert_fail, !dbg !3637

assert_fail:                                      ; preds = %if.then
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3638
  call void %9(ptr @.panic_msg.164, i64 86, ptr @.file.73, i64 16, ptr @.func.20, i64 6, i32 527) #6, !dbg !3638
  unreachable, !dbg !3638

assert_ok:                                        ; preds = %if.then
  %10 = call { i64, ptr } @std.core.mem.allocator.create_temp_allocator_on_demand(), !dbg !3638
  store { i64, ptr } %10, ptr %result, align 8
  br label %if.exit

if.exit:                                          ; preds = %assert_ok, %checkok
  %11 = load ptr, ptr @std.core.mem.allocator.top_temp, align 8
  %12 = load ptr, ptr %old_ptr, align 8
  %13 = load i64, ptr %new_bytes, align 8
  %14 = load i64, ptr %alignment, align 8
  %15 = call i64 @std.core.mem.allocator.TempAllocator.resize(ptr %retparam, ptr %11, ptr %12, i64 %13, i64 %14), !dbg !3639
  %not_err = icmp eq i64 %15, 0, !dbg !3639
  %16 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3639
  br i1 %16, label %after_check, label %assign_optional, !dbg !3639

assign_optional:                                  ; preds = %if.exit
  store i64 %15, ptr %reterr, align 8, !dbg !3639
  br label %err_retblock, !dbg !3639

after_check:                                      ; preds = %if.exit
  %17 = load ptr, ptr %retparam, align 8, !dbg !3639
  store ptr %17, ptr %0, align 8, !dbg !3639
  ret i64 0, !dbg !3639

err_retblock:                                     ; preds = %assign_optional
  %18 = load i64, ptr %reterr, align 8, !dbg !3639
  ret i64 %18, !dbg !3639

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3629
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.73, i64 16, ptr @.func.20, i64 6, i32 525) #6, !dbg !3629
  unreachable, !dbg !3629
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.LazyTempAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !3640 {
entry:
  %self = alloca ptr, align 8
  %old_ptr = alloca ptr, align 8
  %aligned = alloca i8, align 1
  %3 = icmp eq ptr %0, null, !dbg !3643
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3643
  br i1 %4, label %panic, label %checkok, !dbg !3643

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3644, !DIExpression(), !3645)
  store ptr %1, ptr %old_ptr, align 8
    #dbg_declare(ptr %old_ptr, !3646, !DIExpression(), !3647)
  store i8 %2, ptr %aligned, align 1
    #dbg_declare(ptr %aligned, !3648, !DIExpression(), !3649)
  ret void

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3645
  call void %5(ptr @.panic_msg, i64 62, ptr @.file.73, i64 16, ptr @.func.24, i64 7, i32 531) #6, !dbg !3645
  unreachable, !dbg !3645
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.NullAllocator.acquire(ptr %0, ptr %1, i64 %2, i32 %3, i64 %4) #0 comdat !dbg !3650 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %init_type = alloca i32, align 4
  %alignment = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !3654
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !3654
  br i1 %6, label %panic, label %checkok, !dbg !3654

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3655, !DIExpression(), !3656)
  store i64 %2, ptr %bytes, align 8
    #dbg_declare(ptr %bytes, !3657, !DIExpression(), !3658)
  store i32 %3, ptr %init_type, align 4
    #dbg_declare(ptr %init_type, !3659, !DIExpression(), !3660)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !3661, !DIExpression(), !3662)
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !3663

panic:                                            ; preds = %entry
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3656
  call void %7(ptr @.panic_msg, i64 62, ptr @.file.73, i64 16, ptr @.func.15, i64 7, i32 538) #6, !dbg !3656
  unreachable, !dbg !3656
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.mem.allocator.NullAllocator.resize(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !3664 {
entry:
  %self = alloca ptr, align 8
  %old_ptr = alloca ptr, align 8
  %new_bytes = alloca i64, align 8
  %alignment = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !3667
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !3667
  br i1 %6, label %panic, label %checkok, !dbg !3667

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3668, !DIExpression(), !3669)
  store ptr %2, ptr %old_ptr, align 8
    #dbg_declare(ptr %old_ptr, !3670, !DIExpression(), !3671)
  store i64 %3, ptr %new_bytes, align 8
    #dbg_declare(ptr %new_bytes, !3672, !DIExpression(), !3673)
  store i64 %4, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !3674, !DIExpression(), !3675)
  ret i64 ptrtoint (ptr @std.core.mem.OUT_OF_MEMORY to i64), !dbg !3676

panic:                                            ; preds = %entry
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3669
  call void %7(ptr @.panic_msg, i64 62, ptr @.file.73, i64 16, ptr @.func.20, i64 6, i32 543) #6, !dbg !3669
  unreachable, !dbg !3669
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.NullAllocator.release(ptr %0, ptr %1, i8 zeroext %2) #0 comdat !dbg !3677 {
entry:
  %self = alloca ptr, align 8
  %old_ptr = alloca ptr, align 8
  %aligned = alloca i8, align 1
  %3 = icmp eq ptr %0, null, !dbg !3680
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3680
  br i1 %4, label %panic, label %checkok, !dbg !3680

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3681, !DIExpression(), !3682)
  store ptr %1, ptr %old_ptr, align 8
    #dbg_declare(ptr %old_ptr, !3683, !DIExpression(), !3684)
  store i8 %2, ptr %aligned, align 1
    #dbg_declare(ptr %aligned, !3685, !DIExpression(), !3686)
  ret void

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3682
  call void %5(ptr @.panic_msg, i64 62, ptr @.file.73, i64 16, ptr @.func.24, i64 7, i32 548) #6, !dbg !3682
  unreachable, !dbg !3682
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.core.mem.allocator.alignment_for_allocation(i64 %0) #0 !dbg !3687 {
entry:
  %alignment = alloca i64, align 8
  store i64 %0, ptr %alignment, align 8
    #dbg_declare(ptr %alignment, !3690, !DIExpression(), !3691)
  %1 = load i64, ptr %alignment, align 8, !dbg !3692
  %gt = icmp ugt i64 16, %1, !dbg !3692
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !3692

cond.lhs:                                         ; preds = %entry
  br label %cond.phi, !dbg !3693

cond.rhs:                                         ; preds = %entry
  %2 = load i64, ptr %alignment, align 8, !dbg !3694
  br label %cond.phi, !dbg !3694

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ 16, %cond.lhs ], [ %2, %cond.rhs ], !dbg !3694
  ret i64 %val, !dbg !3694
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, ptr } @std.core.mem.allocator.clone_any(i64 %0, ptr %1, i64 %2, ptr %3) #0 comdat !dbg !3695 {
entry:
  %allocator = alloca %any, align 8
  %value = alloca %any, align 8
  %size = alloca i64, align 8
  %data = alloca ptr, align 8
  %allocator4 = alloca %any, align 8
  %size5 = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator6 = alloca %any, align 8
  %size7 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %type37 = alloca i64, align 8
  %taddr = alloca %any, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %0, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %1, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !3702, !DIExpression(), !3703)
  store i64 %2, ptr %value, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %value, i64 8
  store ptr %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %value, !3704, !DIExpression(), !3705)
    #dbg_declare(ptr %size, !3706, !DIExpression(), !3707)
  %ptradd2 = getelementptr inbounds i8, ptr %value, i64 8, !dbg !3708
  %4 = load i64, ptr %ptradd2, align 8, !dbg !3708
  %"introspect*" = inttoptr i64 %4 to ptr, !dbg !3708
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !3708
  %ptradd3 = getelementptr inbounds i8, ptr %"introspect*", i64 24, !dbg !3708
  %typeid.size = load i64, ptr %ptradd3, align 8, !dbg !3708
  store i64 %typeid.size, ptr %size, align 8, !dbg !3708
    #dbg_declare(ptr %data, !3709, !DIExpression(), !3710)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %size, align 8
  store i64 %5, ptr %size5, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator6, ptr align 8 %allocator4, i32 16, i1 false)
  %6 = load i64, ptr %size5, align 8
  store i64 %6, ptr %size7, align 8
  %7 = load i64, ptr %size7, align 8, !dbg !3711
  %i2nb = icmp eq i64 %7, 0, !dbg !3711
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3711

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !3716
  br label %expr_block.exit, !dbg !3716

if.exit:                                          ; preds = %entry
  %8 = load i64, ptr %size7, align 8, !dbg !3717
  br i1 true, label %or.phi, label %or.rhs, !dbg !3718

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %9 = load i64, ptr %x, align 8, !dbg !3719
  %neq = icmp ne i64 0, %9, !dbg !3719
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !3719

and.rhs:                                          ; preds = %or.rhs
  %10 = load i64, ptr %x, align 8, !dbg !3722
  %11 = load i64, ptr %x, align 8, !dbg !3723
  %sub = sub i64 %11, 1, !dbg !3723
  %and = and i64 %10, %sub, !dbg !3722
  %eq = icmp eq i64 %and, 0, !dbg !3722
  br label %and.phi, !dbg !3722

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !3722
  br label %or.phi, !dbg !3722

or.phi:                                           ; preds = %and.phi, %if.exit
  %val8 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !3722
  br i1 %val8, label %assert_ok, label %assert_fail, !dbg !3722

assert_fail:                                      ; preds = %or.phi
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3724
  call void %12(ptr @.panic_msg.16, i64 65, ptr @.file.73, i64 16, ptr @.func.163, i64 9, i32 85) #6, !dbg !3724
  unreachable, !dbg !3724

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok10, label %assert_fail9, !dbg !3724

assert_fail9:                                     ; preds = %assert_ok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3724
  call void %13(ptr @.panic_msg.17, i64 80, ptr @.file.73, i64 16, ptr @.func.163, i64 9, i32 85) #6, !dbg !3724
  unreachable, !dbg !3724

assert_ok10:                                      ; preds = %assert_ok
  %lt = icmp ult i64 0, %8, !dbg !3724
  br i1 %lt, label %assert_ok12, label %assert_fail11, !dbg !3724

assert_fail11:                                    ; preds = %assert_ok10
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3724
  call void %14(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 16, ptr @.func.163, i64 9, i32 85) #6, !dbg !3724
  unreachable, !dbg !3724

assert_ok12:                                      ; preds = %assert_ok10
  %ptradd13 = getelementptr inbounds i8, ptr %allocator6, i64 8, !dbg !3724
  %15 = load i64, ptr %ptradd13, align 8, !dbg !3724
  %16 = inttoptr i64 %15 to ptr, !dbg !3724
  %type = load ptr, ptr %.cachedtype, align 8
  %17 = icmp eq ptr %16, %type
  br i1 %17, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok12
  %ptradd14 = getelementptr inbounds i8, ptr %16, i64 16
  %18 = load ptr, ptr %ptradd14, align 8
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.acquire")
  store ptr %19, ptr %.inlinecache, align 8
  store ptr %16, ptr %.cachedtype, align 8
  br label %20

cache_hit:                                        ; preds = %assert_ok12
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %20

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ]
  %21 = icmp eq ptr %fn_phi, null
  br i1 %21, label %missing_function, label %match

missing_function:                                 ; preds = %20
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3724
  call void %22(ptr @.panic_msg.19, i64 44, ptr @.file.73, i64 16, ptr @.func.163, i64 9, i32 85) #6, !dbg !3724
  unreachable, !dbg !3724

match:                                            ; preds = %20
  %23 = load ptr, ptr %allocator6, align 8
  %24 = call i64 %fn_phi(ptr %retparam, ptr %23, i64 %8, i32 0, i64 0), !dbg !3724
  %not_err = icmp eq i64 %24, 0, !dbg !3724
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3724
  br i1 %25, label %after_check, label %assign_optional, !dbg !3724

assign_optional:                                  ; preds = %match
  store i64 %24, ptr %error_var, align 8, !dbg !3724
  br label %panic_block, !dbg !3724

after_check:                                      ; preds = %match
  %26 = load ptr, ptr %retparam, align 8, !dbg !3724
  store ptr %26, ptr %blockret, align 8, !dbg !3724
  br label %expr_block.exit, !dbg !3724

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !3724

panic_block:                                      ; preds = %assign_optional
  %27 = insertvalue %any undef, ptr %error_var, 0, !dbg !3724
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !3724
  store %any %28, ptr %varargslots, align 16
  %29 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %29, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 36, ptr @.file.73, i64 16, ptr @.func.163, i64 9, i32 74, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !3713
  unreachable, !dbg !3713

noerr_block:                                      ; preds = %expr_block.exit
  %30 = load ptr, ptr %blockret, align 8, !dbg !3713
  store ptr %30, ptr %data, align 8, !dbg !3713
  %31 = load ptr, ptr %data, align 8
  store ptr %31, ptr %dst, align 8
  %32 = load ptr, ptr %value, align 8
  store ptr %32, ptr %src, align 8
  %33 = load i64, ptr %size, align 8
  store i64 %33, ptr %len, align 8
  %34 = load ptr, ptr %dst, align 8, !dbg !3725
  %neq15 = icmp ne ptr %34, null, !dbg !3725
  br i1 %neq15, label %assert_ok17, label %assert_fail16, !dbg !3725

assert_fail16:                                    ; preds = %noerr_block
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3725
  call void %35(ptr @.panic_msg.75, i64 37, ptr @.file.71, i64 6, ptr @.func.163, i64 9, i32 329) #6, !dbg !3725
  unreachable, !dbg !3725

assert_ok17:                                      ; preds = %noerr_block
  %36 = load ptr, ptr %src, align 8, !dbg !3729
  %neq18 = icmp ne ptr %36, null, !dbg !3729
  br i1 %neq18, label %or.phi21, label %or.rhs19, !dbg !3729

or.rhs19:                                         ; preds = %assert_ok17
  %37 = load i64, ptr %len, align 8, !dbg !3730
  %eq20 = icmp eq i64 0, %37, !dbg !3730
  br label %or.phi21, !dbg !3730

or.phi21:                                         ; preds = %or.rhs19, %assert_ok17
  %val22 = phi i1 [ true, %assert_ok17 ], [ %eq20, %or.rhs19 ], !dbg !3730
  br i1 %val22, label %assert_ok24, label %assert_fail23, !dbg !3730

assert_fail23:                                    ; preds = %or.phi21
  %38 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3731
  call void %38(ptr @.panic_msg.76, i64 94, ptr @.file.73, i64 16, ptr @.func.163, i64 9, i32 335) #6, !dbg !3731
  unreachable, !dbg !3731

assert_ok24:                                      ; preds = %or.phi21
  %39 = load i64, ptr %len, align 8, !dbg !3732
  %eq25 = icmp eq i64 0, %39, !dbg !3732
  br i1 %eq25, label %or.phi27, label %or.rhs26, !dbg !3732

or.rhs26:                                         ; preds = %assert_ok24
  %40 = load ptr, ptr %dst, align 8, !dbg !3733
  %41 = load i64, ptr %len, align 8, !dbg !3734
  %ptradd_any = getelementptr i8, ptr %40, i64 %41, !dbg !3734
  %42 = load ptr, ptr %src, align 8, !dbg !3735
  %le = icmp ule ptr %ptradd_any, %42, !dbg !3733
  br label %or.phi27, !dbg !3733

or.phi27:                                         ; preds = %or.rhs26, %assert_ok24
  %val28 = phi i1 [ true, %assert_ok24 ], [ %le, %or.rhs26 ], !dbg !3733
  br i1 %val28, label %or.phi32, label %or.rhs29, !dbg !3733

or.rhs29:                                         ; preds = %or.phi27
  %43 = load ptr, ptr %src, align 8, !dbg !3736
  %44 = load i64, ptr %len, align 8, !dbg !3737
  %ptradd_any30 = getelementptr i8, ptr %43, i64 %44, !dbg !3737
  %45 = load ptr, ptr %dst, align 8, !dbg !3738
  %le31 = icmp ule ptr %ptradd_any30, %45, !dbg !3736
  br label %or.phi32, !dbg !3736

or.phi32:                                         ; preds = %or.rhs29, %or.phi27
  %val33 = phi i1 [ true, %or.phi27 ], [ %le31, %or.rhs29 ], !dbg !3736
  br i1 %val33, label %assert_ok35, label %assert_fail34, !dbg !3736

assert_fail34:                                    ; preds = %or.phi32
  %46 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3731
  call void %46(ptr @.panic_msg.77, i64 95, ptr @.file.73, i64 16, ptr @.func.163, i64 9, i32 335) #6, !dbg !3731
  unreachable, !dbg !3731

assert_ok35:                                      ; preds = %or.phi32
  %47 = load ptr, ptr %dst, align 8, !dbg !3739
  %48 = load ptr, ptr %src, align 8, !dbg !3740
  %49 = load i64, ptr %len, align 8, !dbg !3741
  call void @llvm.memcpy.p0.p0.i64(ptr %47, ptr %48, i64 %49, i1 false), !dbg !3742
  %50 = load ptr, ptr %data, align 8
  store ptr %50, ptr %ptr, align 8
  %ptradd36 = getelementptr inbounds i8, ptr %value, i64 8, !dbg !3743
  %51 = load i64, ptr %ptradd36, align 8
  store i64 %51, ptr %type37, align 8
  %52 = load ptr, ptr %ptr, align 8, !dbg !3744
  %53 = load i64, ptr %type37, align 8, !dbg !3747
  %54 = insertvalue %any undef, ptr %52, 0, !dbg !3747
  %55 = insertvalue %any %54, i64 %53, 1, !dbg !3747
  store %any %55, ptr %taddr, align 8
  %56 = load { i64, ptr }, ptr %taddr, align 8
  ret { i64, ptr } %56
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.mem.allocator.push_pool() #0 comdat !dbg !3748 {
entry:
  %old = alloca %any, align 8
  %result = alloca %any, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
    #dbg_declare(ptr %old, !3751, !DIExpression(), !3752)
  %0 = load ptr, ptr @std.core.mem.allocator.top_temp, align 8, !dbg !3753
  %i2b = icmp ne ptr %0, null, !dbg !3753
  br i1 %i2b, label %cond.lhs, label %cond.rhs, !dbg !3753

cond.lhs:                                         ; preds = %entry
  %1 = load %any, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !3754
  br label %cond.phi, !dbg !3754

cond.rhs:                                         ; preds = %entry
  %2 = load ptr, ptr @std.core.mem.allocator.top_temp, align 8, !dbg !3755
  %i2nb = icmp eq ptr %2, null, !dbg !3755
  br i1 %i2nb, label %assert_ok, label %assert_fail, !dbg !3755

assert_fail:                                      ; preds = %cond.rhs
  %3 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3756
  call void %3(ptr @.panic_msg.164, i64 86, ptr @.file.73, i64 16, ptr @.func.165, i64 9, i32 415) #6, !dbg !3756
  unreachable, !dbg !3756

assert_ok:                                        ; preds = %cond.rhs
  %4 = call { i64, ptr } @std.core.mem.allocator.create_temp_allocator_on_demand(), !dbg !3756
  store { i64, ptr } %4, ptr %result, align 8
  %5 = load %any, ptr %result, align 8
  br label %cond.phi

cond.phi:                                         ; preds = %assert_ok, %cond.lhs
  %val = phi %any [ %1, %cond.lhs ], [ %5, %assert_ok ]
  store %any %val, ptr %old, align 8
  %6 = load ptr, ptr %old, align 8, !dbg !3757
  %7 = load i64, ptr @std.core.mem.allocator.temp_allocator_min_size, align 8, !dbg !3758
  %8 = load i64, ptr @std.core.mem.allocator.temp_allocator_buffer_size, align 8, !dbg !3759
  %9 = load i64, ptr @std.core.mem.allocator.temp_allocator_new_mult, align 8, !dbg !3760
  %ptradd = getelementptr inbounds i8, ptr %6, i64 24, !dbg !3761
  %10 = load ptr, ptr %ptradd, align 8, !dbg !3761
  %i2nb1 = icmp eq ptr %10, null, !dbg !3761
  br i1 %i2nb1, label %assert_ok3, label %assert_fail2, !dbg !3761

assert_fail2:                                     ; preds = %cond.phi
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3757
  call void %11(ptr @.panic_msg.125, i64 34, ptr @.file.73, i64 16, ptr @.func.165, i64 9, i32 416) #6, !dbg !3757
  unreachable, !dbg !3757

assert_ok3:                                       ; preds = %cond.phi
  %lt = icmp ult i64 128, %7, !dbg !3757
  br i1 %lt, label %assert_ok5, label %assert_fail4, !dbg !3757

assert_fail4:                                     ; preds = %assert_ok3
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3757
  call void %12(ptr @.panic_msg.126, i64 114, ptr @.file.73, i64 16, ptr @.func.165, i64 9, i32 416) #6, !dbg !3757
  unreachable, !dbg !3757

assert_ok5:                                       ; preds = %assert_ok3
  %lt6 = icmp ult i64 0, %9, !dbg !3757
  br i1 %lt6, label %assert_ok8, label %assert_fail7, !dbg !3757

assert_fail7:                                     ; preds = %assert_ok5
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3757
  call void %13(ptr @.panic_msg.127, i64 63, ptr @.file.73, i64 16, ptr @.func.165, i64 9, i32 416) #6, !dbg !3757
  unreachable, !dbg !3757

assert_ok8:                                       ; preds = %assert_ok5
  %14 = call i64 @std.core.mem.allocator.TempAllocator.derive_allocator(ptr %retparam, ptr %6, i64 %7, i64 %8, i64 %9), !dbg !3757
  %not_err = icmp eq i64 %14, 0, !dbg !3757
  %15 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3757
  br i1 %15, label %after_check, label %assign_optional, !dbg !3757

assign_optional:                                  ; preds = %assert_ok8
  store i64 %14, ptr %error_var, align 8, !dbg !3757
  br label %panic_block, !dbg !3757

after_check:                                      ; preds = %assert_ok8
  br label %noerr_block, !dbg !3757

panic_block:                                      ; preds = %assign_optional
  %16 = insertvalue %any undef, ptr %error_var, 0, !dbg !3757
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !3757
  store %any %17, ptr %varargslots, align 16
  %18 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %18, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 36, ptr @.file.73, i64 16, ptr @.func.165, i64 9, i32 416, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !3757
  unreachable, !dbg !3757

noerr_block:                                      ; preds = %after_check
  %19 = load ptr, ptr %retparam, align 8, !dbg !3757
  %20 = insertvalue %any undef, ptr %19, 0, !dbg !3757
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !3757
  store %any %21, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !3757
  %22 = load ptr, ptr %old, align 8, !dbg !3762
  ret ptr %22, !dbg !3762
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.pop_pool(ptr %0) #0 comdat !dbg !3763 {
entry:
  %old = alloca ptr, align 8
  %temp = alloca ptr, align 8
  store ptr %0, ptr %old, align 8
    #dbg_declare(ptr %old, !3766, !DIExpression(), !3767)
    #dbg_declare(ptr %temp, !3768, !DIExpression(), !3769)
  %1 = load ptr, ptr %old, align 8, !dbg !3770
  store ptr %1, ptr %temp, align 8, !dbg !3770
  %2 = load ptr, ptr %temp, align 8, !dbg !3771
  %3 = insertvalue %any undef, ptr %2, 0, !dbg !3771
  %4 = insertvalue %any %3, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !3771
  store %any %4, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !3771
  %5 = load ptr, ptr %temp, align 8, !dbg !3772
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %5), !dbg !3772
  ret void, !dbg !3772
}

; Function Attrs: nounwind ssp uwtable
define internal { i64, ptr } @std.core.mem.allocator.create_temp_allocator_on_demand() #0 !dbg !3773 {
entry:
  %string = alloca %"char[]", align 8
  %indirectarg = alloca %"any[]", align 8
  %taddr = alloca %any, align 8
  %result = alloca %any, align 8
  %0 = load ptr, ptr @std.core.mem.allocator.top_temp, align 8, !dbg !3776
  %i2nb = icmp eq ptr %0, null, !dbg !3776
  br i1 %i2nb, label %assert_ok, label %assert_fail, !dbg !3776

assert_fail:                                      ; preds = %entry
  %1 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3776
  call void %1(ptr @.panic_msg.164, i64 86, ptr @.file.73, i64 16, ptr @.func.166, i64 31, i32 469) #6, !dbg !3776
  unreachable, !dbg !3776

assert_ok:                                        ; preds = %entry
  %2 = load i8, ptr @std.core.mem.allocator.auto_create_temp, align 1, !dbg !3778
  %3 = trunc i8 %2 to i1, !dbg !3778
  %not = xor i1 %3, true, !dbg !3778
  br i1 %not, label %if.then, label %if.exit, !dbg !3778

if.then:                                          ; preds = %assert_ok
  store i8 1, ptr @std.core.mem.allocator.auto_create_temp, align 1, !dbg !3779
  store %"char[]" { ptr @.str.167, i64 128 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !3781
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !3781
  %hi = load i64, ptr %ptradd, align 8, !dbg !3781
  store %"any[]" zeroinitializer, ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.168, i64 16, ptr @.str.169, i64 31, i32 476, ptr byval(%"any[]") align 8 %indirectarg), !dbg !3784
  call void @llvm.trap(), !dbg !3785
  unreachable, !dbg !3785

if.exit:                                          ; preds = %assert_ok
  %4 = load %any, ptr @std.core.mem.allocator.temp_base_allocator, align 8, !dbg !3786
  %5 = load ptr, ptr @std.core.mem.allocator.top_temp, align 8, !dbg !3787
  %i2nb1 = icmp eq ptr %5, null, !dbg !3787
  br i1 %i2nb1, label %assert_ok3, label %assert_fail2, !dbg !3787

assert_fail2:                                     ; preds = %if.exit
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3788
  call void %6(ptr @.panic_msg.164, i64 86, ptr @.file.73, i64 16, ptr @.func.166, i64 31, i32 478) #6, !dbg !3788
  unreachable, !dbg !3788

assert_ok3:                                       ; preds = %if.exit
  store %any %4, ptr %taddr, align 8
  %lo4 = load i64, ptr %taddr, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi6 = load ptr, ptr %ptradd5, align 8
  %7 = call { i64, ptr } @std.core.mem.allocator.create_temp_allocator(i64 %lo4, ptr %hi6, i64 262144, i64 1024), !dbg !3788
  store { i64, ptr } %7, ptr %result, align 8
  %8 = load { i64, ptr }, ptr %result, align 8
  ret { i64, ptr } %8
}

; Function Attrs: nounwind ssp uwtable
define internal { i64, ptr } @std.core.mem.allocator.create_temp_allocator(i64 %0, ptr %1, i64 %2, i64 %3) #0 !dbg !3789 {
entry:
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %buffer = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca %any, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr6 = alloca %any, align 8
  store i64 %0, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %1, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !3792, !DIExpression(), !3793)
  store i64 %2, ptr %size, align 8
    #dbg_declare(ptr %size, !3794, !DIExpression(), !3795)
  store i64 %3, ptr %buffer, align 8
    #dbg_declare(ptr %buffer, !3796, !DIExpression(), !3797)
  %4 = load ptr, ptr @std.core.mem.allocator.top_temp, align 8, !dbg !3798
  %i2nb = icmp eq ptr %4, null, !dbg !3798
  br i1 %i2nb, label %assert_ok, label %assert_fail, !dbg !3798

assert_fail:                                      ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3798
  call void %5(ptr @.panic_msg.164, i64 86, ptr @.file.73, i64 16, ptr @.func.170, i64 21, i32 481) #6, !dbg !3798
  unreachable, !dbg !3798

assert_ok:                                        ; preds = %entry
  %6 = load %any, ptr %allocator, align 8, !dbg !3800
  %7 = load i64, ptr %size, align 8, !dbg !3801
  %le = icmp ule i64 16, %7, !dbg !3802
  br i1 %le, label %assert_ok2, label %assert_fail1, !dbg !3802

assert_fail1:                                     ; preds = %assert_ok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3802
  call void %8(ptr @.panic_msg.105, i64 31, ptr @.file.73, i64 16, ptr @.func.170, i64 21, i32 485) #6, !dbg !3802
  unreachable, !dbg !3802

assert_ok2:                                       ; preds = %assert_ok
  %9 = extractvalue %any %6, 1, !dbg !3803
  %neq = icmp ne i64 %9, ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), !dbg !3802
  br i1 %neq, label %assert_ok4, label %assert_fail3, !dbg !3802

assert_fail3:                                     ; preds = %assert_ok2
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3802
  call void %10(ptr @.panic_msg.123, i64 145, ptr @.file.73, i64 16, ptr @.func.170, i64 21, i32 485) #6, !dbg !3802
  unreachable, !dbg !3802

assert_ok4:                                       ; preds = %assert_ok2
  store %any %6, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd5, align 8
  %11 = call i64 @std.core.mem.allocator.new_temp_allocator(ptr %retparam, i64 %lo, ptr %hi, i64 %7), !dbg !3802
  %not_err = icmp eq i64 %11, 0, !dbg !3802
  %12 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3802
  br i1 %12, label %after_check, label %assign_optional, !dbg !3802

assign_optional:                                  ; preds = %assert_ok4
  store i64 %11, ptr %error_var, align 8, !dbg !3802
  br label %panic_block, !dbg !3802

after_check:                                      ; preds = %assert_ok4
  br label %noerr_block, !dbg !3802

panic_block:                                      ; preds = %assign_optional
  %13 = insertvalue %any undef, ptr %error_var, 0, !dbg !3802
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !3802
  store %any %14, ptr %varargslots, align 16
  %15 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %15, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.32, i64 36, ptr @.file.73, i64 16, ptr @.func.170, i64 21, i32 485, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !3802
  unreachable, !dbg !3802

noerr_block:                                      ; preds = %after_check
  %16 = load ptr, ptr %retparam, align 8, !dbg !3802
  store ptr %16, ptr @std.core.mem.allocator.top_temp, align 8, !dbg !3802
  %17 = insertvalue %any undef, ptr %16, 0, !dbg !3804
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !3804
  store %any %18, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !3804
  store %any %18, ptr %taddr6, align 8
  %19 = load { i64, ptr }, ptr %taddr6, align 8
  ret { i64, ptr } %19
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.mem.allocator.destroy_temp_allocators() #0 comdat !dbg !3805 {
entry:
  %0 = load ptr, ptr @std.core.mem.allocator.top_temp, align 8, !dbg !3808
  %i2nb = icmp eq ptr %0, null, !dbg !3808
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3808

if.then:                                          ; preds = %entry
  ret void, !dbg !3809

if.exit:                                          ; preds = %entry
  %1 = load ptr, ptr @std.core.mem.allocator.top_temp, align 8, !dbg !3810
  %ptradd = getelementptr inbounds i8, ptr %1, i64 32, !dbg !3811
  %2 = load i8, ptr %ptradd, align 8, !dbg !3811
  %3 = trunc i8 %2 to i1, !dbg !3811
  br i1 %3, label %assert_ok, label %assert_fail, !dbg !3811

assert_fail:                                      ; preds = %if.exit
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3810
  call void %4(ptr @.panic_msg.128, i64 82, ptr @.file.73, i64 16, ptr @.func.171, i64 23, i32 511) #6, !dbg !3810
  unreachable, !dbg !3810

assert_ok:                                        ; preds = %if.exit
  call void @std.core.mem.allocator.TempAllocator.free(ptr %1), !dbg !3810
  store ptr null, ptr @std.core.mem.allocator.top_temp, align 8, !dbg !3812
  store %any { ptr @std.core.mem.allocator.LAZY_TEMP, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.LazyTempAllocator" to i64) }, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !3813
  ret void, !dbg !3813
}

; Function Attrs: nounwind ssp uwtable
define internal void @std.core.mem.allocator.allow_implicit_temp_allocator_on_load_thread() #0 !dbg !3814 {
entry:
  store i8 1, ptr @std.core.mem.allocator.auto_create_temp, align 1, !dbg !3815
  ret void, !dbg !3815
}

; Function Attrs: nounwind ssp uwtable
define internal void @std.core.mem.allocator.destroy_temp_allocators_after_exit() #0 !dbg !3816 {
entry:
  call void @std.core.mem.allocator.destroy_temp_allocators(), !dbg !3817
  ret void, !dbg !3817
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #1

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.builtin.panicf(ptr, i64, ptr, i64, ptr, i64, i32, ptr byval(%"any[]") align 8) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.init"(ptr, i64, ptr, i32, float) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak zeroext i8 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.is_initialized"(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.free"(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.tvalues"(ptr) #0

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr comdat {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @std.os.backtrace.capture_current(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak zeroext i8 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.set"(ptr, i64, ptr byval(%Allocation) align 8) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.remove"(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.clear"(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @"std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap.len"(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.io.stdout() #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.io.fprintfn(ptr, i64, ptr, ptr, i64, ptr byval(%"any[]") align 8) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @"std_collections_list$std.os.backtrace.Backtrace$.List.get"(ptr noalias sret(%Backtrace) align 8, ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.os.linux.symbolize_backtrace(ptr, i64, ptr, ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @"std_collections_list$std.os.backtrace.Backtrace$.List.len"(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak zeroext i8 @std.os.backtrace.Backtrace.has_file(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak zeroext i8 @std.os.backtrace.Backtrace.is_unknown(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.mem.aligned_offset(i64, i64) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umin.i64(i64, i64) #4

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @std.core.String.copy(ptr, i64, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.io.Formatter.print(ptr, ptr, ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare i32 @posix_memalign(ptr, i64, i64) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @calloc(i64, i64) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @malloc(i64) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @realloc(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @malloc_usable_size(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @free(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak zeroext i8 @std.core.mem.ptr_is_aligned(ptr, i64) #0

; Function Attrs: cold noreturn nounwind memory(inaccessiblemem: write)
declare void @llvm.trap() #5

declare void @atexit(ptr)

define weak void @.__c3_atexit_std.core.mem.allocator.destroy_temp_allocators_after_exit() comdat {
entry:
  call void @atexit(ptr @std.core.mem.allocator.destroy_temp_allocators_after_exit)
  ret void
}

define internal void @.c3_dynamic_register() align 8 {
entry:
  %next_val = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.acquire", i32 0, i32 2), align 8
  %0 = icmp eq ptr %next_val, inttoptr (i64 -1 to ptr)
  br i1 %0, label %dtable_check, label %dtable_skip

dtable_check:                                     ; preds = %dtable_check, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.TrackingAllocator", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_check ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %1 = icmp eq ptr %dtable_ptr, null
  %next_dtable_ref = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br i1 %1, label %dtable_found, label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.acquire", ptr %dtable_ref, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip

dtable_skip:                                      ; preds = %dtable_found, %entry
  %next_val1 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.resize", i32 0, i32 2), align 8
  %2 = icmp eq ptr %next_val1, inttoptr (i64 -1 to ptr)
  br i1 %2, label %dtable_check2, label %dtable_skip7

dtable_check2:                                    ; preds = %dtable_check2, %dtable_skip
  %dtable_ref3 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.TrackingAllocator", i32 0, i32 2), %dtable_skip ], [ %next_dtable_ref5, %dtable_check2 ]
  %dtable_ptr4 = load ptr, ptr %dtable_ref3, align 8
  %3 = icmp eq ptr %dtable_ptr4, null
  %next_dtable_ref5 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr4, i32 0, i32 2
  br i1 %3, label %dtable_found6, label %dtable_check2

dtable_found6:                                    ; preds = %dtable_check2
  store ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.resize", ptr %dtable_ref3, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip7

dtable_skip7:                                     ; preds = %dtable_found6, %dtable_skip
  %next_val8 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.release", i32 0, i32 2), align 8
  %4 = icmp eq ptr %next_val8, inttoptr (i64 -1 to ptr)
  br i1 %4, label %dtable_check9, label %dtable_skip14

dtable_check9:                                    ; preds = %dtable_check9, %dtable_skip7
  %dtable_ref10 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.TrackingAllocator", i32 0, i32 2), %dtable_skip7 ], [ %next_dtable_ref12, %dtable_check9 ]
  %dtable_ptr11 = load ptr, ptr %dtable_ref10, align 8
  %5 = icmp eq ptr %dtable_ptr11, null
  %next_dtable_ref12 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr11, i32 0, i32 2
  br i1 %5, label %dtable_found13, label %dtable_check9

dtable_found13:                                   ; preds = %dtable_check9
  store ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.release", ptr %dtable_ref10, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TrackingAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip14

dtable_skip14:                                    ; preds = %dtable_found13, %dtable_skip7
  %next_val15 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.acquire", i32 0, i32 2), align 8
  %6 = icmp eq ptr %next_val15, inttoptr (i64 -1 to ptr)
  br i1 %6, label %dtable_check16, label %dtable_skip21

dtable_check16:                                   ; preds = %dtable_check16, %dtable_skip14
  %dtable_ref17 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.SimpleHeapAllocator", i32 0, i32 2), %dtable_skip14 ], [ %next_dtable_ref19, %dtable_check16 ]
  %dtable_ptr18 = load ptr, ptr %dtable_ref17, align 8
  %7 = icmp eq ptr %dtable_ptr18, null
  %next_dtable_ref19 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr18, i32 0, i32 2
  br i1 %7, label %dtable_found20, label %dtable_check16

dtable_found20:                                   ; preds = %dtable_check16
  store ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.acquire", ptr %dtable_ref17, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip21

dtable_skip21:                                    ; preds = %dtable_found20, %dtable_skip14
  %next_val22 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.resize", i32 0, i32 2), align 8
  %8 = icmp eq ptr %next_val22, inttoptr (i64 -1 to ptr)
  br i1 %8, label %dtable_check23, label %dtable_skip28

dtable_check23:                                   ; preds = %dtable_check23, %dtable_skip21
  %dtable_ref24 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.SimpleHeapAllocator", i32 0, i32 2), %dtable_skip21 ], [ %next_dtable_ref26, %dtable_check23 ]
  %dtable_ptr25 = load ptr, ptr %dtable_ref24, align 8
  %9 = icmp eq ptr %dtable_ptr25, null
  %next_dtable_ref26 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr25, i32 0, i32 2
  br i1 %9, label %dtable_found27, label %dtable_check23

dtable_found27:                                   ; preds = %dtable_check23
  store ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.resize", ptr %dtable_ref24, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip28

dtable_skip28:                                    ; preds = %dtable_found27, %dtable_skip21
  %next_val29 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.release", i32 0, i32 2), align 8
  %10 = icmp eq ptr %next_val29, inttoptr (i64 -1 to ptr)
  br i1 %10, label %dtable_check30, label %dtable_skip35

dtable_check30:                                   ; preds = %dtable_check30, %dtable_skip28
  %dtable_ref31 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.SimpleHeapAllocator", i32 0, i32 2), %dtable_skip28 ], [ %next_dtable_ref33, %dtable_check30 ]
  %dtable_ptr32 = load ptr, ptr %dtable_ref31, align 8
  %11 = icmp eq ptr %dtable_ptr32, null
  %next_dtable_ref33 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr32, i32 0, i32 2
  br i1 %11, label %dtable_found34, label %dtable_check30

dtable_found34:                                   ; preds = %dtable_check30
  store ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.release", ptr %dtable_ref31, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.SimpleHeapAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip35

dtable_skip35:                                    ; preds = %dtable_found34, %dtable_skip28
  %next_val36 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.to_string", i32 0, i32 2), align 8
  %12 = icmp eq ptr %next_val36, inttoptr (i64 -1 to ptr)
  br i1 %12, label %dtable_check37, label %dtable_skip42

dtable_check37:                                   ; preds = %dtable_check37, %dtable_skip35
  %dtable_ref38 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.LibcAllocator", i32 0, i32 2), %dtable_skip35 ], [ %next_dtable_ref40, %dtable_check37 ]
  %dtable_ptr39 = load ptr, ptr %dtable_ref38, align 8
  %13 = icmp eq ptr %dtable_ptr39, null
  %next_dtable_ref40 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr39, i32 0, i32 2
  br i1 %13, label %dtable_found41, label %dtable_check37

dtable_found41:                                   ; preds = %dtable_check37
  store ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.to_string", ptr %dtable_ref38, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.to_string", i32 0, i32 2), align 8
  br label %dtable_skip42

dtable_skip42:                                    ; preds = %dtable_found41, %dtable_skip35
  %next_val43 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.to_format", i32 0, i32 2), align 8
  %14 = icmp eq ptr %next_val43, inttoptr (i64 -1 to ptr)
  br i1 %14, label %dtable_check44, label %dtable_skip49

dtable_check44:                                   ; preds = %dtable_check44, %dtable_skip42
  %dtable_ref45 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.LibcAllocator", i32 0, i32 2), %dtable_skip42 ], [ %next_dtable_ref47, %dtable_check44 ]
  %dtable_ptr46 = load ptr, ptr %dtable_ref45, align 8
  %15 = icmp eq ptr %dtable_ptr46, null
  %next_dtable_ref47 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr46, i32 0, i32 2
  br i1 %15, label %dtable_found48, label %dtable_check44

dtable_found48:                                   ; preds = %dtable_check44
  store ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.to_format", ptr %dtable_ref45, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.to_format", i32 0, i32 2), align 8
  br label %dtable_skip49

dtable_skip49:                                    ; preds = %dtable_found48, %dtable_skip42
  %next_val50 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.acquire", i32 0, i32 2), align 8
  %16 = icmp eq ptr %next_val50, inttoptr (i64 -1 to ptr)
  br i1 %16, label %dtable_check51, label %dtable_skip56

dtable_check51:                                   ; preds = %dtable_check51, %dtable_skip49
  %dtable_ref52 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.LibcAllocator", i32 0, i32 2), %dtable_skip49 ], [ %next_dtable_ref54, %dtable_check51 ]
  %dtable_ptr53 = load ptr, ptr %dtable_ref52, align 8
  %17 = icmp eq ptr %dtable_ptr53, null
  %next_dtable_ref54 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr53, i32 0, i32 2
  br i1 %17, label %dtable_found55, label %dtable_check51

dtable_found55:                                   ; preds = %dtable_check51
  store ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.acquire", ptr %dtable_ref52, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip56

dtable_skip56:                                    ; preds = %dtable_found55, %dtable_skip49
  %next_val57 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.resize", i32 0, i32 2), align 8
  %18 = icmp eq ptr %next_val57, inttoptr (i64 -1 to ptr)
  br i1 %18, label %dtable_check58, label %dtable_skip63

dtable_check58:                                   ; preds = %dtable_check58, %dtable_skip56
  %dtable_ref59 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.LibcAllocator", i32 0, i32 2), %dtable_skip56 ], [ %next_dtable_ref61, %dtable_check58 ]
  %dtable_ptr60 = load ptr, ptr %dtable_ref59, align 8
  %19 = icmp eq ptr %dtable_ptr60, null
  %next_dtable_ref61 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr60, i32 0, i32 2
  br i1 %19, label %dtable_found62, label %dtable_check58

dtable_found62:                                   ; preds = %dtable_check58
  store ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.resize", ptr %dtable_ref59, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip63

dtable_skip63:                                    ; preds = %dtable_found62, %dtable_skip56
  %next_val64 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.release", i32 0, i32 2), align 8
  %20 = icmp eq ptr %next_val64, inttoptr (i64 -1 to ptr)
  br i1 %20, label %dtable_check65, label %dtable_skip70

dtable_check65:                                   ; preds = %dtable_check65, %dtable_skip63
  %dtable_ref66 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.LibcAllocator", i32 0, i32 2), %dtable_skip63 ], [ %next_dtable_ref68, %dtable_check65 ]
  %dtable_ptr67 = load ptr, ptr %dtable_ref66, align 8
  %21 = icmp eq ptr %dtable_ptr67, null
  %next_dtable_ref68 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr67, i32 0, i32 2
  br i1 %21, label %dtable_found69, label %dtable_check65

dtable_found69:                                   ; preds = %dtable_check65
  store ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.release", ptr %dtable_ref66, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LibcAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip70

dtable_skip70:                                    ; preds = %dtable_found69, %dtable_skip63
  %next_val71 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.release", i32 0, i32 2), align 8
  %22 = icmp eq ptr %next_val71, inttoptr (i64 -1 to ptr)
  br i1 %22, label %dtable_check72, label %dtable_skip77

dtable_check72:                                   ; preds = %dtable_check72, %dtable_skip70
  %dtable_ref73 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.OnStackAllocator", i32 0, i32 2), %dtable_skip70 ], [ %next_dtable_ref75, %dtable_check72 ]
  %dtable_ptr74 = load ptr, ptr %dtable_ref73, align 8
  %23 = icmp eq ptr %dtable_ptr74, null
  %next_dtable_ref75 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr74, i32 0, i32 2
  br i1 %23, label %dtable_found76, label %dtable_check72

dtable_found76:                                   ; preds = %dtable_check72
  store ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.release", ptr %dtable_ref73, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip77

dtable_skip77:                                    ; preds = %dtable_found76, %dtable_skip70
  %next_val78 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.resize", i32 0, i32 2), align 8
  %24 = icmp eq ptr %next_val78, inttoptr (i64 -1 to ptr)
  br i1 %24, label %dtable_check79, label %dtable_skip84

dtable_check79:                                   ; preds = %dtable_check79, %dtable_skip77
  %dtable_ref80 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.OnStackAllocator", i32 0, i32 2), %dtable_skip77 ], [ %next_dtable_ref82, %dtable_check79 ]
  %dtable_ptr81 = load ptr, ptr %dtable_ref80, align 8
  %25 = icmp eq ptr %dtable_ptr81, null
  %next_dtable_ref82 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr81, i32 0, i32 2
  br i1 %25, label %dtable_found83, label %dtable_check79

dtable_found83:                                   ; preds = %dtable_check79
  store ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.resize", ptr %dtable_ref80, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip84

dtable_skip84:                                    ; preds = %dtable_found83, %dtable_skip77
  %next_val85 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.acquire", i32 0, i32 2), align 8
  %26 = icmp eq ptr %next_val85, inttoptr (i64 -1 to ptr)
  br i1 %26, label %dtable_check86, label %dtable_skip91

dtable_check86:                                   ; preds = %dtable_check86, %dtable_skip84
  %dtable_ref87 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.OnStackAllocator", i32 0, i32 2), %dtable_skip84 ], [ %next_dtable_ref89, %dtable_check86 ]
  %dtable_ptr88 = load ptr, ptr %dtable_ref87, align 8
  %27 = icmp eq ptr %dtable_ptr88, null
  %next_dtable_ref89 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr88, i32 0, i32 2
  br i1 %27, label %dtable_found90, label %dtable_check86

dtable_found90:                                   ; preds = %dtable_check86
  store ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.acquire", ptr %dtable_ref87, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.OnStackAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip91

dtable_skip91:                                    ; preds = %dtable_found90, %dtable_skip84
  %next_val92 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.release", i32 0, i32 2), align 8
  %28 = icmp eq ptr %next_val92, inttoptr (i64 -1 to ptr)
  br i1 %28, label %dtable_check93, label %dtable_skip98

dtable_check93:                                   ; preds = %dtable_check93, %dtable_skip91
  %dtable_ref94 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.BackedArenaAllocator", i32 0, i32 2), %dtable_skip91 ], [ %next_dtable_ref96, %dtable_check93 ]
  %dtable_ptr95 = load ptr, ptr %dtable_ref94, align 8
  %29 = icmp eq ptr %dtable_ptr95, null
  %next_dtable_ref96 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr95, i32 0, i32 2
  br i1 %29, label %dtable_found97, label %dtable_check93

dtable_found97:                                   ; preds = %dtable_check93
  store ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.release", ptr %dtable_ref94, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip98

dtable_skip98:                                    ; preds = %dtable_found97, %dtable_skip91
  %next_val99 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.resize", i32 0, i32 2), align 8
  %30 = icmp eq ptr %next_val99, inttoptr (i64 -1 to ptr)
  br i1 %30, label %dtable_check100, label %dtable_skip105

dtable_check100:                                  ; preds = %dtable_check100, %dtable_skip98
  %dtable_ref101 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.BackedArenaAllocator", i32 0, i32 2), %dtable_skip98 ], [ %next_dtable_ref103, %dtable_check100 ]
  %dtable_ptr102 = load ptr, ptr %dtable_ref101, align 8
  %31 = icmp eq ptr %dtable_ptr102, null
  %next_dtable_ref103 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr102, i32 0, i32 2
  br i1 %31, label %dtable_found104, label %dtable_check100

dtable_found104:                                  ; preds = %dtable_check100
  store ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.resize", ptr %dtable_ref101, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip105

dtable_skip105:                                   ; preds = %dtable_found104, %dtable_skip98
  %next_val106 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.acquire", i32 0, i32 2), align 8
  %32 = icmp eq ptr %next_val106, inttoptr (i64 -1 to ptr)
  br i1 %32, label %dtable_check107, label %dtable_skip112

dtable_check107:                                  ; preds = %dtable_check107, %dtable_skip105
  %dtable_ref108 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.BackedArenaAllocator", i32 0, i32 2), %dtable_skip105 ], [ %next_dtable_ref110, %dtable_check107 ]
  %dtable_ptr109 = load ptr, ptr %dtable_ref108, align 8
  %33 = icmp eq ptr %dtable_ptr109, null
  %next_dtable_ref110 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr109, i32 0, i32 2
  br i1 %33, label %dtable_found111, label %dtable_check107

dtable_found111:                                  ; preds = %dtable_check107
  store ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.acquire", ptr %dtable_ref108, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.BackedArenaAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip112

dtable_skip112:                                   ; preds = %dtable_found111, %dtable_skip105
  %next_val113 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.release", i32 0, i32 2), align 8
  %34 = icmp eq ptr %next_val113, inttoptr (i64 -1 to ptr)
  br i1 %34, label %dtable_check114, label %dtable_skip119

dtable_check114:                                  ; preds = %dtable_check114, %dtable_skip112
  %dtable_ref115 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.TempAllocator", i32 0, i32 2), %dtable_skip112 ], [ %next_dtable_ref117, %dtable_check114 ]
  %dtable_ptr116 = load ptr, ptr %dtable_ref115, align 8
  %35 = icmp eq ptr %dtable_ptr116, null
  %next_dtable_ref117 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr116, i32 0, i32 2
  br i1 %35, label %dtable_found118, label %dtable_check114

dtable_found118:                                  ; preds = %dtable_check114
  store ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.release", ptr %dtable_ref115, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip119

dtable_skip119:                                   ; preds = %dtable_found118, %dtable_skip112
  %next_val120 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.resize", i32 0, i32 2), align 8
  %36 = icmp eq ptr %next_val120, inttoptr (i64 -1 to ptr)
  br i1 %36, label %dtable_check121, label %dtable_skip126

dtable_check121:                                  ; preds = %dtable_check121, %dtable_skip119
  %dtable_ref122 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.TempAllocator", i32 0, i32 2), %dtable_skip119 ], [ %next_dtable_ref124, %dtable_check121 ]
  %dtable_ptr123 = load ptr, ptr %dtable_ref122, align 8
  %37 = icmp eq ptr %dtable_ptr123, null
  %next_dtable_ref124 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr123, i32 0, i32 2
  br i1 %37, label %dtable_found125, label %dtable_check121

dtable_found125:                                  ; preds = %dtable_check121
  store ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.resize", ptr %dtable_ref122, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip126

dtable_skip126:                                   ; preds = %dtable_found125, %dtable_skip119
  %next_val127 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.acquire", i32 0, i32 2), align 8
  %38 = icmp eq ptr %next_val127, inttoptr (i64 -1 to ptr)
  br i1 %38, label %dtable_check128, label %dtable_skip133

dtable_check128:                                  ; preds = %dtable_check128, %dtable_skip126
  %dtable_ref129 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.TempAllocator", i32 0, i32 2), %dtable_skip126 ], [ %next_dtable_ref131, %dtable_check128 ]
  %dtable_ptr130 = load ptr, ptr %dtable_ref129, align 8
  %39 = icmp eq ptr %dtable_ptr130, null
  %next_dtable_ref131 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr130, i32 0, i32 2
  br i1 %39, label %dtable_found132, label %dtable_check128

dtable_found132:                                  ; preds = %dtable_check128
  store ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.acquire", ptr %dtable_ref129, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.TempAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip133

dtable_skip133:                                   ; preds = %dtable_found132, %dtable_skip126
  %next_val134 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.release", i32 0, i32 2), align 8
  %40 = icmp eq ptr %next_val134, inttoptr (i64 -1 to ptr)
  br i1 %40, label %dtable_check135, label %dtable_skip140

dtable_check135:                                  ; preds = %dtable_check135, %dtable_skip133
  %dtable_ref136 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.ArenaAllocator", i32 0, i32 2), %dtable_skip133 ], [ %next_dtable_ref138, %dtable_check135 ]
  %dtable_ptr137 = load ptr, ptr %dtable_ref136, align 8
  %41 = icmp eq ptr %dtable_ptr137, null
  %next_dtable_ref138 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr137, i32 0, i32 2
  br i1 %41, label %dtable_found139, label %dtable_check135

dtable_found139:                                  ; preds = %dtable_check135
  store ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.release", ptr %dtable_ref136, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip140

dtable_skip140:                                   ; preds = %dtable_found139, %dtable_skip133
  %next_val141 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.acquire", i32 0, i32 2), align 8
  %42 = icmp eq ptr %next_val141, inttoptr (i64 -1 to ptr)
  br i1 %42, label %dtable_check142, label %dtable_skip147

dtable_check142:                                  ; preds = %dtable_check142, %dtable_skip140
  %dtable_ref143 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.ArenaAllocator", i32 0, i32 2), %dtable_skip140 ], [ %next_dtable_ref145, %dtable_check142 ]
  %dtable_ptr144 = load ptr, ptr %dtable_ref143, align 8
  %43 = icmp eq ptr %dtable_ptr144, null
  %next_dtable_ref145 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr144, i32 0, i32 2
  br i1 %43, label %dtable_found146, label %dtable_check142

dtable_found146:                                  ; preds = %dtable_check142
  store ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.acquire", ptr %dtable_ref143, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip147

dtable_skip147:                                   ; preds = %dtable_found146, %dtable_skip140
  %next_val148 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.resize", i32 0, i32 2), align 8
  %44 = icmp eq ptr %next_val148, inttoptr (i64 -1 to ptr)
  br i1 %44, label %dtable_check149, label %dtable_skip154

dtable_check149:                                  ; preds = %dtable_check149, %dtable_skip147
  %dtable_ref150 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.ArenaAllocator", i32 0, i32 2), %dtable_skip147 ], [ %next_dtable_ref152, %dtable_check149 ]
  %dtable_ptr151 = load ptr, ptr %dtable_ref150, align 8
  %45 = icmp eq ptr %dtable_ptr151, null
  %next_dtable_ref152 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr151, i32 0, i32 2
  br i1 %45, label %dtable_found153, label %dtable_check149

dtable_found153:                                  ; preds = %dtable_check149
  store ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.resize", ptr %dtable_ref150, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.ArenaAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip154

dtable_skip154:                                   ; preds = %dtable_found153, %dtable_skip147
  %next_val155 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.release", i32 0, i32 2), align 8
  %46 = icmp eq ptr %next_val155, inttoptr (i64 -1 to ptr)
  br i1 %46, label %dtable_check156, label %dtable_skip161

dtable_check156:                                  ; preds = %dtable_check156, %dtable_skip154
  %dtable_ref157 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.DynamicArenaAllocator", i32 0, i32 2), %dtable_skip154 ], [ %next_dtable_ref159, %dtable_check156 ]
  %dtable_ptr158 = load ptr, ptr %dtable_ref157, align 8
  %47 = icmp eq ptr %dtable_ptr158, null
  %next_dtable_ref159 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr158, i32 0, i32 2
  br i1 %47, label %dtable_found160, label %dtable_check156

dtable_found160:                                  ; preds = %dtable_check156
  store ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.release", ptr %dtable_ref157, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip161

dtable_skip161:                                   ; preds = %dtable_found160, %dtable_skip154
  %next_val162 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.resize", i32 0, i32 2), align 8
  %48 = icmp eq ptr %next_val162, inttoptr (i64 -1 to ptr)
  br i1 %48, label %dtable_check163, label %dtable_skip168

dtable_check163:                                  ; preds = %dtable_check163, %dtable_skip161
  %dtable_ref164 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.DynamicArenaAllocator", i32 0, i32 2), %dtable_skip161 ], [ %next_dtable_ref166, %dtable_check163 ]
  %dtable_ptr165 = load ptr, ptr %dtable_ref164, align 8
  %49 = icmp eq ptr %dtable_ptr165, null
  %next_dtable_ref166 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr165, i32 0, i32 2
  br i1 %49, label %dtable_found167, label %dtable_check163

dtable_found167:                                  ; preds = %dtable_check163
  store ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.resize", ptr %dtable_ref164, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip168

dtable_skip168:                                   ; preds = %dtable_found167, %dtable_skip161
  %next_val169 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.acquire", i32 0, i32 2), align 8
  %50 = icmp eq ptr %next_val169, inttoptr (i64 -1 to ptr)
  br i1 %50, label %dtable_check170, label %dtable_skip175

dtable_check170:                                  ; preds = %dtable_check170, %dtable_skip168
  %dtable_ref171 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.DynamicArenaAllocator", i32 0, i32 2), %dtable_skip168 ], [ %next_dtable_ref173, %dtable_check170 ]
  %dtable_ptr172 = load ptr, ptr %dtable_ref171, align 8
  %51 = icmp eq ptr %dtable_ptr172, null
  %next_dtable_ref173 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr172, i32 0, i32 2
  br i1 %51, label %dtable_found174, label %dtable_check170

dtable_found174:                                  ; preds = %dtable_check170
  store ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.acquire", ptr %dtable_ref171, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.DynamicArenaAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip175

dtable_skip175:                                   ; preds = %dtable_found174, %dtable_skip168
  %next_val176 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.acquire", i32 0, i32 2), align 8
  %52 = icmp eq ptr %next_val176, inttoptr (i64 -1 to ptr)
  br i1 %52, label %dtable_check177, label %dtable_skip182

dtable_check177:                                  ; preds = %dtable_check177, %dtable_skip175
  %dtable_ref178 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.LazyTempAllocator", i32 0, i32 2), %dtable_skip175 ], [ %next_dtable_ref180, %dtable_check177 ]
  %dtable_ptr179 = load ptr, ptr %dtable_ref178, align 8
  %53 = icmp eq ptr %dtable_ptr179, null
  %next_dtable_ref180 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr179, i32 0, i32 2
  br i1 %53, label %dtable_found181, label %dtable_check177

dtable_found181:                                  ; preds = %dtable_check177
  store ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.acquire", ptr %dtable_ref178, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip182

dtable_skip182:                                   ; preds = %dtable_found181, %dtable_skip175
  %next_val183 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.resize", i32 0, i32 2), align 8
  %54 = icmp eq ptr %next_val183, inttoptr (i64 -1 to ptr)
  br i1 %54, label %dtable_check184, label %dtable_skip189

dtable_check184:                                  ; preds = %dtable_check184, %dtable_skip182
  %dtable_ref185 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.LazyTempAllocator", i32 0, i32 2), %dtable_skip182 ], [ %next_dtable_ref187, %dtable_check184 ]
  %dtable_ptr186 = load ptr, ptr %dtable_ref185, align 8
  %55 = icmp eq ptr %dtable_ptr186, null
  %next_dtable_ref187 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr186, i32 0, i32 2
  br i1 %55, label %dtable_found188, label %dtable_check184

dtable_found188:                                  ; preds = %dtable_check184
  store ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.resize", ptr %dtable_ref185, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip189

dtable_skip189:                                   ; preds = %dtable_found188, %dtable_skip182
  %next_val190 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.release", i32 0, i32 2), align 8
  %56 = icmp eq ptr %next_val190, inttoptr (i64 -1 to ptr)
  br i1 %56, label %dtable_check191, label %dtable_skip196

dtable_check191:                                  ; preds = %dtable_check191, %dtable_skip189
  %dtable_ref192 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.LazyTempAllocator", i32 0, i32 2), %dtable_skip189 ], [ %next_dtable_ref194, %dtable_check191 ]
  %dtable_ptr193 = load ptr, ptr %dtable_ref192, align 8
  %57 = icmp eq ptr %dtable_ptr193, null
  %next_dtable_ref194 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr193, i32 0, i32 2
  br i1 %57, label %dtable_found195, label %dtable_check191

dtable_found195:                                  ; preds = %dtable_check191
  store ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.release", ptr %dtable_ref192, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.LazyTempAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip196

dtable_skip196:                                   ; preds = %dtable_found195, %dtable_skip189
  %next_val197 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.acquire", i32 0, i32 2), align 8
  %58 = icmp eq ptr %next_val197, inttoptr (i64 -1 to ptr)
  br i1 %58, label %dtable_check198, label %dtable_skip203

dtable_check198:                                  ; preds = %dtable_check198, %dtable_skip196
  %dtable_ref199 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.NullAllocator", i32 0, i32 2), %dtable_skip196 ], [ %next_dtable_ref201, %dtable_check198 ]
  %dtable_ptr200 = load ptr, ptr %dtable_ref199, align 8
  %59 = icmp eq ptr %dtable_ptr200, null
  %next_dtable_ref201 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr200, i32 0, i32 2
  br i1 %59, label %dtable_found202, label %dtable_check198

dtable_found202:                                  ; preds = %dtable_check198
  store ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.acquire", ptr %dtable_ref199, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.acquire", i32 0, i32 2), align 8
  br label %dtable_skip203

dtable_skip203:                                   ; preds = %dtable_found202, %dtable_skip196
  %next_val204 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.resize", i32 0, i32 2), align 8
  %60 = icmp eq ptr %next_val204, inttoptr (i64 -1 to ptr)
  br i1 %60, label %dtable_check205, label %dtable_skip210

dtable_check205:                                  ; preds = %dtable_check205, %dtable_skip203
  %dtable_ref206 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.NullAllocator", i32 0, i32 2), %dtable_skip203 ], [ %next_dtable_ref208, %dtable_check205 ]
  %dtable_ptr207 = load ptr, ptr %dtable_ref206, align 8
  %61 = icmp eq ptr %dtable_ptr207, null
  %next_dtable_ref208 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr207, i32 0, i32 2
  br i1 %61, label %dtable_found209, label %dtable_check205

dtable_found209:                                  ; preds = %dtable_check205
  store ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.resize", ptr %dtable_ref206, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.resize", i32 0, i32 2), align 8
  br label %dtable_skip210

dtable_skip210:                                   ; preds = %dtable_found209, %dtable_skip203
  %next_val211 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.release", i32 0, i32 2), align 8
  %62 = icmp eq ptr %next_val211, inttoptr (i64 -1 to ptr)
  br i1 %62, label %dtable_check212, label %dtable_skip217

dtable_check212:                                  ; preds = %dtable_check212, %dtable_skip210
  %dtable_ref213 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.core.mem.allocator.NullAllocator", i32 0, i32 2), %dtable_skip210 ], [ %next_dtable_ref215, %dtable_check212 ]
  %dtable_ptr214 = load ptr, ptr %dtable_ref213, align 8
  %63 = icmp eq ptr %dtable_ptr214, null
  %next_dtable_ref215 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr214, i32 0, i32 2
  br i1 %63, label %dtable_found216, label %dtable_check212

dtable_found216:                                  ; preds = %dtable_check212
  store ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.release", ptr %dtable_ref213, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.mem.allocator.NullAllocator.release", i32 0, i32 2), align 8
  br label %dtable_skip217

dtable_skip217:                                   ; preds = %dtable_found216, %dtable_skip210
  ret void
}

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { cold noreturn nounwind memory(inaccessiblemem: write) }
attributes #6 = { noreturn }
attributes #7 = { alwaysinline }

!llvm.module.flags = !{!83, !84, !85, !86, !87, !88, !89}
!llvm.dbg.cu = !{!90}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "MAX_BACKTRACE", linkageName: "std.core.mem.allocator.MAX_BACKTRACE", scope: !2, file: !2, line: 8, type: !3, isLocal: false, isDefinition: true, align: 4)
!2 = !DIFile(filename: "tracking_allocator.c3", directory: "/usr/lib/c3c/lib/std/core/allocators")
!3 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
!5 = distinct !DIGlobalVariable(name: "LIBC_ALLOCATOR", linkageName: "std.core.mem.allocator.LIBC_ALLOCATOR", scope: !6, file: !6, line: 12, type: !7, isLocal: false, isDefinition: true, align: 8)
!6 = !DIFile(filename: "libc_allocator.c3", directory: "/usr/lib/c3c/lib/std/core/allocators")
!7 = !DIDerivedType(tag: DW_TAG_typedef, name: "LibcAllocator", scope: !6, file: !6, line: 11, baseType: !8, align: 8)
!8 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!9 = !DIGlobalVariableExpression(var: !10, expr: !DIExpression())
!10 = distinct !DIGlobalVariable(name: "PAGE_IS_ALIGNED", linkageName: "std.core.mem.allocator.PAGE_IS_ALIGNED", scope: !11, file: !11, line: 28, type: !12, isLocal: true, isDefinition: true, align: 8)
!11 = !DIFile(filename: "backed_arena_allocator.c3", directory: "/usr/lib/c3c/lib/std/core/allocators")
!12 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !8)
!13 = !DIGlobalVariableExpression(var: !14, expr: !DIExpression())
!14 = distinct !DIGlobalVariable(name: "PAGE_IS_ALIGNED", linkageName: "std.core.mem.allocator.PAGE_IS_ALIGNED", scope: !15, file: !15, line: 50, type: !12, isLocal: true, isDefinition: true, align: 8)
!15 = !DIFile(filename: "temp_allocator.c3", directory: "/usr/lib/c3c/lib/std/core/allocators")
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "WASM_BLOCK_SIZE", linkageName: "std.core.mem.allocator.WASM_BLOCK_SIZE", scope: !18, file: !18, line: 4, type: !12, isLocal: false, isDefinition: true, align: 8)
!18 = !DIFile(filename: "wasm_memory.c3", directory: "/usr/lib/c3c/lib/std/core/os/wasm")
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "wasm_memory", linkageName: "std.core.mem.allocator.wasm_memory", scope: !18, file: !18, line: 6, type: !21, isLocal: false, isDefinition: true, align: 8)
!21 = !DICompositeType(tag: DW_TAG_structure_type, name: "WasmMemory", scope: !18, file: !18, line: 8, size: 128, align: 64, elements: !22, identifier: "std.core.mem.allocator.WasmMemory")
!22 = !{!23, !24}
!23 = !DIDerivedType(tag: DW_TAG_member, name: "allocation", scope: !21, file: !18, line: 10, baseType: !12, size: 64, align: 64)
!24 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !21, file: !18, line: 11, baseType: !25, size: 64, align: 64, offset: 64)
!25 = !DIDerivedType(tag: DW_TAG_typedef, name: "uptr", baseType: !8)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "DEFAULT_SIZE_PREFIX", linkageName: "std.core.mem.allocator.DEFAULT_SIZE_PREFIX", scope: !28, file: !28, line: 16, type: !12, isLocal: false, isDefinition: true, align: 8)
!28 = !DIFile(filename: "mem_allocator.c3", directory: "/usr/lib/c3c/lib/std/core")
!29 = !DIGlobalVariableExpression(var: !30, expr: !DIExpression())
!30 = distinct !DIGlobalVariable(name: "DEFAULT_SIZE_PREFIX_ALIGNMENT", linkageName: "std.core.mem.allocator.DEFAULT_SIZE_PREFIX_ALIGNMENT", scope: !28, file: !28, line: 17, type: !12, isLocal: false, isDefinition: true, align: 8)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "thread_allocator", linkageName: "std.core.mem.allocator.thread_allocator", scope: !28, file: !28, line: 399, type: !33, isLocal: false, isDefinition: true, align: 8)
!33 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !34, identifier: "Allocator")
!34 = !{!35, !37}
!35 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !33, baseType: !36, size: 64, align: 64)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!37 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !33, baseType: !38, size: 64, align: 64, offset: 64)
!38 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "temp_base_allocator", linkageName: "std.core.mem.allocator.temp_base_allocator", scope: !28, file: !28, line: 400, type: !33, isLocal: true, isDefinition: true, align: 8)
!41 = !DIGlobalVariableExpression(var: !42, expr: !DIExpression())
!42 = distinct !DIGlobalVariable(name: "LAZY_TEMP", linkageName: "std.core.mem.allocator.LAZY_TEMP", scope: !28, file: !28, line: 404, type: !43, isLocal: true, isDefinition: true, align: 8)
!43 = !DIDerivedType(tag: DW_TAG_typedef, name: "LazyTempAllocator", scope: !28, file: !28, line: 517, baseType: !8, align: 8)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "current_temp", linkageName: "std.core.mem.allocator.current_temp", scope: !28, file: !28, line: 405, type: !33, isLocal: false, isDefinition: true, align: 8)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "top_temp", linkageName: "std.core.mem.allocator.top_temp", scope: !28, file: !28, line: 406, type: !48, isLocal: false, isDefinition: true, align: 8)
!48 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !49, size: 64, align: 64, dwarfAddressSpace: 0)
!49 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !15, file: !15, line: 32, size: 512, align: 64, elements: !50, identifier: "std.core.mem.allocator.TempAllocator")
!50 = !{!51, !52, !65, !66, !68, !69, !70, !71}
!51 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !49, file: !15, line: 34, baseType: !33, size: 128, align: 64)
!52 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !49, file: !15, line: 35, baseType: !53, size: 64, align: 64, offset: 128)
!53 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !54, size: 64, align: 64, dwarfAddressSpace: 0)
!54 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !15, file: !15, line: 52, size: 256, align: 64, elements: !55, identifier: "std.core.mem.allocator.TempAllocatorPage")
!55 = !{!56, !57, !58, !59, !60}
!56 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !54, file: !15, line: 54, baseType: !53, size: 64, align: 64)
!57 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !54, file: !15, line: 55, baseType: !36, size: 64, align: 64, offset: 64)
!58 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !54, file: !15, line: 56, baseType: !12, size: 64, align: 64, offset: 128)
!59 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !54, file: !15, line: 57, baseType: !12, size: 64, align: 64, offset: 192)
!60 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !54, file: !15, line: 58, baseType: !61, align: 8, offset: 256)
!61 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, align: 8, elements: !63)
!62 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!63 = !{!64}
!64 = !DISubrange(count: 0, lowerBound: 0)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "derived", scope: !49, file: !15, line: 36, baseType: !48, size: 64, align: 64, offset: 192)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "allocated", scope: !49, file: !15, line: 37, baseType: !67, size: 8, align: 8, offset: 256)
!67 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!68 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !49, file: !15, line: 38, baseType: !12, size: 64, align: 64, offset: 320)
!69 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !49, file: !15, line: 39, baseType: !12, size: 64, align: 64, offset: 384)
!70 = !DIDerivedType(tag: DW_TAG_member, name: "original_capacity", scope: !49, file: !15, line: 40, baseType: !12, size: 64, align: 64, offset: 448)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !49, file: !15, line: 41, baseType: !61, align: 8, offset: 512)
!72 = !DIGlobalVariableExpression(var: !73, expr: !DIExpression())
!73 = distinct !DIGlobalVariable(name: "auto_create_temp", linkageName: "std.core.mem.allocator.auto_create_temp", scope: !28, file: !28, line: 407, type: !67, isLocal: false, isDefinition: true, align: 1)
!74 = !DIGlobalVariableExpression(var: !75, expr: !DIExpression())
!75 = distinct !DIGlobalVariable(name: "temp_allocator_min_size", linkageName: "std.core.mem.allocator.temp_allocator_min_size", scope: !28, file: !28, line: 409, type: !12, isLocal: false, isDefinition: true, align: 8)
!76 = !DIGlobalVariableExpression(var: !77, expr: !DIExpression())
!77 = distinct !DIGlobalVariable(name: "temp_allocator_buffer_size", linkageName: "std.core.mem.allocator.temp_allocator_buffer_size", scope: !28, file: !28, line: 410, type: !12, isLocal: false, isDefinition: true, align: 8)
!78 = !DIGlobalVariableExpression(var: !79, expr: !DIExpression())
!79 = distinct !DIGlobalVariable(name: "temp_allocator_new_mult", linkageName: "std.core.mem.allocator.temp_allocator_new_mult", scope: !28, file: !28, line: 411, type: !12, isLocal: false, isDefinition: true, align: 8)
!80 = !DIGlobalVariableExpression(var: !81, expr: !DIExpression())
!81 = distinct !DIGlobalVariable(name: "NULL_ALLOCATOR", linkageName: "std.core.mem.allocator.NULL_ALLOCATOR", scope: !28, file: !28, line: 535, type: !82, isLocal: false, isDefinition: true, align: 8)
!82 = !DIDerivedType(tag: DW_TAG_typedef, name: "NullAllocator", scope: !28, file: !28, line: 536, baseType: !8, align: 8)
!83 = !{i32 2, !"Dwarf Version", i32 4}
!84 = !{i32 2, !"Debug Info Version", i32 3}
!85 = !{i32 2, !"wchar_size", i32 4}
!86 = !{i32 4, !"PIE Level", i32 2}
!87 = !{i32 4, !"PIC Level", i32 2}
!88 = !{i32 1, !"uwtable", i32 2}
!89 = !{i32 2, !"frame-pointer", i32 2}
!90 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !91, globals: !96, splitDebugInlining: false)
!91 = !{!92}
!92 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AllocInitType", scope: !2, file: !2, line: 26, baseType: !3, size: 32, align: 32, elements: !93)
!93 = !{!94, !95}
!94 = !DIEnumerator(name: "NO_ZERO", value: 0)
!95 = !DIEnumerator(name: "ZERO", value: 1)
!96 = !{!0, !4, !9, !13, !16, !19, !26, !29, !31, !39, !41, !44, !46, !72, !74, !76, !78, !80}
!97 = distinct !DISubprogram(name: "init", linkageName: "std.core.mem.allocator.TrackingAllocator.init", scope: !2, file: !2, line: 38, type: !98, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!98 = !DISubroutineType(types: !99)
!99 = !{null, !100, !33}
!100 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TrackingAllocator*", baseType: !101, size: 64, align: 64, dwarfAddressSpace: 0)
!101 = !DICompositeType(tag: DW_TAG_structure_type, name: "TrackingAllocator", scope: !2, file: !2, line: 25, size: 640, align: 64, elements: !102, identifier: "std.core.mem.allocator.TrackingAllocator")
!102 = !{!103, !104, !137, !138}
!103 = !DIDerivedType(tag: DW_TAG_member, name: "inner_allocator", scope: !101, file: !2, line: 27, baseType: !33, size: 128, align: 64)
!104 = !DIDerivedType(tag: DW_TAG_member, name: "map", scope: !101, file: !2, line: 28, baseType: !105, size: 384, align: 64, offset: 128)
!105 = !DIDerivedType(tag: DW_TAG_typedef, name: "AllocMap", scope: !2, file: !2, line: 16, baseType: !106, align: 8)
!106 = !DICompositeType(tag: DW_TAG_structure_type, name: "HashMap", scope: !2, file: !2, line: 29, size: 384, align: 64, elements: !107, identifier: "std_collections_map$ulong$std.core.mem.allocator.Allocation$.HashMap")
!107 = !{!108, !132, !133, !134, !135}
!108 = !DIDerivedType(tag: DW_TAG_member, name: "table", scope: !106, file: !2, line: 31, baseType: !109, size: 128, align: 64)
!109 = !DICompositeType(tag: DW_TAG_structure_type, name: "Entry*[]", size: 128, align: 64, elements: !110, identifier: "Entry*[]")
!110 = !{!111, !131}
!111 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !109, baseType: !112, size: 64, align: 64)
!112 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Entry**", baseType: !113, size: 64, align: 64, dwarfAddressSpace: 0)
!113 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Entry*", baseType: !114, size: 64, align: 64, dwarfAddressSpace: 0)
!114 = !DICompositeType(tag: DW_TAG_structure_type, name: "Entry", scope: !2, file: !2, line: 21, size: 1344, align: 64, elements: !115, identifier: "std_collections_map$ulong$std.core.mem.allocator.Allocation$.Entry")
!115 = !{!116, !118, !120, !130}
!116 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !114, file: !2, line: 23, baseType: !117, size: 32, align: 32)
!117 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!118 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !114, file: !2, line: 24, baseType: !119, size: 64, align: 64, offset: 64)
!119 = !DIDerivedType(tag: DW_TAG_typedef, name: "Key", scope: !2, file: !2, line: 16, baseType: !8, align: 8)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !114, file: !2, line: 25, baseType: !121, size: 1152, align: 64, offset: 128)
!121 = !DIDerivedType(tag: DW_TAG_typedef, name: "Value", scope: !2, file: !2, line: 16, baseType: !122, align: 8)
!122 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocation", scope: !2, file: !2, line: 9, size: 1152, align: 64, elements: !123, identifier: "std.core.mem.allocator.Allocation")
!123 = !{!124, !125, !126}
!124 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !122, file: !2, line: 11, baseType: !36, size: 64, align: 64)
!125 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !122, file: !2, line: 12, baseType: !12, size: 64, align: 64, offset: 64)
!126 = !DIDerivedType(tag: DW_TAG_member, name: "backtrace", scope: !122, file: !2, line: 13, baseType: !127, size: 1024, align: 64, offset: 128)
!127 = !DICompositeType(tag: DW_TAG_array_type, baseType: !36, size: 1024, align: 64, elements: !128)
!128 = !{!129}
!129 = !DISubrange(count: 16, lowerBound: 0)
!130 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !114, file: !2, line: 26, baseType: !113, size: 64, align: 64, offset: 1280)
!131 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !109, baseType: !12, size: 64, align: 64, offset: 64)
!132 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !106, file: !2, line: 32, baseType: !33, size: 128, align: 64, offset: 128)
!133 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !106, file: !2, line: 33, baseType: !117, size: 32, align: 32, offset: 256)
!134 = !DIDerivedType(tag: DW_TAG_member, name: "threshold", scope: !106, file: !2, line: 34, baseType: !117, size: 32, align: 32, offset: 288)
!135 = !DIDerivedType(tag: DW_TAG_member, name: "load_factor", scope: !106, file: !2, line: 35, baseType: !136, size: 32, align: 32, offset: 320)
!136 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!137 = !DIDerivedType(tag: DW_TAG_member, name: "mem_total", scope: !101, file: !2, line: 29, baseType: !12, size: 64, align: 64, offset: 512)
!138 = !DIDerivedType(tag: DW_TAG_member, name: "allocs_total", scope: !101, file: !2, line: 30, baseType: !12, size: 64, align: 64, offset: 576)
!139 = !{}
!140 = !DILocation(line: 39, column: 1, scope: !97)
!141 = !DILocalVariable(name: "self", arg: 1, scope: !97, file: !2, line: 38, type: !100)
!142 = !DILocation(line: 38, column: 32, scope: !97)
!143 = !DILocalVariable(name: "allocator", arg: 2, scope: !97, file: !2, line: 38, type: !33)
!144 = !DILocation(line: 38, column: 49, scope: !97)
!145 = !DILocation(line: 40, column: 3, scope: !97)
!146 = !DILocation(line: 40, column: 31, scope: !97)
!147 = !DILocation(line: 41, column: 2, scope: !97)
!148 = !DILocation(line: 41, column: 16, scope: !97)
!149 = !DILocation(line: 43, column: 12, scope: !97)
!150 = distinct !DISubprogram(name: "free", linkageName: "std.core.mem.allocator.TrackingAllocator.free", scope: !2, file: !2, line: 47, type: !151, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!151 = !DISubroutineType(types: !152)
!152 = !{null, !100}
!153 = !DILocation(line: 48, column: 1, scope: !150)
!154 = !DILocalVariable(name: "self", arg: 1, scope: !150, file: !2, line: 47, type: !100)
!155 = !DILocation(line: 47, column: 32, scope: !150)
!156 = !DILocation(line: 49, column: 2, scope: !150)
!157 = !DILocation(line: 50, column: 3, scope: !150)
!158 = distinct !DISubprogram(name: "allocated", linkageName: "std.core.mem.allocator.TrackingAllocator.allocated", scope: !2, file: !2, line: 56, type: !159, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!159 = !DISubroutineType(types: !160)
!160 = !{!12, !100}
!161 = !DILocation(line: 56, column: 46, scope: !158)
!162 = !DILocalVariable(name: "self", arg: 1, scope: !158, file: !2, line: 56, type: !100)
!163 = !DILocation(line: 56, column: 36, scope: !158)
!164 = !DILocalVariable(name: "state", scope: !165, file: !2, line: 594, type: !167, align: 8)
!165 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !166, file: !166, line: 592, scopeLine: 592, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!166 = !DIFile(filename: "mem.c3", directory: "/usr/lib/c3c/lib/std/core")
!167 = !DIDerivedType(tag: DW_TAG_typedef, name: "PoolState", scope: !28, file: !28, line: 402, baseType: !48, align: 8)
!168 = !DILocation(line: 594, column: 12, scope: !165, inlinedAt: !161)
!169 = !DILocation(line: 594, column: 20, scope: !165, inlinedAt: !161)
!170 = !DILocalVariable(name: "allocated", scope: !171, file: !2, line: 58, type: !12, align: 8)
!171 = distinct !DILexicalBlock(scope: !158, file: !2, line: 57, column: 1)
!172 = !DILocation(line: 58, column: 6, scope: !171)
!173 = !DILocation(line: 58, column: 18, scope: !171)
!174 = !DILocation(line: 59, column: 25, scope: !175)
!175 = distinct !DILexicalBlock(scope: !171, file: !2, line: 59, column: 2)
!176 = !DILocalVariable(name: ".temp", scope: !175, file: !2, line: 59, type: !12, align: 8)
!177 = !DILocalVariable(name: "allocation", scope: !178, file: !2, line: 59, type: !179, align: 8)
!178 = distinct !DILexicalBlock(scope: !175, file: !2, line: 59, column: 45)
!179 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Allocation*", baseType: !122, size: 64, align: 64, dwarfAddressSpace: 0)
!180 = !DILocation(line: 59, column: 12, scope: !178)
!181 = !DILocation(line: 59, column: 25, scope: !178)
!182 = !DILocation(line: 59, column: 45, scope: !178)
!183 = !DILocation(line: 59, column: 58, scope: !178)
!184 = !DILocation(line: 60, column: 9, scope: !171)
!185 = !DILocation(line: 597, column: 23, scope: !186, inlinedAt: !161)
!186 = distinct !DILexicalBlock(scope: !165, file: !166, line: 596, column: 2)
!187 = !DILocation(line: 597, column: 3, scope: !186, inlinedAt: !161)
!188 = distinct !DISubprogram(name: "total_allocated", linkageName: "std.core.mem.allocator.TrackingAllocator.total_allocated", scope: !2, file: !2, line: 66, type: !159, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!189 = !DILocation(line: 66, column: 52, scope: !188)
!190 = !DILocalVariable(name: "self", arg: 1, scope: !188, file: !2, line: 66, type: !100)
!191 = !DILocation(line: 66, column: 42, scope: !188)
!192 = distinct !DISubprogram(name: "total_allocation_count", linkageName: "std.core.mem.allocator.TrackingAllocator.total_allocation_count", scope: !2, file: !2, line: 71, type: !159, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!193 = !DILocation(line: 71, column: 59, scope: !192)
!194 = !DILocalVariable(name: "self", arg: 1, scope: !192, file: !2, line: 71, type: !100)
!195 = !DILocation(line: 71, column: 49, scope: !192)
!196 = distinct !DISubprogram(name: "allocations_tlist", linkageName: "std.core.mem.allocator.TrackingAllocator.allocations_tlist", scope: !2, file: !2, line: 73, type: !197, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!197 = !DISubroutineType(types: !198)
!198 = !{!199, !100, !33}
!199 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocation[]", size: 128, align: 64, elements: !200, identifier: "Allocation[]")
!200 = !{!201, !202}
!201 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !199, baseType: !179, size: 64, align: 64)
!202 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !199, baseType: !12, size: 64, align: 64, offset: 64)
!203 = !DILocation(line: 74, column: 1, scope: !196)
!204 = !DILocalVariable(name: "self", arg: 1, scope: !196, file: !2, line: 73, type: !100)
!205 = !DILocation(line: 73, column: 53, scope: !196)
!206 = !DILocalVariable(name: "allocator", arg: 2, scope: !196, file: !2, line: 73, type: !33)
!207 = !DILocation(line: 73, column: 70, scope: !196)
!208 = !DILocation(line: 75, column: 9, scope: !196)
!209 = distinct !DISubprogram(name: "allocation_count", linkageName: "std.core.mem.allocator.TrackingAllocator.allocation_count", scope: !2, file: !2, line: 81, type: !159, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!210 = !DILocation(line: 81, column: 53, scope: !209)
!211 = !DILocalVariable(name: "self", arg: 1, scope: !209, file: !2, line: 81, type: !100)
!212 = !DILocation(line: 81, column: 43, scope: !209)
!213 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.TrackingAllocator.acquire", scope: !2, file: !2, line: 83, type: !214, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!214 = !DISubroutineType(types: !215)
!215 = !{!216, !218, !100, !8, !92, !8}
!216 = !DIDerivedType(tag: DW_TAG_typedef, name: "fault", baseType: !217)
!217 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!218 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void**", baseType: !36, size: 64, align: 64, dwarfAddressSpace: 0)
!219 = !DILocation(line: 84, column: 1, scope: !213)
!220 = !DILocalVariable(name: "self", arg: 1, scope: !213, file: !2, line: 83, type: !100)
!221 = !DILocation(line: 83, column: 37, scope: !213)
!222 = !DILocalVariable(name: "size", arg: 2, scope: !213, file: !2, line: 83, type: !12)
!223 = !DILocation(line: 83, column: 48, scope: !213)
!224 = !DILocalVariable(name: "init_type", arg: 3, scope: !213, file: !2, line: 83, type: !92)
!225 = !DILocation(line: 83, column: 68, scope: !213)
!226 = !DILocalVariable(name: "alignment", arg: 4, scope: !213, file: !2, line: 83, type: !12)
!227 = !DILocation(line: 83, column: 83, scope: !213)
!228 = !DILocalVariable(name: "data", scope: !213, file: !2, line: 85, type: !36, align: 8)
!229 = !DILocation(line: 85, column: 8, scope: !213)
!230 = !DILocation(line: 85, column: 15, scope: !213)
!231 = !DILocation(line: 85, column: 44, scope: !213)
!232 = !DILocation(line: 85, column: 50, scope: !213)
!233 = !DILocation(line: 85, column: 61, scope: !213)
!234 = !DILocation(line: 37, column: 12, scope: !213)
!235 = !DILocation(line: 973, column: 9, scope: !236, inlinedAt: !238)
!236 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!237 = !DIFile(filename: "math.c3", directory: "/usr/lib/c3c/lib/std/math")
!238 = !DILocation(line: 37, column: 26, scope: !213)
!239 = !DILocation(line: 973, column: 20, scope: !236, inlinedAt: !238)
!240 = !DILocation(line: 973, column: 25, scope: !236, inlinedAt: !238)
!241 = !DILocation(line: 86, column: 2, scope: !213)
!242 = !DILocalVariable(name: "bt", scope: !213, file: !2, line: 87, type: !127, align: 16)
!243 = !DILocation(line: 87, column: 23, scope: !213)
!244 = !DILocation(line: 88, column: 30, scope: !213)
!245 = !DILocation(line: 88, column: 2, scope: !213)
!246 = !DILocation(line: 89, column: 2, scope: !213)
!247 = !DILocation(line: 89, column: 15, scope: !213)
!248 = !DILocation(line: 89, column: 29, scope: !213)
!249 = !DILocation(line: 89, column: 35, scope: !213)
!250 = !DILocation(line: 89, column: 41, scope: !213)
!251 = !DILocation(line: 90, column: 2, scope: !213)
!252 = !DILocation(line: 90, column: 20, scope: !213)
!253 = !DILocation(line: 91, column: 9, scope: !213)
!254 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.TrackingAllocator.resize", scope: !2, file: !2, line: 94, type: !255, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!255 = !DISubroutineType(types: !256)
!256 = !{!216, !218, !100, !36, !8, !8}
!257 = !DILocation(line: 95, column: 1, scope: !254)
!258 = !DILocalVariable(name: "self", arg: 1, scope: !254, file: !2, line: 94, type: !100)
!259 = !DILocation(line: 94, column: 36, scope: !254)
!260 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !254, file: !2, line: 94, type: !36)
!261 = !DILocation(line: 94, column: 49, scope: !254)
!262 = !DILocalVariable(name: "size", arg: 3, scope: !254, file: !2, line: 94, type: !12)
!263 = !DILocation(line: 94, column: 66, scope: !254)
!264 = !DILocalVariable(name: "alignment", arg: 4, scope: !254, file: !2, line: 94, type: !12)
!265 = !DILocation(line: 94, column: 76, scope: !254)
!266 = !DILocalVariable(name: "data", scope: !254, file: !2, line: 96, type: !36, align: 8)
!267 = !DILocation(line: 96, column: 8, scope: !254)
!268 = !DILocation(line: 96, column: 15, scope: !254)
!269 = !DILocation(line: 96, column: 43, scope: !254)
!270 = !DILocation(line: 96, column: 56, scope: !254)
!271 = !DILocation(line: 96, column: 62, scope: !254)
!272 = !DILocation(line: 47, column: 12, scope: !254)
!273 = !DILocation(line: 973, column: 9, scope: !274, inlinedAt: !275)
!274 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!275 = !DILocation(line: 47, column: 26, scope: !254)
!276 = !DILocation(line: 973, column: 20, scope: !274, inlinedAt: !275)
!277 = !DILocation(line: 973, column: 25, scope: !274, inlinedAt: !275)
!278 = !DILocation(line: 97, column: 2, scope: !254)
!279 = !DILocation(line: 97, column: 18, scope: !254)
!280 = !DILocalVariable(name: "bt", scope: !254, file: !2, line: 98, type: !127, align: 16)
!281 = !DILocation(line: 98, column: 23, scope: !254)
!282 = !DILocation(line: 99, column: 30, scope: !254)
!283 = !DILocation(line: 99, column: 2, scope: !254)
!284 = !DILocation(line: 100, column: 2, scope: !254)
!285 = !DILocation(line: 100, column: 15, scope: !254)
!286 = !DILocation(line: 100, column: 29, scope: !254)
!287 = !DILocation(line: 100, column: 35, scope: !254)
!288 = !DILocation(line: 100, column: 41, scope: !254)
!289 = !DILocation(line: 101, column: 2, scope: !254)
!290 = !DILocation(line: 101, column: 20, scope: !254)
!291 = !DILocation(line: 102, column: 2, scope: !254)
!292 = !DILocation(line: 103, column: 9, scope: !254)
!293 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.TrackingAllocator.release", scope: !2, file: !2, line: 106, type: !294, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!294 = !DISubroutineType(types: !295)
!295 = !{null, !100, !36, !67}
!296 = !DILocation(line: 107, column: 1, scope: !293)
!297 = !DILocalVariable(name: "self", arg: 1, scope: !293, file: !2, line: 106, type: !100)
!298 = !DILocation(line: 106, column: 35, scope: !293)
!299 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !293, file: !2, line: 106, type: !36)
!300 = !DILocation(line: 106, column: 48, scope: !293)
!301 = !DILocalVariable(name: "is_aligned", arg: 3, scope: !293, file: !2, line: 106, type: !67)
!302 = !DILocation(line: 106, column: 66, scope: !293)
!303 = !DILocation(line: 108, column: 12, scope: !293)
!304 = !DILocation(line: 108, column: 28, scope: !293)
!305 = !DILocation(line: 110, column: 81, scope: !306, inlinedAt: !308)
!306 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !307, file: !307, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!307 = !DIFile(filename: "builtin.c3", directory: "/usr/lib/c3c/lib/std/core")
!308 = !DILocation(line: 110, column: 3, scope: !309)
!309 = distinct !DILexicalBlock(scope: !293, file: !2, line: 109, column: 2)
!310 = !DILocation(line: 206, column: 2, scope: !306, inlinedAt: !308)
!311 = !DILocation(line: 208, column: 2, scope: !306, inlinedAt: !308)
!312 = !DILocation(line: 112, column: 2, scope: !293)
!313 = !DILocation(line: 112, column: 31, scope: !293)
!314 = !DILocation(line: 112, column: 44, scope: !293)
!315 = distinct !DISubprogram(name: "clear", linkageName: "std.core.mem.allocator.TrackingAllocator.clear", scope: !2, file: !2, line: 115, type: !151, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!316 = !DILocation(line: 116, column: 1, scope: !315)
!317 = !DILocalVariable(name: "self", arg: 1, scope: !315, file: !2, line: 115, type: !100)
!318 = !DILocation(line: 115, column: 33, scope: !315)
!319 = !DILocation(line: 117, column: 2, scope: !315)
!320 = distinct !DISubprogram(name: "has_leaks", linkageName: "std.core.mem.allocator.TrackingAllocator.has_leaks", scope: !2, file: !2, line: 120, type: !321, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!321 = !DISubroutineType(types: !322)
!322 = !{!67, !100}
!323 = !DILocation(line: 121, column: 1, scope: !320)
!324 = !DILocalVariable(name: "self", arg: 1, scope: !320, file: !2, line: 120, type: !100)
!325 = !DILocation(line: 120, column: 37, scope: !320)
!326 = !DILocation(line: 122, column: 9, scope: !320)
!327 = distinct !DISubprogram(name: "print_report", linkageName: "std.core.mem.allocator.TrackingAllocator.print_report", scope: !2, file: !2, line: 125, type: !151, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!328 = !DILocation(line: 125, column: 50, scope: !327)
!329 = !DILocalVariable(name: "self", arg: 1, scope: !327, file: !2, line: 125, type: !100)
!330 = !DILocation(line: 125, column: 40, scope: !327)
!331 = !DILocation(line: 125, column: 69, scope: !327)
!332 = distinct !DISubprogram(name: "fprint_report", linkageName: "std.core.mem.allocator.TrackingAllocator.fprint_report", scope: !2, file: !2, line: 128, type: !333, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!333 = !DISubroutineType(types: !334)
!334 = !{!216, !36, !100, !335}
!335 = !DICompositeType(tag: DW_TAG_structure_type, name: "OutStream", size: 128, align: 64, elements: !336, identifier: "OutStream")
!336 = !{!337, !338}
!337 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !335, baseType: !36, size: 64, align: 64)
!338 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !335, baseType: !38, size: 64, align: 64, offset: 64)
!339 = !DILocation(line: 128, column: 67, scope: !332)
!340 = !DILocalVariable(name: "self", arg: 1, scope: !332, file: !2, line: 128, type: !100)
!341 = !DILocation(line: 128, column: 42, scope: !332)
!342 = !DILocalVariable(name: "out", arg: 2, scope: !332, file: !2, line: 128, type: !335)
!343 = !DILocation(line: 128, column: 59, scope: !332)
!344 = !DILocalVariable(name: "state", scope: !345, file: !2, line: 594, type: !167, align: 8)
!345 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !166, file: !166, line: 592, scopeLine: 592, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!346 = !DILocation(line: 594, column: 12, scope: !345, inlinedAt: !339)
!347 = !DILocation(line: 594, column: 20, scope: !345, inlinedAt: !339)
!348 = !DILocalVariable(name: "total", scope: !349, file: !2, line: 130, type: !12, align: 8)
!349 = distinct !DILexicalBlock(scope: !332, file: !2, line: 129, column: 1)
!350 = !DILocation(line: 130, column: 6, scope: !349)
!351 = !DILocation(line: 130, column: 14, scope: !349)
!352 = !DILocalVariable(name: "entries", scope: !349, file: !2, line: 131, type: !12, align: 8)
!353 = !DILocation(line: 131, column: 6, scope: !349)
!354 = !DILocation(line: 131, column: 16, scope: !349)
!355 = !DILocalVariable(name: "leaks", scope: !349, file: !2, line: 132, type: !67, align: 1)
!356 = !DILocation(line: 132, column: 7, scope: !349)
!357 = !DILocation(line: 132, column: 15, scope: !349)
!358 = !DILocalVariable(name: "allocs", scope: !349, file: !2, line: 134, type: !199, align: 8)
!359 = !DILocation(line: 134, column: 15, scope: !349)
!360 = !DILocation(line: 134, column: 24, scope: !349)
!361 = !DILocation(line: 135, column: 6, scope: !349)
!362 = !DILocation(line: 137, column: 8, scope: !363)
!363 = distinct !DILexicalBlock(scope: !349, file: !2, line: 136, column: 2)
!364 = !DILocation(line: 137, column: 15, scope: !363)
!365 = !DILocation(line: 137, column: 28, scope: !363)
!366 = !DILocalVariable(name: "len", scope: !367, file: !2, line: 172, type: !12, align: 8)
!367 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !368, file: !368, line: 170, scopeLine: 170, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!368 = !DIFile(filename: "io.c3", directory: "/usr/lib/c3c/lib/std/io")
!369 = !DILocation(line: 172, column: 6, scope: !367, inlinedAt: !370)
!370 = !DILocation(line: 139, column: 4, scope: !371)
!371 = distinct !DILexicalBlock(scope: !363, file: !2, line: 138, column: 3)
!372 = !DILocation(line: 116, column: 34, scope: !373, inlinedAt: !374)
!373 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !368, file: !368, line: 112, scopeLine: 112, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!374 = !DILocation(line: 172, column: 12, scope: !367, inlinedAt: !370)
!375 = !DILocation(line: 116, column: 24, scope: !373, inlinedAt: !374)
!376 = !DILocation(line: 173, column: 17, scope: !367, inlinedAt: !370)
!377 = !DILocation(line: 173, column: 2, scope: !367, inlinedAt: !370)
!378 = !DILocation(line: 176, column: 9, scope: !367, inlinedAt: !370)
!379 = !DILocation(line: 176, column: 20, scope: !367, inlinedAt: !370)
!380 = !DILocation(line: 180, column: 9, scope: !367, inlinedAt: !370)
!381 = !DILocation(line: 597, column: 23, scope: !382, inlinedAt: !339)
!382 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!383 = !DILocation(line: 597, column: 3, scope: !382, inlinedAt: !339)
!384 = !DILocalVariable(name: "len", scope: !385, file: !2, line: 172, type: !12, align: 8)
!385 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !368, file: !368, line: 170, scopeLine: 170, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!386 = !DILocation(line: 172, column: 6, scope: !385, inlinedAt: !387)
!387 = !DILocation(line: 140, column: 4, scope: !371)
!388 = !DILocation(line: 116, column: 34, scope: !389, inlinedAt: !390)
!389 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !368, file: !368, line: 112, scopeLine: 112, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!390 = !DILocation(line: 172, column: 12, scope: !385, inlinedAt: !387)
!391 = !DILocation(line: 116, column: 24, scope: !389, inlinedAt: !390)
!392 = !DILocation(line: 173, column: 17, scope: !385, inlinedAt: !387)
!393 = !DILocation(line: 173, column: 2, scope: !385, inlinedAt: !387)
!394 = !DILocation(line: 176, column: 9, scope: !385, inlinedAt: !387)
!395 = !DILocation(line: 176, column: 20, scope: !385, inlinedAt: !387)
!396 = !DILocation(line: 180, column: 9, scope: !385, inlinedAt: !387)
!397 = !DILocation(line: 597, column: 23, scope: !398, inlinedAt: !339)
!398 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!399 = !DILocation(line: 597, column: 3, scope: !398, inlinedAt: !339)
!400 = !DILocation(line: 141, column: 30, scope: !401)
!401 = distinct !DILexicalBlock(scope: !371, file: !2, line: 141, column: 4)
!402 = !DILocalVariable(name: ".temp", scope: !401, file: !2, line: 141, type: !12, align: 8)
!403 = !DILocation(line: 141, column: 13, scope: !401)
!404 = !DILocalVariable(name: "i", scope: !405, file: !2, line: 141, type: !12, align: 8)
!405 = distinct !DILexicalBlock(scope: !401, file: !2, line: 142, column: 4)
!406 = !DILocation(line: 141, column: 13, scope: !405)
!407 = !DILocalVariable(name: "allocation", scope: !405, file: !2, line: 141, type: !179, align: 8)
!408 = !DILocation(line: 141, column: 17, scope: !405)
!409 = !DILocation(line: 141, column: 30, scope: !405)
!410 = !DILocation(line: 143, column: 5, scope: !411)
!411 = distinct !DILexicalBlock(scope: !405, file: !2, line: 142, column: 4)
!412 = !DILocation(line: 144, column: 5, scope: !411)
!413 = !DILocation(line: 144, column: 14, scope: !411)
!414 = !DILocation(line: 145, column: 36, scope: !411)
!415 = !DILocation(line: 145, column: 53, scope: !411)
!416 = !DILocation(line: 145, column: 5, scope: !411)
!417 = !DILocation(line: 597, column: 23, scope: !418, inlinedAt: !339)
!418 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!419 = !DILocation(line: 597, column: 3, scope: !418, inlinedAt: !339)
!420 = !DILocalVariable(name: "len", scope: !421, file: !2, line: 172, type: !12, align: 8)
!421 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !368, file: !368, line: 170, scopeLine: 170, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!422 = !DILocation(line: 172, column: 6, scope: !421, inlinedAt: !423)
!423 = !DILocation(line: 147, column: 4, scope: !371)
!424 = !DILocation(line: 116, column: 34, scope: !425, inlinedAt: !426)
!425 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !368, file: !368, line: 112, scopeLine: 112, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!426 = !DILocation(line: 172, column: 12, scope: !421, inlinedAt: !423)
!427 = !DILocation(line: 116, column: 24, scope: !425, inlinedAt: !426)
!428 = !DILocation(line: 173, column: 17, scope: !421, inlinedAt: !423)
!429 = !DILocation(line: 173, column: 2, scope: !421, inlinedAt: !423)
!430 = !DILocation(line: 176, column: 9, scope: !421, inlinedAt: !423)
!431 = !DILocation(line: 176, column: 20, scope: !421, inlinedAt: !423)
!432 = !DILocation(line: 180, column: 9, scope: !421, inlinedAt: !423)
!433 = !DILocation(line: 597, column: 23, scope: !434, inlinedAt: !339)
!434 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!435 = !DILocation(line: 597, column: 3, scope: !434, inlinedAt: !339)
!436 = !DILocalVariable(name: "len", scope: !437, file: !2, line: 172, type: !12, align: 8)
!437 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !368, file: !368, line: 170, scopeLine: 170, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!438 = !DILocation(line: 172, column: 6, scope: !437, inlinedAt: !439)
!439 = !DILocation(line: 152, column: 4, scope: !440)
!440 = distinct !DILexicalBlock(scope: !363, file: !2, line: 151, column: 3)
!441 = !DILocation(line: 116, column: 34, scope: !442, inlinedAt: !443)
!442 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !368, file: !368, line: 112, scopeLine: 112, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!443 = !DILocation(line: 172, column: 12, scope: !437, inlinedAt: !439)
!444 = !DILocation(line: 116, column: 24, scope: !442, inlinedAt: !443)
!445 = !DILocation(line: 173, column: 17, scope: !437, inlinedAt: !439)
!446 = !DILocation(line: 173, column: 2, scope: !437, inlinedAt: !439)
!447 = !DILocation(line: 176, column: 9, scope: !437, inlinedAt: !439)
!448 = !DILocation(line: 176, column: 20, scope: !437, inlinedAt: !439)
!449 = !DILocation(line: 180, column: 9, scope: !437, inlinedAt: !439)
!450 = !DILocation(line: 597, column: 23, scope: !451, inlinedAt: !339)
!451 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!452 = !DILocation(line: 597, column: 3, scope: !451, inlinedAt: !339)
!453 = !DILocalVariable(name: "len", scope: !454, file: !2, line: 172, type: !12, align: 8)
!454 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !368, file: !368, line: 170, scopeLine: 170, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!455 = !DILocation(line: 172, column: 6, scope: !454, inlinedAt: !456)
!456 = !DILocation(line: 153, column: 4, scope: !440)
!457 = !DILocation(line: 116, column: 34, scope: !458, inlinedAt: !459)
!458 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !368, file: !368, line: 112, scopeLine: 112, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!459 = !DILocation(line: 172, column: 12, scope: !454, inlinedAt: !456)
!460 = !DILocation(line: 116, column: 24, scope: !458, inlinedAt: !459)
!461 = !DILocation(line: 173, column: 17, scope: !454, inlinedAt: !456)
!462 = !DILocation(line: 173, column: 2, scope: !454, inlinedAt: !456)
!463 = !DILocation(line: 176, column: 9, scope: !454, inlinedAt: !456)
!464 = !DILocation(line: 176, column: 20, scope: !454, inlinedAt: !456)
!465 = !DILocation(line: 180, column: 9, scope: !454, inlinedAt: !456)
!466 = !DILocation(line: 597, column: 23, scope: !467, inlinedAt: !339)
!467 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!468 = !DILocation(line: 597, column: 3, scope: !467, inlinedAt: !339)
!469 = !DILocation(line: 154, column: 30, scope: !470)
!470 = distinct !DILexicalBlock(scope: !440, file: !2, line: 154, column: 4)
!471 = !DILocalVariable(name: ".temp", scope: !470, file: !2, line: 154, type: !12, align: 8)
!472 = !DILocation(line: 154, column: 13, scope: !470)
!473 = !DILocalVariable(name: "i", scope: !474, file: !2, line: 154, type: !12, align: 8)
!474 = distinct !DILexicalBlock(scope: !470, file: !2, line: 155, column: 4)
!475 = !DILocation(line: 154, column: 13, scope: !474)
!476 = !DILocalVariable(name: "allocation", scope: !474, file: !2, line: 154, type: !179, align: 8)
!477 = !DILocation(line: 154, column: 17, scope: !474)
!478 = !DILocation(line: 154, column: 30, scope: !474)
!479 = !DILocation(line: 156, column: 5, scope: !480)
!480 = distinct !DILexicalBlock(scope: !474, file: !2, line: 155, column: 4)
!481 = !DILocation(line: 157, column: 5, scope: !480)
!482 = !DILocation(line: 157, column: 14, scope: !480)
!483 = !DILocalVariable(name: "backtraces", scope: !480, file: !2, line: 158, type: !484, align: 8)
!484 = !DIDerivedType(tag: DW_TAG_typedef, name: "BacktraceList", scope: !2, file: !2, line: 88, baseType: !485, align: 8)
!485 = !DICompositeType(tag: DW_TAG_structure_type, name: "List", scope: !2, file: !2, line: 18, size: 320, align: 64, elements: !486, identifier: "std_collections_list$std.os.backtrace.Backtrace$.List")
!486 = !{!487, !488, !489, !490}
!487 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !485, file: !2, line: 20, baseType: !12, size: 64, align: 64)
!488 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !485, file: !2, line: 21, baseType: !12, size: 64, align: 64, offset: 64)
!489 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !485, file: !2, line: 22, baseType: !33, size: 128, align: 64, offset: 128)
!490 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !485, file: !2, line: 23, baseType: !491, size: 64, align: 64, offset: 256)
!491 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Type*", baseType: !492, size: 64, align: 64, dwarfAddressSpace: 0)
!492 = !DIDerivedType(tag: DW_TAG_typedef, name: "Type", scope: !2, file: !2, line: 88, baseType: !493, align: 8)
!493 = !DICompositeType(tag: DW_TAG_structure_type, name: "Backtrace", scope: !2, file: !2, line: 9, size: 704, align: 64, elements: !494, identifier: "std.os.backtrace.Backtrace")
!494 = !{!495, !496, !503, !504, !505, !506, !507}
!495 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !493, file: !2, line: 11, baseType: !25, size: 64, align: 64)
!496 = !DIDerivedType(tag: DW_TAG_member, name: "function", scope: !493, file: !2, line: 12, baseType: !497, size: 128, align: 64, offset: 64)
!497 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !498)
!498 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !499, identifier: "char[]")
!499 = !{!500, !502}
!500 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !498, baseType: !501, size: 64, align: 64)
!501 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !62, size: 64, align: 64, dwarfAddressSpace: 0)
!502 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !498, baseType: !12, size: 64, align: 64, offset: 64)
!503 = !DIDerivedType(tag: DW_TAG_member, name: "object_file", scope: !493, file: !2, line: 13, baseType: !497, size: 128, align: 64, offset: 192)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !493, file: !2, line: 14, baseType: !497, size: 128, align: 64, offset: 320)
!505 = !DIDerivedType(tag: DW_TAG_member, name: "line", scope: !493, file: !2, line: 15, baseType: !117, size: 32, align: 32, offset: 448)
!506 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !493, file: !2, line: 16, baseType: !33, size: 128, align: 64, offset: 512)
!507 = !DIDerivedType(tag: DW_TAG_member, name: "is_inline", scope: !493, file: !2, line: 17, baseType: !67, size: 8, align: 8, offset: 640)
!508 = !DILocation(line: 158, column: 19, scope: !480)
!509 = !DILocalVariable(name: "trace", scope: !480, file: !2, line: 159, type: !493, align: 8)
!510 = !DILocation(line: 159, column: 15, scope: !480)
!511 = !DILocation(line: 159, column: 23, scope: !480)
!512 = !DILocation(line: 160, column: 9, scope: !480)
!513 = !DILocation(line: 160, column: 30, scope: !480)
!514 = !DILocalVariable(name: "self", scope: !515, file: !2, line: 162, type: !516, align: 8)
!515 = distinct !DILexicalBlock(scope: !480, file: !2, line: 161, column: 5)
!516 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "List*", baseType: !485, size: 64, align: 64, dwarfAddressSpace: 0)
!517 = !DILocation(line: 162, column: 14, scope: !515)
!518 = !DILocation(line: 162, column: 51, scope: !515)
!519 = !DILocation(line: 276, column: 19, scope: !515)
!520 = !DILocation(line: 162, column: 88, scope: !515)
!521 = !DILocation(line: 164, column: 9, scope: !480)
!522 = !DILocation(line: 164, column: 37, scope: !480)
!523 = !DILocation(line: 165, column: 44, scope: !480)
!524 = !DILocation(line: 166, column: 6, scope: !480)
!525 = !DILocation(line: 166, column: 22, scope: !480)
!526 = !DILocation(line: 166, column: 43, scope: !480)
!527 = !DILocation(line: 166, column: 60, scope: !480)
!528 = !DILocation(line: 167, column: 6, scope: !480)
!529 = !DILocation(line: 167, column: 19, scope: !480)
!530 = !DILocation(line: 167, column: 32, scope: !480)
!531 = !DILocation(line: 165, column: 5, scope: !480)
!532 = !DILocation(line: 597, column: 23, scope: !533, inlinedAt: !339)
!533 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!534 = !DILocation(line: 597, column: 3, scope: !533, inlinedAt: !339)
!535 = !DILocalVariable(name: "len", scope: !536, file: !2, line: 172, type: !12, align: 8)
!536 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !368, file: !368, line: 170, scopeLine: 170, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!537 = !DILocation(line: 172, column: 6, scope: !536, inlinedAt: !538)
!538 = !DILocation(line: 169, column: 4, scope: !440)
!539 = !DILocation(line: 116, column: 34, scope: !540, inlinedAt: !541)
!540 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !368, file: !368, line: 112, scopeLine: 112, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!541 = !DILocation(line: 172, column: 12, scope: !536, inlinedAt: !538)
!542 = !DILocation(line: 116, column: 24, scope: !540, inlinedAt: !541)
!543 = !DILocation(line: 173, column: 17, scope: !536, inlinedAt: !538)
!544 = !DILocation(line: 173, column: 2, scope: !536, inlinedAt: !538)
!545 = !DILocation(line: 176, column: 9, scope: !536, inlinedAt: !538)
!546 = !DILocation(line: 176, column: 20, scope: !536, inlinedAt: !538)
!547 = !DILocation(line: 180, column: 9, scope: !536, inlinedAt: !538)
!548 = !DILocation(line: 597, column: 23, scope: !549, inlinedAt: !339)
!549 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!550 = !DILocation(line: 597, column: 3, scope: !549, inlinedAt: !339)
!551 = !DILocalVariable(name: "len", scope: !552, file: !2, line: 172, type: !12, align: 8)
!552 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !368, file: !368, line: 170, scopeLine: 170, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!553 = !DILocation(line: 172, column: 6, scope: !552, inlinedAt: !554)
!554 = !DILocation(line: 174, column: 3, scope: !555)
!555 = distinct !DILexicalBlock(scope: !349, file: !2, line: 173, column: 2)
!556 = !DILocation(line: 116, column: 34, scope: !557, inlinedAt: !558)
!557 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !368, file: !368, line: 112, scopeLine: 112, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!558 = !DILocation(line: 172, column: 12, scope: !552, inlinedAt: !554)
!559 = !DILocation(line: 116, column: 24, scope: !557, inlinedAt: !558)
!560 = !DILocation(line: 173, column: 17, scope: !552, inlinedAt: !554)
!561 = !DILocation(line: 173, column: 2, scope: !552, inlinedAt: !554)
!562 = !DILocation(line: 176, column: 9, scope: !552, inlinedAt: !554)
!563 = !DILocation(line: 176, column: 20, scope: !552, inlinedAt: !554)
!564 = !DILocation(line: 180, column: 9, scope: !552, inlinedAt: !554)
!565 = !DILocation(line: 597, column: 23, scope: !566, inlinedAt: !339)
!566 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!567 = !DILocation(line: 597, column: 3, scope: !566, inlinedAt: !339)
!568 = !DILocation(line: 176, column: 73, scope: !349)
!569 = !DILocation(line: 176, column: 2, scope: !349)
!570 = !DILocation(line: 597, column: 23, scope: !571, inlinedAt: !339)
!571 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!572 = !DILocation(line: 597, column: 3, scope: !571, inlinedAt: !339)
!573 = !DILocation(line: 177, column: 73, scope: !349)
!574 = !DILocation(line: 177, column: 2, scope: !349)
!575 = !DILocation(line: 597, column: 23, scope: !576, inlinedAt: !339)
!576 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!577 = !DILocation(line: 597, column: 3, scope: !576, inlinedAt: !339)
!578 = !DILocation(line: 178, column: 73, scope: !349)
!579 = !DILocation(line: 178, column: 2, scope: !349)
!580 = !DILocation(line: 597, column: 23, scope: !581, inlinedAt: !339)
!581 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!582 = !DILocation(line: 597, column: 3, scope: !581, inlinedAt: !339)
!583 = !DILocation(line: 179, column: 73, scope: !349)
!584 = !DILocation(line: 179, column: 2, scope: !349)
!585 = !DILocation(line: 597, column: 23, scope: !586, inlinedAt: !339)
!586 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!587 = !DILocation(line: 597, column: 3, scope: !586, inlinedAt: !339)
!588 = !DILocation(line: 180, column: 6, scope: !349)
!589 = !DILocalVariable(name: "len", scope: !590, file: !2, line: 172, type: !12, align: 8)
!590 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !368, file: !368, line: 170, scopeLine: 170, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!591 = !DILocation(line: 172, column: 6, scope: !590, inlinedAt: !592)
!592 = !DILocation(line: 182, column: 3, scope: !593)
!593 = distinct !DILexicalBlock(scope: !349, file: !2, line: 181, column: 2)
!594 = !DILocation(line: 116, column: 34, scope: !595, inlinedAt: !596)
!595 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !368, file: !368, line: 112, scopeLine: 112, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!596 = !DILocation(line: 172, column: 12, scope: !590, inlinedAt: !592)
!597 = !DILocation(line: 116, column: 24, scope: !595, inlinedAt: !596)
!598 = !DILocation(line: 173, column: 17, scope: !590, inlinedAt: !592)
!599 = !DILocation(line: 173, column: 2, scope: !590, inlinedAt: !592)
!600 = !DILocation(line: 176, column: 9, scope: !590, inlinedAt: !592)
!601 = !DILocation(line: 176, column: 20, scope: !590, inlinedAt: !592)
!602 = !DILocation(line: 180, column: 9, scope: !590, inlinedAt: !592)
!603 = !DILocation(line: 597, column: 23, scope: !604, inlinedAt: !339)
!604 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!605 = !DILocation(line: 597, column: 3, scope: !604, inlinedAt: !339)
!606 = !DILocalVariable(name: "len", scope: !607, file: !2, line: 172, type: !12, align: 8)
!607 = distinct !DISubprogram(name: "fprintn", linkageName: "fprintn", scope: !368, file: !368, line: 170, scopeLine: 170, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!608 = !DILocation(line: 172, column: 6, scope: !607, inlinedAt: !609)
!609 = !DILocation(line: 183, column: 3, scope: !593)
!610 = !DILocation(line: 116, column: 34, scope: !611, inlinedAt: !612)
!611 = distinct !DISubprogram(name: "fprint", linkageName: "fprint", scope: !368, file: !368, line: 112, scopeLine: 112, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!612 = !DILocation(line: 172, column: 12, scope: !607, inlinedAt: !609)
!613 = !DILocation(line: 116, column: 24, scope: !611, inlinedAt: !612)
!614 = !DILocation(line: 173, column: 17, scope: !607, inlinedAt: !609)
!615 = !DILocation(line: 173, column: 2, scope: !607, inlinedAt: !609)
!616 = !DILocation(line: 176, column: 9, scope: !607, inlinedAt: !609)
!617 = !DILocation(line: 176, column: 20, scope: !607, inlinedAt: !609)
!618 = !DILocation(line: 180, column: 9, scope: !607, inlinedAt: !609)
!619 = !DILocation(line: 597, column: 23, scope: !620, inlinedAt: !339)
!620 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!621 = !DILocation(line: 597, column: 3, scope: !620, inlinedAt: !339)
!622 = !DILocation(line: 184, column: 29, scope: !623)
!623 = distinct !DILexicalBlock(scope: !593, file: !2, line: 184, column: 3)
!624 = !DILocalVariable(name: ".temp", scope: !623, file: !2, line: 184, type: !12, align: 8)
!625 = !DILocation(line: 184, column: 12, scope: !623)
!626 = !DILocalVariable(name: "i", scope: !627, file: !2, line: 184, type: !12, align: 8)
!627 = distinct !DILexicalBlock(scope: !623, file: !2, line: 185, column: 3)
!628 = !DILocation(line: 184, column: 12, scope: !627)
!629 = !DILocalVariable(name: "allocation", scope: !627, file: !2, line: 184, type: !179, align: 8)
!630 = !DILocation(line: 184, column: 16, scope: !627)
!631 = !DILocation(line: 184, column: 29, scope: !627)
!632 = !DILocation(line: 186, column: 9, scope: !633)
!633 = distinct !DILexicalBlock(scope: !627, file: !2, line: 185, column: 3)
!634 = !DILocation(line: 186, column: 30, scope: !633)
!635 = !DILocation(line: 188, column: 77, scope: !636)
!636 = distinct !DILexicalBlock(scope: !633, file: !2, line: 187, column: 4)
!637 = !DILocation(line: 188, column: 84, scope: !636)
!638 = !DILocation(line: 188, column: 5, scope: !636)
!639 = !DILocation(line: 597, column: 23, scope: !640, inlinedAt: !339)
!640 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!641 = !DILocation(line: 597, column: 3, scope: !640, inlinedAt: !339)
!642 = !DILocation(line: 189, column: 5, scope: !636)
!643 = !DILocalVariable(name: "backtraces", scope: !633, file: !2, line: 191, type: !484, align: 8)
!644 = !DILocation(line: 191, column: 18, scope: !633)
!645 = !DILocalVariable(name: "end", scope: !633, file: !2, line: 192, type: !12, align: 8)
!646 = !DILocation(line: 192, column: 8, scope: !633)
!647 = !DILocation(line: 192, column: 14, scope: !633)
!648 = !DILocation(line: 193, column: 22, scope: !649)
!649 = distinct !DILexicalBlock(scope: !633, file: !2, line: 193, column: 4)
!650 = !DILocalVariable(name: ".temp", scope: !649, file: !2, line: 193, type: !12, align: 8)
!651 = !DILocation(line: 193, column: 13, scope: !649)
!652 = !DILocalVariable(name: "j", scope: !653, file: !2, line: 193, type: !12, align: 8)
!653 = distinct !DILexicalBlock(scope: !649, file: !2, line: 194, column: 4)
!654 = !DILocation(line: 193, column: 13, scope: !653)
!655 = !DILocalVariable(name: "val", scope: !653, file: !2, line: 193, type: !36, align: 8)
!656 = !DILocation(line: 193, column: 16, scope: !653)
!657 = !DILocation(line: 193, column: 22, scope: !653)
!658 = !DILocation(line: 195, column: 9, scope: !659)
!659 = distinct !DILexicalBlock(scope: !653, file: !2, line: 194, column: 4)
!660 = !DILocation(line: 197, column: 12, scope: !661)
!661 = distinct !DILexicalBlock(scope: !659, file: !2, line: 196, column: 5)
!662 = !DILocation(line: 198, column: 6, scope: !661)
!663 = !DILocalVariable(name: "list", scope: !633, file: !2, line: 201, type: !484, align: 8)
!664 = !DILocation(line: 201, column: 18, scope: !633)
!665 = !DILocation(line: 201, column: 62, scope: !633)
!666 = !DILocation(line: 201, column: 87, scope: !633)
!667 = !DILocation(line: 201, column: 25, scope: !633)
!668 = !DILocation(line: 597, column: 23, scope: !669, inlinedAt: !339)
!669 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!670 = !DILocation(line: 597, column: 3, scope: !669, inlinedAt: !339)
!671 = !DILocation(line: 202, column: 52, scope: !633)
!672 = !DILocation(line: 202, column: 59, scope: !633)
!673 = !DILocation(line: 202, column: 4, scope: !633)
!674 = !DILocation(line: 597, column: 23, scope: !675, inlinedAt: !339)
!675 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!676 = !DILocation(line: 597, column: 3, scope: !675, inlinedAt: !339)
!677 = !DILocation(line: 203, column: 21, scope: !678)
!678 = distinct !DILexicalBlock(scope: !633, file: !2, line: 203, column: 4)
!679 = !DILocalVariable(name: ".temp", scope: !678, file: !2, line: 203, type: !12, align: 8)
!680 = !DILocalVariable(name: "trace", scope: !681, file: !2, line: 203, type: !492, align: 8)
!681 = distinct !DILexicalBlock(scope: !678, file: !2, line: 204, column: 4)
!682 = !DILocation(line: 203, column: 13, scope: !681)
!683 = !DILocation(line: 378, column: 26, scope: !684, inlinedAt: !682)
!684 = distinct !DILexicalBlock(scope: !686, file: !685, line: 379, column: 1)
!685 = !DIFile(filename: "list.c3", directory: "/usr/lib/c3c/lib/std/collections")
!686 = distinct !DISubprogram(name: "@item_at", linkageName: "@item_at", scope: !685, file: !685, line: 378, scopeLine: 378, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!687 = !DILocation(line: 376, column: 11, scope: !684, inlinedAt: !682)
!688 = !DILocation(line: 376, column: 19, scope: !684, inlinedAt: !682)
!689 = !DILocation(line: 203, column: 13, scope: !684, inlinedAt: !682)
!690 = !DILocation(line: 380, column: 9, scope: !686, inlinedAt: !682)
!691 = !DILocation(line: 380, column: 22, scope: !686, inlinedAt: !682)
!692 = !DILocation(line: 205, column: 9, scope: !693)
!693 = distinct !DILexicalBlock(scope: !681, file: !2, line: 204, column: 4)
!694 = !DILocation(line: 207, column: 44, scope: !695)
!695 = distinct !DILexicalBlock(scope: !693, file: !2, line: 206, column: 5)
!696 = !DILocation(line: 207, column: 60, scope: !695)
!697 = !DILocation(line: 207, column: 72, scope: !695)
!698 = !DILocation(line: 207, column: 6, scope: !695)
!699 = !DILocation(line: 208, column: 6, scope: !695)
!700 = !DILocation(line: 210, column: 9, scope: !693)
!701 = !DILocation(line: 212, column: 6, scope: !702)
!702 = distinct !DILexicalBlock(scope: !693, file: !2, line: 211, column: 5)
!703 = !DILocation(line: 213, column: 6, scope: !702)
!704 = !DILocation(line: 215, column: 53, scope: !693)
!705 = !DILocation(line: 215, column: 5, scope: !693)
!706 = !DILocation(line: 597, column: 23, scope: !707, inlinedAt: !339)
!707 = distinct !DILexicalBlock(scope: !345, file: !166, line: 596, column: 2)
!708 = !DILocation(line: 597, column: 3, scope: !707, inlinedAt: !339)
!709 = distinct !DISubprogram(name: "init", linkageName: "std.core.mem.allocator.SimpleHeapAllocator.init", scope: !710, file: !710, line: 25, type: !711, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!710 = !DIFile(filename: "heap_allocator.c3", directory: "/usr/lib/c3c/lib/std/core/allocators")
!711 = !DISubroutineType(types: !712)
!712 = !{null, !713, !718}
!713 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "SimpleHeapAllocator*", baseType: !714, size: 64, align: 64, dwarfAddressSpace: 0)
!714 = !DICompositeType(tag: DW_TAG_structure_type, name: "SimpleHeapAllocator", scope: !710, file: !710, line: 15, size: 128, align: 64, elements: !715, identifier: "std.core.mem.allocator.SimpleHeapAllocator")
!715 = !{!716, !722}
!716 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_fn", scope: !714, file: !710, line: 17, baseType: !717, size: 64, align: 64)
!717 = !DIDerivedType(tag: DW_TAG_typedef, name: "MemoryAllocFn", scope: !710, file: !710, line: 63, baseType: !718, align: 8)
!718 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "MemoryAllocFn", baseType: !719, size: 64, align: 64, dwarfAddressSpace: 0)
!719 = !DISubroutineType(types: !720)
!720 = !{!216, !721, !8}
!721 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char[]*", baseType: !498, size: 64, align: 64, dwarfAddressSpace: 0)
!722 = !DIDerivedType(tag: DW_TAG_member, name: "free_list", scope: !714, file: !710, line: 18, baseType: !723, size: 64, align: 64, offset: 64)
!723 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Header*", baseType: !724, size: 64, align: 64, dwarfAddressSpace: 0)
!724 = !DICompositeType(tag: DW_TAG_union_type, name: "Header", scope: !710, file: !710, line: 208, size: 128, align: 64, elements: !725, identifier: "std.core.mem.allocator.Header")
!725 = !{!726, !731}
!726 = !DIDerivedType(tag: DW_TAG_member, scope: !724, file: !710, line: 210, baseType: !727, size: 128, align: 64)
!727 = !DICompositeType(tag: DW_TAG_structure_type, name: "$anon", scope: !724, file: !710, line: 210, size: 128, align: 64, elements: !728)
!728 = !{!729, !730}
!729 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !727, file: !710, line: 212, baseType: !723, size: 64, align: 64)
!730 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !727, file: !710, line: 213, baseType: !12, size: 64, align: 64, offset: 64)
!731 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !724, file: !710, line: 215, baseType: !12, size: 64, align: 64)
!732 = !DILocation(line: 26, column: 1, scope: !709)
!733 = !DILocalVariable(name: "self", arg: 1, scope: !709, file: !710, line: 25, type: !713)
!734 = !DILocation(line: 25, column: 34, scope: !709)
!735 = !DILocalVariable(name: "allocator", arg: 2, scope: !709, file: !710, line: 25, type: !717)
!736 = !DILocation(line: 25, column: 55, scope: !709)
!737 = !DILocation(line: 22, column: 11, scope: !738)
!738 = distinct !DILexicalBlock(scope: !709, file: !710, line: 26, column: 1)
!739 = !DILocation(line: 23, column: 12, scope: !738)
!740 = !DILocation(line: 23, column: 11, scope: !738)
!741 = !DILocation(line: 27, column: 2, scope: !709)
!742 = !DILocation(line: 27, column: 18, scope: !709)
!743 = !DILocation(line: 28, column: 2, scope: !709)
!744 = !DILocation(line: 28, column: 19, scope: !709)
!745 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.SimpleHeapAllocator.acquire", scope: !710, file: !710, line: 31, type: !746, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!746 = !DISubroutineType(types: !747)
!747 = !{!216, !218, !713, !8, !92, !8}
!748 = !DILocation(line: 32, column: 1, scope: !745)
!749 = !DILocalVariable(name: "self", arg: 1, scope: !745, file: !710, line: 31, type: !713)
!750 = !DILocation(line: 31, column: 39, scope: !745)
!751 = !DILocalVariable(name: "size", arg: 2, scope: !745, file: !710, line: 31, type: !12)
!752 = !DILocation(line: 31, column: 50, scope: !745)
!753 = !DILocalVariable(name: "init_type", arg: 3, scope: !745, file: !710, line: 31, type: !92)
!754 = !DILocation(line: 31, column: 70, scope: !745)
!755 = !DILocalVariable(name: "alignment", arg: 4, scope: !745, file: !710, line: 31, type: !12)
!756 = !DILocation(line: 31, column: 85, scope: !745)
!757 = !DILocation(line: 33, column: 6, scope: !745)
!758 = !DILocation(line: 35, column: 10, scope: !759)
!759 = distinct !DILexicalBlock(scope: !745, file: !710, line: 34, column: 2)
!760 = !DILocation(line: 341, column: 11, scope: !761, inlinedAt: !763)
!761 = distinct !DILexicalBlock(scope: !762, file: !28, line: 346, column: 1)
!762 = distinct !DISubprogram(name: "@aligned_alloc", linkageName: "@aligned_alloc", scope: !28, file: !28, line: 345, scopeLine: 345, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!763 = !DILocation(line: 35, column: 26, scope: !759)
!764 = !DILocation(line: 35, column: 26, scope: !761, inlinedAt: !763)
!765 = !DILocation(line: 342, column: 11, scope: !761, inlinedAt: !763)
!766 = !DILocation(line: 343, column: 11, scope: !761, inlinedAt: !763)
!767 = !DILocation(line: 347, column: 6, scope: !762, inlinedAt: !763)
!768 = !DILocation(line: 347, column: 45, scope: !762, inlinedAt: !763)
!769 = !DILocalVariable(name: "header", scope: !762, file: !710, line: 348, type: !12, align: 8)
!770 = !DILocation(line: 348, column: 6, scope: !762, inlinedAt: !763)
!771 = !DILocation(line: 348, column: 37, scope: !762, inlinedAt: !763)
!772 = !DILocation(line: 348, column: 15, scope: !762, inlinedAt: !763)
!773 = !DILocalVariable(name: "alignsize", scope: !762, file: !710, line: 349, type: !12, align: 8)
!774 = !DILocation(line: 349, column: 6, scope: !762, inlinedAt: !763)
!775 = !DILocation(line: 349, column: 18, scope: !762, inlinedAt: !763)
!776 = !DILocation(line: 349, column: 26, scope: !762, inlinedAt: !763)
!777 = !DILocalVariable(name: "data", scope: !762, file: !710, line: 351, type: !36, align: 8)
!778 = !DILocation(line: 351, column: 9, scope: !762, inlinedAt: !763)
!779 = !DILocation(line: 351, column: 16, scope: !762, inlinedAt: !763)
!780 = !DILocalVariable(name: "mem", scope: !762, file: !710, line: 355, type: !36, align: 8)
!781 = !DILocation(line: 355, column: 8, scope: !762, inlinedAt: !763)
!782 = !DILocation(line: 355, column: 35, scope: !762, inlinedAt: !763)
!783 = !DILocation(line: 355, column: 42, scope: !762, inlinedAt: !763)
!784 = !DILocation(line: 290, column: 37, scope: !785, inlinedAt: !786)
!785 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !166, file: !166, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!786 = !DILocation(line: 355, column: 14, scope: !762, inlinedAt: !763)
!787 = !DILocation(line: 290, column: 48, scope: !785, inlinedAt: !786)
!788 = !DILocation(line: 973, column: 9, scope: !789, inlinedAt: !790)
!789 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!790 = !DILocation(line: 290, column: 22, scope: !785, inlinedAt: !786)
!791 = !DILocation(line: 973, column: 20, scope: !789, inlinedAt: !790)
!792 = !DILocation(line: 973, column: 25, scope: !789, inlinedAt: !790)
!793 = !DILocation(line: 290, column: 9, scope: !785, inlinedAt: !786)
!794 = !DILocalVariable(name: "desc", scope: !762, file: !710, line: 356, type: !795, align: 8)
!795 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "AlignedBlock*", baseType: !796, size: 64, align: 64, dwarfAddressSpace: 0)
!796 = !DICompositeType(tag: DW_TAG_structure_type, name: "AlignedBlock", scope: !710, file: !710, line: 362, size: 128, align: 64, elements: !797, identifier: "std.core.mem.allocator.AlignedBlock")
!797 = !{!798, !799}
!798 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !796, file: !710, line: 364, baseType: !12, size: 64, align: 64)
!799 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !796, file: !710, line: 365, baseType: !36, size: 64, align: 64, offset: 64)
!800 = !DILocation(line: 356, column: 16, scope: !762, inlinedAt: !763)
!801 = !DILocation(line: 356, column: 38, scope: !762, inlinedAt: !763)
!802 = !DILocation(line: 356, column: 44, scope: !762, inlinedAt: !763)
!803 = !DILocation(line: 357, column: 9, scope: !762, inlinedAt: !763)
!804 = !DILocation(line: 357, column: 15, scope: !762, inlinedAt: !763)
!805 = !DILocation(line: 358, column: 3, scope: !762, inlinedAt: !763)
!806 = !DILocation(line: 358, column: 12, scope: !762, inlinedAt: !763)
!807 = !DILocation(line: 358, column: 19, scope: !762, inlinedAt: !763)
!808 = !DILocation(line: 359, column: 9, scope: !762, inlinedAt: !763)
!809 = !DILocation(line: 35, column: 74, scope: !759)
!810 = !DILocation(line: 37, column: 9, scope: !745)
!811 = !DILocation(line: 341, column: 11, scope: !812, inlinedAt: !814)
!812 = distinct !DILexicalBlock(scope: !813, file: !28, line: 346, column: 1)
!813 = distinct !DISubprogram(name: "@aligned_alloc", linkageName: "@aligned_alloc", scope: !28, file: !28, line: 345, scopeLine: 345, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!814 = !DILocation(line: 37, column: 25, scope: !745)
!815 = !DILocation(line: 37, column: 25, scope: !812, inlinedAt: !814)
!816 = !DILocation(line: 342, column: 11, scope: !812, inlinedAt: !814)
!817 = !DILocation(line: 343, column: 11, scope: !812, inlinedAt: !814)
!818 = !DILocation(line: 347, column: 6, scope: !813, inlinedAt: !814)
!819 = !DILocation(line: 347, column: 45, scope: !813, inlinedAt: !814)
!820 = !DILocalVariable(name: "header", scope: !813, file: !710, line: 348, type: !12, align: 8)
!821 = !DILocation(line: 348, column: 6, scope: !813, inlinedAt: !814)
!822 = !DILocation(line: 348, column: 37, scope: !813, inlinedAt: !814)
!823 = !DILocation(line: 348, column: 15, scope: !813, inlinedAt: !814)
!824 = !DILocalVariable(name: "alignsize", scope: !813, file: !710, line: 349, type: !12, align: 8)
!825 = !DILocation(line: 349, column: 6, scope: !813, inlinedAt: !814)
!826 = !DILocation(line: 349, column: 18, scope: !813, inlinedAt: !814)
!827 = !DILocation(line: 349, column: 26, scope: !813, inlinedAt: !814)
!828 = !DILocalVariable(name: "data", scope: !813, file: !710, line: 351, type: !36, align: 8)
!829 = !DILocation(line: 351, column: 9, scope: !813, inlinedAt: !814)
!830 = !DILocation(line: 351, column: 16, scope: !813, inlinedAt: !814)
!831 = !DILocalVariable(name: "mem", scope: !813, file: !710, line: 355, type: !36, align: 8)
!832 = !DILocation(line: 355, column: 8, scope: !813, inlinedAt: !814)
!833 = !DILocation(line: 355, column: 35, scope: !813, inlinedAt: !814)
!834 = !DILocation(line: 355, column: 42, scope: !813, inlinedAt: !814)
!835 = !DILocation(line: 290, column: 37, scope: !836, inlinedAt: !837)
!836 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !166, file: !166, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!837 = !DILocation(line: 355, column: 14, scope: !813, inlinedAt: !814)
!838 = !DILocation(line: 290, column: 48, scope: !836, inlinedAt: !837)
!839 = !DILocation(line: 973, column: 9, scope: !840, inlinedAt: !841)
!840 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!841 = !DILocation(line: 290, column: 22, scope: !836, inlinedAt: !837)
!842 = !DILocation(line: 973, column: 20, scope: !840, inlinedAt: !841)
!843 = !DILocation(line: 973, column: 25, scope: !840, inlinedAt: !841)
!844 = !DILocation(line: 290, column: 9, scope: !836, inlinedAt: !837)
!845 = !DILocalVariable(name: "desc", scope: !813, file: !710, line: 356, type: !795, align: 8)
!846 = !DILocation(line: 356, column: 16, scope: !813, inlinedAt: !814)
!847 = !DILocation(line: 356, column: 38, scope: !813, inlinedAt: !814)
!848 = !DILocation(line: 356, column: 44, scope: !813, inlinedAt: !814)
!849 = !DILocation(line: 357, column: 9, scope: !813, inlinedAt: !814)
!850 = !DILocation(line: 357, column: 15, scope: !813, inlinedAt: !814)
!851 = !DILocation(line: 358, column: 3, scope: !813, inlinedAt: !814)
!852 = !DILocation(line: 358, column: 12, scope: !813, inlinedAt: !814)
!853 = !DILocation(line: 358, column: 19, scope: !813, inlinedAt: !814)
!854 = !DILocation(line: 359, column: 9, scope: !813, inlinedAt: !814)
!855 = !DILocation(line: 37, column: 72, scope: !745)
!856 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.SimpleHeapAllocator.resize", scope: !710, file: !710, line: 40, type: !857, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!857 = !DISubroutineType(types: !858)
!858 = !{!216, !218, !713, !36, !8, !8}
!859 = !DILocation(line: 41, column: 1, scope: !856)
!860 = !DILocalVariable(name: "self", arg: 1, scope: !856, file: !710, line: 40, type: !713)
!861 = !DILocation(line: 40, column: 38, scope: !856)
!862 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !856, file: !710, line: 40, type: !36)
!863 = !DILocation(line: 40, column: 51, scope: !856)
!864 = !DILocalVariable(name: "size", arg: 3, scope: !856, file: !710, line: 40, type: !12)
!865 = !DILocation(line: 40, column: 68, scope: !856)
!866 = !DILocalVariable(name: "alignment", arg: 4, scope: !856, file: !710, line: 40, type: !12)
!867 = !DILocation(line: 40, column: 78, scope: !856)
!868 = !DILocation(line: 42, column: 9, scope: !856)
!869 = !DILocation(line: 379, column: 11, scope: !870, inlinedAt: !872)
!870 = distinct !DILexicalBlock(scope: !871, file: !28, line: 383, column: 1)
!871 = distinct !DISubprogram(name: "@aligned_realloc", linkageName: "@aligned_realloc", scope: !28, file: !28, line: 382, scopeLine: 382, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!872 = !DILocation(line: 43, column: 5, scope: !856)
!873 = !DILocation(line: 43, column: 5, scope: !870, inlinedAt: !872)
!874 = !DILocation(line: 380, column: 11, scope: !870, inlinedAt: !872)
!875 = !DILocalVariable(name: "desc", scope: !871, file: !710, line: 384, type: !795, align: 8)
!876 = !DILocation(line: 384, column: 16, scope: !871, inlinedAt: !872)
!877 = !DILocation(line: 384, column: 38, scope: !871, inlinedAt: !872)
!878 = !DILocation(line: 384, column: 52, scope: !871, inlinedAt: !872)
!879 = !DILocalVariable(name: "data_start", scope: !871, file: !710, line: 385, type: !36, align: 8)
!880 = !DILocation(line: 385, column: 8, scope: !871, inlinedAt: !872)
!881 = !DILocation(line: 385, column: 21, scope: !871, inlinedAt: !872)
!882 = !DILocalVariable(name: "new_data", scope: !871, file: !710, line: 386, type: !36, align: 8)
!883 = !DILocation(line: 386, column: 8, scope: !871, inlinedAt: !872)
!884 = !DILocation(line: 341, column: 11, scope: !885, inlinedAt: !887)
!885 = distinct !DILexicalBlock(scope: !886, file: !28, line: 346, column: 1)
!886 = distinct !DISubprogram(name: "@aligned_alloc", linkageName: "@aligned_alloc", scope: !28, file: !28, line: 345, scopeLine: 345, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!887 = !DILocation(line: 386, column: 19, scope: !871, inlinedAt: !872)
!888 = !DILocation(line: 386, column: 19, scope: !885, inlinedAt: !887)
!889 = !DILocation(line: 342, column: 11, scope: !885, inlinedAt: !887)
!890 = !DILocation(line: 343, column: 11, scope: !885, inlinedAt: !887)
!891 = !DILocation(line: 347, column: 6, scope: !886, inlinedAt: !887)
!892 = !DILocation(line: 347, column: 45, scope: !886, inlinedAt: !887)
!893 = !DILocalVariable(name: "header", scope: !886, file: !710, line: 348, type: !12, align: 8)
!894 = !DILocation(line: 348, column: 6, scope: !886, inlinedAt: !887)
!895 = !DILocation(line: 348, column: 37, scope: !886, inlinedAt: !887)
!896 = !DILocation(line: 348, column: 15, scope: !886, inlinedAt: !887)
!897 = !DILocalVariable(name: "alignsize", scope: !886, file: !710, line: 349, type: !12, align: 8)
!898 = !DILocation(line: 349, column: 6, scope: !886, inlinedAt: !887)
!899 = !DILocation(line: 349, column: 18, scope: !886, inlinedAt: !887)
!900 = !DILocation(line: 349, column: 26, scope: !886, inlinedAt: !887)
!901 = !DILocalVariable(name: "data", scope: !886, file: !710, line: 351, type: !36, align: 8)
!902 = !DILocation(line: 351, column: 9, scope: !886, inlinedAt: !887)
!903 = !DILocation(line: 351, column: 16, scope: !886, inlinedAt: !887)
!904 = !DILocalVariable(name: "mem", scope: !886, file: !710, line: 355, type: !36, align: 8)
!905 = !DILocation(line: 355, column: 8, scope: !886, inlinedAt: !887)
!906 = !DILocation(line: 355, column: 35, scope: !886, inlinedAt: !887)
!907 = !DILocation(line: 355, column: 42, scope: !886, inlinedAt: !887)
!908 = !DILocation(line: 290, column: 37, scope: !909, inlinedAt: !910)
!909 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !166, file: !166, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!910 = !DILocation(line: 355, column: 14, scope: !886, inlinedAt: !887)
!911 = !DILocation(line: 290, column: 48, scope: !909, inlinedAt: !910)
!912 = !DILocation(line: 973, column: 9, scope: !913, inlinedAt: !914)
!913 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!914 = !DILocation(line: 290, column: 22, scope: !909, inlinedAt: !910)
!915 = !DILocation(line: 973, column: 20, scope: !913, inlinedAt: !914)
!916 = !DILocation(line: 973, column: 25, scope: !913, inlinedAt: !914)
!917 = !DILocation(line: 290, column: 9, scope: !909, inlinedAt: !910)
!918 = !DILocalVariable(name: "desc", scope: !886, file: !710, line: 356, type: !795, align: 8)
!919 = !DILocation(line: 356, column: 16, scope: !886, inlinedAt: !887)
!920 = !DILocation(line: 356, column: 38, scope: !886, inlinedAt: !887)
!921 = !DILocation(line: 356, column: 44, scope: !886, inlinedAt: !887)
!922 = !DILocation(line: 357, column: 9, scope: !886, inlinedAt: !887)
!923 = !DILocation(line: 357, column: 15, scope: !886, inlinedAt: !887)
!924 = !DILocation(line: 358, column: 3, scope: !886, inlinedAt: !887)
!925 = !DILocation(line: 358, column: 12, scope: !886, inlinedAt: !887)
!926 = !DILocation(line: 358, column: 19, scope: !886, inlinedAt: !887)
!927 = !DILocation(line: 359, column: 9, scope: !886, inlinedAt: !887)
!928 = !DILocation(line: 387, column: 35, scope: !871, inlinedAt: !872)
!929 = !DILocation(line: 387, column: 46, scope: !871, inlinedAt: !872)
!930 = !DILocation(line: 387, column: 54, scope: !871, inlinedAt: !872)
!931 = !DILocation(line: 387, column: 65, scope: !871, inlinedAt: !872)
!932 = !DILocation(line: 329, column: 23, scope: !933, inlinedAt: !935)
!933 = distinct !DILexicalBlock(scope: !934, file: !166, line: 330, column: 1)
!934 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !166, file: !166, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!935 = !DILocation(line: 387, column: 2, scope: !871, inlinedAt: !872)
!936 = !DILocation(line: 326, column: 11, scope: !933, inlinedAt: !935)
!937 = !DILocation(line: 326, column: 26, scope: !933, inlinedAt: !935)
!938 = !DILocation(line: 387, column: 2, scope: !933, inlinedAt: !935)
!939 = !DILocation(line: 327, column: 11, scope: !933, inlinedAt: !935)
!940 = !DILocation(line: 327, column: 23, scope: !933, inlinedAt: !935)
!941 = !DILocation(line: 327, column: 29, scope: !933, inlinedAt: !935)
!942 = !DILocation(line: 327, column: 36, scope: !933, inlinedAt: !935)
!943 = !DILocation(line: 327, column: 43, scope: !933, inlinedAt: !935)
!944 = !DILocation(line: 327, column: 49, scope: !933, inlinedAt: !935)
!945 = !DILocation(line: 327, column: 56, scope: !933, inlinedAt: !935)
!946 = !DILocation(line: 331, column: 11, scope: !934, inlinedAt: !935)
!947 = !DILocation(line: 331, column: 16, scope: !934, inlinedAt: !935)
!948 = !DILocation(line: 331, column: 21, scope: !934, inlinedAt: !935)
!949 = !DILocation(line: 331, column: 26, scope: !934, inlinedAt: !935)
!950 = !DILocation(line: 391, column: 11, scope: !871, inlinedAt: !872)
!951 = !DILocation(line: 391, column: 2, scope: !871, inlinedAt: !872)
!952 = !DILocation(line: 393, column: 9, scope: !871, inlinedAt: !872)
!953 = !DILocation(line: 44, column: 6, scope: !856)
!954 = !DILocation(line: 44, column: 20, scope: !856)
!955 = !DILocation(line: 44, column: 33, scope: !856)
!956 = !DILocation(line: 60, column: 11, scope: !856)
!957 = !DILocation(line: 60, column: 26, scope: !856)
!958 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.SimpleHeapAllocator.release", scope: !710, file: !710, line: 47, type: !959, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!959 = !DISubroutineType(types: !960)
!960 = !{null, !713, !36, !67}
!961 = !DILocation(line: 48, column: 1, scope: !958)
!962 = !DILocalVariable(name: "self", arg: 1, scope: !958, file: !710, line: 47, type: !713)
!963 = !DILocation(line: 47, column: 37, scope: !958)
!964 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !958, file: !710, line: 47, type: !36)
!965 = !DILocation(line: 47, column: 50, scope: !958)
!966 = !DILocalVariable(name: "aligned", arg: 3, scope: !958, file: !710, line: 47, type: !67)
!967 = !DILocation(line: 47, column: 68, scope: !958)
!968 = !DILocation(line: 49, column: 6, scope: !958)
!969 = !DILocalVariable(name: "desc", scope: !970, file: !710, line: 370, type: !795, align: 8)
!970 = distinct !DISubprogram(name: "@aligned_free", linkageName: "@aligned_free", scope: !28, file: !28, line: 368, scopeLine: 368, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!971 = !DILocation(line: 370, column: 16, scope: !970, inlinedAt: !972)
!972 = !DILocation(line: 51, column: 3, scope: !973)
!973 = distinct !DILexicalBlock(scope: !958, file: !710, line: 50, column: 2)
!974 = !DILocation(line: 370, column: 38, scope: !970, inlinedAt: !972)
!975 = !DILocation(line: 370, column: 52, scope: !970, inlinedAt: !972)
!976 = !DILocation(line: 374, column: 11, scope: !970, inlinedAt: !972)
!977 = !DILocation(line: 374, column: 2, scope: !970, inlinedAt: !972)
!978 = !DILocation(line: 55, column: 14, scope: !979)
!979 = distinct !DILexicalBlock(scope: !958, file: !710, line: 54, column: 2)
!980 = !DILocation(line: 55, column: 3, scope: !979)
!981 = distinct !DISubprogram(name: "_realloc", linkageName: "std.core.mem.allocator.SimpleHeapAllocator._realloc", scope: !710, file: !710, line: 62, type: !982, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!982 = !DISubroutineType(types: !983)
!983 = !{!216, !218, !713, !36, !8}
!984 = !DILocation(line: 63, column: 1, scope: !981)
!985 = !DILocalVariable(name: "self", arg: 1, scope: !981, file: !710, line: 62, type: !713)
!986 = !DILocation(line: 62, column: 40, scope: !981)
!987 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !981, file: !710, line: 62, type: !36)
!988 = !DILocation(line: 62, column: 53, scope: !981)
!989 = !DILocalVariable(name: "bytes", arg: 3, scope: !981, file: !710, line: 62, type: !12)
!990 = !DILocation(line: 62, column: 70, scope: !981)
!991 = !DILocation(line: 60, column: 11, scope: !992)
!992 = distinct !DILexicalBlock(scope: !981, file: !710, line: 63, column: 1)
!993 = !DILocation(line: 60, column: 26, scope: !992)
!994 = !DILocalVariable(name: "block", scope: !981, file: !710, line: 65, type: !723, align: 8)
!995 = !DILocation(line: 65, column: 10, scope: !981)
!996 = !DILocation(line: 65, column: 27, scope: !981)
!997 = !DILocation(line: 65, column: 41, scope: !981)
!998 = !DILocation(line: 66, column: 6, scope: !981)
!999 = !DILocation(line: 66, column: 20, scope: !981)
!1000 = !DILocation(line: 66, column: 34, scope: !981)
!1001 = !DILocalVariable(name: "new", scope: !981, file: !710, line: 67, type: !36, align: 8)
!1002 = !DILocation(line: 67, column: 8, scope: !981)
!1003 = !DILocation(line: 67, column: 14, scope: !981)
!1004 = !DILocalVariable(name: "max_to_copy", scope: !981, file: !710, line: 68, type: !12, align: 8)
!1005 = !DILocation(line: 68, column: 6, scope: !981)
!1006 = !DILocation(line: 68, column: 30, scope: !981)
!1007 = !DILocation(line: 374, column: 16, scope: !1008, inlinedAt: !1009)
!1008 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !237, file: !237, line: 371, scopeLine: 371, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1009 = !DILocation(line: 68, column: 20, scope: !981)
!1010 = !DILocation(line: 374, column: 19, scope: !1008, inlinedAt: !1009)
!1011 = !DILocation(line: 329, column: 23, scope: !1012, inlinedAt: !1014)
!1012 = distinct !DILexicalBlock(scope: !1013, file: !166, line: 330, column: 1)
!1013 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !166, file: !166, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1014 = !DILocation(line: 69, column: 2, scope: !981)
!1015 = !DILocation(line: 326, column: 11, scope: !1012, inlinedAt: !1014)
!1016 = !DILocation(line: 326, column: 26, scope: !1012, inlinedAt: !1014)
!1017 = !DILocation(line: 69, column: 2, scope: !1012, inlinedAt: !1014)
!1018 = !DILocation(line: 327, column: 11, scope: !1012, inlinedAt: !1014)
!1019 = !DILocation(line: 327, column: 23, scope: !1012, inlinedAt: !1014)
!1020 = !DILocation(line: 327, column: 29, scope: !1012, inlinedAt: !1014)
!1021 = !DILocation(line: 327, column: 36, scope: !1012, inlinedAt: !1014)
!1022 = !DILocation(line: 327, column: 43, scope: !1012, inlinedAt: !1014)
!1023 = !DILocation(line: 327, column: 49, scope: !1012, inlinedAt: !1014)
!1024 = !DILocation(line: 327, column: 56, scope: !1012, inlinedAt: !1014)
!1025 = !DILocation(line: 331, column: 11, scope: !1013, inlinedAt: !1014)
!1026 = !DILocation(line: 331, column: 16, scope: !1013, inlinedAt: !1014)
!1027 = !DILocation(line: 331, column: 21, scope: !1013, inlinedAt: !1014)
!1028 = !DILocation(line: 331, column: 26, scope: !1013, inlinedAt: !1014)
!1029 = !DILocation(line: 70, column: 13, scope: !981)
!1030 = !DILocation(line: 70, column: 2, scope: !981)
!1031 = !DILocation(line: 71, column: 9, scope: !981)
!1032 = distinct !DISubprogram(name: "_calloc", linkageName: "std.core.mem.allocator.SimpleHeapAllocator._calloc", scope: !710, file: !710, line: 74, type: !1033, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1033 = !DISubroutineType(types: !1034)
!1034 = !{!216, !218, !713, !8}
!1035 = !DILocation(line: 75, column: 1, scope: !1032)
!1036 = !DILocalVariable(name: "self", arg: 1, scope: !1032, file: !710, line: 74, type: !713)
!1037 = !DILocation(line: 74, column: 39, scope: !1032)
!1038 = !DILocalVariable(name: "bytes", arg: 2, scope: !1032, file: !710, line: 74, type: !12)
!1039 = !DILocation(line: 74, column: 50, scope: !1032)
!1040 = !DILocalVariable(name: "data", scope: !1032, file: !710, line: 76, type: !36, align: 8)
!1041 = !DILocation(line: 76, column: 8, scope: !1032)
!1042 = !DILocation(line: 76, column: 15, scope: !1032)
!1043 = !DILocation(line: 308, column: 11, scope: !1044, inlinedAt: !1045)
!1044 = distinct !DISubprogram(name: "clear", linkageName: "clear", scope: !166, file: !166, line: 306, scopeLine: 306, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1045 = !DILocation(line: 77, column: 2, scope: !1032)
!1046 = !DILocation(line: 308, column: 25, scope: !1044, inlinedAt: !1045)
!1047 = !DILocation(line: 308, column: 30, scope: !1044, inlinedAt: !1045)
!1048 = !DILocation(line: 78, column: 9, scope: !1032)
!1049 = distinct !DISubprogram(name: "_alloc", linkageName: "std.core.mem.allocator.SimpleHeapAllocator._alloc", scope: !710, file: !710, line: 81, type: !1033, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1050 = !DILocation(line: 82, column: 1, scope: !1049)
!1051 = !DILocalVariable(name: "self", arg: 1, scope: !1049, file: !710, line: 81, type: !713)
!1052 = !DILocation(line: 81, column: 38, scope: !1049)
!1053 = !DILocalVariable(name: "bytes", arg: 2, scope: !1049, file: !710, line: 81, type: !12)
!1054 = !DILocation(line: 81, column: 49, scope: !1049)
!1055 = !DILocalVariable(name: "aligned_bytes", scope: !1049, file: !710, line: 83, type: !12, align: 8)
!1056 = !DILocation(line: 83, column: 6, scope: !1049)
!1057 = !DILocation(line: 83, column: 42, scope: !1049)
!1058 = !DILocation(line: 973, column: 9, scope: !1059, inlinedAt: !1060)
!1059 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1060 = !DILocation(line: 83, column: 22, scope: !1049)
!1061 = !DILocation(line: 973, column: 20, scope: !1059, inlinedAt: !1060)
!1062 = !DILocation(line: 973, column: 25, scope: !1059, inlinedAt: !1060)
!1063 = !DILocation(line: 84, column: 7, scope: !1049)
!1064 = !DILocation(line: 86, column: 18, scope: !1065)
!1065 = distinct !DILexicalBlock(scope: !1049, file: !710, line: 85, column: 2)
!1066 = !DILocation(line: 86, column: 3, scope: !1065)
!1067 = !DILocalVariable(name: "current", scope: !1049, file: !710, line: 89, type: !723, align: 8)
!1068 = !DILocation(line: 89, column: 10, scope: !1049)
!1069 = !DILocation(line: 89, column: 20, scope: !1049)
!1070 = !DILocalVariable(name: "previous", scope: !1049, file: !710, line: 90, type: !723, align: 8)
!1071 = !DILocation(line: 90, column: 10, scope: !1049)
!1072 = !DILocation(line: 90, column: 21, scope: !1049)
!1073 = !DILocation(line: 91, column: 2, scope: !1049)
!1074 = !DILocation(line: 91, column: 9, scope: !1075)
!1075 = distinct !DILexicalBlock(scope: !1049, file: !710, line: 91, column: 2)
!1076 = !DILocation(line: 95, column: 9, scope: !1077)
!1077 = distinct !DILexicalBlock(scope: !1078, file: !710, line: 93, column: 3)
!1078 = distinct !DILexicalBlock(scope: !1075, file: !710, line: 92, column: 2)
!1079 = !DILocation(line: 95, column: 25, scope: !1077)
!1080 = !DILocation(line: 95, column: 42, scope: !1077)
!1081 = !DILocation(line: 95, column: 58, scope: !1077)
!1082 = !DILocation(line: 96, column: 9, scope: !1083)
!1083 = distinct !DILexicalBlock(scope: !1077, file: !710, line: 96, column: 5)
!1084 = !DILocation(line: 96, column: 20, scope: !1083)
!1085 = !DILocation(line: 98, column: 6, scope: !1086)
!1086 = distinct !DILexicalBlock(scope: !1083, file: !710, line: 97, column: 5)
!1087 = !DILocation(line: 98, column: 23, scope: !1086)
!1088 = !DILocation(line: 102, column: 6, scope: !1089)
!1089 = distinct !DILexicalBlock(scope: !1083, file: !710, line: 101, column: 5)
!1090 = !DILocation(line: 102, column: 22, scope: !1089)
!1091 = !DILocation(line: 104, column: 5, scope: !1083)
!1092 = !DILocation(line: 104, column: 20, scope: !1083)
!1093 = !DILocation(line: 105, column: 12, scope: !1083)
!1094 = !DILocation(line: 105, column: 22, scope: !1083)
!1095 = !DILocation(line: 106, column: 9, scope: !1077)
!1096 = !DILocation(line: 106, column: 24, scope: !1077)
!1097 = !DILocalVariable(name: "unallocated", scope: !1098, file: !710, line: 107, type: !723, align: 8)
!1098 = distinct !DILexicalBlock(scope: !1077, file: !710, line: 107, column: 5)
!1099 = !DILocation(line: 107, column: 13, scope: !1098)
!1100 = !DILocation(line: 107, column: 44, scope: !1098)
!1101 = !DILocation(line: 107, column: 54, scope: !1098)
!1102 = !DILocation(line: 107, column: 37, scope: !1098)
!1103 = !DILocation(line: 108, column: 5, scope: !1098)
!1104 = !DILocation(line: 108, column: 24, scope: !1098)
!1105 = !DILocation(line: 108, column: 39, scope: !1098)
!1106 = !DILocation(line: 109, column: 5, scope: !1098)
!1107 = !DILocation(line: 109, column: 24, scope: !1098)
!1108 = !DILocation(line: 110, column: 9, scope: !1098)
!1109 = !DILocation(line: 110, column: 20, scope: !1098)
!1110 = !DILocation(line: 112, column: 6, scope: !1111)
!1111 = distinct !DILexicalBlock(scope: !1098, file: !710, line: 111, column: 5)
!1112 = !DILocation(line: 112, column: 23, scope: !1111)
!1113 = !DILocation(line: 116, column: 6, scope: !1114)
!1114 = distinct !DILexicalBlock(scope: !1098, file: !710, line: 115, column: 5)
!1115 = !DILocation(line: 116, column: 22, scope: !1114)
!1116 = !DILocation(line: 118, column: 5, scope: !1098)
!1117 = !DILocation(line: 118, column: 20, scope: !1098)
!1118 = !DILocation(line: 119, column: 5, scope: !1098)
!1119 = !DILocation(line: 119, column: 20, scope: !1098)
!1120 = !DILocation(line: 120, column: 12, scope: !1098)
!1121 = !DILocation(line: 120, column: 22, scope: !1098)
!1122 = !DILocation(line: 122, column: 16, scope: !1123)
!1123 = distinct !DILexicalBlock(scope: !1077, file: !710, line: 122, column: 5)
!1124 = !DILocation(line: 123, column: 15, scope: !1123)
!1125 = !DILocation(line: 126, column: 17, scope: !1049)
!1126 = !DILocation(line: 126, column: 2, scope: !1049)
!1127 = !DILocation(line: 127, column: 9, scope: !1049)
!1128 = distinct !DISubprogram(name: "add_block", linkageName: "std.core.mem.allocator.SimpleHeapAllocator.add_block", scope: !710, file: !710, line: 130, type: !1129, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1129 = !DISubroutineType(types: !1130)
!1130 = !{!216, !36, !713, !8}
!1131 = !DILocation(line: 131, column: 1, scope: !1128)
!1132 = !DILocalVariable(name: "self", arg: 1, scope: !1128, file: !710, line: 130, type: !713)
!1133 = !DILocation(line: 130, column: 40, scope: !1128)
!1134 = !DILocalVariable(name: "aligned_bytes", arg: 2, scope: !1128, file: !710, line: 130, type: !12)
!1135 = !DILocation(line: 130, column: 51, scope: !1128)
!1136 = !DILocation(line: 132, column: 29, scope: !1128)
!1137 = !DILocation(line: 973, column: 9, scope: !1138, inlinedAt: !1139)
!1138 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1139 = !DILocation(line: 132, column: 9, scope: !1128)
!1140 = !DILocation(line: 973, column: 20, scope: !1138, inlinedAt: !1139)
!1141 = !DILocation(line: 973, column: 25, scope: !1138, inlinedAt: !1139)
!1142 = !DILocation(line: 132, column: 75, scope: !1128)
!1143 = !DILocalVariable(name: "result", scope: !1128, file: !710, line: 133, type: !498, align: 8)
!1144 = !DILocation(line: 133, column: 9, scope: !1128)
!1145 = !DILocation(line: 133, column: 18, scope: !1128)
!1146 = !DILocation(line: 133, column: 32, scope: !1128)
!1147 = !DILocalVariable(name: "new_block", scope: !1128, file: !710, line: 134, type: !723, align: 8)
!1148 = !DILocation(line: 134, column: 10, scope: !1128)
!1149 = !DILocation(line: 134, column: 31, scope: !1128)
!1150 = !DILocation(line: 135, column: 2, scope: !1128)
!1151 = !DILocation(line: 135, column: 19, scope: !1128)
!1152 = !DILocation(line: 136, column: 2, scope: !1128)
!1153 = !DILocation(line: 136, column: 19, scope: !1128)
!1154 = !DILocation(line: 137, column: 13, scope: !1128)
!1155 = !DILocation(line: 137, column: 25, scope: !1128)
!1156 = !DILocation(line: 137, column: 2, scope: !1128)
!1157 = distinct !DISubprogram(name: "_free", linkageName: "std.core.mem.allocator.SimpleHeapAllocator._free", scope: !710, file: !710, line: 141, type: !1158, scopeLine: 141, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1158 = !DISubroutineType(types: !1159)
!1159 = !{null, !713, !36}
!1160 = !DILocation(line: 142, column: 1, scope: !1157)
!1161 = !DILocalVariable(name: "self", arg: 1, scope: !1157, file: !710, line: 141, type: !713)
!1162 = !DILocation(line: 141, column: 35, scope: !1157)
!1163 = !DILocalVariable(name: "ptr", arg: 2, scope: !1157, file: !710, line: 141, type: !36)
!1164 = !DILocation(line: 141, column: 48, scope: !1157)
!1165 = !DILocation(line: 144, column: 6, scope: !1157)
!1166 = !DILocation(line: 144, column: 18, scope: !1157)
!1167 = !DILocalVariable(name: "block", scope: !1157, file: !710, line: 147, type: !723, align: 8)
!1168 = !DILocation(line: 147, column: 10, scope: !1157)
!1169 = !DILocation(line: 147, column: 27, scope: !1157)
!1170 = !DILocation(line: 147, column: 33, scope: !1157)
!1171 = !DILocation(line: 150, column: 7, scope: !1157)
!1172 = !DILocation(line: 152, column: 3, scope: !1173)
!1173 = distinct !DILexicalBlock(scope: !1157, file: !710, line: 151, column: 2)
!1174 = !DILocation(line: 152, column: 20, scope: !1173)
!1175 = !DILocation(line: 153, column: 9, scope: !1173)
!1176 = !DILocalVariable(name: "current", scope: !1157, file: !710, line: 157, type: !723, align: 8)
!1177 = !DILocation(line: 157, column: 10, scope: !1157)
!1178 = !DILocation(line: 157, column: 20, scope: !1157)
!1179 = !DILocalVariable(name: "prev", scope: !1157, file: !710, line: 158, type: !723, align: 8)
!1180 = !DILocation(line: 158, column: 10, scope: !1157)
!1181 = !DILocation(line: 158, column: 17, scope: !1157)
!1182 = !DILocation(line: 159, column: 2, scope: !1157)
!1183 = !DILocation(line: 159, column: 9, scope: !1184)
!1184 = distinct !DILexicalBlock(scope: !1157, file: !710, line: 159, column: 2)
!1185 = !DILocation(line: 161, column: 7, scope: !1186)
!1186 = distinct !DILexicalBlock(scope: !1184, file: !710, line: 160, column: 2)
!1187 = !DILocation(line: 161, column: 15, scope: !1186)
!1188 = !DILocation(line: 164, column: 8, scope: !1189)
!1189 = distinct !DILexicalBlock(scope: !1186, file: !710, line: 162, column: 3)
!1190 = !DILocation(line: 164, column: 16, scope: !1189)
!1191 = !DILocation(line: 164, column: 22, scope: !1189)
!1192 = !DILocation(line: 166, column: 8, scope: !1189)
!1193 = !DILocation(line: 166, column: 19, scope: !1189)
!1194 = !DILocation(line: 166, column: 25, scope: !1189)
!1195 = !DILocation(line: 168, column: 10, scope: !1186)
!1196 = !DILocation(line: 169, column: 13, scope: !1186)
!1197 = !DILocation(line: 171, column: 6, scope: !1157)
!1198 = !DILocation(line: 175, column: 7, scope: !1199)
!1199 = distinct !DILexicalBlock(scope: !1157, file: !710, line: 172, column: 2)
!1200 = !DILocation(line: 175, column: 36, scope: !1199)
!1201 = !DILocation(line: 175, column: 44, scope: !1199)
!1202 = !DILocation(line: 175, column: 49, scope: !1199)
!1203 = !DILocation(line: 178, column: 4, scope: !1204)
!1204 = distinct !DILexicalBlock(scope: !1199, file: !710, line: 176, column: 3)
!1205 = !DILocation(line: 178, column: 18, scope: !1204)
!1206 = !DILocation(line: 179, column: 4, scope: !1204)
!1207 = !DILocation(line: 179, column: 17, scope: !1204)
!1208 = !DILocation(line: 184, column: 4, scope: !1209)
!1209 = distinct !DILexicalBlock(scope: !1199, file: !710, line: 182, column: 3)
!1210 = !DILocation(line: 184, column: 17, scope: !1209)
!1211 = !DILocation(line: 187, column: 6, scope: !1157)
!1212 = !DILocation(line: 187, column: 14, scope: !1157)
!1213 = !DILocation(line: 190, column: 3, scope: !1214)
!1214 = distinct !DILexicalBlock(scope: !1157, file: !710, line: 188, column: 2)
!1215 = !DILocation(line: 190, column: 20, scope: !1214)
!1216 = !DILocation(line: 195, column: 7, scope: !1217)
!1217 = distinct !DILexicalBlock(scope: !1157, file: !710, line: 193, column: 2)
!1218 = !DILocation(line: 195, column: 34, scope: !1217)
!1219 = !DILocation(line: 195, column: 41, scope: !1217)
!1220 = !DILocation(line: 195, column: 46, scope: !1217)
!1221 = !DILocation(line: 197, column: 4, scope: !1222)
!1222 = distinct !DILexicalBlock(scope: !1217, file: !710, line: 196, column: 3)
!1223 = !DILocation(line: 197, column: 17, scope: !1222)
!1224 = !DILocation(line: 198, column: 4, scope: !1222)
!1225 = !DILocation(line: 198, column: 16, scope: !1222)
!1226 = !DILocation(line: 203, column: 4, scope: !1227)
!1227 = distinct !DILexicalBlock(scope: !1217, file: !710, line: 201, column: 3)
!1228 = !DILocation(line: 203, column: 16, scope: !1227)
!1229 = distinct !DISubprogram(name: "to_string", linkageName: "std.core.mem.allocator.LibcAllocator.to_string", scope: !6, file: !6, line: 14, type: !1230, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1230 = !DISubroutineType(types: !1231)
!1231 = !{!497, !1232, !33}
!1232 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "LibcAllocator*", baseType: !7, size: 64, align: 64, dwarfAddressSpace: 0)
!1233 = !DILocation(line: 14, column: 75, scope: !1229)
!1234 = !DILocalVariable(name: "self", arg: 1, scope: !1229, file: !6, line: 14, type: !1232)
!1235 = !DILocation(line: 14, column: 35, scope: !1229)
!1236 = !DILocalVariable(name: "allocator", arg: 2, scope: !1229, file: !6, line: 14, type: !33)
!1237 = !DILocation(line: 14, column: 52, scope: !1229)
!1238 = !DILocation(line: 14, column: 97, scope: !1229)
!1239 = distinct !DISubprogram(name: "to_format", linkageName: "std.core.mem.allocator.LibcAllocator.to_format", scope: !6, file: !6, line: 15, type: !1240, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!216, !1242, !1232, !1243}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !12, size: 64, align: 64, dwarfAddressSpace: 0)
!1243 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Formatter*", baseType: !1244, size: 64, align: 64, dwarfAddressSpace: 0)
!1244 = !DICompositeType(tag: DW_TAG_structure_type, name: "Formatter", scope: !6, file: !6, line: 63, size: 384, align: 64, elements: !1245, identifier: "std.io.Formatter")
!1245 = !{!1246, !1247, !1252}
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1244, file: !6, line: 65, baseType: !36, size: 64, align: 64)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "out_fn", scope: !1244, file: !6, line: 66, baseType: !1248, size: 64, align: 64, offset: 64)
!1248 = !DIDerivedType(tag: DW_TAG_typedef, name: "OutputFn", scope: !6, file: !6, line: 16, baseType: !1249, align: 8)
!1249 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OutputFn", baseType: !1250, size: 64, align: 64, dwarfAddressSpace: 0)
!1250 = !DISubroutineType(types: !1251)
!1251 = !{!216, !36, !36, !62}
!1252 = !DIDerivedType(tag: DW_TAG_member, scope: !1244, file: !6, line: 67, baseType: !1253, size: 256, align: 64, offset: 128)
!1253 = !DICompositeType(tag: DW_TAG_structure_type, name: "$anon", scope: !1244, file: !6, line: 67, size: 256, align: 64, elements: !1254)
!1254 = !{!1255, !1256, !1257, !1258, !1259}
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1253, file: !6, line: 69, baseType: !117, size: 32, align: 32)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1253, file: !6, line: 70, baseType: !117, size: 32, align: 32, offset: 32)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "prec", scope: !1253, file: !6, line: 71, baseType: !117, size: 32, align: 32, offset: 64)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !1253, file: !6, line: 72, baseType: !12, size: 64, align: 64, offset: 128)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "first_fault", scope: !1253, file: !6, line: 73, baseType: !216, size: 64, align: 64, offset: 192)
!1260 = !DILocation(line: 15, column: 71, scope: !1239)
!1261 = !DILocalVariable(name: "self", arg: 1, scope: !1239, file: !6, line: 15, type: !1232)
!1262 = !DILocation(line: 15, column: 33, scope: !1239)
!1263 = !DILocalVariable(name: "format", arg: 2, scope: !1239, file: !6, line: 15, type: !1243)
!1264 = !DILocation(line: 15, column: 51, scope: !1239)
!1265 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.LibcAllocator.acquire", scope: !6, file: !6, line: 22, type: !1266, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1266 = !DISubroutineType(types: !1267)
!1267 = !{!216, !218, !1232, !8, !92, !8}
!1268 = !DILocation(line: 23, column: 1, scope: !1265)
!1269 = !DILocalVariable(name: "self", arg: 1, scope: !1265, file: !6, line: 22, type: !1232)
!1270 = !DILocation(line: 22, column: 33, scope: !1265)
!1271 = !DILocalVariable(name: "bytes", arg: 2, scope: !1265, file: !6, line: 22, type: !12)
!1272 = !DILocation(line: 22, column: 44, scope: !1265)
!1273 = !DILocalVariable(name: "init_type", arg: 3, scope: !1265, file: !6, line: 22, type: !92)
!1274 = !DILocation(line: 22, column: 65, scope: !1265)
!1275 = !DILocalVariable(name: "alignment", arg: 4, scope: !1265, file: !6, line: 22, type: !12)
!1276 = !DILocation(line: 22, column: 80, scope: !1265)
!1277 = !DILocation(line: 24, column: 6, scope: !1265)
!1278 = !DILocalVariable(name: "data", scope: !1279, file: !6, line: 26, type: !36, align: 8)
!1279 = distinct !DILexicalBlock(scope: !1265, file: !6, line: 25, column: 2)
!1280 = !DILocation(line: 26, column: 9, scope: !1279)
!1281 = !DILocation(line: 27, column: 7, scope: !1279)
!1282 = !DILocation(line: 29, column: 48, scope: !1283)
!1283 = distinct !DILexicalBlock(scope: !1279, file: !6, line: 28, column: 3)
!1284 = !DILocation(line: 29, column: 8, scope: !1283)
!1285 = !DILocation(line: 29, column: 63, scope: !1283)
!1286 = !DILocation(line: 308, column: 11, scope: !1287, inlinedAt: !1288)
!1287 = distinct !DISubprogram(name: "clear", linkageName: "clear", scope: !166, file: !166, line: 306, scopeLine: 306, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1288 = !DILocation(line: 30, column: 4, scope: !1283)
!1289 = !DILocation(line: 308, column: 25, scope: !1287, inlinedAt: !1288)
!1290 = !DILocation(line: 308, column: 30, scope: !1287, inlinedAt: !1288)
!1291 = !DILocation(line: 31, column: 11, scope: !1283)
!1292 = !DILocation(line: 33, column: 26, scope: !1279)
!1293 = !DILocation(line: 33, column: 10, scope: !1279)
!1294 = !DILocation(line: 33, column: 36, scope: !1279)
!1295 = !DILocalVariable(name: "data", scope: !1296, file: !6, line: 37, type: !36, align: 8)
!1296 = distinct !DILexicalBlock(scope: !1265, file: !6, line: 36, column: 2)
!1297 = !DILocation(line: 37, column: 9, scope: !1296)
!1298 = !DILocation(line: 38, column: 7, scope: !1296)
!1299 = !DILocation(line: 40, column: 48, scope: !1300)
!1300 = distinct !DILexicalBlock(scope: !1296, file: !6, line: 39, column: 3)
!1301 = !DILocation(line: 40, column: 8, scope: !1300)
!1302 = !DILocation(line: 40, column: 63, scope: !1300)
!1303 = !DILocation(line: 44, column: 30, scope: !1304)
!1304 = distinct !DILexicalBlock(scope: !1296, file: !6, line: 43, column: 3)
!1305 = !DILocation(line: 44, column: 17, scope: !1304)
!1306 = !DILocation(line: 44, column: 46, scope: !1304)
!1307 = !DILocation(line: 49, column: 10, scope: !1296)
!1308 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.LibcAllocator.resize", scope: !6, file: !6, line: 53, type: !1309, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1309 = !DISubroutineType(types: !1310)
!1310 = !{!216, !218, !1232, !36, !8, !8}
!1311 = !DILocation(line: 54, column: 1, scope: !1308)
!1312 = !DILocalVariable(name: "self", arg: 1, scope: !1308, file: !6, line: 53, type: !1232)
!1313 = !DILocation(line: 53, column: 32, scope: !1308)
!1314 = !DILocalVariable(name: "old_ptr", arg: 2, scope: !1308, file: !6, line: 53, type: !36)
!1315 = !DILocation(line: 53, column: 45, scope: !1308)
!1316 = !DILocalVariable(name: "new_bytes", arg: 3, scope: !1308, file: !6, line: 53, type: !12)
!1317 = !DILocation(line: 53, column: 58, scope: !1308)
!1318 = !DILocalVariable(name: "alignment", arg: 4, scope: !1308, file: !6, line: 53, type: !12)
!1319 = !DILocation(line: 53, column: 73, scope: !1308)
!1320 = !DILocation(line: 55, column: 6, scope: !1308)
!1321 = !DILocation(line: 55, column: 77, scope: !1308)
!1322 = !DILocation(line: 55, column: 54, scope: !1308)
!1323 = !DILocation(line: 55, column: 91, scope: !1308)
!1324 = !DILocalVariable(name: "new_ptr", scope: !1308, file: !6, line: 56, type: !36, align: 8)
!1325 = !DILocation(line: 56, column: 8, scope: !1308)
!1326 = !DILocation(line: 57, column: 49, scope: !1308)
!1327 = !DILocation(line: 57, column: 6, scope: !1308)
!1328 = !DILocation(line: 57, column: 68, scope: !1308)
!1329 = !DILocalVariable(name: "old_usable_size", scope: !1308, file: !6, line: 63, type: !12, align: 8)
!1330 = !DILocation(line: 63, column: 7, scope: !1308)
!1331 = !DILocation(line: 63, column: 51, scope: !1308)
!1332 = !DILocation(line: 63, column: 25, scope: !1308)
!1333 = !DILocalVariable(name: "copy_size", scope: !1308, file: !6, line: 68, type: !12, align: 8)
!1334 = !DILocation(line: 68, column: 6, scope: !1308)
!1335 = !DILocation(line: 68, column: 18, scope: !1308)
!1336 = !DILocation(line: 68, column: 30, scope: !1308)
!1337 = !DILocation(line: 68, column: 48, scope: !1308)
!1338 = !DILocation(line: 68, column: 60, scope: !1308)
!1339 = !DILocation(line: 329, column: 23, scope: !1340, inlinedAt: !1342)
!1340 = distinct !DILexicalBlock(scope: !1341, file: !166, line: 330, column: 1)
!1341 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !166, file: !166, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1342 = !DILocation(line: 69, column: 2, scope: !1308)
!1343 = !DILocation(line: 326, column: 11, scope: !1340, inlinedAt: !1342)
!1344 = !DILocation(line: 326, column: 26, scope: !1340, inlinedAt: !1342)
!1345 = !DILocation(line: 69, column: 2, scope: !1340, inlinedAt: !1342)
!1346 = !DILocation(line: 327, column: 11, scope: !1340, inlinedAt: !1342)
!1347 = !DILocation(line: 327, column: 23, scope: !1340, inlinedAt: !1342)
!1348 = !DILocation(line: 327, column: 29, scope: !1340, inlinedAt: !1342)
!1349 = !DILocation(line: 327, column: 36, scope: !1340, inlinedAt: !1342)
!1350 = !DILocation(line: 327, column: 43, scope: !1340, inlinedAt: !1342)
!1351 = !DILocation(line: 327, column: 49, scope: !1340, inlinedAt: !1342)
!1352 = !DILocation(line: 327, column: 56, scope: !1340, inlinedAt: !1342)
!1353 = !DILocation(line: 331, column: 11, scope: !1341, inlinedAt: !1342)
!1354 = !DILocation(line: 331, column: 16, scope: !1341, inlinedAt: !1342)
!1355 = !DILocation(line: 331, column: 21, scope: !1341, inlinedAt: !1342)
!1356 = !DILocation(line: 331, column: 26, scope: !1341, inlinedAt: !1342)
!1357 = !DILocation(line: 70, column: 13, scope: !1308)
!1358 = !DILocation(line: 70, column: 2, scope: !1308)
!1359 = !DILocation(line: 71, column: 9, scope: !1308)
!1360 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.LibcAllocator.release", scope: !6, file: !6, line: 74, type: !1361, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1361 = !DISubroutineType(types: !1362)
!1362 = !{null, !1232, !36, !67}
!1363 = !DILocation(line: 75, column: 1, scope: !1360)
!1364 = !DILocalVariable(name: "self", arg: 1, scope: !1360, file: !6, line: 74, type: !1232)
!1365 = !DILocation(line: 74, column: 31, scope: !1360)
!1366 = !DILocalVariable(name: "old_ptr", arg: 2, scope: !1360, file: !6, line: 74, type: !36)
!1367 = !DILocation(line: 74, column: 44, scope: !1360)
!1368 = !DILocalVariable(name: "aligned", arg: 3, scope: !1360, file: !6, line: 74, type: !67)
!1369 = !DILocation(line: 74, column: 58, scope: !1360)
!1370 = !DILocation(line: 76, column: 13, scope: !1360)
!1371 = !DILocation(line: 76, column: 2, scope: !1360)
!1372 = distinct !DISubprogram(name: "init", linkageName: "std.core.mem.allocator.OnStackAllocator.init", scope: !1373, file: !1373, line: 32, type: !1374, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1373 = !DIFile(filename: "on_stack_allocator.c3", directory: "/usr/lib/c3c/lib/std/core/allocators")
!1374 = !DISubroutineType(types: !1375)
!1375 = !{null, !1376, !498, !33}
!1376 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OnStackAllocator*", baseType: !1377, size: 64, align: 64, dwarfAddressSpace: 0)
!1377 = !DICompositeType(tag: DW_TAG_structure_type, name: "OnStackAllocator", scope: !1373, file: !1373, line: 12, size: 384, align: 64, elements: !1378, identifier: "std.core.mem.allocator.OnStackAllocator")
!1378 = !{!1379, !1380, !1381, !1382}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !1377, file: !1373, line: 14, baseType: !33, size: 128, align: 64)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1377, file: !1373, line: 15, baseType: !498, size: 128, align: 64, offset: 128)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1377, file: !1373, line: 16, baseType: !12, size: 64, align: 64, offset: 256)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1377, file: !1373, line: 17, baseType: !1383, size: 64, align: 64, offset: 320)
!1383 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OnStackAllocatorExtraChunk*", baseType: !1384, size: 64, align: 64, dwarfAddressSpace: 0)
!1384 = !DICompositeType(tag: DW_TAG_structure_type, name: "OnStackAllocatorExtraChunk", scope: !1373, file: !1373, line: 20, size: 192, align: 64, elements: !1385, identifier: "std.core.mem.allocator.OnStackAllocatorExtraChunk")
!1385 = !{!1386, !1387, !1388}
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "is_aligned", scope: !1384, file: !1373, line: 22, baseType: !67, size: 8, align: 8)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1384, file: !1373, line: 23, baseType: !1383, size: 64, align: 64, offset: 64)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1384, file: !1373, line: 24, baseType: !36, size: 64, align: 64, offset: 128)
!1389 = !DILocation(line: 33, column: 1, scope: !1372)
!1390 = !DILocalVariable(name: "self", arg: 1, scope: !1372, file: !1373, line: 32, type: !1376)
!1391 = !DILocation(line: 32, column: 31, scope: !1372)
!1392 = !DILocalVariable(name: "data", arg: 2, scope: !1372, file: !1373, line: 32, type: !498)
!1393 = !DILocation(line: 32, column: 45, scope: !1372)
!1394 = !DILocalVariable(name: "allocator", arg: 3, scope: !1372, file: !1373, line: 32, type: !33)
!1395 = !DILocation(line: 32, column: 61, scope: !1372)
!1396 = !DILocation(line: 34, column: 2, scope: !1372)
!1397 = !DILocation(line: 34, column: 14, scope: !1372)
!1398 = !DILocation(line: 35, column: 2, scope: !1372)
!1399 = !DILocation(line: 35, column: 27, scope: !1372)
!1400 = !DILocation(line: 36, column: 2, scope: !1372)
!1401 = !DILocation(line: 36, column: 14, scope: !1372)
!1402 = distinct !DISubprogram(name: "free", linkageName: "std.core.mem.allocator.OnStackAllocator.free", scope: !1373, file: !1373, line: 39, type: !1403, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1403 = !DISubroutineType(types: !1404)
!1404 = !{null, !1376}
!1405 = !DILocation(line: 40, column: 1, scope: !1402)
!1406 = !DILocalVariable(name: "self", arg: 1, scope: !1402, file: !1373, line: 39, type: !1376)
!1407 = !DILocation(line: 39, column: 31, scope: !1402)
!1408 = !DILocalVariable(name: "chunk", scope: !1402, file: !1373, line: 41, type: !1383, align: 8)
!1409 = !DILocation(line: 41, column: 30, scope: !1402)
!1410 = !DILocation(line: 41, column: 38, scope: !1402)
!1411 = !DILocation(line: 42, column: 2, scope: !1402)
!1412 = !DILocation(line: 42, column: 9, scope: !1413)
!1413 = distinct !DILexicalBlock(scope: !1402, file: !1373, line: 42, column: 2)
!1414 = !DILocation(line: 44, column: 7, scope: !1415)
!1415 = distinct !DILexicalBlock(scope: !1413, file: !1373, line: 43, column: 2)
!1416 = !DILocation(line: 46, column: 28, scope: !1417)
!1417 = distinct !DILexicalBlock(scope: !1415, file: !1373, line: 45, column: 3)
!1418 = !DILocation(line: 46, column: 52, scope: !1417)
!1419 = !DILocation(line: 159, column: 6, scope: !1420, inlinedAt: !1421)
!1420 = distinct !DISubprogram(name: "free_aligned", linkageName: "free_aligned", scope: !28, file: !28, line: 157, scopeLine: 157, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1421 = !DILocation(line: 46, column: 4, scope: !1417)
!1422 = !DILocation(line: 159, column: 18, scope: !1420, inlinedAt: !1421)
!1423 = !DILocation(line: 163, column: 20, scope: !1420, inlinedAt: !1421)
!1424 = !DILocation(line: 163, column: 2, scope: !1420, inlinedAt: !1421)
!1425 = !DILocation(line: 50, column: 20, scope: !1426)
!1426 = distinct !DILexicalBlock(scope: !1415, file: !1373, line: 49, column: 3)
!1427 = !DILocation(line: 50, column: 44, scope: !1426)
!1428 = !DILocation(line: 118, column: 6, scope: !1429, inlinedAt: !1430)
!1429 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !28, file: !28, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1430 = !DILocation(line: 50, column: 4, scope: !1426)
!1431 = !DILocation(line: 118, column: 18, scope: !1429, inlinedAt: !1430)
!1432 = !DILocation(line: 122, column: 20, scope: !1429, inlinedAt: !1430)
!1433 = !DILocation(line: 122, column: 2, scope: !1429, inlinedAt: !1430)
!1434 = !DILocalVariable(name: "old", scope: !1415, file: !1373, line: 52, type: !36, align: 8)
!1435 = !DILocation(line: 52, column: 9, scope: !1415)
!1436 = !DILocation(line: 52, column: 15, scope: !1415)
!1437 = !DILocation(line: 53, column: 11, scope: !1415)
!1438 = !DILocation(line: 54, column: 19, scope: !1415)
!1439 = !DILocation(line: 118, column: 6, scope: !1440, inlinedAt: !1441)
!1440 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !28, file: !28, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1441 = !DILocation(line: 54, column: 3, scope: !1415)
!1442 = !DILocation(line: 118, column: 18, scope: !1440, inlinedAt: !1441)
!1443 = !DILocation(line: 122, column: 20, scope: !1440, inlinedAt: !1441)
!1444 = !DILocation(line: 122, column: 2, scope: !1440, inlinedAt: !1441)
!1445 = !DILocation(line: 56, column: 2, scope: !1402)
!1446 = !DILocation(line: 56, column: 15, scope: !1402)
!1447 = !DILocation(line: 57, column: 2, scope: !1402)
!1448 = !DILocation(line: 57, column: 14, scope: !1402)
!1449 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.OnStackAllocator.release", scope: !1373, file: !1373, line: 69, type: !1450, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1450 = !DISubroutineType(types: !1451)
!1451 = !{null, !1376, !36, !67}
!1452 = !DILocation(line: 70, column: 1, scope: !1449)
!1453 = !DILocalVariable(name: "self", arg: 1, scope: !1449, file: !1373, line: 69, type: !1376)
!1454 = !DILocation(line: 69, column: 34, scope: !1449)
!1455 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !1449, file: !1373, line: 69, type: !36)
!1456 = !DILocation(line: 69, column: 47, scope: !1449)
!1457 = !DILocalVariable(name: "aligned", arg: 3, scope: !1449, file: !1373, line: 69, type: !67)
!1458 = !DILocation(line: 69, column: 65, scope: !1449)
!1459 = !DILocation(line: 67, column: 11, scope: !1460)
!1460 = distinct !DILexicalBlock(scope: !1449, file: !1373, line: 70, column: 1)
!1461 = !DILocation(line: 71, column: 36, scope: !1449)
!1462 = !DILocation(line: 71, column: 6, scope: !1449)
!1463 = !DILocation(line: 71, column: 56, scope: !1449)
!1464 = !DILocation(line: 72, column: 40, scope: !1449)
!1465 = !DILocation(line: 72, column: 2, scope: !1449)
!1466 = !DILocation(line: 73, column: 2, scope: !1449)
!1467 = !DILocation(line: 73, column: 33, scope: !1449)
!1468 = !DILocation(line: 73, column: 46, scope: !1449)
!1469 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.OnStackAllocator.resize", scope: !1373, file: !1373, line: 115, type: !1470, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1470 = !DISubroutineType(types: !1471)
!1471 = !{!216, !218, !1376, !36, !8, !8}
!1472 = !DILocation(line: 116, column: 1, scope: !1469)
!1473 = !DILocalVariable(name: "self", arg: 1, scope: !1469, file: !1373, line: 115, type: !1376)
!1474 = !DILocation(line: 115, column: 35, scope: !1469)
!1475 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !1469, file: !1373, line: 115, type: !36)
!1476 = !DILocation(line: 115, column: 48, scope: !1469)
!1477 = !DILocalVariable(name: "size", arg: 3, scope: !1469, file: !1373, line: 115, type: !12)
!1478 = !DILocation(line: 115, column: 65, scope: !1469)
!1479 = !DILocalVariable(name: "alignment", arg: 4, scope: !1469, file: !1373, line: 115, type: !12)
!1480 = !DILocation(line: 115, column: 75, scope: !1469)
!1481 = !DILocation(line: 111, column: 11, scope: !1482)
!1482 = distinct !DILexicalBlock(scope: !1469, file: !1373, line: 116, column: 1)
!1483 = !DILocation(line: 112, column: 11, scope: !1482)
!1484 = !DILocation(line: 113, column: 11, scope: !1482)
!1485 = !DILocation(line: 117, column: 37, scope: !1469)
!1486 = !DILocation(line: 117, column: 7, scope: !1469)
!1487 = !DILocalVariable(name: "chunk", scope: !1488, file: !1373, line: 119, type: !1383, align: 8)
!1488 = distinct !DILexicalBlock(scope: !1469, file: !1373, line: 118, column: 2)
!1489 = !DILocation(line: 119, column: 31, scope: !1488)
!1490 = !DILocation(line: 119, column: 75, scope: !1488)
!1491 = !DILocation(line: 119, column: 39, scope: !1488)
!1492 = !DILocation(line: 120, column: 10, scope: !1488)
!1493 = !DILocation(line: 121, column: 10, scope: !1488)
!1494 = !DILocation(line: 121, column: 23, scope: !1488)
!1495 = !DILocation(line: 121, column: 53, scope: !1488)
!1496 = !DILocation(line: 121, column: 66, scope: !1488)
!1497 = !DILocation(line: 121, column: 72, scope: !1488)
!1498 = !DILocation(line: 47, column: 12, scope: !1488)
!1499 = !DILocation(line: 973, column: 9, scope: !1500, inlinedAt: !1501)
!1500 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1501 = !DILocation(line: 47, column: 26, scope: !1488)
!1502 = !DILocation(line: 973, column: 20, scope: !1500, inlinedAt: !1501)
!1503 = !DILocation(line: 973, column: 25, scope: !1500, inlinedAt: !1501)
!1504 = !DILocalVariable(name: "header", scope: !1469, file: !1373, line: 124, type: !1505, align: 8)
!1505 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OnStackAllocatorHeader*", baseType: !1506, size: 64, align: 64, dwarfAddressSpace: 0)
!1506 = !DICompositeType(tag: DW_TAG_structure_type, name: "OnStackAllocatorHeader", scope: !1373, file: !1373, line: 60, size: 64, align: 64, elements: !1507, identifier: "std.core.mem.allocator.OnStackAllocatorHeader")
!1507 = !{!1508, !1509}
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1506, file: !1373, line: 62, baseType: !12, size: 64, align: 64)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1506, file: !1373, line: 63, baseType: !61, align: 8, offset: 64)
!1510 = !DILocation(line: 124, column: 26, scope: !1469)
!1511 = !DILocation(line: 124, column: 35, scope: !1469)
!1512 = !DILocation(line: 124, column: 49, scope: !1469)
!1513 = !DILocalVariable(name: "old_size", scope: !1469, file: !1373, line: 125, type: !12, align: 8)
!1514 = !DILocation(line: 125, column: 6, scope: !1469)
!1515 = !DILocation(line: 125, column: 17, scope: !1469)
!1516 = !DILocalVariable(name: "mem", scope: !1469, file: !1373, line: 126, type: !36, align: 8)
!1517 = !DILocation(line: 126, column: 8, scope: !1469)
!1518 = !DILocation(line: 126, column: 14, scope: !1469)
!1519 = !DILocation(line: 126, column: 27, scope: !1469)
!1520 = !DILocation(line: 126, column: 42, scope: !1469)
!1521 = !DILocation(line: 329, column: 23, scope: !1522, inlinedAt: !1524)
!1522 = distinct !DILexicalBlock(scope: !1523, file: !166, line: 330, column: 1)
!1523 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !166, file: !166, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1524 = !DILocation(line: 127, column: 2, scope: !1469)
!1525 = !DILocation(line: 326, column: 11, scope: !1522, inlinedAt: !1524)
!1526 = !DILocation(line: 326, column: 26, scope: !1522, inlinedAt: !1524)
!1527 = !DILocation(line: 127, column: 2, scope: !1522, inlinedAt: !1524)
!1528 = !DILocation(line: 327, column: 11, scope: !1522, inlinedAt: !1524)
!1529 = !DILocation(line: 327, column: 23, scope: !1522, inlinedAt: !1524)
!1530 = !DILocation(line: 327, column: 29, scope: !1522, inlinedAt: !1524)
!1531 = !DILocation(line: 327, column: 36, scope: !1522, inlinedAt: !1524)
!1532 = !DILocation(line: 327, column: 43, scope: !1522, inlinedAt: !1524)
!1533 = !DILocation(line: 327, column: 49, scope: !1522, inlinedAt: !1524)
!1534 = !DILocation(line: 327, column: 56, scope: !1522, inlinedAt: !1524)
!1535 = !DILocation(line: 331, column: 11, scope: !1523, inlinedAt: !1524)
!1536 = !DILocation(line: 331, column: 16, scope: !1523, inlinedAt: !1524)
!1537 = !DILocation(line: 331, column: 21, scope: !1523, inlinedAt: !1524)
!1538 = !DILocation(line: 331, column: 26, scope: !1523, inlinedAt: !1524)
!1539 = !DILocation(line: 128, column: 9, scope: !1469)
!1540 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.OnStackAllocator.acquire", scope: !1373, file: !1373, line: 135, type: !1541, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1541 = !DISubroutineType(types: !1542)
!1542 = !{!216, !218, !1376, !8, !92, !8}
!1543 = !DILocation(line: 136, column: 1, scope: !1540)
!1544 = !DILocalVariable(name: "self", arg: 1, scope: !1540, file: !1373, line: 135, type: !1376)
!1545 = !DILocation(line: 135, column: 36, scope: !1540)
!1546 = !DILocalVariable(name: "size", arg: 2, scope: !1540, file: !1373, line: 135, type: !12)
!1547 = !DILocation(line: 135, column: 47, scope: !1540)
!1548 = !DILocalVariable(name: "init_type", arg: 3, scope: !1540, file: !1373, line: 135, type: !92)
!1549 = !DILocation(line: 135, column: 67, scope: !1540)
!1550 = !DILocalVariable(name: "alignment", arg: 4, scope: !1540, file: !1373, line: 135, type: !12)
!1551 = !DILocation(line: 135, column: 82, scope: !1540)
!1552 = !DILocation(line: 132, column: 11, scope: !1553)
!1553 = distinct !DILexicalBlock(scope: !1540, file: !1373, line: 136, column: 1)
!1554 = !DILocation(line: 133, column: 11, scope: !1553)
!1555 = !DILocalVariable(name: "aligned", scope: !1540, file: !1373, line: 137, type: !67, align: 1)
!1556 = !DILocation(line: 137, column: 7, scope: !1540)
!1557 = !DILocation(line: 137, column: 17, scope: !1540)
!1558 = !DILocation(line: 138, column: 39, scope: !1540)
!1559 = !DILocation(line: 138, column: 14, scope: !1540)
!1560 = !DILocalVariable(name: "total_len", scope: !1540, file: !1373, line: 139, type: !12, align: 8)
!1561 = !DILocation(line: 139, column: 6, scope: !1540)
!1562 = !DILocation(line: 139, column: 18, scope: !1540)
!1563 = !DILocalVariable(name: "start_mem", scope: !1540, file: !1373, line: 140, type: !36, align: 8)
!1564 = !DILocation(line: 140, column: 8, scope: !1540)
!1565 = !DILocation(line: 140, column: 20, scope: !1540)
!1566 = !DILocalVariable(name: "unaligned_pointer_to_offset", scope: !1540, file: !1373, line: 141, type: !36, align: 8)
!1567 = !DILocation(line: 141, column: 8, scope: !1540)
!1568 = !DILocation(line: 141, column: 38, scope: !1540)
!1569 = !DILocation(line: 141, column: 50, scope: !1540)
!1570 = !DILocalVariable(name: "mem", scope: !1540, file: !1373, line: 142, type: !36, align: 8)
!1571 = !DILocation(line: 142, column: 8, scope: !1540)
!1572 = !DILocation(line: 290, column: 37, scope: !1573, inlinedAt: !1574)
!1573 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !166, file: !166, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1574 = !DILocation(line: 142, column: 14, scope: !1540)
!1575 = !DILocation(line: 290, column: 48, scope: !1573, inlinedAt: !1574)
!1576 = !DILocation(line: 973, column: 9, scope: !1577, inlinedAt: !1578)
!1577 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1578 = !DILocation(line: 290, column: 22, scope: !1573, inlinedAt: !1574)
!1579 = !DILocation(line: 973, column: 20, scope: !1577, inlinedAt: !1578)
!1580 = !DILocation(line: 973, column: 25, scope: !1577, inlinedAt: !1578)
!1581 = !DILocation(line: 290, column: 9, scope: !1573, inlinedAt: !1574)
!1582 = !DILocalVariable(name: "end", scope: !1540, file: !1373, line: 143, type: !12, align: 8)
!1583 = !DILocation(line: 143, column: 6, scope: !1540)
!1584 = !DILocation(line: 143, column: 18, scope: !1540)
!1585 = !DILocation(line: 143, column: 24, scope: !1540)
!1586 = !DILocation(line: 143, column: 12, scope: !1540)
!1587 = !DILocation(line: 143, column: 41, scope: !1540)
!1588 = !DILocalVariable(name: "backing_allocator", scope: !1540, file: !1373, line: 144, type: !33, align: 8)
!1589 = !DILocation(line: 144, column: 12, scope: !1540)
!1590 = !DILocation(line: 144, column: 32, scope: !1540)
!1591 = !DILocation(line: 146, column: 6, scope: !1540)
!1592 = !DILocation(line: 146, column: 12, scope: !1540)
!1593 = !DILocalVariable(name: "chunk", scope: !1594, file: !1373, line: 148, type: !1383, align: 8)
!1594 = distinct !DILexicalBlock(scope: !1540, file: !1373, line: 147, column: 2)
!1595 = !DILocation(line: 148, column: 31, scope: !1594)
!1596 = !DILocation(line: 79, column: 6, scope: !1597, inlinedAt: !1598)
!1597 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !28, file: !28, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1598 = !DILocation(line: 236, column: 17, scope: !1599, inlinedAt: !1600)
!1599 = distinct !DISubprogram(name: "alloc_try", linkageName: "alloc_try", scope: !28, file: !28, line: 234, scopeLine: 234, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1600 = !DILocation(line: 148, column: 39, scope: !1594)
!1601 = !DILocation(line: 79, column: 20, scope: !1597, inlinedAt: !1598)
!1602 = !DILocation(line: 85, column: 28, scope: !1597, inlinedAt: !1598)
!1603 = !DILocation(line: 37, column: 12, scope: !1597, inlinedAt: !1598)
!1604 = !DILocation(line: 973, column: 9, scope: !1605, inlinedAt: !1606)
!1605 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1606 = !DILocation(line: 37, column: 26, scope: !1597, inlinedAt: !1598)
!1607 = !DILocation(line: 973, column: 20, scope: !1605, inlinedAt: !1606)
!1608 = !DILocation(line: 973, column: 25, scope: !1605, inlinedAt: !1606)
!1609 = !DILocation(line: 85, column: 10, scope: !1597, inlinedAt: !1598)
!1610 = !DILocation(line: 151, column: 4, scope: !1594)
!1611 = !DILocation(line: 151, column: 22, scope: !1594)
!1612 = !DILocation(line: 151, column: 48, scope: !1594)
!1613 = !DILocation(line: 152, column: 10, scope: !1594)
!1614 = !DILocation(line: 152, column: 49, scope: !1594)
!1615 = !DILocation(line: 152, column: 55, scope: !1594)
!1616 = !DILocation(line: 152, column: 66, scope: !1594)
!1617 = !DILocation(line: 152, column: 76, scope: !1594)
!1618 = !DILocation(line: 152, column: 88, scope: !1594)
!1619 = !DILocation(line: 37, column: 12, scope: !1594)
!1620 = !DILocation(line: 973, column: 9, scope: !1621, inlinedAt: !1622)
!1621 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1622 = !DILocation(line: 37, column: 26, scope: !1594)
!1623 = !DILocation(line: 973, column: 20, scope: !1621, inlinedAt: !1622)
!1624 = !DILocation(line: 973, column: 25, scope: !1621, inlinedAt: !1622)
!1625 = !DILocation(line: 152, column: 23, scope: !1594)
!1626 = !DILocation(line: 149, column: 50, scope: !1627)
!1627 = distinct !DILexicalBlock(scope: !1594, file: !1373, line: 149, column: 15)
!1628 = !DILocation(line: 118, column: 6, scope: !1629, inlinedAt: !1630)
!1629 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !28, file: !28, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1630 = !DILocation(line: 149, column: 15, scope: !1627)
!1631 = !DILocation(line: 118, column: 18, scope: !1629, inlinedAt: !1630)
!1632 = !DILocation(line: 122, column: 20, scope: !1629, inlinedAt: !1630)
!1633 = !DILocation(line: 122, column: 2, scope: !1629, inlinedAt: !1630)
!1634 = !DILocation(line: 150, column: 13, scope: !1635)
!1635 = distinct !DILexicalBlock(scope: !1594, file: !1373, line: 150, column: 13)
!1636 = !DILocation(line: 150, column: 26, scope: !1635)
!1637 = !DILocation(line: 154, column: 2, scope: !1540)
!1638 = !DILocation(line: 154, column: 14, scope: !1540)
!1639 = !DILocalVariable(name: "header", scope: !1540, file: !1373, line: 155, type: !1505, align: 8)
!1640 = !DILocation(line: 155, column: 26, scope: !1540)
!1641 = !DILocation(line: 155, column: 35, scope: !1540)
!1642 = !DILocation(line: 155, column: 41, scope: !1540)
!1643 = !DILocation(line: 156, column: 2, scope: !1540)
!1644 = !DILocation(line: 156, column: 16, scope: !1540)
!1645 = !DILocation(line: 157, column: 9, scope: !1540)
!1646 = distinct !DISubprogram(name: "allocation_in_stack_mem", linkageName: "std.core.mem.allocator.allocation_in_stack_mem", scope: !1373, file: !1373, line: 76, type: !1647, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1647 = !DISubroutineType(types: !1648)
!1648 = !{!67, !1376, !36}
!1649 = !DILocalVariable(name: "a", arg: 1, scope: !1646, file: !1373, line: 76, type: !1376)
!1650 = !DILocation(line: 76, column: 51, scope: !1646)
!1651 = !DILocalVariable(name: "ptr", arg: 2, scope: !1646, file: !1373, line: 76, type: !36)
!1652 = !DILocation(line: 76, column: 60, scope: !1646)
!1653 = !DILocation(line: 78, column: 9, scope: !1646)
!1654 = !DILocation(line: 78, column: 16, scope: !1646)
!1655 = !DILocation(line: 78, column: 30, scope: !1646)
!1656 = !DILocation(line: 78, column: 38, scope: !1646)
!1657 = !DILocation(line: 78, column: 46, scope: !1646)
!1658 = distinct !DISubprogram(name: "on_stack_allocator_remove_chunk", linkageName: "std.core.mem.allocator.on_stack_allocator_remove_chunk", scope: !1373, file: !1373, line: 81, type: !1659, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1659 = !DISubroutineType(types: !1660)
!1660 = !{null, !1376, !36}
!1661 = !DILocalVariable(name: "a", arg: 1, scope: !1658, file: !1373, line: 81, type: !1376)
!1662 = !DILocation(line: 81, column: 59, scope: !1658)
!1663 = !DILocalVariable(name: "ptr", arg: 2, scope: !1658, file: !1373, line: 81, type: !36)
!1664 = !DILocation(line: 81, column: 68, scope: !1658)
!1665 = !DILocalVariable(name: "chunk", scope: !1658, file: !1373, line: 83, type: !1383, align: 8)
!1666 = !DILocation(line: 83, column: 30, scope: !1658)
!1667 = !DILocation(line: 83, column: 38, scope: !1658)
!1668 = !DILocalVariable(name: "addr", scope: !1658, file: !1373, line: 84, type: !1669, align: 8)
!1669 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OnStackAllocatorExtraChunk**", baseType: !1383, size: 64, align: 64, dwarfAddressSpace: 0)
!1670 = !DILocation(line: 84, column: 31, scope: !1658)
!1671 = !DILocation(line: 84, column: 39, scope: !1658)
!1672 = !DILocation(line: 85, column: 2, scope: !1658)
!1673 = !DILocation(line: 85, column: 9, scope: !1674)
!1674 = distinct !DILexicalBlock(scope: !1658, file: !1373, line: 85, column: 2)
!1675 = !DILocation(line: 87, column: 7, scope: !1676)
!1676 = distinct !DILexicalBlock(scope: !1674, file: !1373, line: 86, column: 2)
!1677 = !DILocation(line: 87, column: 21, scope: !1676)
!1678 = !DILocation(line: 89, column: 5, scope: !1679)
!1679 = distinct !DILexicalBlock(scope: !1676, file: !1373, line: 88, column: 3)
!1680 = !DILocation(line: 89, column: 12, scope: !1679)
!1681 = !DILocation(line: 90, column: 20, scope: !1679)
!1682 = !DILocation(line: 90, column: 41, scope: !1679)
!1683 = !DILocation(line: 118, column: 6, scope: !1684, inlinedAt: !1685)
!1684 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !28, file: !28, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1685 = !DILocation(line: 90, column: 4, scope: !1679)
!1686 = !DILocation(line: 118, column: 18, scope: !1684, inlinedAt: !1685)
!1687 = !DILocation(line: 122, column: 20, scope: !1684, inlinedAt: !1685)
!1688 = !DILocation(line: 122, column: 2, scope: !1684, inlinedAt: !1685)
!1689 = !DILocation(line: 91, column: 10, scope: !1679)
!1690 = !DILocation(line: 93, column: 11, scope: !1676)
!1691 = !DILocation(line: 94, column: 12, scope: !1676)
!1692 = !DILocation(line: 206, column: 33, scope: !1693, inlinedAt: !1694)
!1693 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !307, file: !307, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1694 = !DILocation(line: 96, column: 2, scope: !1658)
!1695 = !DILocation(line: 206, column: 2, scope: !1693, inlinedAt: !1694)
!1696 = !DILocation(line: 208, column: 2, scope: !1693, inlinedAt: !1694)
!1697 = distinct !DISubprogram(name: "on_stack_allocator_find_chunk", linkageName: "std.core.mem.allocator.on_stack_allocator_find_chunk", scope: !1373, file: !1373, line: 99, type: !1698, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1698 = !DISubroutineType(types: !1699)
!1699 = !{!1383, !1376, !36}
!1700 = !DILocalVariable(name: "a", arg: 1, scope: !1697, file: !1373, line: 99, type: !1376)
!1701 = !DILocation(line: 99, column: 80, scope: !1697)
!1702 = !DILocalVariable(name: "ptr", arg: 2, scope: !1697, file: !1373, line: 99, type: !36)
!1703 = !DILocation(line: 99, column: 89, scope: !1697)
!1704 = !DILocalVariable(name: "chunk", scope: !1697, file: !1373, line: 101, type: !1383, align: 8)
!1705 = !DILocation(line: 101, column: 30, scope: !1697)
!1706 = !DILocation(line: 101, column: 38, scope: !1697)
!1707 = !DILocation(line: 102, column: 2, scope: !1697)
!1708 = !DILocation(line: 102, column: 9, scope: !1709)
!1709 = distinct !DILexicalBlock(scope: !1697, file: !1373, line: 102, column: 2)
!1710 = !DILocation(line: 104, column: 7, scope: !1711)
!1711 = distinct !DILexicalBlock(scope: !1709, file: !1373, line: 103, column: 2)
!1712 = !DILocation(line: 104, column: 21, scope: !1711)
!1713 = !DILocation(line: 104, column: 33, scope: !1711)
!1714 = !DILocation(line: 105, column: 11, scope: !1711)
!1715 = !DILocation(line: 107, column: 9, scope: !1697)
!1716 = distinct !DISubprogram(name: "destroy", linkageName: "std.core.mem.allocator.BackedArenaAllocator.destroy", scope: !11, file: !11, line: 56, type: !1717, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1717 = !DISubroutineType(types: !1718)
!1718 = !{null, !1719}
!1719 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BackedArenaAllocator*", baseType: !1720, size: 64, align: 64, dwarfAddressSpace: 0)
!1720 = !DICompositeType(tag: DW_TAG_structure_type, name: "BackedArenaAllocator", scope: !11, file: !11, line: 13, size: 320, align: 64, elements: !1721, identifier: "std.core.mem.allocator.BackedArenaAllocator")
!1721 = !{!1722, !1723, !1733, !1734, !1735}
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !1720, file: !11, line: 15, baseType: !33, size: 128, align: 64)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !1720, file: !11, line: 16, baseType: !1724, size: 64, align: 64, offset: 128)
!1724 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ExtraPage*", baseType: !1725, size: 64, align: 64, dwarfAddressSpace: 0)
!1725 = !DICompositeType(tag: DW_TAG_structure_type, name: "ExtraPage", scope: !11, file: !11, line: 30, size: 320, align: 64, elements: !1726, identifier: "std.core.mem.allocator.ExtraPage")
!1726 = !{!1727, !1728, !1729, !1730, !1731, !1732}
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !1725, file: !11, line: 32, baseType: !1724, size: 64, align: 64)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !1725, file: !11, line: 33, baseType: !36, size: 64, align: 64, offset: 64)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "mark", scope: !1725, file: !11, line: 34, baseType: !12, size: 64, align: 64, offset: 128)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1725, file: !11, line: 35, baseType: !12, size: 64, align: 64, offset: 192)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !1725, file: !11, line: 36, baseType: !12, size: 64, align: 64, offset: 256)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1725, file: !11, line: 37, baseType: !61, align: 8, offset: 320)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1720, file: !11, line: 17, baseType: !12, size: 64, align: 64, offset: 192)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1720, file: !11, line: 18, baseType: !12, size: 64, align: 64, offset: 256)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1720, file: !11, line: 19, baseType: !61, align: 8, offset: 320)
!1736 = !DILocation(line: 57, column: 1, scope: !1716)
!1737 = !DILocalVariable(name: "self", arg: 1, scope: !1716, file: !11, line: 56, type: !1719)
!1738 = !DILocation(line: 56, column: 38, scope: !1716)
!1739 = !DILocation(line: 58, column: 13, scope: !1716)
!1740 = !DILocation(line: 58, column: 2, scope: !1716)
!1741 = !DILocation(line: 59, column: 6, scope: !1716)
!1742 = !DILocation(line: 59, column: 44, scope: !1716)
!1743 = !DILocation(line: 59, column: 22, scope: !1716)
!1744 = !DILocation(line: 60, column: 18, scope: !1716)
!1745 = !DILocation(line: 60, column: 42, scope: !1716)
!1746 = !DILocation(line: 118, column: 6, scope: !1747, inlinedAt: !1748)
!1747 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !28, file: !28, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1748 = !DILocation(line: 60, column: 2, scope: !1716)
!1749 = !DILocation(line: 118, column: 18, scope: !1747, inlinedAt: !1748)
!1750 = !DILocation(line: 122, column: 20, scope: !1747, inlinedAt: !1748)
!1751 = !DILocation(line: 122, column: 2, scope: !1747, inlinedAt: !1748)
!1752 = distinct !DISubprogram(name: "mark", linkageName: "std.core.mem.allocator.BackedArenaAllocator.mark", scope: !11, file: !11, line: 63, type: !1753, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1753 = !DISubroutineType(types: !1754)
!1754 = !{!12, !1719}
!1755 = !DILocation(line: 63, column: 44, scope: !1752)
!1756 = !DILocalVariable(name: "self", arg: 1, scope: !1752, file: !11, line: 63, type: !1719)
!1757 = !DILocation(line: 63, column: 34, scope: !1752)
!1758 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.BackedArenaAllocator.release", scope: !11, file: !11, line: 65, type: !1759, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1759 = !DISubroutineType(types: !1760)
!1760 = !{null, !1719, !36, !67}
!1761 = !DILocation(line: 66, column: 1, scope: !1758)
!1762 = !DILocalVariable(name: "self", arg: 1, scope: !1758, file: !11, line: 65, type: !1719)
!1763 = !DILocation(line: 65, column: 38, scope: !1758)
!1764 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !1758, file: !11, line: 65, type: !36)
!1765 = !DILocation(line: 65, column: 51, scope: !1758)
!1766 = !DILocalVariable(name: ".anon", arg: 3, scope: !1758, file: !11, line: 65, type: !67)
!1767 = !DILocation(line: 65, column: 64, scope: !1758)
!1768 = !DILocalVariable(name: "old_size", scope: !1758, file: !11, line: 67, type: !12, align: 8)
!1769 = !DILocation(line: 67, column: 6, scope: !1758)
!1770 = !DILocation(line: 67, column: 25, scope: !1758)
!1771 = !DILocation(line: 67, column: 39, scope: !1758)
!1772 = !DILocation(line: 67, column: 18, scope: !1758)
!1773 = !DILocation(line: 68, column: 6, scope: !1758)
!1774 = !DILocation(line: 68, column: 20, scope: !1758)
!1775 = !DILocation(line: 68, column: 33, scope: !1758)
!1776 = !DILocation(line: 68, column: 43, scope: !1758)
!1777 = !DILocation(line: 70, column: 3, scope: !1778)
!1778 = distinct !DILexicalBlock(scope: !1758, file: !11, line: 69, column: 2)
!1779 = !DILocation(line: 70, column: 16, scope: !1778)
!1780 = !DILocation(line: 71, column: 31, scope: !1778)
!1781 = !DILocation(line: 71, column: 41, scope: !1778)
!1782 = !DILocation(line: 34, column: 2, scope: !1783, inlinedAt: !1785)
!1783 = distinct !DISubprogram(name: "poison_memory_region", linkageName: "poison_memory_region", scope: !1784, file: !1784, line: 32, scopeLine: 32, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1784 = !DIFile(filename: "asan.c3", directory: "/usr/lib/c3c/lib/std/core/sanitizer")
!1785 = !DILocation(line: 71, column: 3, scope: !1778)
!1786 = distinct !DISubprogram(name: "reset", linkageName: "std.core.mem.allocator.BackedArenaAllocator.reset", scope: !11, file: !11, line: 74, type: !1787, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1787 = !DISubroutineType(types: !1788)
!1788 = !{null, !1719, !8}
!1789 = !DILocation(line: 75, column: 1, scope: !1786)
!1790 = !DILocalVariable(name: "self", arg: 1, scope: !1786, file: !11, line: 74, type: !1719)
!1791 = !DILocation(line: 74, column: 36, scope: !1786)
!1792 = !DILocalVariable(name: "mark", arg: 2, scope: !1786, file: !11, line: 74, type: !12)
!1793 = !DILocation(line: 74, column: 47, scope: !1786)
!1794 = !DILocalVariable(name: "last_page", scope: !1786, file: !11, line: 76, type: !1724, align: 8)
!1795 = !DILocation(line: 76, column: 13, scope: !1786)
!1796 = !DILocation(line: 76, column: 25, scope: !1786)
!1797 = !DILocation(line: 77, column: 2, scope: !1786)
!1798 = !DILocation(line: 77, column: 9, scope: !1799)
!1799 = distinct !DILexicalBlock(scope: !1786, file: !11, line: 77, column: 2)
!1800 = !DILocation(line: 77, column: 22, scope: !1799)
!1801 = !DILocation(line: 77, column: 39, scope: !1799)
!1802 = !DILocation(line: 79, column: 3, scope: !1803)
!1803 = distinct !DILexicalBlock(scope: !1799, file: !11, line: 78, column: 2)
!1804 = !DILocation(line: 79, column: 15, scope: !1803)
!1805 = !DILocalVariable(name: "to_free", scope: !1803, file: !11, line: 80, type: !1724, align: 8)
!1806 = !DILocation(line: 80, column: 14, scope: !1803)
!1807 = !DILocation(line: 80, column: 24, scope: !1803)
!1808 = !DILocation(line: 81, column: 15, scope: !1803)
!1809 = !DILocation(line: 82, column: 19, scope: !1803)
!1810 = !DILocation(line: 82, column: 3, scope: !1803)
!1811 = !DILocation(line: 84, column: 2, scope: !1786)
!1812 = !DILocation(line: 84, column: 19, scope: !1786)
!1813 = !DILocation(line: 86, column: 7, scope: !1786)
!1814 = !DILocalVariable(name: "cleaned", scope: !1815, file: !11, line: 88, type: !12, align: 8)
!1815 = distinct !DILexicalBlock(scope: !1786, file: !11, line: 87, column: 3)
!1816 = !DILocation(line: 88, column: 8, scope: !1815)
!1817 = !DILocation(line: 88, column: 18, scope: !1815)
!1818 = !DILocation(line: 88, column: 30, scope: !1815)
!1819 = !DILocation(line: 89, column: 8, scope: !1815)
!1820 = !DILocation(line: 92, column: 6, scope: !1821)
!1821 = distinct !DILexicalBlock(scope: !1815, file: !11, line: 90, column: 4)
!1822 = !DILocation(line: 92, column: 16, scope: !1821)
!1823 = !DILocation(line: 92, column: 23, scope: !1821)
!1824 = !DILocation(line: 94, column: 33, scope: !1821)
!1825 = !DILocation(line: 94, column: 43, scope: !1821)
!1826 = !DILocation(line: 34, column: 2, scope: !1827, inlinedAt: !1828)
!1827 = distinct !DISubprogram(name: "poison_memory_region", linkageName: "poison_memory_region", scope: !1784, file: !1784, line: 32, scopeLine: 32, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1828 = !DILocation(line: 94, column: 5, scope: !1821)
!1829 = !DILocation(line: 98, column: 2, scope: !1786)
!1830 = !DILocation(line: 98, column: 14, scope: !1786)
!1831 = distinct !DISubprogram(name: "_free_page", linkageName: "std.core.mem.allocator.BackedArenaAllocator._free_page", scope: !11, file: !11, line: 101, type: !1832, scopeLine: 101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1832 = !DISubroutineType(types: !1833)
!1833 = !{!216, !36, !1719, !1724}
!1834 = !DILocation(line: 102, column: 1, scope: !1831)
!1835 = !DILocalVariable(name: "self", arg: 1, scope: !1831, file: !11, line: 101, type: !1719)
!1836 = !DILocation(line: 101, column: 42, scope: !1831)
!1837 = !DILocalVariable(name: "page", arg: 2, scope: !1831, file: !11, line: 101, type: !1724)
!1838 = !DILocation(line: 101, column: 60, scope: !1831)
!1839 = !DILocalVariable(name: "mem", scope: !1831, file: !11, line: 103, type: !36, align: 8)
!1840 = !DILocation(line: 103, column: 8, scope: !1831)
!1841 = !DILocation(line: 103, column: 14, scope: !1831)
!1842 = !DILocation(line: 104, column: 9, scope: !1831)
!1843 = !DILocation(line: 104, column: 40, scope: !1831)
!1844 = !DILocation(line: 41, column: 33, scope: !1845, inlinedAt: !1847)
!1845 = distinct !DILexicalBlock(scope: !1846, file: !11, line: 41, column: 43)
!1846 = distinct !DISubprogram(name: "is_aligned", linkageName: "is_aligned", scope: !11, file: !11, line: 41, scopeLine: 41, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1847 = !DILocation(line: 104, column: 45, scope: !1831)
!1848 = !DILocation(line: 41, column: 43, scope: !1846, inlinedAt: !1847)
!1849 = distinct !DISubprogram(name: "_realloc_page", linkageName: "std.core.mem.allocator.BackedArenaAllocator._realloc_page", scope: !11, file: !11, line: 107, type: !1850, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1850 = !DISubroutineType(types: !1851)
!1851 = !{!216, !218, !1719, !1724, !8, !8}
!1852 = !DILocation(line: 108, column: 1, scope: !1849)
!1853 = !DILocalVariable(name: "self", arg: 1, scope: !1849, file: !11, line: 107, type: !1719)
!1854 = !DILocation(line: 107, column: 46, scope: !1849)
!1855 = !DILocalVariable(name: "page", arg: 2, scope: !1849, file: !11, line: 107, type: !1724)
!1856 = !DILocation(line: 107, column: 64, scope: !1849)
!1857 = !DILocalVariable(name: "size", arg: 3, scope: !1849, file: !11, line: 107, type: !12)
!1858 = !DILocation(line: 107, column: 74, scope: !1849)
!1859 = !DILocalVariable(name: "alignment", arg: 4, scope: !1849, file: !11, line: 107, type: !12)
!1860 = !DILocation(line: 107, column: 84, scope: !1849)
!1861 = !DILocalVariable(name: "real_pointer", scope: !1849, file: !11, line: 110, type: !36, align: 8)
!1862 = !DILocation(line: 110, column: 8, scope: !1849)
!1863 = !DILocation(line: 110, column: 23, scope: !1849)
!1864 = !DILocalVariable(name: "pointer_to_prev", scope: !1849, file: !11, line: 113, type: !1865, align: 8)
!1865 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ExtraPage**", baseType: !1724, size: 64, align: 64, dwarfAddressSpace: 0)
!1866 = !DILocation(line: 113, column: 14, scope: !1849)
!1867 = !DILocation(line: 113, column: 33, scope: !1849)
!1868 = !DILocation(line: 115, column: 2, scope: !1849)
!1869 = !DILocation(line: 115, column: 10, scope: !1870)
!1870 = distinct !DILexicalBlock(scope: !1849, file: !11, line: 115, column: 2)
!1871 = !DILocation(line: 115, column: 29, scope: !1870)
!1872 = !DILocation(line: 115, column: 9, scope: !1870)
!1873 = !DILocation(line: 117, column: 25, scope: !1874)
!1874 = distinct !DILexicalBlock(scope: !1870, file: !11, line: 116, column: 2)
!1875 = !DILocation(line: 119, column: 3, scope: !1849)
!1876 = !DILocation(line: 119, column: 21, scope: !1849)
!1877 = !DILocalVariable(name: "page_size", scope: !1849, file: !11, line: 120, type: !12, align: 8)
!1878 = !DILocation(line: 120, column: 6, scope: !1849)
!1879 = !DILocation(line: 40, column: 30, scope: !1880, inlinedAt: !1882)
!1880 = distinct !DILexicalBlock(scope: !1881, file: !11, line: 40, column: 40)
!1881 = distinct !DISubprogram(name: "pagesize", linkageName: "pagesize", scope: !11, file: !11, line: 40, scopeLine: 40, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1882 = !DILocation(line: 120, column: 18, scope: !1849)
!1883 = !DILocation(line: 40, column: 40, scope: !1881, inlinedAt: !1882)
!1884 = !DILocalVariable(name: "data", scope: !1849, file: !11, line: 122, type: !36, align: 8)
!1885 = !DILocation(line: 122, column: 8, scope: !1849)
!1886 = !DILocation(line: 122, column: 15, scope: !1849)
!1887 = !DILocation(line: 122, column: 28, scope: !1849)
!1888 = !DILocation(line: 122, column: 43, scope: !1849)
!1889 = !DILocation(line: 147, column: 11, scope: !1849)
!1890 = !DILocation(line: 973, column: 9, scope: !1891, inlinedAt: !1892)
!1891 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1892 = !DILocation(line: 147, column: 25, scope: !1849)
!1893 = !DILocation(line: 973, column: 20, scope: !1891, inlinedAt: !1892)
!1894 = !DILocation(line: 973, column: 25, scope: !1891, inlinedAt: !1892)
!1895 = !DILocation(line: 123, column: 19, scope: !1849)
!1896 = !DILocation(line: 329, column: 23, scope: !1897, inlinedAt: !1899)
!1897 = distinct !DILexicalBlock(scope: !1898, file: !166, line: 330, column: 1)
!1898 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !166, file: !166, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1899 = !DILocation(line: 123, column: 2, scope: !1849)
!1900 = !DILocation(line: 326, column: 11, scope: !1897, inlinedAt: !1899)
!1901 = !DILocation(line: 326, column: 26, scope: !1897, inlinedAt: !1899)
!1902 = !DILocation(line: 123, column: 2, scope: !1897, inlinedAt: !1899)
!1903 = !DILocation(line: 327, column: 11, scope: !1897, inlinedAt: !1899)
!1904 = !DILocation(line: 327, column: 23, scope: !1897, inlinedAt: !1899)
!1905 = !DILocation(line: 327, column: 29, scope: !1897, inlinedAt: !1899)
!1906 = !DILocation(line: 327, column: 36, scope: !1897, inlinedAt: !1899)
!1907 = !DILocation(line: 327, column: 43, scope: !1897, inlinedAt: !1899)
!1908 = !DILocation(line: 327, column: 49, scope: !1897, inlinedAt: !1899)
!1909 = !DILocation(line: 327, column: 56, scope: !1897, inlinedAt: !1899)
!1910 = !DILocation(line: 331, column: 11, scope: !1898, inlinedAt: !1899)
!1911 = !DILocation(line: 331, column: 16, scope: !1898, inlinedAt: !1899)
!1912 = !DILocation(line: 331, column: 21, scope: !1898, inlinedAt: !1899)
!1913 = !DILocation(line: 331, column: 26, scope: !1898, inlinedAt: !1899)
!1914 = !DILocation(line: 124, column: 2, scope: !1849)
!1915 = !DILocation(line: 124, column: 33, scope: !1849)
!1916 = !DILocation(line: 41, column: 33, scope: !1917, inlinedAt: !1919)
!1917 = distinct !DILexicalBlock(scope: !1918, file: !11, line: 41, column: 43)
!1918 = distinct !DISubprogram(name: "is_aligned", linkageName: "is_aligned", scope: !11, file: !11, line: 41, scopeLine: 41, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1919 = !DILocation(line: 124, column: 47, scope: !1849)
!1920 = !DILocation(line: 41, column: 43, scope: !1918, inlinedAt: !1919)
!1921 = !DILocation(line: 125, column: 9, scope: !1849)
!1922 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.BackedArenaAllocator.resize", scope: !11, file: !11, line: 128, type: !1923, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1923 = !DISubroutineType(types: !1924)
!1924 = !{!216, !218, !1719, !36, !8, !8}
!1925 = !DILocation(line: 129, column: 1, scope: !1922)
!1926 = !DILocalVariable(name: "self", arg: 1, scope: !1922, file: !11, line: 128, type: !1719)
!1927 = !DILocation(line: 128, column: 39, scope: !1922)
!1928 = !DILocalVariable(name: "pointer", arg: 2, scope: !1922, file: !11, line: 128, type: !36)
!1929 = !DILocation(line: 128, column: 52, scope: !1922)
!1930 = !DILocalVariable(name: "size", arg: 3, scope: !1922, file: !11, line: 128, type: !12)
!1931 = !DILocation(line: 128, column: 65, scope: !1922)
!1932 = !DILocalVariable(name: "alignment", arg: 4, scope: !1922, file: !11, line: 128, type: !12)
!1933 = !DILocation(line: 128, column: 75, scope: !1922)
!1934 = !DILocalVariable(name: "chunk", scope: !1922, file: !11, line: 130, type: !1935, align: 8)
!1935 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "AllocChunk*", baseType: !1936, size: 64, align: 64, dwarfAddressSpace: 0)
!1936 = !DICompositeType(tag: DW_TAG_structure_type, name: "AllocChunk", scope: !11, file: !11, line: 22, size: 64, align: 64, elements: !1937, identifier: "std.core.mem.allocator.AllocChunk")
!1937 = !{!1938, !1939}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1936, file: !11, line: 24, baseType: !12, size: 64, align: 64)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1936, file: !11, line: 25, baseType: !61, align: 8, offset: 64)
!1940 = !DILocation(line: 130, column: 14, scope: !1922)
!1941 = !DILocation(line: 130, column: 22, scope: !1922)
!1942 = !DILocation(line: 130, column: 32, scope: !1922)
!1943 = !DILocation(line: 131, column: 6, scope: !1922)
!1944 = !DILocation(line: 133, column: 10, scope: !1945)
!1945 = distinct !DILexicalBlock(scope: !1922, file: !11, line: 132, column: 2)
!1946 = !DILocalVariable(name: "page", scope: !1945, file: !11, line: 135, type: !1724, align: 8)
!1947 = !DILocation(line: 135, column: 14, scope: !1945)
!1948 = !DILocation(line: 135, column: 21, scope: !1945)
!1949 = !DILocation(line: 135, column: 31, scope: !1945)
!1950 = !DILocation(line: 136, column: 10, scope: !1945)
!1951 = !DILocalVariable(name: "data", scope: !1922, file: !11, line: 139, type: !1935, align: 8)
!1952 = !DILocation(line: 139, column: 14, scope: !1922)
!1953 = !DILocation(line: 139, column: 21, scope: !1922)
!1954 = !DILocation(line: 139, column: 34, scope: !1922)
!1955 = !DILocation(line: 139, column: 49, scope: !1922)
!1956 = !DILocation(line: 147, column: 11, scope: !1922)
!1957 = !DILocation(line: 973, column: 9, scope: !1958, inlinedAt: !1959)
!1958 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1959 = !DILocation(line: 147, column: 25, scope: !1922)
!1960 = !DILocation(line: 973, column: 20, scope: !1958, inlinedAt: !1959)
!1961 = !DILocation(line: 973, column: 25, scope: !1958, inlinedAt: !1959)
!1962 = !DILocation(line: 140, column: 12, scope: !1922)
!1963 = !DILocation(line: 140, column: 27, scope: !1922)
!1964 = !DILocation(line: 329, column: 23, scope: !1965, inlinedAt: !1967)
!1965 = distinct !DILexicalBlock(scope: !1966, file: !166, line: 330, column: 1)
!1966 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !166, file: !166, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!1967 = !DILocation(line: 140, column: 2, scope: !1922)
!1968 = !DILocation(line: 326, column: 11, scope: !1965, inlinedAt: !1967)
!1969 = !DILocation(line: 326, column: 26, scope: !1965, inlinedAt: !1967)
!1970 = !DILocation(line: 140, column: 2, scope: !1965, inlinedAt: !1967)
!1971 = !DILocation(line: 327, column: 11, scope: !1965, inlinedAt: !1967)
!1972 = !DILocation(line: 327, column: 23, scope: !1965, inlinedAt: !1967)
!1973 = !DILocation(line: 327, column: 29, scope: !1965, inlinedAt: !1967)
!1974 = !DILocation(line: 327, column: 36, scope: !1965, inlinedAt: !1967)
!1975 = !DILocation(line: 327, column: 43, scope: !1965, inlinedAt: !1967)
!1976 = !DILocation(line: 327, column: 49, scope: !1965, inlinedAt: !1967)
!1977 = !DILocation(line: 327, column: 56, scope: !1965, inlinedAt: !1967)
!1978 = !DILocation(line: 331, column: 11, scope: !1966, inlinedAt: !1967)
!1979 = !DILocation(line: 331, column: 16, scope: !1966, inlinedAt: !1967)
!1980 = !DILocation(line: 331, column: 21, scope: !1966, inlinedAt: !1967)
!1981 = !DILocation(line: 331, column: 26, scope: !1966, inlinedAt: !1967)
!1982 = !DILocation(line: 142, column: 9, scope: !1922)
!1983 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.BackedArenaAllocator.acquire", scope: !11, file: !11, line: 150, type: !1984, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!1984 = !DISubroutineType(types: !1985)
!1985 = !{!216, !218, !1719, !8, !92, !8}
!1986 = !DILocation(line: 151, column: 1, scope: !1983)
!1987 = !DILocalVariable(name: "self", arg: 1, scope: !1983, file: !11, line: 150, type: !1719)
!1988 = !DILocation(line: 150, column: 40, scope: !1983)
!1989 = !DILocalVariable(name: "size", arg: 2, scope: !1983, file: !11, line: 150, type: !12)
!1990 = !DILocation(line: 150, column: 51, scope: !1983)
!1991 = !DILocalVariable(name: "init_type", arg: 3, scope: !1983, file: !11, line: 150, type: !92)
!1992 = !DILocation(line: 150, column: 71, scope: !1983)
!1993 = !DILocalVariable(name: "alignment", arg: 4, scope: !1983, file: !11, line: 150, type: !12)
!1994 = !DILocation(line: 150, column: 86, scope: !1983)
!1995 = !DILocation(line: 146, column: 11, scope: !1996)
!1996 = distinct !DILexicalBlock(scope: !1983, file: !11, line: 151, column: 1)
!1997 = !DILocation(line: 147, column: 11, scope: !1996)
!1998 = !DILocation(line: 973, column: 9, scope: !1999, inlinedAt: !2000)
!1999 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2000 = !DILocation(line: 147, column: 25, scope: !1996)
!2001 = !DILocation(line: 973, column: 20, scope: !1999, inlinedAt: !2000)
!2002 = !DILocation(line: 973, column: 25, scope: !1999, inlinedAt: !2000)
!2003 = !DILocation(line: 148, column: 11, scope: !1996)
!2004 = !DILocation(line: 152, column: 39, scope: !1983)
!2005 = !DILocation(line: 152, column: 14, scope: !1983)
!2006 = !DILocalVariable(name: "start_mem", scope: !1983, file: !11, line: 153, type: !36, align: 8)
!2007 = !DILocation(line: 153, column: 8, scope: !1983)
!2008 = !DILocation(line: 153, column: 21, scope: !1983)
!2009 = !DILocalVariable(name: "starting_ptr", scope: !1983, file: !11, line: 154, type: !36, align: 8)
!2010 = !DILocation(line: 154, column: 8, scope: !1983)
!2011 = !DILocation(line: 154, column: 23, scope: !1983)
!2012 = !DILocation(line: 154, column: 35, scope: !1983)
!2013 = !DILocalVariable(name: "aligned_header_start", scope: !1983, file: !11, line: 155, type: !36, align: 8)
!2014 = !DILocation(line: 155, column: 8, scope: !1983)
!2015 = !DILocation(line: 290, column: 37, scope: !2016, inlinedAt: !2017)
!2016 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !166, file: !166, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2017 = !DILocation(line: 155, column: 31, scope: !1983)
!2018 = !DILocation(line: 290, column: 48, scope: !2016, inlinedAt: !2017)
!2019 = !DILocation(line: 973, column: 9, scope: !2020, inlinedAt: !2021)
!2020 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2021 = !DILocation(line: 290, column: 22, scope: !2016, inlinedAt: !2017)
!2022 = !DILocation(line: 973, column: 20, scope: !2020, inlinedAt: !2021)
!2023 = !DILocation(line: 973, column: 25, scope: !2020, inlinedAt: !2021)
!2024 = !DILocation(line: 290, column: 9, scope: !2016, inlinedAt: !2017)
!2025 = !DILocalVariable(name: "mem", scope: !1983, file: !11, line: 156, type: !36, align: 8)
!2026 = !DILocation(line: 156, column: 8, scope: !1983)
!2027 = !DILocation(line: 156, column: 14, scope: !1983)
!2028 = !DILocation(line: 156, column: 37, scope: !1983)
!2029 = !DILocation(line: 157, column: 6, scope: !1983)
!2030 = !DILocation(line: 290, column: 37, scope: !2031, inlinedAt: !2032)
!2031 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !166, file: !166, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2032 = !DILocation(line: 159, column: 9, scope: !2033)
!2033 = distinct !DILexicalBlock(scope: !1983, file: !11, line: 158, column: 2)
!2034 = !DILocation(line: 290, column: 48, scope: !2031, inlinedAt: !2032)
!2035 = !DILocation(line: 973, column: 9, scope: !2036, inlinedAt: !2037)
!2036 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2037 = !DILocation(line: 290, column: 22, scope: !2031, inlinedAt: !2032)
!2038 = !DILocation(line: 973, column: 20, scope: !2036, inlinedAt: !2037)
!2039 = !DILocation(line: 973, column: 25, scope: !2036, inlinedAt: !2037)
!2040 = !DILocation(line: 290, column: 9, scope: !2031, inlinedAt: !2032)
!2041 = !DILocalVariable(name: "new_usage", scope: !1983, file: !11, line: 161, type: !12, align: 8)
!2042 = !DILocation(line: 161, column: 6, scope: !1983)
!2043 = !DILocation(line: 161, column: 24, scope: !1983)
!2044 = !DILocation(line: 161, column: 30, scope: !1983)
!2045 = !DILocation(line: 161, column: 18, scope: !1983)
!2046 = !DILocation(line: 161, column: 43, scope: !1983)
!2047 = !DILocation(line: 164, column: 6, scope: !1983)
!2048 = !DILocation(line: 164, column: 19, scope: !1983)
!2049 = !DILocation(line: 166, column: 46, scope: !2050)
!2050 = distinct !DILexicalBlock(scope: !1983, file: !11, line: 165, column: 2)
!2051 = !DILocation(line: 166, column: 58, scope: !2050)
!2052 = !DILocalVariable(name: "chunk_start", scope: !2050, file: !11, line: 167, type: !1935, align: 8)
!2053 = !DILocation(line: 167, column: 15, scope: !2050)
!2054 = !DILocation(line: 167, column: 29, scope: !2050)
!2055 = !DILocation(line: 167, column: 35, scope: !2050)
!2056 = !DILocation(line: 168, column: 3, scope: !2050)
!2057 = !DILocation(line: 168, column: 22, scope: !2050)
!2058 = !DILocation(line: 169, column: 3, scope: !2050)
!2059 = !DILocation(line: 169, column: 15, scope: !2050)
!2060 = !DILocation(line: 170, column: 7, scope: !2050)
!2061 = !DILocation(line: 308, column: 11, scope: !2062, inlinedAt: !2063)
!2062 = distinct !DISubprogram(name: "clear", linkageName: "clear", scope: !166, file: !166, line: 306, scopeLine: 306, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2063 = !DILocation(line: 170, column: 26, scope: !2050)
!2064 = !DILocation(line: 308, column: 25, scope: !2062, inlinedAt: !2063)
!2065 = !DILocation(line: 308, column: 30, scope: !2062, inlinedAt: !2063)
!2066 = !DILocation(line: 171, column: 10, scope: !2050)
!2067 = !DILocalVariable(name: "page", scope: !1983, file: !11, line: 175, type: !1724, align: 8)
!2068 = !DILocation(line: 175, column: 13, scope: !1983)
!2069 = !DILocation(line: 178, column: 6, scope: !1983)
!2070 = !DILocalVariable(name: "total_alloc_size", scope: !2071, file: !11, line: 181, type: !12, align: 8)
!2071 = distinct !DILexicalBlock(scope: !1983, file: !11, line: 179, column: 2)
!2072 = !DILocation(line: 181, column: 7, scope: !2071)
!2073 = !DILocation(line: 181, column: 65, scope: !2071)
!2074 = !DILocation(line: 181, column: 46, scope: !2071)
!2075 = !DILocation(line: 181, column: 71, scope: !2071)
!2076 = !DILocation(line: 973, column: 9, scope: !2077, inlinedAt: !2078)
!2077 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2078 = !DILocation(line: 181, column: 26, scope: !2071)
!2079 = !DILocation(line: 973, column: 20, scope: !2077, inlinedAt: !2078)
!2080 = !DILocation(line: 973, column: 25, scope: !2077, inlinedAt: !2078)
!2081 = !DILocation(line: 182, column: 7, scope: !2071)
!2082 = !DILocation(line: 184, column: 36, scope: !2083)
!2083 = distinct !DILexicalBlock(scope: !2071, file: !11, line: 183, column: 3)
!2084 = !DILocation(line: 139, column: 6, scope: !2085, inlinedAt: !2086)
!2085 = distinct !DISubprogram(name: "calloc_aligned", linkageName: "calloc_aligned", scope: !28, file: !28, line: 137, scopeLine: 137, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2086 = !DILocation(line: 184, column: 10, scope: !2083)
!2087 = !DILocation(line: 139, column: 20, scope: !2085, inlinedAt: !2086)
!2088 = !DILocation(line: 140, column: 27, scope: !2085, inlinedAt: !2086)
!2089 = !DILocation(line: 140, column: 39, scope: !2085, inlinedAt: !2086)
!2090 = !DILocation(line: 37, column: 12, scope: !2085, inlinedAt: !2086)
!2091 = !DILocation(line: 973, column: 9, scope: !2092, inlinedAt: !2093)
!2092 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2093 = !DILocation(line: 37, column: 26, scope: !2085, inlinedAt: !2086)
!2094 = !DILocation(line: 973, column: 20, scope: !2092, inlinedAt: !2093)
!2095 = !DILocation(line: 973, column: 25, scope: !2092, inlinedAt: !2093)
!2096 = !DILocation(line: 140, column: 9, scope: !2085, inlinedAt: !2086)
!2097 = !DILocation(line: 188, column: 36, scope: !2098)
!2098 = distinct !DILexicalBlock(scope: !2071, file: !11, line: 187, column: 3)
!2099 = !DILocation(line: 127, column: 6, scope: !2100, inlinedAt: !2101)
!2100 = distinct !DISubprogram(name: "malloc_aligned", linkageName: "malloc_aligned", scope: !28, file: !28, line: 125, scopeLine: 125, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2101 = !DILocation(line: 188, column: 10, scope: !2098)
!2102 = !DILocation(line: 127, column: 20, scope: !2100, inlinedAt: !2101)
!2103 = !DILocation(line: 133, column: 28, scope: !2100, inlinedAt: !2101)
!2104 = !DILocation(line: 133, column: 43, scope: !2100, inlinedAt: !2101)
!2105 = !DILocation(line: 37, column: 12, scope: !2100, inlinedAt: !2101)
!2106 = !DILocation(line: 973, column: 9, scope: !2107, inlinedAt: !2108)
!2107 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2108 = !DILocation(line: 37, column: 26, scope: !2100, inlinedAt: !2101)
!2109 = !DILocation(line: 973, column: 20, scope: !2107, inlinedAt: !2108)
!2110 = !DILocation(line: 973, column: 25, scope: !2107, inlinedAt: !2108)
!2111 = !DILocation(line: 133, column: 10, scope: !2100, inlinedAt: !2101)
!2112 = !DILocalVariable(name: "start", scope: !2071, file: !11, line: 190, type: !36, align: 8)
!2113 = !DILocation(line: 190, column: 9, scope: !2071)
!2114 = !DILocation(line: 190, column: 17, scope: !2071)
!2115 = !DILocation(line: 191, column: 3, scope: !2071)
!2116 = !DILocation(line: 191, column: 48, scope: !2071)
!2117 = !DILocation(line: 973, column: 9, scope: !2118, inlinedAt: !2119)
!2118 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2119 = !DILocation(line: 191, column: 10, scope: !2071)
!2120 = !DILocation(line: 973, column: 20, scope: !2118, inlinedAt: !2119)
!2121 = !DILocation(line: 973, column: 25, scope: !2118, inlinedAt: !2119)
!2122 = !DILocation(line: 192, column: 22, scope: !2071)
!2123 = !DILocation(line: 192, column: 28, scope: !2071)
!2124 = !DILocation(line: 193, column: 3, scope: !2071)
!2125 = !DILocation(line: 193, column: 16, scope: !2071)
!2126 = !DILocation(line: 194, column: 3, scope: !2071)
!2127 = !DILocation(line: 194, column: 15, scope: !2071)
!2128 = !DILocalVariable(name: "padded_header_size", scope: !2129, file: !11, line: 199, type: !12, align: 8)
!2129 = distinct !DILexicalBlock(scope: !1983, file: !11, line: 197, column: 2)
!2130 = !DILocation(line: 199, column: 7, scope: !2129)
!2131 = !DILocation(line: 973, column: 9, scope: !2132, inlinedAt: !2133)
!2132 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2133 = !DILocation(line: 199, column: 28, scope: !2129)
!2134 = !DILocation(line: 973, column: 20, scope: !2132, inlinedAt: !2133)
!2135 = !DILocation(line: 973, column: 25, scope: !2132, inlinedAt: !2133)
!2136 = !DILocalVariable(name: "total_alloc_size", scope: !2129, file: !11, line: 200, type: !12, align: 8)
!2137 = !DILocation(line: 200, column: 7, scope: !2129)
!2138 = !DILocation(line: 200, column: 26, scope: !2129)
!2139 = !DILocation(line: 200, column: 47, scope: !2129)
!2140 = !DILocalVariable(name: "alloc", scope: !2129, file: !11, line: 201, type: !36, align: 8)
!2141 = !DILocation(line: 201, column: 9, scope: !2129)
!2142 = !DILocation(line: 201, column: 17, scope: !2129)
!2143 = !DILocation(line: 201, column: 48, scope: !2129)
!2144 = !DILocation(line: 201, column: 66, scope: !2129)
!2145 = !DILocation(line: 37, column: 12, scope: !2129)
!2146 = !DILocation(line: 973, column: 9, scope: !2147, inlinedAt: !2148)
!2147 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2148 = !DILocation(line: 37, column: 26, scope: !2129)
!2149 = !DILocation(line: 973, column: 20, scope: !2147, inlinedAt: !2148)
!2150 = !DILocation(line: 973, column: 25, scope: !2147, inlinedAt: !2148)
!2151 = !DILocation(line: 204, column: 10, scope: !2129)
!2152 = !DILocation(line: 204, column: 18, scope: !2129)
!2153 = !DILocation(line: 205, column: 30, scope: !2129)
!2154 = !DILocation(line: 973, column: 9, scope: !2155, inlinedAt: !2156)
!2155 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2156 = !DILocation(line: 205, column: 10, scope: !2129)
!2157 = !DILocation(line: 973, column: 20, scope: !2155, inlinedAt: !2156)
!2158 = !DILocation(line: 973, column: 25, scope: !2155, inlinedAt: !2156)
!2159 = !DILocation(line: 206, column: 31, scope: !2129)
!2160 = !DILocation(line: 973, column: 9, scope: !2161, inlinedAt: !2162)
!2161 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2162 = !DILocation(line: 206, column: 10, scope: !2129)
!2163 = !DILocation(line: 973, column: 20, scope: !2161, inlinedAt: !2162)
!2164 = !DILocation(line: 973, column: 25, scope: !2161, inlinedAt: !2162)
!2165 = !DILocation(line: 207, column: 3, scope: !2129)
!2166 = !DILocation(line: 207, column: 16, scope: !2129)
!2167 = !DILocation(line: 208, column: 3, scope: !2129)
!2168 = !DILocation(line: 208, column: 15, scope: !2129)
!2169 = !DILocation(line: 212, column: 2, scope: !1983)
!2170 = !DILocation(line: 212, column: 15, scope: !1983)
!2171 = !DILocation(line: 214, column: 2, scope: !1983)
!2172 = !DILocation(line: 214, column: 16, scope: !1983)
!2173 = !DILocation(line: 216, column: 2, scope: !1983)
!2174 = !DILocation(line: 216, column: 19, scope: !1983)
!2175 = !DILocation(line: 217, column: 2, scope: !1983)
!2176 = !DILocation(line: 217, column: 19, scope: !1983)
!2177 = !DILocation(line: 218, column: 10, scope: !1983)
!2178 = !DILocation(line: 218, column: 20, scope: !1983)
!2179 = distinct !DISubprogram(name: "new_backed_allocator", linkageName: "std.core.mem.allocator.new_backed_allocator", scope: !11, file: !11, line: 46, type: !2180, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2180 = !DISubroutineType(types: !2181)
!2181 = !{!216, !2182, !8, !33}
!2182 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BackedArenaAllocator**", baseType: !1719, size: 64, align: 64, dwarfAddressSpace: 0)
!2183 = !DILocalVariable(name: "size", arg: 1, scope: !2179, file: !11, line: 46, type: !12)
!2184 = !DILocation(line: 46, column: 52, scope: !2179)
!2185 = !DILocalVariable(name: "allocator", arg: 2, scope: !2179, file: !11, line: 46, type: !33)
!2186 = !DILocation(line: 46, column: 68, scope: !2179)
!2187 = !DILocation(line: 44, column: 11, scope: !2188)
!2188 = distinct !DILexicalBlock(scope: !2179, file: !11, line: 47, column: 1)
!2189 = !DILocalVariable(name: "temp", scope: !2179, file: !11, line: 48, type: !1719, align: 8)
!2190 = !DILocation(line: 48, column: 24, scope: !2179)
!2191 = !DILocation(line: 253, column: 54, scope: !2192, inlinedAt: !2193)
!2192 = distinct !DISubprogram(name: "alloc_with_padding", linkageName: "alloc_with_padding", scope: !28, file: !28, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2193 = !DILocation(line: 48, column: 31, scope: !2179)
!2194 = !DILocation(line: 253, column: 39, scope: !2192, inlinedAt: !2193)
!2195 = !DILocation(line: 79, column: 6, scope: !2196, inlinedAt: !2197)
!2196 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !28, file: !28, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2197 = !DILocation(line: 253, column: 17, scope: !2192, inlinedAt: !2193)
!2198 = !DILocation(line: 79, column: 20, scope: !2196, inlinedAt: !2197)
!2199 = !DILocation(line: 85, column: 28, scope: !2196, inlinedAt: !2197)
!2200 = !DILocation(line: 37, column: 12, scope: !2196, inlinedAt: !2197)
!2201 = !DILocation(line: 973, column: 9, scope: !2202, inlinedAt: !2203)
!2202 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2203 = !DILocation(line: 37, column: 26, scope: !2196, inlinedAt: !2197)
!2204 = !DILocation(line: 973, column: 20, scope: !2202, inlinedAt: !2203)
!2205 = !DILocation(line: 973, column: 25, scope: !2202, inlinedAt: !2203)
!2206 = !DILocation(line: 85, column: 10, scope: !2196, inlinedAt: !2197)
!2207 = !DILocation(line: 49, column: 2, scope: !2179)
!2208 = !DILocation(line: 49, column: 19, scope: !2179)
!2209 = !DILocation(line: 50, column: 2, scope: !2179)
!2210 = !DILocation(line: 50, column: 27, scope: !2179)
!2211 = !DILocation(line: 51, column: 2, scope: !2179)
!2212 = !DILocation(line: 51, column: 14, scope: !2179)
!2213 = !DILocation(line: 52, column: 2, scope: !2179)
!2214 = !DILocation(line: 52, column: 18, scope: !2179)
!2215 = !DILocation(line: 53, column: 9, scope: !2179)
!2216 = distinct !DISubprogram(name: "derive_allocator", linkageName: "std.core.mem.allocator.TempAllocator.derive_allocator", scope: !15, file: !15, line: 84, type: !2217, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2217 = !DISubroutineType(types: !2218)
!2218 = !{!216, !2219, !48, !8, !8, !8}
!2219 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator**", baseType: !48, size: 64, align: 64, dwarfAddressSpace: 0)
!2220 = !DILocation(line: 85, column: 1, scope: !2216)
!2221 = !DILocalVariable(name: "self", arg: 1, scope: !2216, file: !15, line: 84, type: !48)
!2222 = !DILocation(line: 84, column: 51, scope: !2216)
!2223 = !DILocalVariable(name: "min_size", arg: 2, scope: !2216, file: !15, line: 84, type: !12)
!2224 = !DILocation(line: 84, column: 62, scope: !2216)
!2225 = !DILocalVariable(name: "buffer", arg: 3, scope: !2216, file: !15, line: 84, type: !12)
!2226 = !DILocation(line: 84, column: 76, scope: !2216)
!2227 = !DILocalVariable(name: "mult", arg: 4, scope: !2216, file: !15, line: 84, type: !12)
!2228 = !DILocation(line: 84, column: 88, scope: !2216)
!2229 = !DILocation(line: 80, column: 12, scope: !2230)
!2230 = distinct !DILexicalBlock(scope: !2216, file: !15, line: 85, column: 1)
!2231 = !DILocation(line: 80, column: 11, scope: !2230)
!2232 = !DILocation(line: 81, column: 11, scope: !2230)
!2233 = !DILocation(line: 82, column: 11, scope: !2230)
!2234 = !DILocalVariable(name: "remaining", scope: !2216, file: !15, line: 86, type: !12, align: 8)
!2235 = !DILocation(line: 86, column: 6, scope: !2216)
!2236 = !DILocation(line: 86, column: 18, scope: !2216)
!2237 = !DILocation(line: 86, column: 34, scope: !2216)
!2238 = !DILocalVariable(name: "mem", scope: !2216, file: !15, line: 87, type: !36, align: 8)
!2239 = !DILocation(line: 87, column: 8, scope: !2216)
!2240 = !DILocalVariable(name: "size", scope: !2216, file: !15, line: 88, type: !12, align: 8)
!2241 = !DILocation(line: 88, column: 6, scope: !2216)
!2242 = !DILocation(line: 89, column: 6, scope: !2216)
!2243 = !DILocation(line: 89, column: 17, scope: !2216)
!2244 = !DILocation(line: 89, column: 26, scope: !2216)
!2245 = !DILocation(line: 91, column: 10, scope: !2246)
!2246 = distinct !DILexicalBlock(scope: !2216, file: !15, line: 90, column: 2)
!2247 = !DILocation(line: 91, column: 44, scope: !2246)
!2248 = !DILocation(line: 91, column: 68, scope: !2246)
!2249 = !DILocation(line: 91, column: 79, scope: !2246)
!2250 = !DILocation(line: 91, column: 25, scope: !2246)
!2251 = !DILocation(line: 66, column: 11, scope: !2246)
!2252 = !DILocalVariable(name: "start", scope: !2216, file: !15, line: 93, type: !12, align: 8)
!2253 = !DILocation(line: 93, column: 6, scope: !2216)
!2254 = !DILocation(line: 93, column: 34, scope: !2216)
!2255 = !DILocation(line: 93, column: 46, scope: !2216)
!2256 = !DILocation(line: 973, column: 9, scope: !2257, inlinedAt: !2258)
!2257 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2258 = !DILocation(line: 93, column: 14, scope: !2216)
!2259 = !DILocation(line: 973, column: 20, scope: !2257, inlinedAt: !2258)
!2260 = !DILocation(line: 973, column: 25, scope: !2257, inlinedAt: !2258)
!2261 = !DILocalVariable(name: "ptr", scope: !2216, file: !15, line: 94, type: !36, align: 8)
!2262 = !DILocation(line: 94, column: 8, scope: !2216)
!2263 = !DILocation(line: 94, column: 15, scope: !2216)
!2264 = !DILocation(line: 94, column: 25, scope: !2216)
!2265 = !DILocalVariable(name: "temp", scope: !2216, file: !15, line: 95, type: !48, align: 8)
!2266 = !DILocation(line: 95, column: 17, scope: !2216)
!2267 = !DILocation(line: 95, column: 40, scope: !2216)
!2268 = !DILocation(line: 99, column: 2, scope: !2216)
!2269 = !DILocation(line: 99, column: 19, scope: !2216)
!2270 = !DILocation(line: 100, column: 5, scope: !2216)
!2271 = !DILocation(line: 100, column: 30, scope: !2216)
!2272 = !DILocation(line: 101, column: 5, scope: !2216)
!2273 = !DILocation(line: 101, column: 17, scope: !2216)
!2274 = !DILocation(line: 102, column: 5, scope: !2216)
!2275 = !DILocation(line: 102, column: 22, scope: !2216)
!2276 = !DILocation(line: 103, column: 5, scope: !2216)
!2277 = !DILocation(line: 103, column: 20, scope: !2216)
!2278 = !DILocation(line: 104, column: 5, scope: !2216)
!2279 = !DILocation(line: 104, column: 30, scope: !2216)
!2280 = !DILocation(line: 104, column: 46, scope: !2216)
!2281 = !DILocation(line: 104, column: 62, scope: !2216)
!2282 = !DILocation(line: 105, column: 5, scope: !2216)
!2283 = !DILocation(line: 105, column: 21, scope: !2216)
!2284 = !DILocation(line: 106, column: 2, scope: !2216)
!2285 = !DILocation(line: 106, column: 17, scope: !2216)
!2286 = !DILocation(line: 107, column: 12, scope: !2216)
!2287 = distinct !DISubprogram(name: "reset", linkageName: "std.core.mem.allocator.TempAllocator.reset", scope: !15, file: !15, line: 113, type: !2288, scopeLine: 113, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2288 = !DISubroutineType(types: !2289)
!2289 = !{null, !48}
!2290 = !DILocation(line: 114, column: 1, scope: !2287)
!2291 = !DILocalVariable(name: "self", arg: 1, scope: !2287, file: !15, line: 113, type: !48)
!2292 = !DILocation(line: 113, column: 29, scope: !2287)
!2293 = !DILocalVariable(name: "child", scope: !2287, file: !15, line: 115, type: !48, align: 8)
!2294 = !DILocation(line: 115, column: 17, scope: !2287)
!2295 = !DILocation(line: 115, column: 25, scope: !2287)
!2296 = !DILocation(line: 116, column: 6, scope: !2287)
!2297 = !DILocation(line: 116, column: 20, scope: !2287)
!2298 = !DILocation(line: 117, column: 2, scope: !2287)
!2299 = !DILocation(line: 117, column: 9, scope: !2300)
!2300 = distinct !DILexicalBlock(scope: !2287, file: !15, line: 117, column: 2)
!2301 = !DILocalVariable(name: "old", scope: !2302, file: !15, line: 119, type: !48, align: 8)
!2302 = distinct !DILexicalBlock(scope: !2300, file: !15, line: 118, column: 2)
!2303 = !DILocation(line: 119, column: 18, scope: !2302)
!2304 = !DILocation(line: 119, column: 24, scope: !2302)
!2305 = !DILocation(line: 120, column: 11, scope: !2302)
!2306 = !DILocation(line: 121, column: 3, scope: !2302)
!2307 = !DILocation(line: 123, column: 2, scope: !2287)
!2308 = !DILocation(line: 123, column: 18, scope: !2287)
!2309 = !DILocation(line: 127, column: 2, scope: !2287)
!2310 = !DILocation(line: 127, column: 17, scope: !2287)
!2311 = distinct !DISubprogram(name: "free", linkageName: "std.core.mem.allocator.TempAllocator.free", scope: !15, file: !15, line: 133, type: !2288, scopeLine: 133, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2312 = !DILocation(line: 134, column: 1, scope: !2311)
!2313 = !DILocalVariable(name: "self", arg: 1, scope: !2311, file: !15, line: 133, type: !48)
!2314 = !DILocation(line: 133, column: 28, scope: !2311)
!2315 = !DILocation(line: 131, column: 11, scope: !2316)
!2316 = distinct !DILexicalBlock(scope: !2311, file: !15, line: 134, column: 1)
!2317 = !DILocation(line: 135, column: 2, scope: !2311)
!2318 = !DILocation(line: 136, column: 2, scope: !2311)
!2319 = distinct !DISubprogram(name: "destroy", linkageName: "std.core.mem.allocator.TempAllocator.destroy", scope: !15, file: !15, line: 139, type: !2288, scopeLine: 139, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2320 = !DILocation(line: 140, column: 1, scope: !2319)
!2321 = !DILocalVariable(name: "self", arg: 1, scope: !2319, file: !15, line: 139, type: !48)
!2322 = !DILocation(line: 139, column: 31, scope: !2319)
!2323 = !DILocalVariable(name: "last_page", scope: !2319, file: !15, line: 141, type: !53, align: 8)
!2324 = !DILocation(line: 141, column: 21, scope: !2319)
!2325 = !DILocation(line: 141, column: 33, scope: !2319)
!2326 = !DILocation(line: 142, column: 2, scope: !2319)
!2327 = !DILocation(line: 142, column: 9, scope: !2328)
!2328 = distinct !DILexicalBlock(scope: !2319, file: !15, line: 142, column: 2)
!2329 = !DILocalVariable(name: "to_free", scope: !2330, file: !15, line: 144, type: !53, align: 8)
!2330 = distinct !DILexicalBlock(scope: !2328, file: !15, line: 143, column: 2)
!2331 = !DILocation(line: 144, column: 22, scope: !2330)
!2332 = !DILocation(line: 144, column: 32, scope: !2330)
!2333 = !DILocation(line: 145, column: 15, scope: !2330)
!2334 = !DILocation(line: 146, column: 19, scope: !2330)
!2335 = !DILocation(line: 146, column: 3, scope: !2330)
!2336 = !DILocation(line: 148, column: 6, scope: !2319)
!2337 = !DILocation(line: 150, column: 19, scope: !2338)
!2338 = distinct !DILexicalBlock(scope: !2319, file: !15, line: 149, column: 2)
!2339 = !DILocation(line: 150, column: 43, scope: !2338)
!2340 = !DILocation(line: 118, column: 6, scope: !2341, inlinedAt: !2342)
!2341 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !28, file: !28, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2342 = !DILocation(line: 150, column: 3, scope: !2338)
!2343 = !DILocation(line: 118, column: 18, scope: !2341, inlinedAt: !2342)
!2344 = !DILocation(line: 122, column: 20, scope: !2341, inlinedAt: !2342)
!2345 = !DILocation(line: 122, column: 2, scope: !2341, inlinedAt: !2342)
!2346 = !DILocation(line: 151, column: 9, scope: !2338)
!2347 = !DILocation(line: 155, column: 7, scope: !2319)
!2348 = !DILocation(line: 155, column: 21, scope: !2319)
!2349 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.TempAllocator.release", scope: !15, file: !15, line: 162, type: !2350, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2350 = !DISubroutineType(types: !2351)
!2351 = !{null, !48, !36, !67}
!2352 = !DILocation(line: 163, column: 1, scope: !2349)
!2353 = !DILocalVariable(name: "self", arg: 1, scope: !2349, file: !15, line: 162, type: !48)
!2354 = !DILocation(line: 162, column: 31, scope: !2349)
!2355 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !2349, file: !15, line: 162, type: !36)
!2356 = !DILocation(line: 162, column: 44, scope: !2349)
!2357 = !DILocalVariable(name: ".anon", arg: 3, scope: !2349, file: !15, line: 162, type: !67)
!2358 = !DILocation(line: 162, column: 57, scope: !2349)
!2359 = !DILocalVariable(name: "old_size", scope: !2349, file: !15, line: 164, type: !12, align: 8)
!2360 = !DILocation(line: 164, column: 6, scope: !2349)
!2361 = !DILocation(line: 164, column: 25, scope: !2349)
!2362 = !DILocation(line: 164, column: 39, scope: !2349)
!2363 = !DILocation(line: 164, column: 18, scope: !2349)
!2364 = !DILocation(line: 165, column: 6, scope: !2349)
!2365 = !DILocation(line: 165, column: 20, scope: !2349)
!2366 = !DILocation(line: 165, column: 33, scope: !2349)
!2367 = !DILocation(line: 165, column: 43, scope: !2349)
!2368 = !DILocation(line: 167, column: 3, scope: !2369)
!2369 = distinct !DILexicalBlock(scope: !2349, file: !15, line: 166, column: 2)
!2370 = !DILocation(line: 167, column: 16, scope: !2369)
!2371 = !DILocation(line: 168, column: 31, scope: !2369)
!2372 = !DILocation(line: 168, column: 41, scope: !2369)
!2373 = !DILocation(line: 34, column: 2, scope: !2374, inlinedAt: !2375)
!2374 = distinct !DISubprogram(name: "poison_memory_region", linkageName: "poison_memory_region", scope: !1784, file: !1784, line: 32, scopeLine: 32, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2375 = !DILocation(line: 168, column: 3, scope: !2369)
!2376 = distinct !DISubprogram(name: "_free_page", linkageName: "std.core.mem.allocator.TempAllocator._free_page", scope: !15, file: !15, line: 173, type: !2377, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2377 = !DISubroutineType(types: !2378)
!2378 = !{!216, !36, !48, !53}
!2379 = !DILocation(line: 174, column: 1, scope: !2376)
!2380 = !DILocalVariable(name: "self", arg: 1, scope: !2376, file: !15, line: 173, type: !48)
!2381 = !DILocation(line: 173, column: 35, scope: !2376)
!2382 = !DILocalVariable(name: "page", arg: 2, scope: !2376, file: !15, line: 173, type: !53)
!2383 = !DILocation(line: 173, column: 61, scope: !2376)
!2384 = !DILocalVariable(name: "mem", scope: !2376, file: !15, line: 175, type: !36, align: 8)
!2385 = !DILocation(line: 175, column: 8, scope: !2376)
!2386 = !DILocation(line: 175, column: 14, scope: !2376)
!2387 = !DILocation(line: 176, column: 9, scope: !2376)
!2388 = !DILocation(line: 176, column: 40, scope: !2376)
!2389 = !DILocation(line: 62, column: 41, scope: !2390, inlinedAt: !2392)
!2390 = distinct !DILexicalBlock(scope: !2391, file: !15, line: 62, column: 51)
!2391 = distinct !DISubprogram(name: "is_aligned", linkageName: "is_aligned", scope: !15, file: !15, line: 62, scopeLine: 62, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2392 = !DILocation(line: 176, column: 45, scope: !2376)
!2393 = !DILocation(line: 62, column: 51, scope: !2391, inlinedAt: !2392)
!2394 = distinct !DISubprogram(name: "_realloc_page", linkageName: "std.core.mem.allocator.TempAllocator._realloc_page", scope: !15, file: !15, line: 179, type: !2395, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2395 = !DISubroutineType(types: !2396)
!2396 = !{!216, !218, !48, !53, !8, !8}
!2397 = !DILocation(line: 180, column: 1, scope: !2394)
!2398 = !DILocalVariable(name: "self", arg: 1, scope: !2394, file: !15, line: 179, type: !48)
!2399 = !DILocation(line: 179, column: 39, scope: !2394)
!2400 = !DILocalVariable(name: "page", arg: 2, scope: !2394, file: !15, line: 179, type: !53)
!2401 = !DILocation(line: 179, column: 65, scope: !2394)
!2402 = !DILocalVariable(name: "size", arg: 3, scope: !2394, file: !15, line: 179, type: !12)
!2403 = !DILocation(line: 179, column: 75, scope: !2394)
!2404 = !DILocalVariable(name: "alignment", arg: 4, scope: !2394, file: !15, line: 179, type: !12)
!2405 = !DILocation(line: 179, column: 85, scope: !2394)
!2406 = !DILocalVariable(name: "real_pointer", scope: !2394, file: !15, line: 182, type: !36, align: 8)
!2407 = !DILocation(line: 182, column: 8, scope: !2394)
!2408 = !DILocation(line: 182, column: 23, scope: !2394)
!2409 = !DILocalVariable(name: "pointer_to_prev", scope: !2394, file: !15, line: 185, type: !2410, align: 8)
!2410 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage**", baseType: !53, size: 64, align: 64, dwarfAddressSpace: 0)
!2411 = !DILocation(line: 185, column: 22, scope: !2394)
!2412 = !DILocation(line: 185, column: 41, scope: !2394)
!2413 = !DILocation(line: 187, column: 2, scope: !2394)
!2414 = !DILocation(line: 187, column: 10, scope: !2415)
!2415 = distinct !DILexicalBlock(scope: !2394, file: !15, line: 187, column: 2)
!2416 = !DILocation(line: 187, column: 29, scope: !2415)
!2417 = !DILocation(line: 187, column: 9, scope: !2415)
!2418 = !DILocation(line: 189, column: 25, scope: !2419)
!2419 = distinct !DILexicalBlock(scope: !2415, file: !15, line: 188, column: 2)
!2420 = !DILocation(line: 191, column: 3, scope: !2394)
!2421 = !DILocation(line: 191, column: 21, scope: !2394)
!2422 = !DILocalVariable(name: "page_size", scope: !2394, file: !15, line: 192, type: !12, align: 8)
!2423 = !DILocation(line: 192, column: 6, scope: !2394)
!2424 = !DILocation(line: 61, column: 38, scope: !2425, inlinedAt: !2427)
!2425 = distinct !DILexicalBlock(scope: !2426, file: !15, line: 61, column: 48)
!2426 = distinct !DISubprogram(name: "pagesize", linkageName: "pagesize", scope: !15, file: !15, line: 61, scopeLine: 61, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2427 = !DILocation(line: 192, column: 18, scope: !2394)
!2428 = !DILocation(line: 61, column: 48, scope: !2426, inlinedAt: !2427)
!2429 = !DILocalVariable(name: "data", scope: !2394, file: !15, line: 194, type: !36, align: 8)
!2430 = !DILocation(line: 194, column: 8, scope: !2394)
!2431 = !DILocation(line: 194, column: 15, scope: !2394)
!2432 = !DILocation(line: 194, column: 28, scope: !2394)
!2433 = !DILocation(line: 194, column: 43, scope: !2394)
!2434 = !DILocation(line: 248, column: 11, scope: !2394)
!2435 = !DILocation(line: 973, column: 9, scope: !2436, inlinedAt: !2437)
!2436 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2437 = !DILocation(line: 248, column: 25, scope: !2394)
!2438 = !DILocation(line: 973, column: 20, scope: !2436, inlinedAt: !2437)
!2439 = !DILocation(line: 973, column: 25, scope: !2436, inlinedAt: !2437)
!2440 = !DILocation(line: 195, column: 6, scope: !2394)
!2441 = !DILocation(line: 195, column: 18, scope: !2394)
!2442 = !DILocation(line: 195, column: 36, scope: !2394)
!2443 = !DILocation(line: 196, column: 19, scope: !2394)
!2444 = !DILocation(line: 329, column: 23, scope: !2445, inlinedAt: !2447)
!2445 = distinct !DILexicalBlock(scope: !2446, file: !166, line: 330, column: 1)
!2446 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !166, file: !166, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2447 = !DILocation(line: 196, column: 2, scope: !2394)
!2448 = !DILocation(line: 326, column: 11, scope: !2445, inlinedAt: !2447)
!2449 = !DILocation(line: 326, column: 26, scope: !2445, inlinedAt: !2447)
!2450 = !DILocation(line: 196, column: 2, scope: !2445, inlinedAt: !2447)
!2451 = !DILocation(line: 327, column: 11, scope: !2445, inlinedAt: !2447)
!2452 = !DILocation(line: 327, column: 23, scope: !2445, inlinedAt: !2447)
!2453 = !DILocation(line: 327, column: 29, scope: !2445, inlinedAt: !2447)
!2454 = !DILocation(line: 327, column: 36, scope: !2445, inlinedAt: !2447)
!2455 = !DILocation(line: 327, column: 43, scope: !2445, inlinedAt: !2447)
!2456 = !DILocation(line: 327, column: 49, scope: !2445, inlinedAt: !2447)
!2457 = !DILocation(line: 327, column: 56, scope: !2445, inlinedAt: !2447)
!2458 = !DILocation(line: 331, column: 11, scope: !2446, inlinedAt: !2447)
!2459 = !DILocation(line: 331, column: 16, scope: !2446, inlinedAt: !2447)
!2460 = !DILocation(line: 331, column: 21, scope: !2446, inlinedAt: !2447)
!2461 = !DILocation(line: 331, column: 26, scope: !2446, inlinedAt: !2447)
!2462 = !DILocation(line: 197, column: 2, scope: !2394)
!2463 = !DILocation(line: 197, column: 33, scope: !2394)
!2464 = !DILocation(line: 62, column: 41, scope: !2465, inlinedAt: !2467)
!2465 = distinct !DILexicalBlock(scope: !2466, file: !15, line: 62, column: 51)
!2466 = distinct !DISubprogram(name: "is_aligned", linkageName: "is_aligned", scope: !15, file: !15, line: 62, scopeLine: 62, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2467 = !DILocation(line: 197, column: 47, scope: !2394)
!2468 = !DILocation(line: 62, column: 51, scope: !2466, inlinedAt: !2467)
!2469 = !DILocation(line: 198, column: 9, scope: !2394)
!2470 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.TempAllocator.resize", scope: !15, file: !15, line: 201, type: !2471, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2471 = !DISubroutineType(types: !2472)
!2472 = !{!216, !218, !48, !36, !8, !8}
!2473 = !DILocation(line: 202, column: 1, scope: !2470)
!2474 = !DILocalVariable(name: "self", arg: 1, scope: !2470, file: !15, line: 201, type: !48)
!2475 = !DILocation(line: 201, column: 32, scope: !2470)
!2476 = !DILocalVariable(name: "pointer", arg: 2, scope: !2470, file: !15, line: 201, type: !36)
!2477 = !DILocation(line: 201, column: 45, scope: !2470)
!2478 = !DILocalVariable(name: "size", arg: 3, scope: !2470, file: !15, line: 201, type: !12)
!2479 = !DILocation(line: 201, column: 58, scope: !2470)
!2480 = !DILocalVariable(name: "alignment", arg: 4, scope: !2470, file: !15, line: 201, type: !12)
!2481 = !DILocation(line: 201, column: 68, scope: !2470)
!2482 = !DILocalVariable(name: "chunk", scope: !2470, file: !15, line: 203, type: !2483, align: 8)
!2483 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorChunk*", baseType: !2484, size: 64, align: 64, dwarfAddressSpace: 0)
!2484 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorChunk", scope: !15, file: !15, line: 44, size: 64, align: 64, elements: !2485, identifier: "std.core.mem.allocator.TempAllocatorChunk")
!2485 = !{!2486, !2487}
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2484, file: !15, line: 46, baseType: !12, size: 64, align: 64)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2484, file: !15, line: 47, baseType: !61, align: 8, offset: 64)
!2488 = !DILocation(line: 203, column: 22, scope: !2470)
!2489 = !DILocation(line: 203, column: 30, scope: !2470)
!2490 = !DILocation(line: 203, column: 40, scope: !2470)
!2491 = !DILocation(line: 204, column: 6, scope: !2470)
!2492 = !DILocation(line: 206, column: 10, scope: !2493)
!2493 = distinct !DILexicalBlock(scope: !2470, file: !15, line: 205, column: 2)
!2494 = !DILocalVariable(name: "page", scope: !2493, file: !15, line: 208, type: !53, align: 8)
!2495 = !DILocation(line: 208, column: 22, scope: !2493)
!2496 = !DILocation(line: 208, column: 29, scope: !2493)
!2497 = !DILocation(line: 208, column: 39, scope: !2493)
!2498 = !DILocation(line: 209, column: 10, scope: !2493)
!2499 = !DILocalVariable(name: "is_realloc_of_last", scope: !2470, file: !15, line: 211, type: !67, align: 1)
!2500 = !DILocation(line: 211, column: 7, scope: !2470)
!2501 = !DILocation(line: 211, column: 41, scope: !2470)
!2502 = !DILocation(line: 211, column: 28, scope: !2470)
!2503 = !DILocation(line: 211, column: 53, scope: !2470)
!2504 = !DILocation(line: 211, column: 63, scope: !2470)
!2505 = !DILocation(line: 212, column: 6, scope: !2470)
!2506 = !DILocalVariable(name: "diff", scope: !2507, file: !15, line: 214, type: !2508, align: 8)
!2507 = distinct !DILexicalBlock(scope: !2470, file: !15, line: 213, column: 2)
!2508 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !217)
!2509 = !DILocation(line: 214, column: 7, scope: !2507)
!2510 = !DILocation(line: 214, column: 14, scope: !2507)
!2511 = !DILocation(line: 214, column: 21, scope: !2507)
!2512 = !DILocation(line: 215, column: 7, scope: !2507)
!2513 = !DILocation(line: 215, column: 25, scope: !2507)
!2514 = !DILocation(line: 216, column: 7, scope: !2507)
!2515 = !DILocation(line: 216, column: 23, scope: !2507)
!2516 = !DILocation(line: 216, column: 35, scope: !2507)
!2517 = !DILocation(line: 218, column: 4, scope: !2518)
!2518 = distinct !DILexicalBlock(scope: !2507, file: !15, line: 217, column: 3)
!2519 = !DILocation(line: 218, column: 18, scope: !2518)
!2520 = !DILocation(line: 219, column: 4, scope: !2518)
!2521 = !DILocation(line: 219, column: 17, scope: !2518)
!2522 = !DILocation(line: 230, column: 11, scope: !2518)
!2523 = !DILocalVariable(name: "data", scope: !2470, file: !15, line: 233, type: !36, align: 8)
!2524 = !DILocation(line: 233, column: 8, scope: !2470)
!2525 = !DILocation(line: 233, column: 15, scope: !2470)
!2526 = !DILocation(line: 233, column: 28, scope: !2470)
!2527 = !DILocation(line: 233, column: 43, scope: !2470)
!2528 = !DILocation(line: 248, column: 11, scope: !2470)
!2529 = !DILocation(line: 973, column: 9, scope: !2530, inlinedAt: !2531)
!2530 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2531 = !DILocation(line: 248, column: 25, scope: !2470)
!2532 = !DILocation(line: 973, column: 20, scope: !2530, inlinedAt: !2531)
!2533 = !DILocation(line: 973, column: 25, scope: !2530, inlinedAt: !2531)
!2534 = !DILocalVariable(name: "len_to_copy", scope: !2470, file: !15, line: 234, type: !12, align: 8)
!2535 = !DILocation(line: 234, column: 6, scope: !2470)
!2536 = !DILocation(line: 234, column: 20, scope: !2470)
!2537 = !DILocation(line: 234, column: 33, scope: !2470)
!2538 = !DILocation(line: 234, column: 40, scope: !2470)
!2539 = !DILocation(line: 234, column: 47, scope: !2470)
!2540 = !DILocation(line: 329, column: 23, scope: !2541, inlinedAt: !2543)
!2541 = distinct !DILexicalBlock(scope: !2542, file: !166, line: 330, column: 1)
!2542 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !166, file: !166, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2543 = !DILocation(line: 235, column: 2, scope: !2470)
!2544 = !DILocation(line: 326, column: 11, scope: !2541, inlinedAt: !2543)
!2545 = !DILocation(line: 326, column: 26, scope: !2541, inlinedAt: !2543)
!2546 = !DILocation(line: 235, column: 2, scope: !2541, inlinedAt: !2543)
!2547 = !DILocation(line: 327, column: 11, scope: !2541, inlinedAt: !2543)
!2548 = !DILocation(line: 327, column: 23, scope: !2541, inlinedAt: !2543)
!2549 = !DILocation(line: 327, column: 29, scope: !2541, inlinedAt: !2543)
!2550 = !DILocation(line: 327, column: 36, scope: !2541, inlinedAt: !2543)
!2551 = !DILocation(line: 327, column: 43, scope: !2541, inlinedAt: !2543)
!2552 = !DILocation(line: 327, column: 49, scope: !2541, inlinedAt: !2543)
!2553 = !DILocation(line: 327, column: 56, scope: !2541, inlinedAt: !2543)
!2554 = !DILocation(line: 331, column: 11, scope: !2542, inlinedAt: !2543)
!2555 = !DILocation(line: 331, column: 16, scope: !2542, inlinedAt: !2543)
!2556 = !DILocation(line: 331, column: 21, scope: !2542, inlinedAt: !2543)
!2557 = !DILocation(line: 331, column: 26, scope: !2542, inlinedAt: !2543)
!2558 = !DILocation(line: 236, column: 6, scope: !2470)
!2559 = !DILocation(line: 238, column: 3, scope: !2560)
!2560 = distinct !DILexicalBlock(scope: !2470, file: !15, line: 237, column: 2)
!2561 = !DILocation(line: 238, column: 15, scope: !2560)
!2562 = !DILocation(line: 238, column: 36, scope: !2560)
!2563 = !DILocation(line: 239, column: 3, scope: !2560)
!2564 = !DILocation(line: 243, column: 9, scope: !2470)
!2565 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.TempAllocator.acquire", scope: !15, file: !15, line: 251, type: !2566, scopeLine: 251, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2566 = !DISubroutineType(types: !2567)
!2567 = !{!216, !218, !48, !8, !92, !8}
!2568 = !DILocation(line: 252, column: 1, scope: !2565)
!2569 = !DILocalVariable(name: "self", arg: 1, scope: !2565, file: !15, line: 251, type: !48)
!2570 = !DILocation(line: 251, column: 33, scope: !2565)
!2571 = !DILocalVariable(name: "size", arg: 2, scope: !2565, file: !15, line: 251, type: !12)
!2572 = !DILocation(line: 251, column: 44, scope: !2565)
!2573 = !DILocalVariable(name: "init_type", arg: 3, scope: !2565, file: !15, line: 251, type: !92)
!2574 = !DILocation(line: 251, column: 64, scope: !2565)
!2575 = !DILocalVariable(name: "alignment", arg: 4, scope: !2565, file: !15, line: 251, type: !12)
!2576 = !DILocation(line: 251, column: 79, scope: !2565)
!2577 = !DILocation(line: 247, column: 11, scope: !2578)
!2578 = distinct !DILexicalBlock(scope: !2565, file: !15, line: 252, column: 1)
!2579 = !DILocation(line: 248, column: 11, scope: !2578)
!2580 = !DILocation(line: 973, column: 9, scope: !2581, inlinedAt: !2582)
!2581 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2582 = !DILocation(line: 248, column: 25, scope: !2578)
!2583 = !DILocation(line: 973, column: 20, scope: !2581, inlinedAt: !2582)
!2584 = !DILocation(line: 973, column: 25, scope: !2581, inlinedAt: !2582)
!2585 = !DILocation(line: 249, column: 11, scope: !2578)
!2586 = !DILocation(line: 253, column: 39, scope: !2565)
!2587 = !DILocation(line: 253, column: 14, scope: !2565)
!2588 = !DILocalVariable(name: "start_mem", scope: !2565, file: !15, line: 254, type: !36, align: 8)
!2589 = !DILocation(line: 254, column: 8, scope: !2565)
!2590 = !DILocation(line: 254, column: 21, scope: !2565)
!2591 = !DILocalVariable(name: "starting_ptr", scope: !2565, file: !15, line: 255, type: !36, align: 8)
!2592 = !DILocation(line: 255, column: 8, scope: !2565)
!2593 = !DILocation(line: 255, column: 23, scope: !2565)
!2594 = !DILocation(line: 255, column: 35, scope: !2565)
!2595 = !DILocalVariable(name: "aligned_header_start", scope: !2565, file: !15, line: 256, type: !36, align: 8)
!2596 = !DILocation(line: 256, column: 8, scope: !2565)
!2597 = !DILocation(line: 290, column: 37, scope: !2598, inlinedAt: !2599)
!2598 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !166, file: !166, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2599 = !DILocation(line: 256, column: 31, scope: !2565)
!2600 = !DILocation(line: 290, column: 48, scope: !2598, inlinedAt: !2599)
!2601 = !DILocation(line: 973, column: 9, scope: !2602, inlinedAt: !2603)
!2602 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2603 = !DILocation(line: 290, column: 22, scope: !2598, inlinedAt: !2599)
!2604 = !DILocation(line: 973, column: 20, scope: !2602, inlinedAt: !2603)
!2605 = !DILocation(line: 973, column: 25, scope: !2602, inlinedAt: !2603)
!2606 = !DILocation(line: 290, column: 9, scope: !2598, inlinedAt: !2599)
!2607 = !DILocalVariable(name: "mem", scope: !2565, file: !15, line: 257, type: !36, align: 8)
!2608 = !DILocation(line: 257, column: 8, scope: !2565)
!2609 = !DILocation(line: 257, column: 14, scope: !2565)
!2610 = !DILocation(line: 257, column: 37, scope: !2565)
!2611 = !DILocation(line: 258, column: 6, scope: !2565)
!2612 = !DILocation(line: 290, column: 37, scope: !2613, inlinedAt: !2614)
!2613 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !166, file: !166, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2614 = !DILocation(line: 260, column: 9, scope: !2615)
!2615 = distinct !DILexicalBlock(scope: !2565, file: !15, line: 259, column: 2)
!2616 = !DILocation(line: 290, column: 48, scope: !2613, inlinedAt: !2614)
!2617 = !DILocation(line: 973, column: 9, scope: !2618, inlinedAt: !2619)
!2618 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2619 = !DILocation(line: 290, column: 22, scope: !2613, inlinedAt: !2614)
!2620 = !DILocation(line: 973, column: 20, scope: !2618, inlinedAt: !2619)
!2621 = !DILocation(line: 973, column: 25, scope: !2618, inlinedAt: !2619)
!2622 = !DILocation(line: 290, column: 9, scope: !2613, inlinedAt: !2614)
!2623 = !DILocalVariable(name: "new_usage", scope: !2565, file: !15, line: 262, type: !12, align: 8)
!2624 = !DILocation(line: 262, column: 6, scope: !2565)
!2625 = !DILocation(line: 262, column: 24, scope: !2565)
!2626 = !DILocation(line: 262, column: 30, scope: !2565)
!2627 = !DILocation(line: 262, column: 18, scope: !2565)
!2628 = !DILocation(line: 262, column: 43, scope: !2565)
!2629 = !DILocation(line: 265, column: 6, scope: !2565)
!2630 = !DILocation(line: 265, column: 19, scope: !2565)
!2631 = !DILocation(line: 267, column: 46, scope: !2632)
!2632 = distinct !DILexicalBlock(scope: !2565, file: !15, line: 266, column: 2)
!2633 = !DILocation(line: 267, column: 58, scope: !2632)
!2634 = !DILocalVariable(name: "chunk_start", scope: !2632, file: !15, line: 268, type: !2483, align: 8)
!2635 = !DILocation(line: 268, column: 23, scope: !2632)
!2636 = !DILocation(line: 268, column: 37, scope: !2632)
!2637 = !DILocation(line: 268, column: 43, scope: !2632)
!2638 = !DILocation(line: 269, column: 3, scope: !2632)
!2639 = !DILocation(line: 269, column: 22, scope: !2632)
!2640 = !DILocation(line: 270, column: 3, scope: !2632)
!2641 = !DILocation(line: 270, column: 15, scope: !2632)
!2642 = !DILocation(line: 271, column: 7, scope: !2632)
!2643 = !DILocation(line: 308, column: 11, scope: !2644, inlinedAt: !2645)
!2644 = distinct !DISubprogram(name: "clear", linkageName: "clear", scope: !166, file: !166, line: 306, scopeLine: 306, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2645 = !DILocation(line: 271, column: 26, scope: !2632)
!2646 = !DILocation(line: 308, column: 25, scope: !2644, inlinedAt: !2645)
!2647 = !DILocation(line: 308, column: 30, scope: !2644, inlinedAt: !2645)
!2648 = !DILocation(line: 272, column: 10, scope: !2632)
!2649 = !DILocalVariable(name: "page", scope: !2565, file: !15, line: 276, type: !53, align: 8)
!2650 = !DILocation(line: 276, column: 21, scope: !2565)
!2651 = !DILocation(line: 279, column: 6, scope: !2565)
!2652 = !DILocalVariable(name: "total_alloc_size", scope: !2653, file: !15, line: 282, type: !12, align: 8)
!2653 = distinct !DILexicalBlock(scope: !2565, file: !15, line: 280, column: 2)
!2654 = !DILocation(line: 282, column: 7, scope: !2653)
!2655 = !DILocation(line: 282, column: 73, scope: !2653)
!2656 = !DILocation(line: 282, column: 46, scope: !2653)
!2657 = !DILocation(line: 282, column: 79, scope: !2653)
!2658 = !DILocation(line: 973, column: 9, scope: !2659, inlinedAt: !2660)
!2659 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2660 = !DILocation(line: 282, column: 26, scope: !2653)
!2661 = !DILocation(line: 973, column: 20, scope: !2659, inlinedAt: !2660)
!2662 = !DILocation(line: 973, column: 25, scope: !2659, inlinedAt: !2660)
!2663 = !DILocation(line: 283, column: 7, scope: !2653)
!2664 = !DILocation(line: 285, column: 36, scope: !2665)
!2665 = distinct !DILexicalBlock(scope: !2653, file: !15, line: 284, column: 3)
!2666 = !DILocation(line: 139, column: 6, scope: !2667, inlinedAt: !2668)
!2667 = distinct !DISubprogram(name: "calloc_aligned", linkageName: "calloc_aligned", scope: !28, file: !28, line: 137, scopeLine: 137, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2668 = !DILocation(line: 285, column: 10, scope: !2665)
!2669 = !DILocation(line: 139, column: 20, scope: !2667, inlinedAt: !2668)
!2670 = !DILocation(line: 140, column: 27, scope: !2667, inlinedAt: !2668)
!2671 = !DILocation(line: 140, column: 39, scope: !2667, inlinedAt: !2668)
!2672 = !DILocation(line: 37, column: 12, scope: !2667, inlinedAt: !2668)
!2673 = !DILocation(line: 973, column: 9, scope: !2674, inlinedAt: !2675)
!2674 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2675 = !DILocation(line: 37, column: 26, scope: !2667, inlinedAt: !2668)
!2676 = !DILocation(line: 973, column: 20, scope: !2674, inlinedAt: !2675)
!2677 = !DILocation(line: 973, column: 25, scope: !2674, inlinedAt: !2675)
!2678 = !DILocation(line: 140, column: 9, scope: !2667, inlinedAt: !2668)
!2679 = !DILocation(line: 289, column: 36, scope: !2680)
!2680 = distinct !DILexicalBlock(scope: !2653, file: !15, line: 288, column: 3)
!2681 = !DILocation(line: 127, column: 6, scope: !2682, inlinedAt: !2683)
!2682 = distinct !DISubprogram(name: "malloc_aligned", linkageName: "malloc_aligned", scope: !28, file: !28, line: 125, scopeLine: 125, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2683 = !DILocation(line: 289, column: 10, scope: !2680)
!2684 = !DILocation(line: 127, column: 20, scope: !2682, inlinedAt: !2683)
!2685 = !DILocation(line: 133, column: 28, scope: !2682, inlinedAt: !2683)
!2686 = !DILocation(line: 133, column: 43, scope: !2682, inlinedAt: !2683)
!2687 = !DILocation(line: 37, column: 12, scope: !2682, inlinedAt: !2683)
!2688 = !DILocation(line: 973, column: 9, scope: !2689, inlinedAt: !2690)
!2689 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2690 = !DILocation(line: 37, column: 26, scope: !2682, inlinedAt: !2683)
!2691 = !DILocation(line: 973, column: 20, scope: !2689, inlinedAt: !2690)
!2692 = !DILocation(line: 973, column: 25, scope: !2689, inlinedAt: !2690)
!2693 = !DILocation(line: 133, column: 10, scope: !2682, inlinedAt: !2683)
!2694 = !DILocalVariable(name: "start", scope: !2653, file: !15, line: 291, type: !36, align: 8)
!2695 = !DILocation(line: 291, column: 9, scope: !2653)
!2696 = !DILocation(line: 291, column: 17, scope: !2653)
!2697 = !DILocation(line: 292, column: 3, scope: !2653)
!2698 = !DILocation(line: 292, column: 56, scope: !2653)
!2699 = !DILocation(line: 973, column: 9, scope: !2700, inlinedAt: !2701)
!2700 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2701 = !DILocation(line: 292, column: 10, scope: !2653)
!2702 = !DILocation(line: 973, column: 20, scope: !2700, inlinedAt: !2701)
!2703 = !DILocation(line: 973, column: 25, scope: !2700, inlinedAt: !2701)
!2704 = !DILocation(line: 293, column: 30, scope: !2653)
!2705 = !DILocation(line: 293, column: 36, scope: !2653)
!2706 = !DILocation(line: 294, column: 3, scope: !2653)
!2707 = !DILocation(line: 294, column: 16, scope: !2653)
!2708 = !DILocation(line: 295, column: 3, scope: !2653)
!2709 = !DILocation(line: 295, column: 15, scope: !2653)
!2710 = !DILocalVariable(name: "padded_header_size", scope: !2711, file: !15, line: 300, type: !12, align: 8)
!2711 = distinct !DILexicalBlock(scope: !2565, file: !15, line: 298, column: 2)
!2712 = !DILocation(line: 300, column: 7, scope: !2711)
!2713 = !DILocation(line: 973, column: 9, scope: !2714, inlinedAt: !2715)
!2714 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2715 = !DILocation(line: 300, column: 28, scope: !2711)
!2716 = !DILocation(line: 973, column: 20, scope: !2714, inlinedAt: !2715)
!2717 = !DILocation(line: 973, column: 25, scope: !2714, inlinedAt: !2715)
!2718 = !DILocalVariable(name: "total_alloc_size", scope: !2711, file: !15, line: 301, type: !12, align: 8)
!2719 = !DILocation(line: 301, column: 7, scope: !2711)
!2720 = !DILocation(line: 301, column: 26, scope: !2711)
!2721 = !DILocation(line: 301, column: 47, scope: !2711)
!2722 = !DILocalVariable(name: "alloc", scope: !2711, file: !15, line: 302, type: !36, align: 8)
!2723 = !DILocation(line: 302, column: 9, scope: !2711)
!2724 = !DILocation(line: 302, column: 17, scope: !2711)
!2725 = !DILocation(line: 302, column: 48, scope: !2711)
!2726 = !DILocation(line: 302, column: 66, scope: !2711)
!2727 = !DILocation(line: 37, column: 12, scope: !2711)
!2728 = !DILocation(line: 973, column: 9, scope: !2729, inlinedAt: !2730)
!2729 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2730 = !DILocation(line: 37, column: 26, scope: !2711)
!2731 = !DILocation(line: 973, column: 20, scope: !2729, inlinedAt: !2730)
!2732 = !DILocation(line: 973, column: 25, scope: !2729, inlinedAt: !2730)
!2733 = !DILocation(line: 305, column: 10, scope: !2711)
!2734 = !DILocation(line: 305, column: 18, scope: !2711)
!2735 = !DILocation(line: 306, column: 30, scope: !2711)
!2736 = !DILocation(line: 973, column: 9, scope: !2737, inlinedAt: !2738)
!2737 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2738 = !DILocation(line: 306, column: 10, scope: !2711)
!2739 = !DILocation(line: 973, column: 20, scope: !2737, inlinedAt: !2738)
!2740 = !DILocation(line: 973, column: 25, scope: !2737, inlinedAt: !2738)
!2741 = !DILocation(line: 307, column: 31, scope: !2711)
!2742 = !DILocation(line: 973, column: 9, scope: !2743, inlinedAt: !2744)
!2743 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2744 = !DILocation(line: 307, column: 10, scope: !2711)
!2745 = !DILocation(line: 973, column: 20, scope: !2743, inlinedAt: !2744)
!2746 = !DILocation(line: 973, column: 25, scope: !2743, inlinedAt: !2744)
!2747 = !DILocation(line: 308, column: 3, scope: !2711)
!2748 = !DILocation(line: 308, column: 16, scope: !2711)
!2749 = !DILocation(line: 309, column: 3, scope: !2711)
!2750 = !DILocation(line: 309, column: 15, scope: !2711)
!2751 = !DILocation(line: 313, column: 2, scope: !2565)
!2752 = !DILocation(line: 313, column: 15, scope: !2565)
!2753 = !DILocation(line: 315, column: 2, scope: !2565)
!2754 = !DILocation(line: 315, column: 19, scope: !2565)
!2755 = !DILocation(line: 316, column: 2, scope: !2565)
!2756 = !DILocation(line: 316, column: 19, scope: !2565)
!2757 = !DILocation(line: 317, column: 10, scope: !2565)
!2758 = !DILocation(line: 317, column: 20, scope: !2565)
!2759 = distinct !DISubprogram(name: "new_temp_allocator", linkageName: "std.core.mem.allocator.new_temp_allocator", scope: !15, file: !15, line: 68, type: !2760, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2760 = !DISubroutineType(types: !2761)
!2761 = !{!216, !2219, !33, !8}
!2762 = !DILocalVariable(name: "allocator", arg: 1, scope: !2759, file: !15, line: 68, type: !33)
!2763 = !DILocation(line: 68, column: 49, scope: !2759)
!2764 = !DILocalVariable(name: "size", arg: 2, scope: !2759, file: !15, line: 68, type: !12)
!2765 = !DILocation(line: 68, column: 64, scope: !2759)
!2766 = !DILocation(line: 65, column: 11, scope: !2767)
!2767 = distinct !DILexicalBlock(scope: !2759, file: !15, line: 69, column: 1)
!2768 = !DILocation(line: 66, column: 11, scope: !2767)
!2769 = !DILocalVariable(name: "temp", scope: !2759, file: !15, line: 70, type: !48, align: 8)
!2770 = !DILocation(line: 70, column: 17, scope: !2759)
!2771 = !DILocation(line: 253, column: 54, scope: !2772, inlinedAt: !2773)
!2772 = distinct !DISubprogram(name: "alloc_with_padding", linkageName: "alloc_with_padding", scope: !28, file: !28, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2773 = !DILocation(line: 70, column: 24, scope: !2759)
!2774 = !DILocation(line: 253, column: 39, scope: !2772, inlinedAt: !2773)
!2775 = !DILocation(line: 79, column: 6, scope: !2776, inlinedAt: !2777)
!2776 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !28, file: !28, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2777 = !DILocation(line: 253, column: 17, scope: !2772, inlinedAt: !2773)
!2778 = !DILocation(line: 79, column: 20, scope: !2776, inlinedAt: !2777)
!2779 = !DILocation(line: 85, column: 28, scope: !2776, inlinedAt: !2777)
!2780 = !DILocation(line: 37, column: 12, scope: !2776, inlinedAt: !2777)
!2781 = !DILocation(line: 973, column: 9, scope: !2782, inlinedAt: !2783)
!2782 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2783 = !DILocation(line: 37, column: 26, scope: !2776, inlinedAt: !2777)
!2784 = !DILocation(line: 973, column: 20, scope: !2782, inlinedAt: !2783)
!2785 = !DILocation(line: 973, column: 25, scope: !2782, inlinedAt: !2783)
!2786 = !DILocation(line: 85, column: 10, scope: !2776, inlinedAt: !2777)
!2787 = !DILocation(line: 71, column: 2, scope: !2759)
!2788 = !DILocation(line: 71, column: 19, scope: !2759)
!2789 = !DILocation(line: 72, column: 2, scope: !2759)
!2790 = !DILocation(line: 72, column: 27, scope: !2759)
!2791 = !DILocation(line: 73, column: 2, scope: !2759)
!2792 = !DILocation(line: 73, column: 14, scope: !2759)
!2793 = !DILocation(line: 74, column: 2, scope: !2759)
!2794 = !DILocation(line: 74, column: 19, scope: !2759)
!2795 = !DILocation(line: 75, column: 2, scope: !2759)
!2796 = !DILocation(line: 75, column: 17, scope: !2759)
!2797 = !DILocation(line: 76, column: 2, scope: !2759)
!2798 = !DILocation(line: 76, column: 27, scope: !2759)
!2799 = !DILocation(line: 76, column: 43, scope: !2759)
!2800 = !DILocation(line: 77, column: 9, scope: !2759)
!2801 = distinct !DISubprogram(name: "init", linkageName: "std.core.mem.allocator.ArenaAllocator.init", scope: !2802, file: !2802, line: 22, type: !2803, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2802 = !DIFile(filename: "arena_allocator.c3", directory: "/usr/lib/c3c/lib/std/core/allocators")
!2803 = !DISubroutineType(types: !2804)
!2804 = !{!2805, !2805, !498}
!2805 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ArenaAllocator*", baseType: !2806, size: 64, align: 64, dwarfAddressSpace: 0)
!2806 = !DICompositeType(tag: DW_TAG_structure_type, name: "ArenaAllocator", scope: !2802, file: !2802, line: 11, size: 192, align: 64, elements: !2807, identifier: "std.core.mem.allocator.ArenaAllocator")
!2807 = !{!2808, !2809}
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2806, file: !2802, line: 13, baseType: !498, size: 128, align: 64)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2806, file: !2802, line: 14, baseType: !12, size: 64, align: 64, offset: 128)
!2810 = !DILocation(line: 23, column: 1, scope: !2801)
!2811 = !DILocalVariable(name: "self", arg: 1, scope: !2801, file: !2802, line: 22, type: !2805)
!2812 = !DILocation(line: 22, column: 40, scope: !2801)
!2813 = !DILocalVariable(name: "data", arg: 2, scope: !2801, file: !2802, line: 22, type: !498)
!2814 = !DILocation(line: 22, column: 54, scope: !2801)
!2815 = !DILocation(line: 24, column: 2, scope: !2801)
!2816 = !DILocation(line: 24, column: 14, scope: !2801)
!2817 = !DILocation(line: 25, column: 2, scope: !2801)
!2818 = !DILocation(line: 25, column: 14, scope: !2801)
!2819 = !DILocation(line: 26, column: 9, scope: !2801)
!2820 = distinct !DISubprogram(name: "clear", linkageName: "std.core.mem.allocator.ArenaAllocator.clear", scope: !2802, file: !2802, line: 32, type: !2821, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2821 = !DISubroutineType(types: !2822)
!2822 = !{null, !2805}
!2823 = !DILocation(line: 33, column: 1, scope: !2820)
!2824 = !DILocalVariable(name: "self", arg: 1, scope: !2820, file: !2802, line: 32, type: !2805)
!2825 = !DILocation(line: 32, column: 30, scope: !2820)
!2826 = !DILocation(line: 34, column: 2, scope: !2820)
!2827 = !DILocation(line: 34, column: 14, scope: !2820)
!2828 = distinct !DISubprogram(name: "mark", linkageName: "std.core.mem.allocator.ArenaAllocator.mark", scope: !2802, file: !2802, line: 54, type: !2829, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2829 = !DISubroutineType(types: !2830)
!2830 = !{!12, !2805}
!2831 = !DILocation(line: 54, column: 38, scope: !2828)
!2832 = !DILocalVariable(name: "self", arg: 1, scope: !2828, file: !2802, line: 54, type: !2805)
!2833 = !DILocation(line: 54, column: 28, scope: !2828)
!2834 = distinct !DISubprogram(name: "reset", linkageName: "std.core.mem.allocator.ArenaAllocator.reset", scope: !2802, file: !2802, line: 62, type: !2835, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2835 = !DISubroutineType(types: !2836)
!2836 = !{null, !2805, !8}
!2837 = !DILocation(line: 62, column: 50, scope: !2834)
!2838 = !DILocalVariable(name: "self", arg: 1, scope: !2834, file: !2802, line: 62, type: !2805)
!2839 = !DILocation(line: 62, column: 30, scope: !2834)
!2840 = !DILocalVariable(name: "mark", arg: 2, scope: !2834, file: !2802, line: 62, type: !12)
!2841 = !DILocation(line: 62, column: 41, scope: !2834)
!2842 = !DILocation(line: 60, column: 11, scope: !2843)
!2843 = distinct !DILexicalBlock(scope: !2834, file: !2802, line: 62, column: 50)
!2844 = !DILocation(line: 60, column: 19, scope: !2843)
!2845 = !DILocation(line: 62, column: 62, scope: !2834)
!2846 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.ArenaAllocator.release", scope: !2802, file: !2802, line: 69, type: !2847, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2847 = !DISubroutineType(types: !2848)
!2848 = !{null, !2805, !36, !67}
!2849 = !DILocation(line: 70, column: 1, scope: !2846)
!2850 = !DILocalVariable(name: "self", arg: 1, scope: !2846, file: !2802, line: 69, type: !2805)
!2851 = !DILocation(line: 69, column: 32, scope: !2846)
!2852 = !DILocalVariable(name: "ptr", arg: 2, scope: !2846, file: !2802, line: 69, type: !36)
!2853 = !DILocation(line: 69, column: 45, scope: !2846)
!2854 = !DILocalVariable(name: ".anon", arg: 3, scope: !2846, file: !2802, line: 69, type: !67)
!2855 = !DILocation(line: 69, column: 50, scope: !2846)
!2856 = !DILocation(line: 67, column: 11, scope: !2857)
!2857 = distinct !DILexicalBlock(scope: !2846, file: !2802, line: 70, column: 1)
!2858 = !DILocation(line: 71, column: 9, scope: !2846)
!2859 = !DILocation(line: 71, column: 28, scope: !2846)
!2860 = !DILocalVariable(name: "header", scope: !2846, file: !2802, line: 72, type: !2861, align: 8)
!2861 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ArenaAllocatorHeader*", baseType: !2862, size: 64, align: 64, dwarfAddressSpace: 0)
!2862 = !DICompositeType(tag: DW_TAG_structure_type, name: "ArenaAllocatorHeader", scope: !2802, file: !2802, line: 147, size: 64, align: 64, elements: !2863, identifier: "std.core.mem.allocator.ArenaAllocatorHeader")
!2863 = !{!2864, !2865}
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2862, file: !2802, line: 149, baseType: !12, size: 64, align: 64)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2862, file: !2802, line: 150, baseType: !61, align: 8, offset: 64)
!2866 = !DILocation(line: 72, column: 24, scope: !2846)
!2867 = !DILocation(line: 72, column: 33, scope: !2846)
!2868 = !DILocation(line: 72, column: 39, scope: !2846)
!2869 = !DILocation(line: 74, column: 6, scope: !2846)
!2870 = !DILocation(line: 74, column: 12, scope: !2846)
!2871 = !DILocation(line: 74, column: 28, scope: !2846)
!2872 = !DILocation(line: 74, column: 38, scope: !2846)
!2873 = !DILocation(line: 76, column: 3, scope: !2874)
!2874 = distinct !DILexicalBlock(scope: !2846, file: !2802, line: 75, column: 2)
!2875 = !DILocation(line: 76, column: 16, scope: !2874)
!2876 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.ArenaAllocator.acquire", scope: !2802, file: !2802, line: 89, type: !2877, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2877 = !DISubroutineType(types: !2878)
!2878 = !{!216, !218, !2805, !8, !92, !8}
!2879 = !DILocation(line: 90, column: 1, scope: !2876)
!2880 = !DILocalVariable(name: "self", arg: 1, scope: !2876, file: !2802, line: 89, type: !2805)
!2881 = !DILocation(line: 89, column: 34, scope: !2876)
!2882 = !DILocalVariable(name: "size", arg: 2, scope: !2876, file: !2802, line: 89, type: !12)
!2883 = !DILocation(line: 89, column: 45, scope: !2876)
!2884 = !DILocalVariable(name: "init_type", arg: 3, scope: !2876, file: !2802, line: 89, type: !92)
!2885 = !DILocation(line: 89, column: 65, scope: !2876)
!2886 = !DILocalVariable(name: "alignment", arg: 4, scope: !2876, file: !2802, line: 89, type: !12)
!2887 = !DILocation(line: 89, column: 80, scope: !2876)
!2888 = !DILocation(line: 84, column: 11, scope: !2889)
!2889 = distinct !DILexicalBlock(scope: !2876, file: !2802, line: 90, column: 1)
!2890 = !DILocation(line: 973, column: 9, scope: !2891, inlinedAt: !2892)
!2891 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2892 = !DILocation(line: 84, column: 25, scope: !2889)
!2893 = !DILocation(line: 973, column: 20, scope: !2891, inlinedAt: !2892)
!2894 = !DILocation(line: 973, column: 25, scope: !2891, inlinedAt: !2892)
!2895 = !DILocation(line: 85, column: 11, scope: !2889)
!2896 = !DILocation(line: 86, column: 11, scope: !2889)
!2897 = !DILocation(line: 91, column: 39, scope: !2876)
!2898 = !DILocation(line: 91, column: 14, scope: !2876)
!2899 = !DILocalVariable(name: "total_len", scope: !2876, file: !2802, line: 92, type: !12, align: 8)
!2900 = !DILocation(line: 92, column: 6, scope: !2876)
!2901 = !DILocation(line: 92, column: 18, scope: !2876)
!2902 = !DILocation(line: 93, column: 6, scope: !2876)
!2903 = !DILocation(line: 93, column: 13, scope: !2876)
!2904 = !DILocation(line: 93, column: 31, scope: !2876)
!2905 = !DILocalVariable(name: "start_mem", scope: !2876, file: !2802, line: 94, type: !36, align: 8)
!2906 = !DILocation(line: 94, column: 8, scope: !2876)
!2907 = !DILocation(line: 94, column: 20, scope: !2876)
!2908 = !DILocalVariable(name: "unaligned_pointer_to_offset", scope: !2876, file: !2802, line: 95, type: !36, align: 8)
!2909 = !DILocation(line: 95, column: 8, scope: !2876)
!2910 = !DILocation(line: 95, column: 38, scope: !2876)
!2911 = !DILocation(line: 95, column: 50, scope: !2876)
!2912 = !DILocalVariable(name: "mem", scope: !2876, file: !2802, line: 96, type: !36, align: 8)
!2913 = !DILocation(line: 96, column: 8, scope: !2876)
!2914 = !DILocation(line: 290, column: 37, scope: !2915, inlinedAt: !2916)
!2915 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !166, file: !166, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2916 = !DILocation(line: 96, column: 14, scope: !2876)
!2917 = !DILocation(line: 290, column: 48, scope: !2915, inlinedAt: !2916)
!2918 = !DILocation(line: 973, column: 9, scope: !2919, inlinedAt: !2920)
!2919 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2920 = !DILocation(line: 290, column: 22, scope: !2915, inlinedAt: !2916)
!2921 = !DILocation(line: 973, column: 20, scope: !2919, inlinedAt: !2920)
!2922 = !DILocation(line: 973, column: 25, scope: !2919, inlinedAt: !2920)
!2923 = !DILocation(line: 290, column: 9, scope: !2915, inlinedAt: !2916)
!2924 = !DILocalVariable(name: "end", scope: !2876, file: !2802, line: 97, type: !12, align: 8)
!2925 = !DILocation(line: 97, column: 6, scope: !2876)
!2926 = !DILocation(line: 97, column: 18, scope: !2876)
!2927 = !DILocation(line: 97, column: 24, scope: !2876)
!2928 = !DILocation(line: 97, column: 12, scope: !2876)
!2929 = !DILocation(line: 97, column: 41, scope: !2876)
!2930 = !DILocation(line: 98, column: 6, scope: !2876)
!2931 = !DILocation(line: 98, column: 12, scope: !2876)
!2932 = !DILocation(line: 98, column: 30, scope: !2876)
!2933 = !DILocation(line: 99, column: 2, scope: !2876)
!2934 = !DILocation(line: 99, column: 14, scope: !2876)
!2935 = !DILocalVariable(name: "header", scope: !2876, file: !2802, line: 100, type: !2861, align: 8)
!2936 = !DILocation(line: 100, column: 24, scope: !2876)
!2937 = !DILocation(line: 100, column: 33, scope: !2876)
!2938 = !DILocation(line: 100, column: 39, scope: !2876)
!2939 = !DILocation(line: 101, column: 2, scope: !2876)
!2940 = !DILocation(line: 101, column: 16, scope: !2876)
!2941 = !DILocation(line: 102, column: 6, scope: !2876)
!2942 = !DILocation(line: 308, column: 11, scope: !2943, inlinedAt: !2944)
!2943 = distinct !DISubprogram(name: "clear", linkageName: "clear", scope: !166, file: !166, line: 306, scopeLine: 306, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2944 = !DILocation(line: 102, column: 25, scope: !2876)
!2945 = !DILocation(line: 308, column: 25, scope: !2943, inlinedAt: !2944)
!2946 = !DILocation(line: 308, column: 30, scope: !2943, inlinedAt: !2944)
!2947 = !DILocation(line: 103, column: 9, scope: !2876)
!2948 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.ArenaAllocator.resize", scope: !2802, file: !2802, line: 115, type: !2949, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!2949 = !DISubroutineType(types: !2950)
!2950 = !{!216, !218, !2805, !36, !8, !8}
!2951 = !DILocation(line: 116, column: 1, scope: !2948)
!2952 = !DILocalVariable(name: "self", arg: 1, scope: !2948, file: !2802, line: 115, type: !2805)
!2953 = !DILocation(line: 115, column: 33, scope: !2948)
!2954 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !2948, file: !2802, line: 115, type: !36)
!2955 = !DILocation(line: 115, column: 46, scope: !2948)
!2956 = !DILocalVariable(name: "size", arg: 3, scope: !2948, file: !2802, line: 115, type: !12)
!2957 = !DILocation(line: 115, column: 63, scope: !2948)
!2958 = !DILocalVariable(name: "alignment", arg: 4, scope: !2948, file: !2802, line: 115, type: !12)
!2959 = !DILocation(line: 115, column: 73, scope: !2948)
!2960 = !DILocation(line: 109, column: 11, scope: !2961)
!2961 = distinct !DILexicalBlock(scope: !2948, file: !2802, line: 116, column: 1)
!2962 = !DILocation(line: 973, column: 9, scope: !2963, inlinedAt: !2964)
!2963 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2964 = !DILocation(line: 109, column: 25, scope: !2961)
!2965 = !DILocation(line: 973, column: 20, scope: !2963, inlinedAt: !2964)
!2966 = !DILocation(line: 973, column: 25, scope: !2963, inlinedAt: !2964)
!2967 = !DILocation(line: 110, column: 11, scope: !2961)
!2968 = !DILocation(line: 111, column: 11, scope: !2961)
!2969 = !DILocation(line: 112, column: 11, scope: !2961)
!2970 = !DILocation(line: 117, column: 39, scope: !2948)
!2971 = !DILocation(line: 117, column: 14, scope: !2948)
!2972 = !DILocation(line: 118, column: 9, scope: !2948)
!2973 = !DILocation(line: 118, column: 24, scope: !2948)
!2974 = !DILocalVariable(name: "total_len", scope: !2948, file: !2802, line: 119, type: !12, align: 8)
!2975 = !DILocation(line: 119, column: 6, scope: !2948)
!2976 = !DILocation(line: 119, column: 18, scope: !2948)
!2977 = !DILocation(line: 120, column: 6, scope: !2948)
!2978 = !DILocation(line: 120, column: 13, scope: !2948)
!2979 = !DILocation(line: 120, column: 31, scope: !2948)
!2980 = !DILocalVariable(name: "header", scope: !2948, file: !2802, line: 121, type: !2861, align: 8)
!2981 = !DILocation(line: 121, column: 24, scope: !2948)
!2982 = !DILocation(line: 121, column: 33, scope: !2948)
!2983 = !DILocation(line: 121, column: 47, scope: !2948)
!2984 = !DILocalVariable(name: "old_size", scope: !2948, file: !2802, line: 122, type: !12, align: 8)
!2985 = !DILocation(line: 122, column: 6, scope: !2948)
!2986 = !DILocation(line: 122, column: 17, scope: !2948)
!2987 = !DILocation(line: 124, column: 7, scope: !2948)
!2988 = !DILocation(line: 124, column: 17, scope: !2948)
!2989 = !DILocation(line: 124, column: 31, scope: !2948)
!2990 = !DILocation(line: 124, column: 45, scope: !2948)
!2991 = !DILocation(line: 124, column: 6, scope: !2948)
!2992 = !DILocation(line: 124, column: 77, scope: !2948)
!2993 = !DILocation(line: 124, column: 90, scope: !2948)
!2994 = !DILocation(line: 973, column: 9, scope: !2995, inlinedAt: !2996)
!2995 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!2996 = !DILocation(line: 124, column: 57, scope: !2948)
!2997 = !DILocation(line: 973, column: 20, scope: !2995, inlinedAt: !2996)
!2998 = !DILocation(line: 973, column: 25, scope: !2995, inlinedAt: !2996)
!2999 = !DILocation(line: 126, column: 7, scope: !3000)
!3000 = distinct !DILexicalBlock(scope: !2948, file: !2802, line: 125, column: 2)
!3001 = !DILocation(line: 126, column: 19, scope: !3000)
!3002 = !DILocation(line: 128, column: 4, scope: !3003)
!3003 = distinct !DILexicalBlock(scope: !3000, file: !2802, line: 127, column: 3)
!3004 = !DILocation(line: 128, column: 17, scope: !3003)
!3005 = !DILocation(line: 128, column: 28, scope: !3003)
!3006 = !DILocalVariable(name: "new_used", scope: !3007, file: !2802, line: 132, type: !12, align: 8)
!3007 = distinct !DILexicalBlock(scope: !3000, file: !2802, line: 131, column: 3)
!3008 = !DILocation(line: 132, column: 8, scope: !3007)
!3009 = !DILocation(line: 132, column: 19, scope: !3007)
!3010 = !DILocation(line: 132, column: 31, scope: !3007)
!3011 = !DILocation(line: 132, column: 38, scope: !3007)
!3012 = !DILocation(line: 133, column: 8, scope: !3007)
!3013 = !DILocation(line: 133, column: 19, scope: !3007)
!3014 = !DILocation(line: 133, column: 37, scope: !3007)
!3015 = !DILocation(line: 134, column: 4, scope: !3007)
!3016 = !DILocation(line: 134, column: 16, scope: !3007)
!3017 = !DILocation(line: 136, column: 3, scope: !3000)
!3018 = !DILocation(line: 136, column: 17, scope: !3000)
!3019 = !DILocation(line: 137, column: 10, scope: !3000)
!3020 = !DILocalVariable(name: "mem", scope: !2948, file: !2802, line: 140, type: !36, align: 8)
!3021 = !DILocation(line: 140, column: 8, scope: !2948)
!3022 = !DILocation(line: 140, column: 14, scope: !2948)
!3023 = !DILocation(line: 140, column: 27, scope: !2948)
!3024 = !DILocation(line: 140, column: 42, scope: !2948)
!3025 = !DILocation(line: 84, column: 11, scope: !2948)
!3026 = !DILocation(line: 973, column: 9, scope: !3027, inlinedAt: !3028)
!3027 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3028 = !DILocation(line: 84, column: 25, scope: !2948)
!3029 = !DILocation(line: 973, column: 20, scope: !3027, inlinedAt: !3028)
!3030 = !DILocation(line: 973, column: 25, scope: !3027, inlinedAt: !3028)
!3031 = !DILocation(line: 329, column: 23, scope: !3032, inlinedAt: !3034)
!3032 = distinct !DILexicalBlock(scope: !3033, file: !166, line: 330, column: 1)
!3033 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !166, file: !166, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3034 = !DILocation(line: 141, column: 2, scope: !2948)
!3035 = !DILocation(line: 326, column: 11, scope: !3032, inlinedAt: !3034)
!3036 = !DILocation(line: 326, column: 26, scope: !3032, inlinedAt: !3034)
!3037 = !DILocation(line: 141, column: 2, scope: !3032, inlinedAt: !3034)
!3038 = !DILocation(line: 327, column: 11, scope: !3032, inlinedAt: !3034)
!3039 = !DILocation(line: 327, column: 23, scope: !3032, inlinedAt: !3034)
!3040 = !DILocation(line: 327, column: 29, scope: !3032, inlinedAt: !3034)
!3041 = !DILocation(line: 327, column: 36, scope: !3032, inlinedAt: !3034)
!3042 = !DILocation(line: 327, column: 43, scope: !3032, inlinedAt: !3034)
!3043 = !DILocation(line: 327, column: 49, scope: !3032, inlinedAt: !3034)
!3044 = !DILocation(line: 327, column: 56, scope: !3032, inlinedAt: !3034)
!3045 = !DILocation(line: 331, column: 11, scope: !3033, inlinedAt: !3034)
!3046 = !DILocation(line: 331, column: 16, scope: !3033, inlinedAt: !3034)
!3047 = !DILocation(line: 331, column: 21, scope: !3033, inlinedAt: !3034)
!3048 = !DILocation(line: 331, column: 26, scope: !3033, inlinedAt: !3034)
!3049 = !DILocation(line: 142, column: 9, scope: !2948)
!3050 = distinct !DISubprogram(name: "init", linkageName: "std.core.mem.allocator.DynamicArenaAllocator.init", scope: !3051, file: !3051, line: 30, type: !3052, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3051 = !DIFile(filename: "dynamic_arena.c3", directory: "/usr/lib/c3c/lib/std/core/allocators")
!3052 = !DISubroutineType(types: !3053)
!3053 = !{null, !3054, !33, !8}
!3054 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "DynamicArenaAllocator*", baseType: !3055, size: 64, align: 64, dwarfAddressSpace: 0)
!3055 = !DICompositeType(tag: DW_TAG_structure_type, name: "DynamicArenaAllocator", scope: !3051, file: !3051, line: 18, size: 320, align: 64, elements: !3056, identifier: "std.core.mem.allocator.DynamicArenaAllocator")
!3056 = !{!3057, !3058, !3067, !3068}
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !3055, file: !3051, line: 20, baseType: !33, size: 128, align: 64)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "page", scope: !3055, file: !3051, line: 21, baseType: !3059, size: 64, align: 64, offset: 128)
!3059 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "DynamicArenaPage*", baseType: !3060, size: 64, align: 64, dwarfAddressSpace: 0)
!3060 = !DICompositeType(tag: DW_TAG_structure_type, name: "DynamicArenaPage", scope: !3051, file: !3051, line: 60, size: 320, align: 64, elements: !3061, identifier: "std.core.mem.allocator.DynamicArenaPage")
!3061 = !{!3062, !3063, !3064, !3065, !3066}
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "memory", scope: !3060, file: !3051, line: 62, baseType: !36, size: 64, align: 64)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "prev_arena", scope: !3060, file: !3051, line: 63, baseType: !36, size: 64, align: 64, offset: 64)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "total", scope: !3060, file: !3051, line: 64, baseType: !12, size: 64, align: 64, offset: 128)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !3060, file: !3051, line: 65, baseType: !12, size: 64, align: 64, offset: 192)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "current_stack_ptr", scope: !3060, file: !3051, line: 66, baseType: !36, size: 64, align: 64, offset: 256)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "unused_page", scope: !3055, file: !3051, line: 22, baseType: !3059, size: 64, align: 64, offset: 192)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "page_size", scope: !3055, file: !3051, line: 23, baseType: !12, size: 64, align: 64, offset: 256)
!3069 = !DILocation(line: 31, column: 1, scope: !3050)
!3070 = !DILocalVariable(name: "self", arg: 1, scope: !3050, file: !3051, line: 30, type: !3054)
!3071 = !DILocation(line: 30, column: 36, scope: !3050)
!3072 = !DILocalVariable(name: "allocator", arg: 2, scope: !3050, file: !3051, line: 30, type: !33)
!3073 = !DILocation(line: 30, column: 53, scope: !3050)
!3074 = !DILocalVariable(name: "page_size", arg: 3, scope: !3050, file: !3051, line: 30, type: !12)
!3075 = !DILocation(line: 30, column: 68, scope: !3050)
!3076 = !DILocation(line: 28, column: 11, scope: !3077)
!3077 = distinct !DILexicalBlock(scope: !3050, file: !3051, line: 31, column: 1)
!3078 = !DILocation(line: 32, column: 2, scope: !3050)
!3079 = !DILocation(line: 32, column: 14, scope: !3050)
!3080 = !DILocation(line: 33, column: 2, scope: !3050)
!3081 = !DILocation(line: 33, column: 21, scope: !3050)
!3082 = !DILocation(line: 34, column: 2, scope: !3050)
!3083 = !DILocation(line: 34, column: 19, scope: !3050)
!3084 = !DILocation(line: 35, column: 2, scope: !3050)
!3085 = !DILocation(line: 35, column: 27, scope: !3050)
!3086 = distinct !DISubprogram(name: "free", linkageName: "std.core.mem.allocator.DynamicArenaAllocator.free", scope: !3051, file: !3051, line: 38, type: !3087, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3087 = !DISubroutineType(types: !3088)
!3088 = !{null, !3054}
!3089 = !DILocation(line: 39, column: 1, scope: !3086)
!3090 = !DILocalVariable(name: "self", arg: 1, scope: !3086, file: !3051, line: 38, type: !3054)
!3091 = !DILocation(line: 38, column: 36, scope: !3086)
!3092 = !DILocalVariable(name: "page", scope: !3086, file: !3051, line: 40, type: !3059, align: 8)
!3093 = !DILocation(line: 40, column: 20, scope: !3086)
!3094 = !DILocation(line: 40, column: 27, scope: !3086)
!3095 = !DILocation(line: 41, column: 2, scope: !3086)
!3096 = !DILocation(line: 41, column: 9, scope: !3097)
!3097 = distinct !DILexicalBlock(scope: !3086, file: !3051, line: 41, column: 2)
!3098 = !DILocalVariable(name: "next_page", scope: !3099, file: !3051, line: 43, type: !3059, align: 8)
!3099 = distinct !DILexicalBlock(scope: !3097, file: !3051, line: 42, column: 2)
!3100 = !DILocation(line: 43, column: 21, scope: !3099)
!3101 = !DILocation(line: 43, column: 33, scope: !3099)
!3102 = !DILocation(line: 44, column: 19, scope: !3099)
!3103 = !DILocation(line: 44, column: 43, scope: !3099)
!3104 = !DILocation(line: 118, column: 6, scope: !3105, inlinedAt: !3106)
!3105 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !28, file: !28, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3106 = !DILocation(line: 44, column: 3, scope: !3099)
!3107 = !DILocation(line: 118, column: 18, scope: !3105, inlinedAt: !3106)
!3108 = !DILocation(line: 122, column: 20, scope: !3105, inlinedAt: !3106)
!3109 = !DILocation(line: 122, column: 2, scope: !3105, inlinedAt: !3106)
!3110 = !DILocation(line: 45, column: 19, scope: !3099)
!3111 = !DILocation(line: 45, column: 43, scope: !3099)
!3112 = !DILocation(line: 118, column: 6, scope: !3113, inlinedAt: !3114)
!3113 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !28, file: !28, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3114 = !DILocation(line: 45, column: 3, scope: !3099)
!3115 = !DILocation(line: 118, column: 18, scope: !3113, inlinedAt: !3114)
!3116 = !DILocation(line: 122, column: 20, scope: !3113, inlinedAt: !3114)
!3117 = !DILocation(line: 122, column: 2, scope: !3113, inlinedAt: !3114)
!3118 = !DILocation(line: 46, column: 10, scope: !3099)
!3119 = !DILocation(line: 48, column: 9, scope: !3086)
!3120 = !DILocation(line: 49, column: 2, scope: !3086)
!3121 = !DILocation(line: 49, column: 9, scope: !3122)
!3122 = distinct !DILexicalBlock(scope: !3086, file: !3051, line: 49, column: 2)
!3123 = !DILocalVariable(name: "next_page", scope: !3124, file: !3051, line: 51, type: !3059, align: 8)
!3124 = distinct !DILexicalBlock(scope: !3122, file: !3051, line: 50, column: 2)
!3125 = !DILocation(line: 51, column: 21, scope: !3124)
!3126 = !DILocation(line: 51, column: 33, scope: !3124)
!3127 = !DILocation(line: 52, column: 19, scope: !3124)
!3128 = !DILocation(line: 52, column: 43, scope: !3124)
!3129 = !DILocation(line: 118, column: 6, scope: !3130, inlinedAt: !3131)
!3130 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !28, file: !28, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3131 = !DILocation(line: 52, column: 3, scope: !3124)
!3132 = !DILocation(line: 118, column: 18, scope: !3130, inlinedAt: !3131)
!3133 = !DILocation(line: 122, column: 20, scope: !3130, inlinedAt: !3131)
!3134 = !DILocation(line: 122, column: 2, scope: !3130, inlinedAt: !3131)
!3135 = !DILocation(line: 53, column: 19, scope: !3124)
!3136 = !DILocation(line: 53, column: 43, scope: !3124)
!3137 = !DILocation(line: 118, column: 6, scope: !3138, inlinedAt: !3139)
!3138 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !28, file: !28, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3139 = !DILocation(line: 53, column: 3, scope: !3124)
!3140 = !DILocation(line: 118, column: 18, scope: !3138, inlinedAt: !3139)
!3141 = !DILocation(line: 122, column: 20, scope: !3138, inlinedAt: !3139)
!3142 = !DILocation(line: 122, column: 2, scope: !3138, inlinedAt: !3139)
!3143 = !DILocation(line: 54, column: 10, scope: !3124)
!3144 = !DILocation(line: 56, column: 2, scope: !3086)
!3145 = !DILocation(line: 56, column: 14, scope: !3086)
!3146 = !DILocation(line: 57, column: 2, scope: !3086)
!3147 = !DILocation(line: 57, column: 21, scope: !3086)
!3148 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.DynamicArenaAllocator.release", scope: !3051, file: !3051, line: 78, type: !3149, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3149 = !DISubroutineType(types: !3150)
!3150 = !{null, !3054, !36, !67}
!3151 = !DILocation(line: 79, column: 1, scope: !3148)
!3152 = !DILocalVariable(name: "self", arg: 1, scope: !3148, file: !3051, line: 78, type: !3054)
!3153 = !DILocation(line: 78, column: 39, scope: !3148)
!3154 = !DILocalVariable(name: "ptr", arg: 2, scope: !3148, file: !3051, line: 78, type: !36)
!3155 = !DILocation(line: 78, column: 52, scope: !3148)
!3156 = !DILocalVariable(name: ".anon", arg: 3, scope: !3148, file: !3051, line: 78, type: !67)
!3157 = !DILocation(line: 78, column: 57, scope: !3148)
!3158 = !DILocation(line: 75, column: 11, scope: !3159)
!3159 = distinct !DILexicalBlock(scope: !3148, file: !3051, line: 79, column: 1)
!3160 = !DILocation(line: 76, column: 11, scope: !3159)
!3161 = !DILocalVariable(name: "current_page", scope: !3148, file: !3051, line: 80, type: !3059, align: 8)
!3162 = !DILocation(line: 80, column: 20, scope: !3148)
!3163 = !DILocation(line: 80, column: 35, scope: !3148)
!3164 = !DILocation(line: 81, column: 6, scope: !3148)
!3165 = !DILocation(line: 81, column: 13, scope: !3148)
!3166 = !DILocation(line: 83, column: 3, scope: !3167)
!3167 = distinct !DILexicalBlock(scope: !3148, file: !3051, line: 82, column: 2)
!3168 = !DILocation(line: 83, column: 30, scope: !3167)
!3169 = !DILocation(line: 83, column: 36, scope: !3167)
!3170 = !DILocation(line: 83, column: 59, scope: !3167)
!3171 = !DILocation(line: 83, column: 23, scope: !3167)
!3172 = !DILocation(line: 85, column: 2, scope: !3148)
!3173 = !DILocation(line: 85, column: 35, scope: !3148)
!3174 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.DynamicArenaAllocator.resize", scope: !3051, file: !3051, line: 94, type: !3175, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3175 = !DISubroutineType(types: !3176)
!3176 = !{!216, !218, !3054, !36, !8, !8}
!3177 = !DILocation(line: 95, column: 1, scope: !3174)
!3178 = !DILocalVariable(name: "self", arg: 1, scope: !3174, file: !3051, line: 94, type: !3054)
!3179 = !DILocation(line: 94, column: 40, scope: !3174)
!3180 = !DILocalVariable(name: "old_pointer", arg: 2, scope: !3174, file: !3051, line: 94, type: !36)
!3181 = !DILocation(line: 94, column: 53, scope: !3174)
!3182 = !DILocalVariable(name: "size", arg: 3, scope: !3174, file: !3051, line: 94, type: !12)
!3183 = !DILocation(line: 94, column: 70, scope: !3174)
!3184 = !DILocalVariable(name: "alignment", arg: 4, scope: !3174, file: !3051, line: 94, type: !12)
!3185 = !DILocation(line: 94, column: 80, scope: !3174)
!3186 = !DILocation(line: 89, column: 11, scope: !3187)
!3187 = distinct !DILexicalBlock(scope: !3174, file: !3051, line: 95, column: 1)
!3188 = !DILocation(line: 90, column: 11, scope: !3187)
!3189 = !DILocation(line: 91, column: 11, scope: !3187)
!3190 = !DILocalVariable(name: "current_page", scope: !3174, file: !3051, line: 96, type: !3059, align: 8)
!3191 = !DILocation(line: 96, column: 20, scope: !3174)
!3192 = !DILocation(line: 96, column: 35, scope: !3174)
!3193 = !DILocation(line: 97, column: 39, scope: !3174)
!3194 = !DILocation(line: 97, column: 14, scope: !3174)
!3195 = !DILocalVariable(name: "old_size_ptr", scope: !3174, file: !3051, line: 98, type: !1242, align: 8)
!3196 = !DILocation(line: 98, column: 7, scope: !3174)
!3197 = !DILocation(line: 98, column: 22, scope: !3174)
!3198 = !DILocation(line: 98, column: 36, scope: !3174)
!3199 = !DILocalVariable(name: "old_size", scope: !3174, file: !3051, line: 99, type: !12, align: 8)
!3200 = !DILocation(line: 99, column: 6, scope: !3174)
!3201 = !DILocation(line: 99, column: 18, scope: !3174)
!3202 = !DILocation(line: 101, column: 6, scope: !3174)
!3203 = !DILocation(line: 101, column: 18, scope: !3174)
!3204 = !DILocation(line: 101, column: 46, scope: !3174)
!3205 = !DILocation(line: 101, column: 59, scope: !3174)
!3206 = !DILocation(line: 973, column: 9, scope: !3207, inlinedAt: !3208)
!3207 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3208 = !DILocation(line: 101, column: 26, scope: !3174)
!3209 = !DILocation(line: 973, column: 20, scope: !3207, inlinedAt: !3208)
!3210 = !DILocation(line: 973, column: 25, scope: !3207, inlinedAt: !3208)
!3211 = !DILocation(line: 103, column: 4, scope: !3212)
!3212 = distinct !DILexicalBlock(scope: !3174, file: !3051, line: 102, column: 2)
!3213 = !DILocation(line: 103, column: 19, scope: !3212)
!3214 = !DILocation(line: 104, column: 7, scope: !3212)
!3215 = !DILocation(line: 104, column: 41, scope: !3212)
!3216 = !DILocation(line: 106, column: 4, scope: !3217)
!3217 = distinct !DILexicalBlock(scope: !3212, file: !3051, line: 105, column: 3)
!3218 = !DILocation(line: 106, column: 31, scope: !3217)
!3219 = !DILocation(line: 106, column: 45, scope: !3217)
!3220 = !DILocation(line: 106, column: 68, scope: !3217)
!3221 = !DILocation(line: 106, column: 24, scope: !3217)
!3222 = !DILocation(line: 108, column: 10, scope: !3212)
!3223 = !DILocation(line: 110, column: 13, scope: !3174)
!3224 = !DILocation(line: 110, column: 47, scope: !3174)
!3225 = !DILocation(line: 110, column: 82, scope: !3174)
!3226 = !DILocation(line: 110, column: 95, scope: !3174)
!3227 = !DILocation(line: 973, column: 9, scope: !3228, inlinedAt: !3229)
!3228 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3229 = !DILocation(line: 110, column: 62, scope: !3174)
!3230 = !DILocation(line: 973, column: 20, scope: !3228, inlinedAt: !3229)
!3231 = !DILocation(line: 973, column: 25, scope: !3228, inlinedAt: !3229)
!3232 = !DILocation(line: 112, column: 10, scope: !3233)
!3233 = distinct !DILexicalBlock(scope: !3174, file: !3051, line: 111, column: 2)
!3234 = !DILocation(line: 112, column: 17, scope: !3233)
!3235 = !DILocalVariable(name: "add_size", scope: !3233, file: !3051, line: 113, type: !12, align: 8)
!3236 = !DILocation(line: 113, column: 7, scope: !3233)
!3237 = !DILocation(line: 113, column: 18, scope: !3233)
!3238 = !DILocation(line: 113, column: 25, scope: !3233)
!3239 = !DILocation(line: 114, column: 7, scope: !3233)
!3240 = !DILocation(line: 114, column: 18, scope: !3233)
!3241 = !DILocation(line: 114, column: 38, scope: !3233)
!3242 = !DILocation(line: 114, column: 58, scope: !3233)
!3243 = !DILocation(line: 115, column: 4, scope: !3233)
!3244 = !DILocation(line: 115, column: 19, scope: !3233)
!3245 = !DILocation(line: 116, column: 3, scope: !3233)
!3246 = !DILocation(line: 116, column: 24, scope: !3233)
!3247 = !DILocation(line: 117, column: 10, scope: !3233)
!3248 = !DILocalVariable(name: "new_mem", scope: !3174, file: !3051, line: 119, type: !36, align: 8)
!3249 = !DILocation(line: 119, column: 8, scope: !3174)
!3250 = !DILocation(line: 119, column: 18, scope: !3174)
!3251 = !DILocation(line: 119, column: 31, scope: !3174)
!3252 = !DILocation(line: 119, column: 46, scope: !3174)
!3253 = !DILocation(line: 173, column: 11, scope: !3174)
!3254 = !DILocation(line: 973, column: 9, scope: !3255, inlinedAt: !3256)
!3255 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3256 = !DILocation(line: 173, column: 25, scope: !3174)
!3257 = !DILocation(line: 973, column: 20, scope: !3255, inlinedAt: !3256)
!3258 = !DILocation(line: 973, column: 25, scope: !3255, inlinedAt: !3256)
!3259 = !DILocation(line: 329, column: 23, scope: !3260, inlinedAt: !3262)
!3260 = distinct !DILexicalBlock(scope: !3261, file: !166, line: 330, column: 1)
!3261 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !166, file: !166, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3262 = !DILocation(line: 120, column: 2, scope: !3174)
!3263 = !DILocation(line: 326, column: 11, scope: !3260, inlinedAt: !3262)
!3264 = !DILocation(line: 326, column: 26, scope: !3260, inlinedAt: !3262)
!3265 = !DILocation(line: 120, column: 2, scope: !3260, inlinedAt: !3262)
!3266 = !DILocation(line: 327, column: 11, scope: !3260, inlinedAt: !3262)
!3267 = !DILocation(line: 327, column: 23, scope: !3260, inlinedAt: !3262)
!3268 = !DILocation(line: 327, column: 29, scope: !3260, inlinedAt: !3262)
!3269 = !DILocation(line: 327, column: 36, scope: !3260, inlinedAt: !3262)
!3270 = !DILocation(line: 327, column: 43, scope: !3260, inlinedAt: !3262)
!3271 = !DILocation(line: 327, column: 49, scope: !3260, inlinedAt: !3262)
!3272 = !DILocation(line: 327, column: 56, scope: !3260, inlinedAt: !3262)
!3273 = !DILocation(line: 331, column: 11, scope: !3261, inlinedAt: !3262)
!3274 = !DILocation(line: 331, column: 16, scope: !3261, inlinedAt: !3262)
!3275 = !DILocation(line: 331, column: 21, scope: !3261, inlinedAt: !3262)
!3276 = !DILocation(line: 331, column: 26, scope: !3261, inlinedAt: !3262)
!3277 = !DILocation(line: 121, column: 9, scope: !3174)
!3278 = distinct !DISubprogram(name: "reset", linkageName: "std.core.mem.allocator.DynamicArenaAllocator.reset", scope: !3051, file: !3051, line: 124, type: !3087, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3279 = !DILocation(line: 125, column: 1, scope: !3278)
!3280 = !DILocalVariable(name: "self", arg: 1, scope: !3278, file: !3051, line: 124, type: !3054)
!3281 = !DILocation(line: 124, column: 37, scope: !3278)
!3282 = !DILocalVariable(name: "page", scope: !3278, file: !3051, line: 126, type: !3059, align: 8)
!3283 = !DILocation(line: 126, column: 20, scope: !3278)
!3284 = !DILocation(line: 126, column: 27, scope: !3278)
!3285 = !DILocalVariable(name: "unused_page_ptr", scope: !3278, file: !3051, line: 127, type: !3286, align: 8)
!3286 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "DynamicArenaPage**", baseType: !3059, size: 64, align: 64, dwarfAddressSpace: 0)
!3287 = !DILocation(line: 127, column: 21, scope: !3278)
!3288 = !DILocation(line: 127, column: 40, scope: !3278)
!3289 = !DILocation(line: 128, column: 2, scope: !3278)
!3290 = !DILocation(line: 128, column: 9, scope: !3291)
!3291 = distinct !DILexicalBlock(scope: !3278, file: !3051, line: 128, column: 2)
!3292 = !DILocalVariable(name: "next_page", scope: !3293, file: !3051, line: 130, type: !3059, align: 8)
!3293 = distinct !DILexicalBlock(scope: !3291, file: !3051, line: 129, column: 2)
!3294 = !DILocation(line: 130, column: 21, scope: !3293)
!3295 = !DILocation(line: 130, column: 33, scope: !3293)
!3296 = !DILocation(line: 131, column: 3, scope: !3293)
!3297 = !DILocation(line: 131, column: 15, scope: !3293)
!3298 = !DILocalVariable(name: "prev_unused", scope: !3293, file: !3051, line: 132, type: !3059, align: 8)
!3299 = !DILocation(line: 132, column: 21, scope: !3293)
!3300 = !DILocation(line: 132, column: 36, scope: !3293)
!3301 = !DILocation(line: 133, column: 4, scope: !3293)
!3302 = !DILocation(line: 133, column: 22, scope: !3293)
!3303 = !DILocation(line: 134, column: 3, scope: !3293)
!3304 = !DILocation(line: 134, column: 21, scope: !3293)
!3305 = !DILocation(line: 135, column: 10, scope: !3293)
!3306 = !DILocation(line: 137, column: 2, scope: !3278)
!3307 = !DILocation(line: 137, column: 14, scope: !3278)
!3308 = distinct !DISubprogram(name: "_alloc_new", linkageName: "std.core.mem.allocator.DynamicArenaAllocator._alloc_new", scope: !3051, file: !3051, line: 145, type: !3309, scopeLine: 145, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3309 = !DISubroutineType(types: !3310)
!3310 = !{!216, !218, !3054, !8, !8}
!3311 = !DILocation(line: 146, column: 1, scope: !3308)
!3312 = !DILocalVariable(name: "self", arg: 1, scope: !3308, file: !3051, line: 145, type: !3054)
!3313 = !DILocation(line: 145, column: 44, scope: !3308)
!3314 = !DILocalVariable(name: "size", arg: 2, scope: !3308, file: !3051, line: 145, type: !12)
!3315 = !DILocation(line: 145, column: 55, scope: !3308)
!3316 = !DILocalVariable(name: "alignment", arg: 3, scope: !3308, file: !3051, line: 145, type: !12)
!3317 = !DILocation(line: 145, column: 65, scope: !3308)
!3318 = !DILocation(line: 973, column: 9, scope: !3319, inlinedAt: !3320)
!3319 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3320 = !DILocation(line: 141, column: 11, scope: !3321)
!3321 = distinct !DILexicalBlock(scope: !3308, file: !3051, line: 146, column: 1)
!3322 = !DILocation(line: 973, column: 20, scope: !3319, inlinedAt: !3320)
!3323 = !DILocation(line: 973, column: 25, scope: !3319, inlinedAt: !3320)
!3324 = !DILocation(line: 142, column: 11, scope: !3321)
!3325 = !DILocalVariable(name: "page_size", scope: !3308, file: !3051, line: 148, type: !12, align: 8)
!3326 = !DILocation(line: 148, column: 6, scope: !3308)
!3327 = !DILocation(line: 148, column: 22, scope: !3308)
!3328 = !DILocation(line: 148, column: 58, scope: !3308)
!3329 = !DILocation(line: 148, column: 92, scope: !3308)
!3330 = !DILocation(line: 148, column: 103, scope: !3308)
!3331 = !DILocation(line: 973, column: 9, scope: !3332, inlinedAt: !3333)
!3332 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3333 = !DILocation(line: 148, column: 38, scope: !3308)
!3334 = !DILocation(line: 973, column: 20, scope: !3332, inlinedAt: !3333)
!3335 = !DILocation(line: 973, column: 25, scope: !3332, inlinedAt: !3333)
!3336 = !DILocation(line: 47, column: 10, scope: !3337, inlinedAt: !3339)
!3337 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !3338, file: !3338, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3338 = !DIFile(filename: "builtin_comparison.c3", directory: "/usr/lib/c3c/lib/std/core")
!3339 = !DILocation(line: 116, column: 10, scope: !3340, inlinedAt: !3341)
!3340 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !3338, file: !3338, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3341 = !DILocation(line: 148, column: 18, scope: !3308)
!3342 = !DILocation(line: 47, column: 14, scope: !3337, inlinedAt: !3339)
!3343 = !DILocation(line: 116, column: 34, scope: !3340, inlinedAt: !3341)
!3344 = !DILocation(line: 116, column: 38, scope: !3340, inlinedAt: !3341)
!3345 = !DILocation(line: 149, column: 9, scope: !3308)
!3346 = !DILocation(line: 149, column: 21, scope: !3308)
!3347 = !DILocalVariable(name: "mem", scope: !3308, file: !3051, line: 151, type: !36, align: 8)
!3348 = !DILocation(line: 151, column: 8, scope: !3308)
!3349 = !DILocation(line: 151, column: 36, scope: !3308)
!3350 = !DILocation(line: 79, column: 6, scope: !3351, inlinedAt: !3352)
!3351 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !28, file: !28, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3352 = !DILocation(line: 151, column: 14, scope: !3308)
!3353 = !DILocation(line: 79, column: 20, scope: !3351, inlinedAt: !3352)
!3354 = !DILocation(line: 85, column: 28, scope: !3351, inlinedAt: !3352)
!3355 = !DILocation(line: 37, column: 12, scope: !3351, inlinedAt: !3352)
!3356 = !DILocation(line: 973, column: 9, scope: !3357, inlinedAt: !3358)
!3357 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3358 = !DILocation(line: 37, column: 26, scope: !3351, inlinedAt: !3352)
!3359 = !DILocation(line: 973, column: 20, scope: !3357, inlinedAt: !3358)
!3360 = !DILocation(line: 973, column: 25, scope: !3357, inlinedAt: !3358)
!3361 = !DILocation(line: 85, column: 10, scope: !3351, inlinedAt: !3352)
!3362 = !DILocalVariable(name: "page", scope: !3308, file: !3051, line: 152, type: !3059, align: 8)
!3363 = !DILocation(line: 152, column: 21, scope: !3308)
!3364 = !DILocation(line: 152, column: 47, scope: !3308)
!3365 = !DILocation(line: 96, column: 6, scope: !3366, inlinedAt: !3367)
!3366 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !28, file: !28, line: 94, scopeLine: 94, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3367 = !DILocation(line: 190, column: 18, scope: !3368, inlinedAt: !3369)
!3368 = distinct !DISubprogram(name: "new_try", linkageName: "new_try", scope: !28, file: !28, line: 187, scopeLine: 187, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3369 = !DILocation(line: 152, column: 28, scope: !3308)
!3370 = !DILocation(line: 96, column: 20, scope: !3366, inlinedAt: !3367)
!3371 = !DILocation(line: 97, column: 27, scope: !3366, inlinedAt: !3367)
!3372 = !DILocation(line: 37, column: 12, scope: !3366, inlinedAt: !3367)
!3373 = !DILocation(line: 973, column: 9, scope: !3374, inlinedAt: !3375)
!3374 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3375 = !DILocation(line: 37, column: 26, scope: !3366, inlinedAt: !3367)
!3376 = !DILocation(line: 973, column: 20, scope: !3374, inlinedAt: !3375)
!3377 = !DILocation(line: 973, column: 25, scope: !3374, inlinedAt: !3375)
!3378 = !DILocation(line: 97, column: 9, scope: !3366, inlinedAt: !3367)
!3379 = !DILocalVariable(name: "err", scope: !3308, file: !3051, line: 153, type: !216, align: 8)
!3380 = !DILocation(line: 153, column: 12, scope: !3308)
!3381 = !DILocation(line: 153, column: 18, scope: !3308)
!3382 = !DILocation(line: 155, column: 19, scope: !3383)
!3383 = distinct !DILexicalBlock(scope: !3308, file: !3051, line: 154, column: 2)
!3384 = !DILocation(line: 118, column: 6, scope: !3385, inlinedAt: !3386)
!3385 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !28, file: !28, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3386 = !DILocation(line: 155, column: 3, scope: !3383)
!3387 = !DILocation(line: 118, column: 18, scope: !3385, inlinedAt: !3386)
!3388 = !DILocation(line: 122, column: 20, scope: !3385, inlinedAt: !3386)
!3389 = !DILocation(line: 122, column: 2, scope: !3385, inlinedAt: !3386)
!3390 = !DILocation(line: 156, column: 10, scope: !3383)
!3391 = !DILocation(line: 158, column: 2, scope: !3308)
!3392 = !DILocation(line: 158, column: 16, scope: !3308)
!3393 = !DILocalVariable(name: "mem_start", scope: !3308, file: !3051, line: 159, type: !36, align: 8)
!3394 = !DILocation(line: 159, column: 8, scope: !3308)
!3395 = !DILocation(line: 159, column: 41, scope: !3308)
!3396 = !DILocation(line: 159, column: 47, scope: !3308)
!3397 = !DILocation(line: 290, column: 37, scope: !3398, inlinedAt: !3399)
!3398 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !166, file: !166, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3399 = !DILocation(line: 159, column: 20, scope: !3308)
!3400 = !DILocation(line: 290, column: 48, scope: !3398, inlinedAt: !3399)
!3401 = !DILocation(line: 973, column: 9, scope: !3402, inlinedAt: !3403)
!3402 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3403 = !DILocation(line: 290, column: 22, scope: !3398, inlinedAt: !3399)
!3404 = !DILocation(line: 973, column: 20, scope: !3402, inlinedAt: !3403)
!3405 = !DILocation(line: 973, column: 25, scope: !3402, inlinedAt: !3403)
!3406 = !DILocation(line: 290, column: 9, scope: !3398, inlinedAt: !3399)
!3407 = !DILocation(line: 160, column: 9, scope: !3308)
!3408 = !DILocation(line: 160, column: 21, scope: !3308)
!3409 = !DILocation(line: 160, column: 28, scope: !3308)
!3410 = !DILocation(line: 160, column: 34, scope: !3308)
!3411 = !DILocalVariable(name: "chunk", scope: !3308, file: !3051, line: 161, type: !3412, align: 8)
!3412 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "DynamicArenaChunk*", baseType: !3413, size: 64, align: 64, dwarfAddressSpace: 0)
!3413 = !DICompositeType(tag: DW_TAG_structure_type, name: "DynamicArenaChunk", scope: !3051, file: !3051, line: 69, size: 64, align: 64, elements: !3414, identifier: "std.core.mem.allocator.DynamicArenaChunk")
!3414 = !{!3415}
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3413, file: !3051, line: 71, baseType: !12, size: 64, align: 64)
!3416 = !DILocation(line: 161, column: 21, scope: !3308)
!3417 = !DILocation(line: 161, column: 49, scope: !3308)
!3418 = !DILocation(line: 161, column: 61, scope: !3308)
!3419 = !DILocation(line: 162, column: 2, scope: !3308)
!3420 = !DILocation(line: 162, column: 15, scope: !3308)
!3421 = !DILocation(line: 163, column: 2, scope: !3308)
!3422 = !DILocation(line: 163, column: 20, scope: !3308)
!3423 = !DILocation(line: 164, column: 2, scope: !3308)
!3424 = !DILocation(line: 164, column: 15, scope: !3308)
!3425 = !DILocation(line: 165, column: 2, scope: !3308)
!3426 = !DILocation(line: 165, column: 14, scope: !3308)
!3427 = !DILocation(line: 165, column: 26, scope: !3308)
!3428 = !DILocation(line: 165, column: 33, scope: !3308)
!3429 = !DILocation(line: 166, column: 2, scope: !3308)
!3430 = !DILocation(line: 166, column: 14, scope: !3308)
!3431 = !DILocation(line: 167, column: 2, scope: !3308)
!3432 = !DILocation(line: 167, column: 27, scope: !3308)
!3433 = !DILocation(line: 168, column: 9, scope: !3308)
!3434 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.DynamicArenaAllocator.acquire", scope: !3051, file: !3051, line: 176, type: !3435, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3435 = !DISubroutineType(types: !3436)
!3436 = !{!216, !218, !3054, !8, !92, !8}
!3437 = !DILocation(line: 177, column: 1, scope: !3434)
!3438 = !DILocalVariable(name: "self", arg: 1, scope: !3434, file: !3051, line: 176, type: !3054)
!3439 = !DILocation(line: 176, column: 41, scope: !3434)
!3440 = !DILocalVariable(name: "size", arg: 2, scope: !3434, file: !3051, line: 176, type: !12)
!3441 = !DILocation(line: 176, column: 52, scope: !3434)
!3442 = !DILocalVariable(name: "init_type", arg: 3, scope: !3434, file: !3051, line: 176, type: !92)
!3443 = !DILocation(line: 176, column: 72, scope: !3434)
!3444 = !DILocalVariable(name: "alignment", arg: 4, scope: !3434, file: !3051, line: 176, type: !12)
!3445 = !DILocation(line: 176, column: 87, scope: !3434)
!3446 = !DILocation(line: 172, column: 11, scope: !3447)
!3447 = distinct !DILexicalBlock(scope: !3434, file: !3051, line: 177, column: 1)
!3448 = !DILocation(line: 173, column: 11, scope: !3447)
!3449 = !DILocation(line: 973, column: 9, scope: !3450, inlinedAt: !3451)
!3450 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3451 = !DILocation(line: 173, column: 25, scope: !3447)
!3452 = !DILocation(line: 973, column: 20, scope: !3450, inlinedAt: !3451)
!3453 = !DILocation(line: 973, column: 25, scope: !3450, inlinedAt: !3451)
!3454 = !DILocation(line: 178, column: 39, scope: !3434)
!3455 = !DILocation(line: 178, column: 14, scope: !3434)
!3456 = !DILocalVariable(name: "page", scope: !3434, file: !3051, line: 179, type: !3059, align: 8)
!3457 = !DILocation(line: 179, column: 20, scope: !3434)
!3458 = !DILocation(line: 179, column: 27, scope: !3434)
!3459 = !DILocalVariable(name: "ptr", scope: !3434, file: !3051, line: 181, type: !36, align: 8)
!3460 = !DILocation(line: 181, column: 8, scope: !3434)
!3461 = !DILocation(line: 184, column: 7, scope: !3462)
!3462 = distinct !DILexicalBlock(scope: !3463, file: !3051, line: 183, column: 2)
!3463 = distinct !DILexicalBlock(scope: !3434, file: !3051, line: 182, column: 2)
!3464 = !DILocation(line: 184, column: 16, scope: !3462)
!3465 = !DILocation(line: 186, column: 4, scope: !3466)
!3466 = distinct !DILexicalBlock(scope: !3462, file: !3051, line: 185, column: 3)
!3467 = !DILocation(line: 186, column: 23, scope: !3466)
!3468 = !DILocation(line: 187, column: 4, scope: !3466)
!3469 = !DILocation(line: 187, column: 23, scope: !3466)
!3470 = !DILocation(line: 188, column: 4, scope: !3466)
!3471 = !DILocation(line: 188, column: 22, scope: !3466)
!3472 = !DILocation(line: 190, column: 7, scope: !3462)
!3473 = !DILocation(line: 192, column: 10, scope: !3474)
!3474 = distinct !DILexicalBlock(scope: !3462, file: !3051, line: 191, column: 3)
!3475 = !DILocation(line: 192, column: 26, scope: !3474)
!3476 = !DILocation(line: 192, column: 32, scope: !3474)
!3477 = !DILocation(line: 973, column: 9, scope: !3478, inlinedAt: !3473)
!3478 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3479 = !DILocation(line: 973, column: 20, scope: !3478, inlinedAt: !3473)
!3480 = !DILocation(line: 973, column: 25, scope: !3478, inlinedAt: !3473)
!3481 = !DILocation(line: 193, column: 4, scope: !3474)
!3482 = !DILocalVariable(name: "start", scope: !3462, file: !3051, line: 195, type: !36, align: 8)
!3483 = !DILocation(line: 195, column: 9, scope: !3462)
!3484 = !DILocation(line: 195, column: 38, scope: !3462)
!3485 = !DILocation(line: 195, column: 52, scope: !3462)
!3486 = !DILocation(line: 290, column: 37, scope: !3487, inlinedAt: !3488)
!3487 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !166, file: !166, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3488 = !DILocation(line: 195, column: 17, scope: !3462)
!3489 = !DILocation(line: 290, column: 48, scope: !3487, inlinedAt: !3488)
!3490 = !DILocation(line: 973, column: 9, scope: !3491, inlinedAt: !3492)
!3491 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3492 = !DILocation(line: 290, column: 22, scope: !3487, inlinedAt: !3488)
!3493 = !DILocation(line: 973, column: 20, scope: !3491, inlinedAt: !3492)
!3494 = !DILocation(line: 973, column: 25, scope: !3491, inlinedAt: !3492)
!3495 = !DILocation(line: 290, column: 9, scope: !3487, inlinedAt: !3488)
!3496 = !DILocalVariable(name: "new_used", scope: !3462, file: !3051, line: 196, type: !12, align: 8)
!3497 = !DILocation(line: 196, column: 7, scope: !3462)
!3498 = !DILocation(line: 196, column: 18, scope: !3462)
!3499 = !DILocation(line: 196, column: 26, scope: !3462)
!3500 = !DILocation(line: 196, column: 40, scope: !3462)
!3501 = !DILocation(line: 197, column: 21, scope: !3462)
!3502 = !DILocation(line: 197, column: 32, scope: !3462)
!3503 = !DILocation(line: 199, column: 16, scope: !3504)
!3504 = distinct !DILexicalBlock(scope: !3462, file: !3051, line: 198, column: 3)
!3505 = !DILocation(line: 201, column: 34, scope: !3506)
!3506 = distinct !DILexicalBlock(scope: !3504, file: !3051, line: 200, column: 4)
!3507 = !DILocation(line: 201, column: 48, scope: !3506)
!3508 = !DILocation(line: 290, column: 37, scope: !3509, inlinedAt: !3510)
!3509 = distinct !DISubprogram(name: "aligned_pointer", linkageName: "aligned_pointer", scope: !166, file: !166, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3510 = !DILocation(line: 201, column: 13, scope: !3506)
!3511 = !DILocation(line: 290, column: 48, scope: !3509, inlinedAt: !3510)
!3512 = !DILocation(line: 973, column: 9, scope: !3513, inlinedAt: !3514)
!3513 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3514 = !DILocation(line: 290, column: 22, scope: !3509, inlinedAt: !3510)
!3515 = !DILocation(line: 973, column: 20, scope: !3513, inlinedAt: !3514)
!3516 = !DILocation(line: 973, column: 25, scope: !3513, inlinedAt: !3514)
!3517 = !DILocation(line: 290, column: 9, scope: !3509, inlinedAt: !3510)
!3518 = !DILocation(line: 202, column: 16, scope: !3506)
!3519 = !DILocation(line: 202, column: 24, scope: !3506)
!3520 = !DILocation(line: 202, column: 31, scope: !3506)
!3521 = !DILocation(line: 203, column: 9, scope: !3506)
!3522 = !DILocation(line: 203, column: 23, scope: !3506)
!3523 = !DILocation(line: 205, column: 6, scope: !3524)
!3524 = distinct !DILexicalBlock(scope: !3506, file: !3051, line: 204, column: 5)
!3525 = !DILocation(line: 205, column: 25, scope: !3524)
!3526 = !DILocation(line: 206, column: 6, scope: !3524)
!3527 = !DILocation(line: 206, column: 24, scope: !3524)
!3528 = !DILocation(line: 207, column: 6, scope: !3524)
!3529 = !DILocation(line: 207, column: 18, scope: !3524)
!3530 = !DILocation(line: 208, column: 6, scope: !3524)
!3531 = !DILocation(line: 211, column: 10, scope: !3504)
!3532 = !DILocation(line: 211, column: 26, scope: !3504)
!3533 = !DILocation(line: 211, column: 32, scope: !3504)
!3534 = !DILocation(line: 973, column: 9, scope: !3535, inlinedAt: !3531)
!3535 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3536 = !DILocation(line: 973, column: 20, scope: !3535, inlinedAt: !3531)
!3537 = !DILocation(line: 973, column: 25, scope: !3535, inlinedAt: !3531)
!3538 = !DILocation(line: 212, column: 4, scope: !3504)
!3539 = !DILocation(line: 214, column: 3, scope: !3462)
!3540 = !DILocation(line: 214, column: 15, scope: !3462)
!3541 = !DILocation(line: 215, column: 10, scope: !3462)
!3542 = !DILocation(line: 215, column: 18, scope: !3462)
!3543 = !DILocation(line: 215, column: 26, scope: !3462)
!3544 = !DILocation(line: 215, column: 40, scope: !3462)
!3545 = !DILocation(line: 216, column: 9, scope: !3462)
!3546 = !DILocalVariable(name: "chunk", scope: !3462, file: !3051, line: 217, type: !3412, align: 8)
!3547 = !DILocation(line: 217, column: 22, scope: !3462)
!3548 = !DILocation(line: 217, column: 50, scope: !3462)
!3549 = !DILocation(line: 217, column: 56, scope: !3462)
!3550 = !DILocation(line: 218, column: 3, scope: !3462)
!3551 = !DILocation(line: 218, column: 16, scope: !3462)
!3552 = !DILocation(line: 220, column: 6, scope: !3434)
!3553 = !DILocation(line: 308, column: 11, scope: !3554, inlinedAt: !3555)
!3554 = distinct !DISubprogram(name: "clear", linkageName: "clear", scope: !166, file: !166, line: 306, scopeLine: 306, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3555 = !DILocation(line: 220, column: 25, scope: !3434)
!3556 = !DILocation(line: 308, column: 25, scope: !3554, inlinedAt: !3555)
!3557 = !DILocation(line: 308, column: 30, scope: !3554, inlinedAt: !3555)
!3558 = !DILocation(line: 221, column: 9, scope: !3434)
!3559 = distinct !DISubprogram(name: "allocate_block", linkageName: "std.core.mem.allocator.WasmMemory.allocate_block", scope: !18, file: !18, line: 14, type: !3560, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3560 = !DISubroutineType(types: !3561)
!3561 = !{!216, !721, !3562, !8}
!3562 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WasmMemory*", baseType: !21, size: 64, align: 64, dwarfAddressSpace: 0)
!3563 = !DILocation(line: 15, column: 1, scope: !3559)
!3564 = !DILocalVariable(name: "self", arg: 1, scope: !3559, file: !18, line: 14, type: !3562)
!3565 = !DILocation(line: 14, column: 38, scope: !3559)
!3566 = !DILocalVariable(name: "bytes", arg: 2, scope: !3559, file: !18, line: 14, type: !12)
!3567 = !DILocation(line: 14, column: 49, scope: !3559)
!3568 = !DILocation(line: 16, column: 7, scope: !3559)
!3569 = !DILocation(line: 18, column: 3, scope: !3570)
!3570 = distinct !DILexicalBlock(scope: !3559, file: !18, line: 17, column: 2)
!3571 = !DILocation(line: 18, column: 21, scope: !3570)
!3572 = !DILocalVariable(name: "bytes_required", scope: !3559, file: !18, line: 20, type: !2508, align: 8)
!3573 = !DILocation(line: 20, column: 6, scope: !3559)
!3574 = !DILocation(line: 20, column: 23, scope: !3559)
!3575 = !DILocation(line: 20, column: 31, scope: !3559)
!3576 = !DILocation(line: 20, column: 42, scope: !3559)
!3577 = !DILocation(line: 21, column: 6, scope: !3559)
!3578 = !DILocation(line: 24, column: 18, scope: !3579)
!3579 = distinct !DILexicalBlock(scope: !3559, file: !18, line: 22, column: 2)
!3580 = !DILocation(line: 24, column: 29, scope: !3579)
!3581 = !DILocation(line: 24, column: 11, scope: !3579)
!3582 = !DILocation(line: 23, column: 9, scope: !3583)
!3583 = distinct !DILexicalBlock(scope: !3579, file: !18, line: 23, column: 9)
!3584 = !DILocation(line: 23, column: 21, scope: !3583)
!3585 = !DILocalVariable(name: "blocks_required", scope: !3559, file: !18, line: 27, type: !12, align: 8)
!3586 = !DILocation(line: 27, column: 6, scope: !3559)
!3587 = !DILocation(line: 27, column: 25, scope: !3559)
!3588 = !DILocation(line: 28, column: 6, scope: !3559)
!3589 = !DILocation(line: 28, column: 59, scope: !3559)
!3590 = !DILocation(line: 29, column: 2, scope: !3559)
!3591 = !DILocation(line: 29, column: 20, scope: !3559)
!3592 = !DILocation(line: 31, column: 17, scope: !3559)
!3593 = !DILocation(line: 31, column: 28, scope: !3559)
!3594 = !DILocation(line: 31, column: 10, scope: !3559)
!3595 = !DILocation(line: 30, column: 8, scope: !3596)
!3596 = distinct !DILexicalBlock(scope: !3559, file: !18, line: 30, column: 8)
!3597 = !DILocation(line: 30, column: 20, scope: !3596)
!3598 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.LazyTempAllocator.acquire", scope: !28, file: !28, line: 519, type: !3599, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3599 = !DISubroutineType(types: !3600)
!3600 = !{!216, !218, !3601, !8, !92, !8}
!3601 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "LazyTempAllocator*", baseType: !43, size: 64, align: 64, dwarfAddressSpace: 0)
!3602 = !DILocation(line: 520, column: 1, scope: !3598)
!3603 = !DILocalVariable(name: "self", arg: 1, scope: !3598, file: !28, line: 519, type: !3601)
!3604 = !DILocation(line: 519, column: 37, scope: !3598)
!3605 = !DILocalVariable(name: "bytes", arg: 2, scope: !3598, file: !28, line: 519, type: !12)
!3606 = !DILocation(line: 519, column: 48, scope: !3598)
!3607 = !DILocalVariable(name: "init_type", arg: 3, scope: !3598, file: !28, line: 519, type: !92)
!3608 = !DILocation(line: 519, column: 69, scope: !3598)
!3609 = !DILocalVariable(name: "alignment", arg: 4, scope: !3598, file: !28, line: 519, type: !12)
!3610 = !DILocation(line: 519, column: 84, scope: !3598)
!3611 = !DILocation(line: 521, column: 6, scope: !3598)
!3612 = !DILocation(line: 469, column: 11, scope: !3598)
!3613 = !DILocation(line: 521, column: 17, scope: !3598)
!3614 = !DILocation(line: 522, column: 9, scope: !3598)
!3615 = !DILocation(line: 522, column: 26, scope: !3598)
!3616 = !DILocation(line: 522, column: 33, scope: !3598)
!3617 = !DILocation(line: 522, column: 44, scope: !3598)
!3618 = !DILocation(line: 248, column: 11, scope: !3598)
!3619 = !DILocation(line: 973, column: 9, scope: !3620, inlinedAt: !3621)
!3620 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3621 = !DILocation(line: 248, column: 25, scope: !3598)
!3622 = !DILocation(line: 973, column: 20, scope: !3620, inlinedAt: !3621)
!3623 = !DILocation(line: 973, column: 25, scope: !3620, inlinedAt: !3621)
!3624 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.LazyTempAllocator.resize", scope: !28, file: !28, line: 525, type: !3625, scopeLine: 525, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3625 = !DISubroutineType(types: !3626)
!3626 = !{!216, !218, !3601, !36, !8, !8}
!3627 = !DILocation(line: 526, column: 1, scope: !3624)
!3628 = !DILocalVariable(name: "self", arg: 1, scope: !3624, file: !28, line: 525, type: !3601)
!3629 = !DILocation(line: 525, column: 36, scope: !3624)
!3630 = !DILocalVariable(name: "old_ptr", arg: 2, scope: !3624, file: !28, line: 525, type: !36)
!3631 = !DILocation(line: 525, column: 49, scope: !3624)
!3632 = !DILocalVariable(name: "new_bytes", arg: 3, scope: !3624, file: !28, line: 525, type: !12)
!3633 = !DILocation(line: 525, column: 62, scope: !3624)
!3634 = !DILocalVariable(name: "alignment", arg: 4, scope: !3624, file: !28, line: 525, type: !12)
!3635 = !DILocation(line: 525, column: 77, scope: !3624)
!3636 = !DILocation(line: 527, column: 6, scope: !3624)
!3637 = !DILocation(line: 469, column: 11, scope: !3624)
!3638 = !DILocation(line: 527, column: 17, scope: !3624)
!3639 = !DILocation(line: 528, column: 9, scope: !3624)
!3640 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.LazyTempAllocator.release", scope: !28, file: !28, line: 531, type: !3641, scopeLine: 531, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3641 = !DISubroutineType(types: !3642)
!3642 = !{null, !3601, !36, !67}
!3643 = !DILocation(line: 532, column: 1, scope: !3640)
!3644 = !DILocalVariable(name: "self", arg: 1, scope: !3640, file: !28, line: 531, type: !3601)
!3645 = !DILocation(line: 531, column: 35, scope: !3640)
!3646 = !DILocalVariable(name: "old_ptr", arg: 2, scope: !3640, file: !28, line: 531, type: !36)
!3647 = !DILocation(line: 531, column: 48, scope: !3640)
!3648 = !DILocalVariable(name: "aligned", arg: 3, scope: !3640, file: !28, line: 531, type: !67)
!3649 = !DILocation(line: 531, column: 62, scope: !3640)
!3650 = distinct !DISubprogram(name: "acquire", linkageName: "std.core.mem.allocator.NullAllocator.acquire", scope: !28, file: !28, line: 538, type: !3651, scopeLine: 538, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3651 = !DISubroutineType(types: !3652)
!3652 = !{!216, !218, !3653, !8, !92, !8}
!3653 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "NullAllocator*", baseType: !82, size: 64, align: 64, dwarfAddressSpace: 0)
!3654 = !DILocation(line: 539, column: 1, scope: !3650)
!3655 = !DILocalVariable(name: "self", arg: 1, scope: !3650, file: !28, line: 538, type: !3653)
!3656 = !DILocation(line: 538, column: 33, scope: !3650)
!3657 = !DILocalVariable(name: "bytes", arg: 2, scope: !3650, file: !28, line: 538, type: !12)
!3658 = !DILocation(line: 538, column: 44, scope: !3650)
!3659 = !DILocalVariable(name: "init_type", arg: 3, scope: !3650, file: !28, line: 538, type: !92)
!3660 = !DILocation(line: 538, column: 65, scope: !3650)
!3661 = !DILocalVariable(name: "alignment", arg: 4, scope: !3650, file: !28, line: 538, type: !12)
!3662 = !DILocation(line: 538, column: 80, scope: !3650)
!3663 = !DILocation(line: 540, column: 9, scope: !3650)
!3664 = distinct !DISubprogram(name: "resize", linkageName: "std.core.mem.allocator.NullAllocator.resize", scope: !28, file: !28, line: 543, type: !3665, scopeLine: 543, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3665 = !DISubroutineType(types: !3666)
!3666 = !{!216, !218, !3653, !36, !8, !8}
!3667 = !DILocation(line: 544, column: 1, scope: !3664)
!3668 = !DILocalVariable(name: "self", arg: 1, scope: !3664, file: !28, line: 543, type: !3653)
!3669 = !DILocation(line: 543, column: 32, scope: !3664)
!3670 = !DILocalVariable(name: "old_ptr", arg: 2, scope: !3664, file: !28, line: 543, type: !36)
!3671 = !DILocation(line: 543, column: 45, scope: !3664)
!3672 = !DILocalVariable(name: "new_bytes", arg: 3, scope: !3664, file: !28, line: 543, type: !12)
!3673 = !DILocation(line: 543, column: 58, scope: !3664)
!3674 = !DILocalVariable(name: "alignment", arg: 4, scope: !3664, file: !28, line: 543, type: !12)
!3675 = !DILocation(line: 543, column: 73, scope: !3664)
!3676 = !DILocation(line: 545, column: 9, scope: !3664)
!3677 = distinct !DISubprogram(name: "release", linkageName: "std.core.mem.allocator.NullAllocator.release", scope: !28, file: !28, line: 548, type: !3678, scopeLine: 548, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3678 = !DISubroutineType(types: !3679)
!3679 = !{null, !3653, !36, !67}
!3680 = !DILocation(line: 549, column: 1, scope: !3677)
!3681 = !DILocalVariable(name: "self", arg: 1, scope: !3677, file: !28, line: 548, type: !3653)
!3682 = !DILocation(line: 548, column: 31, scope: !3677)
!3683 = !DILocalVariable(name: "old_ptr", arg: 2, scope: !3677, file: !28, line: 548, type: !36)
!3684 = !DILocation(line: 548, column: 44, scope: !3677)
!3685 = !DILocalVariable(name: "aligned", arg: 3, scope: !3677, file: !28, line: 548, type: !67)
!3686 = !DILocation(line: 548, column: 58, scope: !3677)
!3687 = distinct !DISubprogram(name: "alignment_for_allocation", linkageName: "std.core.mem.allocator.alignment_for_allocation", scope: !28, file: !28, line: 67, type: !3688, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3688 = !DISubroutineType(types: !3689)
!3689 = !{!12, !8}
!3690 = !DILocalVariable(name: "alignment", arg: 1, scope: !3687, file: !28, line: 67, type: !12)
!3691 = !DILocation(line: 67, column: 37, scope: !3687)
!3692 = !DILocation(line: 69, column: 9, scope: !3687)
!3693 = !DILocation(line: 69, column: 50, scope: !3687)
!3694 = !DILocation(line: 69, column: 79, scope: !3687)
!3695 = distinct !DISubprogram(name: "clone_any", linkageName: "std.core.mem.allocator.clone_any", scope: !28, file: !28, line: 331, type: !3696, scopeLine: 331, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3696 = !DISubroutineType(types: !3697)
!3697 = !{!3698, !33, !3698}
!3698 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !3699, identifier: "any")
!3699 = !{!3700, !3701}
!3700 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3698, baseType: !36, size: 64, align: 64)
!3701 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3698, baseType: !38, size: 64, align: 64, offset: 64)
!3702 = !DILocalVariable(name: "allocator", arg: 1, scope: !3695, file: !28, line: 331, type: !33)
!3703 = !DILocation(line: 331, column: 28, scope: !3695)
!3704 = !DILocalVariable(name: "value", arg: 2, scope: !3695, file: !28, line: 331, type: !3698)
!3705 = !DILocation(line: 331, column: 43, scope: !3695)
!3706 = !DILocalVariable(name: "size", scope: !3695, file: !28, line: 333, type: !12, align: 8)
!3707 = !DILocation(line: 333, column: 6, scope: !3695)
!3708 = !DILocation(line: 333, column: 13, scope: !3695)
!3709 = !DILocalVariable(name: "data", scope: !3695, file: !28, line: 334, type: !36, align: 8)
!3710 = !DILocation(line: 334, column: 8, scope: !3695)
!3711 = !DILocation(line: 79, column: 6, scope: !3712, inlinedAt: !3713)
!3712 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !28, file: !28, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3713 = !DILocation(line: 74, column: 9, scope: !3714, inlinedAt: !3715)
!3714 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !28, file: !28, line: 72, scopeLine: 72, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3715 = !DILocation(line: 334, column: 15, scope: !3695)
!3716 = !DILocation(line: 79, column: 20, scope: !3712, inlinedAt: !3713)
!3717 = !DILocation(line: 85, column: 28, scope: !3712, inlinedAt: !3713)
!3718 = !DILocation(line: 37, column: 12, scope: !3712, inlinedAt: !3713)
!3719 = !DILocation(line: 973, column: 9, scope: !3720, inlinedAt: !3721)
!3720 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !237, file: !237, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3721 = !DILocation(line: 37, column: 26, scope: !3712, inlinedAt: !3713)
!3722 = !DILocation(line: 973, column: 20, scope: !3720, inlinedAt: !3721)
!3723 = !DILocation(line: 973, column: 25, scope: !3720, inlinedAt: !3721)
!3724 = !DILocation(line: 85, column: 10, scope: !3712, inlinedAt: !3713)
!3725 = !DILocation(line: 329, column: 23, scope: !3726, inlinedAt: !3728)
!3726 = distinct !DILexicalBlock(scope: !3727, file: !166, line: 330, column: 1)
!3727 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !166, file: !166, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3728 = !DILocation(line: 335, column: 2, scope: !3695)
!3729 = !DILocation(line: 326, column: 11, scope: !3726, inlinedAt: !3728)
!3730 = !DILocation(line: 326, column: 26, scope: !3726, inlinedAt: !3728)
!3731 = !DILocation(line: 335, column: 2, scope: !3726, inlinedAt: !3728)
!3732 = !DILocation(line: 327, column: 11, scope: !3726, inlinedAt: !3728)
!3733 = !DILocation(line: 327, column: 23, scope: !3726, inlinedAt: !3728)
!3734 = !DILocation(line: 327, column: 29, scope: !3726, inlinedAt: !3728)
!3735 = !DILocation(line: 327, column: 36, scope: !3726, inlinedAt: !3728)
!3736 = !DILocation(line: 327, column: 43, scope: !3726, inlinedAt: !3728)
!3737 = !DILocation(line: 327, column: 49, scope: !3726, inlinedAt: !3728)
!3738 = !DILocation(line: 327, column: 56, scope: !3726, inlinedAt: !3728)
!3739 = !DILocation(line: 331, column: 11, scope: !3727, inlinedAt: !3728)
!3740 = !DILocation(line: 331, column: 16, scope: !3727, inlinedAt: !3728)
!3741 = !DILocation(line: 331, column: 21, scope: !3727, inlinedAt: !3728)
!3742 = !DILocation(line: 331, column: 26, scope: !3727, inlinedAt: !3728)
!3743 = !DILocation(line: 336, column: 24, scope: !3695)
!3744 = !DILocation(line: 231, column: 20, scope: !3745, inlinedAt: !3746)
!3745 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !307, file: !307, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3746 = !DILocation(line: 336, column: 9, scope: !3695)
!3747 = !DILocation(line: 231, column: 25, scope: !3745, inlinedAt: !3746)
!3748 = distinct !DISubprogram(name: "push_pool", linkageName: "std.core.mem.allocator.push_pool", scope: !28, file: !28, line: 413, type: !3749, scopeLine: 413, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3749 = !DISubroutineType(types: !3750)
!3750 = !{!167}
!3751 = !DILocalVariable(name: "old", scope: !3748, file: !28, line: 415, type: !33, align: 8)
!3752 = !DILocation(line: 415, column: 12, scope: !3748)
!3753 = !DILocation(line: 415, column: 18, scope: !3748)
!3754 = !DILocation(line: 415, column: 29, scope: !3748)
!3755 = !DILocation(line: 469, column: 11, scope: !3748)
!3756 = !DILocation(line: 415, column: 44, scope: !3748)
!3757 = !DILocation(line: 416, column: 18, scope: !3748)
!3758 = !DILocation(line: 416, column: 56, scope: !3748)
!3759 = !DILocation(line: 416, column: 81, scope: !3748)
!3760 = !DILocation(line: 416, column: 109, scope: !3748)
!3761 = !DILocation(line: 80, column: 12, scope: !3748)
!3762 = !DILocation(line: 417, column: 20, scope: !3748)
!3763 = distinct !DISubprogram(name: "pop_pool", linkageName: "std.core.mem.allocator.pop_pool", scope: !28, file: !28, line: 420, type: !3764, scopeLine: 420, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3764 = !DISubroutineType(types: !3765)
!3765 = !{null, !167}
!3766 = !DILocalVariable(name: "old", arg: 1, scope: !3763, file: !28, line: 420, type: !167)
!3767 = !DILocation(line: 420, column: 28, scope: !3763)
!3768 = !DILocalVariable(name: "temp", scope: !3763, file: !28, line: 422, type: !48, align: 8)
!3769 = !DILocation(line: 422, column: 17, scope: !3763)
!3770 = !DILocation(line: 422, column: 24, scope: !3763)
!3771 = !DILocation(line: 423, column: 17, scope: !3763)
!3772 = !DILocation(line: 424, column: 2, scope: !3763)
!3773 = distinct !DISubprogram(name: "create_temp_allocator_on_demand", linkageName: "std.core.mem.allocator.create_temp_allocator_on_demand", scope: !28, file: !28, line: 471, type: !3774, scopeLine: 471, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3774 = !DISubroutineType(types: !3775)
!3775 = !{!33}
!3776 = !DILocation(line: 469, column: 11, scope: !3777)
!3777 = distinct !DILexicalBlock(scope: !3773, file: !28, line: 472, column: 1)
!3778 = !DILocation(line: 473, column: 7, scope: !3773)
!3779 = !DILocation(line: 475, column: 25, scope: !3780)
!3780 = distinct !DILexicalBlock(scope: !3773, file: !28, line: 474, column: 2)
!3781 = !DILocation(line: 152, column: 33, scope: !3782, inlinedAt: !3783)
!3782 = distinct !DISubprogram(name: "abort", linkageName: "abort", scope: !307, file: !307, line: 150, scopeLine: 150, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3783 = !DILocation(line: 476, column: 6, scope: !3780)
!3784 = !DILocation(line: 152, column: 2, scope: !3782, inlinedAt: !3783)
!3785 = !DILocation(line: 153, column: 2, scope: !3782, inlinedAt: !3783)
!3786 = !DILocation(line: 478, column: 31, scope: !3773)
!3787 = !DILocation(line: 481, column: 11, scope: !3773)
!3788 = !DILocation(line: 478, column: 9, scope: !3773)
!3789 = distinct !DISubprogram(name: "create_temp_allocator", linkageName: "std.core.mem.allocator.create_temp_allocator", scope: !28, file: !28, line: 483, type: !3790, scopeLine: 483, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90, retainedNodes: !139)
!3790 = !DISubroutineType(types: !3791)
!3791 = !{!33, !33, !8, !8}
!3792 = !DILocalVariable(name: "allocator", arg: 1, scope: !3789, file: !28, line: 483, type: !33)
!3793 = !DILocation(line: 483, column: 46, scope: !3789)
!3794 = !DILocalVariable(name: "size", arg: 2, scope: !3789, file: !28, line: 483, type: !12)
!3795 = !DILocation(line: 483, column: 61, scope: !3789)
!3796 = !DILocalVariable(name: "buffer", arg: 3, scope: !3789, file: !28, line: 483, type: !12)
!3797 = !DILocation(line: 483, column: 71, scope: !3789)
!3798 = !DILocation(line: 481, column: 11, scope: !3799)
!3799 = distinct !DILexicalBlock(scope: !3789, file: !28, line: 484, column: 1)
!3800 = !DILocation(line: 485, column: 65, scope: !3789)
!3801 = !DILocation(line: 485, column: 76, scope: !3789)
!3802 = !DILocation(line: 485, column: 35, scope: !3789)
!3803 = !DILocation(line: 66, column: 11, scope: !3789)
!3804 = !DILocation(line: 485, column: 24, scope: !3789)
!3805 = distinct !DISubprogram(name: "destroy_temp_allocators", linkageName: "std.core.mem.allocator.destroy_temp_allocators", scope: !28, file: !28, line: 508, type: !3806, scopeLine: 508, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !90)
!3806 = !DISubroutineType(types: !3807)
!3807 = !{null}
!3808 = !DILocation(line: 510, column: 6, scope: !3805)
!3809 = !DILocation(line: 510, column: 23, scope: !3805)
!3810 = !DILocation(line: 511, column: 2, scope: !3805)
!3811 = !DILocation(line: 131, column: 11, scope: !3805)
!3812 = !DILocation(line: 512, column: 13, scope: !3805)
!3813 = !DILocation(line: 513, column: 17, scope: !3805)
!3814 = distinct !DISubprogram(name: "allow_implicit_temp_allocator_on_load_thread", linkageName: "std.core.mem.allocator.allow_implicit_temp_allocator_on_load_thread", scope: !28, file: !28, line: 495, type: !3806, scopeLine: 495, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3815 = !DILocation(line: 497, column: 21, scope: !3814)
!3816 = distinct !DISubprogram(name: "destroy_temp_allocators_after_exit", linkageName: "std.core.mem.allocator.destroy_temp_allocators_after_exit", scope: !28, file: !28, line: 500, type: !3806, scopeLine: 500, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !90)
!3817 = !DILocation(line: 502, column: 2, scope: !3816)
