; ModuleID = 'std::math::random'
source_filename = "std::math::random"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%any = type { ptr, i64 }
%"char[]" = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%"ulong[]" = type { ptr, i64 }

$std.math.random.srand = comdat any

$std.math.random.rand = comdat any

$std.math.random.rand_in_range = comdat any

$std.math.random.rnd = comdat any

$std.math.random.Pcg128Random.set_seed = comdat any

$std.math.random.Pcg128Random.next_long = comdat any

$std.math.random.Pcg128Random.next_bytes = comdat any

$std.math.random.Pcg128Random.next_int128 = comdat any

$std.math.random.Pcg128Random.next_int = comdat any

$std.math.random.Pcg128Random.next_short = comdat any

$std.math.random.Pcg128Random.next_byte = comdat any

$std.math.random.Pcg64Random.set_seed = comdat any

$std.math.random.Pcg64Random.next_int = comdat any

$std.math.random.Pcg64Random.next_bytes = comdat any

$std.math.random.Pcg64Random.next_int128 = comdat any

$std.math.random.Pcg64Random.next_long = comdat any

$std.math.random.Pcg64Random.next_short = comdat any

$std.math.random.Pcg64Random.next_byte = comdat any

$std.math.random.Pcg32Random.set_seed = comdat any

$std.math.random.Pcg32Random.next_short = comdat any

$std.math.random.Pcg32Random.next_bytes = comdat any

$std.math.random.Pcg32Random.next_int128 = comdat any

$std.math.random.Pcg32Random.next_long = comdat any

$std.math.random.Pcg32Random.next_int = comdat any

$std.math.random.Pcg32Random.next_byte = comdat any

$std.math.random.Pcg16Random.set_seed = comdat any

$std.math.random.Pcg16Random.next_byte = comdat any

$std.math.random.Pcg16Random.next_bytes = comdat any

$std.math.random.Pcg16Random.next_int128 = comdat any

$std.math.random.Pcg16Random.next_long = comdat any

$std.math.random.Pcg16Random.next_int = comdat any

$std.math.random.Pcg16Random.next_short = comdat any

$std.math.random.seeder = comdat any

$std.math.random.entropy = comdat any

$std.math.random.Sfc128Random.set_seed = comdat any

$std.math.random.Sfc128Random.next_int128 = comdat any

$std.math.random.Sfc128Random.next_bytes = comdat any

$std.math.random.Sfc128Random.next_long = comdat any

$std.math.random.Sfc128Random.next_int = comdat any

$std.math.random.Sfc128Random.next_short = comdat any

$std.math.random.Sfc128Random.next_byte = comdat any

$std.math.random.Sfc64Random.set_seed = comdat any

$std.math.random.Sfc64Random.next_long = comdat any

$std.math.random.Sfc64Random.next_bytes = comdat any

$std.math.random.Sfc64Random.next_int128 = comdat any

$std.math.random.Sfc64Random.next_int = comdat any

$std.math.random.Sfc64Random.next_short = comdat any

$std.math.random.Sfc64Random.next_byte = comdat any

$std.math.random.Sfc32Random.set_seed = comdat any

$std.math.random.Sfc32Random.next_int = comdat any

$std.math.random.Sfc32Random.next_bytes = comdat any

$std.math.random.Sfc32Random.next_int128 = comdat any

$std.math.random.Sfc32Random.next_long = comdat any

$std.math.random.Sfc32Random.next_short = comdat any

$std.math.random.Sfc32Random.next_byte = comdat any

$std.math.random.Sfc16Random.set_seed = comdat any

$std.math.random.Sfc16Random.next_short = comdat any

$std.math.random.Sfc16Random.next_bytes = comdat any

$std.math.random.Sfc16Random.next_int128 = comdat any

$std.math.random.Sfc16Random.next_long = comdat any

$std.math.random.Sfc16Random.next_int = comdat any

$std.math.random.Sfc16Random.next_byte = comdat any

$std.math.random.Sfc8Random.set_seed = comdat any

$std.math.random.Sfc8Random.next_byte = comdat any

$std.math.random.Sfc8Random.next_bytes = comdat any

$std.math.random.Sfc8Random.next_int128 = comdat any

$std.math.random.Sfc8Random.next_long = comdat any

$std.math.random.Sfc8Random.next_int = comdat any

$std.math.random.Sfc8Random.next_short = comdat any

$std.math.random.SimpleRandom.set_seed = comdat any

$std.math.random.SimpleRandom.next_int = comdat any

$std.math.random.SimpleRandom.next_bytes = comdat any

$std.math.random.SimpleRandom.next_int128 = comdat any

$std.math.random.SimpleRandom.next_long = comdat any

$std.math.random.SimpleRandom.next_short = comdat any

$std.math.random.SimpleRandom.next_byte = comdat any

$std.math.random.Lcg128Random.set_seed = comdat any

$std.math.random.Lcg128Random.next_long = comdat any

$std.math.random.Lcg128Random.next_bytes = comdat any

$std.math.random.Lcg128Random.next_int128 = comdat any

$std.math.random.Lcg128Random.next_int = comdat any

$std.math.random.Lcg128Random.next_short = comdat any

$std.math.random.Lcg128Random.next_byte = comdat any

$std.math.random.Lcg64Random.set_seed = comdat any

$std.math.random.Lcg64Random.next_int = comdat any

$std.math.random.Lcg64Random.next_bytes = comdat any

$std.math.random.Lcg64Random.next_int128 = comdat any

$std.math.random.Lcg64Random.next_long = comdat any

$std.math.random.Lcg64Random.next_short = comdat any

$std.math.random.Lcg64Random.next_byte = comdat any

$std.math.random.Lcg32Random.set_seed = comdat any

$std.math.random.Lcg32Random.next_short = comdat any

$std.math.random.Lcg32Random.next_bytes = comdat any

$std.math.random.Lcg32Random.next_int128 = comdat any

$std.math.random.Lcg32Random.next_long = comdat any

$std.math.random.Lcg32Random.next_int = comdat any

$std.math.random.Lcg32Random.next_byte = comdat any

$std.math.random.Lcg16Random.set_seed = comdat any

$std.math.random.Lcg16Random.next_byte = comdat any

$std.math.random.Lcg16Random.next_bytes = comdat any

$std.math.random.Lcg16Random.next_int128 = comdat any

$std.math.random.Lcg16Random.next_long = comdat any

$std.math.random.Lcg16Random.next_int = comdat any

$std.math.random.Lcg16Random.next_short = comdat any

$std.math.random.Mcg128Random.set_seed = comdat any

$std.math.random.Mcg128Random.next_bytes = comdat any

$std.math.random.Mcg128Random.next_long = comdat any

$std.math.random.Mcg128Random.next_int128 = comdat any

$std.math.random.Mcg128Random.next_int = comdat any

$std.math.random.Mcg128Random.next_short = comdat any

$std.math.random.Mcg128Random.next_byte = comdat any

$std.math.random.Mcg64Random.set_seed = comdat any

$std.math.random.Mcg64Random.next_bytes = comdat any

$std.math.random.Mcg64Random.next_int = comdat any

$std.math.random.Mcg64Random.next_int128 = comdat any

$std.math.random.Mcg64Random.next_long = comdat any

$std.math.random.Mcg64Random.next_short = comdat any

$std.math.random.Mcg64Random.next_byte = comdat any

$std.math.random.Mcg32Random.set_seed = comdat any

$std.math.random.Mcg32Random.next_short = comdat any

$std.math.random.Mcg32Random.next_bytes = comdat any

$std.math.random.Mcg32Random.next_int128 = comdat any

$std.math.random.Mcg32Random.next_long = comdat any

$std.math.random.Mcg32Random.next_int = comdat any

$std.math.random.Mcg32Random.next_byte = comdat any

$std.math.random.Mcg16Random.set_seed = comdat any

$std.math.random.Mcg16Random.next_byte = comdat any

$std.math.random.Mcg16Random.next_bytes = comdat any

$std.math.random.Mcg16Random.next_int128 = comdat any

$std.math.random.Mcg16Random.next_long = comdat any

$std.math.random.Mcg16Random.next_int = comdat any

$std.math.random.Mcg16Random.next_short = comdat any

$std.math.random.Msws128Random.set_seed = comdat any

$std.math.random.Msws128Random.next_int128 = comdat any

$std.math.random.Msws128Random.next_bytes = comdat any

$std.math.random.Msws128Random.next_long = comdat any

$std.math.random.Msws128Random.next_int = comdat any

$std.math.random.Msws128Random.next_short = comdat any

$std.math.random.Msws128Random.next_byte = comdat any

$std.math.random.Msws64Random.set_seed = comdat any

$std.math.random.Msws64Random.next_long = comdat any

$std.math.random.Msws64Random.next_bytes = comdat any

$std.math.random.Msws64Random.next_int128 = comdat any

$std.math.random.Msws64Random.next_int = comdat any

$std.math.random.Msws64Random.next_short = comdat any

$std.math.random.Msws64Random.next_byte = comdat any

$std.math.random.Msws32Random.set_seed = comdat any

$std.math.random.Msws32Random.next_int = comdat any

$std.math.random.Msws32Random.next_bytes = comdat any

$std.math.random.Msws32Random.next_int128 = comdat any

$std.math.random.Msws32Random.next_long = comdat any

$std.math.random.Msws32Random.next_short = comdat any

$std.math.random.Msws32Random.next_byte = comdat any

$std.math.random.Msws16Random.set_seed = comdat any

$std.math.random.Msws16Random.next_short = comdat any

$std.math.random.Msws16Random.next_bytes = comdat any

$std.math.random.Msws16Random.next_int128 = comdat any

$std.math.random.Msws16Random.next_long = comdat any

$std.math.random.Msws16Random.next_int = comdat any

$std.math.random.Msws16Random.next_byte = comdat any

$std.math.random.Msws8Random.set_seed = comdat any

$std.math.random.Msws8Random.next_byte = comdat any

$std.math.random.Msws8Random.next_bytes = comdat any

$std.math.random.Msws8Random.next_int128 = comdat any

$std.math.random.Msws8Random.next_long = comdat any

$std.math.random.Msws8Random.next_int = comdat any

$std.math.random.Msws8Random.next_short = comdat any

$"$ct.std.math.random.Pcg128Random" = comdat any

$"$ct.uint128" = comdat any

$"$ct.std.math.random.Pcg64Random" = comdat any

$"$ct.ulong" = comdat any

$"$ct.std.math.random.Pcg32Random" = comdat any

$"$ct.uint" = comdat any

$"$ct.std.math.random.Pcg16Random" = comdat any

$"$ct.ushort" = comdat any

$"$ct.std.math.random.Sfc128Random" = comdat any

$"$ct.a4$uint128" = comdat any

$"$ct.std.math.random.Sfc64Random" = comdat any

$"$ct.a4$ulong" = comdat any

$"$ct.std.math.random.Sfc32Random" = comdat any

$"$ct.a4$uint" = comdat any

$"$ct.std.math.random.Sfc16Random" = comdat any

$"$ct.a4$ushort" = comdat any

$"$ct.std.math.random.Sfc8Random" = comdat any

$"$ct.a4$char" = comdat any

$"$ct.char" = comdat any

$"$ct.std.math.random.SimpleRandom" = comdat any

$"$ct.std.math.random.Lcg128Random" = comdat any

$"$ct.std.math.random.Lcg64Random" = comdat any

$"$ct.std.math.random.Lcg32Random" = comdat any

$"$ct.std.math.random.Lcg16Random" = comdat any

$"$ct.std.math.random.Mcg128Random" = comdat any

$"$ct.std.math.random.Mcg64Random" = comdat any

$"$ct.std.math.random.Mcg32Random" = comdat any

$"$ct.std.math.random.Mcg16Random" = comdat any

$"$ct.std.math.random.Msws128Random" = comdat any

$"$ct.std.math.random.Msws64Random" = comdat any

$"$ct.std.math.random.Msws32Random" = comdat any

$"$ct.std.math.random.Msws16Random" = comdat any

$"$ct.std.math.random.Msws8Random" = comdat any

$std.math.random.default_random = comdat any

$std.math.random.default_random_initialized = comdat any

$"$ct.long" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.set_seed" = comdat any

$"$sel.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_long" = comdat any

$"$sel.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_bytes" = comdat any

$"$sel.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_int128" = comdat any

$"$sel.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_int" = comdat any

$"$sel.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_short" = comdat any

$"$sel.next_short" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_byte" = comdat any

$"$sel.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_short" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.set_seed" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_int" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_bytes" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_int128" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_long" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_short" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_short" = comdat any

@"$ct.std.math.random.Pcg128Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint128" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg64Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg32Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg16Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc128Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 64, i64 ptrtoint (ptr @"$ct.a4$uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$uint128" = linkonce global %.introspect { i8 14, i64 0, ptr null, i64 64, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc64Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 32, i64 ptrtoint (ptr @"$ct.a4$ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$ulong" = linkonce global %.introspect { i8 14, i64 0, ptr null, i64 32, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc32Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.a4$uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$uint" = linkonce global %.introspect { i8 14, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc16Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.a4$ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$ushort" = linkonce global %.introspect { i8 14, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc8Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.a4$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$char" = linkonce global %.introspect { i8 14, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.char" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.SimpleRandom" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg128Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg64Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg32Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg16Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg128Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg64Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg32Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg16Random" = linkonce global %.introspect { i8 17, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws128Random" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 64, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws64Random" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 32, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws32Random" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 16, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws16Random" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws8Random" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 4, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@std.math.random.default_random = weak thread_local global [4 x i64] zeroinitializer, comdat, align 16, !dbg !0
@std.math.random.default_random_initialized = weak thread_local local_unnamed_addr global i8 0, comdat, align 1, !dbg !9
@.panic_msg = internal constant [39 x i8] c"@require \22is_random(random)\22 violated.\00", align 1
@.file = internal constant [10 x i8] c"random.c3\00", align 1
@.func = internal constant [5 x i8] c"rand\00", align 1
@std.core.builtin.panic = extern_weak global ptr, align 8
@.panic_msg.2 = internal constant [31 x i8] c"@require \22range > 0\22 violated.\00", align 1
@.panic_msg.3 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.4 = internal constant [32 x i8] c"@require \22max >= min\22 violated.\00", align 1
@.func.5 = internal constant [14 x i8] c"rand_in_range\00", align 1
@.func.6 = internal constant [4 x i8] c"rnd\00", align 1
@std.math.random.ODD_PHI128 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !12
@std.math.random.ODD_PHI64 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !16
@std.math.random.ODD_PHI32 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !18
@std.math.random.ODD_PHI16 = internal unnamed_addr constant i16 -25033, align 2, !dbg !21
@std.math.random.MUL_LCG128 = internal unnamed_addr constant i128 -48899967401452674293065485854872568811, align 16, !dbg !24
@std.math.random.MUL_LCG64 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !26
@std.math.random.MUL_LCG32 = internal unnamed_addr constant i32 -1856014347, align 4, !dbg !28
@std.math.random.MUL_LCG16 = internal unnamed_addr constant i16 -28323, align 2, !dbg !30
@.panic_msg.14 = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file.15 = internal constant [12 x i8] c"math.pcg.c3\00", align 1
@.func.16 = internal constant [9 x i8] c"set_seed\00", align 1
@.panic_msg.17 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.panic_msg.18 = internal constant [95 x i8] c"Unaligned access: ptr %% %s = %s, use @unaligned_load / @unaligned_store for unaligned access.\00", align 1
@.func.19 = internal constant [10 x i8] c"next_long\00", align 1
@next_long.ROT_SHIFT = internal unnamed_addr constant i32 58, align 4, !dbg !32
@.panic_msg.20 = internal constant [43 x i8] c"Dereference of null pointer, 's' was null.\00", align 1
@.func.21 = internal constant [11 x i8] c"next_bytes\00", align 1
@.panic_msg.22 = internal constant [35 x i8] c"@require \22bytes.len > 0\22 violated.\00", align 1
@.panic_msg.23 = internal constant [44 x i8] c"Negative value (%d) given for slice length.\00", align 1
@.panic_msg.24 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.panic_msg.25 = internal constant [39 x i8] c"Slice copy length mismatch (%d != %d).\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.26 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@.str = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.28 = private unnamed_addr constant [24 x i8] c"Pcg128Random.next_bytes\00", align 1
@.func.29 = internal constant [12 x i8] c"next_int128\00", align 1
@.func.30 = internal constant [9 x i8] c"next_int\00", align 1
@.func.31 = internal constant [11 x i8] c"next_short\00", align 1
@.func.32 = internal constant [10 x i8] c"next_byte\00", align 1
@next_int.ROT_SHIFT = internal unnamed_addr constant i32 27, align 4, !dbg !35
@.str.33 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.34 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.35 = private unnamed_addr constant [23 x i8] c"Pcg64Random.next_bytes\00", align 1
@next_short.ROT_SHIFT = internal unnamed_addr constant i32 12, align 4, !dbg !37
@.str.36 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.37 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.38 = private unnamed_addr constant [23 x i8] c"Pcg32Random.next_bytes\00", align 1
@next_byte.ROT_SHIFT = internal unnamed_addr constant i32 5, align 4, !dbg !39
@.str.39 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.40 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.41 = private unnamed_addr constant [23 x i8] c"Pcg16Random.next_bytes\00", align 1
@std.math.random.ODD_PHI64.44 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !41
@std.math.random.MUL_MCG64 = internal unnamed_addr constant i64 -1065810590584100411, align 8, !dbg !44
@std.math.random.MUL_LCG64.45 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !46
@.file.46 = internal constant [7 x i8] c"mem.c3\00", align 1
@.func.47 = internal constant [7 x i8] c"seeder\00", align 1
@.file.48 = internal constant [15 x i8] c"math.seeder.c3\00", align 1
@.panic_msg.49 = internal constant [11 x i8] c"% by zero.\00", align 1
@.panic_msg.50 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.51 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.panic_msg.52 = internal constant [43 x i8] c"Dereference of null pointer, '(' was null.\00", align 1
@.panic_msg.53 = internal constant [38 x i8] c"Passed null to a ref ('&') parameter.\00", align 1
@.panic_msg.54 = internal constant [95 x i8] c"@require \22src != null || len == 0\22 violated: 'Copying a null with non-zero length is invalid'.\00", align 1
@.panic_msg.55 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@entropy.random_int = internal unnamed_addr global i32 0, align 4, !dbg !48
@.str.56 = private unnamed_addr constant [9 x i8] c"23:25:32\00", align 1
@.file.57 = internal constant [11 x i8] c"builtin.c3\00", align 1
@.func.58 = internal constant [8 x i8] c"entropy\00", align 1
@std.core.mem.allocator.thread_allocator = extern_weak thread_local global %any, align 8
@std.math.random.ODD_PHI128.63 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !50
@std.math.random.ODD_PHI64.64 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !52
@std.math.random.ODD_PHI32.65 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !54
@std.math.random.ODD_PHI16.66 = internal unnamed_addr constant i16 -25033, align 2, !dbg !56
@std.math.random.ODD_PHI8 = internal unnamed_addr constant i8 -97, align 1, !dbg !58
@.file.67 = internal constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.68 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.69 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.70 = private unnamed_addr constant [24 x i8] c"Sfc128Random.next_bytes\00", align 1
@.str.71 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.72 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.73 = private unnamed_addr constant [23 x i8] c"Sfc64Random.next_bytes\00", align 1
@.panic_msg.74 = internal constant [62 x i8] c"Reference parameter 'sfc' was passed a null pointer argument.\00", align 1
@.str.75 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.76 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.77 = private unnamed_addr constant [23 x i8] c"Sfc32Random.next_bytes\00", align 1
@.panic_msg.78 = internal constant [63 x i8] c"Reference parameter 'seed' was passed a null pointer argument.\00", align 1
@.str.79 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.80 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.81 = private unnamed_addr constant [23 x i8] c"Sfc16Random.next_bytes\00", align 1
@.str.82 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.83 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.84 = private unnamed_addr constant [22 x i8] c"Sfc8Random.next_bytes\00", align 1
@std.math.random.SIMPLE_RANDOM_MULTIPLIER = internal unnamed_addr constant i64 25214903917, align 8, !dbg !61
@std.math.random.SIMPLE_RANDOM_ADDEND = internal unnamed_addr constant i64 11, align 8, !dbg !65
@std.math.random.SIMPLE_RANDOM_MASK = internal unnamed_addr constant i64 281474976710655, align 8, !dbg !67
@.file.87 = internal constant [22 x i8] c"math.simple_random.c3\00", align 1
@.str.88 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.89 = private unnamed_addr constant [22 x i8] c"math.simple_random.c3\00", align 1
@.str.90 = private unnamed_addr constant [24 x i8] c"SimpleRandom.next_bytes\00", align 1
@std.math.random.ODD_PHI128.98 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !69
@std.math.random.ODD_PHI64.99 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !72
@std.math.random.ODD_PHI32.100 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !74
@std.math.random.ODD_PHI16.101 = internal unnamed_addr constant i16 -25033, align 2, !dbg !76
@std.math.random.MUL_LCG128.102 = internal unnamed_addr constant i128 -48899967401452674293065485854872568811, align 16, !dbg !78
@std.math.random.MUL_LCG64.103 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !80
@std.math.random.MUL_LCG32.104 = internal unnamed_addr constant i32 -1856014347, align 4, !dbg !82
@std.math.random.MUL_LCG16.105 = internal unnamed_addr constant i16 -28323, align 2, !dbg !84
@.file.106 = internal constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.107 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.108 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.109 = private unnamed_addr constant [24 x i8] c"Lcg128Random.next_bytes\00", align 1
@.str.110 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.111 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.112 = private unnamed_addr constant [23 x i8] c"Lcg64Random.next_bytes\00", align 1
@.str.113 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.114 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.115 = private unnamed_addr constant [23 x i8] c"Lcg32Random.next_bytes\00", align 1
@.str.116 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.117 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.118 = private unnamed_addr constant [23 x i8] c"Lcg16Random.next_bytes\00", align 1
@std.math.random.MUL_MCG128 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !86
@std.math.random.MUL_MCG64.122 = internal unnamed_addr constant i64 -1065810590584100411, align 8, !dbg !89
@std.math.random.MUL_MCG32 = internal unnamed_addr constant i32 -1814600227, align 4, !dbg !91
@std.math.random.MUL_MCG16 = internal unnamed_addr constant i16 -27691, align 2, !dbg !93
@.file.123 = internal constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.124 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.125 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.126 = private unnamed_addr constant [24 x i8] c"Mcg128Random.next_bytes\00", align 1
@.str.127 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.128 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.129 = private unnamed_addr constant [23 x i8] c"Mcg64Random.next_bytes\00", align 1
@.str.130 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.131 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.132 = private unnamed_addr constant [23 x i8] c"Mcg32Random.next_bytes\00", align 1
@.str.133 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.134 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.135 = private unnamed_addr constant [23 x i8] c"Mcg16Random.next_bytes\00", align 1
@std.math.random.ODD_PHI128.140 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !95
@std.math.random.ODD_PHI64.141 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !98
@std.math.random.ODD_PHI32.142 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !100
@std.math.random.ODD_PHI16.143 = internal unnamed_addr constant i16 -25033, align 2, !dbg !102
@std.math.random.ODD_PHI8.144 = internal unnamed_addr constant i8 -97, align 1, !dbg !104
@.file.145 = internal constant [13 x i8] c"math.msws.c3\00", align 1
@.str.146 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.147 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.148 = private unnamed_addr constant [25 x i8] c"Msws128Random.next_bytes\00", align 1
@.str.149 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.150 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.151 = private unnamed_addr constant [24 x i8] c"Msws64Random.next_bytes\00", align 1
@.str.152 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.153 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.154 = private unnamed_addr constant [24 x i8] c"Msws32Random.next_bytes\00", align 1
@.str.155 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.156 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.157 = private unnamed_addr constant [24 x i8] c"Msws16Random.next_bytes\00", align 1
@.str.158 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.159 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.160 = private unnamed_addr constant [23 x i8] c"Msws8Random.next_bytes\00", align 1
@"$ct.dyn.std.math.random.Pcg128Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.set_seed" = linkonce_odr constant [9 x i8] c"set_seed\00", comdat, align 1
@"$ct.dyn.std.math.random.Pcg128Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_long" = linkonce_odr constant [10 x i8] c"next_long\00", comdat, align 1
@"$ct.dyn.std.math.random.Pcg128Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_bytes" = linkonce_odr constant [11 x i8] c"next_bytes\00", comdat, align 1
@"$ct.dyn.std.math.random.Pcg128Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_int128" = linkonce_odr constant [12 x i8] c"next_int128\00", comdat, align 1
@"$ct.dyn.std.math.random.Pcg128Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_int" = linkonce_odr constant [9 x i8] c"next_int\00", comdat, align 1
@"$ct.dyn.std.math.random.Pcg128Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_short" = linkonce_odr constant [11 x i8] c"next_short\00", comdat, align 1
@"$ct.dyn.std.math.random.Pcg128Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_byte" = linkonce_odr constant [10 x i8] c"next_byte\00", comdat, align 1
@"$ct.dyn.std.math.random.Pcg64Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg128Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg128Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg128Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg128Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg128Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg128Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg128Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.set_seed" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_byte" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_bytes" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_int128" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_long" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_int" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_short" = weak global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_register, ptr null }]

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.srand(i64 %0) #0 comdat !dbg !115 {
entry:
  %seed = alloca i64, align 8
  %taddr = alloca ptr, align 8
  store i64 %0, ptr %seed, align 8
    #dbg_declare(ptr %seed, !119, !DIExpression(), !120)
  store ptr %seed, ptr %taddr, align 8
  %1 = load ptr, ptr %taddr, align 8
  %2 = insertvalue %"char[]" undef, ptr %1, 0
  %3 = insertvalue %"char[]" %2, i64 8, 1
  call void @std.math.random.Sfc64Random.set_seed(ptr @std.math.random.default_random, ptr %1, i64 8), !dbg !121
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !122
  ret void, !dbg !122
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.rand(i32 %0) #0 comdat !dbg !123 {
entry:
  %range = alloca i32, align 4
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %sretparam = alloca [32 x i8], align 1
  %random2 = alloca ptr, align 8
  %range3 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %random4 = alloca ptr, align 8
  %mask = alloca i32, align 4
  %self = alloca i32, align 4
  %taddr = alloca i32, align 4
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %range, align 4
    #dbg_declare(ptr %range, !126, !DIExpression(), !127)
  %1 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !128
  %2 = trunc i8 %1 to i1, !dbg !128
  %not = xor i1 %2, true, !dbg !128
  br i1 %not, label %if.then, label %if.exit, !dbg !128

if.then:                                          ; preds = %entry
  store ptr @std.math.random.default_random, ptr %random, align 8
  %3 = load ptr, ptr %random, align 8
  store ptr %3, ptr %random1, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !131

assert_fail:                                      ; preds = %if.then
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !133
  call void %4(ptr @.panic_msg, i64 38, ptr @.file, i64 9, ptr @.func, i64 4, i32 181) #5, !dbg !133
  unreachable, !dbg !133

assert_ok:                                        ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !138
  %5 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !138
  %6 = insertvalue %"char[]" %5, i64 32, 1, !dbg !138
  %7 = load ptr, ptr %random, align 8, !dbg !138
  call void @std.math.random.Sfc64Random.set_seed(ptr %7, ptr %sretparam, i64 32), !dbg !139
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !140
  br label %if.exit, !dbg !140

if.exit:                                          ; preds = %assert_ok, %entry
  store ptr @std.math.random.default_random, ptr %random2, align 8
  %8 = load i32, ptr %range, align 4, !dbg !141
  store i32 %8, ptr %range3, align 4
  %9 = load ptr, ptr %random2, align 8
  store ptr %9, ptr %random4, align 8
  br i1 true, label %assert_ok6, label %assert_fail5, !dbg !142

assert_fail5:                                     ; preds = %if.exit
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !144
  call void %10(ptr @.panic_msg, i64 38, ptr @.file, i64 9, ptr @.func, i64 4, i32 83) #5, !dbg !144
  unreachable, !dbg !144

assert_ok6:                                       ; preds = %if.exit
  %11 = load i32, ptr %range3, align 4, !dbg !148
  %lt = icmp ult i32 0, %11, !dbg !144
  br i1 %lt, label %assert_ok8, label %assert_fail7, !dbg !144

assert_fail7:                                     ; preds = %assert_ok6
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !144
  call void %12(ptr @.panic_msg.2, i64 30, ptr @.file, i64 9, ptr @.func, i64 4, i32 83) #5, !dbg !144
  unreachable, !dbg !144

assert_ok8:                                       ; preds = %assert_ok6
  %13 = load i32, ptr %range3, align 4, !dbg !149
  %eq = icmp eq i32 1, %13, !dbg !149
  br i1 %eq, label %if.then9, label %if.exit10, !dbg !149

if.then9:                                         ; preds = %assert_ok8
  store i32 0, ptr %blockret, align 4, !dbg !150
  br label %expr_block.exit, !dbg !150

if.exit10:                                        ; preds = %assert_ok8
    #dbg_declare(ptr %mask, !151, !DIExpression(), !152)
  store i32 -1, ptr %mask, align 4, !dbg !153
  %14 = load i32, ptr %range3, align 4, !dbg !154
  %sub = sub i32 %14, 1, !dbg !154
  store i32 %sub, ptr %range3, align 4, !dbg !154
  %15 = load i32, ptr %mask, align 4, !dbg !155
  %16 = load i32, ptr %range3, align 4
  store i32 %16, ptr %self, align 4
  %17 = load i32, ptr %self, align 4, !dbg !156
  %18 = call i32 @llvm.ctlz.i32(i32 %17, i1 false), !dbg !156
  %shift_exceeds = icmp uge i32 %18, 32, !dbg !155
  %19 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !155
  br i1 %19, label %panic, label %checkok, !dbg !155

checkok:                                          ; preds = %if.exit10
  %lshr = lshr i32 %15, %18, !dbg !155
  %20 = freeze i32 %lshr, !dbg !155
  store i32 %20, ptr %mask, align 4, !dbg !155
    #dbg_declare(ptr %x, !160, !DIExpression(), !161)
  br label %loop.body, !dbg !162

loop.cond:                                        ; preds = %loop.body
  %21 = load i32, ptr %x, align 4, !dbg !163
  %22 = load i32, ptr %range3, align 4, !dbg !165
  %gt = icmp ugt i32 %21, %22, !dbg !163
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !163

loop.body:                                        ; preds = %loop.cond, %checkok
  %23 = load ptr, ptr %random2, align 8, !dbg !166
  %24 = call i32 @std.math.random.Sfc64Random.next_int(ptr %23), !dbg !166
  %25 = load i32, ptr %mask, align 4, !dbg !168
  %and = and i32 %24, %25, !dbg !166
  store i32 %and, ptr %x, align 4, !dbg !166
  br label %loop.cond, !dbg !166

loop.exit:                                        ; preds = %loop.cond
  %26 = load i32, ptr %x, align 4, !dbg !169
  store i32 %26, ptr %blockret, align 4, !dbg !169
  br label %expr_block.exit, !dbg !169

expr_block.exit:                                  ; preds = %loop.exit, %if.then9
  %27 = load i32, ptr %blockret, align 4, !dbg !169
  ret i32 %27, !dbg !169

panic:                                            ; preds = %if.exit10
  store i32 %18, ptr %taddr, align 4
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 35, ptr @.file, i64 9, ptr @.func, i64 4, i32 42, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !155
  unreachable, !dbg !155
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.rand_in_range(i32 %0, i32 %1) #0 comdat !dbg !170 {
entry:
  %min = alloca i32, align 4
  %max = alloca i32, align 4
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %sretparam = alloca [32 x i8], align 1
  %random4 = alloca ptr, align 8
  %min5 = alloca i32, align 4
  %max6 = alloca i32, align 4
  %random7 = alloca ptr, align 8
  %random13 = alloca ptr, align 8
  %range = alloca i32, align 4
  %blockret = alloca i32, align 4
  %random14 = alloca ptr, align 8
  %mask = alloca i32, align 4
  %self = alloca i32, align 4
  %taddr = alloca i32, align 4
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %min, align 4
    #dbg_declare(ptr %min, !173, !DIExpression(), !174)
  store i32 %1, ptr %max, align 4
    #dbg_declare(ptr %max, !175, !DIExpression(), !176)
  %2 = load i32, ptr %max, align 4, !dbg !177
  %3 = load i32, ptr %min, align 4, !dbg !179
  %ge = icmp sge i32 %2, %3, !dbg !177
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !177

assert_fail:                                      ; preds = %entry
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !177
  call void %4(ptr @.panic_msg.4, i64 31, ptr @.file, i64 9, ptr @.func.5, i64 13, i32 88) #5, !dbg !177
  unreachable, !dbg !177

assert_ok:                                        ; preds = %entry
  %5 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !180
  %6 = trunc i8 %5 to i1, !dbg !180
  %not = xor i1 %6, true, !dbg !180
  br i1 %not, label %if.then, label %if.exit, !dbg !180

if.then:                                          ; preds = %assert_ok
  store ptr @std.math.random.default_random, ptr %random, align 8
  %7 = load ptr, ptr %random, align 8
  store ptr %7, ptr %random1, align 8
  br i1 true, label %assert_ok3, label %assert_fail2, !dbg !183

assert_fail2:                                     ; preds = %if.then
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !185
  call void %8(ptr @.panic_msg, i64 38, ptr @.file, i64 9, ptr @.func.5, i64 13, i32 181) #5, !dbg !185
  unreachable, !dbg !185

assert_ok3:                                       ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !190
  %9 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !190
  %10 = insertvalue %"char[]" %9, i64 32, 1, !dbg !190
  %11 = load ptr, ptr %random, align 8, !dbg !190
  call void @std.math.random.Sfc64Random.set_seed(ptr %11, ptr %sretparam, i64 32), !dbg !191
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !192
  br label %if.exit, !dbg !192

if.exit:                                          ; preds = %assert_ok3, %assert_ok
  store ptr @std.math.random.default_random, ptr %random4, align 8
  %12 = load i32, ptr %min, align 4
  store i32 %12, ptr %min5, align 4
  %13 = load i32, ptr %max, align 4
  store i32 %13, ptr %max6, align 4
  %14 = load ptr, ptr %random4, align 8
  store ptr %14, ptr %random7, align 8
  br i1 true, label %assert_ok9, label %assert_fail8, !dbg !193

assert_fail8:                                     ; preds = %if.exit
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !195
  call void %15(ptr @.panic_msg, i64 38, ptr @.file, i64 9, ptr @.func.5, i64 13, i32 93) #5, !dbg !195
  unreachable, !dbg !195

assert_ok9:                                       ; preds = %if.exit
  %16 = load i32, ptr %max6, align 4, !dbg !199
  %17 = load i32, ptr %min5, align 4, !dbg !200
  %ge10 = icmp sge i32 %16, %17, !dbg !195
  br i1 %ge10, label %assert_ok12, label %assert_fail11, !dbg !195

assert_fail11:                                    ; preds = %assert_ok9
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !195
  call void %18(ptr @.panic_msg.4, i64 31, ptr @.file, i64 9, ptr @.func.5, i64 13, i32 93) #5, !dbg !195
  unreachable, !dbg !195

assert_ok12:                                      ; preds = %assert_ok9
  %19 = load ptr, ptr %random4, align 8
  store ptr %19, ptr %random13, align 8
  %20 = load i32, ptr %max6, align 4, !dbg !201
  %21 = load i32, ptr %min5, align 4, !dbg !202
  %sub = sub i32 %20, %21, !dbg !201
  %add = add i32 %sub, 1, !dbg !201
  store i32 %add, ptr %range, align 4
  %22 = load ptr, ptr %random13, align 8
  store ptr %22, ptr %random14, align 8
  br i1 true, label %assert_ok16, label %assert_fail15, !dbg !203

assert_fail15:                                    ; preds = %assert_ok12
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !205
  call void %23(ptr @.panic_msg, i64 38, ptr @.file, i64 9, ptr @.func.5, i64 13, i32 60) #5, !dbg !205
  unreachable, !dbg !205

assert_ok16:                                      ; preds = %assert_ok12
  %24 = load i32, ptr %range, align 4, !dbg !209
  %lt = icmp ult i32 0, %24, !dbg !205
  br i1 %lt, label %assert_ok18, label %assert_fail17, !dbg !205

assert_fail17:                                    ; preds = %assert_ok16
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !205
  call void %25(ptr @.panic_msg.2, i64 30, ptr @.file, i64 9, ptr @.func.5, i64 13, i32 60) #5, !dbg !205
  unreachable, !dbg !205

assert_ok18:                                      ; preds = %assert_ok16
  %26 = load i32, ptr %range, align 4, !dbg !210
  %eq = icmp eq i32 1, %26, !dbg !210
  br i1 %eq, label %if.then19, label %if.exit20, !dbg !210

if.then19:                                        ; preds = %assert_ok18
  store i32 0, ptr %blockret, align 4, !dbg !211
  br label %expr_block.exit, !dbg !211

if.exit20:                                        ; preds = %assert_ok18
    #dbg_declare(ptr %mask, !212, !DIExpression(), !213)
  store i32 -1, ptr %mask, align 4, !dbg !214
  %27 = load i32, ptr %range, align 4, !dbg !215
  %sub21 = sub i32 %27, 1, !dbg !215
  store i32 %sub21, ptr %range, align 4, !dbg !215
  %28 = load i32, ptr %mask, align 4, !dbg !216
  %29 = load i32, ptr %range, align 4
  store i32 %29, ptr %self, align 4
  %30 = load i32, ptr %self, align 4, !dbg !217
  %31 = call i32 @llvm.ctlz.i32(i32 %30, i1 false), !dbg !217
  %shift_exceeds = icmp uge i32 %31, 32, !dbg !216
  %32 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !216
  br i1 %32, label %panic, label %checkok, !dbg !216

checkok:                                          ; preds = %if.exit20
  %lshr = lshr i32 %28, %31, !dbg !216
  %33 = freeze i32 %lshr, !dbg !216
  store i32 %33, ptr %mask, align 4, !dbg !216
    #dbg_declare(ptr %x, !220, !DIExpression(), !221)
  br label %loop.body, !dbg !222

loop.cond:                                        ; preds = %loop.body
  %34 = load i32, ptr %x, align 4, !dbg !223
  %35 = load i32, ptr %range, align 4, !dbg !225
  %gt = icmp ugt i32 %34, %35, !dbg !223
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !223

loop.body:                                        ; preds = %loop.cond, %checkok
  %36 = load ptr, ptr %random13, align 8, !dbg !226
  %37 = call i32 @std.math.random.Sfc64Random.next_int(ptr %36), !dbg !226
  %38 = load i32, ptr %mask, align 4, !dbg !228
  %and = and i32 %37, %38, !dbg !226
  store i32 %and, ptr %x, align 4, !dbg !226
  br label %loop.cond, !dbg !226

loop.exit:                                        ; preds = %loop.cond
  %39 = load i32, ptr %x, align 4, !dbg !229
  store i32 %39, ptr %blockret, align 4, !dbg !229
  br label %expr_block.exit, !dbg !229

expr_block.exit:                                  ; preds = %loop.exit, %if.then19
  %40 = load i32, ptr %blockret, align 4, !dbg !229
  %41 = load i32, ptr %min5, align 4, !dbg !230
  %add22 = add i32 %40, %41, !dbg !208
  ret i32 %add22, !dbg !208

panic:                                            ; preds = %if.exit20
  store i32 %31, ptr %taddr, align 4
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %43, ptr %varargslots, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %44, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 35, ptr @.file, i64 9, ptr @.func.5, i64 13, i32 42, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !216
  unreachable, !dbg !216
}

; Function Attrs: nounwind ssp uwtable
define weak double @std.math.random.rnd() #0 comdat !dbg !231 {
entry:
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %sretparam = alloca [32 x i8], align 1
  %val = alloca i64, align 8
  %0 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !235
  %1 = trunc i8 %0 to i1, !dbg !235
  %not = xor i1 %1, true, !dbg !235
  br i1 %not, label %if.then, label %if.exit, !dbg !235

if.then:                                          ; preds = %entry
  store ptr @std.math.random.default_random, ptr %random, align 8
  %2 = load ptr, ptr %random, align 8
  store ptr %2, ptr %random1, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !238

assert_fail:                                      ; preds = %if.then
  %3 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !240
  call void %3(ptr @.panic_msg, i64 38, ptr @.file, i64 9, ptr @.func.6, i64 3, i32 181) #5, !dbg !240
  unreachable, !dbg !240

assert_ok:                                        ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !245
  %4 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !245
  %5 = insertvalue %"char[]" %4, i64 32, 1, !dbg !245
  %6 = load ptr, ptr %random, align 8, !dbg !245
  call void @std.math.random.Sfc64Random.set_seed(ptr %6, ptr %sretparam, i64 32), !dbg !246
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !247
  br label %if.exit, !dbg !247

if.exit:                                          ; preds = %assert_ok, %entry
    #dbg_declare(ptr %val, !248, !DIExpression(), !249)
  %7 = call i64 @std.math.random.Sfc64Random.next_long(ptr @std.math.random.default_random), !dbg !250
  %and = and i64 %7, 9007199254740991, !dbg !250
  store i64 %and, ptr %val, align 8, !dbg !250
  %8 = load i64, ptr %val, align 8, !dbg !251
  %uifp = uitofp i64 %8 to double, !dbg !251
  %fmul = fmul double %uifp, 0x3CA0000000000000, !dbg !251
  ret double %fmul, !dbg !251
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !252 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %taddr8 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !263
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !263
  br i1 %4, label %panic, label %checkok, !dbg !263

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !264, !DIExpression(), !265)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !266, !DIExpression(), !267)
  %5 = load ptr, ptr %self, align 8, !dbg !268
  %checknull = icmp eq ptr %5, null, !dbg !268
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !268
  br i1 %6, label %panic1, label %checkok2, !dbg !268

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !268
  %8 = urem i64 %7, 16, !dbg !268
  %9 = icmp ne i64 %8, 0, !dbg !268
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !268
  br i1 %10, label %panic3, label %checkok6, !dbg !268

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !269, !DIExpression(), !271)
  store i128 0, ptr %return_value, align 16, !dbg !271
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 16, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 16), !dbg !273
  %14 = load i128, ptr %return_value, align 16, !dbg !274
  store i128 %14, ptr %5, align 16, !dbg !274
  ret void, !dbg !274

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !265
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 20) #5, !dbg !265
  unreachable, !dbg !265

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !268
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 22) #5, !dbg !268
  unreachable, !dbg !268

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 22, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !268
  unreachable, !dbg !268
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg128Random.next_long(ptr %0) #0 comdat !dbg !275 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i128, align 16
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %rot = alloca i8, align 1
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %self54 = alloca i64, align 8
  %shift = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !278
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !278
  br i1 %2, label %panic, label %checkok, !dbg !278

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !279, !DIExpression(), !280)
    #dbg_declare(ptr %s, !281, !DIExpression(), !283)
  %3 = load ptr, ptr %self, align 8, !dbg !284
  store ptr %3, ptr %s, align 8, !dbg !284
    #dbg_declare(ptr %xor, !285, !DIExpression(), !286)
  %4 = load ptr, ptr %s, align 8, !dbg !287
  %checknull = icmp eq ptr %4, null, !dbg !287
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !287
  br i1 %5, label %panic1, label %checkok2, !dbg !287

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !287
  %7 = urem i64 %6, 16, !dbg !287
  %8 = icmp ne i64 %7, 0, !dbg !287
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !287
  br i1 %9, label %panic3, label %checkok5, !dbg !287

checkok5:                                         ; preds = %checkok2
  %10 = load i128, ptr %4, align 16, !dbg !287
  %11 = load ptr, ptr %s, align 8, !dbg !288
  %checknull6 = icmp eq ptr %11, null, !dbg !288
  %12 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !288
  br i1 %12, label %panic7, label %checkok8, !dbg !288

checkok8:                                         ; preds = %checkok5
  %13 = ptrtoint ptr %11 to i64, !dbg !288
  %14 = urem i64 %13, 16, !dbg !288
  %15 = icmp ne i64 %14, 0, !dbg !288
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false), !dbg !288
  br i1 %16, label %panic9, label %checkok16, !dbg !288

checkok16:                                        ; preds = %checkok8
  %17 = load i128, ptr %11, align 16, !dbg !288
  %lshr = lshr i128 %17, 35, !dbg !289
  %18 = freeze i128 %lshr, !dbg !289
  %xor17 = xor i128 %10, %18, !dbg !290
  store i128 %xor17, ptr %xor, align 16, !dbg !290
    #dbg_declare(ptr %rot, !291, !DIExpression(), !292)
  %19 = load ptr, ptr %s, align 8, !dbg !293
  %checknull18 = icmp eq ptr %19, null, !dbg !293
  %20 = call i1 @llvm.expect.i1(i1 %checknull18, i1 false), !dbg !293
  br i1 %20, label %panic19, label %checkok20, !dbg !293

checkok20:                                        ; preds = %checkok16
  %21 = ptrtoint ptr %19 to i64, !dbg !293
  %22 = urem i64 %21, 16, !dbg !293
  %23 = icmp ne i64 %22, 0, !dbg !293
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !293
  br i1 %24, label %panic21, label %checkok28, !dbg !293

checkok28:                                        ; preds = %checkok20
  %25 = load i128, ptr %19, align 16, !dbg !293
  %lshr29 = lshr i128 %25, 122, !dbg !294
  %26 = freeze i128 %lshr29, !dbg !294
  %trunc = trunc i128 %26 to i8, !dbg !294
  store i8 %trunc, ptr %rot, align 1, !dbg !294
  %27 = load ptr, ptr %s, align 8, !dbg !295
  %checknull30 = icmp eq ptr %27, null, !dbg !295
  %28 = call i1 @llvm.expect.i1(i1 %checknull30, i1 false), !dbg !295
  br i1 %28, label %panic31, label %checkok32, !dbg !295

checkok32:                                        ; preds = %checkok28
  %29 = ptrtoint ptr %27 to i64, !dbg !295
  %30 = urem i64 %29, 16, !dbg !295
  %31 = icmp ne i64 %30, 0, !dbg !295
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !295
  br i1 %32, label %panic33, label %checkok40, !dbg !295

checkok40:                                        ; preds = %checkok32
  %33 = load ptr, ptr %s, align 8, !dbg !296
  %checknull41 = icmp eq ptr %33, null, !dbg !296
  %34 = call i1 @llvm.expect.i1(i1 %checknull41, i1 false), !dbg !296
  br i1 %34, label %panic42, label %checkok43, !dbg !296

checkok43:                                        ; preds = %checkok40
  %35 = ptrtoint ptr %33 to i64, !dbg !296
  %36 = urem i64 %35, 16, !dbg !296
  %37 = icmp ne i64 %36, 0, !dbg !296
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false), !dbg !296
  br i1 %38, label %panic44, label %checkok51, !dbg !296

checkok51:                                        ; preds = %checkok43
  %39 = load i128, ptr %33, align 16, !dbg !296
  %mul = mul i128 %39, -48899967401452674293065485854872568811, !dbg !297
  %add = add i128 %mul, -129976298391535590297638237547755878347, !dbg !297
  store i128 %add, ptr %27, align 16, !dbg !297
  %40 = load i128, ptr %xor, align 16, !dbg !298
  %lshr52 = lshr i128 %40, 58, !dbg !299
  %41 = freeze i128 %lshr52, !dbg !299
  %trunc53 = trunc i128 %41 to i64, !dbg !299
  store i64 %trunc53, ptr %self54, align 8
  %42 = load i8, ptr %rot, align 1, !dbg !300
  %zext = zext i8 %42 to i64, !dbg !300
  store i64 %zext, ptr %shift, align 8
  %43 = load i64, ptr %self54, align 8, !dbg !301
  %44 = load i64, ptr %self54, align 8, !dbg !303
  %45 = load i64, ptr %shift, align 8, !dbg !304
  %46 = call i64 @llvm.fshr.i64(i64 %43, i64 %44, i64 %45), !dbg !304
  ret i64 %46, !dbg !304

panic:                                            ; preds = %entry
  %47 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !280
  call void %47(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 26) #5, !dbg !280
  unreachable, !dbg !280

panic1:                                           ; preds = %checkok
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !287
  call void %48(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 30) #5, !dbg !287
  unreachable, !dbg !287

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %49 = insertvalue %any undef, ptr %taddr, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %51 = insertvalue %any undef, ptr %taddr4, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %50, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 30, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !287
  unreachable, !dbg !287

panic7:                                           ; preds = %checkok5
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !288
  call void %54(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 30) #5, !dbg !288
  unreachable, !dbg !288

panic9:                                           ; preds = %checkok8
  store i64 16, ptr %taddr10, align 8
  %55 = insertvalue %any undef, ptr %taddr10, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr11, align 8
  %57 = insertvalue %any undef, ptr %taddr11, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %58, ptr %ptradd13, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 30, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !288
  unreachable, !dbg !288

panic19:                                          ; preds = %checkok16
  %60 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !293
  call void %60(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 31) #5, !dbg !293
  unreachable, !dbg !293

panic21:                                          ; preds = %checkok20
  store i64 16, ptr %taddr22, align 8
  %61 = insertvalue %any undef, ptr %taddr22, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr23, align 8
  %63 = insertvalue %any undef, ptr %taddr23, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %64, ptr %ptradd25, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 31, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !293
  unreachable, !dbg !293

panic31:                                          ; preds = %checkok28
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !295
  call void %66(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 32) #5, !dbg !295
  unreachable, !dbg !295

panic33:                                          ; preds = %checkok32
  store i64 16, ptr %taddr34, align 8
  %67 = insertvalue %any undef, ptr %taddr34, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr35, align 8
  %69 = insertvalue %any undef, ptr %taddr35, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %68, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %70, ptr %ptradd37, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 32, ptr byval(%"any[]") align 8 %indirectarg39) #5, !dbg !295
  unreachable, !dbg !295

panic42:                                          ; preds = %checkok40
  %72 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !296
  call void %72(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 32) #5, !dbg !296
  unreachable, !dbg !296

panic44:                                          ; preds = %checkok43
  store i64 16, ptr %taddr45, align 8
  %73 = insertvalue %any undef, ptr %taddr45, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr46, align 8
  %75 = insertvalue %any undef, ptr %taddr46, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %76, ptr %ptradd48, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 32, ptr byval(%"any[]") align 8 %indirectarg50) #5, !dbg !296
  unreachable, !dbg !296
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !305 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !306
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !306
  br i1 %4, label %panic, label %checkok, !dbg !306

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !307, !DIExpression(), !308)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !309, !DIExpression(), !310)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !311
  %5 = load i64, ptr %ptradd1, align 8, !dbg !311
  %lt = icmp ult i64 0, %5, !dbg !311
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !311

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !311
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.15, i64 11, ptr @.func.21, i64 10, i32 37) #5, !dbg !311
  unreachable, !dbg !311

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !313, !DIExpression(), !315)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !316
  %7 = load i64, ptr %ptradd3, align 8, !dbg !316
  store i64 %7, ptr %len, align 8, !dbg !316
  br label %loop.cond, !dbg !317

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !318
  %lt4 = icmp ult i64 0, %8, !dbg !318
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !318

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !320, !DIExpression(), !322)
  %9 = load ptr, ptr %self, align 8, !dbg !323
  %10 = call i64 @std.math.random.Pcg128Random.next_long(ptr %9), !dbg !324
  store i64 %10, ptr %value, align 8, !dbg !324
  %11 = load i64, ptr %len, align 8, !dbg !325
  %le = icmp ule i64 %11, 8, !dbg !325
  br i1 %le, label %if.then, label %if.exit, !dbg !325

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !326
  %add = add i64 0, %13, !dbg !326
  %gt = icmp ugt i64 0, %add, !dbg !326
  %sub = sub i64 %add, 0, !dbg !326
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !326
  br i1 %14, label %panic5, label %checkok7, !dbg !326

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !328
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !328
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !328
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !329
  %18 = extractvalue %"char[]" %17, 0, !dbg !329
  %19 = extractvalue %"char[]" %17, 1, !dbg !330
  %gt8 = icmp ugt i64 0, %19, !dbg !330
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !330
  br i1 %20, label %panic9, label %checkok16, !dbg !330

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !329
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !329
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !329
  %23 = extractvalue %"char[]" %22, 0, !dbg !329
  %24 = extractvalue %"char[]" %16, 0, !dbg !329
  %25 = extractvalue %"char[]" %16, 1, !dbg !329
  %26 = extractvalue %"char[]" %22, 1, !dbg !329
  %neq = icmp ne i64 %26, %25, !dbg !329
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !329
  br i1 %27, label %panic18, label %checkok25, !dbg !329

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !329
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !329
  br label %expr_block.exit, !dbg !331

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 8, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !332
  %33 = extractvalue %"char[]" %32, 0, !dbg !332
  %34 = extractvalue %"char[]" %32, 1, !dbg !332
  %gt27 = icmp sgt i64 0, %34, !dbg !332
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !332
  br i1 %35, label %panic28, label %checkok35, !dbg !332

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 8, !dbg !332
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !332
  br i1 %36, label %panic37, label %checkok44, !dbg !332

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !332
  %38 = insertvalue %"char[]" %37, i64 8, 1, !dbg !332
  %39 = extractvalue %"char[]" %38, 0, !dbg !332
  %40 = extractvalue %"char[]" %31, 0, !dbg !332
  %41 = extractvalue %"char[]" %31, 1, !dbg !332
  %42 = extractvalue %"char[]" %38, 1, !dbg !332
  %neq45 = icmp ne i64 %42, %41, !dbg !332
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !332
  br i1 %43, label %panic46, label %checkok53, !dbg !332

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !332
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !332
  %45 = load i64, ptr %len, align 8, !dbg !333
  %sub54 = sub i64 %45, 8, !dbg !333
  store i64 %sub54, ptr %len, align 8, !dbg !333
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !334
  %47 = extractvalue %"char[]" %46, 0, !dbg !334
  %48 = extractvalue %"char[]" %46, 1, !dbg !335
  %gt55 = icmp ugt i64 8, %48, !dbg !335
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !335
  br i1 %49, label %panic56, label %checkok63, !dbg !335

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 8, !dbg !334
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 8, !dbg !334
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !334
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !334
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !334
  br label %loop.cond, !dbg !334

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !336
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !336
  %hi = load i64, ptr %ptradd66, align 8, !dbg !336
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.27, i64 11, ptr @.str.28, i64 23, i32 39, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !340
  unreachable, !dbg !341

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !341

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !308
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.21, i64 10, i32 39) #5, !dbg !308
  unreachable, !dbg !308

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !328
  unreachable, !dbg !328

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !329
  unreachable, !dbg !329

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !329
  unreachable, !dbg !329

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !332
  unreachable, !dbg !332

panic37:                                          ; preds = %checkok35
  store i64 7, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !332
  unreachable, !dbg !332

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !332
  unreachable, !dbg !332

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !334
  unreachable, !dbg !334
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Pcg128Random.next_int128(ptr %0) #0 comdat !dbg !342 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !345
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !345
  br i1 %2, label %panic, label %checkok, !dbg !345

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !346, !DIExpression(), !347)
  %3 = load ptr, ptr %self, align 8, !dbg !348
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !350
  %zext = zext i64 %4 to i128, !dbg !350
  %shl = shl i128 %zext, 64, !dbg !350
  %5 = freeze i128 %shl, !dbg !350
  %6 = load ptr, ptr %self, align 8, !dbg !348
  %7 = call i64 @std.math.random.Pcg128Random.next_long(ptr %6), !dbg !351
  %zext1 = zext i64 %7 to i128, !dbg !351
  %add = add i128 %5, %zext1, !dbg !350
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !347
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.29, i64 11, i32 40) #5, !dbg !347
  unreachable, !dbg !347
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg128Random.next_int(ptr %0) #0 comdat !dbg !352 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !355
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !355
  br i1 %2, label %panic, label %checkok, !dbg !355

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !356, !DIExpression(), !357)
  %3 = load ptr, ptr %self, align 8, !dbg !358
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !355
  %trunc = trunc i64 %4 to i32, !dbg !355
  ret i32 %trunc, !dbg !355

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !357
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.30, i64 8, i32 41) #5, !dbg !357
  unreachable, !dbg !357
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Pcg128Random.next_short(ptr %0) #0 comdat !dbg !359 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !362
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !362
  br i1 %2, label %panic, label %checkok, !dbg !362

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !363, !DIExpression(), !364)
  %3 = load ptr, ptr %self, align 8, !dbg !365
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !362
  %trunc = trunc i64 %4 to i16, !dbg !362
  ret i16 %trunc, !dbg !362

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !364
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.31, i64 10, i32 42) #5, !dbg !364
  unreachable, !dbg !364
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Pcg128Random.next_byte(ptr %0) #0 comdat !dbg !366 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !369
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !369
  br i1 %2, label %panic, label %checkok, !dbg !369

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !370, !DIExpression(), !371)
  %3 = load ptr, ptr %self, align 8, !dbg !372
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !369
  %trunc = trunc i64 %4 to i8, !dbg !369
  ret i8 %trunc, !dbg !369

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !371
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.32, i64 9, i32 43) #5, !dbg !371
  unreachable, !dbg !371
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !373 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %taddr8 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !378
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !378
  br i1 %4, label %panic, label %checkok, !dbg !378

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !379, !DIExpression(), !380)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !381, !DIExpression(), !382)
  %5 = load ptr, ptr %self, align 8, !dbg !383
  %checknull = icmp eq ptr %5, null, !dbg !383
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !383
  br i1 %6, label %panic1, label %checkok2, !dbg !383

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !383
  %8 = urem i64 %7, 8, !dbg !383
  %9 = icmp ne i64 %8, 0, !dbg !383
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !383
  br i1 %10, label %panic3, label %checkok6, !dbg !383

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !384, !DIExpression(), !386)
  store i64 0, ptr %return_value, align 8, !dbg !386
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 8, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 8), !dbg !388
  %14 = load i64, ptr %return_value, align 8, !dbg !389
  store i64 %14, ptr %5, align 8, !dbg !389
  ret void, !dbg !389

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !380
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 49) #5, !dbg !380
  unreachable, !dbg !380

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !383
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 51) #5, !dbg !383
  unreachable, !dbg !383

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 51, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !383
  unreachable, !dbg !383
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg64Random.next_int(ptr %0) #0 comdat !dbg !390 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %rot = alloca i8, align 1
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %self54 = alloca i32, align 4
  %shift = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !393
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !393
  br i1 %2, label %panic, label %checkok, !dbg !393

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !394, !DIExpression(), !395)
    #dbg_declare(ptr %s, !396, !DIExpression(), !398)
  %3 = load ptr, ptr %self, align 8, !dbg !399
  store ptr %3, ptr %s, align 8, !dbg !399
    #dbg_declare(ptr %xor, !400, !DIExpression(), !401)
  %4 = load ptr, ptr %s, align 8, !dbg !402
  %checknull = icmp eq ptr %4, null, !dbg !402
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !402
  br i1 %5, label %panic1, label %checkok2, !dbg !402

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !402
  %7 = urem i64 %6, 8, !dbg !402
  %8 = icmp ne i64 %7, 0, !dbg !402
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !402
  br i1 %9, label %panic3, label %checkok5, !dbg !402

checkok5:                                         ; preds = %checkok2
  %10 = load i64, ptr %4, align 8, !dbg !402
  %11 = load ptr, ptr %s, align 8, !dbg !403
  %checknull6 = icmp eq ptr %11, null, !dbg !403
  %12 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !403
  br i1 %12, label %panic7, label %checkok8, !dbg !403

checkok8:                                         ; preds = %checkok5
  %13 = ptrtoint ptr %11 to i64, !dbg !403
  %14 = urem i64 %13, 8, !dbg !403
  %15 = icmp ne i64 %14, 0, !dbg !403
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false), !dbg !403
  br i1 %16, label %panic9, label %checkok16, !dbg !403

checkok16:                                        ; preds = %checkok8
  %17 = load i64, ptr %11, align 8, !dbg !403
  %lshr = lshr i64 %17, 18, !dbg !404
  %18 = freeze i64 %lshr, !dbg !404
  %xor17 = xor i64 %10, %18, !dbg !405
  store i64 %xor17, ptr %xor, align 8, !dbg !405
    #dbg_declare(ptr %rot, !406, !DIExpression(), !407)
  %19 = load ptr, ptr %s, align 8, !dbg !408
  %checknull18 = icmp eq ptr %19, null, !dbg !408
  %20 = call i1 @llvm.expect.i1(i1 %checknull18, i1 false), !dbg !408
  br i1 %20, label %panic19, label %checkok20, !dbg !408

checkok20:                                        ; preds = %checkok16
  %21 = ptrtoint ptr %19 to i64, !dbg !408
  %22 = urem i64 %21, 8, !dbg !408
  %23 = icmp ne i64 %22, 0, !dbg !408
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !408
  br i1 %24, label %panic21, label %checkok28, !dbg !408

checkok28:                                        ; preds = %checkok20
  %25 = load i64, ptr %19, align 8, !dbg !408
  %lshr29 = lshr i64 %25, 59, !dbg !409
  %26 = freeze i64 %lshr29, !dbg !409
  %trunc = trunc i64 %26 to i8, !dbg !409
  store i8 %trunc, ptr %rot, align 1, !dbg !409
  %27 = load ptr, ptr %s, align 8, !dbg !410
  %checknull30 = icmp eq ptr %27, null, !dbg !410
  %28 = call i1 @llvm.expect.i1(i1 %checknull30, i1 false), !dbg !410
  br i1 %28, label %panic31, label %checkok32, !dbg !410

checkok32:                                        ; preds = %checkok28
  %29 = ptrtoint ptr %27 to i64, !dbg !410
  %30 = urem i64 %29, 8, !dbg !410
  %31 = icmp ne i64 %30, 0, !dbg !410
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !410
  br i1 %32, label %panic33, label %checkok40, !dbg !410

checkok40:                                        ; preds = %checkok32
  %33 = load ptr, ptr %s, align 8, !dbg !411
  %checknull41 = icmp eq ptr %33, null, !dbg !411
  %34 = call i1 @llvm.expect.i1(i1 %checknull41, i1 false), !dbg !411
  br i1 %34, label %panic42, label %checkok43, !dbg !411

checkok43:                                        ; preds = %checkok40
  %35 = ptrtoint ptr %33 to i64, !dbg !411
  %36 = urem i64 %35, 8, !dbg !411
  %37 = icmp ne i64 %36, 0, !dbg !411
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false), !dbg !411
  br i1 %38, label %panic44, label %checkok51, !dbg !411

checkok51:                                        ; preds = %checkok43
  %39 = load i64, ptr %33, align 8, !dbg !411
  %mul = mul i64 %39, -3372029247567499371, !dbg !412
  %add = add i64 %mul, -7046029254386353131, !dbg !412
  store i64 %add, ptr %27, align 8, !dbg !412
  %40 = load i64, ptr %xor, align 8, !dbg !413
  %lshr52 = lshr i64 %40, 27, !dbg !414
  %41 = freeze i64 %lshr52, !dbg !414
  %trunc53 = trunc i64 %41 to i32, !dbg !414
  store i32 %trunc53, ptr %self54, align 4
  %42 = load i8, ptr %rot, align 1, !dbg !415
  %zext = zext i8 %42 to i32, !dbg !415
  store i32 %zext, ptr %shift, align 4
  %43 = load i32, ptr %self54, align 4, !dbg !416
  %44 = load i32, ptr %self54, align 4, !dbg !418
  %45 = load i32, ptr %shift, align 4, !dbg !419
  %46 = call i32 @llvm.fshr.i32(i32 %43, i32 %44, i32 %45), !dbg !419
  ret i32 %46, !dbg !419

panic:                                            ; preds = %entry
  %47 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !395
  call void %47(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.30, i64 8, i32 54) #5, !dbg !395
  unreachable, !dbg !395

panic1:                                           ; preds = %checkok
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !402
  call void %48(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.30, i64 8, i32 58) #5, !dbg !402
  unreachable, !dbg !402

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %49 = insertvalue %any undef, ptr %taddr, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %51 = insertvalue %any undef, ptr %taddr4, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %50, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.30, i64 8, i32 58, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !402
  unreachable, !dbg !402

panic7:                                           ; preds = %checkok5
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !403
  call void %54(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.30, i64 8, i32 58) #5, !dbg !403
  unreachable, !dbg !403

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr10, align 8
  %55 = insertvalue %any undef, ptr %taddr10, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr11, align 8
  %57 = insertvalue %any undef, ptr %taddr11, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %58, ptr %ptradd13, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.30, i64 8, i32 58, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !403
  unreachable, !dbg !403

panic19:                                          ; preds = %checkok16
  %60 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !408
  call void %60(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.30, i64 8, i32 59) #5, !dbg !408
  unreachable, !dbg !408

panic21:                                          ; preds = %checkok20
  store i64 8, ptr %taddr22, align 8
  %61 = insertvalue %any undef, ptr %taddr22, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr23, align 8
  %63 = insertvalue %any undef, ptr %taddr23, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %64, ptr %ptradd25, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.30, i64 8, i32 59, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !408
  unreachable, !dbg !408

panic31:                                          ; preds = %checkok28
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !410
  call void %66(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.30, i64 8, i32 60) #5, !dbg !410
  unreachable, !dbg !410

panic33:                                          ; preds = %checkok32
  store i64 8, ptr %taddr34, align 8
  %67 = insertvalue %any undef, ptr %taddr34, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr35, align 8
  %69 = insertvalue %any undef, ptr %taddr35, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %68, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %70, ptr %ptradd37, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.30, i64 8, i32 60, ptr byval(%"any[]") align 8 %indirectarg39) #5, !dbg !410
  unreachable, !dbg !410

panic42:                                          ; preds = %checkok40
  %72 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !411
  call void %72(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.30, i64 8, i32 60) #5, !dbg !411
  unreachable, !dbg !411

panic44:                                          ; preds = %checkok43
  store i64 8, ptr %taddr45, align 8
  %73 = insertvalue %any undef, ptr %taddr45, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr46, align 8
  %75 = insertvalue %any undef, ptr %taddr46, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %76, ptr %ptradd48, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.30, i64 8, i32 60, ptr byval(%"any[]") align 8 %indirectarg50) #5, !dbg !411
  unreachable, !dbg !411
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !420 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !421
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !421
  br i1 %4, label %panic, label %checkok, !dbg !421

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !422, !DIExpression(), !423)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !424, !DIExpression(), !425)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !426
  %5 = load i64, ptr %ptradd1, align 8, !dbg !426
  %lt = icmp ult i64 0, %5, !dbg !426
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !426

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !426
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.15, i64 11, ptr @.func.21, i64 10, i32 65) #5, !dbg !426
  unreachable, !dbg !426

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !428, !DIExpression(), !430)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !431
  %7 = load i64, ptr %ptradd3, align 8, !dbg !431
  store i64 %7, ptr %len, align 8, !dbg !431
  br label %loop.cond, !dbg !432

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !433
  %lt4 = icmp ult i64 0, %8, !dbg !433
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !433

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !435, !DIExpression(), !437)
  %9 = load ptr, ptr %self, align 8, !dbg !438
  %10 = call i32 @std.math.random.Pcg64Random.next_int(ptr %9), !dbg !439
  store i32 %10, ptr %value, align 4, !dbg !439
  %11 = load i64, ptr %len, align 8, !dbg !440
  %le = icmp ule i64 %11, 4, !dbg !440
  br i1 %le, label %if.then, label %if.exit, !dbg !440

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !441
  %add = add i64 0, %13, !dbg !441
  %gt = icmp ugt i64 0, %add, !dbg !441
  %sub = sub i64 %add, 0, !dbg !441
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !441
  br i1 %14, label %panic5, label %checkok7, !dbg !441

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !443
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !443
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !443
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !444
  %18 = extractvalue %"char[]" %17, 0, !dbg !444
  %19 = extractvalue %"char[]" %17, 1, !dbg !445
  %gt8 = icmp ugt i64 0, %19, !dbg !445
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !445
  br i1 %20, label %panic9, label %checkok16, !dbg !445

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !444
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !444
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !444
  %23 = extractvalue %"char[]" %22, 0, !dbg !444
  %24 = extractvalue %"char[]" %16, 0, !dbg !444
  %25 = extractvalue %"char[]" %16, 1, !dbg !444
  %26 = extractvalue %"char[]" %22, 1, !dbg !444
  %neq = icmp ne i64 %26, %25, !dbg !444
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !444
  br i1 %27, label %panic18, label %checkok25, !dbg !444

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !444
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !444
  br label %expr_block.exit, !dbg !446

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 4, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !447
  %33 = extractvalue %"char[]" %32, 0, !dbg !447
  %34 = extractvalue %"char[]" %32, 1, !dbg !447
  %gt27 = icmp sgt i64 0, %34, !dbg !447
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !447
  br i1 %35, label %panic28, label %checkok35, !dbg !447

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 4, !dbg !447
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !447
  br i1 %36, label %panic37, label %checkok44, !dbg !447

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !447
  %38 = insertvalue %"char[]" %37, i64 4, 1, !dbg !447
  %39 = extractvalue %"char[]" %38, 0, !dbg !447
  %40 = extractvalue %"char[]" %31, 0, !dbg !447
  %41 = extractvalue %"char[]" %31, 1, !dbg !447
  %42 = extractvalue %"char[]" %38, 1, !dbg !447
  %neq45 = icmp ne i64 %42, %41, !dbg !447
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !447
  br i1 %43, label %panic46, label %checkok53, !dbg !447

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !447
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !447
  %45 = load i64, ptr %len, align 8, !dbg !448
  %sub54 = sub i64 %45, 4, !dbg !448
  store i64 %sub54, ptr %len, align 8, !dbg !448
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !449
  %47 = extractvalue %"char[]" %46, 0, !dbg !449
  %48 = extractvalue %"char[]" %46, 1, !dbg !450
  %gt55 = icmp ugt i64 4, %48, !dbg !450
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !450
  br i1 %49, label %panic56, label %checkok63, !dbg !450

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 4, !dbg !449
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 4, !dbg !449
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !449
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !449
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !449
  br label %loop.cond, !dbg !449

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.33, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !451
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !451
  %hi = load i64, ptr %ptradd66, align 8, !dbg !451
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.34, i64 11, ptr @.str.35, i64 22, i32 67, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !454
  unreachable, !dbg !455

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !455

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !423
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.21, i64 10, i32 67) #5, !dbg !423
  unreachable, !dbg !423

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !443
  unreachable, !dbg !443

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !444
  unreachable, !dbg !444

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !444
  unreachable, !dbg !444

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !447
  unreachable, !dbg !447

panic37:                                          ; preds = %checkok35
  store i64 3, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !447
  unreachable, !dbg !447

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !447
  unreachable, !dbg !447

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !449
  unreachable, !dbg !449
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Pcg64Random.next_int128(ptr %0) #0 comdat !dbg !456 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !459
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !459
  br i1 %2, label %panic, label %checkok, !dbg !459

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !460, !DIExpression(), !461)
  %3 = load ptr, ptr %self, align 8, !dbg !462
  %4 = call i64 @std.math.random.Pcg64Random.next_long(ptr %3), !dbg !464
  %zext = zext i64 %4 to i128, !dbg !464
  %shl = shl i128 %zext, 64, !dbg !464
  %5 = freeze i128 %shl, !dbg !464
  %6 = load ptr, ptr %self, align 8, !dbg !462
  %7 = call i64 @std.math.random.Pcg64Random.next_long(ptr %6), !dbg !465
  %zext1 = zext i64 %7 to i128, !dbg !465
  %add = add i128 %5, %zext1, !dbg !464
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !461
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.29, i64 11, i32 68) #5, !dbg !461
  unreachable, !dbg !461
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg64Random.next_long(ptr %0) #0 comdat !dbg !466 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !469
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !469
  br i1 %2, label %panic, label %checkok, !dbg !469

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !470, !DIExpression(), !471)
  %3 = load ptr, ptr %self, align 8, !dbg !472
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !474
  %zext = zext i32 %4 to i64, !dbg !474
  %shl = shl i64 %zext, 32, !dbg !474
  %5 = freeze i64 %shl, !dbg !474
  %6 = load ptr, ptr %self, align 8, !dbg !472
  %7 = call i32 @std.math.random.Pcg64Random.next_int(ptr %6), !dbg !475
  %zext1 = zext i32 %7 to i64, !dbg !475
  %add = add i64 %5, %zext1, !dbg !474
  ret i64 %add, !dbg !474

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !471
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 69) #5, !dbg !471
  unreachable, !dbg !471
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Pcg64Random.next_short(ptr %0) #0 comdat !dbg !476 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !479
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !479
  br i1 %2, label %panic, label %checkok, !dbg !479

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !480, !DIExpression(), !481)
  %3 = load ptr, ptr %self, align 8, !dbg !482
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !479
  %trunc = trunc i32 %4 to i16, !dbg !479
  ret i16 %trunc, !dbg !479

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !481
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.31, i64 10, i32 70) #5, !dbg !481
  unreachable, !dbg !481
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Pcg64Random.next_byte(ptr %0) #0 comdat !dbg !483 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !486
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !486
  br i1 %2, label %panic, label %checkok, !dbg !486

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !487, !DIExpression(), !488)
  %3 = load ptr, ptr %self, align 8, !dbg !489
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !486
  %trunc = trunc i32 %4 to i8, !dbg !486
  ret i8 %trunc, !dbg !486

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !488
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.32, i64 9, i32 71) #5, !dbg !488
  unreachable, !dbg !488
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !490 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %taddr8 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !495
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !495
  br i1 %4, label %panic, label %checkok, !dbg !495

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !496, !DIExpression(), !497)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !498, !DIExpression(), !499)
  %5 = load ptr, ptr %self, align 8, !dbg !500
  %checknull = icmp eq ptr %5, null, !dbg !500
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !500
  br i1 %6, label %panic1, label %checkok2, !dbg !500

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !500
  %8 = urem i64 %7, 4, !dbg !500
  %9 = icmp ne i64 %8, 0, !dbg !500
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !500
  br i1 %10, label %panic3, label %checkok6, !dbg !500

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !501, !DIExpression(), !503)
  store i32 0, ptr %return_value, align 4, !dbg !503
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 4, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 4), !dbg !505
  %14 = load i32, ptr %return_value, align 4, !dbg !506
  store i32 %14, ptr %5, align 4, !dbg !506
  ret void, !dbg !506

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !497
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 78) #5, !dbg !497
  unreachable, !dbg !497

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !500
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 80) #5, !dbg !500
  unreachable, !dbg !500

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 80, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !500
  unreachable, !dbg !500
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Pcg32Random.next_short(ptr %0) #0 comdat !dbg !507 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %rot = alloca i8, align 1
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %self54 = alloca i16, align 2
  %shift = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !510
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !510
  br i1 %2, label %panic, label %checkok, !dbg !510

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !511, !DIExpression(), !512)
    #dbg_declare(ptr %s, !513, !DIExpression(), !515)
  %3 = load ptr, ptr %self, align 8, !dbg !516
  store ptr %3, ptr %s, align 8, !dbg !516
    #dbg_declare(ptr %xor, !517, !DIExpression(), !518)
  %4 = load ptr, ptr %s, align 8, !dbg !519
  %checknull = icmp eq ptr %4, null, !dbg !519
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !519
  br i1 %5, label %panic1, label %checkok2, !dbg !519

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !519
  %7 = urem i64 %6, 4, !dbg !519
  %8 = icmp ne i64 %7, 0, !dbg !519
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !519
  br i1 %9, label %panic3, label %checkok5, !dbg !519

checkok5:                                         ; preds = %checkok2
  %10 = load i32, ptr %4, align 4, !dbg !519
  %11 = load ptr, ptr %s, align 8, !dbg !520
  %checknull6 = icmp eq ptr %11, null, !dbg !520
  %12 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !520
  br i1 %12, label %panic7, label %checkok8, !dbg !520

checkok8:                                         ; preds = %checkok5
  %13 = ptrtoint ptr %11 to i64, !dbg !520
  %14 = urem i64 %13, 4, !dbg !520
  %15 = icmp ne i64 %14, 0, !dbg !520
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false), !dbg !520
  br i1 %16, label %panic9, label %checkok16, !dbg !520

checkok16:                                        ; preds = %checkok8
  %17 = load i32, ptr %11, align 4, !dbg !520
  %lshr = lshr i32 %17, 10, !dbg !521
  %18 = freeze i32 %lshr, !dbg !521
  %xor17 = xor i32 %10, %18, !dbg !522
  store i32 %xor17, ptr %xor, align 4, !dbg !522
    #dbg_declare(ptr %rot, !523, !DIExpression(), !524)
  %19 = load ptr, ptr %s, align 8, !dbg !525
  %checknull18 = icmp eq ptr %19, null, !dbg !525
  %20 = call i1 @llvm.expect.i1(i1 %checknull18, i1 false), !dbg !525
  br i1 %20, label %panic19, label %checkok20, !dbg !525

checkok20:                                        ; preds = %checkok16
  %21 = ptrtoint ptr %19 to i64, !dbg !525
  %22 = urem i64 %21, 4, !dbg !525
  %23 = icmp ne i64 %22, 0, !dbg !525
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !525
  br i1 %24, label %panic21, label %checkok28, !dbg !525

checkok28:                                        ; preds = %checkok20
  %25 = load i32, ptr %19, align 4, !dbg !525
  %lshr29 = lshr i32 %25, 28, !dbg !526
  %26 = freeze i32 %lshr29, !dbg !526
  %trunc = trunc i32 %26 to i8, !dbg !526
  store i8 %trunc, ptr %rot, align 1, !dbg !526
  %27 = load ptr, ptr %s, align 8, !dbg !527
  %checknull30 = icmp eq ptr %27, null, !dbg !527
  %28 = call i1 @llvm.expect.i1(i1 %checknull30, i1 false), !dbg !527
  br i1 %28, label %panic31, label %checkok32, !dbg !527

checkok32:                                        ; preds = %checkok28
  %29 = ptrtoint ptr %27 to i64, !dbg !527
  %30 = urem i64 %29, 4, !dbg !527
  %31 = icmp ne i64 %30, 0, !dbg !527
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !527
  br i1 %32, label %panic33, label %checkok40, !dbg !527

checkok40:                                        ; preds = %checkok32
  %33 = load ptr, ptr %s, align 8, !dbg !528
  %checknull41 = icmp eq ptr %33, null, !dbg !528
  %34 = call i1 @llvm.expect.i1(i1 %checknull41, i1 false), !dbg !528
  br i1 %34, label %panic42, label %checkok43, !dbg !528

checkok43:                                        ; preds = %checkok40
  %35 = ptrtoint ptr %33 to i64, !dbg !528
  %36 = urem i64 %35, 4, !dbg !528
  %37 = icmp ne i64 %36, 0, !dbg !528
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false), !dbg !528
  br i1 %38, label %panic44, label %checkok51, !dbg !528

checkok51:                                        ; preds = %checkok43
  %39 = load i32, ptr %33, align 4, !dbg !528
  %mul = mul i32 %39, -1856014347, !dbg !529
  %add = add i32 %mul, -1640531527, !dbg !529
  store i32 %add, ptr %27, align 4, !dbg !529
  %40 = load i32, ptr %xor, align 4, !dbg !530
  %lshr52 = lshr i32 %40, 12, !dbg !531
  %41 = freeze i32 %lshr52, !dbg !531
  %trunc53 = trunc i32 %41 to i16, !dbg !531
  store i16 %trunc53, ptr %self54, align 2
  %42 = load i8, ptr %rot, align 1, !dbg !532
  %zext = zext i8 %42 to i16, !dbg !532
  store i16 %zext, ptr %shift, align 2
  %43 = load i16, ptr %self54, align 2, !dbg !533
  %44 = load i16, ptr %self54, align 2, !dbg !535
  %45 = load i16, ptr %shift, align 2, !dbg !536
  %46 = call i16 @llvm.fshr.i16(i16 %43, i16 %44, i16 %45), !dbg !536
  ret i16 %46, !dbg !536

panic:                                            ; preds = %entry
  %47 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !512
  call void %47(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.31, i64 10, i32 83) #5, !dbg !512
  unreachable, !dbg !512

panic1:                                           ; preds = %checkok
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !519
  call void %48(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.31, i64 10, i32 87) #5, !dbg !519
  unreachable, !dbg !519

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %49 = insertvalue %any undef, ptr %taddr, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %51 = insertvalue %any undef, ptr %taddr4, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %50, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.31, i64 10, i32 87, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !519
  unreachable, !dbg !519

panic7:                                           ; preds = %checkok5
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !520
  call void %54(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.31, i64 10, i32 87) #5, !dbg !520
  unreachable, !dbg !520

panic9:                                           ; preds = %checkok8
  store i64 4, ptr %taddr10, align 8
  %55 = insertvalue %any undef, ptr %taddr10, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr11, align 8
  %57 = insertvalue %any undef, ptr %taddr11, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %58, ptr %ptradd13, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.31, i64 10, i32 87, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !520
  unreachable, !dbg !520

panic19:                                          ; preds = %checkok16
  %60 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !525
  call void %60(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.31, i64 10, i32 88) #5, !dbg !525
  unreachable, !dbg !525

panic21:                                          ; preds = %checkok20
  store i64 4, ptr %taddr22, align 8
  %61 = insertvalue %any undef, ptr %taddr22, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr23, align 8
  %63 = insertvalue %any undef, ptr %taddr23, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %64, ptr %ptradd25, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.31, i64 10, i32 88, ptr byval(%"any[]") align 8 %indirectarg27) #5, !dbg !525
  unreachable, !dbg !525

panic31:                                          ; preds = %checkok28
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !527
  call void %66(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.31, i64 10, i32 89) #5, !dbg !527
  unreachable, !dbg !527

panic33:                                          ; preds = %checkok32
  store i64 4, ptr %taddr34, align 8
  %67 = insertvalue %any undef, ptr %taddr34, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr35, align 8
  %69 = insertvalue %any undef, ptr %taddr35, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %68, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %70, ptr %ptradd37, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.31, i64 10, i32 89, ptr byval(%"any[]") align 8 %indirectarg39) #5, !dbg !527
  unreachable, !dbg !527

panic42:                                          ; preds = %checkok40
  %72 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !528
  call void %72(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.31, i64 10, i32 89) #5, !dbg !528
  unreachable, !dbg !528

panic44:                                          ; preds = %checkok43
  store i64 4, ptr %taddr45, align 8
  %73 = insertvalue %any undef, ptr %taddr45, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr46, align 8
  %75 = insertvalue %any undef, ptr %taddr46, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %76, ptr %ptradd48, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.31, i64 10, i32 89, ptr byval(%"any[]") align 8 %indirectarg50) #5, !dbg !528
  unreachable, !dbg !528
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !537 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !538
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !538
  br i1 %4, label %panic, label %checkok, !dbg !538

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !539, !DIExpression(), !540)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !541, !DIExpression(), !542)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !543
  %5 = load i64, ptr %ptradd1, align 8, !dbg !543
  %lt = icmp ult i64 0, %5, !dbg !543
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !543

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !543
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.15, i64 11, ptr @.func.21, i64 10, i32 94) #5, !dbg !543
  unreachable, !dbg !543

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !545, !DIExpression(), !547)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !548
  %7 = load i64, ptr %ptradd3, align 8, !dbg !548
  store i64 %7, ptr %len, align 8, !dbg !548
  br label %loop.cond, !dbg !549

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !550
  %lt4 = icmp ult i64 0, %8, !dbg !550
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !550

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !552, !DIExpression(), !554)
  %9 = load ptr, ptr %self, align 8, !dbg !555
  %10 = call i16 @std.math.random.Pcg32Random.next_short(ptr %9), !dbg !556
  store i16 %10, ptr %value, align 2, !dbg !556
  %11 = load i64, ptr %len, align 8, !dbg !557
  %le = icmp ule i64 %11, 2, !dbg !557
  br i1 %le, label %if.then, label %if.exit, !dbg !557

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !558
  %add = add i64 0, %13, !dbg !558
  %gt = icmp ugt i64 0, %add, !dbg !558
  %sub = sub i64 %add, 0, !dbg !558
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !558
  br i1 %14, label %panic5, label %checkok7, !dbg !558

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !560
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !560
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !560
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !561
  %18 = extractvalue %"char[]" %17, 0, !dbg !561
  %19 = extractvalue %"char[]" %17, 1, !dbg !562
  %gt8 = icmp ugt i64 0, %19, !dbg !562
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !562
  br i1 %20, label %panic9, label %checkok16, !dbg !562

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !561
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !561
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !561
  %23 = extractvalue %"char[]" %22, 0, !dbg !561
  %24 = extractvalue %"char[]" %16, 0, !dbg !561
  %25 = extractvalue %"char[]" %16, 1, !dbg !561
  %26 = extractvalue %"char[]" %22, 1, !dbg !561
  %neq = icmp ne i64 %26, %25, !dbg !561
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !561
  br i1 %27, label %panic18, label %checkok25, !dbg !561

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !561
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !561
  br label %expr_block.exit, !dbg !563

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 2, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !564
  %33 = extractvalue %"char[]" %32, 0, !dbg !564
  %34 = extractvalue %"char[]" %32, 1, !dbg !564
  %gt27 = icmp sgt i64 0, %34, !dbg !564
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !564
  br i1 %35, label %panic28, label %checkok35, !dbg !564

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 2, !dbg !564
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !564
  br i1 %36, label %panic37, label %checkok44, !dbg !564

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !564
  %38 = insertvalue %"char[]" %37, i64 2, 1, !dbg !564
  %39 = extractvalue %"char[]" %38, 0, !dbg !564
  %40 = extractvalue %"char[]" %31, 0, !dbg !564
  %41 = extractvalue %"char[]" %31, 1, !dbg !564
  %42 = extractvalue %"char[]" %38, 1, !dbg !564
  %neq45 = icmp ne i64 %42, %41, !dbg !564
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !564
  br i1 %43, label %panic46, label %checkok53, !dbg !564

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !564
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !564
  %45 = load i64, ptr %len, align 8, !dbg !565
  %sub54 = sub i64 %45, 2, !dbg !565
  store i64 %sub54, ptr %len, align 8, !dbg !565
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !566
  %47 = extractvalue %"char[]" %46, 0, !dbg !566
  %48 = extractvalue %"char[]" %46, 1, !dbg !567
  %gt55 = icmp ugt i64 2, %48, !dbg !567
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !567
  br i1 %49, label %panic56, label %checkok63, !dbg !567

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 2, !dbg !566
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 2, !dbg !566
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !566
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !566
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !566
  br label %loop.cond, !dbg !566

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.36, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !568
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !568
  %hi = load i64, ptr %ptradd66, align 8, !dbg !568
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.37, i64 11, ptr @.str.38, i64 22, i32 96, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !571
  unreachable, !dbg !572

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !572

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !540
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.21, i64 10, i32 96) #5, !dbg !540
  unreachable, !dbg !540

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !560
  unreachable, !dbg !560

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !561
  unreachable, !dbg !561

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !561
  unreachable, !dbg !561

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !564
  unreachable, !dbg !564

panic37:                                          ; preds = %checkok35
  store i64 1, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !564
  unreachable, !dbg !564

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !564
  unreachable, !dbg !564

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !566
  unreachable, !dbg !566
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Pcg32Random.next_int128(ptr %0) #0 comdat !dbg !573 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !576
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !576
  br i1 %2, label %panic, label %checkok, !dbg !576

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !577, !DIExpression(), !578)
  %3 = load ptr, ptr %self, align 8, !dbg !579
  %4 = call i64 @std.math.random.Pcg32Random.next_long(ptr %3), !dbg !581
  %zext = zext i64 %4 to i128, !dbg !581
  %shl = shl i128 %zext, 64, !dbg !581
  %5 = freeze i128 %shl, !dbg !581
  %6 = load ptr, ptr %self, align 8, !dbg !579
  %7 = call i64 @std.math.random.Pcg32Random.next_long(ptr %6), !dbg !582
  %zext1 = zext i64 %7 to i128, !dbg !582
  %add = add i128 %5, %zext1, !dbg !581
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !578
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.29, i64 11, i32 97) #5, !dbg !578
  unreachable, !dbg !578
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg32Random.next_long(ptr %0) #0 comdat !dbg !583 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !586
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !586
  br i1 %2, label %panic, label %checkok, !dbg !586

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !587, !DIExpression(), !588)
  %3 = load ptr, ptr %self, align 8, !dbg !589
  %4 = call i32 @std.math.random.Pcg32Random.next_int(ptr %3), !dbg !591
  %zext = zext i32 %4 to i64, !dbg !591
  %shl = shl i64 %zext, 32, !dbg !591
  %5 = freeze i64 %shl, !dbg !591
  %6 = load ptr, ptr %self, align 8, !dbg !589
  %7 = call i32 @std.math.random.Pcg32Random.next_int(ptr %6), !dbg !592
  %zext1 = zext i32 %7 to i64, !dbg !592
  %add = add i64 %5, %zext1, !dbg !591
  ret i64 %add, !dbg !591

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !588
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 98) #5, !dbg !588
  unreachable, !dbg !588
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg32Random.next_int(ptr %0) #0 comdat !dbg !593 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !596
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !596
  br i1 %2, label %panic, label %checkok, !dbg !596

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !597, !DIExpression(), !598)
  %3 = load ptr, ptr %self, align 8, !dbg !599
  %4 = call i16 @std.math.random.Pcg32Random.next_short(ptr %3), !dbg !601
  %zext = zext i16 %4 to i32, !dbg !601
  %shl = shl i32 %zext, 16, !dbg !601
  %5 = freeze i32 %shl, !dbg !601
  %6 = load ptr, ptr %self, align 8, !dbg !599
  %7 = call i16 @std.math.random.Pcg32Random.next_short(ptr %6), !dbg !602
  %zext1 = zext i16 %7 to i32, !dbg !602
  %add = add i32 %5, %zext1, !dbg !601
  ret i32 %add, !dbg !601

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !598
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.30, i64 8, i32 99) #5, !dbg !598
  unreachable, !dbg !598
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Pcg32Random.next_byte(ptr %0) #0 comdat !dbg !603 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !606
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !606
  br i1 %2, label %panic, label %checkok, !dbg !606

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !607, !DIExpression(), !608)
  %3 = load ptr, ptr %self, align 8, !dbg !609
  %4 = call i16 @std.math.random.Pcg32Random.next_short(ptr %3), !dbg !606
  %trunc = trunc i16 %4 to i8, !dbg !606
  ret i8 %trunc, !dbg !606

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !608
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.32, i64 9, i32 100) #5, !dbg !608
  unreachable, !dbg !608
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !610 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %taddr8 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !615
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !615
  br i1 %4, label %panic, label %checkok, !dbg !615

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !616, !DIExpression(), !617)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !618, !DIExpression(), !619)
  %5 = load ptr, ptr %self, align 8, !dbg !620
  %checknull = icmp eq ptr %5, null, !dbg !620
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !620
  br i1 %6, label %panic1, label %checkok2, !dbg !620

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !620
  %8 = urem i64 %7, 2, !dbg !620
  %9 = icmp ne i64 %8, 0, !dbg !620
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !620
  br i1 %10, label %panic3, label %checkok6, !dbg !620

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !621, !DIExpression(), !623)
  store i16 0, ptr %return_value, align 2, !dbg !623
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 2, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 2), !dbg !625
  %14 = load i16, ptr %return_value, align 2, !dbg !626
  store i16 %14, ptr %5, align 2, !dbg !626
  ret void, !dbg !626

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !617
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 106) #5, !dbg !617
  unreachable, !dbg !617

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !620
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 108) #5, !dbg !620
  unreachable, !dbg !620

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 108, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !620
  unreachable, !dbg !620
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Pcg16Random.next_byte(ptr %0) #0 comdat !dbg !627 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i16, align 2
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %rot = alloca i8, align 1
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %varargslots25 = alloca [2 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %self60 = alloca i8, align 1
  %shift = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !630
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !630
  br i1 %2, label %panic, label %checkok, !dbg !630

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !631, !DIExpression(), !632)
    #dbg_declare(ptr %s, !633, !DIExpression(), !635)
  %3 = load ptr, ptr %self, align 8, !dbg !636
  store ptr %3, ptr %s, align 8, !dbg !636
    #dbg_declare(ptr %xor, !637, !DIExpression(), !638)
  %4 = load ptr, ptr %s, align 8, !dbg !639
  %checknull = icmp eq ptr %4, null, !dbg !639
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !639
  br i1 %5, label %panic1, label %checkok2, !dbg !639

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !639
  %7 = urem i64 %6, 2, !dbg !639
  %8 = icmp ne i64 %7, 0, !dbg !639
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !639
  br i1 %9, label %panic3, label %checkok5, !dbg !639

checkok5:                                         ; preds = %checkok2
  %10 = load i16, ptr %4, align 2, !dbg !639
  %zext = zext i16 %10 to i32, !dbg !639
  %11 = load ptr, ptr %s, align 8, !dbg !640
  %checknull6 = icmp eq ptr %11, null, !dbg !640
  %12 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !640
  br i1 %12, label %panic7, label %checkok8, !dbg !640

checkok8:                                         ; preds = %checkok5
  %13 = ptrtoint ptr %11 to i64, !dbg !640
  %14 = urem i64 %13, 2, !dbg !640
  %15 = icmp ne i64 %14, 0, !dbg !640
  %16 = call i1 @llvm.expect.i1(i1 %15, i1 false), !dbg !640
  br i1 %16, label %panic9, label %checkok16, !dbg !640

checkok16:                                        ; preds = %checkok8
  %17 = load i16, ptr %11, align 2, !dbg !640
  %zext17 = zext i16 %17 to i32, !dbg !640
  %lshr = lshr i32 %zext17, 5, !dbg !641
  %18 = freeze i32 %lshr, !dbg !641
  %xor18 = xor i32 %zext, %18, !dbg !642
  %trunc = trunc i32 %xor18 to i16, !dbg !642
  store i16 %trunc, ptr %xor, align 2, !dbg !642
    #dbg_declare(ptr %rot, !643, !DIExpression(), !644)
  %19 = load ptr, ptr %s, align 8, !dbg !645
  %checknull19 = icmp eq ptr %19, null, !dbg !645
  %20 = call i1 @llvm.expect.i1(i1 %checknull19, i1 false), !dbg !645
  br i1 %20, label %panic20, label %checkok21, !dbg !645

checkok21:                                        ; preds = %checkok16
  %21 = ptrtoint ptr %19 to i64, !dbg !645
  %22 = urem i64 %21, 2, !dbg !645
  %23 = icmp ne i64 %22, 0, !dbg !645
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !645
  br i1 %24, label %panic22, label %checkok29, !dbg !645

checkok29:                                        ; preds = %checkok21
  %25 = load i16, ptr %19, align 2, !dbg !645
  %zext30 = zext i16 %25 to i32, !dbg !645
  %lshr31 = lshr i32 %zext30, 13, !dbg !646
  %26 = freeze i32 %lshr31, !dbg !646
  %trunc32 = trunc i32 %26 to i8, !dbg !646
  store i8 %trunc32, ptr %rot, align 1, !dbg !646
  %27 = load ptr, ptr %s, align 8, !dbg !647
  %checknull33 = icmp eq ptr %27, null, !dbg !647
  %28 = call i1 @llvm.expect.i1(i1 %checknull33, i1 false), !dbg !647
  br i1 %28, label %panic34, label %checkok35, !dbg !647

checkok35:                                        ; preds = %checkok29
  %29 = ptrtoint ptr %27 to i64, !dbg !647
  %30 = urem i64 %29, 2, !dbg !647
  %31 = icmp ne i64 %30, 0, !dbg !647
  %32 = call i1 @llvm.expect.i1(i1 %31, i1 false), !dbg !647
  br i1 %32, label %panic36, label %checkok43, !dbg !647

checkok43:                                        ; preds = %checkok35
  %33 = load ptr, ptr %s, align 8, !dbg !648
  %checknull44 = icmp eq ptr %33, null, !dbg !648
  %34 = call i1 @llvm.expect.i1(i1 %checknull44, i1 false), !dbg !648
  br i1 %34, label %panic45, label %checkok46, !dbg !648

checkok46:                                        ; preds = %checkok43
  %35 = ptrtoint ptr %33 to i64, !dbg !648
  %36 = urem i64 %35, 2, !dbg !648
  %37 = icmp ne i64 %36, 0, !dbg !648
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false), !dbg !648
  br i1 %38, label %panic47, label %checkok54, !dbg !648

checkok54:                                        ; preds = %checkok46
  %39 = load i16, ptr %33, align 2, !dbg !648
  %zext55 = zext i16 %39 to i32, !dbg !648
  %mul = mul i32 %zext55, 37213, !dbg !649
  %add = add i32 %mul, 40503, !dbg !649
  %trunc56 = trunc i32 %add to i16, !dbg !649
  store i16 %trunc56, ptr %27, align 2, !dbg !649
  %40 = load i16, ptr %xor, align 2, !dbg !650
  %zext57 = zext i16 %40 to i32, !dbg !650
  %lshr58 = lshr i32 %zext57, 5, !dbg !651
  %41 = freeze i32 %lshr58, !dbg !651
  %trunc59 = trunc i32 %41 to i8, !dbg !651
  store i8 %trunc59, ptr %self60, align 1
  %42 = load i8, ptr %rot, align 1
  store i8 %42, ptr %shift, align 1
  %43 = load i8, ptr %self60, align 1, !dbg !652
  %44 = load i8, ptr %self60, align 1, !dbg !654
  %45 = load i8, ptr %shift, align 1, !dbg !655
  %46 = call i8 @llvm.fshr.i8(i8 %43, i8 %44, i8 %45), !dbg !655
  ret i8 %46, !dbg !655

panic:                                            ; preds = %entry
  %47 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !632
  call void %47(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.32, i64 9, i32 111) #5, !dbg !632
  unreachable, !dbg !632

panic1:                                           ; preds = %checkok
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !639
  call void %48(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.32, i64 9, i32 115) #5, !dbg !639
  unreachable, !dbg !639

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %49 = insertvalue %any undef, ptr %taddr, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %51 = insertvalue %any undef, ptr %taddr4, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %50, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.32, i64 9, i32 115, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !639
  unreachable, !dbg !639

panic7:                                           ; preds = %checkok5
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !640
  call void %54(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.32, i64 9, i32 115) #5, !dbg !640
  unreachable, !dbg !640

panic9:                                           ; preds = %checkok8
  store i64 2, ptr %taddr10, align 8
  %55 = insertvalue %any undef, ptr %taddr10, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr11, align 8
  %57 = insertvalue %any undef, ptr %taddr11, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %58, ptr %ptradd13, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.32, i64 9, i32 115, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !640
  unreachable, !dbg !640

panic20:                                          ; preds = %checkok16
  %60 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !645
  call void %60(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.32, i64 9, i32 116) #5, !dbg !645
  unreachable, !dbg !645

panic22:                                          ; preds = %checkok21
  store i64 2, ptr %taddr23, align 8
  %61 = insertvalue %any undef, ptr %taddr23, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr24, align 8
  %63 = insertvalue %any undef, ptr %taddr24, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots25, align 16
  %ptradd26 = getelementptr inbounds i8, ptr %varargslots25, i64 16
  store %any %64, ptr %ptradd26, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots25, 0
  %"$$temp27" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp27", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.32, i64 9, i32 116, ptr byval(%"any[]") align 8 %indirectarg28) #5, !dbg !645
  unreachable, !dbg !645

panic34:                                          ; preds = %checkok29
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !647
  call void %66(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.32, i64 9, i32 117) #5, !dbg !647
  unreachable, !dbg !647

panic36:                                          ; preds = %checkok35
  store i64 2, ptr %taddr37, align 8
  %67 = insertvalue %any undef, ptr %taddr37, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr38, align 8
  %69 = insertvalue %any undef, ptr %taddr38, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %68, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %70, ptr %ptradd40, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.32, i64 9, i32 117, ptr byval(%"any[]") align 8 %indirectarg42) #5, !dbg !647
  unreachable, !dbg !647

panic45:                                          ; preds = %checkok43
  %72 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !648
  call void %72(ptr @.panic_msg.20, i64 42, ptr @.file.15, i64 11, ptr @.func.32, i64 9, i32 117) #5, !dbg !648
  unreachable, !dbg !648

panic47:                                          ; preds = %checkok46
  store i64 2, ptr %taddr48, align 8
  %73 = insertvalue %any undef, ptr %taddr48, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr49, align 8
  %75 = insertvalue %any undef, ptr %taddr49, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %76, ptr %ptradd51, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.15, i64 11, ptr @.func.32, i64 9, i32 117, ptr byval(%"any[]") align 8 %indirectarg53) #5, !dbg !648
  unreachable, !dbg !648
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !656 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots10 = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %taddr24 = alloca ptr, align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg65 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !657
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !657
  br i1 %4, label %panic, label %checkok, !dbg !657

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !658, !DIExpression(), !659)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !660, !DIExpression(), !661)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !662, !DIExpression(), !664)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !665
  %5 = load i64, ptr %ptradd2, align 8, !dbg !665
  store i64 %5, ptr %len, align 8, !dbg !665
  br label %loop.cond, !dbg !666

loop.cond:                                        ; preds = %checkok61, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !667
  %lt = icmp ult i64 0, %6, !dbg !667
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !667

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !669, !DIExpression(), !671)
  %7 = load ptr, ptr %self, align 8, !dbg !672
  %8 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %7), !dbg !673
  store i8 %8, ptr %value, align 1, !dbg !673
  %9 = load i64, ptr %len, align 8, !dbg !674
  %le = icmp ule i64 %9, 1, !dbg !674
  br i1 %le, label %if.then, label %if.exit, !dbg !674

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !675
  %add = add i64 0, %11, !dbg !675
  %gt = icmp ugt i64 0, %add, !dbg !675
  %sub = sub i64 %add, 0, !dbg !675
  %12 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !675
  br i1 %12, label %panic3, label %checkok5, !dbg !675

checkok5:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !677
  %13 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !677
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !677
  %15 = load %"char[]", ptr %bytes1, align 8, !dbg !678
  %16 = extractvalue %"char[]" %15, 0, !dbg !678
  %17 = extractvalue %"char[]" %15, 1, !dbg !679
  %gt6 = icmp ugt i64 0, %17, !dbg !679
  %18 = call i1 @llvm.expect.i1(i1 %gt6, i1 false), !dbg !679
  br i1 %18, label %panic7, label %checkok14, !dbg !679

checkok14:                                        ; preds = %checkok5
  %size15 = sub i64 %17, 0, !dbg !678
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !678
  %20 = insertvalue %"char[]" %19, i64 %size15, 1, !dbg !678
  %21 = extractvalue %"char[]" %20, 0, !dbg !678
  %22 = extractvalue %"char[]" %14, 0, !dbg !678
  %23 = extractvalue %"char[]" %14, 1, !dbg !678
  %24 = extractvalue %"char[]" %20, 1, !dbg !678
  %neq = icmp ne i64 %24, %23, !dbg !678
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !678
  br i1 %25, label %panic16, label %checkok23, !dbg !678

checkok23:                                        ; preds = %checkok14
  %26 = mul i64 %23, 1, !dbg !678
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !678
  br label %expr_block.exit, !dbg !680

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr24, align 8
  %27 = load ptr, ptr %taddr24, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 1, 1
  %30 = load %"char[]", ptr %bytes1, align 8, !dbg !681
  %31 = extractvalue %"char[]" %30, 0, !dbg !681
  %32 = extractvalue %"char[]" %30, 1, !dbg !681
  %gt25 = icmp sgt i64 0, %32, !dbg !681
  %33 = call i1 @llvm.expect.i1(i1 %gt25, i1 false), !dbg !681
  br i1 %33, label %panic26, label %checkok33, !dbg !681

checkok33:                                        ; preds = %if.exit
  %lt34 = icmp slt i64 %32, 1, !dbg !681
  %34 = call i1 @llvm.expect.i1(i1 %lt34, i1 false), !dbg !681
  br i1 %34, label %panic35, label %checkok42, !dbg !681

checkok42:                                        ; preds = %checkok33
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !681
  %36 = insertvalue %"char[]" %35, i64 1, 1, !dbg !681
  %37 = extractvalue %"char[]" %36, 0, !dbg !681
  %38 = extractvalue %"char[]" %29, 0, !dbg !681
  %39 = extractvalue %"char[]" %29, 1, !dbg !681
  %40 = extractvalue %"char[]" %36, 1, !dbg !681
  %neq43 = icmp ne i64 %40, %39, !dbg !681
  %41 = call i1 @llvm.expect.i1(i1 %neq43, i1 false), !dbg !681
  br i1 %41, label %panic44, label %checkok51, !dbg !681

checkok51:                                        ; preds = %checkok42
  %42 = mul i64 %39, 1, !dbg !681
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !681
  %43 = load i64, ptr %len, align 8, !dbg !682
  %sub52 = sub i64 %43, 1, !dbg !682
  store i64 %sub52, ptr %len, align 8, !dbg !682
  %44 = load %"char[]", ptr %bytes1, align 8, !dbg !683
  %45 = extractvalue %"char[]" %44, 0, !dbg !683
  %46 = extractvalue %"char[]" %44, 1, !dbg !684
  %gt53 = icmp ugt i64 1, %46, !dbg !684
  %47 = call i1 @llvm.expect.i1(i1 %gt53, i1 false), !dbg !684
  br i1 %47, label %panic54, label %checkok61, !dbg !684

checkok61:                                        ; preds = %checkok51
  %size62 = sub i64 %46, 1, !dbg !683
  %ptradd63 = getelementptr inbounds i8, ptr %45, i64 1, !dbg !683
  %48 = insertvalue %"char[]" undef, ptr %ptradd63, 0, !dbg !683
  %49 = insertvalue %"char[]" %48, i64 %size62, 1, !dbg !683
  store %"char[]" %49, ptr %bytes1, align 8, !dbg !683
  br label %loop.cond, !dbg !683

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.39, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !685
  %ptradd64 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !685
  %hi = load i64, ptr %ptradd64, align 8, !dbg !685
  store %"any[]" zeroinitializer, ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.40, i64 11, ptr @.str.41, i64 22, i32 121, ptr byval(%"any[]") align 8 %indirectarg65), !dbg !688
  unreachable, !dbg !689

expr_block.exit:                                  ; preds = %checkok23
  ret void, !dbg !689

panic:                                            ; preds = %entry
  %50 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !659
  call void %50(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.21, i64 10, i32 121) #5, !dbg !659
  unreachable, !dbg !659

panic3:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr4, align 8
  %51 = insertvalue %any undef, ptr %taddr4, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %52, ptr %varargslots, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !677
  unreachable, !dbg !677

panic7:                                           ; preds = %checkok5
  store i64 %17, ptr %taddr8, align 8
  %54 = insertvalue %any undef, ptr %taddr8, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr9, align 8
  %56 = insertvalue %any undef, ptr %taddr9, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %55, ptr %varargslots10, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots10, i64 16
  store %any %57, ptr %ptradd11, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots10, 0
  %"$$temp12" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp12", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg13) #5, !dbg !678
  unreachable, !dbg !678

panic16:                                          ; preds = %checkok14
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr18, align 8
  %61 = insertvalue %any undef, ptr %taddr18, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %60, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %62, ptr %ptradd20, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg22) #5, !dbg !678
  unreachable, !dbg !678

panic26:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr28, align 8
  %66 = insertvalue %any undef, ptr %taddr28, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %65, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %67, ptr %ptradd30, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg32) #5, !dbg !681
  unreachable, !dbg !681

panic35:                                          ; preds = %checkok33
  store i64 0, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr37, align 8
  %71 = insertvalue %any undef, ptr %taddr37, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %70, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %72, ptr %ptradd39, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg41) #5, !dbg !681
  unreachable, !dbg !681

panic44:                                          ; preds = %checkok42
  store i64 %40, ptr %taddr45, align 8
  %74 = insertvalue %any undef, ptr %taddr45, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr46, align 8
  %76 = insertvalue %any undef, ptr %taddr46, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %75, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %77, ptr %ptradd48, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg50) #5, !dbg !681
  unreachable, !dbg !681

panic54:                                          ; preds = %checkok51
  store i64 %46, ptr %taddr55, align 8
  %79 = insertvalue %any undef, ptr %taddr55, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr56, align 8
  %81 = insertvalue %any undef, ptr %taddr56, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %80, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %82, ptr %ptradd58, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg60) #5, !dbg !683
  unreachable, !dbg !683
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Pcg16Random.next_int128(ptr %0) #0 comdat !dbg !690 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !693
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !693
  br i1 %2, label %panic, label %checkok, !dbg !693

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !694, !DIExpression(), !695)
  %3 = load ptr, ptr %self, align 8, !dbg !696
  %4 = call i64 @std.math.random.Pcg16Random.next_long(ptr %3), !dbg !698
  %zext = zext i64 %4 to i128, !dbg !698
  %shl = shl i128 %zext, 64, !dbg !698
  %5 = freeze i128 %shl, !dbg !698
  %6 = load ptr, ptr %self, align 8, !dbg !696
  %7 = call i64 @std.math.random.Pcg16Random.next_long(ptr %6), !dbg !699
  %zext1 = zext i64 %7 to i128, !dbg !699
  %add = add i128 %5, %zext1, !dbg !698
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !695
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.29, i64 11, i32 122) #5, !dbg !695
  unreachable, !dbg !695
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg16Random.next_long(ptr %0) #0 comdat !dbg !700 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !703
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !703
  br i1 %2, label %panic, label %checkok, !dbg !703

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !704, !DIExpression(), !705)
  %3 = load ptr, ptr %self, align 8, !dbg !706
  %4 = call i32 @std.math.random.Pcg16Random.next_int(ptr %3), !dbg !708
  %zext = zext i32 %4 to i64, !dbg !708
  %shl = shl i64 %zext, 32, !dbg !708
  %5 = freeze i64 %shl, !dbg !708
  %6 = load ptr, ptr %self, align 8, !dbg !706
  %7 = call i32 @std.math.random.Pcg16Random.next_int(ptr %6), !dbg !709
  %zext1 = zext i32 %7 to i64, !dbg !709
  %add = add i64 %5, %zext1, !dbg !708
  ret i64 %add, !dbg !708

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !705
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.19, i64 9, i32 123) #5, !dbg !705
  unreachable, !dbg !705
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg16Random.next_int(ptr %0) #0 comdat !dbg !710 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !713
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !713
  br i1 %2, label %panic, label %checkok, !dbg !713

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !714, !DIExpression(), !715)
  %3 = load ptr, ptr %self, align 8, !dbg !716
  %4 = call i16 @std.math.random.Pcg16Random.next_short(ptr %3), !dbg !718
  %zext = zext i16 %4 to i32, !dbg !718
  %shl = shl i32 %zext, 16, !dbg !718
  %5 = freeze i32 %shl, !dbg !718
  %6 = load ptr, ptr %self, align 8, !dbg !716
  %7 = call i16 @std.math.random.Pcg16Random.next_short(ptr %6), !dbg !719
  %zext1 = zext i16 %7 to i32, !dbg !719
  %add = add i32 %5, %zext1, !dbg !718
  ret i32 %add, !dbg !718

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !715
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.30, i64 8, i32 124) #5, !dbg !715
  unreachable, !dbg !715
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Pcg16Random.next_short(ptr %0) #0 comdat !dbg !720 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !723
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !723
  br i1 %2, label %panic, label %checkok, !dbg !723

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !724, !DIExpression(), !725)
  %3 = load ptr, ptr %self, align 8, !dbg !726
  %4 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %3), !dbg !728
  %zext = zext i8 %4 to i16, !dbg !728
  %zext1 = zext i16 %zext to i32, !dbg !728
  %shl = shl i32 %zext1, 8, !dbg !728
  %5 = freeze i32 %shl, !dbg !728
  %6 = load ptr, ptr %self, align 8, !dbg !726
  %7 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %6), !dbg !729
  %zext2 = zext i8 %7 to i32, !dbg !729
  %add = add i32 %5, %zext2, !dbg !728
  %trunc = trunc i32 %add to i16, !dbg !728
  ret i16 %trunc, !dbg !728

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !725
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.31, i64 10, i32 125) #5, !dbg !725
  unreachable, !dbg !725
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.seeder(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !730 {
entry:
  %input = alloca %"char[]", align 8
  %out_buffer = alloca %"char[]", align 8
  %out_chars = alloca i64, align 8
  %state = alloca ptr, align 8
  %words = alloca %"ulong[]", align 8
  %elements = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots9 = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %words_len_2 = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %taddr37 = alloca i64, align 8
  %varargslots38 = alloca [1 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr44 = alloca i64, align 8
  %taddr45 = alloca i64, align 8
  %varargslots46 = alloca [2 x %any], align 16
  %indirectarg49 = alloca %"any[]", align 8
  %expr = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %varargslots61 = alloca [2 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %varargslots72 = alloca [2 x %any], align 16
  %indirectarg75 = alloca %"any[]", align 8
  %remaining = alloca i64, align 8
  %rest = alloca i64, align 8
  %dst = alloca ptr, align 8
  %taddr87 = alloca i64, align 8
  %taddr88 = alloca i64, align 8
  %varargslots89 = alloca [2 x %any], align 16
  %indirectarg92 = alloca %"any[]", align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %taddr112 = alloca i64, align 8
  %varargslots113 = alloca [1 x %any], align 16
  %indirectarg115 = alloca %"any[]", align 8
  %taddr119 = alloca i64, align 8
  %taddr120 = alloca i64, align 8
  %varargslots121 = alloca [2 x %any], align 16
  %indirectarg124 = alloca %"any[]", align 8
  %taddr132 = alloca i64, align 8
  %varargslots133 = alloca [1 x %any], align 16
  %indirectarg135 = alloca %"any[]", align 8
  %taddr139 = alloca i64, align 8
  %taddr140 = alloca i64, align 8
  %varargslots141 = alloca [2 x %any], align 16
  %indirectarg144 = alloca %"any[]", align 8
  %taddr150 = alloca i64, align 8
  %varargslots151 = alloca [1 x %any], align 16
  %indirectarg153 = alloca %"any[]", align 8
  %taddr157 = alloca i64, align 8
  %taddr158 = alloca i64, align 8
  %varargslots159 = alloca [2 x %any], align 16
  %indirectarg162 = alloca %"any[]", align 8
  %i167 = alloca i64, align 8
  %j172 = alloca i64, align 8
  %taddr180 = alloca i64, align 8
  %varargslots181 = alloca [1 x %any], align 16
  %indirectarg183 = alloca %"any[]", align 8
  %taddr187 = alloca i64, align 8
  %taddr188 = alloca i64, align 8
  %varargslots189 = alloca [2 x %any], align 16
  %indirectarg192 = alloca %"any[]", align 8
  %taddr204 = alloca i64, align 8
  %varargslots205 = alloca [1 x %any], align 16
  %indirectarg207 = alloca %"any[]", align 8
  %taddr211 = alloca i64, align 8
  %taddr212 = alloca i64, align 8
  %varargslots213 = alloca [2 x %any], align 16
  %indirectarg216 = alloca %"any[]", align 8
  %taddr224 = alloca i64, align 8
  %varargslots225 = alloca [1 x %any], align 16
  %indirectarg227 = alloca %"any[]", align 8
  %taddr231 = alloca i64, align 8
  %taddr232 = alloca i64, align 8
  %varargslots233 = alloca [2 x %any], align 16
  %indirectarg236 = alloca %"any[]", align 8
  %taddr242 = alloca i64, align 8
  %varargslots243 = alloca [1 x %any], align 16
  %indirectarg245 = alloca %"any[]", align 8
  %taddr249 = alloca i64, align 8
  %taddr250 = alloca i64, align 8
  %varargslots251 = alloca [2 x %any], align 16
  %indirectarg254 = alloca %"any[]", align 8
  %i261 = alloca i64, align 8
  %j265 = alloca i64, align 8
  %taddr274 = alloca i64, align 8
  %taddr275 = alloca i64, align 8
  %varargslots276 = alloca [2 x %any], align 16
  %indirectarg279 = alloca %"any[]", align 8
  %taddr286 = alloca i64, align 8
  %taddr287 = alloca i64, align 8
  %varargslots288 = alloca [2 x %any], align 16
  %indirectarg291 = alloca %"any[]", align 8
  %taddr297 = alloca i64, align 8
  %taddr298 = alloca i64, align 8
  %varargslots299 = alloca [2 x %any], align 16
  %indirectarg302 = alloca %"any[]", align 8
  %taddr309 = alloca ptr, align 8
  %taddr314 = alloca i64, align 8
  %varargslots315 = alloca [1 x %any], align 16
  %indirectarg317 = alloca %"any[]", align 8
  %taddr322 = alloca i64, align 8
  %taddr323 = alloca i64, align 8
  %varargslots324 = alloca [2 x %any], align 16
  %indirectarg327 = alloca %"any[]", align 8
  %taddr332 = alloca i64, align 8
  %taddr333 = alloca i64, align 8
  %varargslots334 = alloca [2 x %any], align 16
  %indirectarg337 = alloca %"any[]", align 8
  store ptr %0, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !733, !DIExpression(), !734)
  store ptr %2, ptr %out_buffer, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %out_buffer, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %out_buffer, !735, !DIExpression(), !736)
    #dbg_declare(ptr %out_chars, !737, !DIExpression(), !738)
  %ptradd2 = getelementptr inbounds i8, ptr %out_buffer, i64 8, !dbg !739
  %4 = load i64, ptr %ptradd2, align 8, !dbg !739
  store i64 %4, ptr %out_chars, align 8, !dbg !739
    #dbg_declare(ptr %state, !740, !DIExpression(), !772)
  %5 = call ptr @std.core.mem.allocator.push_pool() #6, !dbg !774
  store ptr %5, ptr %state, align 8, !dbg !774
    #dbg_declare(ptr %words, !775, !DIExpression(), !781)
  %6 = load i64, ptr %out_chars, align 8, !dbg !782
  %add = add i64 %6, 7, !dbg !782
  %sdiv = sdiv i64 %add, 8, !dbg !782
  store i64 %sdiv, ptr %elements, align 8
  %7 = load i64, ptr %elements, align 8, !dbg !783
  %mul = mul i64 8, %7, !dbg !786
  %8 = call ptr @std.core.mem.tmalloc(i64 %mul, i64 8) #6, !dbg !787
  store ptr %8, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %elements, align 8, !dbg !788
  %add3 = add i64 0, %10, !dbg !788
  %gt = icmp ugt i64 0, %add3, !dbg !788
  %sub = sub i64 %add3, 0, !dbg !788
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !788
  br i1 %11, label %panic, label %checkok, !dbg !788

checkok:                                          ; preds = %entry
  %size = sub i64 %add3, 0, !dbg !789
  %12 = insertvalue %"ulong[]" undef, ptr %9, 0, !dbg !789
  %13 = insertvalue %"ulong[]" %12, i64 %size, 1, !dbg !789
  store %"ulong[]" %13, ptr %words, align 8, !dbg !789
  %14 = load %"ulong[]", ptr %words, align 8, !dbg !790
  %15 = extractvalue %"ulong[]" %14, 0, !dbg !790
  %16 = extractvalue %"ulong[]" %14, 1, !dbg !791
  %gt5 = icmp ugt i64 0, %16, !dbg !791
  %17 = call i1 @llvm.expect.i1(i1 %gt5, i1 false), !dbg !791
  br i1 %17, label %panic6, label %checkok13, !dbg !791

checkok13:                                        ; preds = %checkok
  br label %cond, !dbg !790

cond:                                             ; preds = %assign, %checkok13
  %18 = phi i64 [ 0, %checkok13 ], [ %add14, %assign ], !dbg !790
  %lt = icmp ult i64 %18, %16, !dbg !790
  br i1 %lt, label %assign, label %exit, !dbg !790

assign:                                           ; preds = %cond
  %ptroffset = getelementptr inbounds [8 x i8], ptr %15, i64 %18, !dbg !790
  store i64 -7046029254386353131, ptr %ptroffset, align 8, !dbg !790
  %add14 = add i64 %18, 1, !dbg !790
  br label %cond, !dbg !790

exit:                                             ; preds = %cond
    #dbg_declare(ptr %words_len_2, !792, !DIExpression(), !793)
  %ptradd15 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !794
  %19 = load i64, ptr %ptradd15, align 8, !dbg !794
  %mul16 = mul i64 %19, 2, !dbg !794
  store i64 %mul16, ptr %words_len_2, align 8, !dbg !794
    #dbg_declare(ptr %i, !795, !DIExpression(), !797)
  store i64 0, ptr %i, align 8, !dbg !798
  br label %loop.cond, !dbg !798

loop.cond:                                        ; preds = %checkok76, %exit
  %20 = load i64, ptr %i, align 8, !dbg !799
  %ptradd17 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !800
  %21 = load i64, ptr %ptradd17, align 8, !dbg !800
  %sdiv18 = sdiv i64 %21, 8, !dbg !800
  %gt19 = icmp sgt i64 %sdiv18, %20, !dbg !799
  %check = icmp sge i64 %20, 0, !dbg !799
  %siui-gt = and i1 %check, %gt19, !dbg !799
  br i1 %siui-gt, label %loop.body, label %loop.exit, !dbg !799

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %j, !801, !DIExpression(), !803)
  %22 = load i64, ptr %i, align 8, !dbg !804
  %ptradd20 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !805
  %23 = load i64, ptr %ptradd20, align 8, !dbg !805
  %zero = icmp eq i64 %23, 0, !dbg !804
  %24 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !804
  br i1 %24, label %panic21, label %checkok22, !dbg !804

checkok22:                                        ; preds = %loop.body
  %umod = urem i64 %22, %23, !dbg !804
  store i64 %umod, ptr %j, align 8, !dbg !804
  %ptradd23 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !806
  %25 = load i64, ptr %ptradd23, align 8, !dbg !806
  %26 = load ptr, ptr %words, align 8, !dbg !806
  %27 = load i64, ptr %j, align 8, !dbg !807
  %ge = icmp uge i64 %27, %25, !dbg !807
  %28 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !807
  br i1 %28, label %panic24, label %checkok31, !dbg !807

checkok31:                                        ; preds = %checkok22
  %ptroffset32 = getelementptr inbounds [8 x i8], ptr %26, i64 %27, !dbg !807
  %29 = load i64, ptr %ptroffset32, align 8, !dbg !807
  %ptradd33 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !808
  %30 = load i64, ptr %ptradd33, align 8, !dbg !808
  %31 = load ptr, ptr %input, align 8, !dbg !808
  %32 = load i64, ptr %i, align 8, !dbg !809
  %mul34 = mul i64 %32, 8, !dbg !809
  %lt35 = icmp slt i64 %mul34, 0, !dbg !809
  %33 = call i1 @llvm.expect.i1(i1 %lt35, i1 false), !dbg !809
  br i1 %33, label %panic36, label %checkok41, !dbg !809

checkok41:                                        ; preds = %checkok31
  %ge42 = icmp sge i64 %mul34, %30, !dbg !809
  %34 = call i1 @llvm.expect.i1(i1 %ge42, i1 false), !dbg !809
  br i1 %34, label %panic43, label %checkok50, !dbg !809

checkok50:                                        ; preds = %checkok41
  %ptradd51 = getelementptr inbounds i8, ptr %31, i64 %mul34, !dbg !809
  %checknull = icmp eq ptr %ptradd51, null, !dbg !809
  %35 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !809
  br i1 %35, label %panic52, label %checkok53, !dbg !809

checkok53:                                        ; preds = %checkok50
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %ptradd51, i32 8, i1 false)
    #dbg_declare(ptr %x, !810, !DIExpression(), !812)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %x, ptr align 1 %expr, i64 8, i1 false), !dbg !814
  %36 = load i64, ptr %x, align 8, !dbg !815
  %mul54 = mul i64 %36, -3372029247567499371, !dbg !813
  %sub55 = sub i64 %29, %mul54, !dbg !806
  store i64 %sub55, ptr %ptroffset32, align 8, !dbg !806
  %ptradd56 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !816
  %37 = load i64, ptr %ptradd56, align 8, !dbg !816
  %38 = load ptr, ptr %words, align 8, !dbg !816
  %39 = load i64, ptr %j, align 8, !dbg !817
  %ge57 = icmp uge i64 %39, %37, !dbg !817
  %40 = call i1 @llvm.expect.i1(i1 %ge57, i1 false), !dbg !817
  br i1 %40, label %panic58, label %checkok65, !dbg !817

checkok65:                                        ; preds = %checkok53
  %ptroffset66 = getelementptr inbounds [8 x i8], ptr %38, i64 %39, !dbg !817
  %41 = load i64, ptr %ptroffset66, align 8, !dbg !817
  %ptradd67 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !818
  %42 = load i64, ptr %ptradd67, align 8, !dbg !818
  %43 = load ptr, ptr %words, align 8, !dbg !818
  %44 = load i64, ptr %j, align 8, !dbg !819
  %ge68 = icmp uge i64 %44, %42, !dbg !819
  %45 = call i1 @llvm.expect.i1(i1 %ge68, i1 false), !dbg !819
  br i1 %45, label %panic69, label %checkok76, !dbg !819

checkok76:                                        ; preds = %checkok65
  %ptroffset77 = getelementptr inbounds [8 x i8], ptr %43, i64 %44, !dbg !819
  %46 = load i64, ptr %ptroffset77, align 8, !dbg !819
  %lshr = lshr i64 %46, 25, !dbg !818
  %47 = freeze i64 %lshr, !dbg !818
  %xor = xor i64 %41, %47, !dbg !816
  store i64 %xor, ptr %ptroffset66, align 8, !dbg !816
  %48 = load i64, ptr %i, align 8, !dbg !820
  %add78 = add i64 %48, 1, !dbg !820
  store i64 %add78, ptr %i, align 8, !dbg !820
  br label %loop.cond, !dbg !820

loop.exit:                                        ; preds = %loop.cond
    #dbg_declare(ptr %remaining, !821, !DIExpression(), !822)
  %ptradd79 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !823
  %49 = load i64, ptr %ptradd79, align 8, !dbg !823
  %ptradd80 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !824
  %50 = load i64, ptr %ptradd80, align 8, !dbg !824
  %sdiv81 = sdiv i64 %50, 8, !dbg !824
  %mul82 = mul i64 %sdiv81, 8, !dbg !824
  %sub83 = sub i64 %49, %mul82, !dbg !823
  store i64 %sub83, ptr %remaining, align 8, !dbg !823
  %51 = load i64, ptr %remaining, align 8, !dbg !825
  %i2b = icmp ne i64 %51, 0, !dbg !825
  br i1 %i2b, label %if.then, label %if.exit, !dbg !825

if.then:                                          ; preds = %loop.exit
    #dbg_declare(ptr %rest, !826, !DIExpression(), !828)
  store i64 -1065810590584100411, ptr %rest, align 8, !dbg !829
  store ptr %rest, ptr %dst, align 8
  %ptradd84 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !830
  %52 = load i64, ptr %ptradd84, align 8, !dbg !830
  %53 = load ptr, ptr %input, align 8, !dbg !830
  %54 = load i64, ptr %remaining, align 8, !dbg !831
  %55 = sub nuw i64 %52, %54, !dbg !831
  %ge85 = icmp uge i64 %55, %52, !dbg !831
  %56 = call i1 @llvm.expect.i1(i1 %ge85, i1 false), !dbg !831
  br i1 %56, label %panic86, label %checkok93, !dbg !831

checkok93:                                        ; preds = %if.then
  %ptradd94 = getelementptr inbounds i8, ptr %53, i64 %55, !dbg !831
  store ptr %ptradd94, ptr %src, align 8
  %57 = load i64, ptr %remaining, align 8
  store i64 %57, ptr %len, align 8
  %58 = load ptr, ptr %dst, align 8, !dbg !832
  %neq = icmp ne ptr %58, null, !dbg !832
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !832

assert_fail:                                      ; preds = %checkok93
  %59 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !832
  call void %59(ptr @.panic_msg.53, i64 37, ptr @.file.46, i64 6, ptr @.func.47, i64 6, i32 329) #5, !dbg !832
  unreachable, !dbg !832

assert_ok:                                        ; preds = %checkok93
  %60 = load ptr, ptr %src, align 8, !dbg !836
  %neq95 = icmp ne ptr %60, null, !dbg !836
  br i1 %neq95, label %or.phi, label %or.rhs, !dbg !836

or.rhs:                                           ; preds = %assert_ok
  %61 = load i64, ptr %len, align 8, !dbg !837
  %eq = icmp eq i64 0, %61, !dbg !837
  br label %or.phi, !dbg !837

or.phi:                                           ; preds = %or.rhs, %assert_ok
  %val = phi i1 [ true, %assert_ok ], [ %eq, %or.rhs ], !dbg !837
  br i1 %val, label %assert_ok97, label %assert_fail96, !dbg !837

assert_fail96:                                    ; preds = %or.phi
  %62 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !838
  call void %62(ptr @.panic_msg.54, i64 94, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 46) #5, !dbg !838
  unreachable, !dbg !838

assert_ok97:                                      ; preds = %or.phi
  %63 = load i64, ptr %len, align 8, !dbg !839
  %eq98 = icmp eq i64 0, %63, !dbg !839
  br i1 %eq98, label %or.phi100, label %or.rhs99, !dbg !839

or.rhs99:                                         ; preds = %assert_ok97
  %64 = load ptr, ptr %dst, align 8, !dbg !840
  %65 = load i64, ptr %len, align 8, !dbg !841
  %ptradd_any = getelementptr i8, ptr %64, i64 %65, !dbg !841
  %66 = load ptr, ptr %src, align 8, !dbg !842
  %le = icmp ule ptr %ptradd_any, %66, !dbg !840
  br label %or.phi100, !dbg !840

or.phi100:                                        ; preds = %or.rhs99, %assert_ok97
  %val101 = phi i1 [ true, %assert_ok97 ], [ %le, %or.rhs99 ], !dbg !840
  br i1 %val101, label %or.phi105, label %or.rhs102, !dbg !840

or.rhs102:                                        ; preds = %or.phi100
  %67 = load ptr, ptr %src, align 8, !dbg !843
  %68 = load i64, ptr %len, align 8, !dbg !844
  %ptradd_any103 = getelementptr i8, ptr %67, i64 %68, !dbg !844
  %69 = load ptr, ptr %dst, align 8, !dbg !845
  %le104 = icmp ule ptr %ptradd_any103, %69, !dbg !843
  br label %or.phi105, !dbg !843

or.phi105:                                        ; preds = %or.rhs102, %or.phi100
  %val106 = phi i1 [ true, %or.phi100 ], [ %le104, %or.rhs102 ], !dbg !843
  br i1 %val106, label %assert_ok108, label %assert_fail107, !dbg !843

assert_fail107:                                   ; preds = %or.phi105
  %70 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !838
  call void %70(ptr @.panic_msg.55, i64 95, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 46) #5, !dbg !838
  unreachable, !dbg !838

assert_ok108:                                     ; preds = %or.phi105
  %71 = load ptr, ptr %dst, align 8, !dbg !846
  %72 = load ptr, ptr %src, align 8, !dbg !847
  %73 = load i64, ptr %len, align 8, !dbg !848
  call void @llvm.memcpy.p0.p0.i64(ptr %71, ptr %72, i64 %73, i1 false), !dbg !849
  %ptradd109 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !850
  %74 = load i64, ptr %ptradd109, align 8, !dbg !850
  %75 = load ptr, ptr %words, align 8, !dbg !850
  %76 = sub nuw i64 %74, 1, !dbg !851
  %lt110 = icmp slt i64 %76, 0, !dbg !851
  %77 = call i1 @llvm.expect.i1(i1 %lt110, i1 false), !dbg !851
  br i1 %77, label %panic111, label %checkok116, !dbg !851

checkok116:                                       ; preds = %assert_ok108
  %ge117 = icmp sge i64 %76, %74, !dbg !851
  %78 = call i1 @llvm.expect.i1(i1 %ge117, i1 false), !dbg !851
  br i1 %78, label %panic118, label %checkok125, !dbg !851

checkok125:                                       ; preds = %checkok116
  %ptroffset126 = getelementptr inbounds [8 x i8], ptr %75, i64 %76, !dbg !851
  %79 = load i64, ptr %ptroffset126, align 8, !dbg !851
  %80 = load i64, ptr %rest, align 8, !dbg !852
  %mul127 = mul i64 %80, -3372029247567499371, !dbg !852
  %sub128 = sub i64 %79, %mul127, !dbg !850
  store i64 %sub128, ptr %ptroffset126, align 8, !dbg !850
  %ptradd129 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !853
  %81 = load i64, ptr %ptradd129, align 8, !dbg !853
  %82 = load ptr, ptr %words, align 8, !dbg !853
  %83 = sub nuw i64 %81, 1, !dbg !854
  %lt130 = icmp slt i64 %83, 0, !dbg !854
  %84 = call i1 @llvm.expect.i1(i1 %lt130, i1 false), !dbg !854
  br i1 %84, label %panic131, label %checkok136, !dbg !854

checkok136:                                       ; preds = %checkok125
  %ge137 = icmp sge i64 %83, %81, !dbg !854
  %85 = call i1 @llvm.expect.i1(i1 %ge137, i1 false), !dbg !854
  br i1 %85, label %panic138, label %checkok145, !dbg !854

checkok145:                                       ; preds = %checkok136
  %ptroffset146 = getelementptr inbounds [8 x i8], ptr %82, i64 %83, !dbg !854
  %86 = load i64, ptr %ptroffset146, align 8, !dbg !854
  %ptradd147 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !855
  %87 = load i64, ptr %ptradd147, align 8, !dbg !855
  %88 = load ptr, ptr %words, align 8, !dbg !855
  %89 = sub nuw i64 %87, 1, !dbg !856
  %lt148 = icmp slt i64 %89, 0, !dbg !856
  %90 = call i1 @llvm.expect.i1(i1 %lt148, i1 false), !dbg !856
  br i1 %90, label %panic149, label %checkok154, !dbg !856

checkok154:                                       ; preds = %checkok145
  %ge155 = icmp sge i64 %89, %87, !dbg !856
  %91 = call i1 @llvm.expect.i1(i1 %ge155, i1 false), !dbg !856
  br i1 %91, label %panic156, label %checkok163, !dbg !856

checkok163:                                       ; preds = %checkok154
  %ptroffset164 = getelementptr inbounds [8 x i8], ptr %88, i64 %89, !dbg !856
  %92 = load i64, ptr %ptroffset164, align 8, !dbg !856
  %lshr165 = lshr i64 %92, 25, !dbg !855
  %93 = freeze i64 %lshr165, !dbg !855
  %xor166 = xor i64 %86, %93, !dbg !853
  store i64 %xor166, ptr %ptroffset146, align 8, !dbg !853
  br label %if.exit, !dbg !853

if.exit:                                          ; preds = %checkok163, %loop.exit
    #dbg_declare(ptr %i167, !857, !DIExpression(), !860)
  %94 = load i64, ptr %words_len_2, align 8, !dbg !861
  %sub168 = sub i64 %94, 1, !dbg !861
  store i64 %sub168, ptr %i167, align 8, !dbg !861
  br label %loop.cond169, !dbg !861

loop.cond169:                                     ; preds = %checkok255, %if.exit
  %95 = load i64, ptr %i167, align 8, !dbg !862
  %ge170 = icmp sge i64 %95, 0, !dbg !862
  br i1 %ge170, label %loop.body171, label %loop.exit260, !dbg !862

loop.body171:                                     ; preds = %loop.cond169
    #dbg_declare(ptr %j172, !863, !DIExpression(), !865)
  %96 = load i64, ptr %i167, align 8, !dbg !866
  %ptradd173 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !867
  %97 = load i64, ptr %ptradd173, align 8, !dbg !867
  %zero174 = icmp eq i64 %97, 0, !dbg !866
  %98 = call i1 @llvm.expect.i1(i1 %zero174, i1 false), !dbg !866
  br i1 %98, label %panic175, label %checkok176, !dbg !866

checkok176:                                       ; preds = %loop.body171
  %smod = srem i64 %96, %97, !dbg !866
  store i64 %smod, ptr %j172, align 8, !dbg !866
  %ptradd177 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !868
  %99 = load i64, ptr %ptradd177, align 8, !dbg !868
  %100 = load ptr, ptr %words, align 8, !dbg !868
  %101 = load i64, ptr %j172, align 8, !dbg !869
  %lt178 = icmp slt i64 %101, 0, !dbg !869
  %102 = call i1 @llvm.expect.i1(i1 %lt178, i1 false), !dbg !869
  br i1 %102, label %panic179, label %checkok184, !dbg !869

checkok184:                                       ; preds = %checkok176
  %ge185 = icmp sge i64 %101, %99, !dbg !869
  %103 = call i1 @llvm.expect.i1(i1 %ge185, i1 false), !dbg !869
  br i1 %103, label %panic186, label %checkok193, !dbg !869

checkok193:                                       ; preds = %checkok184
  %ptroffset194 = getelementptr inbounds [8 x i8], ptr %100, i64 %101, !dbg !869
  %104 = load i64, ptr %ptroffset194, align 8, !dbg !869
  %ptradd195 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !870
  %105 = load i64, ptr %ptradd195, align 8, !dbg !870
  %106 = load ptr, ptr %words, align 8, !dbg !870
  %107 = load i64, ptr %i167, align 8, !dbg !871
  %add196 = add i64 %107, 1, !dbg !871
  %ptradd197 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !872
  %108 = load i64, ptr %ptradd197, align 8, !dbg !872
  %zero198 = icmp eq i64 %108, 0, !dbg !871
  %109 = call i1 @llvm.expect.i1(i1 %zero198, i1 false), !dbg !871
  br i1 %109, label %panic199, label %checkok200, !dbg !871

checkok200:                                       ; preds = %checkok193
  %smod201 = srem i64 %add196, %108, !dbg !871
  %lt202 = icmp slt i64 %smod201, 0, !dbg !871
  %110 = call i1 @llvm.expect.i1(i1 %lt202, i1 false), !dbg !871
  br i1 %110, label %panic203, label %checkok208, !dbg !871

checkok208:                                       ; preds = %checkok200
  %ge209 = icmp sge i64 %smod201, %105, !dbg !871
  %111 = call i1 @llvm.expect.i1(i1 %ge209, i1 false), !dbg !871
  br i1 %111, label %panic210, label %checkok217, !dbg !871

checkok217:                                       ; preds = %checkok208
  %ptroffset218 = getelementptr inbounds [8 x i8], ptr %106, i64 %smod201, !dbg !871
  %112 = load i64, ptr %ptroffset218, align 8, !dbg !871
  %mul219 = mul i64 %112, -3372029247567499371, !dbg !870
  %sub220 = sub i64 %104, %mul219, !dbg !868
  store i64 %sub220, ptr %ptroffset194, align 8, !dbg !868
  %ptradd221 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !873
  %113 = load i64, ptr %ptradd221, align 8, !dbg !873
  %114 = load ptr, ptr %words, align 8, !dbg !873
  %115 = load i64, ptr %j172, align 8, !dbg !874
  %lt222 = icmp slt i64 %115, 0, !dbg !874
  %116 = call i1 @llvm.expect.i1(i1 %lt222, i1 false), !dbg !874
  br i1 %116, label %panic223, label %checkok228, !dbg !874

checkok228:                                       ; preds = %checkok217
  %ge229 = icmp sge i64 %115, %113, !dbg !874
  %117 = call i1 @llvm.expect.i1(i1 %ge229, i1 false), !dbg !874
  br i1 %117, label %panic230, label %checkok237, !dbg !874

checkok237:                                       ; preds = %checkok228
  %ptroffset238 = getelementptr inbounds [8 x i8], ptr %114, i64 %115, !dbg !874
  %118 = load i64, ptr %ptroffset238, align 8, !dbg !874
  %ptradd239 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !875
  %119 = load i64, ptr %ptradd239, align 8, !dbg !875
  %120 = load ptr, ptr %words, align 8, !dbg !875
  %121 = load i64, ptr %j172, align 8, !dbg !876
  %lt240 = icmp slt i64 %121, 0, !dbg !876
  %122 = call i1 @llvm.expect.i1(i1 %lt240, i1 false), !dbg !876
  br i1 %122, label %panic241, label %checkok246, !dbg !876

checkok246:                                       ; preds = %checkok237
  %ge247 = icmp sge i64 %121, %119, !dbg !876
  %123 = call i1 @llvm.expect.i1(i1 %ge247, i1 false), !dbg !876
  br i1 %123, label %panic248, label %checkok255, !dbg !876

checkok255:                                       ; preds = %checkok246
  %ptroffset256 = getelementptr inbounds [8 x i8], ptr %120, i64 %121, !dbg !876
  %124 = load i64, ptr %ptroffset256, align 8, !dbg !876
  %lshr257 = lshr i64 %124, 25, !dbg !875
  %125 = freeze i64 %lshr257, !dbg !875
  %xor258 = xor i64 %118, %125, !dbg !873
  store i64 %xor258, ptr %ptroffset238, align 8, !dbg !873
  %126 = load i64, ptr %i167, align 8, !dbg !877
  %sub259 = sub i64 %126, 1, !dbg !877
  store i64 %sub259, ptr %i167, align 8, !dbg !877
  br label %loop.cond169, !dbg !877

loop.exit260:                                     ; preds = %loop.cond169
    #dbg_declare(ptr %i261, !878, !DIExpression(), !880)
  store i64 0, ptr %i261, align 8, !dbg !881
  br label %loop.cond262, !dbg !881

loop.cond262:                                     ; preds = %checkok303, %loop.exit260
  %127 = load i64, ptr %i261, align 8, !dbg !882
  %128 = load i64, ptr %words_len_2, align 8, !dbg !883
  %lt263 = icmp ult i64 %127, %128, !dbg !882
  br i1 %lt263, label %loop.body264, label %loop.exit308, !dbg !882

loop.body264:                                     ; preds = %loop.cond262
    #dbg_declare(ptr %j265, !884, !DIExpression(), !886)
  %129 = load i64, ptr %i261, align 8, !dbg !887
  %ptradd266 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !888
  %130 = load i64, ptr %ptradd266, align 8, !dbg !888
  %zero267 = icmp eq i64 %130, 0, !dbg !887
  %131 = call i1 @llvm.expect.i1(i1 %zero267, i1 false), !dbg !887
  br i1 %131, label %panic268, label %checkok269, !dbg !887

checkok269:                                       ; preds = %loop.body264
  %umod270 = urem i64 %129, %130, !dbg !887
  store i64 %umod270, ptr %j265, align 8, !dbg !887
  %ptradd271 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !889
  %132 = load i64, ptr %ptradd271, align 8, !dbg !889
  %133 = load ptr, ptr %words, align 8, !dbg !889
  %134 = load i64, ptr %j265, align 8, !dbg !890
  %ge272 = icmp uge i64 %134, %132, !dbg !890
  %135 = call i1 @llvm.expect.i1(i1 %ge272, i1 false), !dbg !890
  br i1 %135, label %panic273, label %checkok280, !dbg !890

checkok280:                                       ; preds = %checkok269
  %ptroffset281 = getelementptr inbounds [8 x i8], ptr %133, i64 %134, !dbg !890
  %136 = load i64, ptr %ptroffset281, align 8, !dbg !890
  %mul282 = mul i64 %136, -1065810590584100411, !dbg !889
  store i64 %mul282, ptr %ptroffset281, align 8, !dbg !889
  %ptradd283 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !891
  %137 = load i64, ptr %ptradd283, align 8, !dbg !891
  %138 = load ptr, ptr %words, align 8, !dbg !891
  %139 = load i64, ptr %j265, align 8, !dbg !892
  %ge284 = icmp uge i64 %139, %137, !dbg !892
  %140 = call i1 @llvm.expect.i1(i1 %ge284, i1 false), !dbg !892
  br i1 %140, label %panic285, label %checkok292, !dbg !892

checkok292:                                       ; preds = %checkok280
  %ptroffset293 = getelementptr inbounds [8 x i8], ptr %138, i64 %139, !dbg !892
  %141 = load i64, ptr %ptroffset293, align 8, !dbg !892
  %ptradd294 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !893
  %142 = load i64, ptr %ptradd294, align 8, !dbg !893
  %143 = load ptr, ptr %words, align 8, !dbg !893
  %144 = load i64, ptr %j265, align 8, !dbg !894
  %ge295 = icmp uge i64 %144, %142, !dbg !894
  %145 = call i1 @llvm.expect.i1(i1 %ge295, i1 false), !dbg !894
  br i1 %145, label %panic296, label %checkok303, !dbg !894

checkok303:                                       ; preds = %checkok292
  %ptroffset304 = getelementptr inbounds [8 x i8], ptr %143, i64 %144, !dbg !894
  %146 = load i64, ptr %ptroffset304, align 8, !dbg !894
  %lshr305 = lshr i64 %146, 25, !dbg !893
  %147 = freeze i64 %lshr305, !dbg !893
  %xor306 = xor i64 %141, %147, !dbg !891
  store i64 %xor306, ptr %ptroffset293, align 8, !dbg !891
  %148 = load i64, ptr %i261, align 8, !dbg !895
  %add307 = add i64 %148, 1, !dbg !895
  store i64 %add307, ptr %i261, align 8, !dbg !895
  br label %loop.cond262, !dbg !895

loop.exit308:                                     ; preds = %loop.cond262
  %149 = load ptr, ptr %words, align 8, !dbg !896
  store ptr %149, ptr %taddr309, align 8
  %150 = load ptr, ptr %taddr309, align 8
  %151 = load i64, ptr %out_chars, align 8, !dbg !897
  %add310 = add i64 0, %151, !dbg !897
  %gt311 = icmp ugt i64 0, %add310, !dbg !897
  %sub312 = sub i64 %add310, 0, !dbg !897
  %152 = call i1 @llvm.expect.i1(i1 %gt311, i1 false), !dbg !897
  br i1 %152, label %panic313, label %checkok318, !dbg !897

checkok318:                                       ; preds = %loop.exit308
  %size319 = sub i64 %add310, 0, !dbg !898
  %153 = insertvalue %"char[]" undef, ptr %150, 0, !dbg !898
  %154 = insertvalue %"char[]" %153, i64 %size319, 1, !dbg !898
  %155 = load %"char[]", ptr %out_buffer, align 8, !dbg !899
  %156 = extractvalue %"char[]" %155, 0, !dbg !899
  %157 = extractvalue %"char[]" %155, 1, !dbg !900
  %gt320 = icmp ugt i64 0, %157, !dbg !900
  %158 = call i1 @llvm.expect.i1(i1 %gt320, i1 false), !dbg !900
  br i1 %158, label %panic321, label %checkok328, !dbg !900

checkok328:                                       ; preds = %checkok318
  %size329 = sub i64 %157, 0, !dbg !899
  %159 = insertvalue %"char[]" undef, ptr %156, 0, !dbg !899
  %160 = insertvalue %"char[]" %159, i64 %size329, 1, !dbg !899
  %161 = extractvalue %"char[]" %160, 0, !dbg !899
  %162 = extractvalue %"char[]" %154, 0, !dbg !899
  %163 = extractvalue %"char[]" %154, 1, !dbg !899
  %164 = extractvalue %"char[]" %160, 1, !dbg !899
  %neq330 = icmp ne i64 %164, %163, !dbg !899
  %165 = call i1 @llvm.expect.i1(i1 %neq330, i1 false), !dbg !899
  br i1 %165, label %panic331, label %checkok338, !dbg !899

checkok338:                                       ; preds = %checkok328
  %166 = mul i64 %163, 1, !dbg !899
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %161, ptr align 1 %162, i64 %166, i1 false), !dbg !899
  %167 = load ptr, ptr %state, align 8, !dbg !901
  call void @std.core.mem.allocator.pop_pool(ptr %167) #6, !dbg !903
  ret void, !dbg !903

panic:                                            ; preds = %entry
  store i64 %sub, ptr %taddr4, align 8
  %168 = insertvalue %any undef, ptr %taddr4, 0
  %169 = insertvalue %any %168, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %169, ptr %varargslots, align 16
  %170 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %170, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file.46, i64 6, ptr @.func.47, i64 6, i32 832, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !789
  unreachable, !dbg !789

panic6:                                           ; preds = %checkok
  store i64 %16, ptr %taddr7, align 8
  %171 = insertvalue %any undef, ptr %taddr7, 0
  %172 = insertvalue %any %171, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %173 = insertvalue %any undef, ptr %taddr8, 0
  %174 = insertvalue %any %173, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %172, ptr %varargslots9, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots9, i64 16
  store %any %174, ptr %ptradd10, align 16
  %175 = insertvalue %"any[]" undef, ptr %varargslots9, 0
  %"$$temp11" = insertvalue %"any[]" %175, i64 2, 1
  store %"any[]" %"$$temp11", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 30, ptr byval(%"any[]") align 8 %indirectarg12) #5, !dbg !790
  unreachable, !dbg !790

panic21:                                          ; preds = %loop.body
  %176 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !804
  call void %176(ptr @.panic_msg.49, i64 10, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 36) #5, !dbg !804
  unreachable, !dbg !804

panic24:                                          ; preds = %checkok22
  store i64 %25, ptr %taddr25, align 8
  %177 = insertvalue %any undef, ptr %taddr25, 0
  %178 = insertvalue %any %177, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr26, align 8
  %179 = insertvalue %any undef, ptr %taddr26, 0
  %180 = insertvalue %any %179, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %178, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %180, ptr %ptradd28, align 16
  %181 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %181, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 37, ptr byval(%"any[]") align 8 %indirectarg30) #5, !dbg !807
  unreachable, !dbg !807

panic36:                                          ; preds = %checkok31
  store i64 %mul34, ptr %taddr37, align 8
  %182 = insertvalue %any undef, ptr %taddr37, 0
  %183 = insertvalue %any %182, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %183, ptr %varargslots38, align 16
  %184 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp39" = insertvalue %"any[]" %184, i64 1, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 38, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 37, ptr byval(%"any[]") align 8 %indirectarg40) #5, !dbg !809
  unreachable, !dbg !809

panic43:                                          ; preds = %checkok41
  store i64 %30, ptr %taddr44, align 8
  %185 = insertvalue %any undef, ptr %taddr44, 0
  %186 = insertvalue %any %185, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %mul34, ptr %taddr45, align 8
  %187 = insertvalue %any undef, ptr %taddr45, 0
  %188 = insertvalue %any %187, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %186, ptr %varargslots46, align 16
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %188, ptr %ptradd47, align 16
  %189 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %189, i64 2, 1
  store %"any[]" %"$$temp48", ptr %indirectarg49, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 37, ptr byval(%"any[]") align 8 %indirectarg49) #5, !dbg !809
  unreachable, !dbg !809

panic52:                                          ; preds = %checkok50
  %190 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !904
  call void %190(ptr @.panic_msg.52, i64 42, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 37) #5, !dbg !904
  unreachable, !dbg !904

panic58:                                          ; preds = %checkok53
  store i64 %37, ptr %taddr59, align 8
  %191 = insertvalue %any undef, ptr %taddr59, 0
  %192 = insertvalue %any %191, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr60, align 8
  %193 = insertvalue %any undef, ptr %taddr60, 0
  %194 = insertvalue %any %193, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %192, ptr %varargslots61, align 16
  %ptradd62 = getelementptr inbounds i8, ptr %varargslots61, i64 16
  store %any %194, ptr %ptradd62, align 16
  %195 = insertvalue %"any[]" undef, ptr %varargslots61, 0
  %"$$temp63" = insertvalue %"any[]" %195, i64 2, 1
  store %"any[]" %"$$temp63", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 38, ptr byval(%"any[]") align 8 %indirectarg64) #5, !dbg !817
  unreachable, !dbg !817

panic69:                                          ; preds = %checkok65
  store i64 %42, ptr %taddr70, align 8
  %196 = insertvalue %any undef, ptr %taddr70, 0
  %197 = insertvalue %any %196, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr71, align 8
  %198 = insertvalue %any undef, ptr %taddr71, 0
  %199 = insertvalue %any %198, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %197, ptr %varargslots72, align 16
  %ptradd73 = getelementptr inbounds i8, ptr %varargslots72, i64 16
  store %any %199, ptr %ptradd73, align 16
  %200 = insertvalue %"any[]" undef, ptr %varargslots72, 0
  %"$$temp74" = insertvalue %"any[]" %200, i64 2, 1
  store %"any[]" %"$$temp74", ptr %indirectarg75, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 38, ptr byval(%"any[]") align 8 %indirectarg75) #5, !dbg !819
  unreachable, !dbg !819

panic86:                                          ; preds = %if.then
  store i64 %52, ptr %taddr87, align 8
  %201 = insertvalue %any undef, ptr %taddr87, 0
  %202 = insertvalue %any %201, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr88, align 8
  %203 = insertvalue %any undef, ptr %taddr88, 0
  %204 = insertvalue %any %203, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %202, ptr %varargslots89, align 16
  %ptradd90 = getelementptr inbounds i8, ptr %varargslots89, i64 16
  store %any %204, ptr %ptradd90, align 16
  %205 = insertvalue %"any[]" undef, ptr %varargslots89, 0
  %"$$temp91" = insertvalue %"any[]" %205, i64 2, 1
  store %"any[]" %"$$temp91", ptr %indirectarg92, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 46, ptr byval(%"any[]") align 8 %indirectarg92) #5, !dbg !831
  unreachable, !dbg !831

panic111:                                         ; preds = %assert_ok108
  store i64 %76, ptr %taddr112, align 8
  %206 = insertvalue %any undef, ptr %taddr112, 0
  %207 = insertvalue %any %206, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %207, ptr %varargslots113, align 16
  %208 = insertvalue %"any[]" undef, ptr %varargslots113, 0
  %"$$temp114" = insertvalue %"any[]" %208, i64 1, 1
  store %"any[]" %"$$temp114", ptr %indirectarg115, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 38, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 47, ptr byval(%"any[]") align 8 %indirectarg115) #5, !dbg !851
  unreachable, !dbg !851

panic118:                                         ; preds = %checkok116
  store i64 %74, ptr %taddr119, align 8
  %209 = insertvalue %any undef, ptr %taddr119, 0
  %210 = insertvalue %any %209, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %76, ptr %taddr120, align 8
  %211 = insertvalue %any undef, ptr %taddr120, 0
  %212 = insertvalue %any %211, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %210, ptr %varargslots121, align 16
  %ptradd122 = getelementptr inbounds i8, ptr %varargslots121, i64 16
  store %any %212, ptr %ptradd122, align 16
  %213 = insertvalue %"any[]" undef, ptr %varargslots121, 0
  %"$$temp123" = insertvalue %"any[]" %213, i64 2, 1
  store %"any[]" %"$$temp123", ptr %indirectarg124, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 47, ptr byval(%"any[]") align 8 %indirectarg124) #5, !dbg !851
  unreachable, !dbg !851

panic131:                                         ; preds = %checkok125
  store i64 %83, ptr %taddr132, align 8
  %214 = insertvalue %any undef, ptr %taddr132, 0
  %215 = insertvalue %any %214, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %215, ptr %varargslots133, align 16
  %216 = insertvalue %"any[]" undef, ptr %varargslots133, 0
  %"$$temp134" = insertvalue %"any[]" %216, i64 1, 1
  store %"any[]" %"$$temp134", ptr %indirectarg135, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 38, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 48, ptr byval(%"any[]") align 8 %indirectarg135) #5, !dbg !854
  unreachable, !dbg !854

panic138:                                         ; preds = %checkok136
  store i64 %81, ptr %taddr139, align 8
  %217 = insertvalue %any undef, ptr %taddr139, 0
  %218 = insertvalue %any %217, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %83, ptr %taddr140, align 8
  %219 = insertvalue %any undef, ptr %taddr140, 0
  %220 = insertvalue %any %219, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %218, ptr %varargslots141, align 16
  %ptradd142 = getelementptr inbounds i8, ptr %varargslots141, i64 16
  store %any %220, ptr %ptradd142, align 16
  %221 = insertvalue %"any[]" undef, ptr %varargslots141, 0
  %"$$temp143" = insertvalue %"any[]" %221, i64 2, 1
  store %"any[]" %"$$temp143", ptr %indirectarg144, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 48, ptr byval(%"any[]") align 8 %indirectarg144) #5, !dbg !854
  unreachable, !dbg !854

panic149:                                         ; preds = %checkok145
  store i64 %89, ptr %taddr150, align 8
  %222 = insertvalue %any undef, ptr %taddr150, 0
  %223 = insertvalue %any %222, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %223, ptr %varargslots151, align 16
  %224 = insertvalue %"any[]" undef, ptr %varargslots151, 0
  %"$$temp152" = insertvalue %"any[]" %224, i64 1, 1
  store %"any[]" %"$$temp152", ptr %indirectarg153, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 38, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 48, ptr byval(%"any[]") align 8 %indirectarg153) #5, !dbg !856
  unreachable, !dbg !856

panic156:                                         ; preds = %checkok154
  store i64 %87, ptr %taddr157, align 8
  %225 = insertvalue %any undef, ptr %taddr157, 0
  %226 = insertvalue %any %225, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %89, ptr %taddr158, align 8
  %227 = insertvalue %any undef, ptr %taddr158, 0
  %228 = insertvalue %any %227, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %226, ptr %varargslots159, align 16
  %ptradd160 = getelementptr inbounds i8, ptr %varargslots159, i64 16
  store %any %228, ptr %ptradd160, align 16
  %229 = insertvalue %"any[]" undef, ptr %varargslots159, 0
  %"$$temp161" = insertvalue %"any[]" %229, i64 2, 1
  store %"any[]" %"$$temp161", ptr %indirectarg162, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 48, ptr byval(%"any[]") align 8 %indirectarg162) #5, !dbg !856
  unreachable, !dbg !856

panic175:                                         ; preds = %loop.body171
  %230 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !866
  call void %230(ptr @.panic_msg.49, i64 10, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 54) #5, !dbg !866
  unreachable, !dbg !866

panic179:                                         ; preds = %checkok176
  store i64 %101, ptr %taddr180, align 8
  %231 = insertvalue %any undef, ptr %taddr180, 0
  %232 = insertvalue %any %231, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %232, ptr %varargslots181, align 16
  %233 = insertvalue %"any[]" undef, ptr %varargslots181, 0
  %"$$temp182" = insertvalue %"any[]" %233, i64 1, 1
  store %"any[]" %"$$temp182", ptr %indirectarg183, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 38, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 55, ptr byval(%"any[]") align 8 %indirectarg183) #5, !dbg !869
  unreachable, !dbg !869

panic186:                                         ; preds = %checkok184
  store i64 %99, ptr %taddr187, align 8
  %234 = insertvalue %any undef, ptr %taddr187, 0
  %235 = insertvalue %any %234, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %101, ptr %taddr188, align 8
  %236 = insertvalue %any undef, ptr %taddr188, 0
  %237 = insertvalue %any %236, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %235, ptr %varargslots189, align 16
  %ptradd190 = getelementptr inbounds i8, ptr %varargslots189, i64 16
  store %any %237, ptr %ptradd190, align 16
  %238 = insertvalue %"any[]" undef, ptr %varargslots189, 0
  %"$$temp191" = insertvalue %"any[]" %238, i64 2, 1
  store %"any[]" %"$$temp191", ptr %indirectarg192, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 55, ptr byval(%"any[]") align 8 %indirectarg192) #5, !dbg !869
  unreachable, !dbg !869

panic199:                                         ; preds = %checkok193
  %239 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !871
  call void %239(ptr @.panic_msg.49, i64 10, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 55) #5, !dbg !871
  unreachable, !dbg !871

panic203:                                         ; preds = %checkok200
  store i64 %smod201, ptr %taddr204, align 8
  %240 = insertvalue %any undef, ptr %taddr204, 0
  %241 = insertvalue %any %240, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %241, ptr %varargslots205, align 16
  %242 = insertvalue %"any[]" undef, ptr %varargslots205, 0
  %"$$temp206" = insertvalue %"any[]" %242, i64 1, 1
  store %"any[]" %"$$temp206", ptr %indirectarg207, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 38, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 55, ptr byval(%"any[]") align 8 %indirectarg207) #5, !dbg !871
  unreachable, !dbg !871

panic210:                                         ; preds = %checkok208
  store i64 %105, ptr %taddr211, align 8
  %243 = insertvalue %any undef, ptr %taddr211, 0
  %244 = insertvalue %any %243, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %smod201, ptr %taddr212, align 8
  %245 = insertvalue %any undef, ptr %taddr212, 0
  %246 = insertvalue %any %245, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %244, ptr %varargslots213, align 16
  %ptradd214 = getelementptr inbounds i8, ptr %varargslots213, i64 16
  store %any %246, ptr %ptradd214, align 16
  %247 = insertvalue %"any[]" undef, ptr %varargslots213, 0
  %"$$temp215" = insertvalue %"any[]" %247, i64 2, 1
  store %"any[]" %"$$temp215", ptr %indirectarg216, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 55, ptr byval(%"any[]") align 8 %indirectarg216) #5, !dbg !871
  unreachable, !dbg !871

panic223:                                         ; preds = %checkok217
  store i64 %115, ptr %taddr224, align 8
  %248 = insertvalue %any undef, ptr %taddr224, 0
  %249 = insertvalue %any %248, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %249, ptr %varargslots225, align 16
  %250 = insertvalue %"any[]" undef, ptr %varargslots225, 0
  %"$$temp226" = insertvalue %"any[]" %250, i64 1, 1
  store %"any[]" %"$$temp226", ptr %indirectarg227, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 38, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 56, ptr byval(%"any[]") align 8 %indirectarg227) #5, !dbg !874
  unreachable, !dbg !874

panic230:                                         ; preds = %checkok228
  store i64 %113, ptr %taddr231, align 8
  %251 = insertvalue %any undef, ptr %taddr231, 0
  %252 = insertvalue %any %251, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %115, ptr %taddr232, align 8
  %253 = insertvalue %any undef, ptr %taddr232, 0
  %254 = insertvalue %any %253, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %252, ptr %varargslots233, align 16
  %ptradd234 = getelementptr inbounds i8, ptr %varargslots233, i64 16
  store %any %254, ptr %ptradd234, align 16
  %255 = insertvalue %"any[]" undef, ptr %varargslots233, 0
  %"$$temp235" = insertvalue %"any[]" %255, i64 2, 1
  store %"any[]" %"$$temp235", ptr %indirectarg236, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 56, ptr byval(%"any[]") align 8 %indirectarg236) #5, !dbg !874
  unreachable, !dbg !874

panic241:                                         ; preds = %checkok237
  store i64 %121, ptr %taddr242, align 8
  %256 = insertvalue %any undef, ptr %taddr242, 0
  %257 = insertvalue %any %256, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %257, ptr %varargslots243, align 16
  %258 = insertvalue %"any[]" undef, ptr %varargslots243, 0
  %"$$temp244" = insertvalue %"any[]" %258, i64 1, 1
  store %"any[]" %"$$temp244", ptr %indirectarg245, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 38, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 56, ptr byval(%"any[]") align 8 %indirectarg245) #5, !dbg !876
  unreachable, !dbg !876

panic248:                                         ; preds = %checkok246
  store i64 %119, ptr %taddr249, align 8
  %259 = insertvalue %any undef, ptr %taddr249, 0
  %260 = insertvalue %any %259, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %121, ptr %taddr250, align 8
  %261 = insertvalue %any undef, ptr %taddr250, 0
  %262 = insertvalue %any %261, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %260, ptr %varargslots251, align 16
  %ptradd252 = getelementptr inbounds i8, ptr %varargslots251, i64 16
  store %any %262, ptr %ptradd252, align 16
  %263 = insertvalue %"any[]" undef, ptr %varargslots251, 0
  %"$$temp253" = insertvalue %"any[]" %263, i64 2, 1
  store %"any[]" %"$$temp253", ptr %indirectarg254, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 56, ptr byval(%"any[]") align 8 %indirectarg254) #5, !dbg !876
  unreachable, !dbg !876

panic268:                                         ; preds = %loop.body264
  %264 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !887
  call void %264(ptr @.panic_msg.49, i64 10, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 62) #5, !dbg !887
  unreachable, !dbg !887

panic273:                                         ; preds = %checkok269
  store i64 %132, ptr %taddr274, align 8
  %265 = insertvalue %any undef, ptr %taddr274, 0
  %266 = insertvalue %any %265, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %134, ptr %taddr275, align 8
  %267 = insertvalue %any undef, ptr %taddr275, 0
  %268 = insertvalue %any %267, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %266, ptr %varargslots276, align 16
  %ptradd277 = getelementptr inbounds i8, ptr %varargslots276, i64 16
  store %any %268, ptr %ptradd277, align 16
  %269 = insertvalue %"any[]" undef, ptr %varargslots276, 0
  %"$$temp278" = insertvalue %"any[]" %269, i64 2, 1
  store %"any[]" %"$$temp278", ptr %indirectarg279, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 63, ptr byval(%"any[]") align 8 %indirectarg279) #5, !dbg !890
  unreachable, !dbg !890

panic285:                                         ; preds = %checkok280
  store i64 %137, ptr %taddr286, align 8
  %270 = insertvalue %any undef, ptr %taddr286, 0
  %271 = insertvalue %any %270, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %139, ptr %taddr287, align 8
  %272 = insertvalue %any undef, ptr %taddr287, 0
  %273 = insertvalue %any %272, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %271, ptr %varargslots288, align 16
  %ptradd289 = getelementptr inbounds i8, ptr %varargslots288, i64 16
  store %any %273, ptr %ptradd289, align 16
  %274 = insertvalue %"any[]" undef, ptr %varargslots288, 0
  %"$$temp290" = insertvalue %"any[]" %274, i64 2, 1
  store %"any[]" %"$$temp290", ptr %indirectarg291, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 64, ptr byval(%"any[]") align 8 %indirectarg291) #5, !dbg !892
  unreachable, !dbg !892

panic296:                                         ; preds = %checkok292
  store i64 %142, ptr %taddr297, align 8
  %275 = insertvalue %any undef, ptr %taddr297, 0
  %276 = insertvalue %any %275, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %144, ptr %taddr298, align 8
  %277 = insertvalue %any undef, ptr %taddr298, 0
  %278 = insertvalue %any %277, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %276, ptr %varargslots299, align 16
  %ptradd300 = getelementptr inbounds i8, ptr %varargslots299, i64 16
  store %any %278, ptr %ptradd300, align 16
  %279 = insertvalue %"any[]" undef, ptr %varargslots299, 0
  %"$$temp301" = insertvalue %"any[]" %279, i64 2, 1
  store %"any[]" %"$$temp301", ptr %indirectarg302, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 64, ptr byval(%"any[]") align 8 %indirectarg302) #5, !dbg !894
  unreachable, !dbg !894

panic313:                                         ; preds = %loop.exit308
  store i64 %sub312, ptr %taddr314, align 8
  %280 = insertvalue %any undef, ptr %taddr314, 0
  %281 = insertvalue %any %280, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %281, ptr %varargslots315, align 16
  %282 = insertvalue %"any[]" undef, ptr %varargslots315, 0
  %"$$temp316" = insertvalue %"any[]" %282, i64 1, 1
  store %"any[]" %"$$temp316", ptr %indirectarg317, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 66, ptr byval(%"any[]") align 8 %indirectarg317) #5, !dbg !898
  unreachable, !dbg !898

panic321:                                         ; preds = %checkok318
  store i64 %157, ptr %taddr322, align 8
  %283 = insertvalue %any undef, ptr %taddr322, 0
  %284 = insertvalue %any %283, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr323, align 8
  %285 = insertvalue %any undef, ptr %taddr323, 0
  %286 = insertvalue %any %285, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %284, ptr %varargslots324, align 16
  %ptradd325 = getelementptr inbounds i8, ptr %varargslots324, i64 16
  store %any %286, ptr %ptradd325, align 16
  %287 = insertvalue %"any[]" undef, ptr %varargslots324, 0
  %"$$temp326" = insertvalue %"any[]" %287, i64 2, 1
  store %"any[]" %"$$temp326", ptr %indirectarg327, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 66, ptr byval(%"any[]") align 8 %indirectarg327) #5, !dbg !899
  unreachable, !dbg !899

panic331:                                         ; preds = %checkok328
  store i64 %164, ptr %taddr332, align 8
  %288 = insertvalue %any undef, ptr %taddr332, 0
  %289 = insertvalue %any %288, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %163, ptr %taddr333, align 8
  %290 = insertvalue %any undef, ptr %taddr333, 0
  %291 = insertvalue %any %290, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %289, ptr %varargslots334, align 16
  %ptradd335 = getelementptr inbounds i8, ptr %varargslots334, i64 16
  store %any %291, ptr %ptradd335, align 16
  %292 = insertvalue %"any[]" undef, ptr %varargslots334, 0
  %"$$temp336" = insertvalue %"any[]" %292, i64 2, 1
  store %"any[]" %"$$temp336", ptr %indirectarg337, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file.48, i64 14, ptr @.func.47, i64 6, i32 66, ptr byval(%"any[]") align 8 %indirectarg337) #5, !dbg !899
  unreachable, !dbg !899
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.entropy(ptr noalias sret([32 x i8]) align 1 %0) #0 comdat !dbg !905 {
entry:
  %addr = alloca ptr, align 8
  %entropy_data = alloca [8 x i32], align 16
  %value = alloca %"char[]", align 8
  %expr = alloca %"char[]", align 8
  %value1 = alloca ptr, align 8
  %expr2 = alloca ptr, align 8
  %value7 = alloca ptr, align 8
  %expr8 = alloca ptr, align 8
  %value13 = alloca ptr, align 8
  %expr14 = alloca ptr, align 8
  %value20 = alloca i64, align 8
  %expr21 = alloca i64, align 8
  %value26 = alloca ptr, align 8
  %expr27 = alloca ptr, align 8
  %value32 = alloca %any, align 8
  %expr33 = alloca %any, align 8
  %expr37 = alloca [8 x i32], align 16
    #dbg_declare(ptr %addr, !911, !DIExpression(), !912)
  %1 = call ptr @std.core.mem.malloc(i64 1) #6, !dbg !913
  store ptr %1, ptr %addr, align 8, !dbg !913
  %2 = load ptr, ptr %addr, align 8, !dbg !914
  call void @std.core.mem.free(ptr %2) #6, !dbg !915
  %3 = load i32, ptr @entropy.random_int, align 4, !dbg !916
  %add = add i32 %3, -302935722, !dbg !916
  store i32 %add, ptr @entropy.random_int, align 4, !dbg !916
    #dbg_declare(ptr %entropy_data, !917, !DIExpression(), !921)
  store %"char[]" { ptr @.str.56, i64 8 }, ptr %value, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr, ptr align 8 %value, i32 16, i1 false)
  %checknull = icmp eq ptr %expr, null, !dbg !922
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !922
  br i1 %4, label %panic, label %checkok, !dbg !922

checkok:                                          ; preds = %entry
  %5 = insertvalue %"char[]" undef, ptr %expr, 0, !dbg !927
  %6 = insertvalue %"char[]" %5, i64 16, 1, !dbg !927
  %7 = call i32 @std.hash.fnv32a.hash(ptr %expr, i64 16), !dbg !928
  store i32 %7, ptr %entropy_data, align 4, !dbg !928
  %ptradd = getelementptr inbounds i8, ptr %entropy_data, i64 4, !dbg !928
  %8 = load ptr, ptr %addr, align 8
  store ptr %8, ptr %value1, align 8
  %9 = load ptr, ptr %value1, align 8
  store ptr %9, ptr %expr2, align 8
  %checknull3 = icmp eq ptr %expr2, null, !dbg !929
  %10 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !929
  br i1 %10, label %panic4, label %checkok5, !dbg !929

checkok5:                                         ; preds = %checkok
  %11 = insertvalue %"char[]" undef, ptr %expr2, 0, !dbg !934
  %12 = insertvalue %"char[]" %11, i64 8, 1, !dbg !934
  %13 = call i32 @std.hash.fnv32a.hash(ptr %expr2, i64 8), !dbg !935
  store i32 %13, ptr %ptradd, align 4, !dbg !935
  %ptradd6 = getelementptr inbounds i8, ptr %entropy_data, i64 8, !dbg !935
  store ptr %addr, ptr %value7, align 8
  %14 = load ptr, ptr %value7, align 8
  store ptr %14, ptr %expr8, align 8
  %checknull9 = icmp eq ptr %expr8, null, !dbg !936
  %15 = call i1 @llvm.expect.i1(i1 %checknull9, i1 false), !dbg !936
  br i1 %15, label %panic10, label %checkok11, !dbg !936

checkok11:                                        ; preds = %checkok5
  %16 = insertvalue %"char[]" undef, ptr %expr8, 0, !dbg !941
  %17 = insertvalue %"char[]" %16, i64 8, 1, !dbg !941
  %18 = call i32 @std.hash.fnv32a.hash(ptr %expr8, i64 8), !dbg !942
  store i32 %18, ptr %ptradd6, align 4, !dbg !942
  %ptradd12 = getelementptr inbounds i8, ptr %entropy_data, i64 12, !dbg !942
  store ptr @std.math.random.entropy, ptr %value13, align 8
  %19 = load ptr, ptr %value13, align 8
  store ptr %19, ptr %expr14, align 8
  %checknull15 = icmp eq ptr %expr14, null, !dbg !943
  %20 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !943
  br i1 %20, label %panic16, label %checkok17, !dbg !943

checkok17:                                        ; preds = %checkok11
  %21 = insertvalue %"char[]" undef, ptr %expr14, 0, !dbg !948
  %22 = insertvalue %"char[]" %21, i64 8, 1, !dbg !948
  %23 = call i32 @std.hash.fnv32a.hash(ptr %expr14, i64 8), !dbg !949
  store i32 %23, ptr %ptradd12, align 4, !dbg !949
  %ptradd18 = getelementptr inbounds i8, ptr %entropy_data, i64 16, !dbg !949
  %24 = load i32, ptr @entropy.random_int, align 4, !dbg !950
  store i32 %24, ptr %ptradd18, align 4, !dbg !950
  %ptradd19 = getelementptr inbounds i8, ptr %entropy_data, i64 20, !dbg !950
  %25 = call i64 @std.time.clock.now(), !dbg !951
  store i64 %25, ptr %value20, align 8
  %26 = load i64, ptr %value20, align 8
  store i64 %26, ptr %expr21, align 8
  %checknull22 = icmp eq ptr %expr21, null, !dbg !952
  %27 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !952
  br i1 %27, label %panic23, label %checkok24, !dbg !952

checkok24:                                        ; preds = %checkok17
  %28 = insertvalue %"char[]" undef, ptr %expr21, 0, !dbg !957
  %29 = insertvalue %"char[]" %28, i64 8, 1, !dbg !957
  %30 = call i32 @std.hash.fnv32a.hash(ptr %expr21, i64 8), !dbg !958
  store i32 %30, ptr %ptradd19, align 4, !dbg !958
  %ptradd25 = getelementptr inbounds i8, ptr %entropy_data, i64 24, !dbg !958
  store ptr @std.core.dstring.DString.init, ptr %value26, align 8
  %31 = load ptr, ptr %value26, align 8
  store ptr %31, ptr %expr27, align 8
  %checknull28 = icmp eq ptr %expr27, null, !dbg !959
  %32 = call i1 @llvm.expect.i1(i1 %checknull28, i1 false), !dbg !959
  br i1 %32, label %panic29, label %checkok30, !dbg !959

checkok30:                                        ; preds = %checkok24
  %33 = insertvalue %"char[]" undef, ptr %expr27, 0, !dbg !964
  %34 = insertvalue %"char[]" %33, i64 8, 1, !dbg !964
  %35 = call i32 @std.hash.fnv32a.hash(ptr %expr27, i64 8), !dbg !965
  store i32 %35, ptr %ptradd25, align 4, !dbg !965
  %ptradd31 = getelementptr inbounds i8, ptr %entropy_data, i64 28, !dbg !965
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value32, ptr align 8 @std.core.mem.allocator.thread_allocator, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr33, ptr align 8 %value32, i32 16, i1 false)
  %checknull34 = icmp eq ptr %expr33, null, !dbg !966
  %36 = call i1 @llvm.expect.i1(i1 %checknull34, i1 false), !dbg !966
  br i1 %36, label %panic35, label %checkok36, !dbg !966

checkok36:                                        ; preds = %checkok30
  %37 = insertvalue %"char[]" undef, ptr %expr33, 0, !dbg !971
  %38 = insertvalue %"char[]" %37, i64 16, 1, !dbg !971
  %39 = call i32 @std.hash.fnv32a.hash(ptr %expr33, i64 16), !dbg !972
  store i32 %39, ptr %ptradd31, align 4, !dbg !972
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr37, ptr align 16 %entropy_data, i32 32, i1 false)
  %checknull38 = icmp eq ptr %expr37, null, !dbg !973
  %40 = call i1 @llvm.expect.i1(i1 %checknull38, i1 false), !dbg !973
  br i1 %40, label %panic39, label %checkok40, !dbg !973

checkok40:                                        ; preds = %checkok36
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %expr37, i32 32, i1 false), !dbg !976
  ret void, !dbg !976

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !927
  call void %41(ptr @.panic_msg.52, i64 42, ptr @.file.57, i64 10, ptr @.func.58, i64 7, i32 254) #5, !dbg !927
  unreachable, !dbg !927

panic4:                                           ; preds = %checkok
  %42 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !934
  call void %42(ptr @.panic_msg.52, i64 42, ptr @.file.57, i64 10, ptr @.func.58, i64 7, i32 254) #5, !dbg !934
  unreachable, !dbg !934

panic10:                                          ; preds = %checkok5
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !941
  call void %43(ptr @.panic_msg.52, i64 42, ptr @.file.57, i64 10, ptr @.func.58, i64 7, i32 254) #5, !dbg !941
  unreachable, !dbg !941

panic16:                                          ; preds = %checkok11
  %44 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !948
  call void %44(ptr @.panic_msg.52, i64 42, ptr @.file.57, i64 10, ptr @.func.58, i64 7, i32 254) #5, !dbg !948
  unreachable, !dbg !948

panic23:                                          ; preds = %checkok17
  %45 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !957
  call void %45(ptr @.panic_msg.52, i64 42, ptr @.file.57, i64 10, ptr @.func.58, i64 7, i32 254) #5, !dbg !957
  unreachable, !dbg !957

panic29:                                          ; preds = %checkok24
  %46 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !964
  call void %46(ptr @.panic_msg.52, i64 42, ptr @.file.57, i64 10, ptr @.func.58, i64 7, i32 254) #5, !dbg !964
  unreachable, !dbg !964

panic35:                                          ; preds = %checkok30
  %47 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !971
  call void %47(ptr @.panic_msg.52, i64 42, ptr @.file.57, i64 10, ptr @.func.58, i64 7, i32 254) #5, !dbg !971
  unreachable, !dbg !971

panic39:                                          ; preds = %checkok36
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !976
  call void %48(ptr @.panic_msg.52, i64 42, ptr @.file.57, i64 10, ptr @.func.58, i64 7, i32 254) #5, !dbg !976
  unreachable, !dbg !976
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !977 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i128], align 16
  %taddr8 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !983
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !983
  br i1 %4, label %panic, label %checkok, !dbg !983

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !984, !DIExpression(), !985)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !986, !DIExpression(), !987)
  %5 = load ptr, ptr %self, align 8, !dbg !988
  %checknull = icmp eq ptr %5, null, !dbg !988
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !988
  br i1 %6, label %panic1, label %checkok2, !dbg !988

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !988
  %8 = urem i64 %7, 16, !dbg !988
  %9 = icmp ne i64 %8, 0, !dbg !988
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !988
  br i1 %10, label %panic3, label %checkok6, !dbg !988

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !989, !DIExpression(), !991)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 64, i1 false), !dbg !991
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 64, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 64), !dbg !993
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %5, ptr align 16 %return_value, i32 64, i1 false), !dbg !994
  ret void, !dbg !994

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !985
  call void %14(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.16, i64 8, i32 15) #5, !dbg !985
  unreachable, !dbg !985

panic1:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !988
  call void %15(ptr @.panic_msg.17, i64 45, ptr @.file.67, i64 11, ptr @.func.16, i64 8, i32 17) #5, !dbg !988
  unreachable, !dbg !988

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %18 = insertvalue %any undef, ptr %taddr4, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd5, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.67, i64 11, ptr @.func.16, i64 8, i32 17, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !988
  unreachable, !dbg !988
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %0) #0 comdat !dbg !995 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i128, align 16
  %self11 = alloca i128, align 16
  %shift = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !998
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !998
  br i1 %2, label %panic, label %checkok, !dbg !998

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !999, !DIExpression(), !1000)
    #dbg_declare(ptr %s, !1001, !DIExpression(), !1002)
  %3 = load ptr, ptr %self, align 8, !dbg !1003
  store ptr %3, ptr %s, align 8, !dbg !1003
    #dbg_declare(ptr %result, !1004, !DIExpression(), !1005)
  %4 = load ptr, ptr %s, align 8, !dbg !1006
  %5 = load i128, ptr %4, align 16, !dbg !1007
  %6 = load ptr, ptr %s, align 8, !dbg !1008
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1009
  %7 = load i128, ptr %ptradd, align 16, !dbg !1009
  %add = add i128 %5, %7, !dbg !1006
  %8 = load ptr, ptr %s, align 8, !dbg !1010
  %ptradd1 = getelementptr inbounds i8, ptr %8, i64 48, !dbg !1011
  %9 = load i128, ptr %ptradd1, align 16, !dbg !1011
  %add2 = add i128 %add, %9, !dbg !1006
  store i128 %add2, ptr %result, align 16, !dbg !1006
  %10 = load ptr, ptr %s, align 8, !dbg !1012
  %11 = load ptr, ptr %s, align 8, !dbg !1013
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !1014
  %12 = load i128, ptr %ptradd3, align 16, !dbg !1014
  %13 = load ptr, ptr %s, align 8, !dbg !1015
  %ptradd4 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !1016
  %14 = load i128, ptr %ptradd4, align 16, !dbg !1016
  %lshr = lshr i128 %14, 11, !dbg !1015
  %15 = freeze i128 %lshr, !dbg !1015
  %xor = xor i128 %12, %15, !dbg !1013
  store i128 %xor, ptr %10, align 16, !dbg !1013
  %16 = load ptr, ptr %s, align 8, !dbg !1017
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1018
  %17 = load ptr, ptr %s, align 8, !dbg !1019
  %ptradd6 = getelementptr inbounds i8, ptr %17, i64 32, !dbg !1020
  %18 = load i128, ptr %ptradd6, align 16, !dbg !1020
  %19 = load ptr, ptr %s, align 8, !dbg !1021
  %ptradd7 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !1022
  %20 = load i128, ptr %ptradd7, align 16, !dbg !1022
  %shl = shl i128 %20, 3, !dbg !1021
  %21 = freeze i128 %shl, !dbg !1021
  %add8 = add i128 %18, %21, !dbg !1019
  store i128 %add8, ptr %ptradd5, align 16, !dbg !1019
  %22 = load ptr, ptr %s, align 8, !dbg !1023
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 32, !dbg !1024
  %23 = load ptr, ptr %s, align 8, !dbg !1025
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !1026
  %24 = load i128, ptr %ptradd10, align 16
  store i128 %24, ptr %self11, align 16
  store i128 40, ptr %shift, align 16
  %25 = load i128, ptr %self11, align 16, !dbg !1027
  %26 = load i128, ptr %self11, align 16, !dbg !1029
  %27 = load i128, ptr %shift, align 16, !dbg !1030
  %28 = call i128 @llvm.fshr.i128(i128 %25, i128 %26, i128 %27), !dbg !1030
  %29 = load i128, ptr %result, align 16, !dbg !1031
  %add12 = add i128 %28, %29, !dbg !1025
  store i128 %add12, ptr %ptradd9, align 16, !dbg !1025
  %30 = load ptr, ptr %s, align 8, !dbg !1032
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 48, !dbg !1033
  %31 = load i128, ptr %ptradd13, align 16, !dbg !1033
  %add14 = add i128 %31, -129976298391535590297638237547755878347, !dbg !1032
  store i128 %add14, ptr %ptradd13, align 16, !dbg !1032
  %32 = load { i64, i64 }, ptr %result, align 16, !dbg !1034
  ret { i64, i64 } %32, !dbg !1034

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1000
  call void %33(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.29, i64 11, i32 20) #5, !dbg !1000
  unreachable, !dbg !1000
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1035 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i128, align 16
  %result = alloca i128, align 16
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1036
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1036
  br i1 %4, label %panic, label %checkok, !dbg !1036

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1037, !DIExpression(), !1038)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1039, !DIExpression(), !1040)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1041
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1041
  %lt = icmp ult i64 0, %5, !dbg !1041
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1041

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1041
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.67, i64 11, ptr @.func.21, i64 10, i32 32) #5, !dbg !1041
  unreachable, !dbg !1041

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1043, !DIExpression(), !1045)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1046
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1046
  store i64 %7, ptr %len, align 8, !dbg !1046
  br label %loop.cond, !dbg !1047

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1048
  %lt4 = icmp ult i64 0, %8, !dbg !1048
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1048

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1050, !DIExpression(), !1052)
  %9 = load ptr, ptr %self, align 8, !dbg !1053
  %10 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %9), !dbg !1054
  store { i64, i64 } %10, ptr %result, align 16
  %11 = load i128, ptr %result, align 16
  store i128 %11, ptr %value, align 16
  %12 = load i64, ptr %len, align 8, !dbg !1055
  %le = icmp ule i64 %12, 16, !dbg !1055
  br i1 %le, label %if.then, label %if.exit, !dbg !1055

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %13 = load ptr, ptr %taddr, align 8
  %14 = load i64, ptr %len, align 8, !dbg !1056
  %add = add i64 0, %14, !dbg !1056
  %gt = icmp ugt i64 0, %add, !dbg !1056
  %sub = sub i64 %add, 0, !dbg !1056
  %15 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1056
  br i1 %15, label %panic5, label %checkok7, !dbg !1056

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1058
  %16 = insertvalue %"char[]" undef, ptr %13, 0, !dbg !1058
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !1058
  %18 = load %"char[]", ptr %bytes2, align 8, !dbg !1059
  %19 = extractvalue %"char[]" %18, 0, !dbg !1059
  %20 = extractvalue %"char[]" %18, 1, !dbg !1060
  %gt8 = icmp ugt i64 0, %20, !dbg !1060
  %21 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !1060
  br i1 %21, label %panic9, label %checkok16, !dbg !1060

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %20, 0, !dbg !1059
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !1059
  %23 = insertvalue %"char[]" %22, i64 %size17, 1, !dbg !1059
  %24 = extractvalue %"char[]" %23, 0, !dbg !1059
  %25 = extractvalue %"char[]" %17, 0, !dbg !1059
  %26 = extractvalue %"char[]" %17, 1, !dbg !1059
  %27 = extractvalue %"char[]" %23, 1, !dbg !1059
  %neq = icmp ne i64 %27, %26, !dbg !1059
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1059
  br i1 %28, label %panic18, label %checkok25, !dbg !1059

checkok25:                                        ; preds = %checkok16
  %29 = mul i64 %26, 1, !dbg !1059
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !1059
  br label %expr_block.exit, !dbg !1061

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %30 = load ptr, ptr %taddr26, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 16, 1
  %33 = load %"char[]", ptr %bytes2, align 8, !dbg !1062
  %34 = extractvalue %"char[]" %33, 0, !dbg !1062
  %35 = extractvalue %"char[]" %33, 1, !dbg !1062
  %gt27 = icmp sgt i64 0, %35, !dbg !1062
  %36 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !1062
  br i1 %36, label %panic28, label %checkok35, !dbg !1062

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %35, 16, !dbg !1062
  %37 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !1062
  br i1 %37, label %panic37, label %checkok44, !dbg !1062

checkok44:                                        ; preds = %checkok35
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !1062
  %39 = insertvalue %"char[]" %38, i64 16, 1, !dbg !1062
  %40 = extractvalue %"char[]" %39, 0, !dbg !1062
  %41 = extractvalue %"char[]" %32, 0, !dbg !1062
  %42 = extractvalue %"char[]" %32, 1, !dbg !1062
  %43 = extractvalue %"char[]" %39, 1, !dbg !1062
  %neq45 = icmp ne i64 %43, %42, !dbg !1062
  %44 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !1062
  br i1 %44, label %panic46, label %checkok53, !dbg !1062

checkok53:                                        ; preds = %checkok44
  %45 = mul i64 %42, 1, !dbg !1062
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !1062
  %46 = load i64, ptr %len, align 8, !dbg !1063
  %sub54 = sub i64 %46, 16, !dbg !1063
  store i64 %sub54, ptr %len, align 8, !dbg !1063
  %47 = load %"char[]", ptr %bytes2, align 8, !dbg !1064
  %48 = extractvalue %"char[]" %47, 0, !dbg !1064
  %49 = extractvalue %"char[]" %47, 1, !dbg !1065
  %gt55 = icmp ugt i64 16, %49, !dbg !1065
  %50 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !1065
  br i1 %50, label %panic56, label %checkok63, !dbg !1065

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %49, 16, !dbg !1064
  %ptradd65 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !1064
  %51 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !1064
  %52 = insertvalue %"char[]" %51, i64 %size64, 1, !dbg !1064
  store %"char[]" %52, ptr %bytes2, align 8, !dbg !1064
  br label %loop.cond, !dbg !1064

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.68, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1066
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1066
  %hi = load i64, ptr %ptradd66, align 8, !dbg !1066
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.69, i64 11, ptr @.str.70, i64 23, i32 34, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !1069
  unreachable, !dbg !1070

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !1070

panic:                                            ; preds = %entry
  %53 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1038
  call void %53(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.21, i64 10, i32 34) #5, !dbg !1038
  unreachable, !dbg !1038

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %54 = insertvalue %any undef, ptr %taddr6, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %55, ptr %varargslots, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1058
  unreachable, !dbg !1058

panic9:                                           ; preds = %checkok7
  store i64 %20, ptr %taddr10, align 8
  %57 = insertvalue %any undef, ptr %taddr10, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %59 = insertvalue %any undef, ptr %taddr11, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %60, ptr %ptradd13, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1059
  unreachable, !dbg !1059

panic18:                                          ; preds = %checkok16
  store i64 %27, ptr %taddr19, align 8
  %62 = insertvalue %any undef, ptr %taddr19, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr20, align 8
  %64 = insertvalue %any undef, ptr %taddr20, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %63, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %65, ptr %ptradd22, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !1059
  unreachable, !dbg !1059

panic28:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr29, align 8
  %67 = insertvalue %any undef, ptr %taddr29, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %69 = insertvalue %any undef, ptr %taddr30, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %70, ptr %ptradd32, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !1062
  unreachable, !dbg !1062

panic37:                                          ; preds = %checkok35
  store i64 15, ptr %taddr38, align 8
  %72 = insertvalue %any undef, ptr %taddr38, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr39, align 8
  %74 = insertvalue %any undef, ptr %taddr39, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %73, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %75, ptr %ptradd41, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !1062
  unreachable, !dbg !1062

panic46:                                          ; preds = %checkok44
  store i64 %43, ptr %taddr47, align 8
  %77 = insertvalue %any undef, ptr %taddr47, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr48, align 8
  %79 = insertvalue %any undef, ptr %taddr48, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %80, ptr %ptradd50, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !1062
  unreachable, !dbg !1062

panic56:                                          ; preds = %checkok53
  store i64 %49, ptr %taddr57, align 8
  %82 = insertvalue %any undef, ptr %taddr57, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 16, ptr %taddr58, align 8
  %84 = insertvalue %any undef, ptr %taddr58, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %83, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %85, ptr %ptradd60, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !1064
  unreachable, !dbg !1064
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc128Random.next_long(ptr %0) #0 comdat !dbg !1071 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1074
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1074
  br i1 %2, label %panic, label %checkok, !dbg !1074

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1075, !DIExpression(), !1076)
  %3 = load ptr, ptr %self, align 8, !dbg !1077
  %4 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1074
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  %zext = zext i32 %trunc to i64
  ret i64 %zext

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1076
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.19, i64 9, i32 35) #5, !dbg !1076
  unreachable, !dbg !1076
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc128Random.next_int(ptr %0) #0 comdat !dbg !1078 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1081
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1081
  br i1 %2, label %panic, label %checkok, !dbg !1081

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1082, !DIExpression(), !1083)
  %3 = load ptr, ptr %self, align 8, !dbg !1084
  %4 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1081
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  ret i32 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1083
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.30, i64 8, i32 36) #5, !dbg !1083
  unreachable, !dbg !1083
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc128Random.next_short(ptr %0) #0 comdat !dbg !1085 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1088
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1088
  br i1 %2, label %panic, label %checkok, !dbg !1088

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1089, !DIExpression(), !1090)
  %3 = load ptr, ptr %self, align 8, !dbg !1091
  %4 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1088
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i16
  ret i16 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1090
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.31, i64 10, i32 37) #5, !dbg !1090
  unreachable, !dbg !1090
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc128Random.next_byte(ptr %0) #0 comdat !dbg !1092 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1095
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1095
  br i1 %2, label %panic, label %checkok, !dbg !1095

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1096, !DIExpression(), !1097)
  %3 = load ptr, ptr %self, align 8, !dbg !1098
  %4 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1095
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i8
  ret i8 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1097
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.32, i64 9, i32 38) #5, !dbg !1097
  unreachable, !dbg !1097
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1099 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i64], align 16
  %taddr8 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1103
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1103
  br i1 %4, label %panic, label %checkok, !dbg !1103

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1104, !DIExpression(), !1105)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !1106, !DIExpression(), !1107)
  %5 = load ptr, ptr %self, align 8, !dbg !1108
  %checknull = icmp eq ptr %5, null, !dbg !1108
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1108
  br i1 %6, label %panic1, label %checkok2, !dbg !1108

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1108
  %8 = urem i64 %7, 8, !dbg !1108
  %9 = icmp ne i64 %8, 0, !dbg !1108
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1108
  br i1 %10, label %panic3, label %checkok6, !dbg !1108

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1109, !DIExpression(), !1111)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 32, i1 false), !dbg !1111
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 32, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 32), !dbg !1113
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 16 %return_value, i32 32, i1 false), !dbg !1114
  ret void, !dbg !1114

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1105
  call void %14(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.16, i64 8, i32 45) #5, !dbg !1105
  unreachable, !dbg !1105

panic1:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1108
  call void %15(ptr @.panic_msg.17, i64 45, ptr @.file.67, i64 11, ptr @.func.16, i64 8, i32 47) #5, !dbg !1108
  unreachable, !dbg !1108

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %18 = insertvalue %any undef, ptr %taddr4, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd5, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.67, i64 11, ptr @.func.16, i64 8, i32 47, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1108
  unreachable, !dbg !1108
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc64Random.next_long(ptr %0) #0 comdat !dbg !1115 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %self11 = alloca i64, align 8
  %shift = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !1118
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1118
  br i1 %2, label %panic, label %checkok, !dbg !1118

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1119, !DIExpression(), !1120)
    #dbg_declare(ptr %s, !1121, !DIExpression(), !1122)
  %3 = load ptr, ptr %self, align 8, !dbg !1123
  store ptr %3, ptr %s, align 8, !dbg !1123
    #dbg_declare(ptr %result, !1124, !DIExpression(), !1125)
  %4 = load ptr, ptr %s, align 8, !dbg !1126
  %5 = load i64, ptr %4, align 8, !dbg !1127
  %6 = load ptr, ptr %s, align 8, !dbg !1128
  %ptradd = getelementptr inbounds i8, ptr %6, i64 8, !dbg !1129
  %7 = load i64, ptr %ptradd, align 8, !dbg !1129
  %add = add i64 %5, %7, !dbg !1126
  %8 = load ptr, ptr %s, align 8, !dbg !1130
  %ptradd1 = getelementptr inbounds i8, ptr %8, i64 24, !dbg !1131
  %9 = load i64, ptr %ptradd1, align 8, !dbg !1131
  %add2 = add i64 %add, %9, !dbg !1126
  store i64 %add2, ptr %result, align 8, !dbg !1126
  %10 = load ptr, ptr %s, align 8, !dbg !1132
  %11 = load ptr, ptr %s, align 8, !dbg !1133
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !1134
  %12 = load i64, ptr %ptradd3, align 8, !dbg !1134
  %13 = load ptr, ptr %s, align 8, !dbg !1135
  %ptradd4 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !1136
  %14 = load i64, ptr %ptradd4, align 8, !dbg !1136
  %lshr = lshr i64 %14, 11, !dbg !1135
  %15 = freeze i64 %lshr, !dbg !1135
  %xor = xor i64 %12, %15, !dbg !1133
  store i64 %xor, ptr %10, align 8, !dbg !1133
  %16 = load ptr, ptr %s, align 8, !dbg !1137
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !1138
  %17 = load ptr, ptr %s, align 8, !dbg !1139
  %ptradd6 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !1140
  %18 = load i64, ptr %ptradd6, align 8, !dbg !1140
  %19 = load ptr, ptr %s, align 8, !dbg !1141
  %ptradd7 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !1142
  %20 = load i64, ptr %ptradd7, align 8, !dbg !1142
  %shl = shl i64 %20, 3, !dbg !1141
  %21 = freeze i64 %shl, !dbg !1141
  %add8 = add i64 %18, %21, !dbg !1139
  store i64 %add8, ptr %ptradd5, align 8, !dbg !1139
  %22 = load ptr, ptr %s, align 8, !dbg !1143
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !1144
  %23 = load ptr, ptr %s, align 8, !dbg !1145
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !1146
  %24 = load i64, ptr %ptradd10, align 8
  store i64 %24, ptr %self11, align 8
  store i64 40, ptr %shift, align 8
  %25 = load i64, ptr %self11, align 8, !dbg !1147
  %26 = load i64, ptr %self11, align 8, !dbg !1149
  %27 = load i64, ptr %shift, align 8, !dbg !1150
  %28 = call i64 @llvm.fshr.i64(i64 %25, i64 %26, i64 %27), !dbg !1150
  %29 = load i64, ptr %result, align 8, !dbg !1151
  %add12 = add i64 %28, %29, !dbg !1145
  store i64 %add12, ptr %ptradd9, align 8, !dbg !1145
  %30 = load ptr, ptr %s, align 8, !dbg !1152
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 24, !dbg !1153
  %31 = load i64, ptr %ptradd13, align 8, !dbg !1153
  %add14 = add i64 %31, -7046029254386353131, !dbg !1152
  store i64 %add14, ptr %ptradd13, align 8, !dbg !1152
  %32 = load i64, ptr %result, align 8, !dbg !1154
  ret i64 %32, !dbg !1154

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1120
  call void %33(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.19, i64 9, i32 50) #5, !dbg !1120
  unreachable, !dbg !1120
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1155 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1156
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1156
  br i1 %4, label %panic, label %checkok, !dbg !1156

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1157, !DIExpression(), !1158)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1159, !DIExpression(), !1160)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1161
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1161
  %lt = icmp ult i64 0, %5, !dbg !1161
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1161

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1161
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.67, i64 11, ptr @.func.21, i64 10, i32 62) #5, !dbg !1161
  unreachable, !dbg !1161

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1163, !DIExpression(), !1165)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1166
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1166
  store i64 %7, ptr %len, align 8, !dbg !1166
  br label %loop.cond, !dbg !1167

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1168
  %lt4 = icmp ult i64 0, %8, !dbg !1168
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1168

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1170, !DIExpression(), !1172)
  %9 = load ptr, ptr %self, align 8, !dbg !1173
  %10 = call i64 @std.math.random.Sfc64Random.next_long(ptr %9), !dbg !1174
  store i64 %10, ptr %value, align 8, !dbg !1174
  %11 = load i64, ptr %len, align 8, !dbg !1175
  %le = icmp ule i64 %11, 8, !dbg !1175
  br i1 %le, label %if.then, label %if.exit, !dbg !1175

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1176
  %add = add i64 0, %13, !dbg !1176
  %gt = icmp ugt i64 0, %add, !dbg !1176
  %sub = sub i64 %add, 0, !dbg !1176
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1176
  br i1 %14, label %panic5, label %checkok7, !dbg !1176

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1178
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1178
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !1178
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !1179
  %18 = extractvalue %"char[]" %17, 0, !dbg !1179
  %19 = extractvalue %"char[]" %17, 1, !dbg !1180
  %gt8 = icmp ugt i64 0, %19, !dbg !1180
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !1180
  br i1 %20, label %panic9, label %checkok16, !dbg !1180

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !1179
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !1179
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !1179
  %23 = extractvalue %"char[]" %22, 0, !dbg !1179
  %24 = extractvalue %"char[]" %16, 0, !dbg !1179
  %25 = extractvalue %"char[]" %16, 1, !dbg !1179
  %26 = extractvalue %"char[]" %22, 1, !dbg !1179
  %neq = icmp ne i64 %26, %25, !dbg !1179
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1179
  br i1 %27, label %panic18, label %checkok25, !dbg !1179

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !1179
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !1179
  br label %expr_block.exit, !dbg !1181

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 8, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !1182
  %33 = extractvalue %"char[]" %32, 0, !dbg !1182
  %34 = extractvalue %"char[]" %32, 1, !dbg !1182
  %gt27 = icmp sgt i64 0, %34, !dbg !1182
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !1182
  br i1 %35, label %panic28, label %checkok35, !dbg !1182

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 8, !dbg !1182
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !1182
  br i1 %36, label %panic37, label %checkok44, !dbg !1182

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !1182
  %38 = insertvalue %"char[]" %37, i64 8, 1, !dbg !1182
  %39 = extractvalue %"char[]" %38, 0, !dbg !1182
  %40 = extractvalue %"char[]" %31, 0, !dbg !1182
  %41 = extractvalue %"char[]" %31, 1, !dbg !1182
  %42 = extractvalue %"char[]" %38, 1, !dbg !1182
  %neq45 = icmp ne i64 %42, %41, !dbg !1182
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !1182
  br i1 %43, label %panic46, label %checkok53, !dbg !1182

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !1182
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !1182
  %45 = load i64, ptr %len, align 8, !dbg !1183
  %sub54 = sub i64 %45, 8, !dbg !1183
  store i64 %sub54, ptr %len, align 8, !dbg !1183
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !1184
  %47 = extractvalue %"char[]" %46, 0, !dbg !1184
  %48 = extractvalue %"char[]" %46, 1, !dbg !1185
  %gt55 = icmp ugt i64 8, %48, !dbg !1185
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !1185
  br i1 %49, label %panic56, label %checkok63, !dbg !1185

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 8, !dbg !1184
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 8, !dbg !1184
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !1184
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !1184
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !1184
  br label %loop.cond, !dbg !1184

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.71, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1186
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1186
  %hi = load i64, ptr %ptradd66, align 8, !dbg !1186
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.72, i64 11, ptr @.str.73, i64 22, i32 64, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !1189
  unreachable, !dbg !1190

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !1190

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1158
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.21, i64 10, i32 64) #5, !dbg !1158
  unreachable, !dbg !1158

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1178
  unreachable, !dbg !1178

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1179
  unreachable, !dbg !1179

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !1179
  unreachable, !dbg !1179

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !1182
  unreachable, !dbg !1182

panic37:                                          ; preds = %checkok35
  store i64 7, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !1182
  unreachable, !dbg !1182

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !1182
  unreachable, !dbg !1182

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !1184
  unreachable, !dbg !1184
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc64Random.next_int128(ptr %0) #0 comdat !dbg !1191 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1194
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1194
  br i1 %2, label %panic, label %checkok, !dbg !1194

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1195, !DIExpression(), !1196)
  %3 = load ptr, ptr %self, align 8, !dbg !1197
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1199
  %zext = zext i64 %4 to i128, !dbg !1199
  %shl = shl i128 %zext, 64, !dbg !1199
  %5 = freeze i128 %shl, !dbg !1199
  %6 = load ptr, ptr %self, align 8, !dbg !1197
  %7 = call i64 @std.math.random.Sfc64Random.next_long(ptr %6), !dbg !1200
  %zext1 = zext i64 %7 to i128, !dbg !1200
  %add = add i128 %5, %zext1, !dbg !1199
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1196
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.29, i64 11, i32 65) #5, !dbg !1196
  unreachable, !dbg !1196
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc64Random.next_int(ptr %0) #0 comdat !dbg !1201 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1204
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1204
  br i1 %2, label %panic, label %checkok, !dbg !1204

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1205, !DIExpression(), !1206)
  %3 = load ptr, ptr %self, align 8, !dbg !1207
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1204
  %trunc = trunc i64 %4 to i32, !dbg !1204
  ret i32 %trunc, !dbg !1204

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1206
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.30, i64 8, i32 66) #5, !dbg !1206
  unreachable, !dbg !1206
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc64Random.next_short(ptr %0) #0 comdat !dbg !1208 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1211
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1211
  br i1 %2, label %panic, label %checkok, !dbg !1211

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1212, !DIExpression(), !1213)
  %3 = load ptr, ptr %self, align 8, !dbg !1214
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1211
  %trunc = trunc i64 %4 to i16, !dbg !1211
  ret i16 %trunc, !dbg !1211

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1213
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.31, i64 10, i32 67) #5, !dbg !1213
  unreachable, !dbg !1213
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc64Random.next_byte(ptr %0) #0 comdat !dbg !1215 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1218
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1218
  br i1 %2, label %panic, label %checkok, !dbg !1218

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1219, !DIExpression(), !1220)
  %3 = load ptr, ptr %self, align 8, !dbg !1221
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1218
  %trunc = trunc i64 %4 to i8, !dbg !1218
  ret i8 %trunc, !dbg !1218

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1220
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.32, i64 9, i32 68) #5, !dbg !1220
  unreachable, !dbg !1220
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1222 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i32], align 16
  %taddr11 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1228
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1228
  br i1 %4, label %panic, label %checkok, !dbg !1228

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1229, !DIExpression(), !1230)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !1231, !DIExpression(), !1232)
  %5 = load ptr, ptr %self, align 8, !dbg !1233
  %checknull = icmp eq ptr %5, null, !dbg !1233
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1233
  br i1 %6, label %panic1, label %checkok2, !dbg !1233

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1233
  %8 = urem i64 %7, 4, !dbg !1233
  %9 = icmp ne i64 %8, 0, !dbg !1233
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1233
  br i1 %10, label %panic3, label %checkok6, !dbg !1233

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1234, !DIExpression(), !1236)
  store i32 0, ptr %return_value, align 4, !dbg !1236
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !1236
  store i32 0, ptr %ptradd8, align 4, !dbg !1236
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 8, !dbg !1236
  store i32 0, ptr %ptradd9, align 4, !dbg !1236
  %ptradd10 = getelementptr inbounds i8, ptr %return_value, i64 12, !dbg !1236
  store i32 0, ptr %ptradd10, align 4, !dbg !1236
  store ptr %return_value, ptr %taddr11, align 8
  %11 = load ptr, ptr %taddr11, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 16, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd12, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 16), !dbg !1238
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %5, ptr align 16 %return_value, i32 16, i1 false), !dbg !1239
  ret void, !dbg !1239

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1230
  call void %14(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.16, i64 8, i32 74) #5, !dbg !1230
  unreachable, !dbg !1230

panic1:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1233
  call void %15(ptr @.panic_msg.17, i64 45, ptr @.file.67, i64 11, ptr @.func.16, i64 8, i32 76) #5, !dbg !1233
  unreachable, !dbg !1233

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %18 = insertvalue %any undef, ptr %taddr4, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd5, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.67, i64 11, ptr @.func.16, i64 8, i32 76, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1233
  unreachable, !dbg !1233
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc32Random.next_int(ptr %0) #0 comdat !dbg !1240 {
entry:
  %sfc = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %self = alloca i32, align 4
  %shift = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !1243
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1243
  br i1 %2, label %panic, label %checkok, !dbg !1243

checkok:                                          ; preds = %entry
  store ptr %0, ptr %sfc, align 8
    #dbg_declare(ptr %sfc, !1244, !DIExpression(), !1245)
    #dbg_declare(ptr %s, !1246, !DIExpression(), !1247)
  %3 = load ptr, ptr %sfc, align 8, !dbg !1248
  store ptr %3, ptr %s, align 8, !dbg !1248
    #dbg_declare(ptr %result, !1249, !DIExpression(), !1250)
  %4 = load ptr, ptr %s, align 8, !dbg !1251
  %5 = load i32, ptr %4, align 4, !dbg !1252
  %6 = load ptr, ptr %s, align 8, !dbg !1253
  %ptradd = getelementptr inbounds i8, ptr %6, i64 4, !dbg !1254
  %7 = load i32, ptr %ptradd, align 4, !dbg !1254
  %add = add i32 %5, %7, !dbg !1251
  %8 = load ptr, ptr %s, align 8, !dbg !1255
  %ptradd1 = getelementptr inbounds i8, ptr %8, i64 12, !dbg !1256
  %9 = load i32, ptr %ptradd1, align 4, !dbg !1256
  %add2 = add i32 %add, %9, !dbg !1251
  store i32 %add2, ptr %result, align 4, !dbg !1251
  %10 = load ptr, ptr %s, align 8, !dbg !1257
  %11 = load ptr, ptr %s, align 8, !dbg !1258
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 4, !dbg !1259
  %12 = load i32, ptr %ptradd3, align 4, !dbg !1259
  %13 = load ptr, ptr %s, align 8, !dbg !1260
  %ptradd4 = getelementptr inbounds i8, ptr %13, i64 4, !dbg !1261
  %14 = load i32, ptr %ptradd4, align 4, !dbg !1261
  %lshr = lshr i32 %14, 9, !dbg !1260
  %15 = freeze i32 %lshr, !dbg !1260
  %xor = xor i32 %12, %15, !dbg !1258
  store i32 %xor, ptr %10, align 4, !dbg !1258
  %16 = load ptr, ptr %s, align 8, !dbg !1262
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 4, !dbg !1263
  %17 = load ptr, ptr %s, align 8, !dbg !1264
  %ptradd6 = getelementptr inbounds i8, ptr %17, i64 8, !dbg !1265
  %18 = load i32, ptr %ptradd6, align 4, !dbg !1265
  %19 = load ptr, ptr %s, align 8, !dbg !1266
  %ptradd7 = getelementptr inbounds i8, ptr %19, i64 8, !dbg !1267
  %20 = load i32, ptr %ptradd7, align 4, !dbg !1267
  %shl = shl i32 %20, 3, !dbg !1266
  %21 = freeze i32 %shl, !dbg !1266
  %add8 = add i32 %18, %21, !dbg !1264
  store i32 %add8, ptr %ptradd5, align 4, !dbg !1264
  %22 = load ptr, ptr %s, align 8, !dbg !1268
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !1269
  %23 = load ptr, ptr %s, align 8, !dbg !1270
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !1271
  %24 = load i32, ptr %ptradd10, align 4
  store i32 %24, ptr %self, align 4
  store i32 11, ptr %shift, align 4
  %25 = load i32, ptr %self, align 4, !dbg !1272
  %26 = load i32, ptr %self, align 4, !dbg !1274
  %27 = load i32, ptr %shift, align 4, !dbg !1275
  %28 = call i32 @llvm.fshr.i32(i32 %25, i32 %26, i32 %27), !dbg !1275
  %29 = load i32, ptr %result, align 4, !dbg !1276
  %add11 = add i32 %28, %29, !dbg !1270
  store i32 %add11, ptr %ptradd9, align 4, !dbg !1270
  %30 = load ptr, ptr %s, align 8, !dbg !1277
  %ptradd12 = getelementptr inbounds i8, ptr %30, i64 12, !dbg !1278
  %31 = load i32, ptr %ptradd12, align 4, !dbg !1278
  %add13 = add i32 %31, -1640531527, !dbg !1277
  store i32 %add13, ptr %ptradd12, align 4, !dbg !1277
  %32 = load i32, ptr %result, align 4, !dbg !1279
  ret i32 %32, !dbg !1279

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1245
  call void %33(ptr @.panic_msg.74, i64 61, ptr @.file.67, i64 11, ptr @.func.30, i64 8, i32 79) #5, !dbg !1245
  unreachable, !dbg !1245
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1280 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1281
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1281
  br i1 %4, label %panic, label %checkok, !dbg !1281

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1282, !DIExpression(), !1283)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1284, !DIExpression(), !1285)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1286
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1286
  %lt = icmp ult i64 0, %5, !dbg !1286
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1286

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1286
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.67, i64 11, ptr @.func.21, i64 10, i32 91) #5, !dbg !1286
  unreachable, !dbg !1286

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1288, !DIExpression(), !1290)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1291
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1291
  store i64 %7, ptr %len, align 8, !dbg !1291
  br label %loop.cond, !dbg !1292

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1293
  %lt4 = icmp ult i64 0, %8, !dbg !1293
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1293

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1295, !DIExpression(), !1297)
  %9 = load ptr, ptr %self, align 8, !dbg !1298
  %10 = call i32 @std.math.random.Sfc32Random.next_int(ptr %9), !dbg !1299
  store i32 %10, ptr %value, align 4, !dbg !1299
  %11 = load i64, ptr %len, align 8, !dbg !1300
  %le = icmp ule i64 %11, 4, !dbg !1300
  br i1 %le, label %if.then, label %if.exit, !dbg !1300

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1301
  %add = add i64 0, %13, !dbg !1301
  %gt = icmp ugt i64 0, %add, !dbg !1301
  %sub = sub i64 %add, 0, !dbg !1301
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1301
  br i1 %14, label %panic5, label %checkok7, !dbg !1301

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1303
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1303
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !1303
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !1304
  %18 = extractvalue %"char[]" %17, 0, !dbg !1304
  %19 = extractvalue %"char[]" %17, 1, !dbg !1305
  %gt8 = icmp ugt i64 0, %19, !dbg !1305
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !1305
  br i1 %20, label %panic9, label %checkok16, !dbg !1305

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !1304
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !1304
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !1304
  %23 = extractvalue %"char[]" %22, 0, !dbg !1304
  %24 = extractvalue %"char[]" %16, 0, !dbg !1304
  %25 = extractvalue %"char[]" %16, 1, !dbg !1304
  %26 = extractvalue %"char[]" %22, 1, !dbg !1304
  %neq = icmp ne i64 %26, %25, !dbg !1304
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1304
  br i1 %27, label %panic18, label %checkok25, !dbg !1304

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !1304
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !1304
  br label %expr_block.exit, !dbg !1306

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 4, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !1307
  %33 = extractvalue %"char[]" %32, 0, !dbg !1307
  %34 = extractvalue %"char[]" %32, 1, !dbg !1307
  %gt27 = icmp sgt i64 0, %34, !dbg !1307
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !1307
  br i1 %35, label %panic28, label %checkok35, !dbg !1307

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 4, !dbg !1307
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !1307
  br i1 %36, label %panic37, label %checkok44, !dbg !1307

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !1307
  %38 = insertvalue %"char[]" %37, i64 4, 1, !dbg !1307
  %39 = extractvalue %"char[]" %38, 0, !dbg !1307
  %40 = extractvalue %"char[]" %31, 0, !dbg !1307
  %41 = extractvalue %"char[]" %31, 1, !dbg !1307
  %42 = extractvalue %"char[]" %38, 1, !dbg !1307
  %neq45 = icmp ne i64 %42, %41, !dbg !1307
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !1307
  br i1 %43, label %panic46, label %checkok53, !dbg !1307

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !1307
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !1307
  %45 = load i64, ptr %len, align 8, !dbg !1308
  %sub54 = sub i64 %45, 4, !dbg !1308
  store i64 %sub54, ptr %len, align 8, !dbg !1308
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !1309
  %47 = extractvalue %"char[]" %46, 0, !dbg !1309
  %48 = extractvalue %"char[]" %46, 1, !dbg !1310
  %gt55 = icmp ugt i64 4, %48, !dbg !1310
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !1310
  br i1 %49, label %panic56, label %checkok63, !dbg !1310

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 4, !dbg !1309
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 4, !dbg !1309
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !1309
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !1309
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !1309
  br label %loop.cond, !dbg !1309

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.75, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1311
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1311
  %hi = load i64, ptr %ptradd66, align 8, !dbg !1311
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.76, i64 11, ptr @.str.77, i64 22, i32 93, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !1314
  unreachable, !dbg !1315

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !1315

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1283
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.21, i64 10, i32 93) #5, !dbg !1283
  unreachable, !dbg !1283

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1303
  unreachable, !dbg !1303

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1304
  unreachable, !dbg !1304

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !1304
  unreachable, !dbg !1304

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !1307
  unreachable, !dbg !1307

panic37:                                          ; preds = %checkok35
  store i64 3, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !1307
  unreachable, !dbg !1307

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !1307
  unreachable, !dbg !1307

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !1309
  unreachable, !dbg !1309
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc32Random.next_int128(ptr %0) #0 comdat !dbg !1316 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1319
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1319
  br i1 %2, label %panic, label %checkok, !dbg !1319

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1320, !DIExpression(), !1321)
  %3 = load ptr, ptr %self, align 8, !dbg !1322
  %4 = call i64 @std.math.random.Sfc32Random.next_long(ptr %3), !dbg !1324
  %zext = zext i64 %4 to i128, !dbg !1324
  %shl = shl i128 %zext, 64, !dbg !1324
  %5 = freeze i128 %shl, !dbg !1324
  %6 = load ptr, ptr %self, align 8, !dbg !1322
  %7 = call i64 @std.math.random.Sfc32Random.next_long(ptr %6), !dbg !1325
  %zext1 = zext i64 %7 to i128, !dbg !1325
  %add = add i128 %5, %zext1, !dbg !1324
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1321
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.29, i64 11, i32 94) #5, !dbg !1321
  unreachable, !dbg !1321
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc32Random.next_long(ptr %0) #0 comdat !dbg !1326 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1329
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1329
  br i1 %2, label %panic, label %checkok, !dbg !1329

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1330, !DIExpression(), !1331)
  %3 = load ptr, ptr %self, align 8, !dbg !1332
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !1334
  %zext = zext i32 %4 to i64, !dbg !1334
  %shl = shl i64 %zext, 32, !dbg !1334
  %5 = freeze i64 %shl, !dbg !1334
  %6 = load ptr, ptr %self, align 8, !dbg !1332
  %7 = call i32 @std.math.random.Sfc32Random.next_int(ptr %6), !dbg !1335
  %zext1 = zext i32 %7 to i64, !dbg !1335
  %add = add i64 %5, %zext1, !dbg !1334
  ret i64 %add, !dbg !1334

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1331
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.19, i64 9, i32 95) #5, !dbg !1331
  unreachable, !dbg !1331
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc32Random.next_short(ptr %0) #0 comdat !dbg !1336 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1339
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1339
  br i1 %2, label %panic, label %checkok, !dbg !1339

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1340, !DIExpression(), !1341)
  %3 = load ptr, ptr %self, align 8, !dbg !1342
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !1339
  %trunc = trunc i32 %4 to i16, !dbg !1339
  ret i16 %trunc, !dbg !1339

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1341
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.31, i64 10, i32 96) #5, !dbg !1341
  unreachable, !dbg !1341
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc32Random.next_byte(ptr %0) #0 comdat !dbg !1343 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1346
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1346
  br i1 %2, label %panic, label %checkok, !dbg !1346

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1347, !DIExpression(), !1348)
  %3 = load ptr, ptr %self, align 8, !dbg !1349
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !1346
  %trunc = trunc i32 %4 to i8, !dbg !1346
  ret i8 %trunc, !dbg !1346

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1348
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.32, i64 9, i32 97) #5, !dbg !1348
  unreachable, !dbg !1348
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1350 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i16], align 2
  %taddr11 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1356
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1356
  br i1 %4, label %panic, label %checkok, !dbg !1356

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1357, !DIExpression(), !1358)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !1359, !DIExpression(), !1360)
  %5 = load ptr, ptr %self, align 8, !dbg !1361
  %checknull = icmp eq ptr %5, null, !dbg !1361
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1361
  br i1 %6, label %panic1, label %checkok2, !dbg !1361

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1361
  %8 = urem i64 %7, 2, !dbg !1361
  %9 = icmp ne i64 %8, 0, !dbg !1361
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1361
  br i1 %10, label %panic3, label %checkok6, !dbg !1361

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1362, !DIExpression(), !1364)
  store i16 0, ptr %return_value, align 2, !dbg !1364
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1364
  store i16 0, ptr %ptradd8, align 2, !dbg !1364
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !1364
  store i16 0, ptr %ptradd9, align 2, !dbg !1364
  %ptradd10 = getelementptr inbounds i8, ptr %return_value, i64 6, !dbg !1364
  store i16 0, ptr %ptradd10, align 2, !dbg !1364
  store ptr %return_value, ptr %taddr11, align 8
  %11 = load ptr, ptr %taddr11, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 8, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd12, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 8), !dbg !1366
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %5, ptr align 2 %return_value, i32 8, i1 false), !dbg !1367
  ret void, !dbg !1367

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1358
  call void %14(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.16, i64 8, i32 103) #5, !dbg !1358
  unreachable, !dbg !1358

panic1:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1361
  call void %15(ptr @.panic_msg.17, i64 45, ptr @.file.67, i64 11, ptr @.func.16, i64 8, i32 105) #5, !dbg !1361
  unreachable, !dbg !1361

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %18 = insertvalue %any undef, ptr %taddr4, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd5, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.67, i64 11, ptr @.func.16, i64 8, i32 105, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1361
  unreachable, !dbg !1361
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc16Random.next_short(ptr %0) #0 comdat !dbg !1368 {
entry:
  %seed = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %self = alloca i16, align 2
  %shift = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !1371
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1371
  br i1 %2, label %panic, label %checkok, !dbg !1371

checkok:                                          ; preds = %entry
  store ptr %0, ptr %seed, align 8
    #dbg_declare(ptr %seed, !1372, !DIExpression(), !1373)
    #dbg_declare(ptr %s, !1374, !DIExpression(), !1375)
  %3 = load ptr, ptr %seed, align 8, !dbg !1376
  store ptr %3, ptr %s, align 8, !dbg !1376
    #dbg_declare(ptr %result, !1377, !DIExpression(), !1378)
  %4 = load ptr, ptr %s, align 8, !dbg !1379
  %5 = load i16, ptr %4, align 2, !dbg !1380
  %zext = zext i16 %5 to i32, !dbg !1380
  %6 = load ptr, ptr %s, align 8, !dbg !1381
  %ptradd = getelementptr inbounds i8, ptr %6, i64 2, !dbg !1382
  %7 = load i16, ptr %ptradd, align 2, !dbg !1382
  %zext1 = zext i16 %7 to i32, !dbg !1382
  %add = add i32 %zext, %zext1, !dbg !1379
  %8 = load ptr, ptr %s, align 8, !dbg !1383
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 6, !dbg !1384
  %9 = load i16, ptr %ptradd2, align 2, !dbg !1384
  %zext3 = zext i16 %9 to i32, !dbg !1384
  %add4 = add i32 %add, %zext3, !dbg !1379
  %trunc = trunc i32 %add4 to i16, !dbg !1379
  store i16 %trunc, ptr %result, align 2, !dbg !1379
  %10 = load ptr, ptr %s, align 8, !dbg !1385
  %11 = load ptr, ptr %s, align 8, !dbg !1386
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 2, !dbg !1387
  %12 = load i16, ptr %ptradd5, align 2, !dbg !1387
  %zext6 = zext i16 %12 to i32, !dbg !1387
  %13 = load ptr, ptr %s, align 8, !dbg !1388
  %ptradd7 = getelementptr inbounds i8, ptr %13, i64 2, !dbg !1389
  %14 = load i16, ptr %ptradd7, align 2, !dbg !1389
  %zext8 = zext i16 %14 to i32, !dbg !1389
  %lshr = lshr i32 %zext8, 2, !dbg !1388
  %15 = freeze i32 %lshr, !dbg !1388
  %xor = xor i32 %zext6, %15, !dbg !1386
  %trunc9 = trunc i32 %xor to i16, !dbg !1386
  store i16 %trunc9, ptr %10, align 2, !dbg !1386
  %16 = load ptr, ptr %s, align 8, !dbg !1390
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 2, !dbg !1391
  %17 = load ptr, ptr %s, align 8, !dbg !1392
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 4, !dbg !1393
  %18 = load i16, ptr %ptradd11, align 2, !dbg !1393
  %zext12 = zext i16 %18 to i32, !dbg !1393
  %19 = load ptr, ptr %s, align 8, !dbg !1394
  %ptradd13 = getelementptr inbounds i8, ptr %19, i64 4, !dbg !1395
  %20 = load i16, ptr %ptradd13, align 2, !dbg !1395
  %zext14 = zext i16 %20 to i32, !dbg !1395
  %shl = shl i32 %zext14, 3, !dbg !1394
  %21 = freeze i32 %shl, !dbg !1394
  %add15 = add i32 %zext12, %21, !dbg !1392
  %trunc16 = trunc i32 %add15 to i16, !dbg !1392
  store i16 %trunc16, ptr %ptradd10, align 2, !dbg !1392
  %22 = load ptr, ptr %s, align 8, !dbg !1396
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 4, !dbg !1397
  %23 = load ptr, ptr %s, align 8, !dbg !1398
  %ptradd18 = getelementptr inbounds i8, ptr %23, i64 4, !dbg !1399
  %24 = load i16, ptr %ptradd18, align 2
  store i16 %24, ptr %self, align 2
  store i16 12, ptr %shift, align 2
  %25 = load i16, ptr %self, align 2, !dbg !1400
  %26 = load i16, ptr %self, align 2, !dbg !1402
  %27 = load i16, ptr %shift, align 2, !dbg !1403
  %28 = call i16 @llvm.fshr.i16(i16 %25, i16 %26, i16 %27), !dbg !1403
  %zext19 = zext i16 %28 to i32, !dbg !1403
  %29 = load i16, ptr %result, align 2, !dbg !1404
  %zext20 = zext i16 %29 to i32, !dbg !1404
  %add21 = add i32 %zext19, %zext20, !dbg !1398
  %trunc22 = trunc i32 %add21 to i16, !dbg !1398
  store i16 %trunc22, ptr %ptradd17, align 2, !dbg !1398
  %30 = load ptr, ptr %s, align 8, !dbg !1405
  %ptradd23 = getelementptr inbounds i8, ptr %30, i64 6, !dbg !1406
  %31 = load i16, ptr %ptradd23, align 2, !dbg !1406
  %add24 = add i16 %31, -25033, !dbg !1405
  store i16 %add24, ptr %ptradd23, align 2, !dbg !1405
  %32 = load i16, ptr %result, align 2, !dbg !1407
  ret i16 %32, !dbg !1407

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1373
  call void %33(ptr @.panic_msg.78, i64 62, ptr @.file.67, i64 11, ptr @.func.31, i64 10, i32 109) #5, !dbg !1373
  unreachable, !dbg !1373
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1408 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1409
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1409
  br i1 %4, label %panic, label %checkok, !dbg !1409

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1410, !DIExpression(), !1411)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1412, !DIExpression(), !1413)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1414
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1414
  %lt = icmp ult i64 0, %5, !dbg !1414
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1414

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1414
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.67, i64 11, ptr @.func.21, i64 10, i32 121) #5, !dbg !1414
  unreachable, !dbg !1414

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1416, !DIExpression(), !1418)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1419
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1419
  store i64 %7, ptr %len, align 8, !dbg !1419
  br label %loop.cond, !dbg !1420

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1421
  %lt4 = icmp ult i64 0, %8, !dbg !1421
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1421

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1423, !DIExpression(), !1425)
  %9 = load ptr, ptr %self, align 8, !dbg !1426
  %10 = call i16 @std.math.random.Sfc16Random.next_short(ptr %9), !dbg !1427
  store i16 %10, ptr %value, align 2, !dbg !1427
  %11 = load i64, ptr %len, align 8, !dbg !1428
  %le = icmp ule i64 %11, 2, !dbg !1428
  br i1 %le, label %if.then, label %if.exit, !dbg !1428

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1429
  %add = add i64 0, %13, !dbg !1429
  %gt = icmp ugt i64 0, %add, !dbg !1429
  %sub = sub i64 %add, 0, !dbg !1429
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1429
  br i1 %14, label %panic5, label %checkok7, !dbg !1429

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1431
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1431
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !1431
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !1432
  %18 = extractvalue %"char[]" %17, 0, !dbg !1432
  %19 = extractvalue %"char[]" %17, 1, !dbg !1433
  %gt8 = icmp ugt i64 0, %19, !dbg !1433
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !1433
  br i1 %20, label %panic9, label %checkok16, !dbg !1433

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !1432
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !1432
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !1432
  %23 = extractvalue %"char[]" %22, 0, !dbg !1432
  %24 = extractvalue %"char[]" %16, 0, !dbg !1432
  %25 = extractvalue %"char[]" %16, 1, !dbg !1432
  %26 = extractvalue %"char[]" %22, 1, !dbg !1432
  %neq = icmp ne i64 %26, %25, !dbg !1432
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1432
  br i1 %27, label %panic18, label %checkok25, !dbg !1432

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !1432
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !1432
  br label %expr_block.exit, !dbg !1434

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 2, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !1435
  %33 = extractvalue %"char[]" %32, 0, !dbg !1435
  %34 = extractvalue %"char[]" %32, 1, !dbg !1435
  %gt27 = icmp sgt i64 0, %34, !dbg !1435
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !1435
  br i1 %35, label %panic28, label %checkok35, !dbg !1435

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 2, !dbg !1435
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !1435
  br i1 %36, label %panic37, label %checkok44, !dbg !1435

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !1435
  %38 = insertvalue %"char[]" %37, i64 2, 1, !dbg !1435
  %39 = extractvalue %"char[]" %38, 0, !dbg !1435
  %40 = extractvalue %"char[]" %31, 0, !dbg !1435
  %41 = extractvalue %"char[]" %31, 1, !dbg !1435
  %42 = extractvalue %"char[]" %38, 1, !dbg !1435
  %neq45 = icmp ne i64 %42, %41, !dbg !1435
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !1435
  br i1 %43, label %panic46, label %checkok53, !dbg !1435

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !1435
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !1435
  %45 = load i64, ptr %len, align 8, !dbg !1436
  %sub54 = sub i64 %45, 2, !dbg !1436
  store i64 %sub54, ptr %len, align 8, !dbg !1436
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !1437
  %47 = extractvalue %"char[]" %46, 0, !dbg !1437
  %48 = extractvalue %"char[]" %46, 1, !dbg !1438
  %gt55 = icmp ugt i64 2, %48, !dbg !1438
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !1438
  br i1 %49, label %panic56, label %checkok63, !dbg !1438

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 2, !dbg !1437
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 2, !dbg !1437
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !1437
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !1437
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !1437
  br label %loop.cond, !dbg !1437

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.79, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1439
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1439
  %hi = load i64, ptr %ptradd66, align 8, !dbg !1439
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.80, i64 11, ptr @.str.81, i64 22, i32 123, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !1442
  unreachable, !dbg !1443

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !1443

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1411
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.21, i64 10, i32 123) #5, !dbg !1411
  unreachable, !dbg !1411

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1431
  unreachable, !dbg !1431

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1432
  unreachable, !dbg !1432

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !1432
  unreachable, !dbg !1432

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !1435
  unreachable, !dbg !1435

panic37:                                          ; preds = %checkok35
  store i64 1, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !1435
  unreachable, !dbg !1435

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !1435
  unreachable, !dbg !1435

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !1437
  unreachable, !dbg !1437
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc16Random.next_int128(ptr %0) #0 comdat !dbg !1444 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1447
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1447
  br i1 %2, label %panic, label %checkok, !dbg !1447

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1448, !DIExpression(), !1449)
  %3 = load ptr, ptr %self, align 8, !dbg !1450
  %4 = call i64 @std.math.random.Sfc16Random.next_long(ptr %3), !dbg !1452
  %zext = zext i64 %4 to i128, !dbg !1452
  %shl = shl i128 %zext, 64, !dbg !1452
  %5 = freeze i128 %shl, !dbg !1452
  %6 = load ptr, ptr %self, align 8, !dbg !1450
  %7 = call i64 @std.math.random.Sfc16Random.next_long(ptr %6), !dbg !1453
  %zext1 = zext i64 %7 to i128, !dbg !1453
  %add = add i128 %5, %zext1, !dbg !1452
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1449
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.29, i64 11, i32 124) #5, !dbg !1449
  unreachable, !dbg !1449
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc16Random.next_long(ptr %0) #0 comdat !dbg !1454 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1457
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1457
  br i1 %2, label %panic, label %checkok, !dbg !1457

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1458, !DIExpression(), !1459)
  %3 = load ptr, ptr %self, align 8, !dbg !1460
  %4 = call i32 @std.math.random.Sfc16Random.next_int(ptr %3), !dbg !1462
  %zext = zext i32 %4 to i64, !dbg !1462
  %shl = shl i64 %zext, 32, !dbg !1462
  %5 = freeze i64 %shl, !dbg !1462
  %6 = load ptr, ptr %self, align 8, !dbg !1460
  %7 = call i32 @std.math.random.Sfc16Random.next_int(ptr %6), !dbg !1463
  %zext1 = zext i32 %7 to i64, !dbg !1463
  %add = add i64 %5, %zext1, !dbg !1462
  ret i64 %add, !dbg !1462

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1459
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.19, i64 9, i32 125) #5, !dbg !1459
  unreachable, !dbg !1459
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc16Random.next_int(ptr %0) #0 comdat !dbg !1464 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1467
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1467
  br i1 %2, label %panic, label %checkok, !dbg !1467

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1468, !DIExpression(), !1469)
  %3 = load ptr, ptr %self, align 8, !dbg !1470
  %4 = call i16 @std.math.random.Sfc16Random.next_short(ptr %3), !dbg !1472
  %zext = zext i16 %4 to i32, !dbg !1472
  %shl = shl i32 %zext, 16, !dbg !1472
  %5 = freeze i32 %shl, !dbg !1472
  %6 = load ptr, ptr %self, align 8, !dbg !1470
  %7 = call i16 @std.math.random.Sfc16Random.next_short(ptr %6), !dbg !1473
  %zext1 = zext i16 %7 to i32, !dbg !1473
  %add = add i32 %5, %zext1, !dbg !1472
  ret i32 %add, !dbg !1472

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1469
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.30, i64 8, i32 126) #5, !dbg !1469
  unreachable, !dbg !1469
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc16Random.next_byte(ptr %0) #0 comdat !dbg !1474 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1477
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1477
  br i1 %2, label %panic, label %checkok, !dbg !1477

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1478, !DIExpression(), !1479)
  %3 = load ptr, ptr %self, align 8, !dbg !1480
  %4 = call i16 @std.math.random.Sfc16Random.next_short(ptr %3), !dbg !1477
  %trunc = trunc i16 %4 to i8, !dbg !1477
  ret i8 %trunc, !dbg !1477

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1479
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.32, i64 9, i32 127) #5, !dbg !1479
  unreachable, !dbg !1479
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc8Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1481 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca [4 x i8], align 1
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1487
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1487
  br i1 %4, label %panic, label %checkok, !dbg !1487

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1488, !DIExpression(), !1489)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !1490, !DIExpression(), !1491)
  %5 = load ptr, ptr %self, align 8, !dbg !1492
  %checknull = icmp eq ptr %5, null, !dbg !1492
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1492
  br i1 %6, label %panic1, label %checkok2, !dbg !1492

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1493, !DIExpression(), !1495)
  store i8 0, ptr %return_value, align 1, !dbg !1495
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 1, !dbg !1495
  store i8 0, ptr %ptradd4, align 1, !dbg !1495
  %ptradd5 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1495
  store i8 0, ptr %ptradd5, align 1, !dbg !1495
  %ptradd6 = getelementptr inbounds i8, ptr %return_value, i64 3, !dbg !1495
  store i8 0, ptr %ptradd6, align 1, !dbg !1495
  store ptr %return_value, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 4, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd7, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %7, i64 4), !dbg !1497
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %5, ptr align 1 %return_value, i32 4, i1 false), !dbg !1498
  ret void, !dbg !1498

panic:                                            ; preds = %entry
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1489
  call void %10(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.16, i64 8, i32 134) #5, !dbg !1489
  unreachable, !dbg !1489

panic1:                                           ; preds = %checkok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1492
  call void %11(ptr @.panic_msg.17, i64 45, ptr @.file.67, i64 11, ptr @.func.16, i64 8, i32 136) #5, !dbg !1492
  unreachable, !dbg !1492
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc8Random.next_byte(ptr %0) #0 comdat !dbg !1499 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %self19 = alloca i8, align 1
  %shift = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !1502
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1502
  br i1 %2, label %panic, label %checkok, !dbg !1502

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1503, !DIExpression(), !1504)
    #dbg_declare(ptr %s, !1505, !DIExpression(), !1506)
  %3 = load ptr, ptr %self, align 8, !dbg !1507
  store ptr %3, ptr %s, align 8, !dbg !1507
    #dbg_declare(ptr %result, !1508, !DIExpression(), !1509)
  %4 = load ptr, ptr %s, align 8, !dbg !1510
  %5 = load i8, ptr %4, align 1, !dbg !1511
  %zext = zext i8 %5 to i32, !dbg !1511
  %6 = load ptr, ptr %s, align 8, !dbg !1512
  %ptradd = getelementptr inbounds i8, ptr %6, i64 1, !dbg !1513
  %7 = load i8, ptr %ptradd, align 1, !dbg !1513
  %zext1 = zext i8 %7 to i32, !dbg !1513
  %add = add i32 %zext, %zext1, !dbg !1510
  %8 = load ptr, ptr %s, align 8, !dbg !1514
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 3, !dbg !1515
  %9 = load i8, ptr %ptradd2, align 1, !dbg !1515
  %zext3 = zext i8 %9 to i32, !dbg !1515
  %add4 = add i32 %add, %zext3, !dbg !1510
  %trunc = trunc i32 %add4 to i8, !dbg !1510
  store i8 %trunc, ptr %result, align 1, !dbg !1510
  %10 = load ptr, ptr %s, align 8, !dbg !1516
  %11 = load ptr, ptr %s, align 8, !dbg !1517
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 1, !dbg !1518
  %12 = load i8, ptr %ptradd5, align 1, !dbg !1518
  %zext6 = zext i8 %12 to i32, !dbg !1518
  %13 = load ptr, ptr %s, align 8, !dbg !1519
  %ptradd7 = getelementptr inbounds i8, ptr %13, i64 1, !dbg !1520
  %14 = load i8, ptr %ptradd7, align 1, !dbg !1520
  %zext8 = zext i8 %14 to i32, !dbg !1520
  %lshr = lshr i32 %zext8, 1, !dbg !1519
  %15 = freeze i32 %lshr, !dbg !1519
  %xor = xor i32 %zext6, %15, !dbg !1517
  %trunc9 = trunc i32 %xor to i8, !dbg !1517
  store i8 %trunc9, ptr %10, align 1, !dbg !1517
  %16 = load ptr, ptr %s, align 8, !dbg !1521
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 1, !dbg !1522
  %17 = load ptr, ptr %s, align 8, !dbg !1523
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 2, !dbg !1524
  %18 = load i8, ptr %ptradd11, align 1, !dbg !1524
  %zext12 = zext i8 %18 to i32, !dbg !1524
  %19 = load ptr, ptr %s, align 8, !dbg !1525
  %ptradd13 = getelementptr inbounds i8, ptr %19, i64 2, !dbg !1526
  %20 = load i8, ptr %ptradd13, align 1, !dbg !1526
  %zext14 = zext i8 %20 to i32, !dbg !1526
  %shl = shl i32 %zext14, 2, !dbg !1525
  %21 = freeze i32 %shl, !dbg !1525
  %add15 = add i32 %zext12, %21, !dbg !1523
  %trunc16 = trunc i32 %add15 to i8, !dbg !1523
  store i8 %trunc16, ptr %ptradd10, align 1, !dbg !1523
  %22 = load ptr, ptr %s, align 8, !dbg !1527
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 2, !dbg !1528
  %23 = load ptr, ptr %s, align 8, !dbg !1529
  %ptradd18 = getelementptr inbounds i8, ptr %23, i64 2, !dbg !1530
  %24 = load i8, ptr %ptradd18, align 1
  store i8 %24, ptr %self19, align 1
  store i8 3, ptr %shift, align 1
  %25 = load i8, ptr %self19, align 1, !dbg !1531
  %26 = load i8, ptr %self19, align 1, !dbg !1533
  %27 = load i8, ptr %shift, align 1, !dbg !1534
  %28 = call i8 @llvm.fshr.i8(i8 %25, i8 %26, i8 %27), !dbg !1534
  %zext20 = zext i8 %28 to i32, !dbg !1534
  %29 = load i8, ptr %result, align 1, !dbg !1535
  %zext21 = zext i8 %29 to i32, !dbg !1535
  %add22 = add i32 %zext20, %zext21, !dbg !1529
  %trunc23 = trunc i32 %add22 to i8, !dbg !1529
  store i8 %trunc23, ptr %ptradd17, align 1, !dbg !1529
  %30 = load ptr, ptr %s, align 8, !dbg !1536
  %ptradd24 = getelementptr inbounds i8, ptr %30, i64 3, !dbg !1537
  %31 = load i8, ptr %ptradd24, align 1, !dbg !1537
  %add25 = add i8 %31, -97, !dbg !1536
  store i8 %add25, ptr %ptradd24, align 1, !dbg !1536
  %32 = load i8, ptr %result, align 1, !dbg !1538
  ret i8 %32, !dbg !1538

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1504
  call void %33(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.32, i64 9, i32 139) #5, !dbg !1504
  unreachable, !dbg !1504
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc8Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1539 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots10 = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %taddr24 = alloca ptr, align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg65 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1540
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1540
  br i1 %4, label %panic, label %checkok, !dbg !1540

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1541, !DIExpression(), !1542)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1543, !DIExpression(), !1544)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1545, !DIExpression(), !1547)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !1548
  %5 = load i64, ptr %ptradd2, align 8, !dbg !1548
  store i64 %5, ptr %len, align 8, !dbg !1548
  br label %loop.cond, !dbg !1549

loop.cond:                                        ; preds = %checkok61, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !1550
  %lt = icmp ult i64 0, %6, !dbg !1550
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1550

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1552, !DIExpression(), !1554)
  %7 = load ptr, ptr %self, align 8, !dbg !1555
  %8 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %7), !dbg !1556
  store i8 %8, ptr %value, align 1, !dbg !1556
  %9 = load i64, ptr %len, align 8, !dbg !1557
  %le = icmp ule i64 %9, 1, !dbg !1557
  br i1 %le, label %if.then, label %if.exit, !dbg !1557

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !1558
  %add = add i64 0, %11, !dbg !1558
  %gt = icmp ugt i64 0, %add, !dbg !1558
  %sub = sub i64 %add, 0, !dbg !1558
  %12 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1558
  br i1 %12, label %panic3, label %checkok5, !dbg !1558

checkok5:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1560
  %13 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !1560
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !1560
  %15 = load %"char[]", ptr %bytes1, align 8, !dbg !1561
  %16 = extractvalue %"char[]" %15, 0, !dbg !1561
  %17 = extractvalue %"char[]" %15, 1, !dbg !1562
  %gt6 = icmp ugt i64 0, %17, !dbg !1562
  %18 = call i1 @llvm.expect.i1(i1 %gt6, i1 false), !dbg !1562
  br i1 %18, label %panic7, label %checkok14, !dbg !1562

checkok14:                                        ; preds = %checkok5
  %size15 = sub i64 %17, 0, !dbg !1561
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !1561
  %20 = insertvalue %"char[]" %19, i64 %size15, 1, !dbg !1561
  %21 = extractvalue %"char[]" %20, 0, !dbg !1561
  %22 = extractvalue %"char[]" %14, 0, !dbg !1561
  %23 = extractvalue %"char[]" %14, 1, !dbg !1561
  %24 = extractvalue %"char[]" %20, 1, !dbg !1561
  %neq = icmp ne i64 %24, %23, !dbg !1561
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1561
  br i1 %25, label %panic16, label %checkok23, !dbg !1561

checkok23:                                        ; preds = %checkok14
  %26 = mul i64 %23, 1, !dbg !1561
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !1561
  br label %expr_block.exit, !dbg !1563

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr24, align 8
  %27 = load ptr, ptr %taddr24, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 1, 1
  %30 = load %"char[]", ptr %bytes1, align 8, !dbg !1564
  %31 = extractvalue %"char[]" %30, 0, !dbg !1564
  %32 = extractvalue %"char[]" %30, 1, !dbg !1564
  %gt25 = icmp sgt i64 0, %32, !dbg !1564
  %33 = call i1 @llvm.expect.i1(i1 %gt25, i1 false), !dbg !1564
  br i1 %33, label %panic26, label %checkok33, !dbg !1564

checkok33:                                        ; preds = %if.exit
  %lt34 = icmp slt i64 %32, 1, !dbg !1564
  %34 = call i1 @llvm.expect.i1(i1 %lt34, i1 false), !dbg !1564
  br i1 %34, label %panic35, label %checkok42, !dbg !1564

checkok42:                                        ; preds = %checkok33
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !1564
  %36 = insertvalue %"char[]" %35, i64 1, 1, !dbg !1564
  %37 = extractvalue %"char[]" %36, 0, !dbg !1564
  %38 = extractvalue %"char[]" %29, 0, !dbg !1564
  %39 = extractvalue %"char[]" %29, 1, !dbg !1564
  %40 = extractvalue %"char[]" %36, 1, !dbg !1564
  %neq43 = icmp ne i64 %40, %39, !dbg !1564
  %41 = call i1 @llvm.expect.i1(i1 %neq43, i1 false), !dbg !1564
  br i1 %41, label %panic44, label %checkok51, !dbg !1564

checkok51:                                        ; preds = %checkok42
  %42 = mul i64 %39, 1, !dbg !1564
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !1564
  %43 = load i64, ptr %len, align 8, !dbg !1565
  %sub52 = sub i64 %43, 1, !dbg !1565
  store i64 %sub52, ptr %len, align 8, !dbg !1565
  %44 = load %"char[]", ptr %bytes1, align 8, !dbg !1566
  %45 = extractvalue %"char[]" %44, 0, !dbg !1566
  %46 = extractvalue %"char[]" %44, 1, !dbg !1567
  %gt53 = icmp ugt i64 1, %46, !dbg !1567
  %47 = call i1 @llvm.expect.i1(i1 %gt53, i1 false), !dbg !1567
  br i1 %47, label %panic54, label %checkok61, !dbg !1567

checkok61:                                        ; preds = %checkok51
  %size62 = sub i64 %46, 1, !dbg !1566
  %ptradd63 = getelementptr inbounds i8, ptr %45, i64 1, !dbg !1566
  %48 = insertvalue %"char[]" undef, ptr %ptradd63, 0, !dbg !1566
  %49 = insertvalue %"char[]" %48, i64 %size62, 1, !dbg !1566
  store %"char[]" %49, ptr %bytes1, align 8, !dbg !1566
  br label %loop.cond, !dbg !1566

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.82, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1568
  %ptradd64 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1568
  %hi = load i64, ptr %ptradd64, align 8, !dbg !1568
  store %"any[]" zeroinitializer, ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.83, i64 11, ptr @.str.84, i64 21, i32 150, ptr byval(%"any[]") align 8 %indirectarg65), !dbg !1571
  unreachable, !dbg !1572

expr_block.exit:                                  ; preds = %checkok23
  ret void, !dbg !1572

panic:                                            ; preds = %entry
  %50 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1542
  call void %50(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.21, i64 10, i32 150) #5, !dbg !1542
  unreachable, !dbg !1542

panic3:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr4, align 8
  %51 = insertvalue %any undef, ptr %taddr4, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %52, ptr %varargslots, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1560
  unreachable, !dbg !1560

panic7:                                           ; preds = %checkok5
  store i64 %17, ptr %taddr8, align 8
  %54 = insertvalue %any undef, ptr %taddr8, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr9, align 8
  %56 = insertvalue %any undef, ptr %taddr9, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %55, ptr %varargslots10, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots10, i64 16
  store %any %57, ptr %ptradd11, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots10, 0
  %"$$temp12" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp12", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg13) #5, !dbg !1561
  unreachable, !dbg !1561

panic16:                                          ; preds = %checkok14
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr18, align 8
  %61 = insertvalue %any undef, ptr %taddr18, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %60, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %62, ptr %ptradd20, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg22) #5, !dbg !1561
  unreachable, !dbg !1561

panic26:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr28, align 8
  %66 = insertvalue %any undef, ptr %taddr28, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %65, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %67, ptr %ptradd30, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg32) #5, !dbg !1564
  unreachable, !dbg !1564

panic35:                                          ; preds = %checkok33
  store i64 0, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr37, align 8
  %71 = insertvalue %any undef, ptr %taddr37, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %70, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %72, ptr %ptradd39, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg41) #5, !dbg !1564
  unreachable, !dbg !1564

panic44:                                          ; preds = %checkok42
  store i64 %40, ptr %taddr45, align 8
  %74 = insertvalue %any undef, ptr %taddr45, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr46, align 8
  %76 = insertvalue %any undef, ptr %taddr46, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %75, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %77, ptr %ptradd48, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg50) #5, !dbg !1564
  unreachable, !dbg !1564

panic54:                                          ; preds = %checkok51
  store i64 %46, ptr %taddr55, align 8
  %79 = insertvalue %any undef, ptr %taddr55, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr56, align 8
  %81 = insertvalue %any undef, ptr %taddr56, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %80, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %82, ptr %ptradd58, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg60) #5, !dbg !1566
  unreachable, !dbg !1566
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc8Random.next_int128(ptr %0) #0 comdat !dbg !1573 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1576
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1576
  br i1 %2, label %panic, label %checkok, !dbg !1576

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1577, !DIExpression(), !1578)
  %3 = load ptr, ptr %self, align 8, !dbg !1579
  %4 = call i64 @std.math.random.Sfc8Random.next_long(ptr %3), !dbg !1581
  %zext = zext i64 %4 to i128, !dbg !1581
  %shl = shl i128 %zext, 64, !dbg !1581
  %5 = freeze i128 %shl, !dbg !1581
  %6 = load ptr, ptr %self, align 8, !dbg !1579
  %7 = call i64 @std.math.random.Sfc8Random.next_long(ptr %6), !dbg !1582
  %zext1 = zext i64 %7 to i128, !dbg !1582
  %add = add i128 %5, %zext1, !dbg !1581
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1578
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.29, i64 11, i32 151) #5, !dbg !1578
  unreachable, !dbg !1578
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc8Random.next_long(ptr %0) #0 comdat !dbg !1583 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1586
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1586
  br i1 %2, label %panic, label %checkok, !dbg !1586

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1587, !DIExpression(), !1588)
  %3 = load ptr, ptr %self, align 8, !dbg !1589
  %4 = call i32 @std.math.random.Sfc8Random.next_int(ptr %3), !dbg !1591
  %zext = zext i32 %4 to i64, !dbg !1591
  %shl = shl i64 %zext, 32, !dbg !1591
  %5 = freeze i64 %shl, !dbg !1591
  %6 = load ptr, ptr %self, align 8, !dbg !1589
  %7 = call i32 @std.math.random.Sfc8Random.next_int(ptr %6), !dbg !1592
  %zext1 = zext i32 %7 to i64, !dbg !1592
  %add = add i64 %5, %zext1, !dbg !1591
  ret i64 %add, !dbg !1591

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1588
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.19, i64 9, i32 152) #5, !dbg !1588
  unreachable, !dbg !1588
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc8Random.next_int(ptr %0) #0 comdat !dbg !1593 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1596
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1596
  br i1 %2, label %panic, label %checkok, !dbg !1596

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1597, !DIExpression(), !1598)
  %3 = load ptr, ptr %self, align 8, !dbg !1599
  %4 = call i16 @std.math.random.Sfc8Random.next_short(ptr %3), !dbg !1601
  %zext = zext i16 %4 to i32, !dbg !1601
  %shl = shl i32 %zext, 16, !dbg !1601
  %5 = freeze i32 %shl, !dbg !1601
  %6 = load ptr, ptr %self, align 8, !dbg !1599
  %7 = call i16 @std.math.random.Sfc8Random.next_short(ptr %6), !dbg !1602
  %zext1 = zext i16 %7 to i32, !dbg !1602
  %add = add i32 %5, %zext1, !dbg !1601
  ret i32 %add, !dbg !1601

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1598
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.30, i64 8, i32 153) #5, !dbg !1598
  unreachable, !dbg !1598
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc8Random.next_short(ptr %0) #0 comdat !dbg !1603 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1606
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1606
  br i1 %2, label %panic, label %checkok, !dbg !1606

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1607, !DIExpression(), !1608)
  %3 = load ptr, ptr %self, align 8, !dbg !1609
  %4 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %3), !dbg !1611
  %zext = zext i8 %4 to i16, !dbg !1611
  %zext1 = zext i16 %zext to i32, !dbg !1611
  %shl = shl i32 %zext1, 8, !dbg !1611
  %5 = freeze i32 %shl, !dbg !1611
  %6 = load ptr, ptr %self, align 8, !dbg !1609
  %7 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %6), !dbg !1612
  %zext2 = zext i8 %7 to i32, !dbg !1612
  %add = add i32 %5, %zext2, !dbg !1611
  %trunc = trunc i32 %add to i16, !dbg !1611
  ret i16 %trunc, !dbg !1611

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1608
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.67, i64 11, ptr @.func.31, i64 10, i32 154) #5, !dbg !1608
  unreachable, !dbg !1608
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.SimpleRandom.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1613 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %full = alloca [8 x i8], align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [1 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %expr = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %3 = icmp eq ptr %0, null, !dbg !1618
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1618
  br i1 %4, label %panic, label %checkok, !dbg !1618

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1619, !DIExpression(), !1620)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !1621, !DIExpression(), !1622)
    #dbg_declare(ptr %full, !1623, !DIExpression(), !1625)
  store i8 0, ptr %full, align 1, !dbg !1625
  %ptradd1 = getelementptr inbounds i8, ptr %full, i64 1, !dbg !1625
  store i8 0, ptr %ptradd1, align 1, !dbg !1625
  %ptradd2 = getelementptr inbounds i8, ptr %full, i64 2, !dbg !1625
  store i8 0, ptr %ptradd2, align 1, !dbg !1625
  %ptradd3 = getelementptr inbounds i8, ptr %full, i64 3, !dbg !1625
  store i8 0, ptr %ptradd3, align 1, !dbg !1625
  %ptradd4 = getelementptr inbounds i8, ptr %full, i64 4, !dbg !1625
  store i8 0, ptr %ptradd4, align 1, !dbg !1625
  %ptradd5 = getelementptr inbounds i8, ptr %full, i64 5, !dbg !1625
  store i8 0, ptr %ptradd5, align 1, !dbg !1625
  %ptradd6 = getelementptr inbounds i8, ptr %full, i64 6, !dbg !1625
  store i8 0, ptr %ptradd6, align 1, !dbg !1625
  %ptradd7 = getelementptr inbounds i8, ptr %full, i64 7, !dbg !1625
  store i8 0, ptr %ptradd7, align 1, !dbg !1625
  %ptradd8 = getelementptr inbounds i8, ptr %seed, i64 8, !dbg !1626
  %5 = load i64, ptr %ptradd8, align 8, !dbg !1626
    #dbg_declare(ptr %.anon, !1628, !DIExpression(), !1629)
  store i64 0, ptr %.anon, align 8, !dbg !1629
  br label %loop.cond, !dbg !1629

loop.cond:                                        ; preds = %checkok30, %checkok
  %6 = load i64, ptr %.anon, align 8, !dbg !1629
  %lt = icmp ult i64 %6, %5, !dbg !1629
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1629

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !1630, !DIExpression(), !1632)
  %7 = load i64, ptr %.anon, align 8, !dbg !1632
  store i64 %7, ptr %i, align 8, !dbg !1632
    #dbg_declare(ptr %c, !1633, !DIExpression(), !1634)
  %ptradd9 = getelementptr inbounds i8, ptr %seed, i64 8, !dbg !1635
  %8 = load i64, ptr %ptradd9, align 8, !dbg !1635
  %9 = load ptr, ptr %seed, align 8, !dbg !1635
  %10 = load i64, ptr %.anon, align 8, !dbg !1632
  %ge = icmp uge i64 %10, %8, !dbg !1632
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1632
  br i1 %11, label %panic10, label %checkok13, !dbg !1632

checkok13:                                        ; preds = %loop.body
  %ptradd14 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !1632
  %12 = load i8, ptr %ptradd14, align 1, !dbg !1632
  store i8 %12, ptr %c, align 1, !dbg !1632
  %13 = load i64, ptr %i, align 8, !dbg !1636
  %smod = srem i64 %13, 8, !dbg !1636
  %lt15 = icmp slt i64 %smod, 0, !dbg !1636
  %14 = call i1 @llvm.expect.i1(i1 %lt15, i1 false), !dbg !1636
  br i1 %14, label %panic16, label %checkok21, !dbg !1636

checkok21:                                        ; preds = %checkok13
  %ge22 = icmp sge i64 %smod, 8, !dbg !1636
  %15 = call i1 @llvm.expect.i1(i1 %ge22, i1 false), !dbg !1636
  br i1 %15, label %panic23, label %checkok30, !dbg !1636

checkok30:                                        ; preds = %checkok21
  %ptradd31 = getelementptr inbounds i8, ptr %full, i64 %smod, !dbg !1636
  %16 = load i8, ptr %ptradd31, align 1, !dbg !1636
  %17 = load i8, ptr %c, align 1, !dbg !1638
  %xor = xor i8 %16, %17, !dbg !1639
  store i8 %xor, ptr %ptradd31, align 1, !dbg !1639
  %18 = load i64, ptr %.anon, align 8, !dbg !1629
  %addnuw = add nuw i64 %18, 1, !dbg !1629
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1629
  br label %loop.cond, !dbg !1629

loop.exit:                                        ; preds = %loop.cond
  %19 = load ptr, ptr %self, align 8, !dbg !1640
  %checknull = icmp eq ptr %19, null, !dbg !1640
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1640
  br i1 %20, label %panic32, label %checkok33, !dbg !1640

checkok33:                                        ; preds = %loop.exit
  %21 = ptrtoint ptr %19 to i64, !dbg !1640
  %22 = urem i64 %21, 8, !dbg !1640
  %23 = icmp ne i64 %22, 0, !dbg !1640
  %24 = call i1 @llvm.expect.i1(i1 %23, i1 false), !dbg !1640
  br i1 %24, label %panic34, label %checkok41, !dbg !1640

checkok41:                                        ; preds = %checkok33
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %full, i32 8, i1 false)
    #dbg_declare(ptr %x, !1641, !DIExpression(), !1643)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %x, ptr align 1 %expr, i64 8, i1 false), !dbg !1645
  %25 = load i64, ptr %x, align 8, !dbg !1646
  %xor42 = xor i64 %25, 25214903917, !dbg !1647
  %and = and i64 %xor42, 281474976710655, !dbg !1647
  store i64 %and, ptr %19, align 8, !dbg !1647
  ret void, !dbg !1647

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1620
  call void %26(ptr @.panic_msg.14, i64 62, ptr @.file.87, i64 21, ptr @.func.16, i64 8, i32 6) #5, !dbg !1620
  unreachable, !dbg !1620

panic10:                                          ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %27 = insertvalue %any undef, ptr %taddr, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr11, align 8
  %29 = insertvalue %any undef, ptr %taddr11, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd12, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.87, i64 21, ptr @.func.16, i64 8, i32 9, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1632
  unreachable, !dbg !1632

panic16:                                          ; preds = %checkok13
  store i64 %smod, ptr %taddr17, align 8
  %32 = insertvalue %any undef, ptr %taddr17, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %33, ptr %varargslots18, align 16
  %34 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp19" = insertvalue %"any[]" %34, i64 1, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.51, i64 38, ptr @.file.87, i64 21, ptr @.func.16, i64 8, i32 11, ptr byval(%"any[]") align 8 %indirectarg20) #5, !dbg !1636
  unreachable, !dbg !1636

panic23:                                          ; preds = %checkok21
  store i64 8, ptr %taddr24, align 8
  %35 = insertvalue %any undef, ptr %taddr24, 0
  %36 = insertvalue %any %35, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %smod, ptr %taddr25, align 8
  %37 = insertvalue %any undef, ptr %taddr25, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %36, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %38, ptr %ptradd27, align 16
  %39 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %39, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 59, ptr @.file.87, i64 21, ptr @.func.16, i64 8, i32 11, ptr byval(%"any[]") align 8 %indirectarg29) #5, !dbg !1636
  unreachable, !dbg !1636

panic32:                                          ; preds = %loop.exit
  %40 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1640
  call void %40(ptr @.panic_msg.17, i64 45, ptr @.file.87, i64 21, ptr @.func.16, i64 8, i32 13) #5, !dbg !1640
  unreachable, !dbg !1640

panic34:                                          ; preds = %checkok33
  store i64 8, ptr %taddr35, align 8
  %41 = insertvalue %any undef, ptr %taddr35, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr36, align 8
  %43 = insertvalue %any undef, ptr %taddr36, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %42, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %44, ptr %ptradd38, align 16
  %45 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %45, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.87, i64 21, ptr @.func.16, i64 8, i32 13, ptr byval(%"any[]") align 8 %indirectarg40) #5, !dbg !1640
  unreachable, !dbg !1640
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.SimpleRandom.next_int(ptr %0) #0 comdat !dbg !1648 {
entry:
  %self = alloca ptr, align 8
  %nextseed = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1651
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1651
  br i1 %2, label %panic, label %checkok, !dbg !1651

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1652, !DIExpression(), !1653)
    #dbg_declare(ptr %nextseed, !1654, !DIExpression(), !1655)
  %3 = load ptr, ptr %self, align 8, !dbg !1656
  %checknull = icmp eq ptr %3, null, !dbg !1656
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1656
  br i1 %4, label %panic1, label %checkok2, !dbg !1656

checkok2:                                         ; preds = %checkok
  %5 = ptrtoint ptr %3 to i64, !dbg !1656
  %6 = urem i64 %5, 8, !dbg !1656
  %7 = icmp ne i64 %6, 0, !dbg !1656
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !1656
  br i1 %8, label %panic3, label %checkok5, !dbg !1656

checkok5:                                         ; preds = %checkok2
  %9 = load i64, ptr %3, align 8, !dbg !1656
  %mul = mul i64 %9, 25214903917, !dbg !1657
  %add = add i64 %mul, 11, !dbg !1657
  %and = and i64 %add, 281474976710655, !dbg !1657
  store i64 %and, ptr %nextseed, align 8, !dbg !1657
  %10 = load ptr, ptr %self, align 8, !dbg !1658
  %checknull6 = icmp eq ptr %10, null, !dbg !1658
  %11 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !1658
  br i1 %11, label %panic7, label %checkok8, !dbg !1658

checkok8:                                         ; preds = %checkok5
  %12 = ptrtoint ptr %10 to i64, !dbg !1658
  %13 = urem i64 %12, 8, !dbg !1658
  %14 = icmp ne i64 %13, 0, !dbg !1658
  %15 = call i1 @llvm.expect.i1(i1 %14, i1 false), !dbg !1658
  br i1 %15, label %panic9, label %checkok16, !dbg !1658

checkok16:                                        ; preds = %checkok8
  %16 = load i64, ptr %nextseed, align 8, !dbg !1659
  store i64 %16, ptr %10, align 8, !dbg !1659
  %17 = load i64, ptr %nextseed, align 8, !dbg !1660
  %lshr = lshr i64 %17, 16, !dbg !1661
  %18 = freeze i64 %lshr, !dbg !1661
  %trunc = trunc i64 %18 to i32, !dbg !1661
  ret i32 %trunc, !dbg !1661

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1653
  call void %19(ptr @.panic_msg.14, i64 62, ptr @.file.87, i64 21, ptr @.func.30, i64 8, i32 16) #5, !dbg !1653
  unreachable, !dbg !1653

panic1:                                           ; preds = %checkok
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1656
  call void %20(ptr @.panic_msg.17, i64 45, ptr @.file.87, i64 21, ptr @.func.30, i64 8, i32 18) #5, !dbg !1656
  unreachable, !dbg !1656

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr4, align 8
  %23 = insertvalue %any undef, ptr %taddr4, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.87, i64 21, ptr @.func.30, i64 8, i32 18, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1656
  unreachable, !dbg !1656

panic7:                                           ; preds = %checkok5
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1658
  call void %26(ptr @.panic_msg.17, i64 45, ptr @.file.87, i64 21, ptr @.func.30, i64 8, i32 19) #5, !dbg !1658
  unreachable, !dbg !1658

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr10, align 8
  %27 = insertvalue %any undef, ptr %taddr10, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr11, align 8
  %29 = insertvalue %any undef, ptr %taddr11, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %30, ptr %ptradd13, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.87, i64 21, ptr @.func.30, i64 8, i32 19, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1658
  unreachable, !dbg !1658
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.SimpleRandom.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1662 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1663
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1663
  br i1 %4, label %panic, label %checkok, !dbg !1663

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1664, !DIExpression(), !1665)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1666, !DIExpression(), !1667)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1668
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1668
  %lt = icmp ult i64 0, %5, !dbg !1668
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1668

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1668
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.87, i64 21, ptr @.func.21, i64 10, i32 24) #5, !dbg !1668
  unreachable, !dbg !1668

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1670, !DIExpression(), !1672)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1673
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1673
  store i64 %7, ptr %len, align 8, !dbg !1673
  br label %loop.cond, !dbg !1674

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1675
  %lt4 = icmp ult i64 0, %8, !dbg !1675
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1675

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1677, !DIExpression(), !1679)
  %9 = load ptr, ptr %self, align 8, !dbg !1680
  %10 = call i32 @std.math.random.SimpleRandom.next_int(ptr %9), !dbg !1681
  store i32 %10, ptr %value, align 4, !dbg !1681
  %11 = load i64, ptr %len, align 8, !dbg !1682
  %le = icmp ule i64 %11, 4, !dbg !1682
  br i1 %le, label %if.then, label %if.exit, !dbg !1682

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1683
  %add = add i64 0, %13, !dbg !1683
  %gt = icmp ugt i64 0, %add, !dbg !1683
  %sub = sub i64 %add, 0, !dbg !1683
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1683
  br i1 %14, label %panic5, label %checkok7, !dbg !1683

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1685
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1685
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !1685
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !1686
  %18 = extractvalue %"char[]" %17, 0, !dbg !1686
  %19 = extractvalue %"char[]" %17, 1, !dbg !1687
  %gt8 = icmp ugt i64 0, %19, !dbg !1687
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !1687
  br i1 %20, label %panic9, label %checkok16, !dbg !1687

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !1686
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !1686
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !1686
  %23 = extractvalue %"char[]" %22, 0, !dbg !1686
  %24 = extractvalue %"char[]" %16, 0, !dbg !1686
  %25 = extractvalue %"char[]" %16, 1, !dbg !1686
  %26 = extractvalue %"char[]" %22, 1, !dbg !1686
  %neq = icmp ne i64 %26, %25, !dbg !1686
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1686
  br i1 %27, label %panic18, label %checkok25, !dbg !1686

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !1686
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !1686
  br label %expr_block.exit, !dbg !1688

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 4, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !1689
  %33 = extractvalue %"char[]" %32, 0, !dbg !1689
  %34 = extractvalue %"char[]" %32, 1, !dbg !1689
  %gt27 = icmp sgt i64 0, %34, !dbg !1689
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !1689
  br i1 %35, label %panic28, label %checkok35, !dbg !1689

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 4, !dbg !1689
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !1689
  br i1 %36, label %panic37, label %checkok44, !dbg !1689

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !1689
  %38 = insertvalue %"char[]" %37, i64 4, 1, !dbg !1689
  %39 = extractvalue %"char[]" %38, 0, !dbg !1689
  %40 = extractvalue %"char[]" %31, 0, !dbg !1689
  %41 = extractvalue %"char[]" %31, 1, !dbg !1689
  %42 = extractvalue %"char[]" %38, 1, !dbg !1689
  %neq45 = icmp ne i64 %42, %41, !dbg !1689
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !1689
  br i1 %43, label %panic46, label %checkok53, !dbg !1689

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !1689
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !1689
  %45 = load i64, ptr %len, align 8, !dbg !1690
  %sub54 = sub i64 %45, 4, !dbg !1690
  store i64 %sub54, ptr %len, align 8, !dbg !1690
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !1691
  %47 = extractvalue %"char[]" %46, 0, !dbg !1691
  %48 = extractvalue %"char[]" %46, 1, !dbg !1692
  %gt55 = icmp ugt i64 4, %48, !dbg !1692
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !1692
  br i1 %49, label %panic56, label %checkok63, !dbg !1692

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 4, !dbg !1691
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 4, !dbg !1691
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !1691
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !1691
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !1691
  br label %loop.cond, !dbg !1691

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.88, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1693
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1693
  %hi = load i64, ptr %ptradd66, align 8, !dbg !1693
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.89, i64 21, ptr @.str.90, i64 23, i32 26, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !1696
  unreachable, !dbg !1697

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !1697

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1665
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.87, i64 21, ptr @.func.21, i64 10, i32 26) #5, !dbg !1665
  unreachable, !dbg !1665

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1685
  unreachable, !dbg !1685

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1686
  unreachable, !dbg !1686

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !1686
  unreachable, !dbg !1686

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !1689
  unreachable, !dbg !1689

panic37:                                          ; preds = %checkok35
  store i64 3, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !1689
  unreachable, !dbg !1689

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !1689
  unreachable, !dbg !1689

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !1691
  unreachable, !dbg !1691
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.SimpleRandom.next_int128(ptr %0) #0 comdat !dbg !1698 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1701
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1701
  br i1 %2, label %panic, label %checkok, !dbg !1701

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1702, !DIExpression(), !1703)
  %3 = load ptr, ptr %self, align 8, !dbg !1704
  %4 = call i64 @std.math.random.SimpleRandom.next_long(ptr %3), !dbg !1706
  %zext = zext i64 %4 to i128, !dbg !1706
  %shl = shl i128 %zext, 64, !dbg !1706
  %5 = freeze i128 %shl, !dbg !1706
  %6 = load ptr, ptr %self, align 8, !dbg !1704
  %7 = call i64 @std.math.random.SimpleRandom.next_long(ptr %6), !dbg !1707
  %zext1 = zext i64 %7 to i128, !dbg !1707
  %add = add i128 %5, %zext1, !dbg !1706
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1703
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.87, i64 21, ptr @.func.29, i64 11, i32 27) #5, !dbg !1703
  unreachable, !dbg !1703
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.SimpleRandom.next_long(ptr %0) #0 comdat !dbg !1708 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1711
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1711
  br i1 %2, label %panic, label %checkok, !dbg !1711

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1712, !DIExpression(), !1713)
  %3 = load ptr, ptr %self, align 8, !dbg !1714
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !1716
  %zext = zext i32 %4 to i64, !dbg !1716
  %shl = shl i64 %zext, 32, !dbg !1716
  %5 = freeze i64 %shl, !dbg !1716
  %6 = load ptr, ptr %self, align 8, !dbg !1714
  %7 = call i32 @std.math.random.SimpleRandom.next_int(ptr %6), !dbg !1717
  %zext1 = zext i32 %7 to i64, !dbg !1717
  %add = add i64 %5, %zext1, !dbg !1716
  ret i64 %add, !dbg !1716

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1713
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.87, i64 21, ptr @.func.19, i64 9, i32 28) #5, !dbg !1713
  unreachable, !dbg !1713
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.SimpleRandom.next_short(ptr %0) #0 comdat !dbg !1718 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1721
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1721
  br i1 %2, label %panic, label %checkok, !dbg !1721

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1722, !DIExpression(), !1723)
  %3 = load ptr, ptr %self, align 8, !dbg !1724
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !1721
  %trunc = trunc i32 %4 to i16, !dbg !1721
  ret i16 %trunc, !dbg !1721

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1723
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.87, i64 21, ptr @.func.31, i64 10, i32 29) #5, !dbg !1723
  unreachable, !dbg !1723
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.SimpleRandom.next_byte(ptr %0) #0 comdat !dbg !1725 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1728
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1728
  br i1 %2, label %panic, label %checkok, !dbg !1728

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1729, !DIExpression(), !1730)
  %3 = load ptr, ptr %self, align 8, !dbg !1731
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !1728
  %trunc = trunc i32 %4 to i8, !dbg !1728
  ret i8 %trunc, !dbg !1728

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1730
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.87, i64 21, ptr @.func.32, i64 9, i32 30) #5, !dbg !1730
  unreachable, !dbg !1730
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1732 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %taddr8 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1737
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1737
  br i1 %4, label %panic, label %checkok, !dbg !1737

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1738, !DIExpression(), !1739)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !1740, !DIExpression(), !1741)
  %5 = load ptr, ptr %self, align 8, !dbg !1742
  %checknull = icmp eq ptr %5, null, !dbg !1742
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1742
  br i1 %6, label %panic1, label %checkok2, !dbg !1742

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1742
  %8 = urem i64 %7, 16, !dbg !1742
  %9 = icmp ne i64 %8, 0, !dbg !1742
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1742
  br i1 %10, label %panic3, label %checkok6, !dbg !1742

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1743, !DIExpression(), !1745)
  store i128 0, ptr %return_value, align 16, !dbg !1745
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 16, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 16), !dbg !1747
  %14 = load i128, ptr %return_value, align 16, !dbg !1748
  store i128 %14, ptr %5, align 16, !dbg !1748
  ret void, !dbg !1748

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1739
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.16, i64 8, i32 18) #5, !dbg !1739
  unreachable, !dbg !1739

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1742
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.106, i64 11, ptr @.func.16, i64 8, i32 20) #5, !dbg !1742
  unreachable, !dbg !1742

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.16, i64 8, i32 20, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1742
  unreachable, !dbg !1742
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg128Random.next_long(ptr %0) #0 comdat !dbg !1749 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1752
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1752
  br i1 %2, label %panic, label %checkok, !dbg !1752

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1753, !DIExpression(), !1754)
    #dbg_declare(ptr %s, !1755, !DIExpression(), !1756)
  %3 = load ptr, ptr %self, align 8, !dbg !1757
  store ptr %3, ptr %s, align 8, !dbg !1757
    #dbg_declare(ptr %result, !1758, !DIExpression(), !1759)
  %4 = load ptr, ptr %s, align 8, !dbg !1760
  %checknull = icmp eq ptr %4, null, !dbg !1760
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1760
  br i1 %5, label %panic1, label %checkok2, !dbg !1760

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !1760
  %7 = urem i64 %6, 16, !dbg !1760
  %8 = icmp ne i64 %7, 0, !dbg !1760
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !1760
  br i1 %9, label %panic3, label %checkok5, !dbg !1760

checkok5:                                         ; preds = %checkok2
  %10 = load i128, ptr %4, align 16, !dbg !1760
  %lshr = lshr i128 %10, 64, !dbg !1761
  %11 = freeze i128 %lshr, !dbg !1761
  %trunc = trunc i128 %11 to i64, !dbg !1761
  store i64 %trunc, ptr %result, align 8, !dbg !1761
  %12 = load ptr, ptr %s, align 8, !dbg !1762
  %checknull6 = icmp eq ptr %12, null, !dbg !1762
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !1762
  br i1 %13, label %panic7, label %checkok8, !dbg !1762

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !1762
  %15 = urem i64 %14, 16, !dbg !1762
  %16 = icmp ne i64 %15, 0, !dbg !1762
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !1762
  br i1 %17, label %panic9, label %checkok16, !dbg !1762

checkok16:                                        ; preds = %checkok8
  %18 = load ptr, ptr %s, align 8, !dbg !1763
  %checknull17 = icmp eq ptr %18, null, !dbg !1763
  %19 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !1763
  br i1 %19, label %panic18, label %checkok19, !dbg !1763

checkok19:                                        ; preds = %checkok16
  %20 = ptrtoint ptr %18 to i64, !dbg !1763
  %21 = urem i64 %20, 16, !dbg !1763
  %22 = icmp ne i64 %21, 0, !dbg !1763
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false), !dbg !1763
  br i1 %23, label %panic20, label %checkok27, !dbg !1763

checkok27:                                        ; preds = %checkok19
  %24 = load i128, ptr %18, align 16, !dbg !1763
  %mul = mul i128 %24, -48899967401452674293065485854872568811, !dbg !1764
  %add = add i128 %mul, -129976298391535590297638237547755878347, !dbg !1764
  store i128 %add, ptr %12, align 16, !dbg !1764
  %25 = load i64, ptr %result, align 8, !dbg !1765
  ret i64 %25, !dbg !1765

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1754
  call void %26(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.19, i64 9, i32 24) #5, !dbg !1754
  unreachable, !dbg !1754

panic1:                                           ; preds = %checkok
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1760
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.106, i64 11, ptr @.func.19, i64 9, i32 27) #5, !dbg !1760
  unreachable, !dbg !1760

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %30 = insertvalue %any undef, ptr %taddr4, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.19, i64 9, i32 27, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1760
  unreachable, !dbg !1760

panic7:                                           ; preds = %checkok5
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1762
  call void %33(ptr @.panic_msg.20, i64 42, ptr @.file.106, i64 11, ptr @.func.19, i64 9, i32 28) #5, !dbg !1762
  unreachable, !dbg !1762

panic9:                                           ; preds = %checkok8
  store i64 16, ptr %taddr10, align 8
  %34 = insertvalue %any undef, ptr %taddr10, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %36 = insertvalue %any undef, ptr %taddr11, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %35, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %37, ptr %ptradd13, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.19, i64 9, i32 28, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1762
  unreachable, !dbg !1762

panic18:                                          ; preds = %checkok16
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1763
  call void %39(ptr @.panic_msg.20, i64 42, ptr @.file.106, i64 11, ptr @.func.19, i64 9, i32 28) #5, !dbg !1763
  unreachable, !dbg !1763

panic20:                                          ; preds = %checkok19
  store i64 16, ptr %taddr21, align 8
  %40 = insertvalue %any undef, ptr %taddr21, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr22, align 8
  %42 = insertvalue %any undef, ptr %taddr22, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %41, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %43, ptr %ptradd24, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.19, i64 9, i32 28, ptr byval(%"any[]") align 8 %indirectarg26) #5, !dbg !1763
  unreachable, !dbg !1763
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1766 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1767
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1767
  br i1 %4, label %panic, label %checkok, !dbg !1767

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1768, !DIExpression(), !1769)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1770, !DIExpression(), !1771)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1772
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1772
  %lt = icmp ult i64 0, %5, !dbg !1772
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1772

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1772
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.106, i64 11, ptr @.func.21, i64 10, i32 33) #5, !dbg !1772
  unreachable, !dbg !1772

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1774, !DIExpression(), !1776)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1777
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1777
  store i64 %7, ptr %len, align 8, !dbg !1777
  br label %loop.cond, !dbg !1778

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1779
  %lt4 = icmp ult i64 0, %8, !dbg !1779
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1779

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1781, !DIExpression(), !1783)
  %9 = load ptr, ptr %self, align 8, !dbg !1784
  %10 = call i64 @std.math.random.Lcg128Random.next_long(ptr %9), !dbg !1785
  store i64 %10, ptr %value, align 8, !dbg !1785
  %11 = load i64, ptr %len, align 8, !dbg !1786
  %le = icmp ule i64 %11, 8, !dbg !1786
  br i1 %le, label %if.then, label %if.exit, !dbg !1786

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1787
  %add = add i64 0, %13, !dbg !1787
  %gt = icmp ugt i64 0, %add, !dbg !1787
  %sub = sub i64 %add, 0, !dbg !1787
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1787
  br i1 %14, label %panic5, label %checkok7, !dbg !1787

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1789
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1789
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !1789
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !1790
  %18 = extractvalue %"char[]" %17, 0, !dbg !1790
  %19 = extractvalue %"char[]" %17, 1, !dbg !1791
  %gt8 = icmp ugt i64 0, %19, !dbg !1791
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !1791
  br i1 %20, label %panic9, label %checkok16, !dbg !1791

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !1790
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !1790
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !1790
  %23 = extractvalue %"char[]" %22, 0, !dbg !1790
  %24 = extractvalue %"char[]" %16, 0, !dbg !1790
  %25 = extractvalue %"char[]" %16, 1, !dbg !1790
  %26 = extractvalue %"char[]" %22, 1, !dbg !1790
  %neq = icmp ne i64 %26, %25, !dbg !1790
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1790
  br i1 %27, label %panic18, label %checkok25, !dbg !1790

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !1790
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !1790
  br label %expr_block.exit, !dbg !1792

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 8, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !1793
  %33 = extractvalue %"char[]" %32, 0, !dbg !1793
  %34 = extractvalue %"char[]" %32, 1, !dbg !1793
  %gt27 = icmp sgt i64 0, %34, !dbg !1793
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !1793
  br i1 %35, label %panic28, label %checkok35, !dbg !1793

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 8, !dbg !1793
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !1793
  br i1 %36, label %panic37, label %checkok44, !dbg !1793

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !1793
  %38 = insertvalue %"char[]" %37, i64 8, 1, !dbg !1793
  %39 = extractvalue %"char[]" %38, 0, !dbg !1793
  %40 = extractvalue %"char[]" %31, 0, !dbg !1793
  %41 = extractvalue %"char[]" %31, 1, !dbg !1793
  %42 = extractvalue %"char[]" %38, 1, !dbg !1793
  %neq45 = icmp ne i64 %42, %41, !dbg !1793
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !1793
  br i1 %43, label %panic46, label %checkok53, !dbg !1793

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !1793
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !1793
  %45 = load i64, ptr %len, align 8, !dbg !1794
  %sub54 = sub i64 %45, 8, !dbg !1794
  store i64 %sub54, ptr %len, align 8, !dbg !1794
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !1795
  %47 = extractvalue %"char[]" %46, 0, !dbg !1795
  %48 = extractvalue %"char[]" %46, 1, !dbg !1796
  %gt55 = icmp ugt i64 8, %48, !dbg !1796
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !1796
  br i1 %49, label %panic56, label %checkok63, !dbg !1796

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 8, !dbg !1795
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 8, !dbg !1795
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !1795
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !1795
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !1795
  br label %loop.cond, !dbg !1795

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.107, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1797
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1797
  %hi = load i64, ptr %ptradd66, align 8, !dbg !1797
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.108, i64 11, ptr @.str.109, i64 23, i32 35, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !1800
  unreachable, !dbg !1801

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !1801

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1769
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.21, i64 10, i32 35) #5, !dbg !1769
  unreachable, !dbg !1769

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1789
  unreachable, !dbg !1789

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1790
  unreachable, !dbg !1790

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !1790
  unreachable, !dbg !1790

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !1793
  unreachable, !dbg !1793

panic37:                                          ; preds = %checkok35
  store i64 7, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !1793
  unreachable, !dbg !1793

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !1793
  unreachable, !dbg !1793

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !1795
  unreachable, !dbg !1795
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Lcg128Random.next_int128(ptr %0) #0 comdat !dbg !1802 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1805
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1805
  br i1 %2, label %panic, label %checkok, !dbg !1805

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1806, !DIExpression(), !1807)
  %3 = load ptr, ptr %self, align 8, !dbg !1808
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !1810
  %zext = zext i64 %4 to i128, !dbg !1810
  %shl = shl i128 %zext, 64, !dbg !1810
  %5 = freeze i128 %shl, !dbg !1810
  %6 = load ptr, ptr %self, align 8, !dbg !1808
  %7 = call i64 @std.math.random.Lcg128Random.next_long(ptr %6), !dbg !1811
  %zext1 = zext i64 %7 to i128, !dbg !1811
  %add = add i128 %5, %zext1, !dbg !1810
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1807
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.29, i64 11, i32 36) #5, !dbg !1807
  unreachable, !dbg !1807
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg128Random.next_int(ptr %0) #0 comdat !dbg !1812 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1815
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1815
  br i1 %2, label %panic, label %checkok, !dbg !1815

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1816, !DIExpression(), !1817)
  %3 = load ptr, ptr %self, align 8, !dbg !1818
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !1815
  %trunc = trunc i64 %4 to i32, !dbg !1815
  ret i32 %trunc, !dbg !1815

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1817
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.30, i64 8, i32 37) #5, !dbg !1817
  unreachable, !dbg !1817
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Lcg128Random.next_short(ptr %0) #0 comdat !dbg !1819 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1822
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1822
  br i1 %2, label %panic, label %checkok, !dbg !1822

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1823, !DIExpression(), !1824)
  %3 = load ptr, ptr %self, align 8, !dbg !1825
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !1822
  %trunc = trunc i64 %4 to i16, !dbg !1822
  ret i16 %trunc, !dbg !1822

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1824
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.31, i64 10, i32 38) #5, !dbg !1824
  unreachable, !dbg !1824
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Lcg128Random.next_byte(ptr %0) #0 comdat !dbg !1826 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1829
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1829
  br i1 %2, label %panic, label %checkok, !dbg !1829

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1830, !DIExpression(), !1831)
  %3 = load ptr, ptr %self, align 8, !dbg !1832
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !1829
  %trunc = trunc i64 %4 to i8, !dbg !1829
  ret i8 %trunc, !dbg !1829

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1831
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.32, i64 9, i32 39) #5, !dbg !1831
  unreachable, !dbg !1831
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1833 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %taddr7 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1838
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1838
  br i1 %4, label %panic, label %checkok, !dbg !1838

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1839, !DIExpression(), !1840)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !1841, !DIExpression(), !1842)
  %5 = load ptr, ptr %self, align 8, !dbg !1843
  %checknull = icmp eq ptr %5, null, !dbg !1843
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1843
  br i1 %6, label %panic1, label %checkok2, !dbg !1843

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1843
  %8 = urem i64 %7, 8, !dbg !1843
  %9 = icmp ne i64 %8, 0, !dbg !1843
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1843
  br i1 %10, label %panic3, label %checkok6, !dbg !1843

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1844, !DIExpression(), !1846)
  store i64 0, ptr %return_value, align 8, !dbg !1846
  store ptr %return_value, ptr %taddr7, align 8
  %11 = load ptr, ptr %taddr7, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 8, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 8), !dbg !1848
  %14 = load i64, ptr %return_value, align 8, !dbg !1849
  store i64 %14, ptr %5, align 8, !dbg !1849
  ret void, !dbg !1849

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1840
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.16, i64 8, i32 45) #5, !dbg !1840
  unreachable, !dbg !1840

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1843
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.106, i64 11, ptr @.func.16, i64 8, i32 47) #5, !dbg !1843
  unreachable, !dbg !1843

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.16, i64 8, i32 47, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1843
  unreachable, !dbg !1843
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg64Random.next_int(ptr %0) #0 comdat !dbg !1850 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1853
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1853
  br i1 %2, label %panic, label %checkok, !dbg !1853

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1854, !DIExpression(), !1855)
    #dbg_declare(ptr %s, !1856, !DIExpression(), !1857)
  %3 = load ptr, ptr %self, align 8, !dbg !1858
  store ptr %3, ptr %s, align 8, !dbg !1858
    #dbg_declare(ptr %result, !1859, !DIExpression(), !1860)
  %4 = load ptr, ptr %s, align 8, !dbg !1861
  %checknull = icmp eq ptr %4, null, !dbg !1861
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1861
  br i1 %5, label %panic1, label %checkok2, !dbg !1861

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !1861
  %7 = urem i64 %6, 8, !dbg !1861
  %8 = icmp ne i64 %7, 0, !dbg !1861
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !1861
  br i1 %9, label %panic3, label %checkok5, !dbg !1861

checkok5:                                         ; preds = %checkok2
  %10 = load i64, ptr %4, align 8, !dbg !1861
  %lshr = lshr i64 %10, 32, !dbg !1862
  %11 = freeze i64 %lshr, !dbg !1862
  %trunc = trunc i64 %11 to i32, !dbg !1862
  store i32 %trunc, ptr %result, align 4, !dbg !1862
  %12 = load ptr, ptr %s, align 8, !dbg !1863
  %checknull6 = icmp eq ptr %12, null, !dbg !1863
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !1863
  br i1 %13, label %panic7, label %checkok8, !dbg !1863

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !1863
  %15 = urem i64 %14, 8, !dbg !1863
  %16 = icmp ne i64 %15, 0, !dbg !1863
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !1863
  br i1 %17, label %panic9, label %checkok16, !dbg !1863

checkok16:                                        ; preds = %checkok8
  %18 = load ptr, ptr %s, align 8, !dbg !1864
  %checknull17 = icmp eq ptr %18, null, !dbg !1864
  %19 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !1864
  br i1 %19, label %panic18, label %checkok19, !dbg !1864

checkok19:                                        ; preds = %checkok16
  %20 = ptrtoint ptr %18 to i64, !dbg !1864
  %21 = urem i64 %20, 8, !dbg !1864
  %22 = icmp ne i64 %21, 0, !dbg !1864
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false), !dbg !1864
  br i1 %23, label %panic20, label %checkok27, !dbg !1864

checkok27:                                        ; preds = %checkok19
  %24 = load i64, ptr %18, align 8, !dbg !1864
  %mul = mul i64 %24, -3372029247567499371, !dbg !1865
  %add = add i64 %mul, -7046029254386353131, !dbg !1865
  store i64 %add, ptr %12, align 8, !dbg !1865
  %25 = load i32, ptr %result, align 4, !dbg !1866
  ret i32 %25, !dbg !1866

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1855
  call void %26(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.30, i64 8, i32 51) #5, !dbg !1855
  unreachable, !dbg !1855

panic1:                                           ; preds = %checkok
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1861
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.106, i64 11, ptr @.func.30, i64 8, i32 54) #5, !dbg !1861
  unreachable, !dbg !1861

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %30 = insertvalue %any undef, ptr %taddr4, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.30, i64 8, i32 54, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1861
  unreachable, !dbg !1861

panic7:                                           ; preds = %checkok5
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1863
  call void %33(ptr @.panic_msg.20, i64 42, ptr @.file.106, i64 11, ptr @.func.30, i64 8, i32 55) #5, !dbg !1863
  unreachable, !dbg !1863

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr10, align 8
  %34 = insertvalue %any undef, ptr %taddr10, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %36 = insertvalue %any undef, ptr %taddr11, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %35, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %37, ptr %ptradd13, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.30, i64 8, i32 55, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1863
  unreachable, !dbg !1863

panic18:                                          ; preds = %checkok16
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1864
  call void %39(ptr @.panic_msg.20, i64 42, ptr @.file.106, i64 11, ptr @.func.30, i64 8, i32 55) #5, !dbg !1864
  unreachable, !dbg !1864

panic20:                                          ; preds = %checkok19
  store i64 8, ptr %taddr21, align 8
  %40 = insertvalue %any undef, ptr %taddr21, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr22, align 8
  %42 = insertvalue %any undef, ptr %taddr22, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %41, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %43, ptr %ptradd24, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.30, i64 8, i32 55, ptr byval(%"any[]") align 8 %indirectarg26) #5, !dbg !1864
  unreachable, !dbg !1864
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1867 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1868
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1868
  br i1 %4, label %panic, label %checkok, !dbg !1868

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1869, !DIExpression(), !1870)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1871, !DIExpression(), !1872)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1873
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1873
  %lt = icmp ult i64 0, %5, !dbg !1873
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1873

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1873
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.106, i64 11, ptr @.func.21, i64 10, i32 60) #5, !dbg !1873
  unreachable, !dbg !1873

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1875, !DIExpression(), !1877)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1878
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1878
  store i64 %7, ptr %len, align 8, !dbg !1878
  br label %loop.cond, !dbg !1879

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1880
  %lt4 = icmp ult i64 0, %8, !dbg !1880
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1880

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1882, !DIExpression(), !1884)
  %9 = load ptr, ptr %self, align 8, !dbg !1885
  %10 = call i32 @std.math.random.Lcg64Random.next_int(ptr %9), !dbg !1886
  store i32 %10, ptr %value, align 4, !dbg !1886
  %11 = load i64, ptr %len, align 8, !dbg !1887
  %le = icmp ule i64 %11, 4, !dbg !1887
  br i1 %le, label %if.then, label %if.exit, !dbg !1887

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1888
  %add = add i64 0, %13, !dbg !1888
  %gt = icmp ugt i64 0, %add, !dbg !1888
  %sub = sub i64 %add, 0, !dbg !1888
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1888
  br i1 %14, label %panic5, label %checkok7, !dbg !1888

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1890
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1890
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !1890
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !1891
  %18 = extractvalue %"char[]" %17, 0, !dbg !1891
  %19 = extractvalue %"char[]" %17, 1, !dbg !1892
  %gt8 = icmp ugt i64 0, %19, !dbg !1892
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !1892
  br i1 %20, label %panic9, label %checkok16, !dbg !1892

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !1891
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !1891
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !1891
  %23 = extractvalue %"char[]" %22, 0, !dbg !1891
  %24 = extractvalue %"char[]" %16, 0, !dbg !1891
  %25 = extractvalue %"char[]" %16, 1, !dbg !1891
  %26 = extractvalue %"char[]" %22, 1, !dbg !1891
  %neq = icmp ne i64 %26, %25, !dbg !1891
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1891
  br i1 %27, label %panic18, label %checkok25, !dbg !1891

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !1891
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !1891
  br label %expr_block.exit, !dbg !1893

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 4, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !1894
  %33 = extractvalue %"char[]" %32, 0, !dbg !1894
  %34 = extractvalue %"char[]" %32, 1, !dbg !1894
  %gt27 = icmp sgt i64 0, %34, !dbg !1894
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !1894
  br i1 %35, label %panic28, label %checkok35, !dbg !1894

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 4, !dbg !1894
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !1894
  br i1 %36, label %panic37, label %checkok44, !dbg !1894

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !1894
  %38 = insertvalue %"char[]" %37, i64 4, 1, !dbg !1894
  %39 = extractvalue %"char[]" %38, 0, !dbg !1894
  %40 = extractvalue %"char[]" %31, 0, !dbg !1894
  %41 = extractvalue %"char[]" %31, 1, !dbg !1894
  %42 = extractvalue %"char[]" %38, 1, !dbg !1894
  %neq45 = icmp ne i64 %42, %41, !dbg !1894
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !1894
  br i1 %43, label %panic46, label %checkok53, !dbg !1894

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !1894
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !1894
  %45 = load i64, ptr %len, align 8, !dbg !1895
  %sub54 = sub i64 %45, 4, !dbg !1895
  store i64 %sub54, ptr %len, align 8, !dbg !1895
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !1896
  %47 = extractvalue %"char[]" %46, 0, !dbg !1896
  %48 = extractvalue %"char[]" %46, 1, !dbg !1897
  %gt55 = icmp ugt i64 4, %48, !dbg !1897
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !1897
  br i1 %49, label %panic56, label %checkok63, !dbg !1897

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 4, !dbg !1896
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 4, !dbg !1896
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !1896
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !1896
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !1896
  br label %loop.cond, !dbg !1896

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.110, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1898
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1898
  %hi = load i64, ptr %ptradd66, align 8, !dbg !1898
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.111, i64 11, ptr @.str.112, i64 22, i32 62, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !1901
  unreachable, !dbg !1902

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !1902

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1870
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.21, i64 10, i32 62) #5, !dbg !1870
  unreachable, !dbg !1870

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1890
  unreachable, !dbg !1890

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1891
  unreachable, !dbg !1891

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !1891
  unreachable, !dbg !1891

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !1894
  unreachable, !dbg !1894

panic37:                                          ; preds = %checkok35
  store i64 3, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !1894
  unreachable, !dbg !1894

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !1894
  unreachable, !dbg !1894

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !1896
  unreachable, !dbg !1896
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Lcg64Random.next_int128(ptr %0) #0 comdat !dbg !1903 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1906
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1906
  br i1 %2, label %panic, label %checkok, !dbg !1906

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1907, !DIExpression(), !1908)
  %3 = load ptr, ptr %self, align 8, !dbg !1909
  %4 = call i64 @std.math.random.Lcg64Random.next_long(ptr %3), !dbg !1911
  %zext = zext i64 %4 to i128, !dbg !1911
  %shl = shl i128 %zext, 64, !dbg !1911
  %5 = freeze i128 %shl, !dbg !1911
  %6 = load ptr, ptr %self, align 8, !dbg !1909
  %7 = call i64 @std.math.random.Lcg64Random.next_long(ptr %6), !dbg !1912
  %zext1 = zext i64 %7 to i128, !dbg !1912
  %add = add i128 %5, %zext1, !dbg !1911
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1908
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.29, i64 11, i32 63) #5, !dbg !1908
  unreachable, !dbg !1908
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg64Random.next_long(ptr %0) #0 comdat !dbg !1913 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1916
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1916
  br i1 %2, label %panic, label %checkok, !dbg !1916

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1917, !DIExpression(), !1918)
  %3 = load ptr, ptr %self, align 8, !dbg !1919
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !1921
  %zext = zext i32 %4 to i64, !dbg !1921
  %shl = shl i64 %zext, 32, !dbg !1921
  %5 = freeze i64 %shl, !dbg !1921
  %6 = load ptr, ptr %self, align 8, !dbg !1919
  %7 = call i32 @std.math.random.Lcg64Random.next_int(ptr %6), !dbg !1922
  %zext1 = zext i32 %7 to i64, !dbg !1922
  %add = add i64 %5, %zext1, !dbg !1921
  ret i64 %add, !dbg !1921

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1918
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.19, i64 9, i32 64) #5, !dbg !1918
  unreachable, !dbg !1918
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Lcg64Random.next_short(ptr %0) #0 comdat !dbg !1923 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1926
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1926
  br i1 %2, label %panic, label %checkok, !dbg !1926

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1927, !DIExpression(), !1928)
  %3 = load ptr, ptr %self, align 8, !dbg !1929
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !1926
  %trunc = trunc i32 %4 to i16, !dbg !1926
  ret i16 %trunc, !dbg !1926

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1928
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.31, i64 10, i32 65) #5, !dbg !1928
  unreachable, !dbg !1928
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Lcg64Random.next_byte(ptr %0) #0 comdat !dbg !1930 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1933
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1933
  br i1 %2, label %panic, label %checkok, !dbg !1933

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1934, !DIExpression(), !1935)
  %3 = load ptr, ptr %self, align 8, !dbg !1936
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !1933
  %trunc = trunc i32 %4 to i8, !dbg !1933
  ret i8 %trunc, !dbg !1933

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1935
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.32, i64 9, i32 66) #5, !dbg !1935
  unreachable, !dbg !1935
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1937 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %taddr7 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1942
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1942
  br i1 %4, label %panic, label %checkok, !dbg !1942

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1943, !DIExpression(), !1944)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !1945, !DIExpression(), !1946)
  %5 = load ptr, ptr %self, align 8, !dbg !1947
  %checknull = icmp eq ptr %5, null, !dbg !1947
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1947
  br i1 %6, label %panic1, label %checkok2, !dbg !1947

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1947
  %8 = urem i64 %7, 4, !dbg !1947
  %9 = icmp ne i64 %8, 0, !dbg !1947
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1947
  br i1 %10, label %panic3, label %checkok6, !dbg !1947

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1948, !DIExpression(), !1950)
  store i32 0, ptr %return_value, align 4, !dbg !1950
  store ptr %return_value, ptr %taddr7, align 8
  %11 = load ptr, ptr %taddr7, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 4, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 4), !dbg !1952
  %14 = load i32, ptr %return_value, align 4, !dbg !1953
  store i32 %14, ptr %5, align 4, !dbg !1953
  ret void, !dbg !1953

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1944
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.16, i64 8, i32 72) #5, !dbg !1944
  unreachable, !dbg !1944

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1947
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.106, i64 11, ptr @.func.16, i64 8, i32 74) #5, !dbg !1947
  unreachable, !dbg !1947

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.16, i64 8, i32 74, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1947
  unreachable, !dbg !1947
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Lcg32Random.next_short(ptr %0) #0 comdat !dbg !1954 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1957
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1957
  br i1 %2, label %panic, label %checkok, !dbg !1957

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1958, !DIExpression(), !1959)
    #dbg_declare(ptr %s, !1960, !DIExpression(), !1961)
  %3 = load ptr, ptr %self, align 8, !dbg !1962
  store ptr %3, ptr %s, align 8, !dbg !1962
    #dbg_declare(ptr %result, !1963, !DIExpression(), !1964)
  %4 = load ptr, ptr %s, align 8, !dbg !1965
  %checknull = icmp eq ptr %4, null, !dbg !1965
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1965
  br i1 %5, label %panic1, label %checkok2, !dbg !1965

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !1965
  %7 = urem i64 %6, 4, !dbg !1965
  %8 = icmp ne i64 %7, 0, !dbg !1965
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !1965
  br i1 %9, label %panic3, label %checkok5, !dbg !1965

checkok5:                                         ; preds = %checkok2
  %10 = load i32, ptr %4, align 4, !dbg !1965
  %lshr = lshr i32 %10, 16, !dbg !1966
  %11 = freeze i32 %lshr, !dbg !1966
  %trunc = trunc i32 %11 to i16, !dbg !1966
  store i16 %trunc, ptr %result, align 2, !dbg !1966
  %12 = load ptr, ptr %s, align 8, !dbg !1967
  %checknull6 = icmp eq ptr %12, null, !dbg !1967
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !1967
  br i1 %13, label %panic7, label %checkok8, !dbg !1967

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !1967
  %15 = urem i64 %14, 4, !dbg !1967
  %16 = icmp ne i64 %15, 0, !dbg !1967
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !1967
  br i1 %17, label %panic9, label %checkok16, !dbg !1967

checkok16:                                        ; preds = %checkok8
  %18 = load ptr, ptr %s, align 8, !dbg !1968
  %checknull17 = icmp eq ptr %18, null, !dbg !1968
  %19 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !1968
  br i1 %19, label %panic18, label %checkok19, !dbg !1968

checkok19:                                        ; preds = %checkok16
  %20 = ptrtoint ptr %18 to i64, !dbg !1968
  %21 = urem i64 %20, 4, !dbg !1968
  %22 = icmp ne i64 %21, 0, !dbg !1968
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false), !dbg !1968
  br i1 %23, label %panic20, label %checkok27, !dbg !1968

checkok27:                                        ; preds = %checkok19
  %24 = load i32, ptr %18, align 4, !dbg !1968
  %mul = mul i32 %24, -1856014347, !dbg !1969
  %add = add i32 %mul, -1640531527, !dbg !1969
  store i32 %add, ptr %12, align 4, !dbg !1969
  %25 = load i16, ptr %result, align 2, !dbg !1970
  ret i16 %25, !dbg !1970

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1959
  call void %26(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.31, i64 10, i32 77) #5, !dbg !1959
  unreachable, !dbg !1959

panic1:                                           ; preds = %checkok
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1965
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.106, i64 11, ptr @.func.31, i64 10, i32 80) #5, !dbg !1965
  unreachable, !dbg !1965

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %30 = insertvalue %any undef, ptr %taddr4, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.31, i64 10, i32 80, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1965
  unreachable, !dbg !1965

panic7:                                           ; preds = %checkok5
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1967
  call void %33(ptr @.panic_msg.20, i64 42, ptr @.file.106, i64 11, ptr @.func.31, i64 10, i32 81) #5, !dbg !1967
  unreachable, !dbg !1967

panic9:                                           ; preds = %checkok8
  store i64 4, ptr %taddr10, align 8
  %34 = insertvalue %any undef, ptr %taddr10, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %36 = insertvalue %any undef, ptr %taddr11, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %35, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %37, ptr %ptradd13, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.31, i64 10, i32 81, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !1967
  unreachable, !dbg !1967

panic18:                                          ; preds = %checkok16
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1968
  call void %39(ptr @.panic_msg.20, i64 42, ptr @.file.106, i64 11, ptr @.func.31, i64 10, i32 81) #5, !dbg !1968
  unreachable, !dbg !1968

panic20:                                          ; preds = %checkok19
  store i64 4, ptr %taddr21, align 8
  %40 = insertvalue %any undef, ptr %taddr21, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr22, align 8
  %42 = insertvalue %any undef, ptr %taddr22, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %41, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %43, ptr %ptradd24, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.31, i64 10, i32 81, ptr byval(%"any[]") align 8 %indirectarg26) #5, !dbg !1968
  unreachable, !dbg !1968
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1971 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots10 = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %taddr24 = alloca ptr, align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg65 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1972
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1972
  br i1 %4, label %panic, label %checkok, !dbg !1972

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1973, !DIExpression(), !1974)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !1975, !DIExpression(), !1976)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !1977, !DIExpression(), !1979)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !1980
  %5 = load i64, ptr %ptradd2, align 8, !dbg !1980
  store i64 %5, ptr %len, align 8, !dbg !1980
  br label %loop.cond, !dbg !1981

loop.cond:                                        ; preds = %checkok61, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !1982
  %lt = icmp ult i64 0, %6, !dbg !1982
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1982

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1984, !DIExpression(), !1986)
  %7 = load ptr, ptr %self, align 8, !dbg !1987
  %8 = call i16 @std.math.random.Lcg32Random.next_short(ptr %7), !dbg !1988
  store i16 %8, ptr %value, align 2, !dbg !1988
  %9 = load i64, ptr %len, align 8, !dbg !1989
  %le = icmp ule i64 %9, 2, !dbg !1989
  br i1 %le, label %if.then, label %if.exit, !dbg !1989

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !1990
  %add = add i64 0, %11, !dbg !1990
  %gt = icmp ugt i64 0, %add, !dbg !1990
  %sub = sub i64 %add, 0, !dbg !1990
  %12 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1990
  br i1 %12, label %panic3, label %checkok5, !dbg !1990

checkok5:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !1992
  %13 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !1992
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !1992
  %15 = load %"char[]", ptr %bytes1, align 8, !dbg !1993
  %16 = extractvalue %"char[]" %15, 0, !dbg !1993
  %17 = extractvalue %"char[]" %15, 1, !dbg !1994
  %gt6 = icmp ugt i64 0, %17, !dbg !1994
  %18 = call i1 @llvm.expect.i1(i1 %gt6, i1 false), !dbg !1994
  br i1 %18, label %panic7, label %checkok14, !dbg !1994

checkok14:                                        ; preds = %checkok5
  %size15 = sub i64 %17, 0, !dbg !1993
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !1993
  %20 = insertvalue %"char[]" %19, i64 %size15, 1, !dbg !1993
  %21 = extractvalue %"char[]" %20, 0, !dbg !1993
  %22 = extractvalue %"char[]" %14, 0, !dbg !1993
  %23 = extractvalue %"char[]" %14, 1, !dbg !1993
  %24 = extractvalue %"char[]" %20, 1, !dbg !1993
  %neq = icmp ne i64 %24, %23, !dbg !1993
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1993
  br i1 %25, label %panic16, label %checkok23, !dbg !1993

checkok23:                                        ; preds = %checkok14
  %26 = mul i64 %23, 1, !dbg !1993
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !1993
  br label %expr_block.exit, !dbg !1995

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr24, align 8
  %27 = load ptr, ptr %taddr24, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 2, 1
  %30 = load %"char[]", ptr %bytes1, align 8, !dbg !1996
  %31 = extractvalue %"char[]" %30, 0, !dbg !1996
  %32 = extractvalue %"char[]" %30, 1, !dbg !1996
  %gt25 = icmp sgt i64 0, %32, !dbg !1996
  %33 = call i1 @llvm.expect.i1(i1 %gt25, i1 false), !dbg !1996
  br i1 %33, label %panic26, label %checkok33, !dbg !1996

checkok33:                                        ; preds = %if.exit
  %lt34 = icmp slt i64 %32, 2, !dbg !1996
  %34 = call i1 @llvm.expect.i1(i1 %lt34, i1 false), !dbg !1996
  br i1 %34, label %panic35, label %checkok42, !dbg !1996

checkok42:                                        ; preds = %checkok33
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !1996
  %36 = insertvalue %"char[]" %35, i64 2, 1, !dbg !1996
  %37 = extractvalue %"char[]" %36, 0, !dbg !1996
  %38 = extractvalue %"char[]" %29, 0, !dbg !1996
  %39 = extractvalue %"char[]" %29, 1, !dbg !1996
  %40 = extractvalue %"char[]" %36, 1, !dbg !1996
  %neq43 = icmp ne i64 %40, %39, !dbg !1996
  %41 = call i1 @llvm.expect.i1(i1 %neq43, i1 false), !dbg !1996
  br i1 %41, label %panic44, label %checkok51, !dbg !1996

checkok51:                                        ; preds = %checkok42
  %42 = mul i64 %39, 1, !dbg !1996
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !1996
  %43 = load i64, ptr %len, align 8, !dbg !1997
  %sub52 = sub i64 %43, 2, !dbg !1997
  store i64 %sub52, ptr %len, align 8, !dbg !1997
  %44 = load %"char[]", ptr %bytes1, align 8, !dbg !1998
  %45 = extractvalue %"char[]" %44, 0, !dbg !1998
  %46 = extractvalue %"char[]" %44, 1, !dbg !1999
  %gt53 = icmp ugt i64 2, %46, !dbg !1999
  %47 = call i1 @llvm.expect.i1(i1 %gt53, i1 false), !dbg !1999
  br i1 %47, label %panic54, label %checkok61, !dbg !1999

checkok61:                                        ; preds = %checkok51
  %size62 = sub i64 %46, 2, !dbg !1998
  %ptradd63 = getelementptr inbounds i8, ptr %45, i64 2, !dbg !1998
  %48 = insertvalue %"char[]" undef, ptr %ptradd63, 0, !dbg !1998
  %49 = insertvalue %"char[]" %48, i64 %size62, 1, !dbg !1998
  store %"char[]" %49, ptr %bytes1, align 8, !dbg !1998
  br label %loop.cond, !dbg !1998

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.113, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2000
  %ptradd64 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2000
  %hi = load i64, ptr %ptradd64, align 8, !dbg !2000
  store %"any[]" zeroinitializer, ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.114, i64 11, ptr @.str.115, i64 22, i32 85, ptr byval(%"any[]") align 8 %indirectarg65), !dbg !2003
  unreachable, !dbg !2004

expr_block.exit:                                  ; preds = %checkok23
  ret void, !dbg !2004

panic:                                            ; preds = %entry
  %50 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1974
  call void %50(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.21, i64 10, i32 85) #5, !dbg !1974
  unreachable, !dbg !1974

panic3:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr4, align 8
  %51 = insertvalue %any undef, ptr %taddr4, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %52, ptr %varargslots, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !1992
  unreachable, !dbg !1992

panic7:                                           ; preds = %checkok5
  store i64 %17, ptr %taddr8, align 8
  %54 = insertvalue %any undef, ptr %taddr8, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr9, align 8
  %56 = insertvalue %any undef, ptr %taddr9, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %55, ptr %varargslots10, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots10, i64 16
  store %any %57, ptr %ptradd11, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots10, 0
  %"$$temp12" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp12", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg13) #5, !dbg !1993
  unreachable, !dbg !1993

panic16:                                          ; preds = %checkok14
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr18, align 8
  %61 = insertvalue %any undef, ptr %taddr18, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %60, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %62, ptr %ptradd20, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg22) #5, !dbg !1993
  unreachable, !dbg !1993

panic26:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr28, align 8
  %66 = insertvalue %any undef, ptr %taddr28, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %65, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %67, ptr %ptradd30, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg32) #5, !dbg !1996
  unreachable, !dbg !1996

panic35:                                          ; preds = %checkok33
  store i64 1, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr37, align 8
  %71 = insertvalue %any undef, ptr %taddr37, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %70, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %72, ptr %ptradd39, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg41) #5, !dbg !1996
  unreachable, !dbg !1996

panic44:                                          ; preds = %checkok42
  store i64 %40, ptr %taddr45, align 8
  %74 = insertvalue %any undef, ptr %taddr45, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr46, align 8
  %76 = insertvalue %any undef, ptr %taddr46, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %75, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %77, ptr %ptradd48, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg50) #5, !dbg !1996
  unreachable, !dbg !1996

panic54:                                          ; preds = %checkok51
  store i64 %46, ptr %taddr55, align 8
  %79 = insertvalue %any undef, ptr %taddr55, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr56, align 8
  %81 = insertvalue %any undef, ptr %taddr56, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %80, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %82, ptr %ptradd58, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg60) #5, !dbg !1998
  unreachable, !dbg !1998
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Lcg32Random.next_int128(ptr %0) #0 comdat !dbg !2005 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2008
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2008
  br i1 %2, label %panic, label %checkok, !dbg !2008

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2009, !DIExpression(), !2010)
  %3 = load ptr, ptr %self, align 8, !dbg !2011
  %4 = call i64 @std.math.random.Lcg32Random.next_long(ptr %3), !dbg !2013
  %zext = zext i64 %4 to i128, !dbg !2013
  %shl = shl i128 %zext, 64, !dbg !2013
  %5 = freeze i128 %shl, !dbg !2013
  %6 = load ptr, ptr %self, align 8, !dbg !2011
  %7 = call i64 @std.math.random.Lcg32Random.next_long(ptr %6), !dbg !2014
  %zext1 = zext i64 %7 to i128, !dbg !2014
  %add = add i128 %5, %zext1, !dbg !2013
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2010
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.29, i64 11, i32 86) #5, !dbg !2010
  unreachable, !dbg !2010
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg32Random.next_long(ptr %0) #0 comdat !dbg !2015 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2018
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2018
  br i1 %2, label %panic, label %checkok, !dbg !2018

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2019, !DIExpression(), !2020)
  %3 = load ptr, ptr %self, align 8, !dbg !2021
  %4 = call i32 @std.math.random.Lcg32Random.next_int(ptr %3), !dbg !2023
  %zext = zext i32 %4 to i64, !dbg !2023
  %shl = shl i64 %zext, 32, !dbg !2023
  %5 = freeze i64 %shl, !dbg !2023
  %6 = load ptr, ptr %self, align 8, !dbg !2021
  %7 = call i32 @std.math.random.Lcg32Random.next_int(ptr %6), !dbg !2024
  %zext1 = zext i32 %7 to i64, !dbg !2024
  %add = add i64 %5, %zext1, !dbg !2023
  ret i64 %add, !dbg !2023

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2020
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.19, i64 9, i32 87) #5, !dbg !2020
  unreachable, !dbg !2020
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg32Random.next_int(ptr %0) #0 comdat !dbg !2025 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2028
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2028
  br i1 %2, label %panic, label %checkok, !dbg !2028

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2029, !DIExpression(), !2030)
  %3 = load ptr, ptr %self, align 8, !dbg !2031
  %4 = call i16 @std.math.random.Lcg32Random.next_short(ptr %3), !dbg !2033
  %zext = zext i16 %4 to i32, !dbg !2033
  %shl = shl i32 %zext, 16, !dbg !2033
  %5 = freeze i32 %shl, !dbg !2033
  %6 = load ptr, ptr %self, align 8, !dbg !2031
  %7 = call i16 @std.math.random.Lcg32Random.next_short(ptr %6), !dbg !2034
  %zext1 = zext i16 %7 to i32, !dbg !2034
  %add = add i32 %5, %zext1, !dbg !2033
  ret i32 %add, !dbg !2033

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2030
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.30, i64 8, i32 88) #5, !dbg !2030
  unreachable, !dbg !2030
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Lcg32Random.next_byte(ptr %0) #0 comdat !dbg !2035 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2038
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2038
  br i1 %2, label %panic, label %checkok, !dbg !2038

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2039, !DIExpression(), !2040)
  %3 = load ptr, ptr %self, align 8, !dbg !2041
  %4 = call i16 @std.math.random.Lcg32Random.next_short(ptr %3), !dbg !2038
  %trunc = trunc i16 %4 to i8, !dbg !2038
  ret i8 %trunc, !dbg !2038

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2040
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.32, i64 9, i32 89) #5, !dbg !2040
  unreachable, !dbg !2040
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2042 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %taddr7 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2047
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2047
  br i1 %4, label %panic, label %checkok, !dbg !2047

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2048, !DIExpression(), !2049)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !2050, !DIExpression(), !2051)
  %5 = load ptr, ptr %self, align 8, !dbg !2052
  %checknull = icmp eq ptr %5, null, !dbg !2052
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2052
  br i1 %6, label %panic1, label %checkok2, !dbg !2052

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2052
  %8 = urem i64 %7, 2, !dbg !2052
  %9 = icmp ne i64 %8, 0, !dbg !2052
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2052
  br i1 %10, label %panic3, label %checkok6, !dbg !2052

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2053, !DIExpression(), !2055)
  store i16 0, ptr %return_value, align 2, !dbg !2055
  store ptr %return_value, ptr %taddr7, align 8
  %11 = load ptr, ptr %taddr7, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 2, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 2), !dbg !2057
  %14 = load i16, ptr %return_value, align 2, !dbg !2058
  store i16 %14, ptr %5, align 2, !dbg !2058
  ret void, !dbg !2058

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2049
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.16, i64 8, i32 95) #5, !dbg !2049
  unreachable, !dbg !2049

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2052
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.106, i64 11, ptr @.func.16, i64 8, i32 97) #5, !dbg !2052
  unreachable, !dbg !2052

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.16, i64 8, i32 97, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2052
  unreachable, !dbg !2052
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Lcg16Random.next_byte(ptr %0) #0 comdat !dbg !2059 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2062
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2062
  br i1 %2, label %panic, label %checkok, !dbg !2062

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2063, !DIExpression(), !2064)
    #dbg_declare(ptr %s, !2065, !DIExpression(), !2066)
  %3 = load ptr, ptr %self, align 8, !dbg !2067
  store ptr %3, ptr %s, align 8, !dbg !2067
    #dbg_declare(ptr %result, !2068, !DIExpression(), !2069)
  %4 = load ptr, ptr %s, align 8, !dbg !2070
  %checknull = icmp eq ptr %4, null, !dbg !2070
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2070
  br i1 %5, label %panic1, label %checkok2, !dbg !2070

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !2070
  %7 = urem i64 %6, 2, !dbg !2070
  %8 = icmp ne i64 %7, 0, !dbg !2070
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !2070
  br i1 %9, label %panic3, label %checkok5, !dbg !2070

checkok5:                                         ; preds = %checkok2
  %10 = load i16, ptr %4, align 2, !dbg !2070
  %zext = zext i16 %10 to i32, !dbg !2070
  %lshr = lshr i32 %zext, 8, !dbg !2071
  %11 = freeze i32 %lshr, !dbg !2071
  %trunc = trunc i32 %11 to i8, !dbg !2071
  store i8 %trunc, ptr %result, align 1, !dbg !2071
  %12 = load ptr, ptr %s, align 8, !dbg !2072
  %checknull6 = icmp eq ptr %12, null, !dbg !2072
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !2072
  br i1 %13, label %panic7, label %checkok8, !dbg !2072

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !2072
  %15 = urem i64 %14, 2, !dbg !2072
  %16 = icmp ne i64 %15, 0, !dbg !2072
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !2072
  br i1 %17, label %panic9, label %checkok16, !dbg !2072

checkok16:                                        ; preds = %checkok8
  %18 = load ptr, ptr %s, align 8, !dbg !2073
  %checknull17 = icmp eq ptr %18, null, !dbg !2073
  %19 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !2073
  br i1 %19, label %panic18, label %checkok19, !dbg !2073

checkok19:                                        ; preds = %checkok16
  %20 = ptrtoint ptr %18 to i64, !dbg !2073
  %21 = urem i64 %20, 2, !dbg !2073
  %22 = icmp ne i64 %21, 0, !dbg !2073
  %23 = call i1 @llvm.expect.i1(i1 %22, i1 false), !dbg !2073
  br i1 %23, label %panic20, label %checkok27, !dbg !2073

checkok27:                                        ; preds = %checkok19
  %24 = load i16, ptr %18, align 2, !dbg !2073
  %zext28 = zext i16 %24 to i32, !dbg !2073
  %mul = mul i32 %zext28, 37213, !dbg !2074
  %add = add i32 %mul, 40503, !dbg !2074
  %trunc29 = trunc i32 %add to i16, !dbg !2074
  store i16 %trunc29, ptr %12, align 2, !dbg !2074
  %25 = load i8, ptr %result, align 1, !dbg !2075
  ret i8 %25, !dbg !2075

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2064
  call void %26(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.32, i64 9, i32 100) #5, !dbg !2064
  unreachable, !dbg !2064

panic1:                                           ; preds = %checkok
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2070
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.106, i64 11, ptr @.func.32, i64 9, i32 103) #5, !dbg !2070
  unreachable, !dbg !2070

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %30 = insertvalue %any undef, ptr %taddr4, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %31, ptr %ptradd, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.32, i64 9, i32 103, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2070
  unreachable, !dbg !2070

panic7:                                           ; preds = %checkok5
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2072
  call void %33(ptr @.panic_msg.20, i64 42, ptr @.file.106, i64 11, ptr @.func.32, i64 9, i32 104) #5, !dbg !2072
  unreachable, !dbg !2072

panic9:                                           ; preds = %checkok8
  store i64 2, ptr %taddr10, align 8
  %34 = insertvalue %any undef, ptr %taddr10, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %36 = insertvalue %any undef, ptr %taddr11, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %35, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %37, ptr %ptradd13, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.32, i64 9, i32 104, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !2072
  unreachable, !dbg !2072

panic18:                                          ; preds = %checkok16
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2073
  call void %39(ptr @.panic_msg.20, i64 42, ptr @.file.106, i64 11, ptr @.func.32, i64 9, i32 104) #5, !dbg !2073
  unreachable, !dbg !2073

panic20:                                          ; preds = %checkok19
  store i64 2, ptr %taddr21, align 8
  %40 = insertvalue %any undef, ptr %taddr21, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr22, align 8
  %42 = insertvalue %any undef, ptr %taddr22, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %41, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %43, ptr %ptradd24, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.106, i64 11, ptr @.func.32, i64 9, i32 104, ptr byval(%"any[]") align 8 %indirectarg26) #5, !dbg !2073
  unreachable, !dbg !2073
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2076 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots10 = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %taddr24 = alloca ptr, align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg65 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2077
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2077
  br i1 %4, label %panic, label %checkok, !dbg !2077

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2078, !DIExpression(), !2079)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2080, !DIExpression(), !2081)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2082, !DIExpression(), !2084)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !2085
  %5 = load i64, ptr %ptradd2, align 8, !dbg !2085
  store i64 %5, ptr %len, align 8, !dbg !2085
  br label %loop.cond, !dbg !2086

loop.cond:                                        ; preds = %checkok61, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !2087
  %lt = icmp ult i64 0, %6, !dbg !2087
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2087

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2089, !DIExpression(), !2091)
  %7 = load ptr, ptr %self, align 8, !dbg !2092
  %8 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %7), !dbg !2093
  store i8 %8, ptr %value, align 1, !dbg !2093
  %9 = load i64, ptr %len, align 8, !dbg !2094
  %le = icmp ule i64 %9, 1, !dbg !2094
  br i1 %le, label %if.then, label %if.exit, !dbg !2094

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !2095
  %add = add i64 0, %11, !dbg !2095
  %gt = icmp ugt i64 0, %add, !dbg !2095
  %sub = sub i64 %add, 0, !dbg !2095
  %12 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2095
  br i1 %12, label %panic3, label %checkok5, !dbg !2095

checkok5:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !2097
  %13 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !2097
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !2097
  %15 = load %"char[]", ptr %bytes1, align 8, !dbg !2098
  %16 = extractvalue %"char[]" %15, 0, !dbg !2098
  %17 = extractvalue %"char[]" %15, 1, !dbg !2099
  %gt6 = icmp ugt i64 0, %17, !dbg !2099
  %18 = call i1 @llvm.expect.i1(i1 %gt6, i1 false), !dbg !2099
  br i1 %18, label %panic7, label %checkok14, !dbg !2099

checkok14:                                        ; preds = %checkok5
  %size15 = sub i64 %17, 0, !dbg !2098
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !2098
  %20 = insertvalue %"char[]" %19, i64 %size15, 1, !dbg !2098
  %21 = extractvalue %"char[]" %20, 0, !dbg !2098
  %22 = extractvalue %"char[]" %14, 0, !dbg !2098
  %23 = extractvalue %"char[]" %14, 1, !dbg !2098
  %24 = extractvalue %"char[]" %20, 1, !dbg !2098
  %neq = icmp ne i64 %24, %23, !dbg !2098
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2098
  br i1 %25, label %panic16, label %checkok23, !dbg !2098

checkok23:                                        ; preds = %checkok14
  %26 = mul i64 %23, 1, !dbg !2098
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !2098
  br label %expr_block.exit, !dbg !2100

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr24, align 8
  %27 = load ptr, ptr %taddr24, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 1, 1
  %30 = load %"char[]", ptr %bytes1, align 8, !dbg !2101
  %31 = extractvalue %"char[]" %30, 0, !dbg !2101
  %32 = extractvalue %"char[]" %30, 1, !dbg !2101
  %gt25 = icmp sgt i64 0, %32, !dbg !2101
  %33 = call i1 @llvm.expect.i1(i1 %gt25, i1 false), !dbg !2101
  br i1 %33, label %panic26, label %checkok33, !dbg !2101

checkok33:                                        ; preds = %if.exit
  %lt34 = icmp slt i64 %32, 1, !dbg !2101
  %34 = call i1 @llvm.expect.i1(i1 %lt34, i1 false), !dbg !2101
  br i1 %34, label %panic35, label %checkok42, !dbg !2101

checkok42:                                        ; preds = %checkok33
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !2101
  %36 = insertvalue %"char[]" %35, i64 1, 1, !dbg !2101
  %37 = extractvalue %"char[]" %36, 0, !dbg !2101
  %38 = extractvalue %"char[]" %29, 0, !dbg !2101
  %39 = extractvalue %"char[]" %29, 1, !dbg !2101
  %40 = extractvalue %"char[]" %36, 1, !dbg !2101
  %neq43 = icmp ne i64 %40, %39, !dbg !2101
  %41 = call i1 @llvm.expect.i1(i1 %neq43, i1 false), !dbg !2101
  br i1 %41, label %panic44, label %checkok51, !dbg !2101

checkok51:                                        ; preds = %checkok42
  %42 = mul i64 %39, 1, !dbg !2101
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !2101
  %43 = load i64, ptr %len, align 8, !dbg !2102
  %sub52 = sub i64 %43, 1, !dbg !2102
  store i64 %sub52, ptr %len, align 8, !dbg !2102
  %44 = load %"char[]", ptr %bytes1, align 8, !dbg !2103
  %45 = extractvalue %"char[]" %44, 0, !dbg !2103
  %46 = extractvalue %"char[]" %44, 1, !dbg !2104
  %gt53 = icmp ugt i64 1, %46, !dbg !2104
  %47 = call i1 @llvm.expect.i1(i1 %gt53, i1 false), !dbg !2104
  br i1 %47, label %panic54, label %checkok61, !dbg !2104

checkok61:                                        ; preds = %checkok51
  %size62 = sub i64 %46, 1, !dbg !2103
  %ptradd63 = getelementptr inbounds i8, ptr %45, i64 1, !dbg !2103
  %48 = insertvalue %"char[]" undef, ptr %ptradd63, 0, !dbg !2103
  %49 = insertvalue %"char[]" %48, i64 %size62, 1, !dbg !2103
  store %"char[]" %49, ptr %bytes1, align 8, !dbg !2103
  br label %loop.cond, !dbg !2103

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.116, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2105
  %ptradd64 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2105
  %hi = load i64, ptr %ptradd64, align 8, !dbg !2105
  store %"any[]" zeroinitializer, ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.117, i64 11, ptr @.str.118, i64 22, i32 108, ptr byval(%"any[]") align 8 %indirectarg65), !dbg !2108
  unreachable, !dbg !2109

expr_block.exit:                                  ; preds = %checkok23
  ret void, !dbg !2109

panic:                                            ; preds = %entry
  %50 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2079
  call void %50(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.21, i64 10, i32 108) #5, !dbg !2079
  unreachable, !dbg !2079

panic3:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr4, align 8
  %51 = insertvalue %any undef, ptr %taddr4, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %52, ptr %varargslots, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2097
  unreachable, !dbg !2097

panic7:                                           ; preds = %checkok5
  store i64 %17, ptr %taddr8, align 8
  %54 = insertvalue %any undef, ptr %taddr8, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr9, align 8
  %56 = insertvalue %any undef, ptr %taddr9, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %55, ptr %varargslots10, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots10, i64 16
  store %any %57, ptr %ptradd11, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots10, 0
  %"$$temp12" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp12", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg13) #5, !dbg !2098
  unreachable, !dbg !2098

panic16:                                          ; preds = %checkok14
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr18, align 8
  %61 = insertvalue %any undef, ptr %taddr18, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %60, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %62, ptr %ptradd20, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg22) #5, !dbg !2098
  unreachable, !dbg !2098

panic26:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr28, align 8
  %66 = insertvalue %any undef, ptr %taddr28, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %65, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %67, ptr %ptradd30, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg32) #5, !dbg !2101
  unreachable, !dbg !2101

panic35:                                          ; preds = %checkok33
  store i64 0, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr37, align 8
  %71 = insertvalue %any undef, ptr %taddr37, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %70, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %72, ptr %ptradd39, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg41) #5, !dbg !2101
  unreachable, !dbg !2101

panic44:                                          ; preds = %checkok42
  store i64 %40, ptr %taddr45, align 8
  %74 = insertvalue %any undef, ptr %taddr45, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr46, align 8
  %76 = insertvalue %any undef, ptr %taddr46, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %75, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %77, ptr %ptradd48, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg50) #5, !dbg !2101
  unreachable, !dbg !2101

panic54:                                          ; preds = %checkok51
  store i64 %46, ptr %taddr55, align 8
  %79 = insertvalue %any undef, ptr %taddr55, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr56, align 8
  %81 = insertvalue %any undef, ptr %taddr56, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %80, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %82, ptr %ptradd58, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg60) #5, !dbg !2103
  unreachable, !dbg !2103
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Lcg16Random.next_int128(ptr %0) #0 comdat !dbg !2110 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2113
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2113
  br i1 %2, label %panic, label %checkok, !dbg !2113

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2114, !DIExpression(), !2115)
  %3 = load ptr, ptr %self, align 8, !dbg !2116
  %4 = call i64 @std.math.random.Lcg16Random.next_long(ptr %3), !dbg !2118
  %zext = zext i64 %4 to i128, !dbg !2118
  %shl = shl i128 %zext, 64, !dbg !2118
  %5 = freeze i128 %shl, !dbg !2118
  %6 = load ptr, ptr %self, align 8, !dbg !2116
  %7 = call i64 @std.math.random.Lcg16Random.next_long(ptr %6), !dbg !2119
  %zext1 = zext i64 %7 to i128, !dbg !2119
  %add = add i128 %5, %zext1, !dbg !2118
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2115
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.29, i64 11, i32 109) #5, !dbg !2115
  unreachable, !dbg !2115
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg16Random.next_long(ptr %0) #0 comdat !dbg !2120 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2123
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2123
  br i1 %2, label %panic, label %checkok, !dbg !2123

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2124, !DIExpression(), !2125)
  %3 = load ptr, ptr %self, align 8, !dbg !2126
  %4 = call i32 @std.math.random.Lcg16Random.next_int(ptr %3), !dbg !2128
  %zext = zext i32 %4 to i64, !dbg !2128
  %shl = shl i64 %zext, 32, !dbg !2128
  %5 = freeze i64 %shl, !dbg !2128
  %6 = load ptr, ptr %self, align 8, !dbg !2126
  %7 = call i32 @std.math.random.Lcg16Random.next_int(ptr %6), !dbg !2129
  %zext1 = zext i32 %7 to i64, !dbg !2129
  %add = add i64 %5, %zext1, !dbg !2128
  ret i64 %add, !dbg !2128

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2125
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.19, i64 9, i32 110) #5, !dbg !2125
  unreachable, !dbg !2125
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg16Random.next_int(ptr %0) #0 comdat !dbg !2130 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2133
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2133
  br i1 %2, label %panic, label %checkok, !dbg !2133

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2134, !DIExpression(), !2135)
  %3 = load ptr, ptr %self, align 8, !dbg !2136
  %4 = call i16 @std.math.random.Lcg16Random.next_short(ptr %3), !dbg !2138
  %zext = zext i16 %4 to i32, !dbg !2138
  %shl = shl i32 %zext, 16, !dbg !2138
  %5 = freeze i32 %shl, !dbg !2138
  %6 = load ptr, ptr %self, align 8, !dbg !2136
  %7 = call i16 @std.math.random.Lcg16Random.next_short(ptr %6), !dbg !2139
  %zext1 = zext i16 %7 to i32, !dbg !2139
  %add = add i32 %5, %zext1, !dbg !2138
  ret i32 %add, !dbg !2138

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2135
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.30, i64 8, i32 111) #5, !dbg !2135
  unreachable, !dbg !2135
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Lcg16Random.next_short(ptr %0) #0 comdat !dbg !2140 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2143
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2143
  br i1 %2, label %panic, label %checkok, !dbg !2143

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2144, !DIExpression(), !2145)
  %3 = load ptr, ptr %self, align 8, !dbg !2146
  %4 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %3), !dbg !2148
  %zext = zext i8 %4 to i16, !dbg !2148
  %zext1 = zext i16 %zext to i32, !dbg !2148
  %shl = shl i32 %zext1, 8, !dbg !2148
  %5 = freeze i32 %shl, !dbg !2148
  %6 = load ptr, ptr %self, align 8, !dbg !2146
  %7 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %6), !dbg !2149
  %zext2 = zext i8 %7 to i32, !dbg !2149
  %add = add i32 %5, %zext2, !dbg !2148
  %trunc = trunc i32 %add to i16, !dbg !2148
  ret i16 %trunc, !dbg !2148

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2145
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.106, i64 11, ptr @.func.31, i64 10, i32 112) #5, !dbg !2145
  unreachable, !dbg !2145
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2150 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %taddr7 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2155
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2155
  br i1 %4, label %panic, label %checkok, !dbg !2155

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2156, !DIExpression(), !2157)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !2158, !DIExpression(), !2159)
  %5 = load ptr, ptr %self, align 8, !dbg !2160
  %checknull = icmp eq ptr %5, null, !dbg !2160
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2160
  br i1 %6, label %panic1, label %checkok2, !dbg !2160

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2160
  %8 = urem i64 %7, 16, !dbg !2160
  %9 = icmp ne i64 %8, 0, !dbg !2160
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2160
  br i1 %10, label %panic3, label %checkok6, !dbg !2160

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2161, !DIExpression(), !2163)
  store i128 0, ptr %return_value, align 16, !dbg !2163
  store ptr %return_value, ptr %taddr7, align 8
  %11 = load ptr, ptr %taddr7, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 16, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 16), !dbg !2165
  %14 = load i128, ptr %return_value, align 16, !dbg !2166
  %or = or i128 %14, 1, !dbg !2167
  store i128 %or, ptr %5, align 16, !dbg !2167
  ret void, !dbg !2167

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2157
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.16, i64 8, i32 12) #5, !dbg !2157
  unreachable, !dbg !2157

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2160
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.123, i64 11, ptr @.func.16, i64 8, i32 14) #5, !dbg !2160
  unreachable, !dbg !2160

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.123, i64 11, ptr @.func.16, i64 8, i32 14, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2160
  unreachable, !dbg !2160
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2168 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2169
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2169
  br i1 %4, label %panic, label %checkok, !dbg !2169

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2170, !DIExpression(), !2171)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2172, !DIExpression(), !2173)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2174
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2174
  %lt = icmp ult i64 0, %5, !dbg !2174
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2174

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2174
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.123, i64 11, ptr @.func.21, i64 10, i32 18) #5, !dbg !2174
  unreachable, !dbg !2174

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2176, !DIExpression(), !2178)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2180
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2180
  store i64 %7, ptr %len, align 8, !dbg !2180
  br label %loop.cond, !dbg !2181

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2182
  %lt4 = icmp ult i64 0, %8, !dbg !2182
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2182

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2184, !DIExpression(), !2186)
  %9 = load ptr, ptr %self, align 8, !dbg !2187
  %10 = call i64 @std.math.random.Mcg128Random.next_long(ptr %9), !dbg !2188
  store i64 %10, ptr %value, align 8, !dbg !2188
  %11 = load i64, ptr %len, align 8, !dbg !2189
  %le = icmp ule i64 %11, 8, !dbg !2189
  br i1 %le, label %if.then, label %if.exit, !dbg !2189

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2190
  %add = add i64 0, %13, !dbg !2190
  %gt = icmp ugt i64 0, %add, !dbg !2190
  %sub = sub i64 %add, 0, !dbg !2190
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2190
  br i1 %14, label %panic5, label %checkok7, !dbg !2190

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !2192
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2192
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !2192
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !2193
  %18 = extractvalue %"char[]" %17, 0, !dbg !2193
  %19 = extractvalue %"char[]" %17, 1, !dbg !2194
  %gt8 = icmp ugt i64 0, %19, !dbg !2194
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !2194
  br i1 %20, label %panic9, label %checkok16, !dbg !2194

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !2193
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !2193
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !2193
  %23 = extractvalue %"char[]" %22, 0, !dbg !2193
  %24 = extractvalue %"char[]" %16, 0, !dbg !2193
  %25 = extractvalue %"char[]" %16, 1, !dbg !2193
  %26 = extractvalue %"char[]" %22, 1, !dbg !2193
  %neq = icmp ne i64 %26, %25, !dbg !2193
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2193
  br i1 %27, label %panic18, label %checkok25, !dbg !2193

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !2193
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !2193
  br label %expr_block.exit, !dbg !2195

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 8, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !2196
  %33 = extractvalue %"char[]" %32, 0, !dbg !2196
  %34 = extractvalue %"char[]" %32, 1, !dbg !2196
  %gt27 = icmp sgt i64 0, %34, !dbg !2196
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !2196
  br i1 %35, label %panic28, label %checkok35, !dbg !2196

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 8, !dbg !2196
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !2196
  br i1 %36, label %panic37, label %checkok44, !dbg !2196

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !2196
  %38 = insertvalue %"char[]" %37, i64 8, 1, !dbg !2196
  %39 = extractvalue %"char[]" %38, 0, !dbg !2196
  %40 = extractvalue %"char[]" %31, 0, !dbg !2196
  %41 = extractvalue %"char[]" %31, 1, !dbg !2196
  %42 = extractvalue %"char[]" %38, 1, !dbg !2196
  %neq45 = icmp ne i64 %42, %41, !dbg !2196
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !2196
  br i1 %43, label %panic46, label %checkok53, !dbg !2196

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !2196
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !2196
  %45 = load i64, ptr %len, align 8, !dbg !2197
  %sub54 = sub i64 %45, 8, !dbg !2197
  store i64 %sub54, ptr %len, align 8, !dbg !2197
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !2198
  %47 = extractvalue %"char[]" %46, 0, !dbg !2198
  %48 = extractvalue %"char[]" %46, 1, !dbg !2199
  %gt55 = icmp ugt i64 8, %48, !dbg !2199
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !2199
  br i1 %49, label %panic56, label %checkok63, !dbg !2199

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 8, !dbg !2198
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 8, !dbg !2198
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !2198
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !2198
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !2198
  br label %loop.cond, !dbg !2198

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.124, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2200
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2200
  %hi = load i64, ptr %ptradd66, align 8, !dbg !2200
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.125, i64 11, ptr @.str.126, i64 23, i32 22, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !2203
  unreachable, !dbg !2204

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !2204

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2171
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.21, i64 10, i32 20) #5, !dbg !2171
  unreachable, !dbg !2171

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2192
  unreachable, !dbg !2192

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !2193
  unreachable, !dbg !2193

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !2193
  unreachable, !dbg !2193

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !2196
  unreachable, !dbg !2196

panic37:                                          ; preds = %checkok35
  store i64 7, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !2196
  unreachable, !dbg !2196

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !2196
  unreachable, !dbg !2196

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !2198
  unreachable, !dbg !2198
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg128Random.next_long(ptr %0) #0 comdat !dbg !2205 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2208
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2208
  br i1 %2, label %panic, label %checkok, !dbg !2208

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2209, !DIExpression(), !2210)
    #dbg_declare(ptr %s, !2211, !DIExpression(), !2212)
  %3 = load ptr, ptr %self, align 8, !dbg !2213
  store ptr %3, ptr %s, align 8, !dbg !2213
    #dbg_declare(ptr %result, !2214, !DIExpression(), !2215)
  %4 = load ptr, ptr %s, align 8, !dbg !2216
  %checknull = icmp eq ptr %4, null, !dbg !2216
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2216
  br i1 %5, label %panic1, label %checkok2, !dbg !2216

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !2216
  %7 = urem i64 %6, 16, !dbg !2216
  %8 = icmp ne i64 %7, 0, !dbg !2216
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !2216
  br i1 %9, label %panic3, label %checkok5, !dbg !2216

checkok5:                                         ; preds = %checkok2
  %10 = load i128, ptr %4, align 16, !dbg !2216
  %lshr = lshr i128 %10, 64, !dbg !2217
  %11 = freeze i128 %lshr, !dbg !2217
  %trunc = trunc i128 %11 to i64, !dbg !2217
  store i64 %trunc, ptr %result, align 8, !dbg !2217
  %12 = load ptr, ptr %s, align 8, !dbg !2218
  %checknull6 = icmp eq ptr %12, null, !dbg !2218
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !2218
  br i1 %13, label %panic7, label %checkok8, !dbg !2218

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !2218
  %15 = urem i64 %14, 16, !dbg !2218
  %16 = icmp ne i64 %15, 0, !dbg !2218
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !2218
  br i1 %17, label %panic9, label %checkok16, !dbg !2218

checkok16:                                        ; preds = %checkok8
  %18 = load i128, ptr %12, align 16, !dbg !2218
  %mul = mul i128 %18, -129976298391535590297638237547755878347, !dbg !2219
  store i128 %mul, ptr %12, align 16, !dbg !2219
  %19 = load i64, ptr %result, align 8, !dbg !2220
  ret i64 %19, !dbg !2220

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2210
  call void %20(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.19, i64 9, i32 25) #5, !dbg !2210
  unreachable, !dbg !2210

panic1:                                           ; preds = %checkok
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2216
  call void %21(ptr @.panic_msg.20, i64 42, ptr @.file.123, i64 11, ptr @.func.19, i64 9, i32 28) #5, !dbg !2216
  unreachable, !dbg !2216

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %24 = insertvalue %any undef, ptr %taddr4, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.123, i64 11, ptr @.func.19, i64 9, i32 28, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2216
  unreachable, !dbg !2216

panic7:                                           ; preds = %checkok5
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2218
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.123, i64 11, ptr @.func.19, i64 9, i32 29) #5, !dbg !2218
  unreachable, !dbg !2218

panic9:                                           ; preds = %checkok8
  store i64 16, ptr %taddr10, align 8
  %28 = insertvalue %any undef, ptr %taddr10, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %30 = insertvalue %any undef, ptr %taddr11, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %31, ptr %ptradd13, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.123, i64 11, ptr @.func.19, i64 9, i32 29, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !2218
  unreachable, !dbg !2218
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Mcg128Random.next_int128(ptr %0) #0 comdat !dbg !2221 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2224
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2224
  br i1 %2, label %panic, label %checkok, !dbg !2224

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2225, !DIExpression(), !2226)
  %3 = load ptr, ptr %self, align 8, !dbg !2227
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !2229
  %zext = zext i64 %4 to i128, !dbg !2229
  %shl = shl i128 %zext, 64, !dbg !2229
  %5 = freeze i128 %shl, !dbg !2229
  %6 = load ptr, ptr %self, align 8, !dbg !2227
  %7 = call i64 @std.math.random.Mcg128Random.next_long(ptr %6), !dbg !2230
  %zext1 = zext i64 %7 to i128, !dbg !2230
  %add = add i128 %5, %zext1, !dbg !2229
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2226
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.29, i64 11, i32 33) #5, !dbg !2226
  unreachable, !dbg !2226
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg128Random.next_int(ptr %0) #0 comdat !dbg !2231 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2234
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2234
  br i1 %2, label %panic, label %checkok, !dbg !2234

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2235, !DIExpression(), !2236)
  %3 = load ptr, ptr %self, align 8, !dbg !2237
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !2234
  %trunc = trunc i64 %4 to i32, !dbg !2234
  ret i32 %trunc, !dbg !2234

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2236
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.30, i64 8, i32 34) #5, !dbg !2236
  unreachable, !dbg !2236
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Mcg128Random.next_short(ptr %0) #0 comdat !dbg !2238 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2241
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2241
  br i1 %2, label %panic, label %checkok, !dbg !2241

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2242, !DIExpression(), !2243)
  %3 = load ptr, ptr %self, align 8, !dbg !2244
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !2241
  %trunc = trunc i64 %4 to i16, !dbg !2241
  ret i16 %trunc, !dbg !2241

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2243
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.31, i64 10, i32 35) #5, !dbg !2243
  unreachable, !dbg !2243
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Mcg128Random.next_byte(ptr %0) #0 comdat !dbg !2245 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2248
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2248
  br i1 %2, label %panic, label %checkok, !dbg !2248

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2249, !DIExpression(), !2250)
  %3 = load ptr, ptr %self, align 8, !dbg !2251
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !2248
  %trunc = trunc i64 %4 to i8, !dbg !2248
  ret i8 %trunc, !dbg !2248

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2250
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.32, i64 9, i32 36) #5, !dbg !2250
  unreachable, !dbg !2250
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2252 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %taddr7 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2257
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2257
  br i1 %4, label %panic, label %checkok, !dbg !2257

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2258, !DIExpression(), !2259)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !2260, !DIExpression(), !2261)
  %5 = load ptr, ptr %self, align 8, !dbg !2262
  %checknull = icmp eq ptr %5, null, !dbg !2262
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2262
  br i1 %6, label %panic1, label %checkok2, !dbg !2262

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2262
  %8 = urem i64 %7, 8, !dbg !2262
  %9 = icmp ne i64 %8, 0, !dbg !2262
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2262
  br i1 %10, label %panic3, label %checkok6, !dbg !2262

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2263, !DIExpression(), !2265)
  store i64 0, ptr %return_value, align 8, !dbg !2265
  store ptr %return_value, ptr %taddr7, align 8
  %11 = load ptr, ptr %taddr7, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 8, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 8), !dbg !2267
  %14 = load i64, ptr %return_value, align 8, !dbg !2268
  %or = or i64 %14, 1, !dbg !2266
  store i64 %or, ptr %5, align 8, !dbg !2266
  ret void, !dbg !2266

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2259
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.16, i64 8, i32 45) #5, !dbg !2259
  unreachable, !dbg !2259

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2262
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.123, i64 11, ptr @.func.16, i64 8, i32 47) #5, !dbg !2262
  unreachable, !dbg !2262

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.123, i64 11, ptr @.func.16, i64 8, i32 47, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2262
  unreachable, !dbg !2262
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2269 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2270
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2270
  br i1 %4, label %panic, label %checkok, !dbg !2270

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2271, !DIExpression(), !2272)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2273, !DIExpression(), !2274)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2275
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2275
  %lt = icmp ult i64 0, %5, !dbg !2275
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2275

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2275
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.123, i64 11, ptr @.func.21, i64 10, i32 51) #5, !dbg !2275
  unreachable, !dbg !2275

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2277, !DIExpression(), !2279)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2281
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2281
  store i64 %7, ptr %len, align 8, !dbg !2281
  br label %loop.cond, !dbg !2282

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2283
  %lt4 = icmp ult i64 0, %8, !dbg !2283
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2283

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2285, !DIExpression(), !2287)
  %9 = load ptr, ptr %self, align 8, !dbg !2288
  %10 = call i32 @std.math.random.Mcg64Random.next_int(ptr %9), !dbg !2289
  store i32 %10, ptr %value, align 4, !dbg !2289
  %11 = load i64, ptr %len, align 8, !dbg !2290
  %le = icmp ule i64 %11, 4, !dbg !2290
  br i1 %le, label %if.then, label %if.exit, !dbg !2290

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2291
  %add = add i64 0, %13, !dbg !2291
  %gt = icmp ugt i64 0, %add, !dbg !2291
  %sub = sub i64 %add, 0, !dbg !2291
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2291
  br i1 %14, label %panic5, label %checkok7, !dbg !2291

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !2293
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2293
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !2293
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !2294
  %18 = extractvalue %"char[]" %17, 0, !dbg !2294
  %19 = extractvalue %"char[]" %17, 1, !dbg !2295
  %gt8 = icmp ugt i64 0, %19, !dbg !2295
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !2295
  br i1 %20, label %panic9, label %checkok16, !dbg !2295

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !2294
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !2294
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !2294
  %23 = extractvalue %"char[]" %22, 0, !dbg !2294
  %24 = extractvalue %"char[]" %16, 0, !dbg !2294
  %25 = extractvalue %"char[]" %16, 1, !dbg !2294
  %26 = extractvalue %"char[]" %22, 1, !dbg !2294
  %neq = icmp ne i64 %26, %25, !dbg !2294
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2294
  br i1 %27, label %panic18, label %checkok25, !dbg !2294

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !2294
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !2294
  br label %expr_block.exit, !dbg !2296

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 4, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !2297
  %33 = extractvalue %"char[]" %32, 0, !dbg !2297
  %34 = extractvalue %"char[]" %32, 1, !dbg !2297
  %gt27 = icmp sgt i64 0, %34, !dbg !2297
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !2297
  br i1 %35, label %panic28, label %checkok35, !dbg !2297

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 4, !dbg !2297
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !2297
  br i1 %36, label %panic37, label %checkok44, !dbg !2297

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !2297
  %38 = insertvalue %"char[]" %37, i64 4, 1, !dbg !2297
  %39 = extractvalue %"char[]" %38, 0, !dbg !2297
  %40 = extractvalue %"char[]" %31, 0, !dbg !2297
  %41 = extractvalue %"char[]" %31, 1, !dbg !2297
  %42 = extractvalue %"char[]" %38, 1, !dbg !2297
  %neq45 = icmp ne i64 %42, %41, !dbg !2297
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !2297
  br i1 %43, label %panic46, label %checkok53, !dbg !2297

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !2297
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !2297
  %45 = load i64, ptr %len, align 8, !dbg !2298
  %sub54 = sub i64 %45, 4, !dbg !2298
  store i64 %sub54, ptr %len, align 8, !dbg !2298
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !2299
  %47 = extractvalue %"char[]" %46, 0, !dbg !2299
  %48 = extractvalue %"char[]" %46, 1, !dbg !2300
  %gt55 = icmp ugt i64 4, %48, !dbg !2300
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !2300
  br i1 %49, label %panic56, label %checkok63, !dbg !2300

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 4, !dbg !2299
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 4, !dbg !2299
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !2299
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !2299
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !2299
  br label %loop.cond, !dbg !2299

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.127, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2301
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2301
  %hi = load i64, ptr %ptradd66, align 8, !dbg !2301
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.128, i64 11, ptr @.str.129, i64 22, i32 55, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !2304
  unreachable, !dbg !2305

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !2305

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2272
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.21, i64 10, i32 53) #5, !dbg !2272
  unreachable, !dbg !2272

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2293
  unreachable, !dbg !2293

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !2294
  unreachable, !dbg !2294

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !2294
  unreachable, !dbg !2294

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !2297
  unreachable, !dbg !2297

panic37:                                          ; preds = %checkok35
  store i64 3, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !2297
  unreachable, !dbg !2297

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !2297
  unreachable, !dbg !2297

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !2299
  unreachable, !dbg !2299
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg64Random.next_int(ptr %0) #0 comdat !dbg !2306 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2309
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2309
  br i1 %2, label %panic, label %checkok, !dbg !2309

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2310, !DIExpression(), !2311)
    #dbg_declare(ptr %s, !2312, !DIExpression(), !2313)
  %3 = load ptr, ptr %self, align 8, !dbg !2314
  store ptr %3, ptr %s, align 8, !dbg !2314
    #dbg_declare(ptr %result, !2315, !DIExpression(), !2316)
  %4 = load ptr, ptr %s, align 8, !dbg !2317
  %checknull = icmp eq ptr %4, null, !dbg !2317
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2317
  br i1 %5, label %panic1, label %checkok2, !dbg !2317

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !2317
  %7 = urem i64 %6, 8, !dbg !2317
  %8 = icmp ne i64 %7, 0, !dbg !2317
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !2317
  br i1 %9, label %panic3, label %checkok5, !dbg !2317

checkok5:                                         ; preds = %checkok2
  %10 = load i64, ptr %4, align 8, !dbg !2317
  %lshr = lshr i64 %10, 32, !dbg !2318
  %11 = freeze i64 %lshr, !dbg !2318
  %trunc = trunc i64 %11 to i32, !dbg !2318
  store i32 %trunc, ptr %result, align 4, !dbg !2318
  %12 = load ptr, ptr %s, align 8, !dbg !2319
  %checknull6 = icmp eq ptr %12, null, !dbg !2319
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !2319
  br i1 %13, label %panic7, label %checkok8, !dbg !2319

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !2319
  %15 = urem i64 %14, 8, !dbg !2319
  %16 = icmp ne i64 %15, 0, !dbg !2319
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !2319
  br i1 %17, label %panic9, label %checkok16, !dbg !2319

checkok16:                                        ; preds = %checkok8
  %18 = load i64, ptr %12, align 8, !dbg !2319
  %mul = mul i64 %18, -1065810590584100411, !dbg !2320
  store i64 %mul, ptr %12, align 8, !dbg !2320
  %19 = load i32, ptr %result, align 4, !dbg !2321
  ret i32 %19, !dbg !2321

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2311
  call void %20(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.30, i64 8, i32 58) #5, !dbg !2311
  unreachable, !dbg !2311

panic1:                                           ; preds = %checkok
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2317
  call void %21(ptr @.panic_msg.20, i64 42, ptr @.file.123, i64 11, ptr @.func.30, i64 8, i32 61) #5, !dbg !2317
  unreachable, !dbg !2317

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %24 = insertvalue %any undef, ptr %taddr4, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.123, i64 11, ptr @.func.30, i64 8, i32 61, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2317
  unreachable, !dbg !2317

panic7:                                           ; preds = %checkok5
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2319
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.123, i64 11, ptr @.func.30, i64 8, i32 62) #5, !dbg !2319
  unreachable, !dbg !2319

panic9:                                           ; preds = %checkok8
  store i64 8, ptr %taddr10, align 8
  %28 = insertvalue %any undef, ptr %taddr10, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %30 = insertvalue %any undef, ptr %taddr11, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %31, ptr %ptradd13, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.123, i64 11, ptr @.func.30, i64 8, i32 62, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !2319
  unreachable, !dbg !2319
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Mcg64Random.next_int128(ptr %0) #0 comdat !dbg !2322 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2325
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2325
  br i1 %2, label %panic, label %checkok, !dbg !2325

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2326, !DIExpression(), !2327)
  %3 = load ptr, ptr %self, align 8, !dbg !2328
  %4 = call i64 @std.math.random.Mcg64Random.next_long(ptr %3), !dbg !2330
  %zext = zext i64 %4 to i128, !dbg !2330
  %shl = shl i128 %zext, 64, !dbg !2330
  %5 = freeze i128 %shl, !dbg !2330
  %6 = load ptr, ptr %self, align 8, !dbg !2328
  %7 = call i64 @std.math.random.Mcg64Random.next_long(ptr %6), !dbg !2331
  %zext1 = zext i64 %7 to i128, !dbg !2331
  %add = add i128 %5, %zext1, !dbg !2330
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2327
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.29, i64 11, i32 66) #5, !dbg !2327
  unreachable, !dbg !2327
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg64Random.next_long(ptr %0) #0 comdat !dbg !2332 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2335
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2335
  br i1 %2, label %panic, label %checkok, !dbg !2335

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2336, !DIExpression(), !2337)
  %3 = load ptr, ptr %self, align 8, !dbg !2338
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !2340
  %zext = zext i32 %4 to i64, !dbg !2340
  %shl = shl i64 %zext, 32, !dbg !2340
  %5 = freeze i64 %shl, !dbg !2340
  %6 = load ptr, ptr %self, align 8, !dbg !2338
  %7 = call i32 @std.math.random.Mcg64Random.next_int(ptr %6), !dbg !2341
  %zext1 = zext i32 %7 to i64, !dbg !2341
  %add = add i64 %5, %zext1, !dbg !2340
  ret i64 %add, !dbg !2340

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2337
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.19, i64 9, i32 67) #5, !dbg !2337
  unreachable, !dbg !2337
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Mcg64Random.next_short(ptr %0) #0 comdat !dbg !2342 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2345
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2345
  br i1 %2, label %panic, label %checkok, !dbg !2345

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2346, !DIExpression(), !2347)
  %3 = load ptr, ptr %self, align 8, !dbg !2348
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !2345
  %trunc = trunc i32 %4 to i16, !dbg !2345
  ret i16 %trunc, !dbg !2345

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2347
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.31, i64 10, i32 68) #5, !dbg !2347
  unreachable, !dbg !2347
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Mcg64Random.next_byte(ptr %0) #0 comdat !dbg !2349 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2352
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2352
  br i1 %2, label %panic, label %checkok, !dbg !2352

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2353, !DIExpression(), !2354)
  %3 = load ptr, ptr %self, align 8, !dbg !2355
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !2352
  %trunc = trunc i32 %4 to i8, !dbg !2352
  ret i8 %trunc, !dbg !2352

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2354
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.32, i64 9, i32 69) #5, !dbg !2354
  unreachable, !dbg !2354
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2356 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %taddr7 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2361
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2361
  br i1 %4, label %panic, label %checkok, !dbg !2361

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2362, !DIExpression(), !2363)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !2364, !DIExpression(), !2365)
  %5 = load ptr, ptr %self, align 8, !dbg !2366
  %checknull = icmp eq ptr %5, null, !dbg !2366
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2366
  br i1 %6, label %panic1, label %checkok2, !dbg !2366

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2366
  %8 = urem i64 %7, 4, !dbg !2366
  %9 = icmp ne i64 %8, 0, !dbg !2366
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2366
  br i1 %10, label %panic3, label %checkok6, !dbg !2366

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2367, !DIExpression(), !2369)
  store i32 0, ptr %return_value, align 4, !dbg !2369
  store ptr %return_value, ptr %taddr7, align 8
  %11 = load ptr, ptr %taddr7, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 4, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 4), !dbg !2371
  %14 = load i32, ptr %return_value, align 4, !dbg !2372
  %or = or i32 %14, 1, !dbg !2370
  store i32 %or, ptr %5, align 4, !dbg !2370
  ret void, !dbg !2370

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2363
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.16, i64 8, i32 76) #5, !dbg !2363
  unreachable, !dbg !2363

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2366
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.123, i64 11, ptr @.func.16, i64 8, i32 78) #5, !dbg !2366
  unreachable, !dbg !2366

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.123, i64 11, ptr @.func.16, i64 8, i32 78, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2366
  unreachable, !dbg !2366
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Mcg32Random.next_short(ptr %0) #0 comdat !dbg !2373 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2376
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2376
  br i1 %2, label %panic, label %checkok, !dbg !2376

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2377, !DIExpression(), !2378)
    #dbg_declare(ptr %s, !2379, !DIExpression(), !2380)
  %3 = load ptr, ptr %self, align 8, !dbg !2381
  store ptr %3, ptr %s, align 8, !dbg !2381
    #dbg_declare(ptr %result, !2382, !DIExpression(), !2383)
  %4 = load ptr, ptr %s, align 8, !dbg !2384
  %checknull = icmp eq ptr %4, null, !dbg !2384
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2384
  br i1 %5, label %panic1, label %checkok2, !dbg !2384

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !2384
  %7 = urem i64 %6, 4, !dbg !2384
  %8 = icmp ne i64 %7, 0, !dbg !2384
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !2384
  br i1 %9, label %panic3, label %checkok5, !dbg !2384

checkok5:                                         ; preds = %checkok2
  %10 = load i32, ptr %4, align 4, !dbg !2384
  %lshr = lshr i32 %10, 16, !dbg !2385
  %11 = freeze i32 %lshr, !dbg !2385
  %trunc = trunc i32 %11 to i16, !dbg !2385
  store i16 %trunc, ptr %result, align 2, !dbg !2385
  %12 = load ptr, ptr %s, align 8, !dbg !2386
  %checknull6 = icmp eq ptr %12, null, !dbg !2386
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !2386
  br i1 %13, label %panic7, label %checkok8, !dbg !2386

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !2386
  %15 = urem i64 %14, 4, !dbg !2386
  %16 = icmp ne i64 %15, 0, !dbg !2386
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !2386
  br i1 %17, label %panic9, label %checkok16, !dbg !2386

checkok16:                                        ; preds = %checkok8
  %18 = load i32, ptr %12, align 4, !dbg !2386
  %mul = mul i32 %18, -1814600227, !dbg !2387
  store i32 %mul, ptr %12, align 4, !dbg !2387
  %19 = load i16, ptr %result, align 2, !dbg !2388
  ret i16 %19, !dbg !2388

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2378
  call void %20(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.31, i64 10, i32 81) #5, !dbg !2378
  unreachable, !dbg !2378

panic1:                                           ; preds = %checkok
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2384
  call void %21(ptr @.panic_msg.20, i64 42, ptr @.file.123, i64 11, ptr @.func.31, i64 10, i32 84) #5, !dbg !2384
  unreachable, !dbg !2384

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %24 = insertvalue %any undef, ptr %taddr4, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.123, i64 11, ptr @.func.31, i64 10, i32 84, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2384
  unreachable, !dbg !2384

panic7:                                           ; preds = %checkok5
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2386
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.123, i64 11, ptr @.func.31, i64 10, i32 85) #5, !dbg !2386
  unreachable, !dbg !2386

panic9:                                           ; preds = %checkok8
  store i64 4, ptr %taddr10, align 8
  %28 = insertvalue %any undef, ptr %taddr10, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %30 = insertvalue %any undef, ptr %taddr11, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %31, ptr %ptradd13, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.123, i64 11, ptr @.func.31, i64 10, i32 85, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !2386
  unreachable, !dbg !2386
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2389 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2390
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2390
  br i1 %4, label %panic, label %checkok, !dbg !2390

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2391, !DIExpression(), !2392)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2393, !DIExpression(), !2394)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2395
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2395
  %lt = icmp ult i64 0, %5, !dbg !2395
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2395

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2395
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.123, i64 11, ptr @.func.21, i64 10, i32 90) #5, !dbg !2395
  unreachable, !dbg !2395

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2397, !DIExpression(), !2399)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2400
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2400
  store i64 %7, ptr %len, align 8, !dbg !2400
  br label %loop.cond, !dbg !2401

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2402
  %lt4 = icmp ult i64 0, %8, !dbg !2402
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2402

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2404, !DIExpression(), !2406)
  %9 = load ptr, ptr %self, align 8, !dbg !2407
  %10 = call i16 @std.math.random.Mcg32Random.next_short(ptr %9), !dbg !2408
  store i16 %10, ptr %value, align 2, !dbg !2408
  %11 = load i64, ptr %len, align 8, !dbg !2409
  %le = icmp ule i64 %11, 2, !dbg !2409
  br i1 %le, label %if.then, label %if.exit, !dbg !2409

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2410
  %add = add i64 0, %13, !dbg !2410
  %gt = icmp ugt i64 0, %add, !dbg !2410
  %sub = sub i64 %add, 0, !dbg !2410
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2410
  br i1 %14, label %panic5, label %checkok7, !dbg !2410

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !2412
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2412
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !2412
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !2413
  %18 = extractvalue %"char[]" %17, 0, !dbg !2413
  %19 = extractvalue %"char[]" %17, 1, !dbg !2414
  %gt8 = icmp ugt i64 0, %19, !dbg !2414
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !2414
  br i1 %20, label %panic9, label %checkok16, !dbg !2414

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !2413
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !2413
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !2413
  %23 = extractvalue %"char[]" %22, 0, !dbg !2413
  %24 = extractvalue %"char[]" %16, 0, !dbg !2413
  %25 = extractvalue %"char[]" %16, 1, !dbg !2413
  %26 = extractvalue %"char[]" %22, 1, !dbg !2413
  %neq = icmp ne i64 %26, %25, !dbg !2413
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2413
  br i1 %27, label %panic18, label %checkok25, !dbg !2413

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !2413
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !2413
  br label %expr_block.exit, !dbg !2415

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 2, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !2416
  %33 = extractvalue %"char[]" %32, 0, !dbg !2416
  %34 = extractvalue %"char[]" %32, 1, !dbg !2416
  %gt27 = icmp sgt i64 0, %34, !dbg !2416
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !2416
  br i1 %35, label %panic28, label %checkok35, !dbg !2416

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 2, !dbg !2416
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !2416
  br i1 %36, label %panic37, label %checkok44, !dbg !2416

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !2416
  %38 = insertvalue %"char[]" %37, i64 2, 1, !dbg !2416
  %39 = extractvalue %"char[]" %38, 0, !dbg !2416
  %40 = extractvalue %"char[]" %31, 0, !dbg !2416
  %41 = extractvalue %"char[]" %31, 1, !dbg !2416
  %42 = extractvalue %"char[]" %38, 1, !dbg !2416
  %neq45 = icmp ne i64 %42, %41, !dbg !2416
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !2416
  br i1 %43, label %panic46, label %checkok53, !dbg !2416

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !2416
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !2416
  %45 = load i64, ptr %len, align 8, !dbg !2417
  %sub54 = sub i64 %45, 2, !dbg !2417
  store i64 %sub54, ptr %len, align 8, !dbg !2417
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !2418
  %47 = extractvalue %"char[]" %46, 0, !dbg !2418
  %48 = extractvalue %"char[]" %46, 1, !dbg !2419
  %gt55 = icmp ugt i64 2, %48, !dbg !2419
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !2419
  br i1 %49, label %panic56, label %checkok63, !dbg !2419

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 2, !dbg !2418
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 2, !dbg !2418
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !2418
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !2418
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !2418
  br label %loop.cond, !dbg !2418

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.130, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2420
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2420
  %hi = load i64, ptr %ptradd66, align 8, !dbg !2420
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.131, i64 11, ptr @.str.132, i64 22, i32 92, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !2423
  unreachable, !dbg !2424

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !2424

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2392
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.21, i64 10, i32 92) #5, !dbg !2392
  unreachable, !dbg !2392

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2412
  unreachable, !dbg !2412

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !2413
  unreachable, !dbg !2413

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !2413
  unreachable, !dbg !2413

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !2416
  unreachable, !dbg !2416

panic37:                                          ; preds = %checkok35
  store i64 1, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !2416
  unreachable, !dbg !2416

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !2416
  unreachable, !dbg !2416

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !2418
  unreachable, !dbg !2418
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Mcg32Random.next_int128(ptr %0) #0 comdat !dbg !2425 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2428
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2428
  br i1 %2, label %panic, label %checkok, !dbg !2428

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2429, !DIExpression(), !2430)
  %3 = load ptr, ptr %self, align 8, !dbg !2431
  %4 = call i64 @std.math.random.Mcg32Random.next_long(ptr %3), !dbg !2433
  %zext = zext i64 %4 to i128, !dbg !2433
  %shl = shl i128 %zext, 64, !dbg !2433
  %5 = freeze i128 %shl, !dbg !2433
  %6 = load ptr, ptr %self, align 8, !dbg !2431
  %7 = call i64 @std.math.random.Mcg32Random.next_long(ptr %6), !dbg !2434
  %zext1 = zext i64 %7 to i128, !dbg !2434
  %add = add i128 %5, %zext1, !dbg !2433
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2430
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.29, i64 11, i32 93) #5, !dbg !2430
  unreachable, !dbg !2430
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg32Random.next_long(ptr %0) #0 comdat !dbg !2435 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2438
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2438
  br i1 %2, label %panic, label %checkok, !dbg !2438

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2439, !DIExpression(), !2440)
  %3 = load ptr, ptr %self, align 8, !dbg !2441
  %4 = call i32 @std.math.random.Mcg32Random.next_int(ptr %3), !dbg !2443
  %zext = zext i32 %4 to i64, !dbg !2443
  %shl = shl i64 %zext, 32, !dbg !2443
  %5 = freeze i64 %shl, !dbg !2443
  %6 = load ptr, ptr %self, align 8, !dbg !2441
  %7 = call i32 @std.math.random.Mcg32Random.next_int(ptr %6), !dbg !2444
  %zext1 = zext i32 %7 to i64, !dbg !2444
  %add = add i64 %5, %zext1, !dbg !2443
  ret i64 %add, !dbg !2443

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2440
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.19, i64 9, i32 94) #5, !dbg !2440
  unreachable, !dbg !2440
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg32Random.next_int(ptr %0) #0 comdat !dbg !2445 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2448
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2448
  br i1 %2, label %panic, label %checkok, !dbg !2448

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2449, !DIExpression(), !2450)
  %3 = load ptr, ptr %self, align 8, !dbg !2451
  %4 = call i16 @std.math.random.Mcg32Random.next_short(ptr %3), !dbg !2453
  %zext = zext i16 %4 to i32, !dbg !2453
  %shl = shl i32 %zext, 16, !dbg !2453
  %5 = freeze i32 %shl, !dbg !2453
  %6 = load ptr, ptr %self, align 8, !dbg !2451
  %7 = call i16 @std.math.random.Mcg32Random.next_short(ptr %6), !dbg !2454
  %zext1 = zext i16 %7 to i32, !dbg !2454
  %add = add i32 %5, %zext1, !dbg !2453
  ret i32 %add, !dbg !2453

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2450
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.30, i64 8, i32 95) #5, !dbg !2450
  unreachable, !dbg !2450
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Mcg32Random.next_byte(ptr %0) #0 comdat !dbg !2455 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2458
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2458
  br i1 %2, label %panic, label %checkok, !dbg !2458

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2459, !DIExpression(), !2460)
  %3 = load ptr, ptr %self, align 8, !dbg !2461
  %4 = call i16 @std.math.random.Mcg32Random.next_short(ptr %3), !dbg !2458
  %trunc = trunc i16 %4 to i8, !dbg !2458
  ret i8 %trunc, !dbg !2458

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2460
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.32, i64 9, i32 96) #5, !dbg !2460
  unreachable, !dbg !2460
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2462 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %taddr7 = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2467
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2467
  br i1 %4, label %panic, label %checkok, !dbg !2467

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2468, !DIExpression(), !2469)
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %seed, !2470, !DIExpression(), !2471)
  %5 = load ptr, ptr %self, align 8, !dbg !2472
  %checknull = icmp eq ptr %5, null, !dbg !2472
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2472
  br i1 %6, label %panic1, label %checkok2, !dbg !2472

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2472
  %8 = urem i64 %7, 2, !dbg !2472
  %9 = icmp ne i64 %8, 0, !dbg !2472
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2472
  br i1 %10, label %panic3, label %checkok6, !dbg !2472

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2473, !DIExpression(), !2475)
  store i16 0, ptr %return_value, align 2, !dbg !2475
  store ptr %return_value, ptr %taddr7, align 8
  %11 = load ptr, ptr %taddr7, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 2, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 2), !dbg !2477
  %14 = load i16, ptr %return_value, align 2, !dbg !2478
  %or = or i16 %14, 1, !dbg !2476
  store i16 %or, ptr %5, align 2, !dbg !2476
  ret void, !dbg !2476

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2469
  call void %15(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.16, i64 8, i32 102) #5, !dbg !2469
  unreachable, !dbg !2469

panic1:                                           ; preds = %checkok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2472
  call void %16(ptr @.panic_msg.17, i64 45, ptr @.file.123, i64 11, ptr @.func.16, i64 8, i32 104) #5, !dbg !2472
  unreachable, !dbg !2472

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %19 = insertvalue %any undef, ptr %taddr4, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %18, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd5, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.123, i64 11, ptr @.func.16, i64 8, i32 104, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2472
  unreachable, !dbg !2472
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Mcg16Random.next_byte(ptr %0) #0 comdat !dbg !2479 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2482
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2482
  br i1 %2, label %panic, label %checkok, !dbg !2482

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2483, !DIExpression(), !2484)
    #dbg_declare(ptr %s, !2485, !DIExpression(), !2486)
  %3 = load ptr, ptr %self, align 8, !dbg !2487
  store ptr %3, ptr %s, align 8, !dbg !2487
    #dbg_declare(ptr %result, !2488, !DIExpression(), !2489)
  %4 = load ptr, ptr %s, align 8, !dbg !2490
  %checknull = icmp eq ptr %4, null, !dbg !2490
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2490
  br i1 %5, label %panic1, label %checkok2, !dbg !2490

checkok2:                                         ; preds = %checkok
  %6 = ptrtoint ptr %4 to i64, !dbg !2490
  %7 = urem i64 %6, 2, !dbg !2490
  %8 = icmp ne i64 %7, 0, !dbg !2490
  %9 = call i1 @llvm.expect.i1(i1 %8, i1 false), !dbg !2490
  br i1 %9, label %panic3, label %checkok5, !dbg !2490

checkok5:                                         ; preds = %checkok2
  %10 = load i16, ptr %4, align 2, !dbg !2490
  %zext = zext i16 %10 to i32, !dbg !2490
  %lshr = lshr i32 %zext, 8, !dbg !2491
  %11 = freeze i32 %lshr, !dbg !2491
  %trunc = trunc i32 %11 to i8, !dbg !2491
  store i8 %trunc, ptr %result, align 1, !dbg !2491
  %12 = load ptr, ptr %s, align 8, !dbg !2492
  %checknull6 = icmp eq ptr %12, null, !dbg !2492
  %13 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !2492
  br i1 %13, label %panic7, label %checkok8, !dbg !2492

checkok8:                                         ; preds = %checkok5
  %14 = ptrtoint ptr %12 to i64, !dbg !2492
  %15 = urem i64 %14, 2, !dbg !2492
  %16 = icmp ne i64 %15, 0, !dbg !2492
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !2492
  br i1 %17, label %panic9, label %checkok16, !dbg !2492

checkok16:                                        ; preds = %checkok8
  %18 = load i16, ptr %12, align 2, !dbg !2492
  %mul = mul i16 %18, -27691, !dbg !2493
  store i16 %mul, ptr %12, align 2, !dbg !2493
  %19 = load i8, ptr %result, align 1, !dbg !2494
  ret i8 %19, !dbg !2494

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2484
  call void %20(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.32, i64 9, i32 107) #5, !dbg !2484
  unreachable, !dbg !2484

panic1:                                           ; preds = %checkok
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2490
  call void %21(ptr @.panic_msg.20, i64 42, ptr @.file.123, i64 11, ptr @.func.32, i64 9, i32 110) #5, !dbg !2490
  unreachable, !dbg !2490

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %24 = insertvalue %any undef, ptr %taddr4, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.123, i64 11, ptr @.func.32, i64 9, i32 110, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2490
  unreachable, !dbg !2490

panic7:                                           ; preds = %checkok5
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2492
  call void %27(ptr @.panic_msg.20, i64 42, ptr @.file.123, i64 11, ptr @.func.32, i64 9, i32 111) #5, !dbg !2492
  unreachable, !dbg !2492

panic9:                                           ; preds = %checkok8
  store i64 2, ptr %taddr10, align 8
  %28 = insertvalue %any undef, ptr %taddr10, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr11, align 8
  %30 = insertvalue %any undef, ptr %taddr11, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %29, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %31, ptr %ptradd13, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.123, i64 11, ptr @.func.32, i64 9, i32 111, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !2492
  unreachable, !dbg !2492
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2495 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots10 = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %taddr24 = alloca ptr, align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg65 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2496
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2496
  br i1 %4, label %panic, label %checkok, !dbg !2496

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2497, !DIExpression(), !2498)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2499, !DIExpression(), !2500)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2501, !DIExpression(), !2503)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !2504
  %5 = load i64, ptr %ptradd2, align 8, !dbg !2504
  store i64 %5, ptr %len, align 8, !dbg !2504
  br label %loop.cond, !dbg !2505

loop.cond:                                        ; preds = %checkok61, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !2506
  %lt = icmp ult i64 0, %6, !dbg !2506
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2506

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2508, !DIExpression(), !2510)
  %7 = load ptr, ptr %self, align 8, !dbg !2511
  %8 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %7), !dbg !2512
  store i8 %8, ptr %value, align 1, !dbg !2512
  %9 = load i64, ptr %len, align 8, !dbg !2513
  %le = icmp ule i64 %9, 1, !dbg !2513
  br i1 %le, label %if.then, label %if.exit, !dbg !2513

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !2514
  %add = add i64 0, %11, !dbg !2514
  %gt = icmp ugt i64 0, %add, !dbg !2514
  %sub = sub i64 %add, 0, !dbg !2514
  %12 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2514
  br i1 %12, label %panic3, label %checkok5, !dbg !2514

checkok5:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !2516
  %13 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !2516
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !2516
  %15 = load %"char[]", ptr %bytes1, align 8, !dbg !2517
  %16 = extractvalue %"char[]" %15, 0, !dbg !2517
  %17 = extractvalue %"char[]" %15, 1, !dbg !2518
  %gt6 = icmp ugt i64 0, %17, !dbg !2518
  %18 = call i1 @llvm.expect.i1(i1 %gt6, i1 false), !dbg !2518
  br i1 %18, label %panic7, label %checkok14, !dbg !2518

checkok14:                                        ; preds = %checkok5
  %size15 = sub i64 %17, 0, !dbg !2517
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !2517
  %20 = insertvalue %"char[]" %19, i64 %size15, 1, !dbg !2517
  %21 = extractvalue %"char[]" %20, 0, !dbg !2517
  %22 = extractvalue %"char[]" %14, 0, !dbg !2517
  %23 = extractvalue %"char[]" %14, 1, !dbg !2517
  %24 = extractvalue %"char[]" %20, 1, !dbg !2517
  %neq = icmp ne i64 %24, %23, !dbg !2517
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2517
  br i1 %25, label %panic16, label %checkok23, !dbg !2517

checkok23:                                        ; preds = %checkok14
  %26 = mul i64 %23, 1, !dbg !2517
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !2517
  br label %expr_block.exit, !dbg !2519

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr24, align 8
  %27 = load ptr, ptr %taddr24, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 1, 1
  %30 = load %"char[]", ptr %bytes1, align 8, !dbg !2520
  %31 = extractvalue %"char[]" %30, 0, !dbg !2520
  %32 = extractvalue %"char[]" %30, 1, !dbg !2520
  %gt25 = icmp sgt i64 0, %32, !dbg !2520
  %33 = call i1 @llvm.expect.i1(i1 %gt25, i1 false), !dbg !2520
  br i1 %33, label %panic26, label %checkok33, !dbg !2520

checkok33:                                        ; preds = %if.exit
  %lt34 = icmp slt i64 %32, 1, !dbg !2520
  %34 = call i1 @llvm.expect.i1(i1 %lt34, i1 false), !dbg !2520
  br i1 %34, label %panic35, label %checkok42, !dbg !2520

checkok42:                                        ; preds = %checkok33
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !2520
  %36 = insertvalue %"char[]" %35, i64 1, 1, !dbg !2520
  %37 = extractvalue %"char[]" %36, 0, !dbg !2520
  %38 = extractvalue %"char[]" %29, 0, !dbg !2520
  %39 = extractvalue %"char[]" %29, 1, !dbg !2520
  %40 = extractvalue %"char[]" %36, 1, !dbg !2520
  %neq43 = icmp ne i64 %40, %39, !dbg !2520
  %41 = call i1 @llvm.expect.i1(i1 %neq43, i1 false), !dbg !2520
  br i1 %41, label %panic44, label %checkok51, !dbg !2520

checkok51:                                        ; preds = %checkok42
  %42 = mul i64 %39, 1, !dbg !2520
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !2520
  %43 = load i64, ptr %len, align 8, !dbg !2521
  %sub52 = sub i64 %43, 1, !dbg !2521
  store i64 %sub52, ptr %len, align 8, !dbg !2521
  %44 = load %"char[]", ptr %bytes1, align 8, !dbg !2522
  %45 = extractvalue %"char[]" %44, 0, !dbg !2522
  %46 = extractvalue %"char[]" %44, 1, !dbg !2523
  %gt53 = icmp ugt i64 1, %46, !dbg !2523
  %47 = call i1 @llvm.expect.i1(i1 %gt53, i1 false), !dbg !2523
  br i1 %47, label %panic54, label %checkok61, !dbg !2523

checkok61:                                        ; preds = %checkok51
  %size62 = sub i64 %46, 1, !dbg !2522
  %ptradd63 = getelementptr inbounds i8, ptr %45, i64 1, !dbg !2522
  %48 = insertvalue %"char[]" undef, ptr %ptradd63, 0, !dbg !2522
  %49 = insertvalue %"char[]" %48, i64 %size62, 1, !dbg !2522
  store %"char[]" %49, ptr %bytes1, align 8, !dbg !2522
  br label %loop.cond, !dbg !2522

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.133, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2524
  %ptradd64 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2524
  %hi = load i64, ptr %ptradd64, align 8, !dbg !2524
  store %"any[]" zeroinitializer, ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.134, i64 11, ptr @.str.135, i64 22, i32 115, ptr byval(%"any[]") align 8 %indirectarg65), !dbg !2527
  unreachable, !dbg !2528

expr_block.exit:                                  ; preds = %checkok23
  ret void, !dbg !2528

panic:                                            ; preds = %entry
  %50 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2498
  call void %50(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.21, i64 10, i32 115) #5, !dbg !2498
  unreachable, !dbg !2498

panic3:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr4, align 8
  %51 = insertvalue %any undef, ptr %taddr4, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %52, ptr %varargslots, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2516
  unreachable, !dbg !2516

panic7:                                           ; preds = %checkok5
  store i64 %17, ptr %taddr8, align 8
  %54 = insertvalue %any undef, ptr %taddr8, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr9, align 8
  %56 = insertvalue %any undef, ptr %taddr9, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %55, ptr %varargslots10, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots10, i64 16
  store %any %57, ptr %ptradd11, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots10, 0
  %"$$temp12" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp12", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg13) #5, !dbg !2517
  unreachable, !dbg !2517

panic16:                                          ; preds = %checkok14
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr18, align 8
  %61 = insertvalue %any undef, ptr %taddr18, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %60, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %62, ptr %ptradd20, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg22) #5, !dbg !2517
  unreachable, !dbg !2517

panic26:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr28, align 8
  %66 = insertvalue %any undef, ptr %taddr28, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %65, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %67, ptr %ptradd30, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg32) #5, !dbg !2520
  unreachable, !dbg !2520

panic35:                                          ; preds = %checkok33
  store i64 0, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr37, align 8
  %71 = insertvalue %any undef, ptr %taddr37, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %70, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %72, ptr %ptradd39, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg41) #5, !dbg !2520
  unreachable, !dbg !2520

panic44:                                          ; preds = %checkok42
  store i64 %40, ptr %taddr45, align 8
  %74 = insertvalue %any undef, ptr %taddr45, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr46, align 8
  %76 = insertvalue %any undef, ptr %taddr46, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %75, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %77, ptr %ptradd48, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg50) #5, !dbg !2520
  unreachable, !dbg !2520

panic54:                                          ; preds = %checkok51
  store i64 %46, ptr %taddr55, align 8
  %79 = insertvalue %any undef, ptr %taddr55, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr56, align 8
  %81 = insertvalue %any undef, ptr %taddr56, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %80, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %82, ptr %ptradd58, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg60) #5, !dbg !2522
  unreachable, !dbg !2522
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Mcg16Random.next_int128(ptr %0) #0 comdat !dbg !2529 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2532
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2532
  br i1 %2, label %panic, label %checkok, !dbg !2532

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2533, !DIExpression(), !2534)
  %3 = load ptr, ptr %self, align 8, !dbg !2535
  %4 = call i64 @std.math.random.Mcg16Random.next_long(ptr %3), !dbg !2537
  %zext = zext i64 %4 to i128, !dbg !2537
  %shl = shl i128 %zext, 64, !dbg !2537
  %5 = freeze i128 %shl, !dbg !2537
  %6 = load ptr, ptr %self, align 8, !dbg !2535
  %7 = call i64 @std.math.random.Mcg16Random.next_long(ptr %6), !dbg !2538
  %zext1 = zext i64 %7 to i128, !dbg !2538
  %add = add i128 %5, %zext1, !dbg !2537
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2534
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.29, i64 11, i32 116) #5, !dbg !2534
  unreachable, !dbg !2534
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg16Random.next_long(ptr %0) #0 comdat !dbg !2539 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2542
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2542
  br i1 %2, label %panic, label %checkok, !dbg !2542

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2543, !DIExpression(), !2544)
  %3 = load ptr, ptr %self, align 8, !dbg !2545
  %4 = call i32 @std.math.random.Mcg16Random.next_int(ptr %3), !dbg !2547
  %zext = zext i32 %4 to i64, !dbg !2547
  %shl = shl i64 %zext, 32, !dbg !2547
  %5 = freeze i64 %shl, !dbg !2547
  %6 = load ptr, ptr %self, align 8, !dbg !2545
  %7 = call i32 @std.math.random.Mcg16Random.next_int(ptr %6), !dbg !2548
  %zext1 = zext i32 %7 to i64, !dbg !2548
  %add = add i64 %5, %zext1, !dbg !2547
  ret i64 %add, !dbg !2547

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2544
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.19, i64 9, i32 117) #5, !dbg !2544
  unreachable, !dbg !2544
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg16Random.next_int(ptr %0) #0 comdat !dbg !2549 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2552
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2552
  br i1 %2, label %panic, label %checkok, !dbg !2552

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2553, !DIExpression(), !2554)
  %3 = load ptr, ptr %self, align 8, !dbg !2555
  %4 = call i16 @std.math.random.Mcg16Random.next_short(ptr %3), !dbg !2557
  %zext = zext i16 %4 to i32, !dbg !2557
  %shl = shl i32 %zext, 16, !dbg !2557
  %5 = freeze i32 %shl, !dbg !2557
  %6 = load ptr, ptr %self, align 8, !dbg !2555
  %7 = call i16 @std.math.random.Mcg16Random.next_short(ptr %6), !dbg !2558
  %zext1 = zext i16 %7 to i32, !dbg !2558
  %add = add i32 %5, %zext1, !dbg !2557
  ret i32 %add, !dbg !2557

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2554
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.30, i64 8, i32 118) #5, !dbg !2554
  unreachable, !dbg !2554
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Mcg16Random.next_short(ptr %0) #0 comdat !dbg !2559 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2562
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2562
  br i1 %2, label %panic, label %checkok, !dbg !2562

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2563, !DIExpression(), !2564)
  %3 = load ptr, ptr %self, align 8, !dbg !2565
  %4 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %3), !dbg !2567
  %zext = zext i8 %4 to i16, !dbg !2567
  %zext1 = zext i16 %zext to i32, !dbg !2567
  %shl = shl i32 %zext1, 8, !dbg !2567
  %5 = freeze i32 %shl, !dbg !2567
  %6 = load ptr, ptr %self, align 8, !dbg !2565
  %7 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %6), !dbg !2568
  %zext2 = zext i8 %7 to i32, !dbg !2568
  %add = add i32 %5, %zext2, !dbg !2567
  %trunc = trunc i32 %add to i16, !dbg !2567
  ret i16 %trunc, !dbg !2567

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2564
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.123, i64 11, ptr @.func.31, i64 10, i32 119) #5, !dbg !2564
  unreachable, !dbg !2564
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2569 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i128], align 16
  %taddr8 = alloca ptr, align 8
  %expr = alloca [4 x i128], align 16
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2579
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2579
  br i1 %4, label %panic, label %checkok, !dbg !2579

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2580, !DIExpression(), !2581)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !2582, !DIExpression(), !2583)
  %5 = load ptr, ptr %self, align 8, !dbg !2584
  %checknull = icmp eq ptr %5, null, !dbg !2584
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2584
  br i1 %6, label %panic1, label %checkok2, !dbg !2584

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2584
  %8 = urem i64 %7, 16, !dbg !2584
  %9 = icmp ne i64 %8, 0, !dbg !2584
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2584
  br i1 %10, label %panic3, label %checkok6, !dbg !2584

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2585, !DIExpression(), !2587)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 64, i1 false), !dbg !2587
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 64, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 64), !dbg !2589
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 64, i1 false)
  %checknull10 = icmp eq ptr %expr, null, !dbg !2590
  %14 = call i1 @llvm.expect.i1(i1 %checknull10, i1 false), !dbg !2590
  br i1 %14, label %panic11, label %checkok12, !dbg !2590

checkok12:                                        ; preds = %checkok6
  %15 = ptrtoint ptr %expr to i64, !dbg !2593
  %16 = urem i64 %15, 16, !dbg !2593
  %17 = icmp ne i64 %16, 0, !dbg !2593
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false), !dbg !2593
  br i1 %18, label %panic13, label %checkok20, !dbg !2593

checkok20:                                        ; preds = %checkok12
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %5, ptr align 16 %expr, i32 64, i1 false), !dbg !2593
  ret void, !dbg !2593

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2581
  call void %19(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.16, i64 8, i32 17) #5, !dbg !2581
  unreachable, !dbg !2581

panic1:                                           ; preds = %checkok
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2584
  call void %20(ptr @.panic_msg.17, i64 45, ptr @.file.145, i64 12, ptr @.func.16, i64 8, i32 19) #5, !dbg !2584
  unreachable, !dbg !2584

panic3:                                           ; preds = %checkok2
  store i64 16, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %23 = insertvalue %any undef, ptr %taddr4, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd5, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.145, i64 12, ptr @.func.16, i64 8, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2584
  unreachable, !dbg !2584

panic11:                                          ; preds = %checkok6
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2593
  call void %26(ptr @.panic_msg.52, i64 42, ptr @.file.57, i64 10, ptr @.func.16, i64 8, i32 254) #5, !dbg !2593
  unreachable, !dbg !2593

panic13:                                          ; preds = %checkok12
  store i64 16, ptr %taddr14, align 8
  %27 = insertvalue %any undef, ptr %taddr14, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr15, align 8
  %29 = insertvalue %any undef, ptr %taddr15, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %30, ptr %ptradd17, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.57, i64 10, ptr @.func.16, i64 8, i32 254, ptr byval(%"any[]") align 8 %indirectarg19) #5, !dbg !2593
  unreachable, !dbg !2593
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %0) #0 comdat !dbg !2594 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i128, align 16
  %self1 = alloca i128, align 16
  %shift = alloca i128, align 16
  %s1 = alloca i128, align 16
  %self13 = alloca i128, align 16
  %shift14 = alloca i128, align 16
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2597
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2597
  br i1 %2, label %panic, label %checkok, !dbg !2597

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2598, !DIExpression(), !2599)
    #dbg_declare(ptr %s0, !2600, !DIExpression(), !2601)
  %3 = load ptr, ptr %self, align 8, !dbg !2602
  %4 = load i128, ptr %3, align 16, !dbg !2602
  store i128 %4, ptr %s0, align 16, !dbg !2602
  %5 = load ptr, ptr %self, align 8, !dbg !2603
  %6 = load ptr, ptr %self, align 8, !dbg !2604
  %7 = load i128, ptr %6, align 16, !dbg !2604
  %8 = load ptr, ptr %self, align 8, !dbg !2605
  %9 = load i128, ptr %8, align 16, !dbg !2605
  %mul = mul i128 %7, %9, !dbg !2604
  %10 = load ptr, ptr %self, align 8, !dbg !2606
  %ptradd = getelementptr inbounds i8, ptr %10, i64 32, !dbg !2606
  %11 = load i128, ptr %ptradd, align 16, !dbg !2606
  %add = add i128 %mul, %11, !dbg !2604
  store i128 %add, ptr %5, align 16, !dbg !2604
  %12 = load ptr, ptr %self, align 8, !dbg !2607
  %13 = load ptr, ptr %self, align 8, !dbg !2608
  %14 = load i128, ptr %13, align 16
  store i128 %14, ptr %self1, align 16
  store i128 64, ptr %shift, align 16
  %15 = load i128, ptr %self1, align 16, !dbg !2609
  %16 = load i128, ptr %self1, align 16, !dbg !2611
  %17 = load i128, ptr %shift, align 16, !dbg !2612
  %18 = call i128 @llvm.fshr.i128(i128 %15, i128 %16, i128 %17), !dbg !2612
  store i128 %18, ptr %12, align 16, !dbg !2612
  %19 = load ptr, ptr %self, align 8, !dbg !2613
  %ptradd2 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !2613
  %20 = load i128, ptr %ptradd2, align 16, !dbg !2613
  %add3 = add i128 %20, -129976298391535590297638237547755878347, !dbg !2613
  store i128 %add3, ptr %ptradd2, align 16, !dbg !2613
  %21 = load ptr, ptr %self, align 8, !dbg !2614
  %ptradd4 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !2614
  %22 = load ptr, ptr %self, align 8, !dbg !2615
  %ptradd5 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !2615
  %23 = load i128, ptr %ptradd5, align 16, !dbg !2615
  %24 = load ptr, ptr %self, align 8, !dbg !2616
  %ptradd6 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !2616
  %25 = load i128, ptr %ptradd6, align 16, !dbg !2616
  %mul7 = mul i128 %23, %25, !dbg !2615
  %26 = load ptr, ptr %self, align 8, !dbg !2617
  %ptradd8 = getelementptr inbounds i8, ptr %26, i64 48, !dbg !2617
  %27 = load i128, ptr %ptradd8, align 16, !dbg !2617
  %add9 = add i128 %mul7, %27, !dbg !2615
  store i128 %add9, ptr %ptradd4, align 16, !dbg !2615
    #dbg_declare(ptr %s1, !2618, !DIExpression(), !2619)
  %28 = load ptr, ptr %self, align 8, !dbg !2620
  %ptradd10 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !2620
  %29 = load i128, ptr %ptradd10, align 16, !dbg !2620
  store i128 %29, ptr %s1, align 16, !dbg !2620
  %30 = load ptr, ptr %self, align 8, !dbg !2621
  %ptradd11 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !2621
  %31 = load ptr, ptr %self, align 8, !dbg !2622
  %ptradd12 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !2622
  %32 = load i128, ptr %ptradd12, align 16
  store i128 %32, ptr %self13, align 16
  store i128 64, ptr %shift14, align 16
  %33 = load i128, ptr %self13, align 16, !dbg !2623
  %34 = load i128, ptr %self13, align 16, !dbg !2625
  %35 = load i128, ptr %shift14, align 16, !dbg !2626
  %36 = call i128 @llvm.fshr.i128(i128 %33, i128 %34, i128 %35), !dbg !2626
  store i128 %36, ptr %ptradd11, align 16, !dbg !2626
  %37 = load ptr, ptr %self, align 8, !dbg !2627
  %ptradd15 = getelementptr inbounds i8, ptr %37, i64 48, !dbg !2627
  %38 = load i128, ptr %ptradd15, align 16, !dbg !2627
  %sub = sub i128 %38, -129976298391535590297638237547755878347, !dbg !2627
  store i128 %sub, ptr %ptradd15, align 16, !dbg !2627
  %39 = load i128, ptr %s0, align 16, !dbg !2628
  %40 = load i128, ptr %s1, align 16, !dbg !2629
  %add16 = add i128 %39, %40, !dbg !2628
  store i128 %add16, ptr %taddr, align 16
  %41 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %41

panic:                                            ; preds = %entry
  %42 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2599
  call void %42(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.29, i64 11, i32 23) #5, !dbg !2599
  unreachable, !dbg !2599
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2630 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i128, align 16
  %result = alloca i128, align 16
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2631
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2631
  br i1 %4, label %panic, label %checkok, !dbg !2631

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2632, !DIExpression(), !2633)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2634, !DIExpression(), !2635)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2636
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2636
  %lt = icmp ult i64 0, %5, !dbg !2636
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2636

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2636
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.145, i64 12, ptr @.func.21, i64 10, i32 39) #5, !dbg !2636
  unreachable, !dbg !2636

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2638, !DIExpression(), !2640)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2641
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2641
  store i64 %7, ptr %len, align 8, !dbg !2641
  br label %loop.cond, !dbg !2642

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2643
  %lt4 = icmp ult i64 0, %8, !dbg !2643
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2643

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2645, !DIExpression(), !2647)
  %9 = load ptr, ptr %self, align 8, !dbg !2648
  %10 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %9), !dbg !2649
  store { i64, i64 } %10, ptr %result, align 16
  %11 = load i128, ptr %result, align 16
  store i128 %11, ptr %value, align 16
  %12 = load i64, ptr %len, align 8, !dbg !2650
  %le = icmp ule i64 %12, 16, !dbg !2650
  br i1 %le, label %if.then, label %if.exit, !dbg !2650

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %13 = load ptr, ptr %taddr, align 8
  %14 = load i64, ptr %len, align 8, !dbg !2651
  %add = add i64 0, %14, !dbg !2651
  %gt = icmp ugt i64 0, %add, !dbg !2651
  %sub = sub i64 %add, 0, !dbg !2651
  %15 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2651
  br i1 %15, label %panic5, label %checkok7, !dbg !2651

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !2653
  %16 = insertvalue %"char[]" undef, ptr %13, 0, !dbg !2653
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !2653
  %18 = load %"char[]", ptr %bytes2, align 8, !dbg !2654
  %19 = extractvalue %"char[]" %18, 0, !dbg !2654
  %20 = extractvalue %"char[]" %18, 1, !dbg !2655
  %gt8 = icmp ugt i64 0, %20, !dbg !2655
  %21 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !2655
  br i1 %21, label %panic9, label %checkok16, !dbg !2655

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %20, 0, !dbg !2654
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !2654
  %23 = insertvalue %"char[]" %22, i64 %size17, 1, !dbg !2654
  %24 = extractvalue %"char[]" %23, 0, !dbg !2654
  %25 = extractvalue %"char[]" %17, 0, !dbg !2654
  %26 = extractvalue %"char[]" %17, 1, !dbg !2654
  %27 = extractvalue %"char[]" %23, 1, !dbg !2654
  %neq = icmp ne i64 %27, %26, !dbg !2654
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2654
  br i1 %28, label %panic18, label %checkok25, !dbg !2654

checkok25:                                        ; preds = %checkok16
  %29 = mul i64 %26, 1, !dbg !2654
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !2654
  br label %expr_block.exit, !dbg !2656

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %30 = load ptr, ptr %taddr26, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 16, 1
  %33 = load %"char[]", ptr %bytes2, align 8, !dbg !2657
  %34 = extractvalue %"char[]" %33, 0, !dbg !2657
  %35 = extractvalue %"char[]" %33, 1, !dbg !2657
  %gt27 = icmp sgt i64 0, %35, !dbg !2657
  %36 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !2657
  br i1 %36, label %panic28, label %checkok35, !dbg !2657

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %35, 16, !dbg !2657
  %37 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !2657
  br i1 %37, label %panic37, label %checkok44, !dbg !2657

checkok44:                                        ; preds = %checkok35
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !2657
  %39 = insertvalue %"char[]" %38, i64 16, 1, !dbg !2657
  %40 = extractvalue %"char[]" %39, 0, !dbg !2657
  %41 = extractvalue %"char[]" %32, 0, !dbg !2657
  %42 = extractvalue %"char[]" %32, 1, !dbg !2657
  %43 = extractvalue %"char[]" %39, 1, !dbg !2657
  %neq45 = icmp ne i64 %43, %42, !dbg !2657
  %44 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !2657
  br i1 %44, label %panic46, label %checkok53, !dbg !2657

checkok53:                                        ; preds = %checkok44
  %45 = mul i64 %42, 1, !dbg !2657
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !2657
  %46 = load i64, ptr %len, align 8, !dbg !2658
  %sub54 = sub i64 %46, 16, !dbg !2658
  store i64 %sub54, ptr %len, align 8, !dbg !2658
  %47 = load %"char[]", ptr %bytes2, align 8, !dbg !2659
  %48 = extractvalue %"char[]" %47, 0, !dbg !2659
  %49 = extractvalue %"char[]" %47, 1, !dbg !2660
  %gt55 = icmp ugt i64 16, %49, !dbg !2660
  %50 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !2660
  br i1 %50, label %panic56, label %checkok63, !dbg !2660

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %49, 16, !dbg !2659
  %ptradd65 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !2659
  %51 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !2659
  %52 = insertvalue %"char[]" %51, i64 %size64, 1, !dbg !2659
  store %"char[]" %52, ptr %bytes2, align 8, !dbg !2659
  br label %loop.cond, !dbg !2659

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.146, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2661
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2661
  %hi = load i64, ptr %ptradd66, align 8, !dbg !2661
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.147, i64 12, ptr @.str.148, i64 24, i32 41, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !2664
  unreachable, !dbg !2665

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !2665

panic:                                            ; preds = %entry
  %53 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2633
  call void %53(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.21, i64 10, i32 41) #5, !dbg !2633
  unreachable, !dbg !2633

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %54 = insertvalue %any undef, ptr %taddr6, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %55, ptr %varargslots, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2653
  unreachable, !dbg !2653

panic9:                                           ; preds = %checkok7
  store i64 %20, ptr %taddr10, align 8
  %57 = insertvalue %any undef, ptr %taddr10, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %59 = insertvalue %any undef, ptr %taddr11, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %60, ptr %ptradd13, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !2654
  unreachable, !dbg !2654

panic18:                                          ; preds = %checkok16
  store i64 %27, ptr %taddr19, align 8
  %62 = insertvalue %any undef, ptr %taddr19, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr20, align 8
  %64 = insertvalue %any undef, ptr %taddr20, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %63, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %65, ptr %ptradd22, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !2654
  unreachable, !dbg !2654

panic28:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr29, align 8
  %67 = insertvalue %any undef, ptr %taddr29, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %69 = insertvalue %any undef, ptr %taddr30, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %70, ptr %ptradd32, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !2657
  unreachable, !dbg !2657

panic37:                                          ; preds = %checkok35
  store i64 15, ptr %taddr38, align 8
  %72 = insertvalue %any undef, ptr %taddr38, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr39, align 8
  %74 = insertvalue %any undef, ptr %taddr39, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %73, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %75, ptr %ptradd41, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !2657
  unreachable, !dbg !2657

panic46:                                          ; preds = %checkok44
  store i64 %43, ptr %taddr47, align 8
  %77 = insertvalue %any undef, ptr %taddr47, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr48, align 8
  %79 = insertvalue %any undef, ptr %taddr48, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %80, ptr %ptradd50, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !2657
  unreachable, !dbg !2657

panic56:                                          ; preds = %checkok53
  store i64 %49, ptr %taddr57, align 8
  %82 = insertvalue %any undef, ptr %taddr57, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 16, ptr %taddr58, align 8
  %84 = insertvalue %any undef, ptr %taddr58, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %83, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %85, ptr %ptradd60, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !2659
  unreachable, !dbg !2659
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws128Random.next_long(ptr %0) #0 comdat !dbg !2666 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2669
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2669
  br i1 %2, label %panic, label %checkok, !dbg !2669

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2670, !DIExpression(), !2671)
  %3 = load ptr, ptr %self, align 8, !dbg !2672
  %4 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !2669
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i64
  ret i64 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2671
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.19, i64 9, i32 42) #5, !dbg !2671
  unreachable, !dbg !2671
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws128Random.next_int(ptr %0) #0 comdat !dbg !2673 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2676
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2676
  br i1 %2, label %panic, label %checkok, !dbg !2676

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2677, !DIExpression(), !2678)
  %3 = load ptr, ptr %self, align 8, !dbg !2679
  %4 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !2676
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  ret i32 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2678
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.30, i64 8, i32 43) #5, !dbg !2678
  unreachable, !dbg !2678
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws128Random.next_short(ptr %0) #0 comdat !dbg !2680 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2683
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2683
  br i1 %2, label %panic, label %checkok, !dbg !2683

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2684, !DIExpression(), !2685)
  %3 = load ptr, ptr %self, align 8, !dbg !2686
  %4 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !2683
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i16
  ret i16 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2685
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.31, i64 10, i32 44) #5, !dbg !2685
  unreachable, !dbg !2685
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws128Random.next_byte(ptr %0) #0 comdat !dbg !2687 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2690
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2690
  br i1 %2, label %panic, label %checkok, !dbg !2690

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2691, !DIExpression(), !2692)
  %3 = load ptr, ptr %self, align 8, !dbg !2693
  %4 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !2690
  store { i64, i64 } %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i8
  ret i8 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2692
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.32, i64 9, i32 45) #5, !dbg !2692
  unreachable, !dbg !2692
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2694 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i64], align 16
  %taddr8 = alloca ptr, align 8
  %expr = alloca [4 x i64], align 16
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2704
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2704
  br i1 %4, label %panic, label %checkok, !dbg !2704

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2705, !DIExpression(), !2706)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !2707, !DIExpression(), !2708)
  %5 = load ptr, ptr %self, align 8, !dbg !2709
  %checknull = icmp eq ptr %5, null, !dbg !2709
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2709
  br i1 %6, label %panic1, label %checkok2, !dbg !2709

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2709
  %8 = urem i64 %7, 8, !dbg !2709
  %9 = icmp ne i64 %8, 0, !dbg !2709
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2709
  br i1 %10, label %panic3, label %checkok6, !dbg !2709

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2710, !DIExpression(), !2712)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 32, i1 false), !dbg !2712
  store ptr %return_value, ptr %taddr8, align 8
  %11 = load ptr, ptr %taddr8, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 32, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd9, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 32), !dbg !2714
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 32, i1 false)
  %checknull10 = icmp eq ptr %expr, null, !dbg !2715
  %14 = call i1 @llvm.expect.i1(i1 %checknull10, i1 false), !dbg !2715
  br i1 %14, label %panic11, label %checkok12, !dbg !2715

checkok12:                                        ; preds = %checkok6
  %15 = ptrtoint ptr %expr to i64, !dbg !2718
  %16 = urem i64 %15, 8, !dbg !2718
  %17 = icmp ne i64 %16, 0, !dbg !2718
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false), !dbg !2718
  br i1 %18, label %panic13, label %checkok20, !dbg !2718

checkok20:                                        ; preds = %checkok12
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %expr, i32 32, i1 false), !dbg !2718
  ret void, !dbg !2718

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2706
  call void %19(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.16, i64 8, i32 55) #5, !dbg !2706
  unreachable, !dbg !2706

panic1:                                           ; preds = %checkok
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2709
  call void %20(ptr @.panic_msg.17, i64 45, ptr @.file.145, i64 12, ptr @.func.16, i64 8, i32 57) #5, !dbg !2709
  unreachable, !dbg !2709

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %23 = insertvalue %any undef, ptr %taddr4, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd5, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.145, i64 12, ptr @.func.16, i64 8, i32 57, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2709
  unreachable, !dbg !2709

panic11:                                          ; preds = %checkok6
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2718
  call void %26(ptr @.panic_msg.52, i64 42, ptr @.file.57, i64 10, ptr @.func.16, i64 8, i32 254) #5, !dbg !2718
  unreachable, !dbg !2718

panic13:                                          ; preds = %checkok12
  store i64 8, ptr %taddr14, align 8
  %27 = insertvalue %any undef, ptr %taddr14, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr15, align 8
  %29 = insertvalue %any undef, ptr %taddr15, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %30, ptr %ptradd17, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.57, i64 10, ptr @.func.16, i64 8, i32 254, ptr byval(%"any[]") align 8 %indirectarg19) #5, !dbg !2718
  unreachable, !dbg !2718
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws64Random.next_long(ptr %0) #0 comdat !dbg !2719 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i64, align 8
  %self1 = alloca i64, align 8
  %shift = alloca i64, align 8
  %s1 = alloca i64, align 8
  %self13 = alloca i64, align 8
  %shift14 = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !2722
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2722
  br i1 %2, label %panic, label %checkok, !dbg !2722

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2723, !DIExpression(), !2724)
    #dbg_declare(ptr %s0, !2725, !DIExpression(), !2726)
  %3 = load ptr, ptr %self, align 8, !dbg !2727
  %4 = load i64, ptr %3, align 8, !dbg !2727
  store i64 %4, ptr %s0, align 8, !dbg !2727
  %5 = load ptr, ptr %self, align 8, !dbg !2728
  %6 = load ptr, ptr %self, align 8, !dbg !2729
  %7 = load i64, ptr %6, align 8, !dbg !2729
  %8 = load ptr, ptr %self, align 8, !dbg !2730
  %9 = load i64, ptr %8, align 8, !dbg !2730
  %mul = mul i64 %7, %9, !dbg !2729
  %10 = load ptr, ptr %self, align 8, !dbg !2731
  %ptradd = getelementptr inbounds i8, ptr %10, i64 16, !dbg !2731
  %11 = load i64, ptr %ptradd, align 8, !dbg !2731
  %add = add i64 %mul, %11, !dbg !2729
  store i64 %add, ptr %5, align 8, !dbg !2729
  %12 = load ptr, ptr %self, align 8, !dbg !2732
  %13 = load ptr, ptr %self, align 8, !dbg !2733
  %14 = load i64, ptr %13, align 8
  store i64 %14, ptr %self1, align 8
  store i64 32, ptr %shift, align 8
  %15 = load i64, ptr %self1, align 8, !dbg !2734
  %16 = load i64, ptr %self1, align 8, !dbg !2736
  %17 = load i64, ptr %shift, align 8, !dbg !2737
  %18 = call i64 @llvm.fshr.i64(i64 %15, i64 %16, i64 %17), !dbg !2737
  store i64 %18, ptr %12, align 8, !dbg !2737
  %19 = load ptr, ptr %self, align 8, !dbg !2738
  %ptradd2 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !2738
  %20 = load i64, ptr %ptradd2, align 8, !dbg !2738
  %add3 = add i64 %20, -7046029254386353131, !dbg !2738
  store i64 %add3, ptr %ptradd2, align 8, !dbg !2738
  %21 = load ptr, ptr %self, align 8, !dbg !2739
  %ptradd4 = getelementptr inbounds i8, ptr %21, i64 8, !dbg !2739
  %22 = load ptr, ptr %self, align 8, !dbg !2740
  %ptradd5 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !2740
  %23 = load i64, ptr %ptradd5, align 8, !dbg !2740
  %24 = load ptr, ptr %self, align 8, !dbg !2741
  %ptradd6 = getelementptr inbounds i8, ptr %24, i64 8, !dbg !2741
  %25 = load i64, ptr %ptradd6, align 8, !dbg !2741
  %mul7 = mul i64 %23, %25, !dbg !2740
  %26 = load ptr, ptr %self, align 8, !dbg !2742
  %ptradd8 = getelementptr inbounds i8, ptr %26, i64 24, !dbg !2742
  %27 = load i64, ptr %ptradd8, align 8, !dbg !2742
  %add9 = add i64 %mul7, %27, !dbg !2740
  store i64 %add9, ptr %ptradd4, align 8, !dbg !2740
    #dbg_declare(ptr %s1, !2743, !DIExpression(), !2744)
  %28 = load ptr, ptr %self, align 8, !dbg !2745
  %ptradd10 = getelementptr inbounds i8, ptr %28, i64 8, !dbg !2745
  %29 = load i64, ptr %ptradd10, align 8, !dbg !2745
  store i64 %29, ptr %s1, align 8, !dbg !2745
  %30 = load ptr, ptr %self, align 8, !dbg !2746
  %ptradd11 = getelementptr inbounds i8, ptr %30, i64 8, !dbg !2746
  %31 = load ptr, ptr %self, align 8, !dbg !2747
  %ptradd12 = getelementptr inbounds i8, ptr %31, i64 8, !dbg !2747
  %32 = load i64, ptr %ptradd12, align 8
  store i64 %32, ptr %self13, align 8
  store i64 32, ptr %shift14, align 8
  %33 = load i64, ptr %self13, align 8, !dbg !2748
  %34 = load i64, ptr %self13, align 8, !dbg !2750
  %35 = load i64, ptr %shift14, align 8, !dbg !2751
  %36 = call i64 @llvm.fshr.i64(i64 %33, i64 %34, i64 %35), !dbg !2751
  store i64 %36, ptr %ptradd11, align 8, !dbg !2751
  %37 = load ptr, ptr %self, align 8, !dbg !2752
  %ptradd15 = getelementptr inbounds i8, ptr %37, i64 24, !dbg !2752
  %38 = load i64, ptr %ptradd15, align 8, !dbg !2752
  %sub = sub i64 %38, -7046029254386353131, !dbg !2752
  store i64 %sub, ptr %ptradd15, align 8, !dbg !2752
  %39 = load i64, ptr %s0, align 8, !dbg !2753
  %40 = load i64, ptr %s1, align 8, !dbg !2754
  %add16 = add i64 %39, %40, !dbg !2753
  ret i64 %add16, !dbg !2753

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2724
  call void %41(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.19, i64 9, i32 60) #5, !dbg !2724
  unreachable, !dbg !2724
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2755 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2756
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2756
  br i1 %4, label %panic, label %checkok, !dbg !2756

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2757, !DIExpression(), !2758)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2759, !DIExpression(), !2760)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2761
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2761
  %lt = icmp ult i64 0, %5, !dbg !2761
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2761

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2761
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.145, i64 12, ptr @.func.21, i64 10, i32 76) #5, !dbg !2761
  unreachable, !dbg !2761

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2763, !DIExpression(), !2765)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2766
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2766
  store i64 %7, ptr %len, align 8, !dbg !2766
  br label %loop.cond, !dbg !2767

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2768
  %lt4 = icmp ult i64 0, %8, !dbg !2768
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2768

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2770, !DIExpression(), !2772)
  %9 = load ptr, ptr %self, align 8, !dbg !2773
  %10 = call i64 @std.math.random.Msws64Random.next_long(ptr %9), !dbg !2774
  store i64 %10, ptr %value, align 8, !dbg !2774
  %11 = load i64, ptr %len, align 8, !dbg !2775
  %le = icmp ule i64 %11, 8, !dbg !2775
  br i1 %le, label %if.then, label %if.exit, !dbg !2775

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2776
  %add = add i64 0, %13, !dbg !2776
  %gt = icmp ugt i64 0, %add, !dbg !2776
  %sub = sub i64 %add, 0, !dbg !2776
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2776
  br i1 %14, label %panic5, label %checkok7, !dbg !2776

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !2778
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2778
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !2778
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !2779
  %18 = extractvalue %"char[]" %17, 0, !dbg !2779
  %19 = extractvalue %"char[]" %17, 1, !dbg !2780
  %gt8 = icmp ugt i64 0, %19, !dbg !2780
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !2780
  br i1 %20, label %panic9, label %checkok16, !dbg !2780

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !2779
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !2779
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !2779
  %23 = extractvalue %"char[]" %22, 0, !dbg !2779
  %24 = extractvalue %"char[]" %16, 0, !dbg !2779
  %25 = extractvalue %"char[]" %16, 1, !dbg !2779
  %26 = extractvalue %"char[]" %22, 1, !dbg !2779
  %neq = icmp ne i64 %26, %25, !dbg !2779
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2779
  br i1 %27, label %panic18, label %checkok25, !dbg !2779

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !2779
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !2779
  br label %expr_block.exit, !dbg !2781

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 8, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !2782
  %33 = extractvalue %"char[]" %32, 0, !dbg !2782
  %34 = extractvalue %"char[]" %32, 1, !dbg !2782
  %gt27 = icmp sgt i64 0, %34, !dbg !2782
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !2782
  br i1 %35, label %panic28, label %checkok35, !dbg !2782

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 8, !dbg !2782
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !2782
  br i1 %36, label %panic37, label %checkok44, !dbg !2782

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !2782
  %38 = insertvalue %"char[]" %37, i64 8, 1, !dbg !2782
  %39 = extractvalue %"char[]" %38, 0, !dbg !2782
  %40 = extractvalue %"char[]" %31, 0, !dbg !2782
  %41 = extractvalue %"char[]" %31, 1, !dbg !2782
  %42 = extractvalue %"char[]" %38, 1, !dbg !2782
  %neq45 = icmp ne i64 %42, %41, !dbg !2782
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !2782
  br i1 %43, label %panic46, label %checkok53, !dbg !2782

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !2782
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !2782
  %45 = load i64, ptr %len, align 8, !dbg !2783
  %sub54 = sub i64 %45, 8, !dbg !2783
  store i64 %sub54, ptr %len, align 8, !dbg !2783
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !2784
  %47 = extractvalue %"char[]" %46, 0, !dbg !2784
  %48 = extractvalue %"char[]" %46, 1, !dbg !2785
  %gt55 = icmp ugt i64 8, %48, !dbg !2785
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !2785
  br i1 %49, label %panic56, label %checkok63, !dbg !2785

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 8, !dbg !2784
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 8, !dbg !2784
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !2784
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !2784
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !2784
  br label %loop.cond, !dbg !2784

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.149, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2786
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2786
  %hi = load i64, ptr %ptradd66, align 8, !dbg !2786
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.150, i64 12, ptr @.str.151, i64 23, i32 78, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !2789
  unreachable, !dbg !2790

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !2790

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2758
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.21, i64 10, i32 78) #5, !dbg !2758
  unreachable, !dbg !2758

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2778
  unreachable, !dbg !2778

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !2779
  unreachable, !dbg !2779

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !2779
  unreachable, !dbg !2779

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !2782
  unreachable, !dbg !2782

panic37:                                          ; preds = %checkok35
  store i64 7, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !2782
  unreachable, !dbg !2782

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !2782
  unreachable, !dbg !2782

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !2784
  unreachable, !dbg !2784
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws64Random.next_int128(ptr %0) #0 comdat !dbg !2791 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2794
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2794
  br i1 %2, label %panic, label %checkok, !dbg !2794

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2795, !DIExpression(), !2796)
  %3 = load ptr, ptr %self, align 8, !dbg !2797
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !2799
  %zext = zext i64 %4 to i128, !dbg !2799
  %shl = shl i128 %zext, 64, !dbg !2799
  %5 = freeze i128 %shl, !dbg !2799
  %6 = load ptr, ptr %self, align 8, !dbg !2797
  %7 = call i64 @std.math.random.Msws64Random.next_long(ptr %6), !dbg !2800
  %zext1 = zext i64 %7 to i128, !dbg !2800
  %add = add i128 %5, %zext1, !dbg !2799
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2796
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.29, i64 11, i32 79) #5, !dbg !2796
  unreachable, !dbg !2796
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws64Random.next_int(ptr %0) #0 comdat !dbg !2801 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2804
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2804
  br i1 %2, label %panic, label %checkok, !dbg !2804

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2805, !DIExpression(), !2806)
  %3 = load ptr, ptr %self, align 8, !dbg !2807
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !2804
  %trunc = trunc i64 %4 to i32, !dbg !2804
  ret i32 %trunc, !dbg !2804

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2806
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.30, i64 8, i32 80) #5, !dbg !2806
  unreachable, !dbg !2806
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws64Random.next_short(ptr %0) #0 comdat !dbg !2808 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2811
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2811
  br i1 %2, label %panic, label %checkok, !dbg !2811

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2812, !DIExpression(), !2813)
  %3 = load ptr, ptr %self, align 8, !dbg !2814
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !2811
  %trunc = trunc i64 %4 to i16, !dbg !2811
  ret i16 %trunc, !dbg !2811

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2813
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.31, i64 10, i32 81) #5, !dbg !2813
  unreachable, !dbg !2813
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws64Random.next_byte(ptr %0) #0 comdat !dbg !2815 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2818
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2818
  br i1 %2, label %panic, label %checkok, !dbg !2818

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2819, !DIExpression(), !2820)
  %3 = load ptr, ptr %self, align 8, !dbg !2821
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !2818
  %trunc = trunc i64 %4 to i8, !dbg !2818
  ret i8 %trunc, !dbg !2818

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2820
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.32, i64 9, i32 82) #5, !dbg !2820
  unreachable, !dbg !2820
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2822 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i32], align 16
  %taddr11 = alloca ptr, align 8
  %expr = alloca [4 x i32], align 16
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2832
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2832
  br i1 %4, label %panic, label %checkok, !dbg !2832

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2833, !DIExpression(), !2834)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !2835, !DIExpression(), !2836)
  %5 = load ptr, ptr %self, align 8, !dbg !2837
  %checknull = icmp eq ptr %5, null, !dbg !2837
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2837
  br i1 %6, label %panic1, label %checkok2, !dbg !2837

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2837
  %8 = urem i64 %7, 4, !dbg !2837
  %9 = icmp ne i64 %8, 0, !dbg !2837
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2837
  br i1 %10, label %panic3, label %checkok6, !dbg !2837

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2838, !DIExpression(), !2840)
  store i32 0, ptr %return_value, align 4, !dbg !2840
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !2840
  store i32 0, ptr %ptradd8, align 4, !dbg !2840
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 8, !dbg !2840
  store i32 0, ptr %ptradd9, align 4, !dbg !2840
  %ptradd10 = getelementptr inbounds i8, ptr %return_value, i64 12, !dbg !2840
  store i32 0, ptr %ptradd10, align 4, !dbg !2840
  store ptr %return_value, ptr %taddr11, align 8
  %11 = load ptr, ptr %taddr11, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 16, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd12, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 16), !dbg !2842
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 16, i1 false)
  %checknull13 = icmp eq ptr %expr, null, !dbg !2843
  %14 = call i1 @llvm.expect.i1(i1 %checknull13, i1 false), !dbg !2843
  br i1 %14, label %panic14, label %checkok15, !dbg !2843

checkok15:                                        ; preds = %checkok6
  %15 = ptrtoint ptr %expr to i64, !dbg !2846
  %16 = urem i64 %15, 4, !dbg !2846
  %17 = icmp ne i64 %16, 0, !dbg !2846
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false), !dbg !2846
  br i1 %18, label %panic16, label %checkok23, !dbg !2846

checkok23:                                        ; preds = %checkok15
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %5, ptr align 4 %expr, i32 16, i1 false), !dbg !2846
  ret void, !dbg !2846

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2834
  call void %19(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.16, i64 8, i32 91) #5, !dbg !2834
  unreachable, !dbg !2834

panic1:                                           ; preds = %checkok
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2837
  call void %20(ptr @.panic_msg.17, i64 45, ptr @.file.145, i64 12, ptr @.func.16, i64 8, i32 93) #5, !dbg !2837
  unreachable, !dbg !2837

panic3:                                           ; preds = %checkok2
  store i64 4, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %23 = insertvalue %any undef, ptr %taddr4, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd5, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.145, i64 12, ptr @.func.16, i64 8, i32 93, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2837
  unreachable, !dbg !2837

panic14:                                          ; preds = %checkok6
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2846
  call void %26(ptr @.panic_msg.52, i64 42, ptr @.file.57, i64 10, ptr @.func.16, i64 8, i32 254) #5, !dbg !2846
  unreachable, !dbg !2846

panic16:                                          ; preds = %checkok15
  store i64 4, ptr %taddr17, align 8
  %27 = insertvalue %any undef, ptr %taddr17, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr18, align 8
  %29 = insertvalue %any undef, ptr %taddr18, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %30, ptr %ptradd20, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.57, i64 10, ptr @.func.16, i64 8, i32 254, ptr byval(%"any[]") align 8 %indirectarg22) #5, !dbg !2846
  unreachable, !dbg !2846
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws32Random.next_int(ptr %0) #0 comdat !dbg !2847 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i32, align 4
  %self1 = alloca i32, align 4
  %shift = alloca i32, align 4
  %s1 = alloca i32, align 4
  %self13 = alloca i32, align 4
  %shift14 = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !2850
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2850
  br i1 %2, label %panic, label %checkok, !dbg !2850

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2851, !DIExpression(), !2852)
    #dbg_declare(ptr %s0, !2853, !DIExpression(), !2854)
  %3 = load ptr, ptr %self, align 8, !dbg !2855
  %4 = load i32, ptr %3, align 4, !dbg !2855
  store i32 %4, ptr %s0, align 4, !dbg !2855
  %5 = load ptr, ptr %self, align 8, !dbg !2856
  %6 = load ptr, ptr %self, align 8, !dbg !2857
  %7 = load i32, ptr %6, align 4, !dbg !2857
  %8 = load ptr, ptr %self, align 8, !dbg !2858
  %9 = load i32, ptr %8, align 4, !dbg !2858
  %mul = mul i32 %7, %9, !dbg !2857
  %10 = load ptr, ptr %self, align 8, !dbg !2859
  %ptradd = getelementptr inbounds i8, ptr %10, i64 8, !dbg !2859
  %11 = load i32, ptr %ptradd, align 4, !dbg !2859
  %add = add i32 %mul, %11, !dbg !2857
  store i32 %add, ptr %5, align 4, !dbg !2857
  %12 = load ptr, ptr %self, align 8, !dbg !2860
  %13 = load ptr, ptr %self, align 8, !dbg !2861
  %14 = load i32, ptr %13, align 4
  store i32 %14, ptr %self1, align 4
  store i32 16, ptr %shift, align 4
  %15 = load i32, ptr %self1, align 4, !dbg !2862
  %16 = load i32, ptr %self1, align 4, !dbg !2864
  %17 = load i32, ptr %shift, align 4, !dbg !2865
  %18 = call i32 @llvm.fshr.i32(i32 %15, i32 %16, i32 %17), !dbg !2865
  store i32 %18, ptr %12, align 4, !dbg !2865
  %19 = load ptr, ptr %self, align 8, !dbg !2866
  %ptradd2 = getelementptr inbounds i8, ptr %19, i64 8, !dbg !2866
  %20 = load i32, ptr %ptradd2, align 4, !dbg !2866
  %add3 = add i32 %20, -1640531527, !dbg !2866
  store i32 %add3, ptr %ptradd2, align 4, !dbg !2866
  %21 = load ptr, ptr %self, align 8, !dbg !2867
  %ptradd4 = getelementptr inbounds i8, ptr %21, i64 4, !dbg !2867
  %22 = load ptr, ptr %self, align 8, !dbg !2868
  %ptradd5 = getelementptr inbounds i8, ptr %22, i64 4, !dbg !2868
  %23 = load i32, ptr %ptradd5, align 4, !dbg !2868
  %24 = load ptr, ptr %self, align 8, !dbg !2869
  %ptradd6 = getelementptr inbounds i8, ptr %24, i64 4, !dbg !2869
  %25 = load i32, ptr %ptradd6, align 4, !dbg !2869
  %mul7 = mul i32 %23, %25, !dbg !2868
  %26 = load ptr, ptr %self, align 8, !dbg !2870
  %ptradd8 = getelementptr inbounds i8, ptr %26, i64 12, !dbg !2870
  %27 = load i32, ptr %ptradd8, align 4, !dbg !2870
  %add9 = add i32 %mul7, %27, !dbg !2868
  store i32 %add9, ptr %ptradd4, align 4, !dbg !2868
    #dbg_declare(ptr %s1, !2871, !DIExpression(), !2872)
  %28 = load ptr, ptr %self, align 8, !dbg !2873
  %ptradd10 = getelementptr inbounds i8, ptr %28, i64 4, !dbg !2873
  %29 = load i32, ptr %ptradd10, align 4, !dbg !2873
  store i32 %29, ptr %s1, align 4, !dbg !2873
  %30 = load ptr, ptr %self, align 8, !dbg !2874
  %ptradd11 = getelementptr inbounds i8, ptr %30, i64 4, !dbg !2874
  %31 = load ptr, ptr %self, align 8, !dbg !2875
  %ptradd12 = getelementptr inbounds i8, ptr %31, i64 4, !dbg !2875
  %32 = load i32, ptr %ptradd12, align 4
  store i32 %32, ptr %self13, align 4
  store i32 16, ptr %shift14, align 4
  %33 = load i32, ptr %self13, align 4, !dbg !2876
  %34 = load i32, ptr %self13, align 4, !dbg !2878
  %35 = load i32, ptr %shift14, align 4, !dbg !2879
  %36 = call i32 @llvm.fshr.i32(i32 %33, i32 %34, i32 %35), !dbg !2879
  store i32 %36, ptr %ptradd11, align 4, !dbg !2879
  %37 = load ptr, ptr %self, align 8, !dbg !2880
  %ptradd15 = getelementptr inbounds i8, ptr %37, i64 12, !dbg !2880
  %38 = load i32, ptr %ptradd15, align 4, !dbg !2880
  %sub = sub i32 %38, -1640531527, !dbg !2880
  store i32 %sub, ptr %ptradd15, align 4, !dbg !2880
  %39 = load i32, ptr %s0, align 4, !dbg !2881
  %40 = load i32, ptr %s1, align 4, !dbg !2882
  %add16 = add i32 %39, %40, !dbg !2881
  ret i32 %add16, !dbg !2881

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2852
  call void %41(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.30, i64 8, i32 97) #5, !dbg !2852
  unreachable, !dbg !2852
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2883 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2884
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2884
  br i1 %4, label %panic, label %checkok, !dbg !2884

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2885, !DIExpression(), !2886)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !2887, !DIExpression(), !2888)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2889
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2889
  %lt = icmp ult i64 0, %5, !dbg !2889
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2889

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2889
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.145, i64 12, ptr @.func.21, i64 10, i32 113) #5, !dbg !2889
  unreachable, !dbg !2889

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !2891, !DIExpression(), !2893)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2894
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2894
  store i64 %7, ptr %len, align 8, !dbg !2894
  br label %loop.cond, !dbg !2895

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2896
  %lt4 = icmp ult i64 0, %8, !dbg !2896
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2896

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2898, !DIExpression(), !2900)
  %9 = load ptr, ptr %self, align 8, !dbg !2901
  %10 = call i32 @std.math.random.Msws32Random.next_int(ptr %9), !dbg !2902
  store i32 %10, ptr %value, align 4, !dbg !2902
  %11 = load i64, ptr %len, align 8, !dbg !2903
  %le = icmp ule i64 %11, 4, !dbg !2903
  br i1 %le, label %if.then, label %if.exit, !dbg !2903

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2904
  %add = add i64 0, %13, !dbg !2904
  %gt = icmp ugt i64 0, %add, !dbg !2904
  %sub = sub i64 %add, 0, !dbg !2904
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2904
  br i1 %14, label %panic5, label %checkok7, !dbg !2904

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !2906
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2906
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !2906
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !2907
  %18 = extractvalue %"char[]" %17, 0, !dbg !2907
  %19 = extractvalue %"char[]" %17, 1, !dbg !2908
  %gt8 = icmp ugt i64 0, %19, !dbg !2908
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !2908
  br i1 %20, label %panic9, label %checkok16, !dbg !2908

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !2907
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !2907
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !2907
  %23 = extractvalue %"char[]" %22, 0, !dbg !2907
  %24 = extractvalue %"char[]" %16, 0, !dbg !2907
  %25 = extractvalue %"char[]" %16, 1, !dbg !2907
  %26 = extractvalue %"char[]" %22, 1, !dbg !2907
  %neq = icmp ne i64 %26, %25, !dbg !2907
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2907
  br i1 %27, label %panic18, label %checkok25, !dbg !2907

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !2907
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !2907
  br label %expr_block.exit, !dbg !2909

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 4, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !2910
  %33 = extractvalue %"char[]" %32, 0, !dbg !2910
  %34 = extractvalue %"char[]" %32, 1, !dbg !2910
  %gt27 = icmp sgt i64 0, %34, !dbg !2910
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !2910
  br i1 %35, label %panic28, label %checkok35, !dbg !2910

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 4, !dbg !2910
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !2910
  br i1 %36, label %panic37, label %checkok44, !dbg !2910

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !2910
  %38 = insertvalue %"char[]" %37, i64 4, 1, !dbg !2910
  %39 = extractvalue %"char[]" %38, 0, !dbg !2910
  %40 = extractvalue %"char[]" %31, 0, !dbg !2910
  %41 = extractvalue %"char[]" %31, 1, !dbg !2910
  %42 = extractvalue %"char[]" %38, 1, !dbg !2910
  %neq45 = icmp ne i64 %42, %41, !dbg !2910
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !2910
  br i1 %43, label %panic46, label %checkok53, !dbg !2910

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !2910
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !2910
  %45 = load i64, ptr %len, align 8, !dbg !2911
  %sub54 = sub i64 %45, 4, !dbg !2911
  store i64 %sub54, ptr %len, align 8, !dbg !2911
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !2912
  %47 = extractvalue %"char[]" %46, 0, !dbg !2912
  %48 = extractvalue %"char[]" %46, 1, !dbg !2913
  %gt55 = icmp ugt i64 4, %48, !dbg !2913
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !2913
  br i1 %49, label %panic56, label %checkok63, !dbg !2913

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 4, !dbg !2912
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 4, !dbg !2912
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !2912
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !2912
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !2912
  br label %loop.cond, !dbg !2912

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.152, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2914
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2914
  %hi = load i64, ptr %ptradd66, align 8, !dbg !2914
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.153, i64 12, ptr @.str.154, i64 23, i32 115, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !2917
  unreachable, !dbg !2918

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !2918

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2886
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.21, i64 10, i32 115) #5, !dbg !2886
  unreachable, !dbg !2886

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2906
  unreachable, !dbg !2906

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !2907
  unreachable, !dbg !2907

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !2907
  unreachable, !dbg !2907

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !2910
  unreachable, !dbg !2910

panic37:                                          ; preds = %checkok35
  store i64 3, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !2910
  unreachable, !dbg !2910

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !2910
  unreachable, !dbg !2910

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !2912
  unreachable, !dbg !2912
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws32Random.next_int128(ptr %0) #0 comdat !dbg !2919 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2922
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2922
  br i1 %2, label %panic, label %checkok, !dbg !2922

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2923, !DIExpression(), !2924)
  %3 = load ptr, ptr %self, align 8, !dbg !2925
  %4 = call i64 @std.math.random.Msws32Random.next_long(ptr %3), !dbg !2927
  %zext = zext i64 %4 to i128, !dbg !2927
  %shl = shl i128 %zext, 64, !dbg !2927
  %5 = freeze i128 %shl, !dbg !2927
  %6 = load ptr, ptr %self, align 8, !dbg !2925
  %7 = call i64 @std.math.random.Msws32Random.next_long(ptr %6), !dbg !2928
  %zext1 = zext i64 %7 to i128, !dbg !2928
  %add = add i128 %5, %zext1, !dbg !2927
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2924
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.29, i64 11, i32 116) #5, !dbg !2924
  unreachable, !dbg !2924
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws32Random.next_long(ptr %0) #0 comdat !dbg !2929 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2932
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2932
  br i1 %2, label %panic, label %checkok, !dbg !2932

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2933, !DIExpression(), !2934)
  %3 = load ptr, ptr %self, align 8, !dbg !2935
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !2937
  %zext = zext i32 %4 to i64, !dbg !2937
  %shl = shl i64 %zext, 32, !dbg !2937
  %5 = freeze i64 %shl, !dbg !2937
  %6 = load ptr, ptr %self, align 8, !dbg !2935
  %7 = call i32 @std.math.random.Msws32Random.next_int(ptr %6), !dbg !2938
  %zext1 = zext i32 %7 to i64, !dbg !2938
  %add = add i64 %5, %zext1, !dbg !2937
  ret i64 %add, !dbg !2937

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2934
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.19, i64 9, i32 117) #5, !dbg !2934
  unreachable, !dbg !2934
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws32Random.next_short(ptr %0) #0 comdat !dbg !2939 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2942
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2942
  br i1 %2, label %panic, label %checkok, !dbg !2942

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2943, !DIExpression(), !2944)
  %3 = load ptr, ptr %self, align 8, !dbg !2945
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !2942
  %trunc = trunc i32 %4 to i16, !dbg !2942
  ret i16 %trunc, !dbg !2942

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2944
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.31, i64 10, i32 118) #5, !dbg !2944
  unreachable, !dbg !2944
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws32Random.next_byte(ptr %0) #0 comdat !dbg !2946 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2949
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2949
  br i1 %2, label %panic, label %checkok, !dbg !2949

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2950, !DIExpression(), !2951)
  %3 = load ptr, ptr %self, align 8, !dbg !2952
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !2949
  %trunc = trunc i32 %4 to i8, !dbg !2949
  ret i8 %trunc, !dbg !2949

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2951
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.32, i64 9, i32 119) #5, !dbg !2951
  unreachable, !dbg !2951
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2953 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %input7 = alloca %"char[]", align 8
  %return_value = alloca [4 x i16], align 2
  %taddr11 = alloca ptr, align 8
  %expr = alloca [4 x i16], align 2
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2963
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2963
  br i1 %4, label %panic, label %checkok, !dbg !2963

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2964, !DIExpression(), !2965)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !2966, !DIExpression(), !2967)
  %5 = load ptr, ptr %self, align 8, !dbg !2968
  %checknull = icmp eq ptr %5, null, !dbg !2968
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2968
  br i1 %6, label %panic1, label %checkok2, !dbg !2968

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !2968
  %8 = urem i64 %7, 2, !dbg !2968
  %9 = icmp ne i64 %8, 0, !dbg !2968
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !2968
  br i1 %10, label %panic3, label %checkok6, !dbg !2968

checkok6:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input7, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2969, !DIExpression(), !2971)
  store i16 0, ptr %return_value, align 2, !dbg !2971
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !2971
  store i16 0, ptr %ptradd8, align 2, !dbg !2971
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !2971
  store i16 0, ptr %ptradd9, align 2, !dbg !2971
  %ptradd10 = getelementptr inbounds i8, ptr %return_value, i64 6, !dbg !2971
  store i16 0, ptr %ptradd10, align 2, !dbg !2971
  store ptr %return_value, ptr %taddr11, align 8
  %11 = load ptr, ptr %taddr11, align 8
  %12 = insertvalue %"char[]" undef, ptr %11, 0
  %13 = insertvalue %"char[]" %12, i64 8, 1
  %lo = load ptr, ptr %input7, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %input7, i64 8
  %hi = load i64, ptr %ptradd12, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %11, i64 8), !dbg !2973
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %expr, ptr align 2 %return_value, i32 8, i1 false)
  %checknull13 = icmp eq ptr %expr, null, !dbg !2974
  %14 = call i1 @llvm.expect.i1(i1 %checknull13, i1 false), !dbg !2974
  br i1 %14, label %panic14, label %checkok15, !dbg !2974

checkok15:                                        ; preds = %checkok6
  %15 = ptrtoint ptr %expr to i64, !dbg !2977
  %16 = urem i64 %15, 2, !dbg !2977
  %17 = icmp ne i64 %16, 0, !dbg !2977
  %18 = call i1 @llvm.expect.i1(i1 %17, i1 false), !dbg !2977
  br i1 %18, label %panic16, label %checkok23, !dbg !2977

checkok23:                                        ; preds = %checkok15
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %5, ptr align 2 %expr, i32 8, i1 false), !dbg !2977
  ret void, !dbg !2977

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2965
  call void %19(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.16, i64 8, i32 129) #5, !dbg !2965
  unreachable, !dbg !2965

panic1:                                           ; preds = %checkok
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2968
  call void %20(ptr @.panic_msg.17, i64 45, ptr @.file.145, i64 12, ptr @.func.16, i64 8, i32 131) #5, !dbg !2968
  unreachable, !dbg !2968

panic3:                                           ; preds = %checkok2
  store i64 2, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %23 = insertvalue %any undef, ptr %taddr4, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd5, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.145, i64 12, ptr @.func.16, i64 8, i32 131, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !2968
  unreachable, !dbg !2968

panic14:                                          ; preds = %checkok6
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2977
  call void %26(ptr @.panic_msg.52, i64 42, ptr @.file.57, i64 10, ptr @.func.16, i64 8, i32 254) #5, !dbg !2977
  unreachable, !dbg !2977

panic16:                                          ; preds = %checkok15
  store i64 2, ptr %taddr17, align 8
  %27 = insertvalue %any undef, ptr %taddr17, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr18, align 8
  %29 = insertvalue %any undef, ptr %taddr18, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %30, ptr %ptradd20, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 94, ptr @.file.57, i64 10, ptr @.func.16, i64 8, i32 254, ptr byval(%"any[]") align 8 %indirectarg22) #5, !dbg !2977
  unreachable, !dbg !2977
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws16Random.next_short(ptr %0) #0 comdat !dbg !2978 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i16, align 2
  %self3 = alloca i16, align 2
  %shift = alloca i16, align 2
  %s1 = alloca i16, align 2
  %self19 = alloca i16, align 2
  %shift20 = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !2981
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2981
  br i1 %2, label %panic, label %checkok, !dbg !2981

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2982, !DIExpression(), !2983)
    #dbg_declare(ptr %s0, !2984, !DIExpression(), !2985)
  %3 = load ptr, ptr %self, align 8, !dbg !2986
  %4 = load i16, ptr %3, align 2, !dbg !2986
  store i16 %4, ptr %s0, align 2, !dbg !2986
  %5 = load ptr, ptr %self, align 8, !dbg !2987
  %6 = load ptr, ptr %self, align 8, !dbg !2988
  %7 = load i16, ptr %6, align 2, !dbg !2988
  %zext = zext i16 %7 to i32, !dbg !2988
  %8 = load ptr, ptr %self, align 8, !dbg !2989
  %9 = load i16, ptr %8, align 2, !dbg !2989
  %zext1 = zext i16 %9 to i32, !dbg !2989
  %mul = mul i32 %zext, %zext1, !dbg !2988
  %10 = load ptr, ptr %self, align 8, !dbg !2990
  %ptradd = getelementptr inbounds i8, ptr %10, i64 4, !dbg !2990
  %11 = load i16, ptr %ptradd, align 2, !dbg !2990
  %zext2 = zext i16 %11 to i32, !dbg !2990
  %add = add i32 %mul, %zext2, !dbg !2988
  %trunc = trunc i32 %add to i16, !dbg !2988
  store i16 %trunc, ptr %5, align 2, !dbg !2988
  %12 = load ptr, ptr %self, align 8, !dbg !2991
  %13 = load ptr, ptr %self, align 8, !dbg !2992
  %14 = load i16, ptr %13, align 2
  store i16 %14, ptr %self3, align 2
  store i16 8, ptr %shift, align 2
  %15 = load i16, ptr %self3, align 2, !dbg !2993
  %16 = load i16, ptr %self3, align 2, !dbg !2995
  %17 = load i16, ptr %shift, align 2, !dbg !2996
  %18 = call i16 @llvm.fshr.i16(i16 %15, i16 %16, i16 %17), !dbg !2996
  store i16 %18, ptr %12, align 2, !dbg !2996
  %19 = load ptr, ptr %self, align 8, !dbg !2997
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 4, !dbg !2997
  %20 = load i16, ptr %ptradd4, align 2, !dbg !2997
  %add5 = add i16 %20, -25033, !dbg !2997
  store i16 %add5, ptr %ptradd4, align 2, !dbg !2997
  %21 = load ptr, ptr %self, align 8, !dbg !2998
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 2, !dbg !2998
  %22 = load ptr, ptr %self, align 8, !dbg !2999
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 2, !dbg !2999
  %23 = load i16, ptr %ptradd7, align 2, !dbg !2999
  %zext8 = zext i16 %23 to i32, !dbg !2999
  %24 = load ptr, ptr %self, align 8, !dbg !3000
  %ptradd9 = getelementptr inbounds i8, ptr %24, i64 2, !dbg !3000
  %25 = load i16, ptr %ptradd9, align 2, !dbg !3000
  %zext10 = zext i16 %25 to i32, !dbg !3000
  %mul11 = mul i32 %zext8, %zext10, !dbg !2999
  %26 = load ptr, ptr %self, align 8, !dbg !3001
  %ptradd12 = getelementptr inbounds i8, ptr %26, i64 6, !dbg !3001
  %27 = load i16, ptr %ptradd12, align 2, !dbg !3001
  %zext13 = zext i16 %27 to i32, !dbg !3001
  %add14 = add i32 %mul11, %zext13, !dbg !2999
  %trunc15 = trunc i32 %add14 to i16, !dbg !2999
  store i16 %trunc15, ptr %ptradd6, align 2, !dbg !2999
    #dbg_declare(ptr %s1, !3002, !DIExpression(), !3003)
  %28 = load ptr, ptr %self, align 8, !dbg !3004
  %ptradd16 = getelementptr inbounds i8, ptr %28, i64 2, !dbg !3004
  %29 = load i16, ptr %ptradd16, align 2, !dbg !3004
  store i16 %29, ptr %s1, align 2, !dbg !3004
  %30 = load ptr, ptr %self, align 8, !dbg !3005
  %ptradd17 = getelementptr inbounds i8, ptr %30, i64 2, !dbg !3005
  %31 = load ptr, ptr %self, align 8, !dbg !3006
  %ptradd18 = getelementptr inbounds i8, ptr %31, i64 2, !dbg !3006
  %32 = load i16, ptr %ptradd18, align 2
  store i16 %32, ptr %self19, align 2
  store i16 8, ptr %shift20, align 2
  %33 = load i16, ptr %self19, align 2, !dbg !3007
  %34 = load i16, ptr %self19, align 2, !dbg !3009
  %35 = load i16, ptr %shift20, align 2, !dbg !3010
  %36 = call i16 @llvm.fshr.i16(i16 %33, i16 %34, i16 %35), !dbg !3010
  store i16 %36, ptr %ptradd17, align 2, !dbg !3010
  %37 = load ptr, ptr %self, align 8, !dbg !3011
  %ptradd21 = getelementptr inbounds i8, ptr %37, i64 6, !dbg !3011
  %38 = load i16, ptr %ptradd21, align 2, !dbg !3011
  %sub = sub i16 %38, -25033, !dbg !3011
  store i16 %sub, ptr %ptradd21, align 2, !dbg !3011
  %39 = load i16, ptr %s0, align 2, !dbg !3012
  %zext22 = zext i16 %39 to i32, !dbg !3012
  %40 = load i16, ptr %s1, align 2, !dbg !3013
  %zext23 = zext i16 %40 to i32, !dbg !3013
  %add24 = add i32 %zext22, %zext23, !dbg !3012
  %trunc25 = trunc i32 %add24 to i16, !dbg !3012
  ret i16 %trunc25, !dbg !3012

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2983
  call void %41(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.31, i64 10, i32 135) #5, !dbg !2983
  unreachable, !dbg !2983
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3014 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !3015
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3015
  br i1 %4, label %panic, label %checkok, !dbg !3015

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3016, !DIExpression(), !3017)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !3018, !DIExpression(), !3019)
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3020
  %5 = load i64, ptr %ptradd1, align 8, !dbg !3020
  %lt = icmp ult i64 0, %5, !dbg !3020
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3020

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3020
  call void %6(ptr @.panic_msg.22, i64 34, ptr @.file.145, i64 12, ptr @.func.21, i64 10, i32 151) #5, !dbg !3020
  unreachable, !dbg !3020

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !3022, !DIExpression(), !3024)
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !3025
  %7 = load i64, ptr %ptradd3, align 8, !dbg !3025
  store i64 %7, ptr %len, align 8, !dbg !3025
  br label %loop.cond, !dbg !3026

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !3027
  %lt4 = icmp ult i64 0, %8, !dbg !3027
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !3027

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !3029, !DIExpression(), !3031)
  %9 = load ptr, ptr %self, align 8, !dbg !3032
  %10 = call i16 @std.math.random.Msws16Random.next_short(ptr %9), !dbg !3033
  store i16 %10, ptr %value, align 2, !dbg !3033
  %11 = load i64, ptr %len, align 8, !dbg !3034
  %le = icmp ule i64 %11, 2, !dbg !3034
  br i1 %le, label %if.then, label %if.exit, !dbg !3034

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !3035
  %add = add i64 0, %13, !dbg !3035
  %gt = icmp ugt i64 0, %add, !dbg !3035
  %sub = sub i64 %add, 0, !dbg !3035
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3035
  br i1 %14, label %panic5, label %checkok7, !dbg !3035

checkok7:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !3037
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !3037
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !3037
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !3038
  %18 = extractvalue %"char[]" %17, 0, !dbg !3038
  %19 = extractvalue %"char[]" %17, 1, !dbg !3039
  %gt8 = icmp ugt i64 0, %19, !dbg !3039
  %20 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !3039
  br i1 %20, label %panic9, label %checkok16, !dbg !3039

checkok16:                                        ; preds = %checkok7
  %size17 = sub i64 %19, 0, !dbg !3038
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !3038
  %22 = insertvalue %"char[]" %21, i64 %size17, 1, !dbg !3038
  %23 = extractvalue %"char[]" %22, 0, !dbg !3038
  %24 = extractvalue %"char[]" %16, 0, !dbg !3038
  %25 = extractvalue %"char[]" %16, 1, !dbg !3038
  %26 = extractvalue %"char[]" %22, 1, !dbg !3038
  %neq = icmp ne i64 %26, %25, !dbg !3038
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !3038
  br i1 %27, label %panic18, label %checkok25, !dbg !3038

checkok25:                                        ; preds = %checkok16
  %28 = mul i64 %25, 1, !dbg !3038
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !3038
  br label %expr_block.exit, !dbg !3040

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %29 = load ptr, ptr %taddr26, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 2, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !3041
  %33 = extractvalue %"char[]" %32, 0, !dbg !3041
  %34 = extractvalue %"char[]" %32, 1, !dbg !3041
  %gt27 = icmp sgt i64 0, %34, !dbg !3041
  %35 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !3041
  br i1 %35, label %panic28, label %checkok35, !dbg !3041

checkok35:                                        ; preds = %if.exit
  %lt36 = icmp slt i64 %34, 2, !dbg !3041
  %36 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !3041
  br i1 %36, label %panic37, label %checkok44, !dbg !3041

checkok44:                                        ; preds = %checkok35
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !3041
  %38 = insertvalue %"char[]" %37, i64 2, 1, !dbg !3041
  %39 = extractvalue %"char[]" %38, 0, !dbg !3041
  %40 = extractvalue %"char[]" %31, 0, !dbg !3041
  %41 = extractvalue %"char[]" %31, 1, !dbg !3041
  %42 = extractvalue %"char[]" %38, 1, !dbg !3041
  %neq45 = icmp ne i64 %42, %41, !dbg !3041
  %43 = call i1 @llvm.expect.i1(i1 %neq45, i1 false), !dbg !3041
  br i1 %43, label %panic46, label %checkok53, !dbg !3041

checkok53:                                        ; preds = %checkok44
  %44 = mul i64 %41, 1, !dbg !3041
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !3041
  %45 = load i64, ptr %len, align 8, !dbg !3042
  %sub54 = sub i64 %45, 2, !dbg !3042
  store i64 %sub54, ptr %len, align 8, !dbg !3042
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !3043
  %47 = extractvalue %"char[]" %46, 0, !dbg !3043
  %48 = extractvalue %"char[]" %46, 1, !dbg !3044
  %gt55 = icmp ugt i64 2, %48, !dbg !3044
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !3044
  br i1 %49, label %panic56, label %checkok63, !dbg !3044

checkok63:                                        ; preds = %checkok53
  %size64 = sub i64 %48, 2, !dbg !3043
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 2, !dbg !3043
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !3043
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !3043
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !3043
  br label %loop.cond, !dbg !3043

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.155, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !3045
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !3045
  %hi = load i64, ptr %ptradd66, align 8, !dbg !3045
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.156, i64 12, ptr @.str.157, i64 23, i32 153, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !3048
  unreachable, !dbg !3049

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !3049

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3017
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.21, i64 10, i32 153) #5, !dbg !3017
  unreachable, !dbg !3017

panic5:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3037
  unreachable, !dbg !3037

panic9:                                           ; preds = %checkok7
  store i64 %19, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %59, ptr %ptradd13, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg15) #5, !dbg !3038
  unreachable, !dbg !3038

panic18:                                          ; preds = %checkok16
  store i64 %26, ptr %taddr19, align 8
  %61 = insertvalue %any undef, ptr %taddr19, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %63 = insertvalue %any undef, ptr %taddr20, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %64, ptr %ptradd22, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg24) #5, !dbg !3038
  unreachable, !dbg !3038

panic28:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr29, align 8
  %66 = insertvalue %any undef, ptr %taddr29, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %68 = insertvalue %any undef, ptr %taddr30, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %69, ptr %ptradd32, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg34) #5, !dbg !3041
  unreachable, !dbg !3041

panic37:                                          ; preds = %checkok35
  store i64 1, ptr %taddr38, align 8
  %71 = insertvalue %any undef, ptr %taddr38, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr39, align 8
  %73 = insertvalue %any undef, ptr %taddr39, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %74, ptr %ptradd41, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg43) #5, !dbg !3041
  unreachable, !dbg !3041

panic46:                                          ; preds = %checkok44
  store i64 %42, ptr %taddr47, align 8
  %76 = insertvalue %any undef, ptr %taddr47, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr48, align 8
  %78 = insertvalue %any undef, ptr %taddr48, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %77, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %79, ptr %ptradd50, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg52) #5, !dbg !3041
  unreachable, !dbg !3041

panic56:                                          ; preds = %checkok53
  store i64 %48, ptr %taddr57, align 8
  %81 = insertvalue %any undef, ptr %taddr57, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr58, align 8
  %83 = insertvalue %any undef, ptr %taddr58, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %82, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %84, ptr %ptradd60, align 16
  %85 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %85, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62) #5, !dbg !3043
  unreachable, !dbg !3043
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws16Random.next_int128(ptr %0) #0 comdat !dbg !3050 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !3053
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3053
  br i1 %2, label %panic, label %checkok, !dbg !3053

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3054, !DIExpression(), !3055)
  %3 = load ptr, ptr %self, align 8, !dbg !3056
  %4 = call i64 @std.math.random.Msws16Random.next_long(ptr %3), !dbg !3058
  %zext = zext i64 %4 to i128, !dbg !3058
  %shl = shl i128 %zext, 64, !dbg !3058
  %5 = freeze i128 %shl, !dbg !3058
  %6 = load ptr, ptr %self, align 8, !dbg !3056
  %7 = call i64 @std.math.random.Msws16Random.next_long(ptr %6), !dbg !3059
  %zext1 = zext i64 %7 to i128, !dbg !3059
  %add = add i128 %5, %zext1, !dbg !3058
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3055
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.29, i64 11, i32 154) #5, !dbg !3055
  unreachable, !dbg !3055
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws16Random.next_long(ptr %0) #0 comdat !dbg !3060 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3063
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3063
  br i1 %2, label %panic, label %checkok, !dbg !3063

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3064, !DIExpression(), !3065)
  %3 = load ptr, ptr %self, align 8, !dbg !3066
  %4 = call i32 @std.math.random.Msws16Random.next_int(ptr %3), !dbg !3068
  %zext = zext i32 %4 to i64, !dbg !3068
  %shl = shl i64 %zext, 32, !dbg !3068
  %5 = freeze i64 %shl, !dbg !3068
  %6 = load ptr, ptr %self, align 8, !dbg !3066
  %7 = call i32 @std.math.random.Msws16Random.next_int(ptr %6), !dbg !3069
  %zext1 = zext i32 %7 to i64, !dbg !3069
  %add = add i64 %5, %zext1, !dbg !3068
  ret i64 %add, !dbg !3068

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3065
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.19, i64 9, i32 155) #5, !dbg !3065
  unreachable, !dbg !3065
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws16Random.next_int(ptr %0) #0 comdat !dbg !3070 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3073
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3073
  br i1 %2, label %panic, label %checkok, !dbg !3073

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3074, !DIExpression(), !3075)
  %3 = load ptr, ptr %self, align 8, !dbg !3076
  %4 = call i16 @std.math.random.Msws16Random.next_short(ptr %3), !dbg !3078
  %zext = zext i16 %4 to i32, !dbg !3078
  %shl = shl i32 %zext, 16, !dbg !3078
  %5 = freeze i32 %shl, !dbg !3078
  %6 = load ptr, ptr %self, align 8, !dbg !3076
  %7 = call i16 @std.math.random.Msws16Random.next_short(ptr %6), !dbg !3079
  %zext1 = zext i16 %7 to i32, !dbg !3079
  %add = add i32 %5, %zext1, !dbg !3078
  ret i32 %add, !dbg !3078

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3075
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.30, i64 8, i32 156) #5, !dbg !3075
  unreachable, !dbg !3075
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws16Random.next_byte(ptr %0) #0 comdat !dbg !3080 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3083
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3083
  br i1 %2, label %panic, label %checkok, !dbg !3083

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3084, !DIExpression(), !3085)
  %3 = load ptr, ptr %self, align 8, !dbg !3086
  %4 = call i16 @std.math.random.Msws16Random.next_short(ptr %3), !dbg !3083
  %trunc = trunc i16 %4 to i8, !dbg !3083
  ret i8 %trunc, !dbg !3083

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3085
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.32, i64 9, i32 157) #5, !dbg !3085
  unreachable, !dbg !3085
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws8Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3087 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca [4 x i8], align 1
  %taddr = alloca ptr, align 8
  %expr = alloca [4 x i8], align 1
  %3 = icmp eq ptr %0, null, !dbg !3097
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3097
  br i1 %4, label %panic, label %checkok, !dbg !3097

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3098, !DIExpression(), !3099)
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %input, !3100, !DIExpression(), !3101)
  %5 = load ptr, ptr %self, align 8, !dbg !3102
  %checknull = icmp eq ptr %5, null, !dbg !3102
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3102
  br i1 %6, label %panic1, label %checkok2, !dbg !3102

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !3103, !DIExpression(), !3105)
  store i8 0, ptr %return_value, align 1, !dbg !3105
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 1, !dbg !3105
  store i8 0, ptr %ptradd4, align 1, !dbg !3105
  %ptradd5 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !3105
  store i8 0, ptr %ptradd5, align 1, !dbg !3105
  %ptradd6 = getelementptr inbounds i8, ptr %return_value, i64 3, !dbg !3105
  store i8 0, ptr %ptradd6, align 1, !dbg !3105
  store ptr %return_value, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 4, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd7, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %7, i64 4), !dbg !3107
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %return_value, i32 4, i1 false)
  %checknull8 = icmp eq ptr %expr, null, !dbg !3108
  %10 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !3108
  br i1 %10, label %panic9, label %checkok10, !dbg !3108

checkok10:                                        ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %5, ptr align 1 %expr, i32 4, i1 false), !dbg !3111
  ret void, !dbg !3111

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3099
  call void %11(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.16, i64 8, i32 166) #5, !dbg !3099
  unreachable, !dbg !3099

panic1:                                           ; preds = %checkok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3102
  call void %12(ptr @.panic_msg.17, i64 45, ptr @.file.145, i64 12, ptr @.func.16, i64 8, i32 168) #5, !dbg !3102
  unreachable, !dbg !3102

panic9:                                           ; preds = %checkok2
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3111
  call void %13(ptr @.panic_msg.52, i64 42, ptr @.file.57, i64 10, ptr @.func.16, i64 8, i32 254) #5, !dbg !3111
  unreachable, !dbg !3111
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws8Random.next_byte(ptr %0) #0 comdat !dbg !3112 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i8, align 1
  %self3 = alloca i8, align 1
  %shift = alloca i8, align 1
  %s1 = alloca i8, align 1
  %self19 = alloca i8, align 1
  %shift20 = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !3115
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3115
  br i1 %2, label %panic, label %checkok, !dbg !3115

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3116, !DIExpression(), !3117)
    #dbg_declare(ptr %s0, !3118, !DIExpression(), !3119)
  %3 = load ptr, ptr %self, align 8, !dbg !3120
  %4 = load i8, ptr %3, align 1, !dbg !3120
  store i8 %4, ptr %s0, align 1, !dbg !3120
  %5 = load ptr, ptr %self, align 8, !dbg !3121
  %6 = load ptr, ptr %self, align 8, !dbg !3122
  %7 = load i8, ptr %6, align 1, !dbg !3122
  %zext = zext i8 %7 to i32, !dbg !3122
  %8 = load ptr, ptr %self, align 8, !dbg !3123
  %9 = load i8, ptr %8, align 1, !dbg !3123
  %zext1 = zext i8 %9 to i32, !dbg !3123
  %mul = mul i32 %zext, %zext1, !dbg !3122
  %10 = load ptr, ptr %self, align 8, !dbg !3124
  %ptradd = getelementptr inbounds i8, ptr %10, i64 2, !dbg !3124
  %11 = load i8, ptr %ptradd, align 1, !dbg !3124
  %zext2 = zext i8 %11 to i32, !dbg !3124
  %add = add i32 %mul, %zext2, !dbg !3122
  %trunc = trunc i32 %add to i8, !dbg !3122
  store i8 %trunc, ptr %5, align 1, !dbg !3122
  %12 = load ptr, ptr %self, align 8, !dbg !3125
  %13 = load ptr, ptr %self, align 8, !dbg !3126
  %14 = load i8, ptr %13, align 1
  store i8 %14, ptr %self3, align 1
  store i8 4, ptr %shift, align 1
  %15 = load i8, ptr %self3, align 1, !dbg !3127
  %16 = load i8, ptr %self3, align 1, !dbg !3129
  %17 = load i8, ptr %shift, align 1, !dbg !3130
  %18 = call i8 @llvm.fshr.i8(i8 %15, i8 %16, i8 %17), !dbg !3130
  store i8 %18, ptr %12, align 1, !dbg !3130
  %19 = load ptr, ptr %self, align 8, !dbg !3131
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 2, !dbg !3131
  %20 = load i8, ptr %ptradd4, align 1, !dbg !3131
  %add5 = add i8 %20, -97, !dbg !3131
  store i8 %add5, ptr %ptradd4, align 1, !dbg !3131
  %21 = load ptr, ptr %self, align 8, !dbg !3132
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 1, !dbg !3132
  %22 = load ptr, ptr %self, align 8, !dbg !3133
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 1, !dbg !3133
  %23 = load i8, ptr %ptradd7, align 1, !dbg !3133
  %zext8 = zext i8 %23 to i32, !dbg !3133
  %24 = load ptr, ptr %self, align 8, !dbg !3134
  %ptradd9 = getelementptr inbounds i8, ptr %24, i64 1, !dbg !3134
  %25 = load i8, ptr %ptradd9, align 1, !dbg !3134
  %zext10 = zext i8 %25 to i32, !dbg !3134
  %mul11 = mul i32 %zext8, %zext10, !dbg !3133
  %26 = load ptr, ptr %self, align 8, !dbg !3135
  %ptradd12 = getelementptr inbounds i8, ptr %26, i64 3, !dbg !3135
  %27 = load i8, ptr %ptradd12, align 1, !dbg !3135
  %zext13 = zext i8 %27 to i32, !dbg !3135
  %add14 = add i32 %mul11, %zext13, !dbg !3133
  %trunc15 = trunc i32 %add14 to i8, !dbg !3133
  store i8 %trunc15, ptr %ptradd6, align 1, !dbg !3133
    #dbg_declare(ptr %s1, !3136, !DIExpression(), !3137)
  %28 = load ptr, ptr %self, align 8, !dbg !3138
  %ptradd16 = getelementptr inbounds i8, ptr %28, i64 1, !dbg !3138
  %29 = load i8, ptr %ptradd16, align 1, !dbg !3138
  store i8 %29, ptr %s1, align 1, !dbg !3138
  %30 = load ptr, ptr %self, align 8, !dbg !3139
  %ptradd17 = getelementptr inbounds i8, ptr %30, i64 1, !dbg !3139
  %31 = load ptr, ptr %self, align 8, !dbg !3140
  %ptradd18 = getelementptr inbounds i8, ptr %31, i64 1, !dbg !3140
  %32 = load i8, ptr %ptradd18, align 1
  store i8 %32, ptr %self19, align 1
  store i8 4, ptr %shift20, align 1
  %33 = load i8, ptr %self19, align 1, !dbg !3141
  %34 = load i8, ptr %self19, align 1, !dbg !3143
  %35 = load i8, ptr %shift20, align 1, !dbg !3144
  %36 = call i8 @llvm.fshr.i8(i8 %33, i8 %34, i8 %35), !dbg !3144
  store i8 %36, ptr %ptradd17, align 1, !dbg !3144
  %37 = load ptr, ptr %self, align 8, !dbg !3145
  %ptradd21 = getelementptr inbounds i8, ptr %37, i64 3, !dbg !3145
  %38 = load i8, ptr %ptradd21, align 1, !dbg !3145
  %sub = sub i8 %38, -97, !dbg !3145
  store i8 %sub, ptr %ptradd21, align 1, !dbg !3145
  %39 = load i8, ptr %s0, align 1, !dbg !3146
  %zext22 = zext i8 %39 to i32, !dbg !3146
  %40 = load i8, ptr %s1, align 1, !dbg !3147
  %zext23 = zext i8 %40 to i32, !dbg !3147
  %add24 = add i32 %zext22, %zext23, !dbg !3146
  %trunc25 = trunc i32 %add24 to i8, !dbg !3146
  ret i8 %trunc25, !dbg !3146

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3117
  call void %41(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.32, i64 9, i32 171) #5, !dbg !3117
  unreachable, !dbg !3117
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws8Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3148 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots10 = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %taddr24 = alloca ptr, align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %varargslots47 = alloca [2 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg65 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !3149
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3149
  br i1 %4, label %panic, label %checkok, !dbg !3149

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3150, !DIExpression(), !3151)
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %bytes, !3152, !DIExpression(), !3153)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
    #dbg_declare(ptr %len, !3154, !DIExpression(), !3156)
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !3157
  %5 = load i64, ptr %ptradd2, align 8, !dbg !3157
  store i64 %5, ptr %len, align 8, !dbg !3157
  br label %loop.cond, !dbg !3158

loop.cond:                                        ; preds = %checkok61, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !3159
  %lt = icmp ult i64 0, %6, !dbg !3159
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3159

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !3161, !DIExpression(), !3163)
  %7 = load ptr, ptr %self, align 8, !dbg !3164
  %8 = call i8 @std.math.random.Msws8Random.next_byte(ptr %7), !dbg !3165
  store i8 %8, ptr %value, align 1, !dbg !3165
  %9 = load i64, ptr %len, align 8, !dbg !3166
  %le = icmp ule i64 %9, 1, !dbg !3166
  br i1 %le, label %if.then, label %if.exit, !dbg !3166

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !3167
  %add = add i64 0, %11, !dbg !3167
  %gt = icmp ugt i64 0, %add, !dbg !3167
  %sub = sub i64 %add, 0, !dbg !3167
  %12 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3167
  br i1 %12, label %panic3, label %checkok5, !dbg !3167

checkok5:                                         ; preds = %if.then
  %size = sub i64 %add, 0, !dbg !3169
  %13 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !3169
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !3169
  %15 = load %"char[]", ptr %bytes1, align 8, !dbg !3170
  %16 = extractvalue %"char[]" %15, 0, !dbg !3170
  %17 = extractvalue %"char[]" %15, 1, !dbg !3171
  %gt6 = icmp ugt i64 0, %17, !dbg !3171
  %18 = call i1 @llvm.expect.i1(i1 %gt6, i1 false), !dbg !3171
  br i1 %18, label %panic7, label %checkok14, !dbg !3171

checkok14:                                        ; preds = %checkok5
  %size15 = sub i64 %17, 0, !dbg !3170
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !3170
  %20 = insertvalue %"char[]" %19, i64 %size15, 1, !dbg !3170
  %21 = extractvalue %"char[]" %20, 0, !dbg !3170
  %22 = extractvalue %"char[]" %14, 0, !dbg !3170
  %23 = extractvalue %"char[]" %14, 1, !dbg !3170
  %24 = extractvalue %"char[]" %20, 1, !dbg !3170
  %neq = icmp ne i64 %24, %23, !dbg !3170
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !3170
  br i1 %25, label %panic16, label %checkok23, !dbg !3170

checkok23:                                        ; preds = %checkok14
  %26 = mul i64 %23, 1, !dbg !3170
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !3170
  br label %expr_block.exit, !dbg !3172

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr24, align 8
  %27 = load ptr, ptr %taddr24, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 1, 1
  %30 = load %"char[]", ptr %bytes1, align 8, !dbg !3173
  %31 = extractvalue %"char[]" %30, 0, !dbg !3173
  %32 = extractvalue %"char[]" %30, 1, !dbg !3173
  %gt25 = icmp sgt i64 0, %32, !dbg !3173
  %33 = call i1 @llvm.expect.i1(i1 %gt25, i1 false), !dbg !3173
  br i1 %33, label %panic26, label %checkok33, !dbg !3173

checkok33:                                        ; preds = %if.exit
  %lt34 = icmp slt i64 %32, 1, !dbg !3173
  %34 = call i1 @llvm.expect.i1(i1 %lt34, i1 false), !dbg !3173
  br i1 %34, label %panic35, label %checkok42, !dbg !3173

checkok42:                                        ; preds = %checkok33
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !3173
  %36 = insertvalue %"char[]" %35, i64 1, 1, !dbg !3173
  %37 = extractvalue %"char[]" %36, 0, !dbg !3173
  %38 = extractvalue %"char[]" %29, 0, !dbg !3173
  %39 = extractvalue %"char[]" %29, 1, !dbg !3173
  %40 = extractvalue %"char[]" %36, 1, !dbg !3173
  %neq43 = icmp ne i64 %40, %39, !dbg !3173
  %41 = call i1 @llvm.expect.i1(i1 %neq43, i1 false), !dbg !3173
  br i1 %41, label %panic44, label %checkok51, !dbg !3173

checkok51:                                        ; preds = %checkok42
  %42 = mul i64 %39, 1, !dbg !3173
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !3173
  %43 = load i64, ptr %len, align 8, !dbg !3174
  %sub52 = sub i64 %43, 1, !dbg !3174
  store i64 %sub52, ptr %len, align 8, !dbg !3174
  %44 = load %"char[]", ptr %bytes1, align 8, !dbg !3175
  %45 = extractvalue %"char[]" %44, 0, !dbg !3175
  %46 = extractvalue %"char[]" %44, 1, !dbg !3176
  %gt53 = icmp ugt i64 1, %46, !dbg !3176
  %47 = call i1 @llvm.expect.i1(i1 %gt53, i1 false), !dbg !3176
  br i1 %47, label %panic54, label %checkok61, !dbg !3176

checkok61:                                        ; preds = %checkok51
  %size62 = sub i64 %46, 1, !dbg !3175
  %ptradd63 = getelementptr inbounds i8, ptr %45, i64 1, !dbg !3175
  %48 = insertvalue %"char[]" undef, ptr %ptradd63, 0, !dbg !3175
  %49 = insertvalue %"char[]" %48, i64 %size62, 1, !dbg !3175
  store %"char[]" %49, ptr %bytes1, align 8, !dbg !3175
  br label %loop.cond, !dbg !3175

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.158, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !3177
  %ptradd64 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !3177
  %hi = load i64, ptr %ptradd64, align 8, !dbg !3177
  store %"any[]" zeroinitializer, ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.159, i64 12, ptr @.str.160, i64 22, i32 186, ptr byval(%"any[]") align 8 %indirectarg65), !dbg !3180
  unreachable, !dbg !3181

expr_block.exit:                                  ; preds = %checkok23
  ret void, !dbg !3181

panic:                                            ; preds = %entry
  %50 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3151
  call void %50(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.21, i64 10, i32 186) #5, !dbg !3151
  unreachable, !dbg !3151

panic3:                                           ; preds = %if.then
  store i64 %sub, ptr %taddr4, align 8
  %51 = insertvalue %any undef, ptr %taddr4, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %52, ptr %varargslots, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 43, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg) #5, !dbg !3169
  unreachable, !dbg !3169

panic7:                                           ; preds = %checkok5
  store i64 %17, ptr %taddr8, align 8
  %54 = insertvalue %any undef, ptr %taddr8, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr9, align 8
  %56 = insertvalue %any undef, ptr %taddr9, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %55, ptr %varargslots10, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots10, i64 16
  store %any %57, ptr %ptradd11, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots10, 0
  %"$$temp12" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp12", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg13) #5, !dbg !3170
  unreachable, !dbg !3170

panic16:                                          ; preds = %checkok14
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr18, align 8
  %61 = insertvalue %any undef, ptr %taddr18, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %60, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %62, ptr %ptradd20, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg22) #5, !dbg !3170
  unreachable, !dbg !3170

panic26:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr28, align 8
  %66 = insertvalue %any undef, ptr %taddr28, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %65, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %67, ptr %ptradd30, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg32) #5, !dbg !3173
  unreachable, !dbg !3173

panic35:                                          ; preds = %checkok33
  store i64 0, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr37, align 8
  %71 = insertvalue %any undef, ptr %taddr37, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %70, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %72, ptr %ptradd39, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 60, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg41) #5, !dbg !3173
  unreachable, !dbg !3173

panic44:                                          ; preds = %checkok42
  store i64 %40, ptr %taddr45, align 8
  %74 = insertvalue %any undef, ptr %taddr45, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr46, align 8
  %76 = insertvalue %any undef, ptr %taddr46, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %75, ptr %varargslots47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %77, ptr %ptradd48, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.25, i64 38, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg50) #5, !dbg !3173
  unreachable, !dbg !3173

panic54:                                          ; preds = %checkok51
  store i64 %46, ptr %taddr55, align 8
  %79 = insertvalue %any undef, ptr %taddr55, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr56, align 8
  %81 = insertvalue %any undef, ptr %taddr56, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %80, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %82, ptr %ptradd58, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 61, ptr @.file, i64 9, ptr @.func.21, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg60) #5, !dbg !3175
  unreachable, !dbg !3175
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws8Random.next_int128(ptr %0) #0 comdat !dbg !3182 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !3185
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3185
  br i1 %2, label %panic, label %checkok, !dbg !3185

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3186, !DIExpression(), !3187)
  %3 = load ptr, ptr %self, align 8, !dbg !3188
  %4 = call i64 @std.math.random.Msws8Random.next_long(ptr %3), !dbg !3190
  %zext = zext i64 %4 to i128, !dbg !3190
  %shl = shl i128 %zext, 64, !dbg !3190
  %5 = freeze i128 %shl, !dbg !3190
  %6 = load ptr, ptr %self, align 8, !dbg !3188
  %7 = call i64 @std.math.random.Msws8Random.next_long(ptr %6), !dbg !3191
  %zext1 = zext i64 %7 to i128, !dbg !3191
  %add = add i128 %5, %zext1, !dbg !3190
  store i128 %add, ptr %taddr, align 16
  %8 = load { i64, i64 }, ptr %taddr, align 16
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3187
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.29, i64 11, i32 187) #5, !dbg !3187
  unreachable, !dbg !3187
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws8Random.next_long(ptr %0) #0 comdat !dbg !3192 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3195
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3195
  br i1 %2, label %panic, label %checkok, !dbg !3195

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3196, !DIExpression(), !3197)
  %3 = load ptr, ptr %self, align 8, !dbg !3198
  %4 = call i32 @std.math.random.Msws8Random.next_int(ptr %3), !dbg !3200
  %zext = zext i32 %4 to i64, !dbg !3200
  %shl = shl i64 %zext, 32, !dbg !3200
  %5 = freeze i64 %shl, !dbg !3200
  %6 = load ptr, ptr %self, align 8, !dbg !3198
  %7 = call i32 @std.math.random.Msws8Random.next_int(ptr %6), !dbg !3201
  %zext1 = zext i32 %7 to i64, !dbg !3201
  %add = add i64 %5, %zext1, !dbg !3200
  ret i64 %add, !dbg !3200

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3197
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.19, i64 9, i32 188) #5, !dbg !3197
  unreachable, !dbg !3197
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws8Random.next_int(ptr %0) #0 comdat !dbg !3202 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3205
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3205
  br i1 %2, label %panic, label %checkok, !dbg !3205

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3206, !DIExpression(), !3207)
  %3 = load ptr, ptr %self, align 8, !dbg !3208
  %4 = call i16 @std.math.random.Msws8Random.next_short(ptr %3), !dbg !3210
  %zext = zext i16 %4 to i32, !dbg !3210
  %shl = shl i32 %zext, 16, !dbg !3210
  %5 = freeze i32 %shl, !dbg !3210
  %6 = load ptr, ptr %self, align 8, !dbg !3208
  %7 = call i16 @std.math.random.Msws8Random.next_short(ptr %6), !dbg !3211
  %zext1 = zext i16 %7 to i32, !dbg !3211
  %add = add i32 %5, %zext1, !dbg !3210
  ret i32 %add, !dbg !3210

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3207
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.30, i64 8, i32 189) #5, !dbg !3207
  unreachable, !dbg !3207
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws8Random.next_short(ptr %0) #0 comdat !dbg !3212 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3215
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3215
  br i1 %2, label %panic, label %checkok, !dbg !3215

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3216, !DIExpression(), !3217)
  %3 = load ptr, ptr %self, align 8, !dbg !3218
  %4 = call i8 @std.math.random.Msws8Random.next_byte(ptr %3), !dbg !3220
  %zext = zext i8 %4 to i16, !dbg !3220
  %zext1 = zext i16 %zext to i32, !dbg !3220
  %shl = shl i32 %zext1, 8, !dbg !3220
  %5 = freeze i32 %shl, !dbg !3220
  %6 = load ptr, ptr %self, align 8, !dbg !3218
  %7 = call i8 @std.math.random.Msws8Random.next_byte(ptr %6), !dbg !3221
  %zext2 = zext i8 %7 to i32, !dbg !3221
  %add = add i32 %5, %zext2, !dbg !3220
  %trunc = trunc i32 %add to i16, !dbg !3220
  ret i16 %trunc, !dbg !3220

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3217
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 12, ptr @.func.31, i64 10, i32 190) #5, !dbg !3217
  unreachable, !dbg !3217
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #2

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.builtin.panicf(ptr, i64, ptr, i64, ptr, i64, i32, ptr byval(%"any[]") align 8) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.fshr.i64(i64, i64, i64) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshr.i32(i32, i32, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.fshr.i16(i16, i16, i16) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.fshr.i8(i8, i8, i8) #1

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.mem.allocator.push_pool() #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.mem.tmalloc(i64, i64) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.pop_pool(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.mem.malloc(i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.free(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i32 @std.hash.fnv32a.hash(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.time.clock.now() #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.dstring.DString.init(ptr, i64, ptr, i64) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.fshr.i128(i128, i128, i128) #1

define internal void @.c3_dynamic_register() align 8 {
entry:
  %next_val = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", i32 0, i32 2), align 8
  %0 = icmp eq ptr %next_val, inttoptr (i64 -1 to ptr)
  br i1 %0, label %dtable_check, label %dtable_skip

dtable_check:                                     ; preds = %dtable_check, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_check ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %1 = icmp eq ptr %dtable_ptr, null
  %next_dtable_ref = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br i1 %1, label %dtable_found, label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", ptr %dtable_ref, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip

dtable_skip:                                      ; preds = %dtable_found, %entry
  %next_val1 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", i32 0, i32 2), align 8
  %2 = icmp eq ptr %next_val1, inttoptr (i64 -1 to ptr)
  br i1 %2, label %dtable_check2, label %dtable_skip7

dtable_check2:                                    ; preds = %dtable_check2, %dtable_skip
  %dtable_ref3 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip ], [ %next_dtable_ref5, %dtable_check2 ]
  %dtable_ptr4 = load ptr, ptr %dtable_ref3, align 8
  %3 = icmp eq ptr %dtable_ptr4, null
  %next_dtable_ref5 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr4, i32 0, i32 2
  br i1 %3, label %dtable_found6, label %dtable_check2

dtable_found6:                                    ; preds = %dtable_check2
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", ptr %dtable_ref3, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip7

dtable_skip7:                                     ; preds = %dtable_found6, %dtable_skip
  %next_val8 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", i32 0, i32 2), align 8
  %4 = icmp eq ptr %next_val8, inttoptr (i64 -1 to ptr)
  br i1 %4, label %dtable_check9, label %dtable_skip14

dtable_check9:                                    ; preds = %dtable_check9, %dtable_skip7
  %dtable_ref10 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip7 ], [ %next_dtable_ref12, %dtable_check9 ]
  %dtable_ptr11 = load ptr, ptr %dtable_ref10, align 8
  %5 = icmp eq ptr %dtable_ptr11, null
  %next_dtable_ref12 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr11, i32 0, i32 2
  br i1 %5, label %dtable_found13, label %dtable_check9

dtable_found13:                                   ; preds = %dtable_check9
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", ptr %dtable_ref10, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip14

dtable_skip14:                                    ; preds = %dtable_found13, %dtable_skip7
  %next_val15 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", i32 0, i32 2), align 8
  %6 = icmp eq ptr %next_val15, inttoptr (i64 -1 to ptr)
  br i1 %6, label %dtable_check16, label %dtable_skip21

dtable_check16:                                   ; preds = %dtable_check16, %dtable_skip14
  %dtable_ref17 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip14 ], [ %next_dtable_ref19, %dtable_check16 ]
  %dtable_ptr18 = load ptr, ptr %dtable_ref17, align 8
  %7 = icmp eq ptr %dtable_ptr18, null
  %next_dtable_ref19 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr18, i32 0, i32 2
  br i1 %7, label %dtable_found20, label %dtable_check16

dtable_found20:                                   ; preds = %dtable_check16
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", ptr %dtable_ref17, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip21

dtable_skip21:                                    ; preds = %dtable_found20, %dtable_skip14
  %next_val22 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", i32 0, i32 2), align 8
  %8 = icmp eq ptr %next_val22, inttoptr (i64 -1 to ptr)
  br i1 %8, label %dtable_check23, label %dtable_skip28

dtable_check23:                                   ; preds = %dtable_check23, %dtable_skip21
  %dtable_ref24 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip21 ], [ %next_dtable_ref26, %dtable_check23 ]
  %dtable_ptr25 = load ptr, ptr %dtable_ref24, align 8
  %9 = icmp eq ptr %dtable_ptr25, null
  %next_dtable_ref26 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr25, i32 0, i32 2
  br i1 %9, label %dtable_found27, label %dtable_check23

dtable_found27:                                   ; preds = %dtable_check23
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", ptr %dtable_ref24, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip28

dtable_skip28:                                    ; preds = %dtable_found27, %dtable_skip21
  %next_val29 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", i32 0, i32 2), align 8
  %10 = icmp eq ptr %next_val29, inttoptr (i64 -1 to ptr)
  br i1 %10, label %dtable_check30, label %dtable_skip35

dtable_check30:                                   ; preds = %dtable_check30, %dtable_skip28
  %dtable_ref31 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip28 ], [ %next_dtable_ref33, %dtable_check30 ]
  %dtable_ptr32 = load ptr, ptr %dtable_ref31, align 8
  %11 = icmp eq ptr %dtable_ptr32, null
  %next_dtable_ref33 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr32, i32 0, i32 2
  br i1 %11, label %dtable_found34, label %dtable_check30

dtable_found34:                                   ; preds = %dtable_check30
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", ptr %dtable_ref31, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip35

dtable_skip35:                                    ; preds = %dtable_found34, %dtable_skip28
  %next_val36 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", i32 0, i32 2), align 8
  %12 = icmp eq ptr %next_val36, inttoptr (i64 -1 to ptr)
  br i1 %12, label %dtable_check37, label %dtable_skip42

dtable_check37:                                   ; preds = %dtable_check37, %dtable_skip35
  %dtable_ref38 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip35 ], [ %next_dtable_ref40, %dtable_check37 ]
  %dtable_ptr39 = load ptr, ptr %dtable_ref38, align 8
  %13 = icmp eq ptr %dtable_ptr39, null
  %next_dtable_ref40 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr39, i32 0, i32 2
  br i1 %13, label %dtable_found41, label %dtable_check37

dtable_found41:                                   ; preds = %dtable_check37
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", ptr %dtable_ref38, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip42

dtable_skip42:                                    ; preds = %dtable_found41, %dtable_skip35
  %next_val43 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", i32 0, i32 2), align 8
  %14 = icmp eq ptr %next_val43, inttoptr (i64 -1 to ptr)
  br i1 %14, label %dtable_check44, label %dtable_skip49

dtable_check44:                                   ; preds = %dtable_check44, %dtable_skip42
  %dtable_ref45 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip42 ], [ %next_dtable_ref47, %dtable_check44 ]
  %dtable_ptr46 = load ptr, ptr %dtable_ref45, align 8
  %15 = icmp eq ptr %dtable_ptr46, null
  %next_dtable_ref47 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr46, i32 0, i32 2
  br i1 %15, label %dtable_found48, label %dtable_check44

dtable_found48:                                   ; preds = %dtable_check44
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", ptr %dtable_ref45, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip49

dtable_skip49:                                    ; preds = %dtable_found48, %dtable_skip42
  %next_val50 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", i32 0, i32 2), align 8
  %16 = icmp eq ptr %next_val50, inttoptr (i64 -1 to ptr)
  br i1 %16, label %dtable_check51, label %dtable_skip56

dtable_check51:                                   ; preds = %dtable_check51, %dtable_skip49
  %dtable_ref52 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip49 ], [ %next_dtable_ref54, %dtable_check51 ]
  %dtable_ptr53 = load ptr, ptr %dtable_ref52, align 8
  %17 = icmp eq ptr %dtable_ptr53, null
  %next_dtable_ref54 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr53, i32 0, i32 2
  br i1 %17, label %dtable_found55, label %dtable_check51

dtable_found55:                                   ; preds = %dtable_check51
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", ptr %dtable_ref52, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip56

dtable_skip56:                                    ; preds = %dtable_found55, %dtable_skip49
  %next_val57 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", i32 0, i32 2), align 8
  %18 = icmp eq ptr %next_val57, inttoptr (i64 -1 to ptr)
  br i1 %18, label %dtable_check58, label %dtable_skip63

dtable_check58:                                   ; preds = %dtable_check58, %dtable_skip56
  %dtable_ref59 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip56 ], [ %next_dtable_ref61, %dtable_check58 ]
  %dtable_ptr60 = load ptr, ptr %dtable_ref59, align 8
  %19 = icmp eq ptr %dtable_ptr60, null
  %next_dtable_ref61 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr60, i32 0, i32 2
  br i1 %19, label %dtable_found62, label %dtable_check58

dtable_found62:                                   ; preds = %dtable_check58
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", ptr %dtable_ref59, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip63

dtable_skip63:                                    ; preds = %dtable_found62, %dtable_skip56
  %next_val64 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", i32 0, i32 2), align 8
  %20 = icmp eq ptr %next_val64, inttoptr (i64 -1 to ptr)
  br i1 %20, label %dtable_check65, label %dtable_skip70

dtable_check65:                                   ; preds = %dtable_check65, %dtable_skip63
  %dtable_ref66 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip63 ], [ %next_dtable_ref68, %dtable_check65 ]
  %dtable_ptr67 = load ptr, ptr %dtable_ref66, align 8
  %21 = icmp eq ptr %dtable_ptr67, null
  %next_dtable_ref68 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr67, i32 0, i32 2
  br i1 %21, label %dtable_found69, label %dtable_check65

dtable_found69:                                   ; preds = %dtable_check65
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", ptr %dtable_ref66, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip70

dtable_skip70:                                    ; preds = %dtable_found69, %dtable_skip63
  %next_val71 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", i32 0, i32 2), align 8
  %22 = icmp eq ptr %next_val71, inttoptr (i64 -1 to ptr)
  br i1 %22, label %dtable_check72, label %dtable_skip77

dtable_check72:                                   ; preds = %dtable_check72, %dtable_skip70
  %dtable_ref73 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip70 ], [ %next_dtable_ref75, %dtable_check72 ]
  %dtable_ptr74 = load ptr, ptr %dtable_ref73, align 8
  %23 = icmp eq ptr %dtable_ptr74, null
  %next_dtable_ref75 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr74, i32 0, i32 2
  br i1 %23, label %dtable_found76, label %dtable_check72

dtable_found76:                                   ; preds = %dtable_check72
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", ptr %dtable_ref73, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip77

dtable_skip77:                                    ; preds = %dtable_found76, %dtable_skip70
  %next_val78 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", i32 0, i32 2), align 8
  %24 = icmp eq ptr %next_val78, inttoptr (i64 -1 to ptr)
  br i1 %24, label %dtable_check79, label %dtable_skip84

dtable_check79:                                   ; preds = %dtable_check79, %dtable_skip77
  %dtable_ref80 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip77 ], [ %next_dtable_ref82, %dtable_check79 ]
  %dtable_ptr81 = load ptr, ptr %dtable_ref80, align 8
  %25 = icmp eq ptr %dtable_ptr81, null
  %next_dtable_ref82 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr81, i32 0, i32 2
  br i1 %25, label %dtable_found83, label %dtable_check79

dtable_found83:                                   ; preds = %dtable_check79
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", ptr %dtable_ref80, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip84

dtable_skip84:                                    ; preds = %dtable_found83, %dtable_skip77
  %next_val85 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", i32 0, i32 2), align 8
  %26 = icmp eq ptr %next_val85, inttoptr (i64 -1 to ptr)
  br i1 %26, label %dtable_check86, label %dtable_skip91

dtable_check86:                                   ; preds = %dtable_check86, %dtable_skip84
  %dtable_ref87 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip84 ], [ %next_dtable_ref89, %dtable_check86 ]
  %dtable_ptr88 = load ptr, ptr %dtable_ref87, align 8
  %27 = icmp eq ptr %dtable_ptr88, null
  %next_dtable_ref89 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr88, i32 0, i32 2
  br i1 %27, label %dtable_found90, label %dtable_check86

dtable_found90:                                   ; preds = %dtable_check86
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", ptr %dtable_ref87, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip91

dtable_skip91:                                    ; preds = %dtable_found90, %dtable_skip84
  %next_val92 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", i32 0, i32 2), align 8
  %28 = icmp eq ptr %next_val92, inttoptr (i64 -1 to ptr)
  br i1 %28, label %dtable_check93, label %dtable_skip98

dtable_check93:                                   ; preds = %dtable_check93, %dtable_skip91
  %dtable_ref94 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip91 ], [ %next_dtable_ref96, %dtable_check93 ]
  %dtable_ptr95 = load ptr, ptr %dtable_ref94, align 8
  %29 = icmp eq ptr %dtable_ptr95, null
  %next_dtable_ref96 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr95, i32 0, i32 2
  br i1 %29, label %dtable_found97, label %dtable_check93

dtable_found97:                                   ; preds = %dtable_check93
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", ptr %dtable_ref94, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip98

dtable_skip98:                                    ; preds = %dtable_found97, %dtable_skip91
  %next_val99 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", i32 0, i32 2), align 8
  %30 = icmp eq ptr %next_val99, inttoptr (i64 -1 to ptr)
  br i1 %30, label %dtable_check100, label %dtable_skip105

dtable_check100:                                  ; preds = %dtable_check100, %dtable_skip98
  %dtable_ref101 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip98 ], [ %next_dtable_ref103, %dtable_check100 ]
  %dtable_ptr102 = load ptr, ptr %dtable_ref101, align 8
  %31 = icmp eq ptr %dtable_ptr102, null
  %next_dtable_ref103 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr102, i32 0, i32 2
  br i1 %31, label %dtable_found104, label %dtable_check100

dtable_found104:                                  ; preds = %dtable_check100
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", ptr %dtable_ref101, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip105

dtable_skip105:                                   ; preds = %dtable_found104, %dtable_skip98
  %next_val106 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", i32 0, i32 2), align 8
  %32 = icmp eq ptr %next_val106, inttoptr (i64 -1 to ptr)
  br i1 %32, label %dtable_check107, label %dtable_skip112

dtable_check107:                                  ; preds = %dtable_check107, %dtable_skip105
  %dtable_ref108 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip105 ], [ %next_dtable_ref110, %dtable_check107 ]
  %dtable_ptr109 = load ptr, ptr %dtable_ref108, align 8
  %33 = icmp eq ptr %dtable_ptr109, null
  %next_dtable_ref110 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr109, i32 0, i32 2
  br i1 %33, label %dtable_found111, label %dtable_check107

dtable_found111:                                  ; preds = %dtable_check107
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", ptr %dtable_ref108, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip112

dtable_skip112:                                   ; preds = %dtable_found111, %dtable_skip105
  %next_val113 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", i32 0, i32 2), align 8
  %34 = icmp eq ptr %next_val113, inttoptr (i64 -1 to ptr)
  br i1 %34, label %dtable_check114, label %dtable_skip119

dtable_check114:                                  ; preds = %dtable_check114, %dtable_skip112
  %dtable_ref115 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip112 ], [ %next_dtable_ref117, %dtable_check114 ]
  %dtable_ptr116 = load ptr, ptr %dtable_ref115, align 8
  %35 = icmp eq ptr %dtable_ptr116, null
  %next_dtable_ref117 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr116, i32 0, i32 2
  br i1 %35, label %dtable_found118, label %dtable_check114

dtable_found118:                                  ; preds = %dtable_check114
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", ptr %dtable_ref115, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip119

dtable_skip119:                                   ; preds = %dtable_found118, %dtable_skip112
  %next_val120 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", i32 0, i32 2), align 8
  %36 = icmp eq ptr %next_val120, inttoptr (i64 -1 to ptr)
  br i1 %36, label %dtable_check121, label %dtable_skip126

dtable_check121:                                  ; preds = %dtable_check121, %dtable_skip119
  %dtable_ref122 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip119 ], [ %next_dtable_ref124, %dtable_check121 ]
  %dtable_ptr123 = load ptr, ptr %dtable_ref122, align 8
  %37 = icmp eq ptr %dtable_ptr123, null
  %next_dtable_ref124 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr123, i32 0, i32 2
  br i1 %37, label %dtable_found125, label %dtable_check121

dtable_found125:                                  ; preds = %dtable_check121
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", ptr %dtable_ref122, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip126

dtable_skip126:                                   ; preds = %dtable_found125, %dtable_skip119
  %next_val127 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", i32 0, i32 2), align 8
  %38 = icmp eq ptr %next_val127, inttoptr (i64 -1 to ptr)
  br i1 %38, label %dtable_check128, label %dtable_skip133

dtable_check128:                                  ; preds = %dtable_check128, %dtable_skip126
  %dtable_ref129 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip126 ], [ %next_dtable_ref131, %dtable_check128 ]
  %dtable_ptr130 = load ptr, ptr %dtable_ref129, align 8
  %39 = icmp eq ptr %dtable_ptr130, null
  %next_dtable_ref131 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr130, i32 0, i32 2
  br i1 %39, label %dtable_found132, label %dtable_check128

dtable_found132:                                  ; preds = %dtable_check128
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", ptr %dtable_ref129, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip133

dtable_skip133:                                   ; preds = %dtable_found132, %dtable_skip126
  %next_val134 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", i32 0, i32 2), align 8
  %40 = icmp eq ptr %next_val134, inttoptr (i64 -1 to ptr)
  br i1 %40, label %dtable_check135, label %dtable_skip140

dtable_check135:                                  ; preds = %dtable_check135, %dtable_skip133
  %dtable_ref136 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip133 ], [ %next_dtable_ref138, %dtable_check135 ]
  %dtable_ptr137 = load ptr, ptr %dtable_ref136, align 8
  %41 = icmp eq ptr %dtable_ptr137, null
  %next_dtable_ref138 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr137, i32 0, i32 2
  br i1 %41, label %dtable_found139, label %dtable_check135

dtable_found139:                                  ; preds = %dtable_check135
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", ptr %dtable_ref136, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip140

dtable_skip140:                                   ; preds = %dtable_found139, %dtable_skip133
  %next_val141 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", i32 0, i32 2), align 8
  %42 = icmp eq ptr %next_val141, inttoptr (i64 -1 to ptr)
  br i1 %42, label %dtable_check142, label %dtable_skip147

dtable_check142:                                  ; preds = %dtable_check142, %dtable_skip140
  %dtable_ref143 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip140 ], [ %next_dtable_ref145, %dtable_check142 ]
  %dtable_ptr144 = load ptr, ptr %dtable_ref143, align 8
  %43 = icmp eq ptr %dtable_ptr144, null
  %next_dtable_ref145 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr144, i32 0, i32 2
  br i1 %43, label %dtable_found146, label %dtable_check142

dtable_found146:                                  ; preds = %dtable_check142
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", ptr %dtable_ref143, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip147

dtable_skip147:                                   ; preds = %dtable_found146, %dtable_skip140
  %next_val148 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", i32 0, i32 2), align 8
  %44 = icmp eq ptr %next_val148, inttoptr (i64 -1 to ptr)
  br i1 %44, label %dtable_check149, label %dtable_skip154

dtable_check149:                                  ; preds = %dtable_check149, %dtable_skip147
  %dtable_ref150 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip147 ], [ %next_dtable_ref152, %dtable_check149 ]
  %dtable_ptr151 = load ptr, ptr %dtable_ref150, align 8
  %45 = icmp eq ptr %dtable_ptr151, null
  %next_dtable_ref152 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr151, i32 0, i32 2
  br i1 %45, label %dtable_found153, label %dtable_check149

dtable_found153:                                  ; preds = %dtable_check149
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", ptr %dtable_ref150, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip154

dtable_skip154:                                   ; preds = %dtable_found153, %dtable_skip147
  %next_val155 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", i32 0, i32 2), align 8
  %46 = icmp eq ptr %next_val155, inttoptr (i64 -1 to ptr)
  br i1 %46, label %dtable_check156, label %dtable_skip161

dtable_check156:                                  ; preds = %dtable_check156, %dtable_skip154
  %dtable_ref157 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip154 ], [ %next_dtable_ref159, %dtable_check156 ]
  %dtable_ptr158 = load ptr, ptr %dtable_ref157, align 8
  %47 = icmp eq ptr %dtable_ptr158, null
  %next_dtable_ref159 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr158, i32 0, i32 2
  br i1 %47, label %dtable_found160, label %dtable_check156

dtable_found160:                                  ; preds = %dtable_check156
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", ptr %dtable_ref157, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip161

dtable_skip161:                                   ; preds = %dtable_found160, %dtable_skip154
  %next_val162 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", i32 0, i32 2), align 8
  %48 = icmp eq ptr %next_val162, inttoptr (i64 -1 to ptr)
  br i1 %48, label %dtable_check163, label %dtable_skip168

dtable_check163:                                  ; preds = %dtable_check163, %dtable_skip161
  %dtable_ref164 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip161 ], [ %next_dtable_ref166, %dtable_check163 ]
  %dtable_ptr165 = load ptr, ptr %dtable_ref164, align 8
  %49 = icmp eq ptr %dtable_ptr165, null
  %next_dtable_ref166 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr165, i32 0, i32 2
  br i1 %49, label %dtable_found167, label %dtable_check163

dtable_found167:                                  ; preds = %dtable_check163
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", ptr %dtable_ref164, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip168

dtable_skip168:                                   ; preds = %dtable_found167, %dtable_skip161
  %next_val169 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", i32 0, i32 2), align 8
  %50 = icmp eq ptr %next_val169, inttoptr (i64 -1 to ptr)
  br i1 %50, label %dtable_check170, label %dtable_skip175

dtable_check170:                                  ; preds = %dtable_check170, %dtable_skip168
  %dtable_ref171 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip168 ], [ %next_dtable_ref173, %dtable_check170 ]
  %dtable_ptr172 = load ptr, ptr %dtable_ref171, align 8
  %51 = icmp eq ptr %dtable_ptr172, null
  %next_dtable_ref173 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr172, i32 0, i32 2
  br i1 %51, label %dtable_found174, label %dtable_check170

dtable_found174:                                  ; preds = %dtable_check170
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", ptr %dtable_ref171, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip175

dtable_skip175:                                   ; preds = %dtable_found174, %dtable_skip168
  %next_val176 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", i32 0, i32 2), align 8
  %52 = icmp eq ptr %next_val176, inttoptr (i64 -1 to ptr)
  br i1 %52, label %dtable_check177, label %dtable_skip182

dtable_check177:                                  ; preds = %dtable_check177, %dtable_skip175
  %dtable_ref178 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip175 ], [ %next_dtable_ref180, %dtable_check177 ]
  %dtable_ptr179 = load ptr, ptr %dtable_ref178, align 8
  %53 = icmp eq ptr %dtable_ptr179, null
  %next_dtable_ref180 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr179, i32 0, i32 2
  br i1 %53, label %dtable_found181, label %dtable_check177

dtable_found181:                                  ; preds = %dtable_check177
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", ptr %dtable_ref178, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip182

dtable_skip182:                                   ; preds = %dtable_found181, %dtable_skip175
  %next_val183 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", i32 0, i32 2), align 8
  %54 = icmp eq ptr %next_val183, inttoptr (i64 -1 to ptr)
  br i1 %54, label %dtable_check184, label %dtable_skip189

dtable_check184:                                  ; preds = %dtable_check184, %dtable_skip182
  %dtable_ref185 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip182 ], [ %next_dtable_ref187, %dtable_check184 ]
  %dtable_ptr186 = load ptr, ptr %dtable_ref185, align 8
  %55 = icmp eq ptr %dtable_ptr186, null
  %next_dtable_ref187 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr186, i32 0, i32 2
  br i1 %55, label %dtable_found188, label %dtable_check184

dtable_found188:                                  ; preds = %dtable_check184
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", ptr %dtable_ref185, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip189

dtable_skip189:                                   ; preds = %dtable_found188, %dtable_skip182
  %next_val190 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", i32 0, i32 2), align 8
  %56 = icmp eq ptr %next_val190, inttoptr (i64 -1 to ptr)
  br i1 %56, label %dtable_check191, label %dtable_skip196

dtable_check191:                                  ; preds = %dtable_check191, %dtable_skip189
  %dtable_ref192 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip189 ], [ %next_dtable_ref194, %dtable_check191 ]
  %dtable_ptr193 = load ptr, ptr %dtable_ref192, align 8
  %57 = icmp eq ptr %dtable_ptr193, null
  %next_dtable_ref194 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr193, i32 0, i32 2
  br i1 %57, label %dtable_found195, label %dtable_check191

dtable_found195:                                  ; preds = %dtable_check191
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", ptr %dtable_ref192, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip196

dtable_skip196:                                   ; preds = %dtable_found195, %dtable_skip189
  %next_val197 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", i32 0, i32 2), align 8
  %58 = icmp eq ptr %next_val197, inttoptr (i64 -1 to ptr)
  br i1 %58, label %dtable_check198, label %dtable_skip203

dtable_check198:                                  ; preds = %dtable_check198, %dtable_skip196
  %dtable_ref199 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip196 ], [ %next_dtable_ref201, %dtable_check198 ]
  %dtable_ptr200 = load ptr, ptr %dtable_ref199, align 8
  %59 = icmp eq ptr %dtable_ptr200, null
  %next_dtable_ref201 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr200, i32 0, i32 2
  br i1 %59, label %dtable_found202, label %dtable_check198

dtable_found202:                                  ; preds = %dtable_check198
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", ptr %dtable_ref199, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip203

dtable_skip203:                                   ; preds = %dtable_found202, %dtable_skip196
  %next_val204 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", i32 0, i32 2), align 8
  %60 = icmp eq ptr %next_val204, inttoptr (i64 -1 to ptr)
  br i1 %60, label %dtable_check205, label %dtable_skip210

dtable_check205:                                  ; preds = %dtable_check205, %dtable_skip203
  %dtable_ref206 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip203 ], [ %next_dtable_ref208, %dtable_check205 ]
  %dtable_ptr207 = load ptr, ptr %dtable_ref206, align 8
  %61 = icmp eq ptr %dtable_ptr207, null
  %next_dtable_ref208 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr207, i32 0, i32 2
  br i1 %61, label %dtable_found209, label %dtable_check205

dtable_found209:                                  ; preds = %dtable_check205
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", ptr %dtable_ref206, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip210

dtable_skip210:                                   ; preds = %dtable_found209, %dtable_skip203
  %next_val211 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", i32 0, i32 2), align 8
  %62 = icmp eq ptr %next_val211, inttoptr (i64 -1 to ptr)
  br i1 %62, label %dtable_check212, label %dtable_skip217

dtable_check212:                                  ; preds = %dtable_check212, %dtable_skip210
  %dtable_ref213 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip210 ], [ %next_dtable_ref215, %dtable_check212 ]
  %dtable_ptr214 = load ptr, ptr %dtable_ref213, align 8
  %63 = icmp eq ptr %dtable_ptr214, null
  %next_dtable_ref215 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr214, i32 0, i32 2
  br i1 %63, label %dtable_found216, label %dtable_check212

dtable_found216:                                  ; preds = %dtable_check212
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", ptr %dtable_ref213, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip217

dtable_skip217:                                   ; preds = %dtable_found216, %dtable_skip210
  %next_val218 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", i32 0, i32 2), align 8
  %64 = icmp eq ptr %next_val218, inttoptr (i64 -1 to ptr)
  br i1 %64, label %dtable_check219, label %dtable_skip224

dtable_check219:                                  ; preds = %dtable_check219, %dtable_skip217
  %dtable_ref220 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip217 ], [ %next_dtable_ref222, %dtable_check219 ]
  %dtable_ptr221 = load ptr, ptr %dtable_ref220, align 8
  %65 = icmp eq ptr %dtable_ptr221, null
  %next_dtable_ref222 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr221, i32 0, i32 2
  br i1 %65, label %dtable_found223, label %dtable_check219

dtable_found223:                                  ; preds = %dtable_check219
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", ptr %dtable_ref220, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip224

dtable_skip224:                                   ; preds = %dtable_found223, %dtable_skip217
  %next_val225 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", i32 0, i32 2), align 8
  %66 = icmp eq ptr %next_val225, inttoptr (i64 -1 to ptr)
  br i1 %66, label %dtable_check226, label %dtable_skip231

dtable_check226:                                  ; preds = %dtable_check226, %dtable_skip224
  %dtable_ref227 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip224 ], [ %next_dtable_ref229, %dtable_check226 ]
  %dtable_ptr228 = load ptr, ptr %dtable_ref227, align 8
  %67 = icmp eq ptr %dtable_ptr228, null
  %next_dtable_ref229 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr228, i32 0, i32 2
  br i1 %67, label %dtable_found230, label %dtable_check226

dtable_found230:                                  ; preds = %dtable_check226
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", ptr %dtable_ref227, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip231

dtable_skip231:                                   ; preds = %dtable_found230, %dtable_skip224
  %next_val232 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", i32 0, i32 2), align 8
  %68 = icmp eq ptr %next_val232, inttoptr (i64 -1 to ptr)
  br i1 %68, label %dtable_check233, label %dtable_skip238

dtable_check233:                                  ; preds = %dtable_check233, %dtable_skip231
  %dtable_ref234 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip231 ], [ %next_dtable_ref236, %dtable_check233 ]
  %dtable_ptr235 = load ptr, ptr %dtable_ref234, align 8
  %69 = icmp eq ptr %dtable_ptr235, null
  %next_dtable_ref236 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr235, i32 0, i32 2
  br i1 %69, label %dtable_found237, label %dtable_check233

dtable_found237:                                  ; preds = %dtable_check233
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", ptr %dtable_ref234, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip238

dtable_skip238:                                   ; preds = %dtable_found237, %dtable_skip231
  %next_val239 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", i32 0, i32 2), align 8
  %70 = icmp eq ptr %next_val239, inttoptr (i64 -1 to ptr)
  br i1 %70, label %dtable_check240, label %dtable_skip245

dtable_check240:                                  ; preds = %dtable_check240, %dtable_skip238
  %dtable_ref241 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip238 ], [ %next_dtable_ref243, %dtable_check240 ]
  %dtable_ptr242 = load ptr, ptr %dtable_ref241, align 8
  %71 = icmp eq ptr %dtable_ptr242, null
  %next_dtable_ref243 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr242, i32 0, i32 2
  br i1 %71, label %dtable_found244, label %dtable_check240

dtable_found244:                                  ; preds = %dtable_check240
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", ptr %dtable_ref241, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip245

dtable_skip245:                                   ; preds = %dtable_found244, %dtable_skip238
  %next_val246 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", i32 0, i32 2), align 8
  %72 = icmp eq ptr %next_val246, inttoptr (i64 -1 to ptr)
  br i1 %72, label %dtable_check247, label %dtable_skip252

dtable_check247:                                  ; preds = %dtable_check247, %dtable_skip245
  %dtable_ref248 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip245 ], [ %next_dtable_ref250, %dtable_check247 ]
  %dtable_ptr249 = load ptr, ptr %dtable_ref248, align 8
  %73 = icmp eq ptr %dtable_ptr249, null
  %next_dtable_ref250 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr249, i32 0, i32 2
  br i1 %73, label %dtable_found251, label %dtable_check247

dtable_found251:                                  ; preds = %dtable_check247
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", ptr %dtable_ref248, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip252

dtable_skip252:                                   ; preds = %dtable_found251, %dtable_skip245
  %next_val253 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", i32 0, i32 2), align 8
  %74 = icmp eq ptr %next_val253, inttoptr (i64 -1 to ptr)
  br i1 %74, label %dtable_check254, label %dtable_skip259

dtable_check254:                                  ; preds = %dtable_check254, %dtable_skip252
  %dtable_ref255 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip252 ], [ %next_dtable_ref257, %dtable_check254 ]
  %dtable_ptr256 = load ptr, ptr %dtable_ref255, align 8
  %75 = icmp eq ptr %dtable_ptr256, null
  %next_dtable_ref257 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr256, i32 0, i32 2
  br i1 %75, label %dtable_found258, label %dtable_check254

dtable_found258:                                  ; preds = %dtable_check254
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", ptr %dtable_ref255, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip259

dtable_skip259:                                   ; preds = %dtable_found258, %dtable_skip252
  %next_val260 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", i32 0, i32 2), align 8
  %76 = icmp eq ptr %next_val260, inttoptr (i64 -1 to ptr)
  br i1 %76, label %dtable_check261, label %dtable_skip266

dtable_check261:                                  ; preds = %dtable_check261, %dtable_skip259
  %dtable_ref262 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip259 ], [ %next_dtable_ref264, %dtable_check261 ]
  %dtable_ptr263 = load ptr, ptr %dtable_ref262, align 8
  %77 = icmp eq ptr %dtable_ptr263, null
  %next_dtable_ref264 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr263, i32 0, i32 2
  br i1 %77, label %dtable_found265, label %dtable_check261

dtable_found265:                                  ; preds = %dtable_check261
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", ptr %dtable_ref262, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip266

dtable_skip266:                                   ; preds = %dtable_found265, %dtable_skip259
  %next_val267 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", i32 0, i32 2), align 8
  %78 = icmp eq ptr %next_val267, inttoptr (i64 -1 to ptr)
  br i1 %78, label %dtable_check268, label %dtable_skip273

dtable_check268:                                  ; preds = %dtable_check268, %dtable_skip266
  %dtable_ref269 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip266 ], [ %next_dtable_ref271, %dtable_check268 ]
  %dtable_ptr270 = load ptr, ptr %dtable_ref269, align 8
  %79 = icmp eq ptr %dtable_ptr270, null
  %next_dtable_ref271 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr270, i32 0, i32 2
  br i1 %79, label %dtable_found272, label %dtable_check268

dtable_found272:                                  ; preds = %dtable_check268
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", ptr %dtable_ref269, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip273

dtable_skip273:                                   ; preds = %dtable_found272, %dtable_skip266
  %next_val274 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", i32 0, i32 2), align 8
  %80 = icmp eq ptr %next_val274, inttoptr (i64 -1 to ptr)
  br i1 %80, label %dtable_check275, label %dtable_skip280

dtable_check275:                                  ; preds = %dtable_check275, %dtable_skip273
  %dtable_ref276 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip273 ], [ %next_dtable_ref278, %dtable_check275 ]
  %dtable_ptr277 = load ptr, ptr %dtable_ref276, align 8
  %81 = icmp eq ptr %dtable_ptr277, null
  %next_dtable_ref278 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr277, i32 0, i32 2
  br i1 %81, label %dtable_found279, label %dtable_check275

dtable_found279:                                  ; preds = %dtable_check275
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", ptr %dtable_ref276, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip280

dtable_skip280:                                   ; preds = %dtable_found279, %dtable_skip273
  %next_val281 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", i32 0, i32 2), align 8
  %82 = icmp eq ptr %next_val281, inttoptr (i64 -1 to ptr)
  br i1 %82, label %dtable_check282, label %dtable_skip287

dtable_check282:                                  ; preds = %dtable_check282, %dtable_skip280
  %dtable_ref283 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip280 ], [ %next_dtable_ref285, %dtable_check282 ]
  %dtable_ptr284 = load ptr, ptr %dtable_ref283, align 8
  %83 = icmp eq ptr %dtable_ptr284, null
  %next_dtable_ref285 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr284, i32 0, i32 2
  br i1 %83, label %dtable_found286, label %dtable_check282

dtable_found286:                                  ; preds = %dtable_check282
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", ptr %dtable_ref283, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip287

dtable_skip287:                                   ; preds = %dtable_found286, %dtable_skip280
  %next_val288 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", i32 0, i32 2), align 8
  %84 = icmp eq ptr %next_val288, inttoptr (i64 -1 to ptr)
  br i1 %84, label %dtable_check289, label %dtable_skip294

dtable_check289:                                  ; preds = %dtable_check289, %dtable_skip287
  %dtable_ref290 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip287 ], [ %next_dtable_ref292, %dtable_check289 ]
  %dtable_ptr291 = load ptr, ptr %dtable_ref290, align 8
  %85 = icmp eq ptr %dtable_ptr291, null
  %next_dtable_ref292 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr291, i32 0, i32 2
  br i1 %85, label %dtable_found293, label %dtable_check289

dtable_found293:                                  ; preds = %dtable_check289
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", ptr %dtable_ref290, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip294

dtable_skip294:                                   ; preds = %dtable_found293, %dtable_skip287
  %next_val295 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", i32 0, i32 2), align 8
  %86 = icmp eq ptr %next_val295, inttoptr (i64 -1 to ptr)
  br i1 %86, label %dtable_check296, label %dtable_skip301

dtable_check296:                                  ; preds = %dtable_check296, %dtable_skip294
  %dtable_ref297 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip294 ], [ %next_dtable_ref299, %dtable_check296 ]
  %dtable_ptr298 = load ptr, ptr %dtable_ref297, align 8
  %87 = icmp eq ptr %dtable_ptr298, null
  %next_dtable_ref299 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr298, i32 0, i32 2
  br i1 %87, label %dtable_found300, label %dtable_check296

dtable_found300:                                  ; preds = %dtable_check296
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", ptr %dtable_ref297, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip301

dtable_skip301:                                   ; preds = %dtable_found300, %dtable_skip294
  %next_val302 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", i32 0, i32 2), align 8
  %88 = icmp eq ptr %next_val302, inttoptr (i64 -1 to ptr)
  br i1 %88, label %dtable_check303, label %dtable_skip308

dtable_check303:                                  ; preds = %dtable_check303, %dtable_skip301
  %dtable_ref304 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip301 ], [ %next_dtable_ref306, %dtable_check303 ]
  %dtable_ptr305 = load ptr, ptr %dtable_ref304, align 8
  %89 = icmp eq ptr %dtable_ptr305, null
  %next_dtable_ref306 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr305, i32 0, i32 2
  br i1 %89, label %dtable_found307, label %dtable_check303

dtable_found307:                                  ; preds = %dtable_check303
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", ptr %dtable_ref304, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip308

dtable_skip308:                                   ; preds = %dtable_found307, %dtable_skip301
  %next_val309 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", i32 0, i32 2), align 8
  %90 = icmp eq ptr %next_val309, inttoptr (i64 -1 to ptr)
  br i1 %90, label %dtable_check310, label %dtable_skip315

dtable_check310:                                  ; preds = %dtable_check310, %dtable_skip308
  %dtable_ref311 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip308 ], [ %next_dtable_ref313, %dtable_check310 ]
  %dtable_ptr312 = load ptr, ptr %dtable_ref311, align 8
  %91 = icmp eq ptr %dtable_ptr312, null
  %next_dtable_ref313 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr312, i32 0, i32 2
  br i1 %91, label %dtable_found314, label %dtable_check310

dtable_found314:                                  ; preds = %dtable_check310
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", ptr %dtable_ref311, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip315

dtable_skip315:                                   ; preds = %dtable_found314, %dtable_skip308
  %next_val316 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", i32 0, i32 2), align 8
  %92 = icmp eq ptr %next_val316, inttoptr (i64 -1 to ptr)
  br i1 %92, label %dtable_check317, label %dtable_skip322

dtable_check317:                                  ; preds = %dtable_check317, %dtable_skip315
  %dtable_ref318 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip315 ], [ %next_dtable_ref320, %dtable_check317 ]
  %dtable_ptr319 = load ptr, ptr %dtable_ref318, align 8
  %93 = icmp eq ptr %dtable_ptr319, null
  %next_dtable_ref320 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr319, i32 0, i32 2
  br i1 %93, label %dtable_found321, label %dtable_check317

dtable_found321:                                  ; preds = %dtable_check317
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", ptr %dtable_ref318, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip322

dtable_skip322:                                   ; preds = %dtable_found321, %dtable_skip315
  %next_val323 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", i32 0, i32 2), align 8
  %94 = icmp eq ptr %next_val323, inttoptr (i64 -1 to ptr)
  br i1 %94, label %dtable_check324, label %dtable_skip329

dtable_check324:                                  ; preds = %dtable_check324, %dtable_skip322
  %dtable_ref325 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip322 ], [ %next_dtable_ref327, %dtable_check324 ]
  %dtable_ptr326 = load ptr, ptr %dtable_ref325, align 8
  %95 = icmp eq ptr %dtable_ptr326, null
  %next_dtable_ref327 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr326, i32 0, i32 2
  br i1 %95, label %dtable_found328, label %dtable_check324

dtable_found328:                                  ; preds = %dtable_check324
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", ptr %dtable_ref325, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip329

dtable_skip329:                                   ; preds = %dtable_found328, %dtable_skip322
  %next_val330 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", i32 0, i32 2), align 8
  %96 = icmp eq ptr %next_val330, inttoptr (i64 -1 to ptr)
  br i1 %96, label %dtable_check331, label %dtable_skip336

dtable_check331:                                  ; preds = %dtable_check331, %dtable_skip329
  %dtable_ref332 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip329 ], [ %next_dtable_ref334, %dtable_check331 ]
  %dtable_ptr333 = load ptr, ptr %dtable_ref332, align 8
  %97 = icmp eq ptr %dtable_ptr333, null
  %next_dtable_ref334 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr333, i32 0, i32 2
  br i1 %97, label %dtable_found335, label %dtable_check331

dtable_found335:                                  ; preds = %dtable_check331
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", ptr %dtable_ref332, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip336

dtable_skip336:                                   ; preds = %dtable_found335, %dtable_skip329
  %next_val337 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", i32 0, i32 2), align 8
  %98 = icmp eq ptr %next_val337, inttoptr (i64 -1 to ptr)
  br i1 %98, label %dtable_check338, label %dtable_skip343

dtable_check338:                                  ; preds = %dtable_check338, %dtable_skip336
  %dtable_ref339 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip336 ], [ %next_dtable_ref341, %dtable_check338 ]
  %dtable_ptr340 = load ptr, ptr %dtable_ref339, align 8
  %99 = icmp eq ptr %dtable_ptr340, null
  %next_dtable_ref341 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr340, i32 0, i32 2
  br i1 %99, label %dtable_found342, label %dtable_check338

dtable_found342:                                  ; preds = %dtable_check338
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", ptr %dtable_ref339, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip343

dtable_skip343:                                   ; preds = %dtable_found342, %dtable_skip336
  %next_val344 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", i32 0, i32 2), align 8
  %100 = icmp eq ptr %next_val344, inttoptr (i64 -1 to ptr)
  br i1 %100, label %dtable_check345, label %dtable_skip350

dtable_check345:                                  ; preds = %dtable_check345, %dtable_skip343
  %dtable_ref346 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip343 ], [ %next_dtable_ref348, %dtable_check345 ]
  %dtable_ptr347 = load ptr, ptr %dtable_ref346, align 8
  %101 = icmp eq ptr %dtable_ptr347, null
  %next_dtable_ref348 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr347, i32 0, i32 2
  br i1 %101, label %dtable_found349, label %dtable_check345

dtable_found349:                                  ; preds = %dtable_check345
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", ptr %dtable_ref346, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip350

dtable_skip350:                                   ; preds = %dtable_found349, %dtable_skip343
  %next_val351 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", i32 0, i32 2), align 8
  %102 = icmp eq ptr %next_val351, inttoptr (i64 -1 to ptr)
  br i1 %102, label %dtable_check352, label %dtable_skip357

dtable_check352:                                  ; preds = %dtable_check352, %dtable_skip350
  %dtable_ref353 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip350 ], [ %next_dtable_ref355, %dtable_check352 ]
  %dtable_ptr354 = load ptr, ptr %dtable_ref353, align 8
  %103 = icmp eq ptr %dtable_ptr354, null
  %next_dtable_ref355 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr354, i32 0, i32 2
  br i1 %103, label %dtable_found356, label %dtable_check352

dtable_found356:                                  ; preds = %dtable_check352
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", ptr %dtable_ref353, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip357

dtable_skip357:                                   ; preds = %dtable_found356, %dtable_skip350
  %next_val358 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", i32 0, i32 2), align 8
  %104 = icmp eq ptr %next_val358, inttoptr (i64 -1 to ptr)
  br i1 %104, label %dtable_check359, label %dtable_skip364

dtable_check359:                                  ; preds = %dtable_check359, %dtable_skip357
  %dtable_ref360 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip357 ], [ %next_dtable_ref362, %dtable_check359 ]
  %dtable_ptr361 = load ptr, ptr %dtable_ref360, align 8
  %105 = icmp eq ptr %dtable_ptr361, null
  %next_dtable_ref362 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr361, i32 0, i32 2
  br i1 %105, label %dtable_found363, label %dtable_check359

dtable_found363:                                  ; preds = %dtable_check359
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", ptr %dtable_ref360, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip364

dtable_skip364:                                   ; preds = %dtable_found363, %dtable_skip357
  %next_val365 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", i32 0, i32 2), align 8
  %106 = icmp eq ptr %next_val365, inttoptr (i64 -1 to ptr)
  br i1 %106, label %dtable_check366, label %dtable_skip371

dtable_check366:                                  ; preds = %dtable_check366, %dtable_skip364
  %dtable_ref367 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip364 ], [ %next_dtable_ref369, %dtable_check366 ]
  %dtable_ptr368 = load ptr, ptr %dtable_ref367, align 8
  %107 = icmp eq ptr %dtable_ptr368, null
  %next_dtable_ref369 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr368, i32 0, i32 2
  br i1 %107, label %dtable_found370, label %dtable_check366

dtable_found370:                                  ; preds = %dtable_check366
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", ptr %dtable_ref367, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip371

dtable_skip371:                                   ; preds = %dtable_found370, %dtable_skip364
  %next_val372 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", i32 0, i32 2), align 8
  %108 = icmp eq ptr %next_val372, inttoptr (i64 -1 to ptr)
  br i1 %108, label %dtable_check373, label %dtable_skip378

dtable_check373:                                  ; preds = %dtable_check373, %dtable_skip371
  %dtable_ref374 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip371 ], [ %next_dtable_ref376, %dtable_check373 ]
  %dtable_ptr375 = load ptr, ptr %dtable_ref374, align 8
  %109 = icmp eq ptr %dtable_ptr375, null
  %next_dtable_ref376 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr375, i32 0, i32 2
  br i1 %109, label %dtable_found377, label %dtable_check373

dtable_found377:                                  ; preds = %dtable_check373
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", ptr %dtable_ref374, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip378

dtable_skip378:                                   ; preds = %dtable_found377, %dtable_skip371
  %next_val379 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", i32 0, i32 2), align 8
  %110 = icmp eq ptr %next_val379, inttoptr (i64 -1 to ptr)
  br i1 %110, label %dtable_check380, label %dtable_skip385

dtable_check380:                                  ; preds = %dtable_check380, %dtable_skip378
  %dtable_ref381 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip378 ], [ %next_dtable_ref383, %dtable_check380 ]
  %dtable_ptr382 = load ptr, ptr %dtable_ref381, align 8
  %111 = icmp eq ptr %dtable_ptr382, null
  %next_dtable_ref383 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr382, i32 0, i32 2
  br i1 %111, label %dtable_found384, label %dtable_check380

dtable_found384:                                  ; preds = %dtable_check380
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", ptr %dtable_ref381, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip385

dtable_skip385:                                   ; preds = %dtable_found384, %dtable_skip378
  %next_val386 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", i32 0, i32 2), align 8
  %112 = icmp eq ptr %next_val386, inttoptr (i64 -1 to ptr)
  br i1 %112, label %dtable_check387, label %dtable_skip392

dtable_check387:                                  ; preds = %dtable_check387, %dtable_skip385
  %dtable_ref388 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip385 ], [ %next_dtable_ref390, %dtable_check387 ]
  %dtable_ptr389 = load ptr, ptr %dtable_ref388, align 8
  %113 = icmp eq ptr %dtable_ptr389, null
  %next_dtable_ref390 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr389, i32 0, i32 2
  br i1 %113, label %dtable_found391, label %dtable_check387

dtable_found391:                                  ; preds = %dtable_check387
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", ptr %dtable_ref388, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip392

dtable_skip392:                                   ; preds = %dtable_found391, %dtable_skip385
  %next_val393 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", i32 0, i32 2), align 8
  %114 = icmp eq ptr %next_val393, inttoptr (i64 -1 to ptr)
  br i1 %114, label %dtable_check394, label %dtable_skip399

dtable_check394:                                  ; preds = %dtable_check394, %dtable_skip392
  %dtable_ref395 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip392 ], [ %next_dtable_ref397, %dtable_check394 ]
  %dtable_ptr396 = load ptr, ptr %dtable_ref395, align 8
  %115 = icmp eq ptr %dtable_ptr396, null
  %next_dtable_ref397 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr396, i32 0, i32 2
  br i1 %115, label %dtable_found398, label %dtable_check394

dtable_found398:                                  ; preds = %dtable_check394
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", ptr %dtable_ref395, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip399

dtable_skip399:                                   ; preds = %dtable_found398, %dtable_skip392
  %next_val400 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", i32 0, i32 2), align 8
  %116 = icmp eq ptr %next_val400, inttoptr (i64 -1 to ptr)
  br i1 %116, label %dtable_check401, label %dtable_skip406

dtable_check401:                                  ; preds = %dtable_check401, %dtable_skip399
  %dtable_ref402 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip399 ], [ %next_dtable_ref404, %dtable_check401 ]
  %dtable_ptr403 = load ptr, ptr %dtable_ref402, align 8
  %117 = icmp eq ptr %dtable_ptr403, null
  %next_dtable_ref404 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr403, i32 0, i32 2
  br i1 %117, label %dtable_found405, label %dtable_check401

dtable_found405:                                  ; preds = %dtable_check401
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", ptr %dtable_ref402, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip406

dtable_skip406:                                   ; preds = %dtable_found405, %dtable_skip399
  %next_val407 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", i32 0, i32 2), align 8
  %118 = icmp eq ptr %next_val407, inttoptr (i64 -1 to ptr)
  br i1 %118, label %dtable_check408, label %dtable_skip413

dtable_check408:                                  ; preds = %dtable_check408, %dtable_skip406
  %dtable_ref409 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip406 ], [ %next_dtable_ref411, %dtable_check408 ]
  %dtable_ptr410 = load ptr, ptr %dtable_ref409, align 8
  %119 = icmp eq ptr %dtable_ptr410, null
  %next_dtable_ref411 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr410, i32 0, i32 2
  br i1 %119, label %dtable_found412, label %dtable_check408

dtable_found412:                                  ; preds = %dtable_check408
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", ptr %dtable_ref409, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip413

dtable_skip413:                                   ; preds = %dtable_found412, %dtable_skip406
  %next_val414 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", i32 0, i32 2), align 8
  %120 = icmp eq ptr %next_val414, inttoptr (i64 -1 to ptr)
  br i1 %120, label %dtable_check415, label %dtable_skip420

dtable_check415:                                  ; preds = %dtable_check415, %dtable_skip413
  %dtable_ref416 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip413 ], [ %next_dtable_ref418, %dtable_check415 ]
  %dtable_ptr417 = load ptr, ptr %dtable_ref416, align 8
  %121 = icmp eq ptr %dtable_ptr417, null
  %next_dtable_ref418 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr417, i32 0, i32 2
  br i1 %121, label %dtable_found419, label %dtable_check415

dtable_found419:                                  ; preds = %dtable_check415
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", ptr %dtable_ref416, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip420

dtable_skip420:                                   ; preds = %dtable_found419, %dtable_skip413
  %next_val421 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", i32 0, i32 2), align 8
  %122 = icmp eq ptr %next_val421, inttoptr (i64 -1 to ptr)
  br i1 %122, label %dtable_check422, label %dtable_skip427

dtable_check422:                                  ; preds = %dtable_check422, %dtable_skip420
  %dtable_ref423 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip420 ], [ %next_dtable_ref425, %dtable_check422 ]
  %dtable_ptr424 = load ptr, ptr %dtable_ref423, align 8
  %123 = icmp eq ptr %dtable_ptr424, null
  %next_dtable_ref425 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr424, i32 0, i32 2
  br i1 %123, label %dtable_found426, label %dtable_check422

dtable_found426:                                  ; preds = %dtable_check422
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", ptr %dtable_ref423, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip427

dtable_skip427:                                   ; preds = %dtable_found426, %dtable_skip420
  %next_val428 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", i32 0, i32 2), align 8
  %124 = icmp eq ptr %next_val428, inttoptr (i64 -1 to ptr)
  br i1 %124, label %dtable_check429, label %dtable_skip434

dtable_check429:                                  ; preds = %dtable_check429, %dtable_skip427
  %dtable_ref430 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip427 ], [ %next_dtable_ref432, %dtable_check429 ]
  %dtable_ptr431 = load ptr, ptr %dtable_ref430, align 8
  %125 = icmp eq ptr %dtable_ptr431, null
  %next_dtable_ref432 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr431, i32 0, i32 2
  br i1 %125, label %dtable_found433, label %dtable_check429

dtable_found433:                                  ; preds = %dtable_check429
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", ptr %dtable_ref430, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip434

dtable_skip434:                                   ; preds = %dtable_found433, %dtable_skip427
  %next_val435 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", i32 0, i32 2), align 8
  %126 = icmp eq ptr %next_val435, inttoptr (i64 -1 to ptr)
  br i1 %126, label %dtable_check436, label %dtable_skip441

dtable_check436:                                  ; preds = %dtable_check436, %dtable_skip434
  %dtable_ref437 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip434 ], [ %next_dtable_ref439, %dtable_check436 ]
  %dtable_ptr438 = load ptr, ptr %dtable_ref437, align 8
  %127 = icmp eq ptr %dtable_ptr438, null
  %next_dtable_ref439 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr438, i32 0, i32 2
  br i1 %127, label %dtable_found440, label %dtable_check436

dtable_found440:                                  ; preds = %dtable_check436
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", ptr %dtable_ref437, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip441

dtable_skip441:                                   ; preds = %dtable_found440, %dtable_skip434
  %next_val442 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", i32 0, i32 2), align 8
  %128 = icmp eq ptr %next_val442, inttoptr (i64 -1 to ptr)
  br i1 %128, label %dtable_check443, label %dtable_skip448

dtable_check443:                                  ; preds = %dtable_check443, %dtable_skip441
  %dtable_ref444 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip441 ], [ %next_dtable_ref446, %dtable_check443 ]
  %dtable_ptr445 = load ptr, ptr %dtable_ref444, align 8
  %129 = icmp eq ptr %dtable_ptr445, null
  %next_dtable_ref446 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr445, i32 0, i32 2
  br i1 %129, label %dtable_found447, label %dtable_check443

dtable_found447:                                  ; preds = %dtable_check443
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", ptr %dtable_ref444, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", i32 0, i32 2), align 8
  br label %dtable_skip448

dtable_skip448:                                   ; preds = %dtable_found447, %dtable_skip441
  %next_val449 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", i32 0, i32 2), align 8
  %130 = icmp eq ptr %next_val449, inttoptr (i64 -1 to ptr)
  br i1 %130, label %dtable_check450, label %dtable_skip455

dtable_check450:                                  ; preds = %dtable_check450, %dtable_skip448
  %dtable_ref451 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip448 ], [ %next_dtable_ref453, %dtable_check450 ]
  %dtable_ptr452 = load ptr, ptr %dtable_ref451, align 8
  %131 = icmp eq ptr %dtable_ptr452, null
  %next_dtable_ref453 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr452, i32 0, i32 2
  br i1 %131, label %dtable_found454, label %dtable_check450

dtable_found454:                                  ; preds = %dtable_check450
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", ptr %dtable_ref451, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip455

dtable_skip455:                                   ; preds = %dtable_found454, %dtable_skip448
  %next_val456 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", i32 0, i32 2), align 8
  %132 = icmp eq ptr %next_val456, inttoptr (i64 -1 to ptr)
  br i1 %132, label %dtable_check457, label %dtable_skip462

dtable_check457:                                  ; preds = %dtable_check457, %dtable_skip455
  %dtable_ref458 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip455 ], [ %next_dtable_ref460, %dtable_check457 ]
  %dtable_ptr459 = load ptr, ptr %dtable_ref458, align 8
  %133 = icmp eq ptr %dtable_ptr459, null
  %next_dtable_ref460 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr459, i32 0, i32 2
  br i1 %133, label %dtable_found461, label %dtable_check457

dtable_found461:                                  ; preds = %dtable_check457
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", ptr %dtable_ref458, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip462

dtable_skip462:                                   ; preds = %dtable_found461, %dtable_skip455
  %next_val463 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", i32 0, i32 2), align 8
  %134 = icmp eq ptr %next_val463, inttoptr (i64 -1 to ptr)
  br i1 %134, label %dtable_check464, label %dtable_skip469

dtable_check464:                                  ; preds = %dtable_check464, %dtable_skip462
  %dtable_ref465 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip462 ], [ %next_dtable_ref467, %dtable_check464 ]
  %dtable_ptr466 = load ptr, ptr %dtable_ref465, align 8
  %135 = icmp eq ptr %dtable_ptr466, null
  %next_dtable_ref467 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr466, i32 0, i32 2
  br i1 %135, label %dtable_found468, label %dtable_check464

dtable_found468:                                  ; preds = %dtable_check464
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", ptr %dtable_ref465, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", i32 0, i32 2), align 8
  br label %dtable_skip469

dtable_skip469:                                   ; preds = %dtable_found468, %dtable_skip462
  %next_val470 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", i32 0, i32 2), align 8
  %136 = icmp eq ptr %next_val470, inttoptr (i64 -1 to ptr)
  br i1 %136, label %dtable_check471, label %dtable_skip476

dtable_check471:                                  ; preds = %dtable_check471, %dtable_skip469
  %dtable_ref472 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip469 ], [ %next_dtable_ref474, %dtable_check471 ]
  %dtable_ptr473 = load ptr, ptr %dtable_ref472, align 8
  %137 = icmp eq ptr %dtable_ptr473, null
  %next_dtable_ref474 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr473, i32 0, i32 2
  br i1 %137, label %dtable_found475, label %dtable_check471

dtable_found475:                                  ; preds = %dtable_check471
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", ptr %dtable_ref472, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", i32 0, i32 2), align 8
  br label %dtable_skip476

dtable_skip476:                                   ; preds = %dtable_found475, %dtable_skip469
  %next_val477 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", i32 0, i32 2), align 8
  %138 = icmp eq ptr %next_val477, inttoptr (i64 -1 to ptr)
  br i1 %138, label %dtable_check478, label %dtable_skip483

dtable_check478:                                  ; preds = %dtable_check478, %dtable_skip476
  %dtable_ref479 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip476 ], [ %next_dtable_ref481, %dtable_check478 ]
  %dtable_ptr480 = load ptr, ptr %dtable_ref479, align 8
  %139 = icmp eq ptr %dtable_ptr480, null
  %next_dtable_ref481 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr480, i32 0, i32 2
  br i1 %139, label %dtable_found482, label %dtable_check478

dtable_found482:                                  ; preds = %dtable_check478
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", ptr %dtable_ref479, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip483

dtable_skip483:                                   ; preds = %dtable_found482, %dtable_skip476
  %next_val484 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", i32 0, i32 2), align 8
  %140 = icmp eq ptr %next_val484, inttoptr (i64 -1 to ptr)
  br i1 %140, label %dtable_check485, label %dtable_skip490

dtable_check485:                                  ; preds = %dtable_check485, %dtable_skip483
  %dtable_ref486 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip483 ], [ %next_dtable_ref488, %dtable_check485 ]
  %dtable_ptr487 = load ptr, ptr %dtable_ref486, align 8
  %141 = icmp eq ptr %dtable_ptr487, null
  %next_dtable_ref488 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr487, i32 0, i32 2
  br i1 %141, label %dtable_found489, label %dtable_check485

dtable_found489:                                  ; preds = %dtable_check485
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", ptr %dtable_ref486, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip490

dtable_skip490:                                   ; preds = %dtable_found489, %dtable_skip483
  %next_val491 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", i32 0, i32 2), align 8
  %142 = icmp eq ptr %next_val491, inttoptr (i64 -1 to ptr)
  br i1 %142, label %dtable_check492, label %dtable_skip497

dtable_check492:                                  ; preds = %dtable_check492, %dtable_skip490
  %dtable_ref493 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip490 ], [ %next_dtable_ref495, %dtable_check492 ]
  %dtable_ptr494 = load ptr, ptr %dtable_ref493, align 8
  %143 = icmp eq ptr %dtable_ptr494, null
  %next_dtable_ref495 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr494, i32 0, i32 2
  br i1 %143, label %dtable_found496, label %dtable_check492

dtable_found496:                                  ; preds = %dtable_check492
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", ptr %dtable_ref493, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip497

dtable_skip497:                                   ; preds = %dtable_found496, %dtable_skip490
  %next_val498 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", i32 0, i32 2), align 8
  %144 = icmp eq ptr %next_val498, inttoptr (i64 -1 to ptr)
  br i1 %144, label %dtable_check499, label %dtable_skip504

dtable_check499:                                  ; preds = %dtable_check499, %dtable_skip497
  %dtable_ref500 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip497 ], [ %next_dtable_ref502, %dtable_check499 ]
  %dtable_ptr501 = load ptr, ptr %dtable_ref500, align 8
  %145 = icmp eq ptr %dtable_ptr501, null
  %next_dtable_ref502 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr501, i32 0, i32 2
  br i1 %145, label %dtable_found503, label %dtable_check499

dtable_found503:                                  ; preds = %dtable_check499
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", ptr %dtable_ref500, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip504

dtable_skip504:                                   ; preds = %dtable_found503, %dtable_skip497
  %next_val505 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", i32 0, i32 2), align 8
  %146 = icmp eq ptr %next_val505, inttoptr (i64 -1 to ptr)
  br i1 %146, label %dtable_check506, label %dtable_skip511

dtable_check506:                                  ; preds = %dtable_check506, %dtable_skip504
  %dtable_ref507 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip504 ], [ %next_dtable_ref509, %dtable_check506 ]
  %dtable_ptr508 = load ptr, ptr %dtable_ref507, align 8
  %147 = icmp eq ptr %dtable_ptr508, null
  %next_dtable_ref509 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr508, i32 0, i32 2
  br i1 %147, label %dtable_found510, label %dtable_check506

dtable_found510:                                  ; preds = %dtable_check506
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", ptr %dtable_ref507, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip511

dtable_skip511:                                   ; preds = %dtable_found510, %dtable_skip504
  %next_val512 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", i32 0, i32 2), align 8
  %148 = icmp eq ptr %next_val512, inttoptr (i64 -1 to ptr)
  br i1 %148, label %dtable_check513, label %dtable_skip518

dtable_check513:                                  ; preds = %dtable_check513, %dtable_skip511
  %dtable_ref514 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip511 ], [ %next_dtable_ref516, %dtable_check513 ]
  %dtable_ptr515 = load ptr, ptr %dtable_ref514, align 8
  %149 = icmp eq ptr %dtable_ptr515, null
  %next_dtable_ref516 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr515, i32 0, i32 2
  br i1 %149, label %dtable_found517, label %dtable_check513

dtable_found517:                                  ; preds = %dtable_check513
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", ptr %dtable_ref514, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip518

dtable_skip518:                                   ; preds = %dtable_found517, %dtable_skip511
  %next_val519 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", i32 0, i32 2), align 8
  %150 = icmp eq ptr %next_val519, inttoptr (i64 -1 to ptr)
  br i1 %150, label %dtable_check520, label %dtable_skip525

dtable_check520:                                  ; preds = %dtable_check520, %dtable_skip518
  %dtable_ref521 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip518 ], [ %next_dtable_ref523, %dtable_check520 ]
  %dtable_ptr522 = load ptr, ptr %dtable_ref521, align 8
  %151 = icmp eq ptr %dtable_ptr522, null
  %next_dtable_ref523 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr522, i32 0, i32 2
  br i1 %151, label %dtable_found524, label %dtable_check520

dtable_found524:                                  ; preds = %dtable_check520
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", ptr %dtable_ref521, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip525

dtable_skip525:                                   ; preds = %dtable_found524, %dtable_skip518
  %next_val526 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", i32 0, i32 2), align 8
  %152 = icmp eq ptr %next_val526, inttoptr (i64 -1 to ptr)
  br i1 %152, label %dtable_check527, label %dtable_skip532

dtable_check527:                                  ; preds = %dtable_check527, %dtable_skip525
  %dtable_ref528 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip525 ], [ %next_dtable_ref530, %dtable_check527 ]
  %dtable_ptr529 = load ptr, ptr %dtable_ref528, align 8
  %153 = icmp eq ptr %dtable_ptr529, null
  %next_dtable_ref530 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr529, i32 0, i32 2
  br i1 %153, label %dtable_found531, label %dtable_check527

dtable_found531:                                  ; preds = %dtable_check527
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", ptr %dtable_ref528, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip532

dtable_skip532:                                   ; preds = %dtable_found531, %dtable_skip525
  %next_val533 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", i32 0, i32 2), align 8
  %154 = icmp eq ptr %next_val533, inttoptr (i64 -1 to ptr)
  br i1 %154, label %dtable_check534, label %dtable_skip539

dtable_check534:                                  ; preds = %dtable_check534, %dtable_skip532
  %dtable_ref535 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip532 ], [ %next_dtable_ref537, %dtable_check534 ]
  %dtable_ptr536 = load ptr, ptr %dtable_ref535, align 8
  %155 = icmp eq ptr %dtable_ptr536, null
  %next_dtable_ref537 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr536, i32 0, i32 2
  br i1 %155, label %dtable_found538, label %dtable_check534

dtable_found538:                                  ; preds = %dtable_check534
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", ptr %dtable_ref535, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip539

dtable_skip539:                                   ; preds = %dtable_found538, %dtable_skip532
  %next_val540 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", i32 0, i32 2), align 8
  %156 = icmp eq ptr %next_val540, inttoptr (i64 -1 to ptr)
  br i1 %156, label %dtable_check541, label %dtable_skip546

dtable_check541:                                  ; preds = %dtable_check541, %dtable_skip539
  %dtable_ref542 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip539 ], [ %next_dtable_ref544, %dtable_check541 ]
  %dtable_ptr543 = load ptr, ptr %dtable_ref542, align 8
  %157 = icmp eq ptr %dtable_ptr543, null
  %next_dtable_ref544 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr543, i32 0, i32 2
  br i1 %157, label %dtable_found545, label %dtable_check541

dtable_found545:                                  ; preds = %dtable_check541
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", ptr %dtable_ref542, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip546

dtable_skip546:                                   ; preds = %dtable_found545, %dtable_skip539
  %next_val547 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", i32 0, i32 2), align 8
  %158 = icmp eq ptr %next_val547, inttoptr (i64 -1 to ptr)
  br i1 %158, label %dtable_check548, label %dtable_skip553

dtable_check548:                                  ; preds = %dtable_check548, %dtable_skip546
  %dtable_ref549 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip546 ], [ %next_dtable_ref551, %dtable_check548 ]
  %dtable_ptr550 = load ptr, ptr %dtable_ref549, align 8
  %159 = icmp eq ptr %dtable_ptr550, null
  %next_dtable_ref551 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr550, i32 0, i32 2
  br i1 %159, label %dtable_found552, label %dtable_check548

dtable_found552:                                  ; preds = %dtable_check548
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", ptr %dtable_ref549, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip553

dtable_skip553:                                   ; preds = %dtable_found552, %dtable_skip546
  %next_val554 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", i32 0, i32 2), align 8
  %160 = icmp eq ptr %next_val554, inttoptr (i64 -1 to ptr)
  br i1 %160, label %dtable_check555, label %dtable_skip560

dtable_check555:                                  ; preds = %dtable_check555, %dtable_skip553
  %dtable_ref556 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip553 ], [ %next_dtable_ref558, %dtable_check555 ]
  %dtable_ptr557 = load ptr, ptr %dtable_ref556, align 8
  %161 = icmp eq ptr %dtable_ptr557, null
  %next_dtable_ref558 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr557, i32 0, i32 2
  br i1 %161, label %dtable_found559, label %dtable_check555

dtable_found559:                                  ; preds = %dtable_check555
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", ptr %dtable_ref556, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip560

dtable_skip560:                                   ; preds = %dtable_found559, %dtable_skip553
  %next_val561 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", i32 0, i32 2), align 8
  %162 = icmp eq ptr %next_val561, inttoptr (i64 -1 to ptr)
  br i1 %162, label %dtable_check562, label %dtable_skip567

dtable_check562:                                  ; preds = %dtable_check562, %dtable_skip560
  %dtable_ref563 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip560 ], [ %next_dtable_ref565, %dtable_check562 ]
  %dtable_ptr564 = load ptr, ptr %dtable_ref563, align 8
  %163 = icmp eq ptr %dtable_ptr564, null
  %next_dtable_ref565 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr564, i32 0, i32 2
  br i1 %163, label %dtable_found566, label %dtable_check562

dtable_found566:                                  ; preds = %dtable_check562
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", ptr %dtable_ref563, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip567

dtable_skip567:                                   ; preds = %dtable_found566, %dtable_skip560
  %next_val568 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", i32 0, i32 2), align 8
  %164 = icmp eq ptr %next_val568, inttoptr (i64 -1 to ptr)
  br i1 %164, label %dtable_check569, label %dtable_skip574

dtable_check569:                                  ; preds = %dtable_check569, %dtable_skip567
  %dtable_ref570 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip567 ], [ %next_dtable_ref572, %dtable_check569 ]
  %dtable_ptr571 = load ptr, ptr %dtable_ref570, align 8
  %165 = icmp eq ptr %dtable_ptr571, null
  %next_dtable_ref572 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr571, i32 0, i32 2
  br i1 %165, label %dtable_found573, label %dtable_check569

dtable_found573:                                  ; preds = %dtable_check569
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", ptr %dtable_ref570, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip574

dtable_skip574:                                   ; preds = %dtable_found573, %dtable_skip567
  %next_val575 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", i32 0, i32 2), align 8
  %166 = icmp eq ptr %next_val575, inttoptr (i64 -1 to ptr)
  br i1 %166, label %dtable_check576, label %dtable_skip581

dtable_check576:                                  ; preds = %dtable_check576, %dtable_skip574
  %dtable_ref577 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip574 ], [ %next_dtable_ref579, %dtable_check576 ]
  %dtable_ptr578 = load ptr, ptr %dtable_ref577, align 8
  %167 = icmp eq ptr %dtable_ptr578, null
  %next_dtable_ref579 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr578, i32 0, i32 2
  br i1 %167, label %dtable_found580, label %dtable_check576

dtable_found580:                                  ; preds = %dtable_check576
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", ptr %dtable_ref577, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip581

dtable_skip581:                                   ; preds = %dtable_found580, %dtable_skip574
  %next_val582 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", i32 0, i32 2), align 8
  %168 = icmp eq ptr %next_val582, inttoptr (i64 -1 to ptr)
  br i1 %168, label %dtable_check583, label %dtable_skip588

dtable_check583:                                  ; preds = %dtable_check583, %dtable_skip581
  %dtable_ref584 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip581 ], [ %next_dtable_ref586, %dtable_check583 ]
  %dtable_ptr585 = load ptr, ptr %dtable_ref584, align 8
  %169 = icmp eq ptr %dtable_ptr585, null
  %next_dtable_ref586 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr585, i32 0, i32 2
  br i1 %169, label %dtable_found587, label %dtable_check583

dtable_found587:                                  ; preds = %dtable_check583
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", ptr %dtable_ref584, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip588

dtable_skip588:                                   ; preds = %dtable_found587, %dtable_skip581
  %next_val589 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", i32 0, i32 2), align 8
  %170 = icmp eq ptr %next_val589, inttoptr (i64 -1 to ptr)
  br i1 %170, label %dtable_check590, label %dtable_skip595

dtable_check590:                                  ; preds = %dtable_check590, %dtable_skip588
  %dtable_ref591 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip588 ], [ %next_dtable_ref593, %dtable_check590 ]
  %dtable_ptr592 = load ptr, ptr %dtable_ref591, align 8
  %171 = icmp eq ptr %dtable_ptr592, null
  %next_dtable_ref593 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr592, i32 0, i32 2
  br i1 %171, label %dtable_found594, label %dtable_check590

dtable_found594:                                  ; preds = %dtable_check590
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", ptr %dtable_ref591, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip595

dtable_skip595:                                   ; preds = %dtable_found594, %dtable_skip588
  %next_val596 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", i32 0, i32 2), align 8
  %172 = icmp eq ptr %next_val596, inttoptr (i64 -1 to ptr)
  br i1 %172, label %dtable_check597, label %dtable_skip602

dtable_check597:                                  ; preds = %dtable_check597, %dtable_skip595
  %dtable_ref598 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip595 ], [ %next_dtable_ref600, %dtable_check597 ]
  %dtable_ptr599 = load ptr, ptr %dtable_ref598, align 8
  %173 = icmp eq ptr %dtable_ptr599, null
  %next_dtable_ref600 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr599, i32 0, i32 2
  br i1 %173, label %dtable_found601, label %dtable_check597

dtable_found601:                                  ; preds = %dtable_check597
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", ptr %dtable_ref598, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip602

dtable_skip602:                                   ; preds = %dtable_found601, %dtable_skip595
  %next_val603 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", i32 0, i32 2), align 8
  %174 = icmp eq ptr %next_val603, inttoptr (i64 -1 to ptr)
  br i1 %174, label %dtable_check604, label %dtable_skip609

dtable_check604:                                  ; preds = %dtable_check604, %dtable_skip602
  %dtable_ref605 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip602 ], [ %next_dtable_ref607, %dtable_check604 ]
  %dtable_ptr606 = load ptr, ptr %dtable_ref605, align 8
  %175 = icmp eq ptr %dtable_ptr606, null
  %next_dtable_ref607 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr606, i32 0, i32 2
  br i1 %175, label %dtable_found608, label %dtable_check604

dtable_found608:                                  ; preds = %dtable_check604
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", ptr %dtable_ref605, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip609

dtable_skip609:                                   ; preds = %dtable_found608, %dtable_skip602
  %next_val610 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", i32 0, i32 2), align 8
  %176 = icmp eq ptr %next_val610, inttoptr (i64 -1 to ptr)
  br i1 %176, label %dtable_check611, label %dtable_skip616

dtable_check611:                                  ; preds = %dtable_check611, %dtable_skip609
  %dtable_ref612 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip609 ], [ %next_dtable_ref614, %dtable_check611 ]
  %dtable_ptr613 = load ptr, ptr %dtable_ref612, align 8
  %177 = icmp eq ptr %dtable_ptr613, null
  %next_dtable_ref614 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr613, i32 0, i32 2
  br i1 %177, label %dtable_found615, label %dtable_check611

dtable_found615:                                  ; preds = %dtable_check611
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", ptr %dtable_ref612, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip616

dtable_skip616:                                   ; preds = %dtable_found615, %dtable_skip609
  %next_val617 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", i32 0, i32 2), align 8
  %178 = icmp eq ptr %next_val617, inttoptr (i64 -1 to ptr)
  br i1 %178, label %dtable_check618, label %dtable_skip623

dtable_check618:                                  ; preds = %dtable_check618, %dtable_skip616
  %dtable_ref619 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip616 ], [ %next_dtable_ref621, %dtable_check618 ]
  %dtable_ptr620 = load ptr, ptr %dtable_ref619, align 8
  %179 = icmp eq ptr %dtable_ptr620, null
  %next_dtable_ref621 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr620, i32 0, i32 2
  br i1 %179, label %dtable_found622, label %dtable_check618

dtable_found622:                                  ; preds = %dtable_check618
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", ptr %dtable_ref619, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip623

dtable_skip623:                                   ; preds = %dtable_found622, %dtable_skip616
  %next_val624 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", i32 0, i32 2), align 8
  %180 = icmp eq ptr %next_val624, inttoptr (i64 -1 to ptr)
  br i1 %180, label %dtable_check625, label %dtable_skip630

dtable_check625:                                  ; preds = %dtable_check625, %dtable_skip623
  %dtable_ref626 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip623 ], [ %next_dtable_ref628, %dtable_check625 ]
  %dtable_ptr627 = load ptr, ptr %dtable_ref626, align 8
  %181 = icmp eq ptr %dtable_ptr627, null
  %next_dtable_ref628 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr627, i32 0, i32 2
  br i1 %181, label %dtable_found629, label %dtable_check625

dtable_found629:                                  ; preds = %dtable_check625
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", ptr %dtable_ref626, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip630

dtable_skip630:                                   ; preds = %dtable_found629, %dtable_skip623
  %next_val631 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", i32 0, i32 2), align 8
  %182 = icmp eq ptr %next_val631, inttoptr (i64 -1 to ptr)
  br i1 %182, label %dtable_check632, label %dtable_skip637

dtable_check632:                                  ; preds = %dtable_check632, %dtable_skip630
  %dtable_ref633 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip630 ], [ %next_dtable_ref635, %dtable_check632 ]
  %dtable_ptr634 = load ptr, ptr %dtable_ref633, align 8
  %183 = icmp eq ptr %dtable_ptr634, null
  %next_dtable_ref635 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr634, i32 0, i32 2
  br i1 %183, label %dtable_found636, label %dtable_check632

dtable_found636:                                  ; preds = %dtable_check632
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", ptr %dtable_ref633, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip637

dtable_skip637:                                   ; preds = %dtable_found636, %dtable_skip630
  %next_val638 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", i32 0, i32 2), align 8
  %184 = icmp eq ptr %next_val638, inttoptr (i64 -1 to ptr)
  br i1 %184, label %dtable_check639, label %dtable_skip644

dtable_check639:                                  ; preds = %dtable_check639, %dtable_skip637
  %dtable_ref640 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip637 ], [ %next_dtable_ref642, %dtable_check639 ]
  %dtable_ptr641 = load ptr, ptr %dtable_ref640, align 8
  %185 = icmp eq ptr %dtable_ptr641, null
  %next_dtable_ref642 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr641, i32 0, i32 2
  br i1 %185, label %dtable_found643, label %dtable_check639

dtable_found643:                                  ; preds = %dtable_check639
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", ptr %dtable_ref640, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip644

dtable_skip644:                                   ; preds = %dtable_found643, %dtable_skip637
  %next_val645 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", i32 0, i32 2), align 8
  %186 = icmp eq ptr %next_val645, inttoptr (i64 -1 to ptr)
  br i1 %186, label %dtable_check646, label %dtable_skip651

dtable_check646:                                  ; preds = %dtable_check646, %dtable_skip644
  %dtable_ref647 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip644 ], [ %next_dtable_ref649, %dtable_check646 ]
  %dtable_ptr648 = load ptr, ptr %dtable_ref647, align 8
  %187 = icmp eq ptr %dtable_ptr648, null
  %next_dtable_ref649 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr648, i32 0, i32 2
  br i1 %187, label %dtable_found650, label %dtable_check646

dtable_found650:                                  ; preds = %dtable_check646
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", ptr %dtable_ref647, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip651

dtable_skip651:                                   ; preds = %dtable_found650, %dtable_skip644
  %next_val652 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", i32 0, i32 2), align 8
  %188 = icmp eq ptr %next_val652, inttoptr (i64 -1 to ptr)
  br i1 %188, label %dtable_check653, label %dtable_skip658

dtable_check653:                                  ; preds = %dtable_check653, %dtable_skip651
  %dtable_ref654 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip651 ], [ %next_dtable_ref656, %dtable_check653 ]
  %dtable_ptr655 = load ptr, ptr %dtable_ref654, align 8
  %189 = icmp eq ptr %dtable_ptr655, null
  %next_dtable_ref656 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr655, i32 0, i32 2
  br i1 %189, label %dtable_found657, label %dtable_check653

dtable_found657:                                  ; preds = %dtable_check653
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", ptr %dtable_ref654, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip658

dtable_skip658:                                   ; preds = %dtable_found657, %dtable_skip651
  %next_val659 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", i32 0, i32 2), align 8
  %190 = icmp eq ptr %next_val659, inttoptr (i64 -1 to ptr)
  br i1 %190, label %dtable_check660, label %dtable_skip665

dtable_check660:                                  ; preds = %dtable_check660, %dtable_skip658
  %dtable_ref661 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip658 ], [ %next_dtable_ref663, %dtable_check660 ]
  %dtable_ptr662 = load ptr, ptr %dtable_ref661, align 8
  %191 = icmp eq ptr %dtable_ptr662, null
  %next_dtable_ref663 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr662, i32 0, i32 2
  br i1 %191, label %dtable_found664, label %dtable_check660

dtable_found664:                                  ; preds = %dtable_check660
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", ptr %dtable_ref661, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip665

dtable_skip665:                                   ; preds = %dtable_found664, %dtable_skip658
  %next_val666 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", i32 0, i32 2), align 8
  %192 = icmp eq ptr %next_val666, inttoptr (i64 -1 to ptr)
  br i1 %192, label %dtable_check667, label %dtable_skip672

dtable_check667:                                  ; preds = %dtable_check667, %dtable_skip665
  %dtable_ref668 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip665 ], [ %next_dtable_ref670, %dtable_check667 ]
  %dtable_ptr669 = load ptr, ptr %dtable_ref668, align 8
  %193 = icmp eq ptr %dtable_ptr669, null
  %next_dtable_ref670 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr669, i32 0, i32 2
  br i1 %193, label %dtable_found671, label %dtable_check667

dtable_found671:                                  ; preds = %dtable_check667
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", ptr %dtable_ref668, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip672

dtable_skip672:                                   ; preds = %dtable_found671, %dtable_skip665
  %next_val673 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", i32 0, i32 2), align 8
  %194 = icmp eq ptr %next_val673, inttoptr (i64 -1 to ptr)
  br i1 %194, label %dtable_check674, label %dtable_skip679

dtable_check674:                                  ; preds = %dtable_check674, %dtable_skip672
  %dtable_ref675 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip672 ], [ %next_dtable_ref677, %dtable_check674 ]
  %dtable_ptr676 = load ptr, ptr %dtable_ref675, align 8
  %195 = icmp eq ptr %dtable_ptr676, null
  %next_dtable_ref677 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr676, i32 0, i32 2
  br i1 %195, label %dtable_found678, label %dtable_check674

dtable_found678:                                  ; preds = %dtable_check674
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", ptr %dtable_ref675, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip679

dtable_skip679:                                   ; preds = %dtable_found678, %dtable_skip672
  %next_val680 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", i32 0, i32 2), align 8
  %196 = icmp eq ptr %next_val680, inttoptr (i64 -1 to ptr)
  br i1 %196, label %dtable_check681, label %dtable_skip686

dtable_check681:                                  ; preds = %dtable_check681, %dtable_skip679
  %dtable_ref682 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip679 ], [ %next_dtable_ref684, %dtable_check681 ]
  %dtable_ptr683 = load ptr, ptr %dtable_ref682, align 8
  %197 = icmp eq ptr %dtable_ptr683, null
  %next_dtable_ref684 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr683, i32 0, i32 2
  br i1 %197, label %dtable_found685, label %dtable_check681

dtable_found685:                                  ; preds = %dtable_check681
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", ptr %dtable_ref682, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip686

dtable_skip686:                                   ; preds = %dtable_found685, %dtable_skip679
  %next_val687 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", i32 0, i32 2), align 8
  %198 = icmp eq ptr %next_val687, inttoptr (i64 -1 to ptr)
  br i1 %198, label %dtable_check688, label %dtable_skip693

dtable_check688:                                  ; preds = %dtable_check688, %dtable_skip686
  %dtable_ref689 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip686 ], [ %next_dtable_ref691, %dtable_check688 ]
  %dtable_ptr690 = load ptr, ptr %dtable_ref689, align 8
  %199 = icmp eq ptr %dtable_ptr690, null
  %next_dtable_ref691 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr690, i32 0, i32 2
  br i1 %199, label %dtable_found692, label %dtable_check688

dtable_found692:                                  ; preds = %dtable_check688
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", ptr %dtable_ref689, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip693

dtable_skip693:                                   ; preds = %dtable_found692, %dtable_skip686
  %next_val694 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", i32 0, i32 2), align 8
  %200 = icmp eq ptr %next_val694, inttoptr (i64 -1 to ptr)
  br i1 %200, label %dtable_check695, label %dtable_skip700

dtable_check695:                                  ; preds = %dtable_check695, %dtable_skip693
  %dtable_ref696 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip693 ], [ %next_dtable_ref698, %dtable_check695 ]
  %dtable_ptr697 = load ptr, ptr %dtable_ref696, align 8
  %201 = icmp eq ptr %dtable_ptr697, null
  %next_dtable_ref698 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr697, i32 0, i32 2
  br i1 %201, label %dtable_found699, label %dtable_check695

dtable_found699:                                  ; preds = %dtable_check695
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", ptr %dtable_ref696, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip700

dtable_skip700:                                   ; preds = %dtable_found699, %dtable_skip693
  %next_val701 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", i32 0, i32 2), align 8
  %202 = icmp eq ptr %next_val701, inttoptr (i64 -1 to ptr)
  br i1 %202, label %dtable_check702, label %dtable_skip707

dtable_check702:                                  ; preds = %dtable_check702, %dtable_skip700
  %dtable_ref703 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip700 ], [ %next_dtable_ref705, %dtable_check702 ]
  %dtable_ptr704 = load ptr, ptr %dtable_ref703, align 8
  %203 = icmp eq ptr %dtable_ptr704, null
  %next_dtable_ref705 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr704, i32 0, i32 2
  br i1 %203, label %dtable_found706, label %dtable_check702

dtable_found706:                                  ; preds = %dtable_check702
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", ptr %dtable_ref703, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip707

dtable_skip707:                                   ; preds = %dtable_found706, %dtable_skip700
  %next_val708 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", i32 0, i32 2), align 8
  %204 = icmp eq ptr %next_val708, inttoptr (i64 -1 to ptr)
  br i1 %204, label %dtable_check709, label %dtable_skip714

dtable_check709:                                  ; preds = %dtable_check709, %dtable_skip707
  %dtable_ref710 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip707 ], [ %next_dtable_ref712, %dtable_check709 ]
  %dtable_ptr711 = load ptr, ptr %dtable_ref710, align 8
  %205 = icmp eq ptr %dtable_ptr711, null
  %next_dtable_ref712 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr711, i32 0, i32 2
  br i1 %205, label %dtable_found713, label %dtable_check709

dtable_found713:                                  ; preds = %dtable_check709
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", ptr %dtable_ref710, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip714

dtable_skip714:                                   ; preds = %dtable_found713, %dtable_skip707
  %next_val715 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", i32 0, i32 2), align 8
  %206 = icmp eq ptr %next_val715, inttoptr (i64 -1 to ptr)
  br i1 %206, label %dtable_check716, label %dtable_skip721

dtable_check716:                                  ; preds = %dtable_check716, %dtable_skip714
  %dtable_ref717 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip714 ], [ %next_dtable_ref719, %dtable_check716 ]
  %dtable_ptr718 = load ptr, ptr %dtable_ref717, align 8
  %207 = icmp eq ptr %dtable_ptr718, null
  %next_dtable_ref719 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr718, i32 0, i32 2
  br i1 %207, label %dtable_found720, label %dtable_check716

dtable_found720:                                  ; preds = %dtable_check716
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", ptr %dtable_ref717, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip721

dtable_skip721:                                   ; preds = %dtable_found720, %dtable_skip714
  %next_val722 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", i32 0, i32 2), align 8
  %208 = icmp eq ptr %next_val722, inttoptr (i64 -1 to ptr)
  br i1 %208, label %dtable_check723, label %dtable_skip728

dtable_check723:                                  ; preds = %dtable_check723, %dtable_skip721
  %dtable_ref724 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip721 ], [ %next_dtable_ref726, %dtable_check723 ]
  %dtable_ptr725 = load ptr, ptr %dtable_ref724, align 8
  %209 = icmp eq ptr %dtable_ptr725, null
  %next_dtable_ref726 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr725, i32 0, i32 2
  br i1 %209, label %dtable_found727, label %dtable_check723

dtable_found727:                                  ; preds = %dtable_check723
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", ptr %dtable_ref724, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip728

dtable_skip728:                                   ; preds = %dtable_found727, %dtable_skip721
  %next_val729 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", i32 0, i32 2), align 8
  %210 = icmp eq ptr %next_val729, inttoptr (i64 -1 to ptr)
  br i1 %210, label %dtable_check730, label %dtable_skip735

dtable_check730:                                  ; preds = %dtable_check730, %dtable_skip728
  %dtable_ref731 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip728 ], [ %next_dtable_ref733, %dtable_check730 ]
  %dtable_ptr732 = load ptr, ptr %dtable_ref731, align 8
  %211 = icmp eq ptr %dtable_ptr732, null
  %next_dtable_ref733 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr732, i32 0, i32 2
  br i1 %211, label %dtable_found734, label %dtable_check730

dtable_found734:                                  ; preds = %dtable_check730
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", ptr %dtable_ref731, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip735

dtable_skip735:                                   ; preds = %dtable_found734, %dtable_skip728
  %next_val736 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", i32 0, i32 2), align 8
  %212 = icmp eq ptr %next_val736, inttoptr (i64 -1 to ptr)
  br i1 %212, label %dtable_check737, label %dtable_skip742

dtable_check737:                                  ; preds = %dtable_check737, %dtable_skip735
  %dtable_ref738 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip735 ], [ %next_dtable_ref740, %dtable_check737 ]
  %dtable_ptr739 = load ptr, ptr %dtable_ref738, align 8
  %213 = icmp eq ptr %dtable_ptr739, null
  %next_dtable_ref740 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr739, i32 0, i32 2
  br i1 %213, label %dtable_found741, label %dtable_check737

dtable_found741:                                  ; preds = %dtable_check737
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", ptr %dtable_ref738, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip742

dtable_skip742:                                   ; preds = %dtable_found741, %dtable_skip735
  %next_val743 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", i32 0, i32 2), align 8
  %214 = icmp eq ptr %next_val743, inttoptr (i64 -1 to ptr)
  br i1 %214, label %dtable_check744, label %dtable_skip749

dtable_check744:                                  ; preds = %dtable_check744, %dtable_skip742
  %dtable_ref745 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip742 ], [ %next_dtable_ref747, %dtable_check744 ]
  %dtable_ptr746 = load ptr, ptr %dtable_ref745, align 8
  %215 = icmp eq ptr %dtable_ptr746, null
  %next_dtable_ref747 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr746, i32 0, i32 2
  br i1 %215, label %dtable_found748, label %dtable_check744

dtable_found748:                                  ; preds = %dtable_check744
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", ptr %dtable_ref745, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip749

dtable_skip749:                                   ; preds = %dtable_found748, %dtable_skip742
  %next_val750 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", i32 0, i32 2), align 8
  %216 = icmp eq ptr %next_val750, inttoptr (i64 -1 to ptr)
  br i1 %216, label %dtable_check751, label %dtable_skip756

dtable_check751:                                  ; preds = %dtable_check751, %dtable_skip749
  %dtable_ref752 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip749 ], [ %next_dtable_ref754, %dtable_check751 ]
  %dtable_ptr753 = load ptr, ptr %dtable_ref752, align 8
  %217 = icmp eq ptr %dtable_ptr753, null
  %next_dtable_ref754 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr753, i32 0, i32 2
  br i1 %217, label %dtable_found755, label %dtable_check751

dtable_found755:                                  ; preds = %dtable_check751
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", ptr %dtable_ref752, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip756

dtable_skip756:                                   ; preds = %dtable_found755, %dtable_skip749
  %next_val757 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", i32 0, i32 2), align 8
  %218 = icmp eq ptr %next_val757, inttoptr (i64 -1 to ptr)
  br i1 %218, label %dtable_check758, label %dtable_skip763

dtable_check758:                                  ; preds = %dtable_check758, %dtable_skip756
  %dtable_ref759 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip756 ], [ %next_dtable_ref761, %dtable_check758 ]
  %dtable_ptr760 = load ptr, ptr %dtable_ref759, align 8
  %219 = icmp eq ptr %dtable_ptr760, null
  %next_dtable_ref761 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr760, i32 0, i32 2
  br i1 %219, label %dtable_found762, label %dtable_check758

dtable_found762:                                  ; preds = %dtable_check758
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", ptr %dtable_ref759, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip763

dtable_skip763:                                   ; preds = %dtable_found762, %dtable_skip756
  %next_val764 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", i32 0, i32 2), align 8
  %220 = icmp eq ptr %next_val764, inttoptr (i64 -1 to ptr)
  br i1 %220, label %dtable_check765, label %dtable_skip770

dtable_check765:                                  ; preds = %dtable_check765, %dtable_skip763
  %dtable_ref766 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip763 ], [ %next_dtable_ref768, %dtable_check765 ]
  %dtable_ptr767 = load ptr, ptr %dtable_ref766, align 8
  %221 = icmp eq ptr %dtable_ptr767, null
  %next_dtable_ref768 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr767, i32 0, i32 2
  br i1 %221, label %dtable_found769, label %dtable_check765

dtable_found769:                                  ; preds = %dtable_check765
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", ptr %dtable_ref766, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip770

dtable_skip770:                                   ; preds = %dtable_found769, %dtable_skip763
  %next_val771 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", i32 0, i32 2), align 8
  %222 = icmp eq ptr %next_val771, inttoptr (i64 -1 to ptr)
  br i1 %222, label %dtable_check772, label %dtable_skip777

dtable_check772:                                  ; preds = %dtable_check772, %dtable_skip770
  %dtable_ref773 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip770 ], [ %next_dtable_ref775, %dtable_check772 ]
  %dtable_ptr774 = load ptr, ptr %dtable_ref773, align 8
  %223 = icmp eq ptr %dtable_ptr774, null
  %next_dtable_ref775 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr774, i32 0, i32 2
  br i1 %223, label %dtable_found776, label %dtable_check772

dtable_found776:                                  ; preds = %dtable_check772
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", ptr %dtable_ref773, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip777

dtable_skip777:                                   ; preds = %dtable_found776, %dtable_skip770
  %next_val778 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", i32 0, i32 2), align 8
  %224 = icmp eq ptr %next_val778, inttoptr (i64 -1 to ptr)
  br i1 %224, label %dtable_check779, label %dtable_skip784

dtable_check779:                                  ; preds = %dtable_check779, %dtable_skip777
  %dtable_ref780 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip777 ], [ %next_dtable_ref782, %dtable_check779 ]
  %dtable_ptr781 = load ptr, ptr %dtable_ref780, align 8
  %225 = icmp eq ptr %dtable_ptr781, null
  %next_dtable_ref782 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr781, i32 0, i32 2
  br i1 %225, label %dtable_found783, label %dtable_check779

dtable_found783:                                  ; preds = %dtable_check779
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", ptr %dtable_ref780, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip784

dtable_skip784:                                   ; preds = %dtable_found783, %dtable_skip777
  %next_val785 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", i32 0, i32 2), align 8
  %226 = icmp eq ptr %next_val785, inttoptr (i64 -1 to ptr)
  br i1 %226, label %dtable_check786, label %dtable_skip791

dtable_check786:                                  ; preds = %dtable_check786, %dtable_skip784
  %dtable_ref787 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip784 ], [ %next_dtable_ref789, %dtable_check786 ]
  %dtable_ptr788 = load ptr, ptr %dtable_ref787, align 8
  %227 = icmp eq ptr %dtable_ptr788, null
  %next_dtable_ref789 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr788, i32 0, i32 2
  br i1 %227, label %dtable_found790, label %dtable_check786

dtable_found790:                                  ; preds = %dtable_check786
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", ptr %dtable_ref787, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip791

dtable_skip791:                                   ; preds = %dtable_found790, %dtable_skip784
  %next_val792 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", i32 0, i32 2), align 8
  %228 = icmp eq ptr %next_val792, inttoptr (i64 -1 to ptr)
  br i1 %228, label %dtable_check793, label %dtable_skip798

dtable_check793:                                  ; preds = %dtable_check793, %dtable_skip791
  %dtable_ref794 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip791 ], [ %next_dtable_ref796, %dtable_check793 ]
  %dtable_ptr795 = load ptr, ptr %dtable_ref794, align 8
  %229 = icmp eq ptr %dtable_ptr795, null
  %next_dtable_ref796 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr795, i32 0, i32 2
  br i1 %229, label %dtable_found797, label %dtable_check793

dtable_found797:                                  ; preds = %dtable_check793
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", ptr %dtable_ref794, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip798

dtable_skip798:                                   ; preds = %dtable_found797, %dtable_skip791
  %next_val799 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", i32 0, i32 2), align 8
  %230 = icmp eq ptr %next_val799, inttoptr (i64 -1 to ptr)
  br i1 %230, label %dtable_check800, label %dtable_skip805

dtable_check800:                                  ; preds = %dtable_check800, %dtable_skip798
  %dtable_ref801 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip798 ], [ %next_dtable_ref803, %dtable_check800 ]
  %dtable_ptr802 = load ptr, ptr %dtable_ref801, align 8
  %231 = icmp eq ptr %dtable_ptr802, null
  %next_dtable_ref803 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr802, i32 0, i32 2
  br i1 %231, label %dtable_found804, label %dtable_check800

dtable_found804:                                  ; preds = %dtable_check800
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", ptr %dtable_ref801, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip805

dtable_skip805:                                   ; preds = %dtable_found804, %dtable_skip798
  %next_val806 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", i32 0, i32 2), align 8
  %232 = icmp eq ptr %next_val806, inttoptr (i64 -1 to ptr)
  br i1 %232, label %dtable_check807, label %dtable_skip812

dtable_check807:                                  ; preds = %dtable_check807, %dtable_skip805
  %dtable_ref808 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip805 ], [ %next_dtable_ref810, %dtable_check807 ]
  %dtable_ptr809 = load ptr, ptr %dtable_ref808, align 8
  %233 = icmp eq ptr %dtable_ptr809, null
  %next_dtable_ref810 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr809, i32 0, i32 2
  br i1 %233, label %dtable_found811, label %dtable_check807

dtable_found811:                                  ; preds = %dtable_check807
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", ptr %dtable_ref808, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip812

dtable_skip812:                                   ; preds = %dtable_found811, %dtable_skip805
  %next_val813 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", i32 0, i32 2), align 8
  %234 = icmp eq ptr %next_val813, inttoptr (i64 -1 to ptr)
  br i1 %234, label %dtable_check814, label %dtable_skip819

dtable_check814:                                  ; preds = %dtable_check814, %dtable_skip812
  %dtable_ref815 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip812 ], [ %next_dtable_ref817, %dtable_check814 ]
  %dtable_ptr816 = load ptr, ptr %dtable_ref815, align 8
  %235 = icmp eq ptr %dtable_ptr816, null
  %next_dtable_ref817 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr816, i32 0, i32 2
  br i1 %235, label %dtable_found818, label %dtable_check814

dtable_found818:                                  ; preds = %dtable_check814
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", ptr %dtable_ref815, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip819

dtable_skip819:                                   ; preds = %dtable_found818, %dtable_skip812
  %next_val820 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", i32 0, i32 2), align 8
  %236 = icmp eq ptr %next_val820, inttoptr (i64 -1 to ptr)
  br i1 %236, label %dtable_check821, label %dtable_skip826

dtable_check821:                                  ; preds = %dtable_check821, %dtable_skip819
  %dtable_ref822 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip819 ], [ %next_dtable_ref824, %dtable_check821 ]
  %dtable_ptr823 = load ptr, ptr %dtable_ref822, align 8
  %237 = icmp eq ptr %dtable_ptr823, null
  %next_dtable_ref824 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr823, i32 0, i32 2
  br i1 %237, label %dtable_found825, label %dtable_check821

dtable_found825:                                  ; preds = %dtable_check821
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", ptr %dtable_ref822, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip826

dtable_skip826:                                   ; preds = %dtable_found825, %dtable_skip819
  %next_val827 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", i32 0, i32 2), align 8
  %238 = icmp eq ptr %next_val827, inttoptr (i64 -1 to ptr)
  br i1 %238, label %dtable_check828, label %dtable_skip833

dtable_check828:                                  ; preds = %dtable_check828, %dtable_skip826
  %dtable_ref829 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip826 ], [ %next_dtable_ref831, %dtable_check828 ]
  %dtable_ptr830 = load ptr, ptr %dtable_ref829, align 8
  %239 = icmp eq ptr %dtable_ptr830, null
  %next_dtable_ref831 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr830, i32 0, i32 2
  br i1 %239, label %dtable_found832, label %dtable_check828

dtable_found832:                                  ; preds = %dtable_check828
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", ptr %dtable_ref829, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip833

dtable_skip833:                                   ; preds = %dtable_found832, %dtable_skip826
  %next_val834 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", i32 0, i32 2), align 8
  %240 = icmp eq ptr %next_val834, inttoptr (i64 -1 to ptr)
  br i1 %240, label %dtable_check835, label %dtable_skip840

dtable_check835:                                  ; preds = %dtable_check835, %dtable_skip833
  %dtable_ref836 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip833 ], [ %next_dtable_ref838, %dtable_check835 ]
  %dtable_ptr837 = load ptr, ptr %dtable_ref836, align 8
  %241 = icmp eq ptr %dtable_ptr837, null
  %next_dtable_ref838 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr837, i32 0, i32 2
  br i1 %241, label %dtable_found839, label %dtable_check835

dtable_found839:                                  ; preds = %dtable_check835
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", ptr %dtable_ref836, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip840

dtable_skip840:                                   ; preds = %dtable_found839, %dtable_skip833
  %next_val841 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", i32 0, i32 2), align 8
  %242 = icmp eq ptr %next_val841, inttoptr (i64 -1 to ptr)
  br i1 %242, label %dtable_check842, label %dtable_skip847

dtable_check842:                                  ; preds = %dtable_check842, %dtable_skip840
  %dtable_ref843 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip840 ], [ %next_dtable_ref845, %dtable_check842 ]
  %dtable_ptr844 = load ptr, ptr %dtable_ref843, align 8
  %243 = icmp eq ptr %dtable_ptr844, null
  %next_dtable_ref845 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr844, i32 0, i32 2
  br i1 %243, label %dtable_found846, label %dtable_check842

dtable_found846:                                  ; preds = %dtable_check842
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", ptr %dtable_ref843, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip847

dtable_skip847:                                   ; preds = %dtable_found846, %dtable_skip840
  %next_val848 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", i32 0, i32 2), align 8
  %244 = icmp eq ptr %next_val848, inttoptr (i64 -1 to ptr)
  br i1 %244, label %dtable_check849, label %dtable_skip854

dtable_check849:                                  ; preds = %dtable_check849, %dtable_skip847
  %dtable_ref850 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip847 ], [ %next_dtable_ref852, %dtable_check849 ]
  %dtable_ptr851 = load ptr, ptr %dtable_ref850, align 8
  %245 = icmp eq ptr %dtable_ptr851, null
  %next_dtable_ref852 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr851, i32 0, i32 2
  br i1 %245, label %dtable_found853, label %dtable_check849

dtable_found853:                                  ; preds = %dtable_check849
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", ptr %dtable_ref850, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip854

dtable_skip854:                                   ; preds = %dtable_found853, %dtable_skip847
  %next_val855 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", i32 0, i32 2), align 8
  %246 = icmp eq ptr %next_val855, inttoptr (i64 -1 to ptr)
  br i1 %246, label %dtable_check856, label %dtable_skip861

dtable_check856:                                  ; preds = %dtable_check856, %dtable_skip854
  %dtable_ref857 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip854 ], [ %next_dtable_ref859, %dtable_check856 ]
  %dtable_ptr858 = load ptr, ptr %dtable_ref857, align 8
  %247 = icmp eq ptr %dtable_ptr858, null
  %next_dtable_ref859 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr858, i32 0, i32 2
  br i1 %247, label %dtable_found860, label %dtable_check856

dtable_found860:                                  ; preds = %dtable_check856
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", ptr %dtable_ref857, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip861

dtable_skip861:                                   ; preds = %dtable_found860, %dtable_skip854
  %next_val862 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", i32 0, i32 2), align 8
  %248 = icmp eq ptr %next_val862, inttoptr (i64 -1 to ptr)
  br i1 %248, label %dtable_check863, label %dtable_skip868

dtable_check863:                                  ; preds = %dtable_check863, %dtable_skip861
  %dtable_ref864 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip861 ], [ %next_dtable_ref866, %dtable_check863 ]
  %dtable_ptr865 = load ptr, ptr %dtable_ref864, align 8
  %249 = icmp eq ptr %dtable_ptr865, null
  %next_dtable_ref866 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr865, i32 0, i32 2
  br i1 %249, label %dtable_found867, label %dtable_check863

dtable_found867:                                  ; preds = %dtable_check863
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", ptr %dtable_ref864, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip868

dtable_skip868:                                   ; preds = %dtable_found867, %dtable_skip861
  %next_val869 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", i32 0, i32 2), align 8
  %250 = icmp eq ptr %next_val869, inttoptr (i64 -1 to ptr)
  br i1 %250, label %dtable_check870, label %dtable_skip875

dtable_check870:                                  ; preds = %dtable_check870, %dtable_skip868
  %dtable_ref871 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip868 ], [ %next_dtable_ref873, %dtable_check870 ]
  %dtable_ptr872 = load ptr, ptr %dtable_ref871, align 8
  %251 = icmp eq ptr %dtable_ptr872, null
  %next_dtable_ref873 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr872, i32 0, i32 2
  br i1 %251, label %dtable_found874, label %dtable_check870

dtable_found874:                                  ; preds = %dtable_check870
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", ptr %dtable_ref871, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip875

dtable_skip875:                                   ; preds = %dtable_found874, %dtable_skip868
  %next_val876 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", i32 0, i32 2), align 8
  %252 = icmp eq ptr %next_val876, inttoptr (i64 -1 to ptr)
  br i1 %252, label %dtable_check877, label %dtable_skip882

dtable_check877:                                  ; preds = %dtable_check877, %dtable_skip875
  %dtable_ref878 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip875 ], [ %next_dtable_ref880, %dtable_check877 ]
  %dtable_ptr879 = load ptr, ptr %dtable_ref878, align 8
  %253 = icmp eq ptr %dtable_ptr879, null
  %next_dtable_ref880 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr879, i32 0, i32 2
  br i1 %253, label %dtable_found881, label %dtable_check877

dtable_found881:                                  ; preds = %dtable_check877
  store ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", ptr %dtable_ref878, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip882

dtable_skip882:                                   ; preds = %dtable_found881, %dtable_skip875
  %next_val883 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", i32 0, i32 2), align 8
  %254 = icmp eq ptr %next_val883, inttoptr (i64 -1 to ptr)
  br i1 %254, label %dtable_check884, label %dtable_skip889

dtable_check884:                                  ; preds = %dtable_check884, %dtable_skip882
  %dtable_ref885 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip882 ], [ %next_dtable_ref887, %dtable_check884 ]
  %dtable_ptr886 = load ptr, ptr %dtable_ref885, align 8
  %255 = icmp eq ptr %dtable_ptr886, null
  %next_dtable_ref887 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr886, i32 0, i32 2
  br i1 %255, label %dtable_found888, label %dtable_check884

dtable_found888:                                  ; preds = %dtable_check884
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", ptr %dtable_ref885, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip889

dtable_skip889:                                   ; preds = %dtable_found888, %dtable_skip882
  %next_val890 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", i32 0, i32 2), align 8
  %256 = icmp eq ptr %next_val890, inttoptr (i64 -1 to ptr)
  br i1 %256, label %dtable_check891, label %dtable_skip896

dtable_check891:                                  ; preds = %dtable_check891, %dtable_skip889
  %dtable_ref892 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip889 ], [ %next_dtable_ref894, %dtable_check891 ]
  %dtable_ptr893 = load ptr, ptr %dtable_ref892, align 8
  %257 = icmp eq ptr %dtable_ptr893, null
  %next_dtable_ref894 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr893, i32 0, i32 2
  br i1 %257, label %dtable_found895, label %dtable_check891

dtable_found895:                                  ; preds = %dtable_check891
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", ptr %dtable_ref892, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip896

dtable_skip896:                                   ; preds = %dtable_found895, %dtable_skip889
  %next_val897 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", i32 0, i32 2), align 8
  %258 = icmp eq ptr %next_val897, inttoptr (i64 -1 to ptr)
  br i1 %258, label %dtable_check898, label %dtable_skip903

dtable_check898:                                  ; preds = %dtable_check898, %dtable_skip896
  %dtable_ref899 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip896 ], [ %next_dtable_ref901, %dtable_check898 ]
  %dtable_ptr900 = load ptr, ptr %dtable_ref899, align 8
  %259 = icmp eq ptr %dtable_ptr900, null
  %next_dtable_ref901 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr900, i32 0, i32 2
  br i1 %259, label %dtable_found902, label %dtable_check898

dtable_found902:                                  ; preds = %dtable_check898
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", ptr %dtable_ref899, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip903

dtable_skip903:                                   ; preds = %dtable_found902, %dtable_skip896
  %next_val904 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", i32 0, i32 2), align 8
  %260 = icmp eq ptr %next_val904, inttoptr (i64 -1 to ptr)
  br i1 %260, label %dtable_check905, label %dtable_skip910

dtable_check905:                                  ; preds = %dtable_check905, %dtable_skip903
  %dtable_ref906 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip903 ], [ %next_dtable_ref908, %dtable_check905 ]
  %dtable_ptr907 = load ptr, ptr %dtable_ref906, align 8
  %261 = icmp eq ptr %dtable_ptr907, null
  %next_dtable_ref908 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr907, i32 0, i32 2
  br i1 %261, label %dtable_found909, label %dtable_check905

dtable_found909:                                  ; preds = %dtable_check905
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", ptr %dtable_ref906, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip910

dtable_skip910:                                   ; preds = %dtable_found909, %dtable_skip903
  %next_val911 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", i32 0, i32 2), align 8
  %262 = icmp eq ptr %next_val911, inttoptr (i64 -1 to ptr)
  br i1 %262, label %dtable_check912, label %dtable_skip917

dtable_check912:                                  ; preds = %dtable_check912, %dtable_skip910
  %dtable_ref913 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip910 ], [ %next_dtable_ref915, %dtable_check912 ]
  %dtable_ptr914 = load ptr, ptr %dtable_ref913, align 8
  %263 = icmp eq ptr %dtable_ptr914, null
  %next_dtable_ref915 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr914, i32 0, i32 2
  br i1 %263, label %dtable_found916, label %dtable_check912

dtable_found916:                                  ; preds = %dtable_check912
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", ptr %dtable_ref913, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip917

dtable_skip917:                                   ; preds = %dtable_found916, %dtable_skip910
  %next_val918 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", i32 0, i32 2), align 8
  %264 = icmp eq ptr %next_val918, inttoptr (i64 -1 to ptr)
  br i1 %264, label %dtable_check919, label %dtable_skip924

dtable_check919:                                  ; preds = %dtable_check919, %dtable_skip917
  %dtable_ref920 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip917 ], [ %next_dtable_ref922, %dtable_check919 ]
  %dtable_ptr921 = load ptr, ptr %dtable_ref920, align 8
  %265 = icmp eq ptr %dtable_ptr921, null
  %next_dtable_ref922 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr921, i32 0, i32 2
  br i1 %265, label %dtable_found923, label %dtable_check919

dtable_found923:                                  ; preds = %dtable_check919
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", ptr %dtable_ref920, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip924

dtable_skip924:                                   ; preds = %dtable_found923, %dtable_skip917
  %next_val925 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", i32 0, i32 2), align 8
  %266 = icmp eq ptr %next_val925, inttoptr (i64 -1 to ptr)
  br i1 %266, label %dtable_check926, label %dtable_skip931

dtable_check926:                                  ; preds = %dtable_check926, %dtable_skip924
  %dtable_ref927 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip924 ], [ %next_dtable_ref929, %dtable_check926 ]
  %dtable_ptr928 = load ptr, ptr %dtable_ref927, align 8
  %267 = icmp eq ptr %dtable_ptr928, null
  %next_dtable_ref929 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr928, i32 0, i32 2
  br i1 %267, label %dtable_found930, label %dtable_check926

dtable_found930:                                  ; preds = %dtable_check926
  store ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", ptr %dtable_ref927, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip931

dtable_skip931:                                   ; preds = %dtable_found930, %dtable_skip924
  %next_val932 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", i32 0, i32 2), align 8
  %268 = icmp eq ptr %next_val932, inttoptr (i64 -1 to ptr)
  br i1 %268, label %dtable_check933, label %dtable_skip938

dtable_check933:                                  ; preds = %dtable_check933, %dtable_skip931
  %dtable_ref934 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip931 ], [ %next_dtable_ref936, %dtable_check933 ]
  %dtable_ptr935 = load ptr, ptr %dtable_ref934, align 8
  %269 = icmp eq ptr %dtable_ptr935, null
  %next_dtable_ref936 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr935, i32 0, i32 2
  br i1 %269, label %dtable_found937, label %dtable_check933

dtable_found937:                                  ; preds = %dtable_check933
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", ptr %dtable_ref934, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip938

dtable_skip938:                                   ; preds = %dtable_found937, %dtable_skip931
  %next_val939 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", i32 0, i32 2), align 8
  %270 = icmp eq ptr %next_val939, inttoptr (i64 -1 to ptr)
  br i1 %270, label %dtable_check940, label %dtable_skip945

dtable_check940:                                  ; preds = %dtable_check940, %dtable_skip938
  %dtable_ref941 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip938 ], [ %next_dtable_ref943, %dtable_check940 ]
  %dtable_ptr942 = load ptr, ptr %dtable_ref941, align 8
  %271 = icmp eq ptr %dtable_ptr942, null
  %next_dtable_ref943 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr942, i32 0, i32 2
  br i1 %271, label %dtable_found944, label %dtable_check940

dtable_found944:                                  ; preds = %dtable_check940
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", ptr %dtable_ref941, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip945

dtable_skip945:                                   ; preds = %dtable_found944, %dtable_skip938
  %next_val946 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", i32 0, i32 2), align 8
  %272 = icmp eq ptr %next_val946, inttoptr (i64 -1 to ptr)
  br i1 %272, label %dtable_check947, label %dtable_skip952

dtable_check947:                                  ; preds = %dtable_check947, %dtable_skip945
  %dtable_ref948 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip945 ], [ %next_dtable_ref950, %dtable_check947 ]
  %dtable_ptr949 = load ptr, ptr %dtable_ref948, align 8
  %273 = icmp eq ptr %dtable_ptr949, null
  %next_dtable_ref950 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr949, i32 0, i32 2
  br i1 %273, label %dtable_found951, label %dtable_check947

dtable_found951:                                  ; preds = %dtable_check947
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", ptr %dtable_ref948, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip952

dtable_skip952:                                   ; preds = %dtable_found951, %dtable_skip945
  %next_val953 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", i32 0, i32 2), align 8
  %274 = icmp eq ptr %next_val953, inttoptr (i64 -1 to ptr)
  br i1 %274, label %dtable_check954, label %dtable_skip959

dtable_check954:                                  ; preds = %dtable_check954, %dtable_skip952
  %dtable_ref955 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip952 ], [ %next_dtable_ref957, %dtable_check954 ]
  %dtable_ptr956 = load ptr, ptr %dtable_ref955, align 8
  %275 = icmp eq ptr %dtable_ptr956, null
  %next_dtable_ref957 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr956, i32 0, i32 2
  br i1 %275, label %dtable_found958, label %dtable_check954

dtable_found958:                                  ; preds = %dtable_check954
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", ptr %dtable_ref955, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip959

dtable_skip959:                                   ; preds = %dtable_found958, %dtable_skip952
  %next_val960 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", i32 0, i32 2), align 8
  %276 = icmp eq ptr %next_val960, inttoptr (i64 -1 to ptr)
  br i1 %276, label %dtable_check961, label %dtable_skip966

dtable_check961:                                  ; preds = %dtable_check961, %dtable_skip959
  %dtable_ref962 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip959 ], [ %next_dtable_ref964, %dtable_check961 ]
  %dtable_ptr963 = load ptr, ptr %dtable_ref962, align 8
  %277 = icmp eq ptr %dtable_ptr963, null
  %next_dtable_ref964 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr963, i32 0, i32 2
  br i1 %277, label %dtable_found965, label %dtable_check961

dtable_found965:                                  ; preds = %dtable_check961
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", ptr %dtable_ref962, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip966

dtable_skip966:                                   ; preds = %dtable_found965, %dtable_skip959
  %next_val967 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", i32 0, i32 2), align 8
  %278 = icmp eq ptr %next_val967, inttoptr (i64 -1 to ptr)
  br i1 %278, label %dtable_check968, label %dtable_skip973

dtable_check968:                                  ; preds = %dtable_check968, %dtable_skip966
  %dtable_ref969 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip966 ], [ %next_dtable_ref971, %dtable_check968 ]
  %dtable_ptr970 = load ptr, ptr %dtable_ref969, align 8
  %279 = icmp eq ptr %dtable_ptr970, null
  %next_dtable_ref971 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr970, i32 0, i32 2
  br i1 %279, label %dtable_found972, label %dtable_check968

dtable_found972:                                  ; preds = %dtable_check968
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", ptr %dtable_ref969, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip973

dtable_skip973:                                   ; preds = %dtable_found972, %dtable_skip966
  %next_val974 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", i32 0, i32 2), align 8
  %280 = icmp eq ptr %next_val974, inttoptr (i64 -1 to ptr)
  br i1 %280, label %dtable_check975, label %dtable_skip980

dtable_check975:                                  ; preds = %dtable_check975, %dtable_skip973
  %dtable_ref976 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip973 ], [ %next_dtable_ref978, %dtable_check975 ]
  %dtable_ptr977 = load ptr, ptr %dtable_ref976, align 8
  %281 = icmp eq ptr %dtable_ptr977, null
  %next_dtable_ref978 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr977, i32 0, i32 2
  br i1 %281, label %dtable_found979, label %dtable_check975

dtable_found979:                                  ; preds = %dtable_check975
  store ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", ptr %dtable_ref976, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip980

dtable_skip980:                                   ; preds = %dtable_found979, %dtable_skip973
  %next_val981 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", i32 0, i32 2), align 8
  %282 = icmp eq ptr %next_val981, inttoptr (i64 -1 to ptr)
  br i1 %282, label %dtable_check982, label %dtable_skip987

dtable_check982:                                  ; preds = %dtable_check982, %dtable_skip980
  %dtable_ref983 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip980 ], [ %next_dtable_ref985, %dtable_check982 ]
  %dtable_ptr984 = load ptr, ptr %dtable_ref983, align 8
  %283 = icmp eq ptr %dtable_ptr984, null
  %next_dtable_ref985 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr984, i32 0, i32 2
  br i1 %283, label %dtable_found986, label %dtable_check982

dtable_found986:                                  ; preds = %dtable_check982
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", ptr %dtable_ref983, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip987

dtable_skip987:                                   ; preds = %dtable_found986, %dtable_skip980
  %next_val988 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", i32 0, i32 2), align 8
  %284 = icmp eq ptr %next_val988, inttoptr (i64 -1 to ptr)
  br i1 %284, label %dtable_check989, label %dtable_skip994

dtable_check989:                                  ; preds = %dtable_check989, %dtable_skip987
  %dtable_ref990 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip987 ], [ %next_dtable_ref992, %dtable_check989 ]
  %dtable_ptr991 = load ptr, ptr %dtable_ref990, align 8
  %285 = icmp eq ptr %dtable_ptr991, null
  %next_dtable_ref992 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr991, i32 0, i32 2
  br i1 %285, label %dtable_found993, label %dtable_check989

dtable_found993:                                  ; preds = %dtable_check989
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", ptr %dtable_ref990, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip994

dtable_skip994:                                   ; preds = %dtable_found993, %dtable_skip987
  %next_val995 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", i32 0, i32 2), align 8
  %286 = icmp eq ptr %next_val995, inttoptr (i64 -1 to ptr)
  br i1 %286, label %dtable_check996, label %dtable_skip1001

dtable_check996:                                  ; preds = %dtable_check996, %dtable_skip994
  %dtable_ref997 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip994 ], [ %next_dtable_ref999, %dtable_check996 ]
  %dtable_ptr998 = load ptr, ptr %dtable_ref997, align 8
  %287 = icmp eq ptr %dtable_ptr998, null
  %next_dtable_ref999 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr998, i32 0, i32 2
  br i1 %287, label %dtable_found1000, label %dtable_check996

dtable_found1000:                                 ; preds = %dtable_check996
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", ptr %dtable_ref997, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1001

dtable_skip1001:                                  ; preds = %dtable_found1000, %dtable_skip994
  %next_val1002 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", i32 0, i32 2), align 8
  %288 = icmp eq ptr %next_val1002, inttoptr (i64 -1 to ptr)
  br i1 %288, label %dtable_check1003, label %dtable_skip1008

dtable_check1003:                                 ; preds = %dtable_check1003, %dtable_skip1001
  %dtable_ref1004 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip1001 ], [ %next_dtable_ref1006, %dtable_check1003 ]
  %dtable_ptr1005 = load ptr, ptr %dtable_ref1004, align 8
  %289 = icmp eq ptr %dtable_ptr1005, null
  %next_dtable_ref1006 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1005, i32 0, i32 2
  br i1 %289, label %dtable_found1007, label %dtable_check1003

dtable_found1007:                                 ; preds = %dtable_check1003
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", ptr %dtable_ref1004, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1008

dtable_skip1008:                                  ; preds = %dtable_found1007, %dtable_skip1001
  %next_val1009 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", i32 0, i32 2), align 8
  %290 = icmp eq ptr %next_val1009, inttoptr (i64 -1 to ptr)
  br i1 %290, label %dtable_check1010, label %dtable_skip1015

dtable_check1010:                                 ; preds = %dtable_check1010, %dtable_skip1008
  %dtable_ref1011 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip1008 ], [ %next_dtable_ref1013, %dtable_check1010 ]
  %dtable_ptr1012 = load ptr, ptr %dtable_ref1011, align 8
  %291 = icmp eq ptr %dtable_ptr1012, null
  %next_dtable_ref1013 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1012, i32 0, i32 2
  br i1 %291, label %dtable_found1014, label %dtable_check1010

dtable_found1014:                                 ; preds = %dtable_check1010
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", ptr %dtable_ref1011, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1015

dtable_skip1015:                                  ; preds = %dtable_found1014, %dtable_skip1008
  %next_val1016 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", i32 0, i32 2), align 8
  %292 = icmp eq ptr %next_val1016, inttoptr (i64 -1 to ptr)
  br i1 %292, label %dtable_check1017, label %dtable_skip1022

dtable_check1017:                                 ; preds = %dtable_check1017, %dtable_skip1015
  %dtable_ref1018 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip1015 ], [ %next_dtable_ref1020, %dtable_check1017 ]
  %dtable_ptr1019 = load ptr, ptr %dtable_ref1018, align 8
  %293 = icmp eq ptr %dtable_ptr1019, null
  %next_dtable_ref1020 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1019, i32 0, i32 2
  br i1 %293, label %dtable_found1021, label %dtable_check1017

dtable_found1021:                                 ; preds = %dtable_check1017
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", ptr %dtable_ref1018, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1022

dtable_skip1022:                                  ; preds = %dtable_found1021, %dtable_skip1015
  %next_val1023 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", i32 0, i32 2), align 8
  %294 = icmp eq ptr %next_val1023, inttoptr (i64 -1 to ptr)
  br i1 %294, label %dtable_check1024, label %dtable_skip1029

dtable_check1024:                                 ; preds = %dtable_check1024, %dtable_skip1022
  %dtable_ref1025 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip1022 ], [ %next_dtable_ref1027, %dtable_check1024 ]
  %dtable_ptr1026 = load ptr, ptr %dtable_ref1025, align 8
  %295 = icmp eq ptr %dtable_ptr1026, null
  %next_dtable_ref1027 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1026, i32 0, i32 2
  br i1 %295, label %dtable_found1028, label %dtable_check1024

dtable_found1028:                                 ; preds = %dtable_check1024
  store ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", ptr %dtable_ref1025, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip1029

dtable_skip1029:                                  ; preds = %dtable_found1028, %dtable_skip1022
  %next_val1030 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", i32 0, i32 2), align 8
  %296 = icmp eq ptr %next_val1030, inttoptr (i64 -1 to ptr)
  br i1 %296, label %dtable_check1031, label %dtable_skip1036

dtable_check1031:                                 ; preds = %dtable_check1031, %dtable_skip1029
  %dtable_ref1032 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip1029 ], [ %next_dtable_ref1034, %dtable_check1031 ]
  %dtable_ptr1033 = load ptr, ptr %dtable_ref1032, align 8
  %297 = icmp eq ptr %dtable_ptr1033, null
  %next_dtable_ref1034 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1033, i32 0, i32 2
  br i1 %297, label %dtable_found1035, label %dtable_check1031

dtable_found1035:                                 ; preds = %dtable_check1031
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", ptr %dtable_ref1032, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1036

dtable_skip1036:                                  ; preds = %dtable_found1035, %dtable_skip1029
  %next_val1037 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", i32 0, i32 2), align 8
  %298 = icmp eq ptr %next_val1037, inttoptr (i64 -1 to ptr)
  br i1 %298, label %dtable_check1038, label %dtable_skip1043

dtable_check1038:                                 ; preds = %dtable_check1038, %dtable_skip1036
  %dtable_ref1039 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip1036 ], [ %next_dtable_ref1041, %dtable_check1038 ]
  %dtable_ptr1040 = load ptr, ptr %dtable_ref1039, align 8
  %299 = icmp eq ptr %dtable_ptr1040, null
  %next_dtable_ref1041 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1040, i32 0, i32 2
  br i1 %299, label %dtable_found1042, label %dtable_check1038

dtable_found1042:                                 ; preds = %dtable_check1038
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", ptr %dtable_ref1039, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip1043

dtable_skip1043:                                  ; preds = %dtable_found1042, %dtable_skip1036
  %next_val1044 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", i32 0, i32 2), align 8
  %300 = icmp eq ptr %next_val1044, inttoptr (i64 -1 to ptr)
  br i1 %300, label %dtable_check1045, label %dtable_skip1050

dtable_check1045:                                 ; preds = %dtable_check1045, %dtable_skip1043
  %dtable_ref1046 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip1043 ], [ %next_dtable_ref1048, %dtable_check1045 ]
  %dtable_ptr1047 = load ptr, ptr %dtable_ref1046, align 8
  %301 = icmp eq ptr %dtable_ptr1047, null
  %next_dtable_ref1048 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1047, i32 0, i32 2
  br i1 %301, label %dtable_found1049, label %dtable_check1045

dtable_found1049:                                 ; preds = %dtable_check1045
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", ptr %dtable_ref1046, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1050

dtable_skip1050:                                  ; preds = %dtable_found1049, %dtable_skip1043
  %next_val1051 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", i32 0, i32 2), align 8
  %302 = icmp eq ptr %next_val1051, inttoptr (i64 -1 to ptr)
  br i1 %302, label %dtable_check1052, label %dtable_skip1057

dtable_check1052:                                 ; preds = %dtable_check1052, %dtable_skip1050
  %dtable_ref1053 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip1050 ], [ %next_dtable_ref1055, %dtable_check1052 ]
  %dtable_ptr1054 = load ptr, ptr %dtable_ref1053, align 8
  %303 = icmp eq ptr %dtable_ptr1054, null
  %next_dtable_ref1055 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1054, i32 0, i32 2
  br i1 %303, label %dtable_found1056, label %dtable_check1052

dtable_found1056:                                 ; preds = %dtable_check1052
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", ptr %dtable_ref1053, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1057

dtable_skip1057:                                  ; preds = %dtable_found1056, %dtable_skip1050
  %next_val1058 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", i32 0, i32 2), align 8
  %304 = icmp eq ptr %next_val1058, inttoptr (i64 -1 to ptr)
  br i1 %304, label %dtable_check1059, label %dtable_skip1064

dtable_check1059:                                 ; preds = %dtable_check1059, %dtable_skip1057
  %dtable_ref1060 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip1057 ], [ %next_dtable_ref1062, %dtable_check1059 ]
  %dtable_ptr1061 = load ptr, ptr %dtable_ref1060, align 8
  %305 = icmp eq ptr %dtable_ptr1061, null
  %next_dtable_ref1062 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1061, i32 0, i32 2
  br i1 %305, label %dtable_found1063, label %dtable_check1059

dtable_found1063:                                 ; preds = %dtable_check1059
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", ptr %dtable_ref1060, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1064

dtable_skip1064:                                  ; preds = %dtable_found1063, %dtable_skip1057
  %next_val1065 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", i32 0, i32 2), align 8
  %306 = icmp eq ptr %next_val1065, inttoptr (i64 -1 to ptr)
  br i1 %306, label %dtable_check1066, label %dtable_skip1071

dtable_check1066:                                 ; preds = %dtable_check1066, %dtable_skip1064
  %dtable_ref1067 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip1064 ], [ %next_dtable_ref1069, %dtable_check1066 ]
  %dtable_ptr1068 = load ptr, ptr %dtable_ref1067, align 8
  %307 = icmp eq ptr %dtable_ptr1068, null
  %next_dtable_ref1069 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1068, i32 0, i32 2
  br i1 %307, label %dtable_found1070, label %dtable_check1066

dtable_found1070:                                 ; preds = %dtable_check1066
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", ptr %dtable_ref1067, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1071

dtable_skip1071:                                  ; preds = %dtable_found1070, %dtable_skip1064
  %next_val1072 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", i32 0, i32 2), align 8
  %308 = icmp eq ptr %next_val1072, inttoptr (i64 -1 to ptr)
  br i1 %308, label %dtable_check1073, label %dtable_skip1078

dtable_check1073:                                 ; preds = %dtable_check1073, %dtable_skip1071
  %dtable_ref1074 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip1071 ], [ %next_dtable_ref1076, %dtable_check1073 ]
  %dtable_ptr1075 = load ptr, ptr %dtable_ref1074, align 8
  %309 = icmp eq ptr %dtable_ptr1075, null
  %next_dtable_ref1076 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1075, i32 0, i32 2
  br i1 %309, label %dtable_found1077, label %dtable_check1073

dtable_found1077:                                 ; preds = %dtable_check1073
  store ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", ptr %dtable_ref1074, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip1078

dtable_skip1078:                                  ; preds = %dtable_found1077, %dtable_skip1071
  %next_val1079 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", i32 0, i32 2), align 8
  %310 = icmp eq ptr %next_val1079, inttoptr (i64 -1 to ptr)
  br i1 %310, label %dtable_check1080, label %dtable_skip1085

dtable_check1080:                                 ; preds = %dtable_check1080, %dtable_skip1078
  %dtable_ref1081 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip1078 ], [ %next_dtable_ref1083, %dtable_check1080 ]
  %dtable_ptr1082 = load ptr, ptr %dtable_ref1081, align 8
  %311 = icmp eq ptr %dtable_ptr1082, null
  %next_dtable_ref1083 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1082, i32 0, i32 2
  br i1 %311, label %dtable_found1084, label %dtable_check1080

dtable_found1084:                                 ; preds = %dtable_check1080
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", ptr %dtable_ref1081, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1085

dtable_skip1085:                                  ; preds = %dtable_found1084, %dtable_skip1078
  %next_val1086 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", i32 0, i32 2), align 8
  %312 = icmp eq ptr %next_val1086, inttoptr (i64 -1 to ptr)
  br i1 %312, label %dtable_check1087, label %dtable_skip1092

dtable_check1087:                                 ; preds = %dtable_check1087, %dtable_skip1085
  %dtable_ref1088 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip1085 ], [ %next_dtable_ref1090, %dtable_check1087 ]
  %dtable_ptr1089 = load ptr, ptr %dtable_ref1088, align 8
  %313 = icmp eq ptr %dtable_ptr1089, null
  %next_dtable_ref1090 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1089, i32 0, i32 2
  br i1 %313, label %dtable_found1091, label %dtable_check1087

dtable_found1091:                                 ; preds = %dtable_check1087
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", ptr %dtable_ref1088, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip1092

dtable_skip1092:                                  ; preds = %dtable_found1091, %dtable_skip1085
  %next_val1093 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", i32 0, i32 2), align 8
  %314 = icmp eq ptr %next_val1093, inttoptr (i64 -1 to ptr)
  br i1 %314, label %dtable_check1094, label %dtable_skip1099

dtable_check1094:                                 ; preds = %dtable_check1094, %dtable_skip1092
  %dtable_ref1095 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip1092 ], [ %next_dtable_ref1097, %dtable_check1094 ]
  %dtable_ptr1096 = load ptr, ptr %dtable_ref1095, align 8
  %315 = icmp eq ptr %dtable_ptr1096, null
  %next_dtable_ref1097 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1096, i32 0, i32 2
  br i1 %315, label %dtable_found1098, label %dtable_check1094

dtable_found1098:                                 ; preds = %dtable_check1094
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", ptr %dtable_ref1095, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1099

dtable_skip1099:                                  ; preds = %dtable_found1098, %dtable_skip1092
  %next_val1100 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", i32 0, i32 2), align 8
  %316 = icmp eq ptr %next_val1100, inttoptr (i64 -1 to ptr)
  br i1 %316, label %dtable_check1101, label %dtable_skip1106

dtable_check1101:                                 ; preds = %dtable_check1101, %dtable_skip1099
  %dtable_ref1102 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip1099 ], [ %next_dtable_ref1104, %dtable_check1101 ]
  %dtable_ptr1103 = load ptr, ptr %dtable_ref1102, align 8
  %317 = icmp eq ptr %dtable_ptr1103, null
  %next_dtable_ref1104 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1103, i32 0, i32 2
  br i1 %317, label %dtable_found1105, label %dtable_check1101

dtable_found1105:                                 ; preds = %dtable_check1101
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", ptr %dtable_ref1102, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1106

dtable_skip1106:                                  ; preds = %dtable_found1105, %dtable_skip1099
  %next_val1107 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", i32 0, i32 2), align 8
  %318 = icmp eq ptr %next_val1107, inttoptr (i64 -1 to ptr)
  br i1 %318, label %dtable_check1108, label %dtable_skip1113

dtable_check1108:                                 ; preds = %dtable_check1108, %dtable_skip1106
  %dtable_ref1109 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip1106 ], [ %next_dtable_ref1111, %dtable_check1108 ]
  %dtable_ptr1110 = load ptr, ptr %dtable_ref1109, align 8
  %319 = icmp eq ptr %dtable_ptr1110, null
  %next_dtable_ref1111 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1110, i32 0, i32 2
  br i1 %319, label %dtable_found1112, label %dtable_check1108

dtable_found1112:                                 ; preds = %dtable_check1108
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", ptr %dtable_ref1109, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1113

dtable_skip1113:                                  ; preds = %dtable_found1112, %dtable_skip1106
  %next_val1114 = load ptr, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", i32 0, i32 2), align 8
  %320 = icmp eq ptr %next_val1114, inttoptr (i64 -1 to ptr)
  br i1 %320, label %dtable_check1115, label %dtable_skip1120

dtable_check1115:                                 ; preds = %dtable_check1115, %dtable_skip1113
  %dtable_ref1116 = phi ptr [ getelementptr inbounds nuw (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip1113 ], [ %next_dtable_ref1118, %dtable_check1115 ]
  %dtable_ptr1117 = load ptr, ptr %dtable_ref1116, align 8
  %321 = icmp eq ptr %dtable_ptr1117, null
  %next_dtable_ref1118 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %dtable_ptr1117, i32 0, i32 2
  br i1 %321, label %dtable_found1119, label %dtable_check1115

dtable_found1119:                                 ; preds = %dtable_check1115
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", ptr %dtable_ref1116, align 8
  store ptr null, ptr getelementptr inbounds nuw ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1120

dtable_skip1120:                                  ; preds = %dtable_found1119, %dtable_skip1113
  ret void
}

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { noreturn }
attributes #6 = { alwaysinline }

!llvm.module.flags = !{!106, !107, !108, !109, !110, !111, !112}
!llvm.dbg.cu = !{!113}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "default_random", linkageName: "std.math.random.default_random", scope: !2, file: !2, line: 65, type: !3, isLocal: false, isDefinition: true, align: 16)
!2 = !DIFile(filename: "random.c3", directory: "/usr/lib/c3c/lib/std/math")
!3 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc64Random", scope: !4, file: !4, line: 43, baseType: !5, align: 8)
!4 = !DIFile(filename: "math.sfc.c3", directory: "/usr/lib/c3c/lib/std/math/random")
!5 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 256, align: 64, elements: !7)
!6 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!7 = !{!8}
!8 = !DISubrange(count: 4, lowerBound: 0)
!9 = !DIGlobalVariableExpression(var: !10, expr: !DIExpression())
!10 = distinct !DIGlobalVariable(name: "default_random_initialized", linkageName: "std.math.random.default_random_initialized", scope: !2, file: !2, line: 66, type: !11, isLocal: false, isDefinition: true, align: 1)
!11 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !14, file: !14, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!14 = !DIFile(filename: "math.pcg.c3", directory: "/usr/lib/c3c/lib/std/math/random")
!15 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !14, file: !14, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!18 = !DIGlobalVariableExpression(var: !19, expr: !DIExpression())
!19 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !14, file: !14, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!20 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !14, file: !14, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!23 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!24 = !DIGlobalVariableExpression(var: !25, expr: !DIExpression())
!25 = distinct !DIGlobalVariable(name: "MUL_LCG128", linkageName: "std.math.random.MUL_LCG128", scope: !14, file: !14, line: 9, type: !15, isLocal: true, isDefinition: true, align: 16)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !14, file: !14, line: 10, type: !6, isLocal: true, isDefinition: true, align: 8)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "MUL_LCG32", linkageName: "std.math.random.MUL_LCG32", scope: !14, file: !14, line: 11, type: !20, isLocal: true, isDefinition: true, align: 4)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "MUL_LCG16", linkageName: "std.math.random.MUL_LCG16", scope: !14, file: !14, line: 12, type: !23, isLocal: true, isDefinition: true, align: 2)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_long.ROT_SHIFT", scope: !14, file: !14, line: 28, type: !34, isLocal: true, isDefinition: true, align: 4)
!34 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_int.ROT_SHIFT", scope: !14, file: !14, line: 56, type: !34, isLocal: true, isDefinition: true, align: 4)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_short.ROT_SHIFT", scope: !14, file: !14, line: 85, type: !34, isLocal: true, isDefinition: true, align: 4)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_byte.ROT_SHIFT", scope: !14, file: !14, line: 113, type: !34, isLocal: true, isDefinition: true, align: 4)
!41 = !DIGlobalVariableExpression(var: !42, expr: !DIExpression())
!42 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !43, file: !43, line: 4, type: !6, isLocal: true, isDefinition: true, align: 8)
!43 = !DIFile(filename: "math.seeder.c3", directory: "/usr/lib/c3c/lib/std/math/random")
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "MUL_MCG64", linkageName: "std.math.random.MUL_MCG64", scope: !43, file: !43, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !43, file: !43, line: 6, type: !6, isLocal: true, isDefinition: true, align: 8)
!48 = !DIGlobalVariableExpression(var: !49, expr: !DIExpression())
!49 = distinct !DIGlobalVariable(name: "random_int", linkageName: "entropy.random_int", scope: !43, file: !43, line: 80, type: !20, isLocal: true, isDefinition: true, align: 4)
!50 = !DIGlobalVariableExpression(var: !51, expr: !DIExpression())
!51 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !4, file: !4, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!52 = !DIGlobalVariableExpression(var: !53, expr: !DIExpression())
!53 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !4, file: !4, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!54 = !DIGlobalVariableExpression(var: !55, expr: !DIExpression())
!55 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !4, file: !4, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!56 = !DIGlobalVariableExpression(var: !57, expr: !DIExpression())
!57 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !4, file: !4, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!58 = !DIGlobalVariableExpression(var: !59, expr: !DIExpression())
!59 = distinct !DIGlobalVariable(name: "ODD_PHI8", linkageName: "std.math.random.ODD_PHI8", scope: !4, file: !4, line: 8, type: !60, isLocal: true, isDefinition: true, align: 1)
!60 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!61 = !DIGlobalVariableExpression(var: !62, expr: !DIExpression())
!62 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_MULTIPLIER", linkageName: "std.math.random.SIMPLE_RANDOM_MULTIPLIER", scope: !63, file: !63, line: 32, type: !64, isLocal: true, isDefinition: true, align: 8)
!63 = !DIFile(filename: "math.simple_random.c3", directory: "/usr/lib/c3c/lib/std/math/random")
!64 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!65 = !DIGlobalVariableExpression(var: !66, expr: !DIExpression())
!66 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_ADDEND", linkageName: "std.math.random.SIMPLE_RANDOM_ADDEND", scope: !63, file: !63, line: 33, type: !64, isLocal: true, isDefinition: true, align: 8)
!67 = !DIGlobalVariableExpression(var: !68, expr: !DIExpression())
!68 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_MASK", linkageName: "std.math.random.SIMPLE_RANDOM_MASK", scope: !63, file: !63, line: 34, type: !64, isLocal: true, isDefinition: true, align: 8)
!69 = !DIGlobalVariableExpression(var: !70, expr: !DIExpression())
!70 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !71, file: !71, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!71 = !DIFile(filename: "math.lcg.c3", directory: "/usr/lib/c3c/lib/std/math/random")
!72 = !DIGlobalVariableExpression(var: !73, expr: !DIExpression())
!73 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !71, file: !71, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!74 = !DIGlobalVariableExpression(var: !75, expr: !DIExpression())
!75 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !71, file: !71, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!76 = !DIGlobalVariableExpression(var: !77, expr: !DIExpression())
!77 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !71, file: !71, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!78 = !DIGlobalVariableExpression(var: !79, expr: !DIExpression())
!79 = distinct !DIGlobalVariable(name: "MUL_LCG128", linkageName: "std.math.random.MUL_LCG128", scope: !71, file: !71, line: 9, type: !15, isLocal: true, isDefinition: true, align: 16)
!80 = !DIGlobalVariableExpression(var: !81, expr: !DIExpression())
!81 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !71, file: !71, line: 10, type: !6, isLocal: true, isDefinition: true, align: 8)
!82 = !DIGlobalVariableExpression(var: !83, expr: !DIExpression())
!83 = distinct !DIGlobalVariable(name: "MUL_LCG32", linkageName: "std.math.random.MUL_LCG32", scope: !71, file: !71, line: 11, type: !20, isLocal: true, isDefinition: true, align: 4)
!84 = !DIGlobalVariableExpression(var: !85, expr: !DIExpression())
!85 = distinct !DIGlobalVariable(name: "MUL_LCG16", linkageName: "std.math.random.MUL_LCG16", scope: !71, file: !71, line: 12, type: !23, isLocal: true, isDefinition: true, align: 2)
!86 = !DIGlobalVariableExpression(var: !87, expr: !DIExpression())
!87 = distinct !DIGlobalVariable(name: "MUL_MCG128", linkageName: "std.math.random.MUL_MCG128", scope: !88, file: !88, line: 3, type: !15, isLocal: true, isDefinition: true, align: 16)
!88 = !DIFile(filename: "math.mcg.c3", directory: "/usr/lib/c3c/lib/std/math/random")
!89 = !DIGlobalVariableExpression(var: !90, expr: !DIExpression())
!90 = distinct !DIGlobalVariable(name: "MUL_MCG64", linkageName: "std.math.random.MUL_MCG64", scope: !88, file: !88, line: 4, type: !6, isLocal: true, isDefinition: true, align: 8)
!91 = !DIGlobalVariableExpression(var: !92, expr: !DIExpression())
!92 = distinct !DIGlobalVariable(name: "MUL_MCG32", linkageName: "std.math.random.MUL_MCG32", scope: !88, file: !88, line: 5, type: !20, isLocal: true, isDefinition: true, align: 4)
!93 = !DIGlobalVariableExpression(var: !94, expr: !DIExpression())
!94 = distinct !DIGlobalVariable(name: "MUL_MCG16", linkageName: "std.math.random.MUL_MCG16", scope: !88, file: !88, line: 6, type: !23, isLocal: true, isDefinition: true, align: 2)
!95 = !DIGlobalVariableExpression(var: !96, expr: !DIExpression())
!96 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !97, file: !97, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!97 = !DIFile(filename: "math.msws.c3", directory: "/usr/lib/c3c/lib/std/math/random")
!98 = !DIGlobalVariableExpression(var: !99, expr: !DIExpression())
!99 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !97, file: !97, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!100 = !DIGlobalVariableExpression(var: !101, expr: !DIExpression())
!101 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !97, file: !97, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!102 = !DIGlobalVariableExpression(var: !103, expr: !DIExpression())
!103 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !97, file: !97, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!104 = !DIGlobalVariableExpression(var: !105, expr: !DIExpression())
!105 = distinct !DIGlobalVariable(name: "ODD_PHI8", linkageName: "std.math.random.ODD_PHI8", scope: !97, file: !97, line: 8, type: !60, isLocal: true, isDefinition: true, align: 1)
!106 = !{i32 2, !"Dwarf Version", i32 4}
!107 = !{i32 2, !"Debug Info Version", i32 3}
!108 = !{i32 2, !"wchar_size", i32 4}
!109 = !{i32 4, !"PIE Level", i32 2}
!110 = !{i32 4, !"PIC Level", i32 2}
!111 = !{i32 1, !"uwtable", i32 2}
!112 = !{i32 2, !"frame-pointer", i32 2}
!113 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !114, splitDebugInlining: false)
!114 = !{!0, !9, !12, !16, !18, !21, !24, !26, !28, !30, !32, !35, !37, !39, !41, !44, !46, !48, !50, !52, !54, !56, !58, !61, !65, !67, !69, !72, !74, !76, !78, !80, !82, !84, !86, !89, !91, !93, !95, !98, !100, !102, !104}
!115 = distinct !DISubprogram(name: "srand", linkageName: "std.math.random.srand", scope: !2, file: !2, line: 71, type: !116, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!116 = !DISubroutineType(types: !117)
!117 = !{null, !6}
!118 = !{}
!119 = !DILocalVariable(name: "seed", arg: 1, scope: !115, file: !2, line: 71, type: !6)
!120 = !DILocation(line: 71, column: 21, scope: !115)
!121 = !DILocation(line: 73, column: 2, scope: !115)
!122 = !DILocation(line: 74, column: 31, scope: !115)
!123 = distinct !DISubprogram(name: "rand", linkageName: "std.math.random.rand", scope: !2, file: !2, line: 80, type: !124, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!124 = !DISubroutineType(types: !125)
!125 = !{!34, !34}
!126 = !DILocalVariable(name: "range", arg: 1, scope: !123, file: !2, line: 80, type: !34)
!127 = !DILocation(line: 80, column: 17, scope: !123)
!128 = !DILocation(line: 179, column: 7, scope: !129, inlinedAt: !130)
!129 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!130 = !DILocation(line: 82, column: 2, scope: !123)
!131 = !DILocation(line: 136, column: 33, scope: !132, inlinedAt: !133)
!132 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!133 = !DILocation(line: 181, column: 3, scope: !134, inlinedAt: !136)
!134 = distinct !DILexicalBlock(scope: !135, file: !2, line: 27, column: 1)
!135 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!136 = !DILocation(line: 181, column: 3, scope: !137, inlinedAt: !130)
!137 = distinct !DILexicalBlock(scope: !129, file: !2, line: 180, column: 2)
!138 = !DILocation(line: 28, column: 20, scope: !135, inlinedAt: !136)
!139 = !DILocation(line: 28, column: 2, scope: !135, inlinedAt: !136)
!140 = !DILocation(line: 182, column: 32, scope: !137, inlinedAt: !130)
!141 = !DILocation(line: 83, column: 31, scope: !123)
!142 = !DILocation(line: 136, column: 33, scope: !143, inlinedAt: !144)
!143 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!144 = !DILocation(line: 83, column: 9, scope: !145, inlinedAt: !147)
!145 = distinct !DILexicalBlock(scope: !146, file: !2, line: 38, column: 1)
!146 = distinct !DISubprogram(name: "next", linkageName: "next", scope: !2, file: !2, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!147 = !DILocation(line: 83, column: 9, scope: !123)
!148 = !DILocation(line: 35, column: 11, scope: !145, inlinedAt: !147)
!149 = !DILocation(line: 39, column: 6, scope: !146, inlinedAt: !147)
!150 = !DILocation(line: 39, column: 25, scope: !146, inlinedAt: !147)
!151 = !DILocalVariable(name: "mask", scope: !146, file: !2, line: 40, type: !20, align: 4)
!152 = !DILocation(line: 40, column: 7, scope: !146, inlinedAt: !147)
!153 = !DILocation(line: 40, column: 14, scope: !146, inlinedAt: !147)
!154 = !DILocation(line: 41, column: 2, scope: !146, inlinedAt: !147)
!155 = !DILocation(line: 42, column: 2, scope: !146, inlinedAt: !147)
!156 = !DILocation(line: 95, column: 31, scope: !157, inlinedAt: !159)
!157 = distinct !DISubprogram(name: "clz", linkageName: "clz", scope: !158, file: !158, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!158 = !DIFile(filename: "bits.c3", directory: "/usr/lib/c3c/lib/std")
!159 = !DILocation(line: 42, column: 11, scope: !146, inlinedAt: !147)
!160 = !DILocalVariable(name: "x", scope: !146, file: !2, line: 43, type: !20, align: 4)
!161 = !DILocation(line: 43, column: 7, scope: !146, inlinedAt: !147)
!162 = !DILocation(line: 44, column: 2, scope: !146, inlinedAt: !147)
!163 = !DILocation(line: 48, column: 9, scope: !164, inlinedAt: !147)
!164 = distinct !DILexicalBlock(scope: !146, file: !2, line: 44, column: 2)
!165 = !DILocation(line: 48, column: 13, scope: !164, inlinedAt: !147)
!166 = !DILocation(line: 46, column: 7, scope: !167, inlinedAt: !147)
!167 = distinct !DILexicalBlock(scope: !164, file: !2, line: 45, column: 2)
!168 = !DILocation(line: 46, column: 27, scope: !167, inlinedAt: !147)
!169 = !DILocation(line: 49, column: 9, scope: !146, inlinedAt: !147)
!170 = distinct !DISubprogram(name: "rand_in_range", linkageName: "std.math.random.rand_in_range", scope: !2, file: !2, line: 90, type: !171, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!171 = !DISubroutineType(types: !172)
!172 = !{!34, !34, !34}
!173 = !DILocalVariable(name: "min", arg: 1, scope: !170, file: !2, line: 90, type: !34)
!174 = !DILocation(line: 90, column: 26, scope: !170)
!175 = !DILocalVariable(name: "max", arg: 2, scope: !170, file: !2, line: 90, type: !34)
!176 = !DILocation(line: 90, column: 35, scope: !170)
!177 = !DILocation(line: 88, column: 11, scope: !178)
!178 = distinct !DILexicalBlock(scope: !170, file: !2, line: 91, column: 1)
!179 = !DILocation(line: 88, column: 18, scope: !178)
!180 = !DILocation(line: 179, column: 7, scope: !181, inlinedAt: !182)
!181 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!182 = !DILocation(line: 92, column: 2, scope: !170)
!183 = !DILocation(line: 136, column: 33, scope: !184, inlinedAt: !185)
!184 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!185 = !DILocation(line: 181, column: 3, scope: !186, inlinedAt: !188)
!186 = distinct !DILexicalBlock(scope: !187, file: !2, line: 27, column: 1)
!187 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!188 = !DILocation(line: 181, column: 3, scope: !189, inlinedAt: !182)
!189 = distinct !DILexicalBlock(scope: !181, file: !2, line: 180, column: 2)
!190 = !DILocation(line: 28, column: 20, scope: !187, inlinedAt: !188)
!191 = !DILocation(line: 28, column: 2, scope: !187, inlinedAt: !188)
!192 = !DILocation(line: 182, column: 32, scope: !189, inlinedAt: !182)
!193 = !DILocation(line: 136, column: 33, scope: !194, inlinedAt: !195)
!194 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!195 = !DILocation(line: 93, column: 9, scope: !196, inlinedAt: !198)
!196 = distinct !DILexicalBlock(scope: !197, file: !2, line: 59, column: 1)
!197 = distinct !DISubprogram(name: "next_in_range", linkageName: "next_in_range", scope: !2, file: !2, line: 58, scopeLine: 58, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!198 = !DILocation(line: 93, column: 9, scope: !170)
!199 = !DILocation(line: 56, column: 11, scope: !196, inlinedAt: !198)
!200 = !DILocation(line: 56, column: 18, scope: !196, inlinedAt: !198)
!201 = !DILocation(line: 60, column: 22, scope: !197, inlinedAt: !198)
!202 = !DILocation(line: 60, column: 28, scope: !197, inlinedAt: !198)
!203 = !DILocation(line: 136, column: 33, scope: !204, inlinedAt: !205)
!204 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!205 = !DILocation(line: 60, column: 9, scope: !206, inlinedAt: !208)
!206 = distinct !DILexicalBlock(scope: !207, file: !2, line: 38, column: 1)
!207 = distinct !DISubprogram(name: "next", linkageName: "next", scope: !2, file: !2, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!208 = !DILocation(line: 60, column: 9, scope: !197, inlinedAt: !198)
!209 = !DILocation(line: 35, column: 11, scope: !206, inlinedAt: !208)
!210 = !DILocation(line: 39, column: 6, scope: !207, inlinedAt: !208)
!211 = !DILocation(line: 39, column: 25, scope: !207, inlinedAt: !208)
!212 = !DILocalVariable(name: "mask", scope: !207, file: !2, line: 40, type: !20, align: 4)
!213 = !DILocation(line: 40, column: 7, scope: !207, inlinedAt: !208)
!214 = !DILocation(line: 40, column: 14, scope: !207, inlinedAt: !208)
!215 = !DILocation(line: 41, column: 2, scope: !207, inlinedAt: !208)
!216 = !DILocation(line: 42, column: 2, scope: !207, inlinedAt: !208)
!217 = !DILocation(line: 95, column: 31, scope: !218, inlinedAt: !219)
!218 = distinct !DISubprogram(name: "clz", linkageName: "clz", scope: !158, file: !158, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!219 = !DILocation(line: 42, column: 11, scope: !207, inlinedAt: !208)
!220 = !DILocalVariable(name: "x", scope: !207, file: !2, line: 43, type: !20, align: 4)
!221 = !DILocation(line: 43, column: 7, scope: !207, inlinedAt: !208)
!222 = !DILocation(line: 44, column: 2, scope: !207, inlinedAt: !208)
!223 = !DILocation(line: 48, column: 9, scope: !224, inlinedAt: !208)
!224 = distinct !DILexicalBlock(scope: !207, file: !2, line: 44, column: 2)
!225 = !DILocation(line: 48, column: 13, scope: !224, inlinedAt: !208)
!226 = !DILocation(line: 46, column: 7, scope: !227, inlinedAt: !208)
!227 = distinct !DILexicalBlock(scope: !224, file: !2, line: 45, column: 2)
!228 = !DILocation(line: 46, column: 27, scope: !227, inlinedAt: !208)
!229 = !DILocation(line: 49, column: 9, scope: !207, inlinedAt: !208)
!230 = !DILocation(line: 60, column: 39, scope: !197, inlinedAt: !198)
!231 = distinct !DISubprogram(name: "rnd", linkageName: "std.math.random.rnd", scope: !2, file: !2, line: 96, type: !232, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!232 = !DISubroutineType(types: !233)
!233 = !{!234}
!234 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!235 = !DILocation(line: 179, column: 7, scope: !236, inlinedAt: !237)
!236 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!237 = !DILocation(line: 98, column: 2, scope: !231)
!238 = !DILocation(line: 136, column: 33, scope: !239, inlinedAt: !240)
!239 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!240 = !DILocation(line: 181, column: 3, scope: !241, inlinedAt: !243)
!241 = distinct !DILexicalBlock(scope: !242, file: !2, line: 27, column: 1)
!242 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!243 = !DILocation(line: 181, column: 3, scope: !244, inlinedAt: !237)
!244 = distinct !DILexicalBlock(scope: !236, file: !2, line: 180, column: 2)
!245 = !DILocation(line: 28, column: 20, scope: !242, inlinedAt: !243)
!246 = !DILocation(line: 28, column: 2, scope: !242, inlinedAt: !243)
!247 = !DILocation(line: 182, column: 32, scope: !244, inlinedAt: !237)
!248 = !DILocalVariable(name: "val", scope: !231, file: !2, line: 99, type: !6, align: 8)
!249 = !DILocation(line: 99, column: 8, scope: !231)
!250 = !DILocation(line: 99, column: 14, scope: !231)
!251 = !DILocation(line: 100, column: 9, scope: !231)
!252 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg128Random.set_seed", scope: !14, file: !14, line: 20, type: !253, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!253 = !DISubroutineType(types: !254)
!254 = !{null, !255, !257}
!255 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg128Random*", baseType: !256, size: 64, align: 64, dwarfAddressSpace: 0)
!256 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg128Random", scope: !14, file: !14, line: 18, baseType: !15, align: 16)
!257 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !258, identifier: "char[]")
!258 = !{!259, !261}
!259 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !257, baseType: !260, size: 64, align: 64)
!260 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !60, size: 64, align: 64, dwarfAddressSpace: 0)
!261 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !257, baseType: !262, size: 64, align: 64, offset: 64)
!262 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !6)
!263 = !DILocation(line: 21, column: 1, scope: !252)
!264 = !DILocalVariable(name: "self", arg: 1, scope: !252, file: !14, line: 20, type: !255)
!265 = !DILocation(line: 20, column: 32, scope: !252)
!266 = !DILocalVariable(name: "input", arg: 2, scope: !252, file: !14, line: 20, type: !257)
!267 = !DILocation(line: 20, column: 46, scope: !252)
!268 = !DILocation(line: 22, column: 3, scope: !252)
!269 = !DILocalVariable(name: "return_value", scope: !270, file: !14, line: 10, type: !15, align: 16)
!270 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!271 = !DILocation(line: 10, column: 8, scope: !270, inlinedAt: !272)
!272 = !DILocation(line: 22, column: 10, scope: !252)
!273 = !DILocation(line: 11, column: 2, scope: !270, inlinedAt: !272)
!274 = !DILocation(line: 12, column: 9, scope: !270, inlinedAt: !272)
!275 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg128Random.next_long", scope: !14, file: !14, line: 26, type: !276, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!276 = !DISubroutineType(types: !277)
!277 = !{!6, !255}
!278 = !DILocation(line: 27, column: 1, scope: !275)
!279 = !DILocalVariable(name: "self", arg: 1, scope: !275, file: !14, line: 26, type: !255)
!280 = !DILocation(line: 26, column: 33, scope: !275)
!281 = !DILocalVariable(name: "s", scope: !275, file: !14, line: 29, type: !282, align: 8)
!282 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !15, size: 64, align: 64, dwarfAddressSpace: 0)
!283 = !DILocation(line: 29, column: 11, scope: !275)
!284 = !DILocation(line: 29, column: 25, scope: !275)
!285 = !DILocalVariable(name: "xor", scope: !275, file: !14, line: 30, type: !15, align: 16)
!286 = !DILocation(line: 30, column: 10, scope: !275)
!287 = !DILocation(line: 30, column: 17, scope: !275)
!288 = !DILocation(line: 30, column: 22, scope: !275)
!289 = !DILocation(line: 30, column: 21, scope: !275)
!290 = !DILocation(line: 30, column: 16, scope: !275)
!291 = !DILocalVariable(name: "rot", scope: !275, file: !14, line: 31, type: !60, align: 1)
!292 = !DILocation(line: 31, column: 7, scope: !275)
!293 = !DILocation(line: 31, column: 21, scope: !275)
!294 = !DILocation(line: 31, column: 13, scope: !275)
!295 = !DILocation(line: 32, column: 3, scope: !275)
!296 = !DILocation(line: 32, column: 8, scope: !275)
!297 = !DILocation(line: 32, column: 7, scope: !275)
!298 = !DILocation(line: 33, column: 18, scope: !275)
!299 = !DILocation(line: 33, column: 10, scope: !275)
!300 = !DILocation(line: 33, column: 42, scope: !275)
!301 = !DILocation(line: 147, column: 53, scope: !302, inlinedAt: !299)
!302 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!303 = !DILocation(line: 147, column: 59, scope: !302, inlinedAt: !299)
!304 = !DILocation(line: 147, column: 65, scope: !302, inlinedAt: !299)
!305 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg128Random.next_bytes", scope: !14, file: !14, line: 39, type: !253, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!306 = !DILocation(line: 39, column: 66, scope: !305)
!307 = !DILocalVariable(name: "self", arg: 1, scope: !305, file: !14, line: 39, type: !255)
!308 = !DILocation(line: 39, column: 33, scope: !305)
!309 = !DILocalVariable(name: "bytes", arg: 2, scope: !305, file: !14, line: 39, type: !257)
!310 = !DILocation(line: 39, column: 47, scope: !305)
!311 = !DILocation(line: 37, column: 11, scope: !312)
!312 = distinct !DILexicalBlock(scope: !305, file: !14, line: 39, column: 66)
!313 = !DILocalVariable(name: "len", scope: !314, file: !14, line: 146, type: !262, align: 8)
!314 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!315 = !DILocation(line: 146, column: 6, scope: !314, inlinedAt: !306)
!316 = !DILocation(line: 146, column: 12, scope: !314, inlinedAt: !306)
!317 = !DILocation(line: 148, column: 2, scope: !314, inlinedAt: !306)
!318 = !DILocation(line: 148, column: 9, scope: !319, inlinedAt: !306)
!319 = distinct !DILexicalBlock(scope: !314, file: !2, line: 148, column: 2)
!320 = !DILocalVariable(name: "value", scope: !321, file: !14, line: 150, type: !6, align: 8)
!321 = distinct !DILexicalBlock(scope: !319, file: !2, line: 149, column: 2)
!322 = !DILocation(line: 150, column: 7, scope: !321, inlinedAt: !306)
!323 = !DILocation(line: 39, column: 89, scope: !321, inlinedAt: !306)
!324 = !DILocation(line: 150, column: 15, scope: !321, inlinedAt: !306)
!325 = !DILocation(line: 151, column: 7, scope: !321, inlinedAt: !306)
!326 = !DILocation(line: 153, column: 33, scope: !327, inlinedAt: !306)
!327 = distinct !DILexicalBlock(scope: !321, file: !2, line: 152, column: 3)
!328 = !DILocation(line: 153, column: 17, scope: !327, inlinedAt: !306)
!329 = !DILocation(line: 153, column: 4, scope: !327, inlinedAt: !306)
!330 = !DILocation(line: 153, column: 10, scope: !327, inlinedAt: !306)
!331 = !DILocation(line: 154, column: 10, scope: !327, inlinedAt: !306)
!332 = !DILocation(line: 156, column: 3, scope: !321, inlinedAt: !306)
!333 = !DILocation(line: 157, column: 3, scope: !321, inlinedAt: !306)
!334 = !DILocation(line: 158, column: 11, scope: !321, inlinedAt: !306)
!335 = !DILocation(line: 158, column: 17, scope: !321, inlinedAt: !306)
!336 = !DILocation(line: 206, column: 33, scope: !337, inlinedAt: !339)
!337 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!338 = !DIFile(filename: "builtin.c3", directory: "/usr/lib/c3c/lib/std/core")
!339 = !DILocation(line: 160, column: 2, scope: !314, inlinedAt: !306)
!340 = !DILocation(line: 206, column: 2, scope: !337, inlinedAt: !339)
!341 = !DILocation(line: 208, column: 2, scope: !337, inlinedAt: !339)
!342 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg128Random.next_int128", scope: !14, file: !14, line: 40, type: !343, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!343 = !DISubroutineType(types: !344)
!344 = !{!15, !255}
!345 = !DILocation(line: 40, column: 56, scope: !342)
!346 = !DILocalVariable(name: "self", arg: 1, scope: !342, file: !14, line: 40, type: !255)
!347 = !DILocation(line: 40, column: 37, scope: !342)
!348 = !DILocation(line: 40, column: 72, scope: !349, inlinedAt: !345)
!349 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!350 = !DILocation(line: 138, column: 45, scope: !349, inlinedAt: !345)
!351 = !DILocation(line: 138, column: 72, scope: !349, inlinedAt: !345)
!352 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg128Random.next_int", scope: !14, file: !14, line: 41, type: !353, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!353 = !DISubroutineType(types: !354)
!354 = !{!20, !255}
!355 = !DILocation(line: 41, column: 50, scope: !352)
!356 = !DILocalVariable(name: "self", arg: 1, scope: !352, file: !14, line: 41, type: !255)
!357 = !DILocation(line: 41, column: 31, scope: !352)
!358 = !DILocation(line: 41, column: 56, scope: !352)
!359 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg128Random.next_short", scope: !14, file: !14, line: 42, type: !360, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!360 = !DISubroutineType(types: !361)
!361 = !{!23, !255}
!362 = !DILocation(line: 42, column: 54, scope: !359)
!363 = !DILocalVariable(name: "self", arg: 1, scope: !359, file: !14, line: 42, type: !255)
!364 = !DILocation(line: 42, column: 35, scope: !359)
!365 = !DILocation(line: 42, column: 62, scope: !359)
!366 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg128Random.next_byte", scope: !14, file: !14, line: 43, type: !367, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!367 = !DISubroutineType(types: !368)
!368 = !{!60, !255}
!369 = !DILocation(line: 43, column: 51, scope: !366)
!370 = !DILocalVariable(name: "self", arg: 1, scope: !366, file: !14, line: 43, type: !255)
!371 = !DILocation(line: 43, column: 32, scope: !366)
!372 = !DILocation(line: 43, column: 57, scope: !366)
!373 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg64Random.set_seed", scope: !14, file: !14, line: 49, type: !374, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!374 = !DISubroutineType(types: !375)
!375 = !{null, !376, !257}
!376 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg64Random*", baseType: !377, size: 64, align: 64, dwarfAddressSpace: 0)
!377 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg64Random", scope: !14, file: !14, line: 47, baseType: !6, align: 8)
!378 = !DILocation(line: 50, column: 1, scope: !373)
!379 = !DILocalVariable(name: "self", arg: 1, scope: !373, file: !14, line: 49, type: !376)
!380 = !DILocation(line: 49, column: 30, scope: !373)
!381 = !DILocalVariable(name: "input", arg: 2, scope: !373, file: !14, line: 49, type: !257)
!382 = !DILocation(line: 49, column: 44, scope: !373)
!383 = !DILocation(line: 51, column: 3, scope: !373)
!384 = !DILocalVariable(name: "return_value", scope: !385, file: !14, line: 10, type: !6, align: 8)
!385 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!386 = !DILocation(line: 10, column: 8, scope: !385, inlinedAt: !387)
!387 = !DILocation(line: 51, column: 10, scope: !373)
!388 = !DILocation(line: 11, column: 2, scope: !385, inlinedAt: !387)
!389 = !DILocation(line: 12, column: 9, scope: !385, inlinedAt: !387)
!390 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg64Random.next_int", scope: !14, file: !14, line: 54, type: !391, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!391 = !DISubroutineType(types: !392)
!392 = !{!20, !376}
!393 = !DILocation(line: 55, column: 1, scope: !390)
!394 = !DILocalVariable(name: "self", arg: 1, scope: !390, file: !14, line: 54, type: !376)
!395 = !DILocation(line: 54, column: 30, scope: !390)
!396 = !DILocalVariable(name: "s", scope: !390, file: !14, line: 57, type: !397, align: 8)
!397 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !6, size: 64, align: 64, dwarfAddressSpace: 0)
!398 = !DILocation(line: 57, column: 9, scope: !390)
!399 = !DILocation(line: 57, column: 21, scope: !390)
!400 = !DILocalVariable(name: "xor", scope: !390, file: !14, line: 58, type: !6, align: 8)
!401 = !DILocation(line: 58, column: 8, scope: !390)
!402 = !DILocation(line: 58, column: 15, scope: !390)
!403 = !DILocation(line: 58, column: 20, scope: !390)
!404 = !DILocation(line: 58, column: 19, scope: !390)
!405 = !DILocation(line: 58, column: 14, scope: !390)
!406 = !DILocalVariable(name: "rot", scope: !390, file: !14, line: 59, type: !60, align: 1)
!407 = !DILocation(line: 59, column: 7, scope: !390)
!408 = !DILocation(line: 59, column: 21, scope: !390)
!409 = !DILocation(line: 59, column: 13, scope: !390)
!410 = !DILocation(line: 60, column: 3, scope: !390)
!411 = !DILocation(line: 60, column: 8, scope: !390)
!412 = !DILocation(line: 60, column: 7, scope: !390)
!413 = !DILocation(line: 61, column: 17, scope: !390)
!414 = !DILocation(line: 61, column: 10, scope: !390)
!415 = !DILocation(line: 61, column: 41, scope: !390)
!416 = !DILocation(line: 99, column: 50, scope: !417, inlinedAt: !414)
!417 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!418 = !DILocation(line: 99, column: 56, scope: !417, inlinedAt: !414)
!419 = !DILocation(line: 99, column: 62, scope: !417, inlinedAt: !414)
!420 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg64Random.next_bytes", scope: !14, file: !14, line: 67, type: !374, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!421 = !DILocation(line: 67, column: 65, scope: !420)
!422 = !DILocalVariable(name: "self", arg: 1, scope: !420, file: !14, line: 67, type: !376)
!423 = !DILocation(line: 67, column: 32, scope: !420)
!424 = !DILocalVariable(name: "bytes", arg: 2, scope: !420, file: !14, line: 67, type: !257)
!425 = !DILocation(line: 67, column: 46, scope: !420)
!426 = !DILocation(line: 65, column: 11, scope: !427)
!427 = distinct !DILexicalBlock(scope: !420, file: !14, line: 67, column: 65)
!428 = !DILocalVariable(name: "len", scope: !429, file: !14, line: 146, type: !262, align: 8)
!429 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!430 = !DILocation(line: 146, column: 6, scope: !429, inlinedAt: !421)
!431 = !DILocation(line: 146, column: 12, scope: !429, inlinedAt: !421)
!432 = !DILocation(line: 148, column: 2, scope: !429, inlinedAt: !421)
!433 = !DILocation(line: 148, column: 9, scope: !434, inlinedAt: !421)
!434 = distinct !DILexicalBlock(scope: !429, file: !2, line: 148, column: 2)
!435 = !DILocalVariable(name: "value", scope: !436, file: !14, line: 150, type: !20, align: 4)
!436 = distinct !DILexicalBlock(scope: !434, file: !2, line: 149, column: 2)
!437 = !DILocation(line: 150, column: 7, scope: !436, inlinedAt: !421)
!438 = !DILocation(line: 67, column: 88, scope: !436, inlinedAt: !421)
!439 = !DILocation(line: 150, column: 15, scope: !436, inlinedAt: !421)
!440 = !DILocation(line: 151, column: 7, scope: !436, inlinedAt: !421)
!441 = !DILocation(line: 153, column: 33, scope: !442, inlinedAt: !421)
!442 = distinct !DILexicalBlock(scope: !436, file: !2, line: 152, column: 3)
!443 = !DILocation(line: 153, column: 17, scope: !442, inlinedAt: !421)
!444 = !DILocation(line: 153, column: 4, scope: !442, inlinedAt: !421)
!445 = !DILocation(line: 153, column: 10, scope: !442, inlinedAt: !421)
!446 = !DILocation(line: 154, column: 10, scope: !442, inlinedAt: !421)
!447 = !DILocation(line: 156, column: 3, scope: !436, inlinedAt: !421)
!448 = !DILocation(line: 157, column: 3, scope: !436, inlinedAt: !421)
!449 = !DILocation(line: 158, column: 11, scope: !436, inlinedAt: !421)
!450 = !DILocation(line: 158, column: 17, scope: !436, inlinedAt: !421)
!451 = !DILocation(line: 206, column: 33, scope: !452, inlinedAt: !453)
!452 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!453 = !DILocation(line: 160, column: 2, scope: !429, inlinedAt: !421)
!454 = !DILocation(line: 206, column: 2, scope: !452, inlinedAt: !453)
!455 = !DILocation(line: 208, column: 2, scope: !452, inlinedAt: !453)
!456 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg64Random.next_int128", scope: !14, file: !14, line: 68, type: !457, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!457 = !DISubroutineType(types: !458)
!458 = !{!15, !376}
!459 = !DILocation(line: 68, column: 55, scope: !456)
!460 = !DILocalVariable(name: "self", arg: 1, scope: !456, file: !14, line: 68, type: !376)
!461 = !DILocation(line: 68, column: 36, scope: !456)
!462 = !DILocation(line: 68, column: 71, scope: !463, inlinedAt: !459)
!463 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!464 = !DILocation(line: 138, column: 45, scope: !463, inlinedAt: !459)
!465 = !DILocation(line: 138, column: 72, scope: !463, inlinedAt: !459)
!466 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg64Random.next_long", scope: !14, file: !14, line: 69, type: !467, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!467 = !DISubroutineType(types: !468)
!468 = !{!6, !376}
!469 = !DILocation(line: 69, column: 51, scope: !466)
!470 = !DILocalVariable(name: "self", arg: 1, scope: !466, file: !14, line: 69, type: !376)
!471 = !DILocation(line: 69, column: 32, scope: !466)
!472 = !DILocation(line: 69, column: 64, scope: !473, inlinedAt: !469)
!473 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!474 = !DILocation(line: 139, column: 40, scope: !473, inlinedAt: !469)
!475 = !DILocation(line: 139, column: 65, scope: !473, inlinedAt: !469)
!476 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg64Random.next_short", scope: !14, file: !14, line: 70, type: !477, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!477 = !DISubroutineType(types: !478)
!478 = !{!23, !376}
!479 = !DILocation(line: 70, column: 53, scope: !476)
!480 = !DILocalVariable(name: "self", arg: 1, scope: !476, file: !14, line: 70, type: !376)
!481 = !DILocation(line: 70, column: 34, scope: !476)
!482 = !DILocation(line: 70, column: 61, scope: !476)
!483 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg64Random.next_byte", scope: !14, file: !14, line: 71, type: !484, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!484 = !DISubroutineType(types: !485)
!485 = !{!60, !376}
!486 = !DILocation(line: 71, column: 50, scope: !483)
!487 = !DILocalVariable(name: "self", arg: 1, scope: !483, file: !14, line: 71, type: !376)
!488 = !DILocation(line: 71, column: 31, scope: !483)
!489 = !DILocation(line: 71, column: 56, scope: !483)
!490 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg32Random.set_seed", scope: !14, file: !14, line: 78, type: !491, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!491 = !DISubroutineType(types: !492)
!492 = !{null, !493, !257}
!493 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg32Random*", baseType: !494, size: 64, align: 64, dwarfAddressSpace: 0)
!494 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg32Random", scope: !14, file: !14, line: 76, baseType: !20, align: 4)
!495 = !DILocation(line: 79, column: 1, scope: !490)
!496 = !DILocalVariable(name: "self", arg: 1, scope: !490, file: !14, line: 78, type: !493)
!497 = !DILocation(line: 78, column: 30, scope: !490)
!498 = !DILocalVariable(name: "input", arg: 2, scope: !490, file: !14, line: 78, type: !257)
!499 = !DILocation(line: 78, column: 44, scope: !490)
!500 = !DILocation(line: 80, column: 3, scope: !490)
!501 = !DILocalVariable(name: "return_value", scope: !502, file: !14, line: 10, type: !20, align: 4)
!502 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!503 = !DILocation(line: 10, column: 8, scope: !502, inlinedAt: !504)
!504 = !DILocation(line: 80, column: 10, scope: !490)
!505 = !DILocation(line: 11, column: 2, scope: !502, inlinedAt: !504)
!506 = !DILocation(line: 12, column: 9, scope: !502, inlinedAt: !504)
!507 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg32Random.next_short", scope: !14, file: !14, line: 83, type: !508, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!508 = !DISubroutineType(types: !509)
!509 = !{!23, !493}
!510 = !DILocation(line: 84, column: 1, scope: !507)
!511 = !DILocalVariable(name: "self", arg: 1, scope: !507, file: !14, line: 83, type: !493)
!512 = !DILocation(line: 83, column: 34, scope: !507)
!513 = !DILocalVariable(name: "s", scope: !507, file: !14, line: 86, type: !514, align: 8)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !20, size: 64, align: 64, dwarfAddressSpace: 0)
!515 = !DILocation(line: 86, column: 8, scope: !507)
!516 = !DILocation(line: 86, column: 19, scope: !507)
!517 = !DILocalVariable(name: "xor", scope: !507, file: !14, line: 87, type: !20, align: 4)
!518 = !DILocation(line: 87, column: 7, scope: !507)
!519 = !DILocation(line: 87, column: 14, scope: !507)
!520 = !DILocation(line: 87, column: 19, scope: !507)
!521 = !DILocation(line: 87, column: 18, scope: !507)
!522 = !DILocation(line: 87, column: 13, scope: !507)
!523 = !DILocalVariable(name: "rot", scope: !507, file: !14, line: 88, type: !60, align: 1)
!524 = !DILocation(line: 88, column: 7, scope: !507)
!525 = !DILocation(line: 88, column: 21, scope: !507)
!526 = !DILocation(line: 88, column: 13, scope: !507)
!527 = !DILocation(line: 89, column: 3, scope: !507)
!528 = !DILocation(line: 89, column: 8, scope: !507)
!529 = !DILocation(line: 89, column: 7, scope: !507)
!530 = !DILocation(line: 90, column: 19, scope: !507)
!531 = !DILocation(line: 90, column: 10, scope: !507)
!532 = !DILocation(line: 90, column: 43, scope: !507)
!533 = !DILocation(line: 115, column: 56, scope: !534, inlinedAt: !531)
!534 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!535 = !DILocation(line: 115, column: 62, scope: !534, inlinedAt: !531)
!536 = !DILocation(line: 115, column: 68, scope: !534, inlinedAt: !531)
!537 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg32Random.next_bytes", scope: !14, file: !14, line: 96, type: !491, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!538 = !DILocation(line: 96, column: 65, scope: !537)
!539 = !DILocalVariable(name: "self", arg: 1, scope: !537, file: !14, line: 96, type: !493)
!540 = !DILocation(line: 96, column: 32, scope: !537)
!541 = !DILocalVariable(name: "bytes", arg: 2, scope: !537, file: !14, line: 96, type: !257)
!542 = !DILocation(line: 96, column: 46, scope: !537)
!543 = !DILocation(line: 94, column: 11, scope: !544)
!544 = distinct !DILexicalBlock(scope: !537, file: !14, line: 96, column: 65)
!545 = !DILocalVariable(name: "len", scope: !546, file: !14, line: 146, type: !262, align: 8)
!546 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!547 = !DILocation(line: 146, column: 6, scope: !546, inlinedAt: !538)
!548 = !DILocation(line: 146, column: 12, scope: !546, inlinedAt: !538)
!549 = !DILocation(line: 148, column: 2, scope: !546, inlinedAt: !538)
!550 = !DILocation(line: 148, column: 9, scope: !551, inlinedAt: !538)
!551 = distinct !DILexicalBlock(scope: !546, file: !2, line: 148, column: 2)
!552 = !DILocalVariable(name: "value", scope: !553, file: !14, line: 150, type: !23, align: 2)
!553 = distinct !DILexicalBlock(scope: !551, file: !2, line: 149, column: 2)
!554 = !DILocation(line: 150, column: 7, scope: !553, inlinedAt: !538)
!555 = !DILocation(line: 96, column: 88, scope: !553, inlinedAt: !538)
!556 = !DILocation(line: 150, column: 15, scope: !553, inlinedAt: !538)
!557 = !DILocation(line: 151, column: 7, scope: !553, inlinedAt: !538)
!558 = !DILocation(line: 153, column: 33, scope: !559, inlinedAt: !538)
!559 = distinct !DILexicalBlock(scope: !553, file: !2, line: 152, column: 3)
!560 = !DILocation(line: 153, column: 17, scope: !559, inlinedAt: !538)
!561 = !DILocation(line: 153, column: 4, scope: !559, inlinedAt: !538)
!562 = !DILocation(line: 153, column: 10, scope: !559, inlinedAt: !538)
!563 = !DILocation(line: 154, column: 10, scope: !559, inlinedAt: !538)
!564 = !DILocation(line: 156, column: 3, scope: !553, inlinedAt: !538)
!565 = !DILocation(line: 157, column: 3, scope: !553, inlinedAt: !538)
!566 = !DILocation(line: 158, column: 11, scope: !553, inlinedAt: !538)
!567 = !DILocation(line: 158, column: 17, scope: !553, inlinedAt: !538)
!568 = !DILocation(line: 206, column: 33, scope: !569, inlinedAt: !570)
!569 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!570 = !DILocation(line: 160, column: 2, scope: !546, inlinedAt: !538)
!571 = !DILocation(line: 206, column: 2, scope: !569, inlinedAt: !570)
!572 = !DILocation(line: 208, column: 2, scope: !569, inlinedAt: !570)
!573 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg32Random.next_int128", scope: !14, file: !14, line: 97, type: !574, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!574 = !DISubroutineType(types: !575)
!575 = !{!15, !493}
!576 = !DILocation(line: 97, column: 55, scope: !573)
!577 = !DILocalVariable(name: "self", arg: 1, scope: !573, file: !14, line: 97, type: !493)
!578 = !DILocation(line: 97, column: 36, scope: !573)
!579 = !DILocation(line: 97, column: 71, scope: !580, inlinedAt: !576)
!580 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!581 = !DILocation(line: 138, column: 45, scope: !580, inlinedAt: !576)
!582 = !DILocation(line: 138, column: 72, scope: !580, inlinedAt: !576)
!583 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg32Random.next_long", scope: !14, file: !14, line: 98, type: !584, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!584 = !DISubroutineType(types: !585)
!585 = !{!6, !493}
!586 = !DILocation(line: 98, column: 51, scope: !583)
!587 = !DILocalVariable(name: "self", arg: 1, scope: !583, file: !14, line: 98, type: !493)
!588 = !DILocation(line: 98, column: 32, scope: !583)
!589 = !DILocation(line: 98, column: 64, scope: !590, inlinedAt: !586)
!590 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!591 = !DILocation(line: 139, column: 40, scope: !590, inlinedAt: !586)
!592 = !DILocation(line: 139, column: 65, scope: !590, inlinedAt: !586)
!593 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg32Random.next_int", scope: !14, file: !14, line: 99, type: !594, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!594 = !DISubroutineType(types: !595)
!595 = !{!20, !493}
!596 = !DILocation(line: 99, column: 49, scope: !593)
!597 = !DILocalVariable(name: "self", arg: 1, scope: !593, file: !14, line: 99, type: !493)
!598 = !DILocation(line: 99, column: 30, scope: !593)
!599 = !DILocation(line: 99, column: 63, scope: !600, inlinedAt: !596)
!600 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!601 = !DILocation(line: 140, column: 40, scope: !600, inlinedAt: !596)
!602 = !DILocation(line: 140, column: 64, scope: !600, inlinedAt: !596)
!603 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg32Random.next_byte", scope: !14, file: !14, line: 100, type: !604, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!604 = !DISubroutineType(types: !605)
!605 = !{!60, !493}
!606 = !DILocation(line: 100, column: 50, scope: !603)
!607 = !DILocalVariable(name: "self", arg: 1, scope: !603, file: !14, line: 100, type: !493)
!608 = !DILocation(line: 100, column: 31, scope: !603)
!609 = !DILocation(line: 100, column: 56, scope: !603)
!610 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg16Random.set_seed", scope: !14, file: !14, line: 106, type: !611, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!611 = !DISubroutineType(types: !612)
!612 = !{null, !613, !257}
!613 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg16Random*", baseType: !614, size: 64, align: 64, dwarfAddressSpace: 0)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg16Random", scope: !14, file: !14, line: 104, baseType: !23, align: 2)
!615 = !DILocation(line: 107, column: 1, scope: !610)
!616 = !DILocalVariable(name: "self", arg: 1, scope: !610, file: !14, line: 106, type: !613)
!617 = !DILocation(line: 106, column: 30, scope: !610)
!618 = !DILocalVariable(name: "input", arg: 2, scope: !610, file: !14, line: 106, type: !257)
!619 = !DILocation(line: 106, column: 44, scope: !610)
!620 = !DILocation(line: 108, column: 3, scope: !610)
!621 = !DILocalVariable(name: "return_value", scope: !622, file: !14, line: 10, type: !23, align: 2)
!622 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!623 = !DILocation(line: 10, column: 8, scope: !622, inlinedAt: !624)
!624 = !DILocation(line: 108, column: 10, scope: !610)
!625 = !DILocation(line: 11, column: 2, scope: !622, inlinedAt: !624)
!626 = !DILocation(line: 12, column: 9, scope: !622, inlinedAt: !624)
!627 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg16Random.next_byte", scope: !14, file: !14, line: 111, type: !628, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!628 = !DISubroutineType(types: !629)
!629 = !{!60, !613}
!630 = !DILocation(line: 112, column: 1, scope: !627)
!631 = !DILocalVariable(name: "self", arg: 1, scope: !627, file: !14, line: 111, type: !613)
!632 = !DILocation(line: 111, column: 31, scope: !627)
!633 = !DILocalVariable(name: "s", scope: !627, file: !14, line: 114, type: !634, align: 8)
!634 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !23, size: 64, align: 64, dwarfAddressSpace: 0)
!635 = !DILocation(line: 114, column: 10, scope: !627)
!636 = !DILocation(line: 114, column: 23, scope: !627)
!637 = !DILocalVariable(name: "xor", scope: !627, file: !14, line: 115, type: !23, align: 2)
!638 = !DILocation(line: 115, column: 9, scope: !627)
!639 = !DILocation(line: 115, column: 16, scope: !627)
!640 = !DILocation(line: 115, column: 21, scope: !627)
!641 = !DILocation(line: 115, column: 20, scope: !627)
!642 = !DILocation(line: 115, column: 15, scope: !627)
!643 = !DILocalVariable(name: "rot", scope: !627, file: !14, line: 116, type: !60, align: 1)
!644 = !DILocation(line: 116, column: 7, scope: !627)
!645 = !DILocation(line: 116, column: 21, scope: !627)
!646 = !DILocation(line: 116, column: 13, scope: !627)
!647 = !DILocation(line: 117, column: 3, scope: !627)
!648 = !DILocation(line: 117, column: 8, scope: !627)
!649 = !DILocation(line: 117, column: 7, scope: !627)
!650 = !DILocation(line: 118, column: 17, scope: !627)
!651 = !DILocation(line: 118, column: 10, scope: !627)
!652 = !DILocation(line: 131, column: 50, scope: !653, inlinedAt: !651)
!653 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!654 = !DILocation(line: 131, column: 56, scope: !653, inlinedAt: !651)
!655 = !DILocation(line: 131, column: 62, scope: !653, inlinedAt: !651)
!656 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg16Random.next_bytes", scope: !14, file: !14, line: 121, type: !611, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!657 = !DILocation(line: 121, column: 65, scope: !656)
!658 = !DILocalVariable(name: "self", arg: 1, scope: !656, file: !14, line: 121, type: !613)
!659 = !DILocation(line: 121, column: 32, scope: !656)
!660 = !DILocalVariable(name: "bytes", arg: 2, scope: !656, file: !14, line: 121, type: !257)
!661 = !DILocation(line: 121, column: 46, scope: !656)
!662 = !DILocalVariable(name: "len", scope: !663, file: !14, line: 146, type: !262, align: 8)
!663 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!664 = !DILocation(line: 146, column: 6, scope: !663, inlinedAt: !657)
!665 = !DILocation(line: 146, column: 12, scope: !663, inlinedAt: !657)
!666 = !DILocation(line: 148, column: 2, scope: !663, inlinedAt: !657)
!667 = !DILocation(line: 148, column: 9, scope: !668, inlinedAt: !657)
!668 = distinct !DILexicalBlock(scope: !663, file: !2, line: 148, column: 2)
!669 = !DILocalVariable(name: "value", scope: !670, file: !14, line: 150, type: !60, align: 1)
!670 = distinct !DILexicalBlock(scope: !668, file: !2, line: 149, column: 2)
!671 = !DILocation(line: 150, column: 7, scope: !670, inlinedAt: !657)
!672 = !DILocation(line: 121, column: 88, scope: !670, inlinedAt: !657)
!673 = !DILocation(line: 150, column: 15, scope: !670, inlinedAt: !657)
!674 = !DILocation(line: 151, column: 7, scope: !670, inlinedAt: !657)
!675 = !DILocation(line: 153, column: 33, scope: !676, inlinedAt: !657)
!676 = distinct !DILexicalBlock(scope: !670, file: !2, line: 152, column: 3)
!677 = !DILocation(line: 153, column: 17, scope: !676, inlinedAt: !657)
!678 = !DILocation(line: 153, column: 4, scope: !676, inlinedAt: !657)
!679 = !DILocation(line: 153, column: 10, scope: !676, inlinedAt: !657)
!680 = !DILocation(line: 154, column: 10, scope: !676, inlinedAt: !657)
!681 = !DILocation(line: 156, column: 3, scope: !670, inlinedAt: !657)
!682 = !DILocation(line: 157, column: 3, scope: !670, inlinedAt: !657)
!683 = !DILocation(line: 158, column: 11, scope: !670, inlinedAt: !657)
!684 = !DILocation(line: 158, column: 17, scope: !670, inlinedAt: !657)
!685 = !DILocation(line: 206, column: 33, scope: !686, inlinedAt: !687)
!686 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!687 = !DILocation(line: 160, column: 2, scope: !663, inlinedAt: !657)
!688 = !DILocation(line: 206, column: 2, scope: !686, inlinedAt: !687)
!689 = !DILocation(line: 208, column: 2, scope: !686, inlinedAt: !687)
!690 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg16Random.next_int128", scope: !14, file: !14, line: 122, type: !691, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!691 = !DISubroutineType(types: !692)
!692 = !{!15, !613}
!693 = !DILocation(line: 122, column: 55, scope: !690)
!694 = !DILocalVariable(name: "self", arg: 1, scope: !690, file: !14, line: 122, type: !613)
!695 = !DILocation(line: 122, column: 36, scope: !690)
!696 = !DILocation(line: 122, column: 71, scope: !697, inlinedAt: !693)
!697 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!698 = !DILocation(line: 138, column: 45, scope: !697, inlinedAt: !693)
!699 = !DILocation(line: 138, column: 72, scope: !697, inlinedAt: !693)
!700 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg16Random.next_long", scope: !14, file: !14, line: 123, type: !701, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!701 = !DISubroutineType(types: !702)
!702 = !{!6, !613}
!703 = !DILocation(line: 123, column: 51, scope: !700)
!704 = !DILocalVariable(name: "self", arg: 1, scope: !700, file: !14, line: 123, type: !613)
!705 = !DILocation(line: 123, column: 32, scope: !700)
!706 = !DILocation(line: 123, column: 64, scope: !707, inlinedAt: !703)
!707 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!708 = !DILocation(line: 139, column: 40, scope: !707, inlinedAt: !703)
!709 = !DILocation(line: 139, column: 65, scope: !707, inlinedAt: !703)
!710 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg16Random.next_int", scope: !14, file: !14, line: 124, type: !711, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!711 = !DISubroutineType(types: !712)
!712 = !{!20, !613}
!713 = !DILocation(line: 124, column: 49, scope: !710)
!714 = !DILocalVariable(name: "self", arg: 1, scope: !710, file: !14, line: 124, type: !613)
!715 = !DILocation(line: 124, column: 30, scope: !710)
!716 = !DILocation(line: 124, column: 63, scope: !717, inlinedAt: !713)
!717 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!718 = !DILocation(line: 140, column: 40, scope: !717, inlinedAt: !713)
!719 = !DILocation(line: 140, column: 64, scope: !717, inlinedAt: !713)
!720 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg16Random.next_short", scope: !14, file: !14, line: 125, type: !721, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!721 = !DISubroutineType(types: !722)
!722 = !{!23, !613}
!723 = !DILocation(line: 125, column: 53, scope: !720)
!724 = !DILocalVariable(name: "self", arg: 1, scope: !720, file: !14, line: 125, type: !613)
!725 = !DILocation(line: 125, column: 34, scope: !720)
!726 = !DILocation(line: 125, column: 68, scope: !727, inlinedAt: !723)
!727 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!728 = !DILocation(line: 141, column: 43, scope: !727, inlinedAt: !723)
!729 = !DILocation(line: 141, column: 68, scope: !727, inlinedAt: !723)
!730 = distinct !DISubprogram(name: "seeder", linkageName: "std.math.random.seeder", scope: !43, file: !43, line: 20, type: !731, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!731 = !DISubroutineType(types: !732)
!732 = !{null, !257, !257}
!733 = !DILocalVariable(name: "input", arg: 1, scope: !730, file: !43, line: 20, type: !257)
!734 = !DILocation(line: 20, column: 23, scope: !730)
!735 = !DILocalVariable(name: "out_buffer", arg: 2, scope: !730, file: !43, line: 20, type: !257)
!736 = !DILocation(line: 20, column: 37, scope: !730)
!737 = !DILocalVariable(name: "out_chars", scope: !730, file: !43, line: 26, type: !262, align: 8)
!738 = !DILocation(line: 26, column: 6, scope: !730)
!739 = !DILocation(line: 26, column: 18, scope: !730)
!740 = !DILocalVariable(name: "state", scope: !741, file: !43, line: 594, type: !743, align: 8)
!741 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !742, file: !742, line: 592, scopeLine: 592, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!742 = !DIFile(filename: "mem.c3", directory: "/usr/lib/c3c/lib/std/core")
!743 = !DIDerivedType(tag: DW_TAG_typedef, name: "PoolState", scope: !43, file: !43, line: 402, baseType: !744, align: 8)
!744 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !745, size: 64, align: 64, dwarfAddressSpace: 0)
!745 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !43, file: !43, line: 32, size: 512, align: 64, elements: !746, identifier: "std.core.mem.allocator.TempAllocator")
!746 = !{!747, !754, !766, !767, !768, !769, !770, !771}
!747 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !745, file: !43, line: 34, baseType: !748, size: 128, align: 64)
!748 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !749, identifier: "Allocator")
!749 = !{!750, !752}
!750 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !748, baseType: !751, size: 64, align: 64)
!751 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!752 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !748, baseType: !753, size: 64, align: 64, offset: 64)
!753 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!754 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !745, file: !43, line: 35, baseType: !755, size: 64, align: 64, offset: 128)
!755 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !756, size: 64, align: 64, dwarfAddressSpace: 0)
!756 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !43, file: !43, line: 52, size: 256, align: 64, elements: !757, identifier: "std.core.mem.allocator.TempAllocatorPage")
!757 = !{!758, !759, !760, !761, !762}
!758 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !756, file: !43, line: 54, baseType: !755, size: 64, align: 64)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !756, file: !43, line: 55, baseType: !751, size: 64, align: 64, offset: 64)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !756, file: !43, line: 56, baseType: !262, size: 64, align: 64, offset: 128)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !756, file: !43, line: 57, baseType: !262, size: 64, align: 64, offset: 192)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !756, file: !43, line: 58, baseType: !763, align: 8, offset: 256)
!763 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, align: 8, elements: !764)
!764 = !{!765}
!765 = !DISubrange(count: 0, lowerBound: 0)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "derived", scope: !745, file: !43, line: 36, baseType: !744, size: 64, align: 64, offset: 192)
!767 = !DIDerivedType(tag: DW_TAG_member, name: "allocated", scope: !745, file: !43, line: 37, baseType: !11, size: 8, align: 8, offset: 256)
!768 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !745, file: !43, line: 38, baseType: !262, size: 64, align: 64, offset: 320)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !745, file: !43, line: 39, baseType: !262, size: 64, align: 64, offset: 384)
!770 = !DIDerivedType(tag: DW_TAG_member, name: "original_capacity", scope: !745, file: !43, line: 40, baseType: !262, size: 64, align: 64, offset: 448)
!771 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !745, file: !43, line: 41, baseType: !763, align: 8, offset: 512)
!772 = !DILocation(line: 594, column: 12, scope: !741, inlinedAt: !773)
!773 = !DILocation(line: 27, column: 2, scope: !730)
!774 = !DILocation(line: 594, column: 20, scope: !741, inlinedAt: !773)
!775 = !DILocalVariable(name: "words", scope: !776, file: !43, line: 29, type: !777, align: 8)
!776 = distinct !DILexicalBlock(scope: !730, file: !43, line: 28, column: 2)
!777 = !DICompositeType(tag: DW_TAG_structure_type, name: "ulong[]", size: 128, align: 64, elements: !778, identifier: "ulong[]")
!778 = !{!779, !780}
!779 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !777, baseType: !397, size: 64, align: 64)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !777, baseType: !262, size: 64, align: 64, offset: 64)
!781 = !DILocation(line: 29, column: 11, scope: !776)
!782 = !DILocation(line: 29, column: 45, scope: !776)
!783 = !DILocation(line: 832, column: 41, scope: !784, inlinedAt: !785)
!784 = distinct !DISubprogram(name: "talloc_array", linkageName: "talloc_array", scope: !742, file: !742, line: 830, scopeLine: 830, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!785 = !DILocation(line: 29, column: 19, scope: !776)
!786 = !DILocation(line: 832, column: 26, scope: !784, inlinedAt: !785)
!787 = !DILocation(line: 832, column: 18, scope: !784, inlinedAt: !785)
!788 = !DILocation(line: 832, column: 68, scope: !784, inlinedAt: !785)
!789 = !DILocation(line: 832, column: 10, scope: !784, inlinedAt: !785)
!790 = !DILocation(line: 30, column: 3, scope: !776)
!791 = !DILocation(line: 30, column: 9, scope: !776)
!792 = !DILocalVariable(name: "words_len_2", scope: !776, file: !43, line: 31, type: !262, align: 8)
!793 = !DILocation(line: 31, column: 7, scope: !776)
!794 = !DILocation(line: 31, column: 21, scope: !776)
!795 = !DILocalVariable(name: "i", scope: !796, file: !43, line: 34, type: !262, align: 8)
!796 = distinct !DILexicalBlock(scope: !776, file: !43, line: 34, column: 3)
!797 = !DILocation(line: 34, column: 12, scope: !796)
!798 = !DILocation(line: 34, column: 16, scope: !796)
!799 = !DILocation(line: 34, column: 19, scope: !796)
!800 = !DILocation(line: 34, column: 23, scope: !796)
!801 = !DILocalVariable(name: "j", scope: !802, file: !43, line: 36, type: !262, align: 8)
!802 = distinct !DILexicalBlock(scope: !796, file: !43, line: 35, column: 3)
!803 = !DILocation(line: 36, column: 8, scope: !802)
!804 = !DILocation(line: 36, column: 12, scope: !802)
!805 = !DILocation(line: 36, column: 16, scope: !802)
!806 = !DILocation(line: 37, column: 4, scope: !802)
!807 = !DILocation(line: 37, column: 10, scope: !802)
!808 = !DILocation(line: 37, column: 36, scope: !802)
!809 = !DILocation(line: 37, column: 42, scope: !802)
!810 = !DILocalVariable(name: "x", scope: !811, file: !43, line: 256, type: !6, align: 8)
!811 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!812 = !DILocation(line: 256, column: 9, scope: !811, inlinedAt: !813)
!813 = !DILocation(line: 37, column: 16, scope: !802)
!814 = !DILocation(line: 257, column: 38, scope: !811, inlinedAt: !813)
!815 = !DILocation(line: 258, column: 10, scope: !811, inlinedAt: !813)
!816 = !DILocation(line: 38, column: 4, scope: !802)
!817 = !DILocation(line: 38, column: 10, scope: !802)
!818 = !DILocation(line: 38, column: 16, scope: !802)
!819 = !DILocation(line: 38, column: 22, scope: !802)
!820 = !DILocation(line: 34, column: 38, scope: !796)
!821 = !DILocalVariable(name: "remaining", scope: !776, file: !43, line: 42, type: !262, align: 8)
!822 = !DILocation(line: 42, column: 7, scope: !776)
!823 = !DILocation(line: 42, column: 19, scope: !776)
!824 = !DILocation(line: 42, column: 31, scope: !776)
!825 = !DILocation(line: 43, column: 7, scope: !776)
!826 = !DILocalVariable(name: "rest", scope: !827, file: !43, line: 45, type: !6, align: 8)
!827 = distinct !DILexicalBlock(scope: !776, file: !43, line: 44, column: 3)
!828 = !DILocation(line: 45, column: 10, scope: !827)
!829 = !DILocation(line: 45, column: 17, scope: !827)
!830 = !DILocation(line: 46, column: 22, scope: !827)
!831 = !DILocation(line: 46, column: 29, scope: !827)
!832 = !DILocation(line: 329, column: 23, scope: !833, inlinedAt: !835)
!833 = distinct !DILexicalBlock(scope: !834, file: !742, line: 330, column: 1)
!834 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !742, file: !742, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!835 = !DILocation(line: 46, column: 4, scope: !827)
!836 = !DILocation(line: 326, column: 11, scope: !833, inlinedAt: !835)
!837 = !DILocation(line: 326, column: 26, scope: !833, inlinedAt: !835)
!838 = !DILocation(line: 46, column: 4, scope: !833, inlinedAt: !835)
!839 = !DILocation(line: 327, column: 11, scope: !833, inlinedAt: !835)
!840 = !DILocation(line: 327, column: 23, scope: !833, inlinedAt: !835)
!841 = !DILocation(line: 327, column: 29, scope: !833, inlinedAt: !835)
!842 = !DILocation(line: 327, column: 36, scope: !833, inlinedAt: !835)
!843 = !DILocation(line: 327, column: 43, scope: !833, inlinedAt: !835)
!844 = !DILocation(line: 327, column: 49, scope: !833, inlinedAt: !835)
!845 = !DILocation(line: 327, column: 56, scope: !833, inlinedAt: !835)
!846 = !DILocation(line: 331, column: 11, scope: !834, inlinedAt: !835)
!847 = !DILocation(line: 331, column: 16, scope: !834, inlinedAt: !835)
!848 = !DILocation(line: 331, column: 21, scope: !834, inlinedAt: !835)
!849 = !DILocation(line: 331, column: 26, scope: !834, inlinedAt: !835)
!850 = !DILocation(line: 47, column: 4, scope: !827)
!851 = !DILocation(line: 47, column: 11, scope: !827)
!852 = !DILocation(line: 47, column: 17, scope: !827)
!853 = !DILocation(line: 48, column: 4, scope: !827)
!854 = !DILocation(line: 48, column: 11, scope: !827)
!855 = !DILocation(line: 48, column: 17, scope: !827)
!856 = !DILocation(line: 48, column: 24, scope: !827)
!857 = !DILocalVariable(name: "i", scope: !858, file: !43, line: 52, type: !859, align: 8)
!858 = distinct !DILexicalBlock(scope: !776, file: !43, line: 52, column: 3)
!859 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !64)
!860 = !DILocation(line: 52, column: 12, scope: !858)
!861 = !DILocation(line: 52, column: 16, scope: !858)
!862 = !DILocation(line: 52, column: 33, scope: !858)
!863 = !DILocalVariable(name: "j", scope: !864, file: !43, line: 54, type: !859, align: 8)
!864 = distinct !DILexicalBlock(scope: !858, file: !43, line: 53, column: 3)
!865 = !DILocation(line: 54, column: 8, scope: !864)
!866 = !DILocation(line: 54, column: 12, scope: !864)
!867 = !DILocation(line: 54, column: 16, scope: !864)
!868 = !DILocation(line: 55, column: 4, scope: !864)
!869 = !DILocation(line: 55, column: 10, scope: !864)
!870 = !DILocation(line: 55, column: 16, scope: !864)
!871 = !DILocation(line: 55, column: 23, scope: !864)
!872 = !DILocation(line: 55, column: 32, scope: !864)
!873 = !DILocation(line: 56, column: 4, scope: !864)
!874 = !DILocation(line: 56, column: 10, scope: !864)
!875 = !DILocation(line: 56, column: 16, scope: !864)
!876 = !DILocation(line: 56, column: 22, scope: !864)
!877 = !DILocation(line: 52, column: 41, scope: !858)
!878 = !DILocalVariable(name: "i", scope: !879, file: !43, line: 60, type: !262, align: 8)
!879 = distinct !DILexicalBlock(scope: !776, file: !43, line: 60, column: 3)
!880 = !DILocation(line: 60, column: 12, scope: !879)
!881 = !DILocation(line: 60, column: 16, scope: !879)
!882 = !DILocation(line: 60, column: 19, scope: !879)
!883 = !DILocation(line: 60, column: 23, scope: !879)
!884 = !DILocalVariable(name: "j", scope: !885, file: !43, line: 62, type: !262, align: 8)
!885 = distinct !DILexicalBlock(scope: !879, file: !43, line: 61, column: 3)
!886 = !DILocation(line: 62, column: 8, scope: !885)
!887 = !DILocation(line: 62, column: 12, scope: !885)
!888 = !DILocation(line: 62, column: 16, scope: !885)
!889 = !DILocation(line: 63, column: 4, scope: !885)
!890 = !DILocation(line: 63, column: 10, scope: !885)
!891 = !DILocation(line: 64, column: 4, scope: !885)
!892 = !DILocation(line: 64, column: 10, scope: !885)
!893 = !DILocation(line: 64, column: 16, scope: !885)
!894 = !DILocation(line: 64, column: 22, scope: !885)
!895 = !DILocation(line: 60, column: 36, scope: !879)
!896 = !DILocation(line: 66, column: 28, scope: !776)
!897 = !DILocation(line: 66, column: 40, scope: !776)
!898 = !DILocation(line: 66, column: 21, scope: !776)
!899 = !DILocation(line: 66, column: 3, scope: !776)
!900 = !DILocation(line: 66, column: 14, scope: !776)
!901 = !DILocation(line: 597, column: 23, scope: !902, inlinedAt: !773)
!902 = distinct !DILexicalBlock(scope: !741, file: !742, line: 596, column: 2)
!903 = !DILocation(line: 597, column: 3, scope: !902, inlinedAt: !773)
!904 = !DILocation(line: 37, column: 25, scope: !802)
!905 = distinct !DISubprogram(name: "entropy", linkageName: "std.math.random.entropy", scope: !43, file: !43, line: 75, type: !906, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!906 = !DISubroutineType(types: !907)
!907 = !{!908}
!908 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 256, align: 8, elements: !909)
!909 = !{!910}
!910 = !DISubrange(count: 32, lowerBound: 0)
!911 = !DILocalVariable(name: "addr", scope: !905, file: !43, line: 78, type: !751, align: 8)
!912 = !DILocation(line: 78, column: 8, scope: !905)
!913 = !DILocation(line: 78, column: 15, scope: !905)
!914 = !DILocation(line: 79, column: 7, scope: !905)
!915 = !DILocation(line: 79, column: 2, scope: !905)
!916 = !DILocation(line: 81, column: 2, scope: !905)
!917 = !DILocalVariable(name: "entropy_data", scope: !905, file: !43, line: 82, type: !918, align: 16)
!918 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 256, align: 32, elements: !919)
!919 = !{!920}
!920 = !DISubrange(count: 8, lowerBound: 0)
!921 = !DILocation(line: 82, column: 10, scope: !905)
!922 = !DILocation(line: 254, column: 20, scope: !923, inlinedAt: !924)
!923 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!924 = !DILocation(line: 72, column: 24, scope: !925, inlinedAt: !926)
!925 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !43, file: !43, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!926 = !DILocation(line: 83, column: 3, scope: !905)
!927 = !DILocation(line: 254, column: 11, scope: !923, inlinedAt: !924)
!928 = !DILocation(line: 72, column: 9, scope: !925, inlinedAt: !926)
!929 = !DILocation(line: 254, column: 20, scope: !930, inlinedAt: !931)
!930 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!931 = !DILocation(line: 72, column: 24, scope: !932, inlinedAt: !933)
!932 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !43, file: !43, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!933 = !DILocation(line: 84, column: 3, scope: !905)
!934 = !DILocation(line: 254, column: 11, scope: !930, inlinedAt: !931)
!935 = !DILocation(line: 72, column: 9, scope: !932, inlinedAt: !933)
!936 = !DILocation(line: 254, column: 20, scope: !937, inlinedAt: !938)
!937 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!938 = !DILocation(line: 72, column: 24, scope: !939, inlinedAt: !940)
!939 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !43, file: !43, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!940 = !DILocation(line: 85, column: 3, scope: !905)
!941 = !DILocation(line: 254, column: 11, scope: !937, inlinedAt: !938)
!942 = !DILocation(line: 72, column: 9, scope: !939, inlinedAt: !940)
!943 = !DILocation(line: 254, column: 20, scope: !944, inlinedAt: !945)
!944 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!945 = !DILocation(line: 72, column: 24, scope: !946, inlinedAt: !947)
!946 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !43, file: !43, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!947 = !DILocation(line: 86, column: 3, scope: !905)
!948 = !DILocation(line: 254, column: 11, scope: !944, inlinedAt: !945)
!949 = !DILocation(line: 72, column: 9, scope: !946, inlinedAt: !947)
!950 = !DILocation(line: 87, column: 3, scope: !905)
!951 = !DILocation(line: 88, column: 8, scope: !905)
!952 = !DILocation(line: 254, column: 20, scope: !953, inlinedAt: !954)
!953 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!954 = !DILocation(line: 72, column: 24, scope: !955, inlinedAt: !956)
!955 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !43, file: !43, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!956 = !DILocation(line: 88, column: 3, scope: !905)
!957 = !DILocation(line: 254, column: 11, scope: !953, inlinedAt: !954)
!958 = !DILocation(line: 72, column: 9, scope: !955, inlinedAt: !956)
!959 = !DILocation(line: 254, column: 20, scope: !960, inlinedAt: !961)
!960 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!961 = !DILocation(line: 72, column: 24, scope: !962, inlinedAt: !963)
!962 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !43, file: !43, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!963 = !DILocation(line: 89, column: 3, scope: !905)
!964 = !DILocation(line: 254, column: 11, scope: !960, inlinedAt: !961)
!965 = !DILocation(line: 72, column: 9, scope: !962, inlinedAt: !963)
!966 = !DILocation(line: 254, column: 20, scope: !967, inlinedAt: !968)
!967 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!968 = !DILocation(line: 72, column: 24, scope: !969, inlinedAt: !970)
!969 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !43, file: !43, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!970 = !DILocation(line: 90, column: 3, scope: !905)
!971 = !DILocation(line: 254, column: 11, scope: !967, inlinedAt: !968)
!972 = !DILocation(line: 72, column: 9, scope: !969, inlinedAt: !970)
!973 = !DILocation(line: 254, column: 20, scope: !974, inlinedAt: !975)
!974 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!975 = !DILocation(line: 92, column: 9, scope: !905)
!976 = !DILocation(line: 254, column: 11, scope: !974, inlinedAt: !975)
!977 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc128Random.set_seed", scope: !4, file: !4, line: 15, type: !978, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!978 = !DISubroutineType(types: !979)
!979 = !{null, !980, !257}
!980 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc128Random*", baseType: !981, size: 64, align: 64, dwarfAddressSpace: 0)
!981 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc128Random", scope: !4, file: !4, line: 13, baseType: !982, align: 16)
!982 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 512, align: 128, elements: !7)
!983 = !DILocation(line: 16, column: 1, scope: !977)
!984 = !DILocalVariable(name: "self", arg: 1, scope: !977, file: !4, line: 15, type: !980)
!985 = !DILocation(line: 15, column: 31, scope: !977)
!986 = !DILocalVariable(name: "input", arg: 2, scope: !977, file: !4, line: 15, type: !257)
!987 = !DILocation(line: 15, column: 45, scope: !977)
!988 = !DILocation(line: 17, column: 3, scope: !977)
!989 = !DILocalVariable(name: "return_value", scope: !990, file: !4, line: 10, type: !982, align: 16)
!990 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!991 = !DILocation(line: 10, column: 8, scope: !990, inlinedAt: !992)
!992 = !DILocation(line: 17, column: 10, scope: !977)
!993 = !DILocation(line: 11, column: 2, scope: !990, inlinedAt: !992)
!994 = !DILocation(line: 12, column: 9, scope: !990, inlinedAt: !992)
!995 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc128Random.next_int128", scope: !4, file: !4, line: 20, type: !996, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!996 = !DISubroutineType(types: !997)
!997 = !{!15, !980}
!998 = !DILocation(line: 21, column: 1, scope: !995)
!999 = !DILocalVariable(name: "self", arg: 1, scope: !995, file: !4, line: 20, type: !980)
!1000 = !DILocation(line: 20, column: 37, scope: !995)
!1001 = !DILocalVariable(name: "s", scope: !995, file: !4, line: 22, type: !282, align: 8)
!1002 = !DILocation(line: 22, column: 11, scope: !995)
!1003 = !DILocation(line: 22, column: 28, scope: !995)
!1004 = !DILocalVariable(name: "result", scope: !995, file: !4, line: 23, type: !15, align: 16)
!1005 = !DILocation(line: 23, column: 10, scope: !995)
!1006 = !DILocation(line: 23, column: 19, scope: !995)
!1007 = !DILocation(line: 23, column: 21, scope: !995)
!1008 = !DILocation(line: 23, column: 26, scope: !995)
!1009 = !DILocation(line: 23, column: 28, scope: !995)
!1010 = !DILocation(line: 23, column: 33, scope: !995)
!1011 = !DILocation(line: 23, column: 35, scope: !995)
!1012 = !DILocation(line: 24, column: 2, scope: !995)
!1013 = !DILocation(line: 24, column: 9, scope: !995)
!1014 = !DILocation(line: 24, column: 11, scope: !995)
!1015 = !DILocation(line: 24, column: 16, scope: !995)
!1016 = !DILocation(line: 24, column: 18, scope: !995)
!1017 = !DILocation(line: 25, column: 2, scope: !995)
!1018 = !DILocation(line: 25, column: 4, scope: !995)
!1019 = !DILocation(line: 25, column: 9, scope: !995)
!1020 = !DILocation(line: 25, column: 11, scope: !995)
!1021 = !DILocation(line: 25, column: 16, scope: !995)
!1022 = !DILocation(line: 25, column: 18, scope: !995)
!1023 = !DILocation(line: 26, column: 2, scope: !995)
!1024 = !DILocation(line: 26, column: 4, scope: !995)
!1025 = !DILocation(line: 26, column: 9, scope: !995)
!1026 = !DILocation(line: 26, column: 11, scope: !995)
!1027 = !DILocation(line: 163, column: 59, scope: !1028, inlinedAt: !1025)
!1028 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1029 = !DILocation(line: 163, column: 65, scope: !1028, inlinedAt: !1025)
!1030 = !DILocation(line: 163, column: 71, scope: !1028, inlinedAt: !1025)
!1031 = !DILocation(line: 26, column: 25, scope: !995)
!1032 = !DILocation(line: 27, column: 2, scope: !995)
!1033 = !DILocation(line: 27, column: 4, scope: !995)
!1034 = !DILocation(line: 28, column: 9, scope: !995)
!1035 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc128Random.next_bytes", scope: !4, file: !4, line: 34, type: !978, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1036 = !DILocation(line: 34, column: 66, scope: !1035)
!1037 = !DILocalVariable(name: "self", arg: 1, scope: !1035, file: !4, line: 34, type: !980)
!1038 = !DILocation(line: 34, column: 33, scope: !1035)
!1039 = !DILocalVariable(name: "bytes", arg: 2, scope: !1035, file: !4, line: 34, type: !257)
!1040 = !DILocation(line: 34, column: 47, scope: !1035)
!1041 = !DILocation(line: 32, column: 11, scope: !1042)
!1042 = distinct !DILexicalBlock(scope: !1035, file: !4, line: 34, column: 66)
!1043 = !DILocalVariable(name: "len", scope: !1044, file: !4, line: 146, type: !262, align: 8)
!1044 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1045 = !DILocation(line: 146, column: 6, scope: !1044, inlinedAt: !1036)
!1046 = !DILocation(line: 146, column: 12, scope: !1044, inlinedAt: !1036)
!1047 = !DILocation(line: 148, column: 2, scope: !1044, inlinedAt: !1036)
!1048 = !DILocation(line: 148, column: 9, scope: !1049, inlinedAt: !1036)
!1049 = distinct !DILexicalBlock(scope: !1044, file: !2, line: 148, column: 2)
!1050 = !DILocalVariable(name: "value", scope: !1051, file: !4, line: 150, type: !15, align: 16)
!1051 = distinct !DILexicalBlock(scope: !1049, file: !2, line: 149, column: 2)
!1052 = !DILocation(line: 150, column: 7, scope: !1051, inlinedAt: !1036)
!1053 = !DILocation(line: 34, column: 89, scope: !1051, inlinedAt: !1036)
!1054 = !DILocation(line: 150, column: 15, scope: !1051, inlinedAt: !1036)
!1055 = !DILocation(line: 151, column: 7, scope: !1051, inlinedAt: !1036)
!1056 = !DILocation(line: 153, column: 33, scope: !1057, inlinedAt: !1036)
!1057 = distinct !DILexicalBlock(scope: !1051, file: !2, line: 152, column: 3)
!1058 = !DILocation(line: 153, column: 17, scope: !1057, inlinedAt: !1036)
!1059 = !DILocation(line: 153, column: 4, scope: !1057, inlinedAt: !1036)
!1060 = !DILocation(line: 153, column: 10, scope: !1057, inlinedAt: !1036)
!1061 = !DILocation(line: 154, column: 10, scope: !1057, inlinedAt: !1036)
!1062 = !DILocation(line: 156, column: 3, scope: !1051, inlinedAt: !1036)
!1063 = !DILocation(line: 157, column: 3, scope: !1051, inlinedAt: !1036)
!1064 = !DILocation(line: 158, column: 11, scope: !1051, inlinedAt: !1036)
!1065 = !DILocation(line: 158, column: 17, scope: !1051, inlinedAt: !1036)
!1066 = !DILocation(line: 206, column: 33, scope: !1067, inlinedAt: !1068)
!1067 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1068 = !DILocation(line: 160, column: 2, scope: !1044, inlinedAt: !1036)
!1069 = !DILocation(line: 206, column: 2, scope: !1067, inlinedAt: !1068)
!1070 = !DILocation(line: 208, column: 2, scope: !1067, inlinedAt: !1068)
!1071 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc128Random.next_long", scope: !4, file: !4, line: 35, type: !1072, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1072 = !DISubroutineType(types: !1073)
!1073 = !{!6, !980}
!1074 = !DILocation(line: 35, column: 52, scope: !1071)
!1075 = !DILocalVariable(name: "self", arg: 1, scope: !1071, file: !4, line: 35, type: !980)
!1076 = !DILocation(line: 35, column: 33, scope: !1071)
!1077 = !DILocation(line: 35, column: 58, scope: !1071)
!1078 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc128Random.next_int", scope: !4, file: !4, line: 36, type: !1079, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1079 = !DISubroutineType(types: !1080)
!1080 = !{!20, !980}
!1081 = !DILocation(line: 36, column: 50, scope: !1078)
!1082 = !DILocalVariable(name: "self", arg: 1, scope: !1078, file: !4, line: 36, type: !980)
!1083 = !DILocation(line: 36, column: 31, scope: !1078)
!1084 = !DILocation(line: 36, column: 56, scope: !1078)
!1085 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc128Random.next_short", scope: !4, file: !4, line: 37, type: !1086, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1086 = !DISubroutineType(types: !1087)
!1087 = !{!23, !980}
!1088 = !DILocation(line: 37, column: 54, scope: !1085)
!1089 = !DILocalVariable(name: "self", arg: 1, scope: !1085, file: !4, line: 37, type: !980)
!1090 = !DILocation(line: 37, column: 35, scope: !1085)
!1091 = !DILocation(line: 37, column: 62, scope: !1085)
!1092 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc128Random.next_byte", scope: !4, file: !4, line: 38, type: !1093, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1093 = !DISubroutineType(types: !1094)
!1094 = !{!60, !980}
!1095 = !DILocation(line: 38, column: 51, scope: !1092)
!1096 = !DILocalVariable(name: "self", arg: 1, scope: !1092, file: !4, line: 38, type: !980)
!1097 = !DILocation(line: 38, column: 32, scope: !1092)
!1098 = !DILocation(line: 38, column: 57, scope: !1092)
!1099 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc64Random.set_seed", scope: !4, file: !4, line: 45, type: !1100, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1100 = !DISubroutineType(types: !1101)
!1101 = !{null, !1102, !257}
!1102 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc64Random*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!1103 = !DILocation(line: 46, column: 1, scope: !1099)
!1104 = !DILocalVariable(name: "self", arg: 1, scope: !1099, file: !4, line: 45, type: !1102)
!1105 = !DILocation(line: 45, column: 31, scope: !1099)
!1106 = !DILocalVariable(name: "input", arg: 2, scope: !1099, file: !4, line: 45, type: !257)
!1107 = !DILocation(line: 45, column: 45, scope: !1099)
!1108 = !DILocation(line: 47, column: 3, scope: !1099)
!1109 = !DILocalVariable(name: "return_value", scope: !1110, file: !4, line: 10, type: !5, align: 16)
!1110 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1111 = !DILocation(line: 10, column: 8, scope: !1110, inlinedAt: !1112)
!1112 = !DILocation(line: 47, column: 10, scope: !1099)
!1113 = !DILocation(line: 11, column: 2, scope: !1110, inlinedAt: !1112)
!1114 = !DILocation(line: 12, column: 9, scope: !1110, inlinedAt: !1112)
!1115 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc64Random.next_long", scope: !4, file: !4, line: 50, type: !1116, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1116 = !DISubroutineType(types: !1117)
!1117 = !{!6, !1102}
!1118 = !DILocation(line: 51, column: 1, scope: !1115)
!1119 = !DILocalVariable(name: "self", arg: 1, scope: !1115, file: !4, line: 50, type: !1102)
!1120 = !DILocation(line: 50, column: 32, scope: !1115)
!1121 = !DILocalVariable(name: "s", scope: !1115, file: !4, line: 52, type: !397, align: 8)
!1122 = !DILocation(line: 52, column: 9, scope: !1115)
!1123 = !DILocation(line: 52, column: 24, scope: !1115)
!1124 = !DILocalVariable(name: "result", scope: !1115, file: !4, line: 53, type: !6, align: 8)
!1125 = !DILocation(line: 53, column: 8, scope: !1115)
!1126 = !DILocation(line: 53, column: 17, scope: !1115)
!1127 = !DILocation(line: 53, column: 19, scope: !1115)
!1128 = !DILocation(line: 53, column: 24, scope: !1115)
!1129 = !DILocation(line: 53, column: 26, scope: !1115)
!1130 = !DILocation(line: 53, column: 31, scope: !1115)
!1131 = !DILocation(line: 53, column: 33, scope: !1115)
!1132 = !DILocation(line: 54, column: 2, scope: !1115)
!1133 = !DILocation(line: 54, column: 9, scope: !1115)
!1134 = !DILocation(line: 54, column: 11, scope: !1115)
!1135 = !DILocation(line: 54, column: 16, scope: !1115)
!1136 = !DILocation(line: 54, column: 18, scope: !1115)
!1137 = !DILocation(line: 55, column: 2, scope: !1115)
!1138 = !DILocation(line: 55, column: 4, scope: !1115)
!1139 = !DILocation(line: 55, column: 9, scope: !1115)
!1140 = !DILocation(line: 55, column: 11, scope: !1115)
!1141 = !DILocation(line: 55, column: 16, scope: !1115)
!1142 = !DILocation(line: 55, column: 18, scope: !1115)
!1143 = !DILocation(line: 56, column: 2, scope: !1115)
!1144 = !DILocation(line: 56, column: 4, scope: !1115)
!1145 = !DILocation(line: 56, column: 9, scope: !1115)
!1146 = !DILocation(line: 56, column: 11, scope: !1115)
!1147 = !DILocation(line: 147, column: 53, scope: !1148, inlinedAt: !1145)
!1148 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1149 = !DILocation(line: 147, column: 59, scope: !1148, inlinedAt: !1145)
!1150 = !DILocation(line: 147, column: 65, scope: !1148, inlinedAt: !1145)
!1151 = !DILocation(line: 56, column: 25, scope: !1115)
!1152 = !DILocation(line: 57, column: 2, scope: !1115)
!1153 = !DILocation(line: 57, column: 4, scope: !1115)
!1154 = !DILocation(line: 58, column: 9, scope: !1115)
!1155 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc64Random.next_bytes", scope: !4, file: !4, line: 64, type: !1100, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1156 = !DILocation(line: 64, column: 65, scope: !1155)
!1157 = !DILocalVariable(name: "self", arg: 1, scope: !1155, file: !4, line: 64, type: !1102)
!1158 = !DILocation(line: 64, column: 32, scope: !1155)
!1159 = !DILocalVariable(name: "bytes", arg: 2, scope: !1155, file: !4, line: 64, type: !257)
!1160 = !DILocation(line: 64, column: 46, scope: !1155)
!1161 = !DILocation(line: 62, column: 11, scope: !1162)
!1162 = distinct !DILexicalBlock(scope: !1155, file: !4, line: 64, column: 65)
!1163 = !DILocalVariable(name: "len", scope: !1164, file: !4, line: 146, type: !262, align: 8)
!1164 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1165 = !DILocation(line: 146, column: 6, scope: !1164, inlinedAt: !1156)
!1166 = !DILocation(line: 146, column: 12, scope: !1164, inlinedAt: !1156)
!1167 = !DILocation(line: 148, column: 2, scope: !1164, inlinedAt: !1156)
!1168 = !DILocation(line: 148, column: 9, scope: !1169, inlinedAt: !1156)
!1169 = distinct !DILexicalBlock(scope: !1164, file: !2, line: 148, column: 2)
!1170 = !DILocalVariable(name: "value", scope: !1171, file: !4, line: 150, type: !6, align: 8)
!1171 = distinct !DILexicalBlock(scope: !1169, file: !2, line: 149, column: 2)
!1172 = !DILocation(line: 150, column: 7, scope: !1171, inlinedAt: !1156)
!1173 = !DILocation(line: 64, column: 88, scope: !1171, inlinedAt: !1156)
!1174 = !DILocation(line: 150, column: 15, scope: !1171, inlinedAt: !1156)
!1175 = !DILocation(line: 151, column: 7, scope: !1171, inlinedAt: !1156)
!1176 = !DILocation(line: 153, column: 33, scope: !1177, inlinedAt: !1156)
!1177 = distinct !DILexicalBlock(scope: !1171, file: !2, line: 152, column: 3)
!1178 = !DILocation(line: 153, column: 17, scope: !1177, inlinedAt: !1156)
!1179 = !DILocation(line: 153, column: 4, scope: !1177, inlinedAt: !1156)
!1180 = !DILocation(line: 153, column: 10, scope: !1177, inlinedAt: !1156)
!1181 = !DILocation(line: 154, column: 10, scope: !1177, inlinedAt: !1156)
!1182 = !DILocation(line: 156, column: 3, scope: !1171, inlinedAt: !1156)
!1183 = !DILocation(line: 157, column: 3, scope: !1171, inlinedAt: !1156)
!1184 = !DILocation(line: 158, column: 11, scope: !1171, inlinedAt: !1156)
!1185 = !DILocation(line: 158, column: 17, scope: !1171, inlinedAt: !1156)
!1186 = !DILocation(line: 206, column: 33, scope: !1187, inlinedAt: !1188)
!1187 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1188 = !DILocation(line: 160, column: 2, scope: !1164, inlinedAt: !1156)
!1189 = !DILocation(line: 206, column: 2, scope: !1187, inlinedAt: !1188)
!1190 = !DILocation(line: 208, column: 2, scope: !1187, inlinedAt: !1188)
!1191 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc64Random.next_int128", scope: !4, file: !4, line: 65, type: !1192, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1192 = !DISubroutineType(types: !1193)
!1193 = !{!15, !1102}
!1194 = !DILocation(line: 65, column: 55, scope: !1191)
!1195 = !DILocalVariable(name: "self", arg: 1, scope: !1191, file: !4, line: 65, type: !1102)
!1196 = !DILocation(line: 65, column: 36, scope: !1191)
!1197 = !DILocation(line: 65, column: 71, scope: !1198, inlinedAt: !1194)
!1198 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1199 = !DILocation(line: 138, column: 45, scope: !1198, inlinedAt: !1194)
!1200 = !DILocation(line: 138, column: 72, scope: !1198, inlinedAt: !1194)
!1201 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc64Random.next_int", scope: !4, file: !4, line: 66, type: !1202, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1202 = !DISubroutineType(types: !1203)
!1203 = !{!20, !1102}
!1204 = !DILocation(line: 66, column: 49, scope: !1201)
!1205 = !DILocalVariable(name: "self", arg: 1, scope: !1201, file: !4, line: 66, type: !1102)
!1206 = !DILocation(line: 66, column: 30, scope: !1201)
!1207 = !DILocation(line: 66, column: 55, scope: !1201)
!1208 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc64Random.next_short", scope: !4, file: !4, line: 67, type: !1209, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1209 = !DISubroutineType(types: !1210)
!1210 = !{!23, !1102}
!1211 = !DILocation(line: 67, column: 53, scope: !1208)
!1212 = !DILocalVariable(name: "self", arg: 1, scope: !1208, file: !4, line: 67, type: !1102)
!1213 = !DILocation(line: 67, column: 34, scope: !1208)
!1214 = !DILocation(line: 67, column: 61, scope: !1208)
!1215 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc64Random.next_byte", scope: !4, file: !4, line: 68, type: !1216, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1216 = !DISubroutineType(types: !1217)
!1217 = !{!60, !1102}
!1218 = !DILocation(line: 68, column: 50, scope: !1215)
!1219 = !DILocalVariable(name: "self", arg: 1, scope: !1215, file: !4, line: 68, type: !1102)
!1220 = !DILocation(line: 68, column: 31, scope: !1215)
!1221 = !DILocation(line: 68, column: 56, scope: !1215)
!1222 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc32Random.set_seed", scope: !4, file: !4, line: 74, type: !1223, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1223 = !DISubroutineType(types: !1224)
!1224 = !{null, !1225, !257}
!1225 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc32Random*", baseType: !1226, size: 64, align: 64, dwarfAddressSpace: 0)
!1226 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc32Random", scope: !4, file: !4, line: 72, baseType: !1227, align: 4)
!1227 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 128, align: 32, elements: !7)
!1228 = !DILocation(line: 75, column: 1, scope: !1222)
!1229 = !DILocalVariable(name: "self", arg: 1, scope: !1222, file: !4, line: 74, type: !1225)
!1230 = !DILocation(line: 74, column: 31, scope: !1222)
!1231 = !DILocalVariable(name: "input", arg: 2, scope: !1222, file: !4, line: 74, type: !257)
!1232 = !DILocation(line: 74, column: 45, scope: !1222)
!1233 = !DILocation(line: 76, column: 3, scope: !1222)
!1234 = !DILocalVariable(name: "return_value", scope: !1235, file: !4, line: 10, type: !1227, align: 16)
!1235 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1236 = !DILocation(line: 10, column: 8, scope: !1235, inlinedAt: !1237)
!1237 = !DILocation(line: 76, column: 10, scope: !1222)
!1238 = !DILocation(line: 11, column: 2, scope: !1235, inlinedAt: !1237)
!1239 = !DILocation(line: 12, column: 9, scope: !1235, inlinedAt: !1237)
!1240 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc32Random.next_int", scope: !4, file: !4, line: 79, type: !1241, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1241 = !DISubroutineType(types: !1242)
!1242 = !{!20, !1225}
!1243 = !DILocation(line: 80, column: 1, scope: !1240)
!1244 = !DILocalVariable(name: "sfc", arg: 1, scope: !1240, file: !4, line: 79, type: !1225)
!1245 = !DILocation(line: 79, column: 30, scope: !1240)
!1246 = !DILocalVariable(name: "s", scope: !1240, file: !4, line: 81, type: !514, align: 8)
!1247 = !DILocation(line: 81, column: 8, scope: !1240)
!1248 = !DILocation(line: 81, column: 22, scope: !1240)
!1249 = !DILocalVariable(name: "result", scope: !1240, file: !4, line: 82, type: !20, align: 4)
!1250 = !DILocation(line: 82, column: 7, scope: !1240)
!1251 = !DILocation(line: 82, column: 16, scope: !1240)
!1252 = !DILocation(line: 82, column: 18, scope: !1240)
!1253 = !DILocation(line: 82, column: 23, scope: !1240)
!1254 = !DILocation(line: 82, column: 25, scope: !1240)
!1255 = !DILocation(line: 82, column: 30, scope: !1240)
!1256 = !DILocation(line: 82, column: 32, scope: !1240)
!1257 = !DILocation(line: 83, column: 2, scope: !1240)
!1258 = !DILocation(line: 83, column: 9, scope: !1240)
!1259 = !DILocation(line: 83, column: 11, scope: !1240)
!1260 = !DILocation(line: 83, column: 16, scope: !1240)
!1261 = !DILocation(line: 83, column: 18, scope: !1240)
!1262 = !DILocation(line: 84, column: 2, scope: !1240)
!1263 = !DILocation(line: 84, column: 4, scope: !1240)
!1264 = !DILocation(line: 84, column: 9, scope: !1240)
!1265 = !DILocation(line: 84, column: 11, scope: !1240)
!1266 = !DILocation(line: 84, column: 16, scope: !1240)
!1267 = !DILocation(line: 84, column: 18, scope: !1240)
!1268 = !DILocation(line: 85, column: 2, scope: !1240)
!1269 = !DILocation(line: 85, column: 4, scope: !1240)
!1270 = !DILocation(line: 85, column: 9, scope: !1240)
!1271 = !DILocation(line: 85, column: 11, scope: !1240)
!1272 = !DILocation(line: 99, column: 50, scope: !1273, inlinedAt: !1270)
!1273 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1274 = !DILocation(line: 99, column: 56, scope: !1273, inlinedAt: !1270)
!1275 = !DILocation(line: 99, column: 62, scope: !1273, inlinedAt: !1270)
!1276 = !DILocation(line: 85, column: 25, scope: !1240)
!1277 = !DILocation(line: 86, column: 2, scope: !1240)
!1278 = !DILocation(line: 86, column: 4, scope: !1240)
!1279 = !DILocation(line: 87, column: 9, scope: !1240)
!1280 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc32Random.next_bytes", scope: !4, file: !4, line: 93, type: !1223, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1281 = !DILocation(line: 93, column: 65, scope: !1280)
!1282 = !DILocalVariable(name: "self", arg: 1, scope: !1280, file: !4, line: 93, type: !1225)
!1283 = !DILocation(line: 93, column: 32, scope: !1280)
!1284 = !DILocalVariable(name: "bytes", arg: 2, scope: !1280, file: !4, line: 93, type: !257)
!1285 = !DILocation(line: 93, column: 46, scope: !1280)
!1286 = !DILocation(line: 91, column: 11, scope: !1287)
!1287 = distinct !DILexicalBlock(scope: !1280, file: !4, line: 93, column: 65)
!1288 = !DILocalVariable(name: "len", scope: !1289, file: !4, line: 146, type: !262, align: 8)
!1289 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1290 = !DILocation(line: 146, column: 6, scope: !1289, inlinedAt: !1281)
!1291 = !DILocation(line: 146, column: 12, scope: !1289, inlinedAt: !1281)
!1292 = !DILocation(line: 148, column: 2, scope: !1289, inlinedAt: !1281)
!1293 = !DILocation(line: 148, column: 9, scope: !1294, inlinedAt: !1281)
!1294 = distinct !DILexicalBlock(scope: !1289, file: !2, line: 148, column: 2)
!1295 = !DILocalVariable(name: "value", scope: !1296, file: !4, line: 150, type: !20, align: 4)
!1296 = distinct !DILexicalBlock(scope: !1294, file: !2, line: 149, column: 2)
!1297 = !DILocation(line: 150, column: 7, scope: !1296, inlinedAt: !1281)
!1298 = !DILocation(line: 93, column: 88, scope: !1296, inlinedAt: !1281)
!1299 = !DILocation(line: 150, column: 15, scope: !1296, inlinedAt: !1281)
!1300 = !DILocation(line: 151, column: 7, scope: !1296, inlinedAt: !1281)
!1301 = !DILocation(line: 153, column: 33, scope: !1302, inlinedAt: !1281)
!1302 = distinct !DILexicalBlock(scope: !1296, file: !2, line: 152, column: 3)
!1303 = !DILocation(line: 153, column: 17, scope: !1302, inlinedAt: !1281)
!1304 = !DILocation(line: 153, column: 4, scope: !1302, inlinedAt: !1281)
!1305 = !DILocation(line: 153, column: 10, scope: !1302, inlinedAt: !1281)
!1306 = !DILocation(line: 154, column: 10, scope: !1302, inlinedAt: !1281)
!1307 = !DILocation(line: 156, column: 3, scope: !1296, inlinedAt: !1281)
!1308 = !DILocation(line: 157, column: 3, scope: !1296, inlinedAt: !1281)
!1309 = !DILocation(line: 158, column: 11, scope: !1296, inlinedAt: !1281)
!1310 = !DILocation(line: 158, column: 17, scope: !1296, inlinedAt: !1281)
!1311 = !DILocation(line: 206, column: 33, scope: !1312, inlinedAt: !1313)
!1312 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1313 = !DILocation(line: 160, column: 2, scope: !1289, inlinedAt: !1281)
!1314 = !DILocation(line: 206, column: 2, scope: !1312, inlinedAt: !1313)
!1315 = !DILocation(line: 208, column: 2, scope: !1312, inlinedAt: !1313)
!1316 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc32Random.next_int128", scope: !4, file: !4, line: 94, type: !1317, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1317 = !DISubroutineType(types: !1318)
!1318 = !{!15, !1225}
!1319 = !DILocation(line: 94, column: 55, scope: !1316)
!1320 = !DILocalVariable(name: "self", arg: 1, scope: !1316, file: !4, line: 94, type: !1225)
!1321 = !DILocation(line: 94, column: 36, scope: !1316)
!1322 = !DILocation(line: 94, column: 71, scope: !1323, inlinedAt: !1319)
!1323 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1324 = !DILocation(line: 138, column: 45, scope: !1323, inlinedAt: !1319)
!1325 = !DILocation(line: 138, column: 72, scope: !1323, inlinedAt: !1319)
!1326 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc32Random.next_long", scope: !4, file: !4, line: 95, type: !1327, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1327 = !DISubroutineType(types: !1328)
!1328 = !{!6, !1225}
!1329 = !DILocation(line: 95, column: 51, scope: !1326)
!1330 = !DILocalVariable(name: "self", arg: 1, scope: !1326, file: !4, line: 95, type: !1225)
!1331 = !DILocation(line: 95, column: 32, scope: !1326)
!1332 = !DILocation(line: 95, column: 64, scope: !1333, inlinedAt: !1329)
!1333 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1334 = !DILocation(line: 139, column: 40, scope: !1333, inlinedAt: !1329)
!1335 = !DILocation(line: 139, column: 65, scope: !1333, inlinedAt: !1329)
!1336 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc32Random.next_short", scope: !4, file: !4, line: 96, type: !1337, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1337 = !DISubroutineType(types: !1338)
!1338 = !{!23, !1225}
!1339 = !DILocation(line: 96, column: 53, scope: !1336)
!1340 = !DILocalVariable(name: "self", arg: 1, scope: !1336, file: !4, line: 96, type: !1225)
!1341 = !DILocation(line: 96, column: 34, scope: !1336)
!1342 = !DILocation(line: 96, column: 61, scope: !1336)
!1343 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc32Random.next_byte", scope: !4, file: !4, line: 97, type: !1344, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1344 = !DISubroutineType(types: !1345)
!1345 = !{!60, !1225}
!1346 = !DILocation(line: 97, column: 50, scope: !1343)
!1347 = !DILocalVariable(name: "self", arg: 1, scope: !1343, file: !4, line: 97, type: !1225)
!1348 = !DILocation(line: 97, column: 31, scope: !1343)
!1349 = !DILocation(line: 97, column: 56, scope: !1343)
!1350 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc16Random.set_seed", scope: !4, file: !4, line: 103, type: !1351, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1351 = !DISubroutineType(types: !1352)
!1352 = !{null, !1353, !257}
!1353 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc16Random*", baseType: !1354, size: 64, align: 64, dwarfAddressSpace: 0)
!1354 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc16Random", scope: !4, file: !4, line: 101, baseType: !1355, align: 2)
!1355 = !DICompositeType(tag: DW_TAG_array_type, baseType: !23, size: 64, align: 16, elements: !7)
!1356 = !DILocation(line: 104, column: 1, scope: !1350)
!1357 = !DILocalVariable(name: "self", arg: 1, scope: !1350, file: !4, line: 103, type: !1353)
!1358 = !DILocation(line: 103, column: 31, scope: !1350)
!1359 = !DILocalVariable(name: "input", arg: 2, scope: !1350, file: !4, line: 103, type: !257)
!1360 = !DILocation(line: 103, column: 45, scope: !1350)
!1361 = !DILocation(line: 105, column: 3, scope: !1350)
!1362 = !DILocalVariable(name: "return_value", scope: !1363, file: !4, line: 10, type: !1355, align: 2)
!1363 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1364 = !DILocation(line: 10, column: 8, scope: !1363, inlinedAt: !1365)
!1365 = !DILocation(line: 105, column: 10, scope: !1350)
!1366 = !DILocation(line: 11, column: 2, scope: !1363, inlinedAt: !1365)
!1367 = !DILocation(line: 12, column: 9, scope: !1363, inlinedAt: !1365)
!1368 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc16Random.next_short", scope: !4, file: !4, line: 109, type: !1369, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1369 = !DISubroutineType(types: !1370)
!1370 = !{!23, !1353}
!1371 = !DILocation(line: 110, column: 1, scope: !1368)
!1372 = !DILocalVariable(name: "seed", arg: 1, scope: !1368, file: !4, line: 109, type: !1353)
!1373 = !DILocation(line: 109, column: 34, scope: !1368)
!1374 = !DILocalVariable(name: "s", scope: !1368, file: !4, line: 111, type: !634, align: 8)
!1375 = !DILocation(line: 111, column: 10, scope: !1368)
!1376 = !DILocation(line: 111, column: 26, scope: !1368)
!1377 = !DILocalVariable(name: "result", scope: !1368, file: !4, line: 112, type: !23, align: 2)
!1378 = !DILocation(line: 112, column: 9, scope: !1368)
!1379 = !DILocation(line: 112, column: 18, scope: !1368)
!1380 = !DILocation(line: 112, column: 20, scope: !1368)
!1381 = !DILocation(line: 112, column: 25, scope: !1368)
!1382 = !DILocation(line: 112, column: 27, scope: !1368)
!1383 = !DILocation(line: 112, column: 32, scope: !1368)
!1384 = !DILocation(line: 112, column: 34, scope: !1368)
!1385 = !DILocation(line: 113, column: 2, scope: !1368)
!1386 = !DILocation(line: 113, column: 9, scope: !1368)
!1387 = !DILocation(line: 113, column: 11, scope: !1368)
!1388 = !DILocation(line: 113, column: 16, scope: !1368)
!1389 = !DILocation(line: 113, column: 18, scope: !1368)
!1390 = !DILocation(line: 114, column: 2, scope: !1368)
!1391 = !DILocation(line: 114, column: 4, scope: !1368)
!1392 = !DILocation(line: 114, column: 9, scope: !1368)
!1393 = !DILocation(line: 114, column: 11, scope: !1368)
!1394 = !DILocation(line: 114, column: 16, scope: !1368)
!1395 = !DILocation(line: 114, column: 18, scope: !1368)
!1396 = !DILocation(line: 115, column: 2, scope: !1368)
!1397 = !DILocation(line: 115, column: 4, scope: !1368)
!1398 = !DILocation(line: 115, column: 9, scope: !1368)
!1399 = !DILocation(line: 115, column: 11, scope: !1368)
!1400 = !DILocation(line: 115, column: 56, scope: !1401, inlinedAt: !1398)
!1401 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1402 = !DILocation(line: 115, column: 62, scope: !1401, inlinedAt: !1398)
!1403 = !DILocation(line: 115, column: 68, scope: !1401, inlinedAt: !1398)
!1404 = !DILocation(line: 115, column: 25, scope: !1368)
!1405 = !DILocation(line: 116, column: 2, scope: !1368)
!1406 = !DILocation(line: 116, column: 4, scope: !1368)
!1407 = !DILocation(line: 117, column: 9, scope: !1368)
!1408 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc16Random.next_bytes", scope: !4, file: !4, line: 123, type: !1351, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1409 = !DILocation(line: 123, column: 65, scope: !1408)
!1410 = !DILocalVariable(name: "self", arg: 1, scope: !1408, file: !4, line: 123, type: !1353)
!1411 = !DILocation(line: 123, column: 32, scope: !1408)
!1412 = !DILocalVariable(name: "bytes", arg: 2, scope: !1408, file: !4, line: 123, type: !257)
!1413 = !DILocation(line: 123, column: 46, scope: !1408)
!1414 = !DILocation(line: 121, column: 11, scope: !1415)
!1415 = distinct !DILexicalBlock(scope: !1408, file: !4, line: 123, column: 65)
!1416 = !DILocalVariable(name: "len", scope: !1417, file: !4, line: 146, type: !262, align: 8)
!1417 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1418 = !DILocation(line: 146, column: 6, scope: !1417, inlinedAt: !1409)
!1419 = !DILocation(line: 146, column: 12, scope: !1417, inlinedAt: !1409)
!1420 = !DILocation(line: 148, column: 2, scope: !1417, inlinedAt: !1409)
!1421 = !DILocation(line: 148, column: 9, scope: !1422, inlinedAt: !1409)
!1422 = distinct !DILexicalBlock(scope: !1417, file: !2, line: 148, column: 2)
!1423 = !DILocalVariable(name: "value", scope: !1424, file: !4, line: 150, type: !23, align: 2)
!1424 = distinct !DILexicalBlock(scope: !1422, file: !2, line: 149, column: 2)
!1425 = !DILocation(line: 150, column: 7, scope: !1424, inlinedAt: !1409)
!1426 = !DILocation(line: 123, column: 88, scope: !1424, inlinedAt: !1409)
!1427 = !DILocation(line: 150, column: 15, scope: !1424, inlinedAt: !1409)
!1428 = !DILocation(line: 151, column: 7, scope: !1424, inlinedAt: !1409)
!1429 = !DILocation(line: 153, column: 33, scope: !1430, inlinedAt: !1409)
!1430 = distinct !DILexicalBlock(scope: !1424, file: !2, line: 152, column: 3)
!1431 = !DILocation(line: 153, column: 17, scope: !1430, inlinedAt: !1409)
!1432 = !DILocation(line: 153, column: 4, scope: !1430, inlinedAt: !1409)
!1433 = !DILocation(line: 153, column: 10, scope: !1430, inlinedAt: !1409)
!1434 = !DILocation(line: 154, column: 10, scope: !1430, inlinedAt: !1409)
!1435 = !DILocation(line: 156, column: 3, scope: !1424, inlinedAt: !1409)
!1436 = !DILocation(line: 157, column: 3, scope: !1424, inlinedAt: !1409)
!1437 = !DILocation(line: 158, column: 11, scope: !1424, inlinedAt: !1409)
!1438 = !DILocation(line: 158, column: 17, scope: !1424, inlinedAt: !1409)
!1439 = !DILocation(line: 206, column: 33, scope: !1440, inlinedAt: !1441)
!1440 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1441 = !DILocation(line: 160, column: 2, scope: !1417, inlinedAt: !1409)
!1442 = !DILocation(line: 206, column: 2, scope: !1440, inlinedAt: !1441)
!1443 = !DILocation(line: 208, column: 2, scope: !1440, inlinedAt: !1441)
!1444 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc16Random.next_int128", scope: !4, file: !4, line: 124, type: !1445, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1445 = !DISubroutineType(types: !1446)
!1446 = !{!15, !1353}
!1447 = !DILocation(line: 124, column: 55, scope: !1444)
!1448 = !DILocalVariable(name: "self", arg: 1, scope: !1444, file: !4, line: 124, type: !1353)
!1449 = !DILocation(line: 124, column: 36, scope: !1444)
!1450 = !DILocation(line: 124, column: 71, scope: !1451, inlinedAt: !1447)
!1451 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1452 = !DILocation(line: 138, column: 45, scope: !1451, inlinedAt: !1447)
!1453 = !DILocation(line: 138, column: 72, scope: !1451, inlinedAt: !1447)
!1454 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc16Random.next_long", scope: !4, file: !4, line: 125, type: !1455, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1455 = !DISubroutineType(types: !1456)
!1456 = !{!6, !1353}
!1457 = !DILocation(line: 125, column: 51, scope: !1454)
!1458 = !DILocalVariable(name: "self", arg: 1, scope: !1454, file: !4, line: 125, type: !1353)
!1459 = !DILocation(line: 125, column: 32, scope: !1454)
!1460 = !DILocation(line: 125, column: 64, scope: !1461, inlinedAt: !1457)
!1461 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1462 = !DILocation(line: 139, column: 40, scope: !1461, inlinedAt: !1457)
!1463 = !DILocation(line: 139, column: 65, scope: !1461, inlinedAt: !1457)
!1464 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc16Random.next_int", scope: !4, file: !4, line: 126, type: !1465, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1465 = !DISubroutineType(types: !1466)
!1466 = !{!20, !1353}
!1467 = !DILocation(line: 126, column: 49, scope: !1464)
!1468 = !DILocalVariable(name: "self", arg: 1, scope: !1464, file: !4, line: 126, type: !1353)
!1469 = !DILocation(line: 126, column: 30, scope: !1464)
!1470 = !DILocation(line: 126, column: 63, scope: !1471, inlinedAt: !1467)
!1471 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1472 = !DILocation(line: 140, column: 40, scope: !1471, inlinedAt: !1467)
!1473 = !DILocation(line: 140, column: 64, scope: !1471, inlinedAt: !1467)
!1474 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc16Random.next_byte", scope: !4, file: !4, line: 127, type: !1475, scopeLine: 127, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1475 = !DISubroutineType(types: !1476)
!1476 = !{!60, !1353}
!1477 = !DILocation(line: 127, column: 50, scope: !1474)
!1478 = !DILocalVariable(name: "self", arg: 1, scope: !1474, file: !4, line: 127, type: !1353)
!1479 = !DILocation(line: 127, column: 31, scope: !1474)
!1480 = !DILocation(line: 127, column: 56, scope: !1474)
!1481 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc8Random.set_seed", scope: !4, file: !4, line: 134, type: !1482, scopeLine: 134, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1482 = !DISubroutineType(types: !1483)
!1483 = !{null, !1484, !257}
!1484 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc8Random*", baseType: !1485, size: 64, align: 64, dwarfAddressSpace: 0)
!1485 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc8Random", scope: !4, file: !4, line: 132, baseType: !1486, align: 1)
!1486 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 32, align: 8, elements: !7)
!1487 = !DILocation(line: 135, column: 1, scope: !1481)
!1488 = !DILocalVariable(name: "self", arg: 1, scope: !1481, file: !4, line: 134, type: !1484)
!1489 = !DILocation(line: 134, column: 30, scope: !1481)
!1490 = !DILocalVariable(name: "input", arg: 2, scope: !1481, file: !4, line: 134, type: !257)
!1491 = !DILocation(line: 134, column: 44, scope: !1481)
!1492 = !DILocation(line: 136, column: 3, scope: !1481)
!1493 = !DILocalVariable(name: "return_value", scope: !1494, file: !4, line: 10, type: !1486, align: 1)
!1494 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1495 = !DILocation(line: 10, column: 8, scope: !1494, inlinedAt: !1496)
!1496 = !DILocation(line: 136, column: 10, scope: !1481)
!1497 = !DILocation(line: 11, column: 2, scope: !1494, inlinedAt: !1496)
!1498 = !DILocation(line: 12, column: 9, scope: !1494, inlinedAt: !1496)
!1499 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc8Random.next_byte", scope: !4, file: !4, line: 139, type: !1500, scopeLine: 139, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1500 = !DISubroutineType(types: !1501)
!1501 = !{!60, !1484}
!1502 = !DILocation(line: 140, column: 1, scope: !1499)
!1503 = !DILocalVariable(name: "self", arg: 1, scope: !1499, file: !4, line: 139, type: !1484)
!1504 = !DILocation(line: 139, column: 30, scope: !1499)
!1505 = !DILocalVariable(name: "s", scope: !1499, file: !4, line: 141, type: !260, align: 8)
!1506 = !DILocation(line: 141, column: 8, scope: !1499)
!1507 = !DILocation(line: 141, column: 22, scope: !1499)
!1508 = !DILocalVariable(name: "result", scope: !1499, file: !4, line: 142, type: !60, align: 1)
!1509 = !DILocation(line: 142, column: 7, scope: !1499)
!1510 = !DILocation(line: 142, column: 16, scope: !1499)
!1511 = !DILocation(line: 142, column: 18, scope: !1499)
!1512 = !DILocation(line: 142, column: 23, scope: !1499)
!1513 = !DILocation(line: 142, column: 25, scope: !1499)
!1514 = !DILocation(line: 142, column: 30, scope: !1499)
!1515 = !DILocation(line: 142, column: 32, scope: !1499)
!1516 = !DILocation(line: 143, column: 2, scope: !1499)
!1517 = !DILocation(line: 143, column: 9, scope: !1499)
!1518 = !DILocation(line: 143, column: 11, scope: !1499)
!1519 = !DILocation(line: 143, column: 16, scope: !1499)
!1520 = !DILocation(line: 143, column: 18, scope: !1499)
!1521 = !DILocation(line: 144, column: 2, scope: !1499)
!1522 = !DILocation(line: 144, column: 4, scope: !1499)
!1523 = !DILocation(line: 144, column: 9, scope: !1499)
!1524 = !DILocation(line: 144, column: 11, scope: !1499)
!1525 = !DILocation(line: 144, column: 16, scope: !1499)
!1526 = !DILocation(line: 144, column: 18, scope: !1499)
!1527 = !DILocation(line: 145, column: 2, scope: !1499)
!1528 = !DILocation(line: 145, column: 4, scope: !1499)
!1529 = !DILocation(line: 145, column: 9, scope: !1499)
!1530 = !DILocation(line: 145, column: 11, scope: !1499)
!1531 = !DILocation(line: 131, column: 50, scope: !1532, inlinedAt: !1529)
!1532 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1533 = !DILocation(line: 131, column: 56, scope: !1532, inlinedAt: !1529)
!1534 = !DILocation(line: 131, column: 62, scope: !1532, inlinedAt: !1529)
!1535 = !DILocation(line: 145, column: 24, scope: !1499)
!1536 = !DILocation(line: 146, column: 2, scope: !1499)
!1537 = !DILocation(line: 146, column: 4, scope: !1499)
!1538 = !DILocation(line: 147, column: 9, scope: !1499)
!1539 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc8Random.next_bytes", scope: !4, file: !4, line: 150, type: !1482, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1540 = !DILocation(line: 150, column: 64, scope: !1539)
!1541 = !DILocalVariable(name: "self", arg: 1, scope: !1539, file: !4, line: 150, type: !1484)
!1542 = !DILocation(line: 150, column: 31, scope: !1539)
!1543 = !DILocalVariable(name: "bytes", arg: 2, scope: !1539, file: !4, line: 150, type: !257)
!1544 = !DILocation(line: 150, column: 45, scope: !1539)
!1545 = !DILocalVariable(name: "len", scope: !1546, file: !4, line: 146, type: !262, align: 8)
!1546 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1547 = !DILocation(line: 146, column: 6, scope: !1546, inlinedAt: !1540)
!1548 = !DILocation(line: 146, column: 12, scope: !1546, inlinedAt: !1540)
!1549 = !DILocation(line: 148, column: 2, scope: !1546, inlinedAt: !1540)
!1550 = !DILocation(line: 148, column: 9, scope: !1551, inlinedAt: !1540)
!1551 = distinct !DILexicalBlock(scope: !1546, file: !2, line: 148, column: 2)
!1552 = !DILocalVariable(name: "value", scope: !1553, file: !4, line: 150, type: !60, align: 1)
!1553 = distinct !DILexicalBlock(scope: !1551, file: !2, line: 149, column: 2)
!1554 = !DILocation(line: 150, column: 7, scope: !1553, inlinedAt: !1540)
!1555 = !DILocation(line: 150, column: 87, scope: !1553, inlinedAt: !1540)
!1556 = !DILocation(line: 150, column: 15, scope: !1553, inlinedAt: !1540)
!1557 = !DILocation(line: 151, column: 7, scope: !1553, inlinedAt: !1540)
!1558 = !DILocation(line: 153, column: 33, scope: !1559, inlinedAt: !1540)
!1559 = distinct !DILexicalBlock(scope: !1553, file: !2, line: 152, column: 3)
!1560 = !DILocation(line: 153, column: 17, scope: !1559, inlinedAt: !1540)
!1561 = !DILocation(line: 153, column: 4, scope: !1559, inlinedAt: !1540)
!1562 = !DILocation(line: 153, column: 10, scope: !1559, inlinedAt: !1540)
!1563 = !DILocation(line: 154, column: 10, scope: !1559, inlinedAt: !1540)
!1564 = !DILocation(line: 156, column: 3, scope: !1553, inlinedAt: !1540)
!1565 = !DILocation(line: 157, column: 3, scope: !1553, inlinedAt: !1540)
!1566 = !DILocation(line: 158, column: 11, scope: !1553, inlinedAt: !1540)
!1567 = !DILocation(line: 158, column: 17, scope: !1553, inlinedAt: !1540)
!1568 = !DILocation(line: 206, column: 33, scope: !1569, inlinedAt: !1570)
!1569 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1570 = !DILocation(line: 160, column: 2, scope: !1546, inlinedAt: !1540)
!1571 = !DILocation(line: 206, column: 2, scope: !1569, inlinedAt: !1570)
!1572 = !DILocation(line: 208, column: 2, scope: !1569, inlinedAt: !1570)
!1573 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc8Random.next_int128", scope: !4, file: !4, line: 151, type: !1574, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1574 = !DISubroutineType(types: !1575)
!1575 = !{!15, !1484}
!1576 = !DILocation(line: 151, column: 54, scope: !1573)
!1577 = !DILocalVariable(name: "self", arg: 1, scope: !1573, file: !4, line: 151, type: !1484)
!1578 = !DILocation(line: 151, column: 35, scope: !1573)
!1579 = !DILocation(line: 151, column: 70, scope: !1580, inlinedAt: !1576)
!1580 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1581 = !DILocation(line: 138, column: 45, scope: !1580, inlinedAt: !1576)
!1582 = !DILocation(line: 138, column: 72, scope: !1580, inlinedAt: !1576)
!1583 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc8Random.next_long", scope: !4, file: !4, line: 152, type: !1584, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1584 = !DISubroutineType(types: !1585)
!1585 = !{!6, !1484}
!1586 = !DILocation(line: 152, column: 50, scope: !1583)
!1587 = !DILocalVariable(name: "self", arg: 1, scope: !1583, file: !4, line: 152, type: !1484)
!1588 = !DILocation(line: 152, column: 31, scope: !1583)
!1589 = !DILocation(line: 152, column: 63, scope: !1590, inlinedAt: !1586)
!1590 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1591 = !DILocation(line: 139, column: 40, scope: !1590, inlinedAt: !1586)
!1592 = !DILocation(line: 139, column: 65, scope: !1590, inlinedAt: !1586)
!1593 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc8Random.next_int", scope: !4, file: !4, line: 153, type: !1594, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1594 = !DISubroutineType(types: !1595)
!1595 = !{!20, !1484}
!1596 = !DILocation(line: 153, column: 48, scope: !1593)
!1597 = !DILocalVariable(name: "self", arg: 1, scope: !1593, file: !4, line: 153, type: !1484)
!1598 = !DILocation(line: 153, column: 29, scope: !1593)
!1599 = !DILocation(line: 153, column: 62, scope: !1600, inlinedAt: !1596)
!1600 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1601 = !DILocation(line: 140, column: 40, scope: !1600, inlinedAt: !1596)
!1602 = !DILocation(line: 140, column: 64, scope: !1600, inlinedAt: !1596)
!1603 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc8Random.next_short", scope: !4, file: !4, line: 154, type: !1604, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1604 = !DISubroutineType(types: !1605)
!1605 = !{!23, !1484}
!1606 = !DILocation(line: 154, column: 52, scope: !1603)
!1607 = !DILocalVariable(name: "self", arg: 1, scope: !1603, file: !4, line: 154, type: !1484)
!1608 = !DILocation(line: 154, column: 33, scope: !1603)
!1609 = !DILocation(line: 154, column: 67, scope: !1610, inlinedAt: !1606)
!1610 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1611 = !DILocation(line: 141, column: 43, scope: !1610, inlinedAt: !1606)
!1612 = !DILocation(line: 141, column: 68, scope: !1610, inlinedAt: !1606)
!1613 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.SimpleRandom.set_seed", scope: !63, file: !63, line: 6, type: !1614, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1614 = !DISubroutineType(types: !1615)
!1615 = !{null, !1616, !257}
!1616 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "SimpleRandom*", baseType: !1617, size: 64, align: 64, dwarfAddressSpace: 0)
!1617 = !DIDerivedType(tag: DW_TAG_typedef, name: "SimpleRandom", scope: !63, file: !63, line: 3, baseType: !6, align: 8)
!1618 = !DILocation(line: 7, column: 1, scope: !1613)
!1619 = !DILocalVariable(name: "self", arg: 1, scope: !1613, file: !63, line: 6, type: !1616)
!1620 = !DILocation(line: 6, column: 31, scope: !1613)
!1621 = !DILocalVariable(name: "seed", arg: 2, scope: !1613, file: !63, line: 6, type: !257)
!1622 = !DILocation(line: 6, column: 45, scope: !1613)
!1623 = !DILocalVariable(name: "full", scope: !1613, file: !63, line: 8, type: !1624, align: 1)
!1624 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 64, align: 8, elements: !919)
!1625 = !DILocation(line: 8, column: 10, scope: !1613)
!1626 = !DILocation(line: 9, column: 18, scope: !1627)
!1627 = distinct !DILexicalBlock(scope: !1613, file: !63, line: 9, column: 2)
!1628 = !DILocalVariable(name: ".temp", scope: !1627, file: !63, line: 9, type: !262, align: 8)
!1629 = !DILocation(line: 9, column: 11, scope: !1627)
!1630 = !DILocalVariable(name: "i", scope: !1631, file: !63, line: 9, type: !262, align: 8)
!1631 = distinct !DILexicalBlock(scope: !1627, file: !63, line: 10, column: 2)
!1632 = !DILocation(line: 9, column: 11, scope: !1631)
!1633 = !DILocalVariable(name: "c", scope: !1631, file: !63, line: 9, type: !60, align: 1)
!1634 = !DILocation(line: 9, column: 14, scope: !1631)
!1635 = !DILocation(line: 9, column: 18, scope: !1631)
!1636 = !DILocation(line: 11, column: 8, scope: !1637)
!1637 = distinct !DILexicalBlock(scope: !1631, file: !63, line: 10, column: 2)
!1638 = !DILocation(line: 11, column: 18, scope: !1637)
!1639 = !DILocation(line: 11, column: 3, scope: !1637)
!1640 = !DILocation(line: 13, column: 3, scope: !1613)
!1641 = !DILocalVariable(name: "x", scope: !1642, file: !63, line: 256, type: !6, align: 8)
!1642 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1643 = !DILocation(line: 256, column: 9, scope: !1642, inlinedAt: !1644)
!1644 = !DILocation(line: 13, column: 25, scope: !1613)
!1645 = !DILocation(line: 257, column: 38, scope: !1642, inlinedAt: !1644)
!1646 = !DILocation(line: 258, column: 10, scope: !1642, inlinedAt: !1644)
!1647 = !DILocation(line: 13, column: 10, scope: !1613)
!1648 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.SimpleRandom.next_int", scope: !63, file: !63, line: 16, type: !1649, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1649 = !DISubroutineType(types: !1650)
!1650 = !{!20, !1616}
!1651 = !DILocation(line: 17, column: 1, scope: !1648)
!1652 = !DILocalVariable(name: "self", arg: 1, scope: !1648, file: !63, line: 16, type: !1616)
!1653 = !DILocation(line: 16, column: 31, scope: !1648)
!1654 = !DILocalVariable(name: "nextseed", scope: !1648, file: !63, line: 18, type: !6, align: 8)
!1655 = !DILocation(line: 18, column: 8, scope: !1648)
!1656 = !DILocation(line: 18, column: 28, scope: !1648)
!1657 = !DILocation(line: 18, column: 20, scope: !1648)
!1658 = !DILocation(line: 19, column: 3, scope: !1648)
!1659 = !DILocation(line: 19, column: 10, scope: !1648)
!1660 = !DILocation(line: 20, column: 16, scope: !1648)
!1661 = !DILocation(line: 20, column: 9, scope: !1648)
!1662 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.SimpleRandom.next_bytes", scope: !63, file: !63, line: 26, type: !1614, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1663 = !DILocation(line: 26, column: 66, scope: !1662)
!1664 = !DILocalVariable(name: "self", arg: 1, scope: !1662, file: !63, line: 26, type: !1616)
!1665 = !DILocation(line: 26, column: 33, scope: !1662)
!1666 = !DILocalVariable(name: "bytes", arg: 2, scope: !1662, file: !63, line: 26, type: !257)
!1667 = !DILocation(line: 26, column: 47, scope: !1662)
!1668 = !DILocation(line: 24, column: 11, scope: !1669)
!1669 = distinct !DILexicalBlock(scope: !1662, file: !63, line: 26, column: 66)
!1670 = !DILocalVariable(name: "len", scope: !1671, file: !63, line: 146, type: !262, align: 8)
!1671 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1672 = !DILocation(line: 146, column: 6, scope: !1671, inlinedAt: !1663)
!1673 = !DILocation(line: 146, column: 12, scope: !1671, inlinedAt: !1663)
!1674 = !DILocation(line: 148, column: 2, scope: !1671, inlinedAt: !1663)
!1675 = !DILocation(line: 148, column: 9, scope: !1676, inlinedAt: !1663)
!1676 = distinct !DILexicalBlock(scope: !1671, file: !2, line: 148, column: 2)
!1677 = !DILocalVariable(name: "value", scope: !1678, file: !63, line: 150, type: !20, align: 4)
!1678 = distinct !DILexicalBlock(scope: !1676, file: !2, line: 149, column: 2)
!1679 = !DILocation(line: 150, column: 7, scope: !1678, inlinedAt: !1663)
!1680 = !DILocation(line: 26, column: 89, scope: !1678, inlinedAt: !1663)
!1681 = !DILocation(line: 150, column: 15, scope: !1678, inlinedAt: !1663)
!1682 = !DILocation(line: 151, column: 7, scope: !1678, inlinedAt: !1663)
!1683 = !DILocation(line: 153, column: 33, scope: !1684, inlinedAt: !1663)
!1684 = distinct !DILexicalBlock(scope: !1678, file: !2, line: 152, column: 3)
!1685 = !DILocation(line: 153, column: 17, scope: !1684, inlinedAt: !1663)
!1686 = !DILocation(line: 153, column: 4, scope: !1684, inlinedAt: !1663)
!1687 = !DILocation(line: 153, column: 10, scope: !1684, inlinedAt: !1663)
!1688 = !DILocation(line: 154, column: 10, scope: !1684, inlinedAt: !1663)
!1689 = !DILocation(line: 156, column: 3, scope: !1678, inlinedAt: !1663)
!1690 = !DILocation(line: 157, column: 3, scope: !1678, inlinedAt: !1663)
!1691 = !DILocation(line: 158, column: 11, scope: !1678, inlinedAt: !1663)
!1692 = !DILocation(line: 158, column: 17, scope: !1678, inlinedAt: !1663)
!1693 = !DILocation(line: 206, column: 33, scope: !1694, inlinedAt: !1695)
!1694 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1695 = !DILocation(line: 160, column: 2, scope: !1671, inlinedAt: !1663)
!1696 = !DILocation(line: 206, column: 2, scope: !1694, inlinedAt: !1695)
!1697 = !DILocation(line: 208, column: 2, scope: !1694, inlinedAt: !1695)
!1698 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.SimpleRandom.next_int128", scope: !63, file: !63, line: 27, type: !1699, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1699 = !DISubroutineType(types: !1700)
!1700 = !{!15, !1616}
!1701 = !DILocation(line: 27, column: 56, scope: !1698)
!1702 = !DILocalVariable(name: "self", arg: 1, scope: !1698, file: !63, line: 27, type: !1616)
!1703 = !DILocation(line: 27, column: 37, scope: !1698)
!1704 = !DILocation(line: 27, column: 72, scope: !1705, inlinedAt: !1701)
!1705 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1706 = !DILocation(line: 138, column: 45, scope: !1705, inlinedAt: !1701)
!1707 = !DILocation(line: 138, column: 72, scope: !1705, inlinedAt: !1701)
!1708 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.SimpleRandom.next_long", scope: !63, file: !63, line: 28, type: !1709, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1709 = !DISubroutineType(types: !1710)
!1710 = !{!6, !1616}
!1711 = !DILocation(line: 28, column: 52, scope: !1708)
!1712 = !DILocalVariable(name: "self", arg: 1, scope: !1708, file: !63, line: 28, type: !1616)
!1713 = !DILocation(line: 28, column: 33, scope: !1708)
!1714 = !DILocation(line: 28, column: 65, scope: !1715, inlinedAt: !1711)
!1715 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1716 = !DILocation(line: 139, column: 40, scope: !1715, inlinedAt: !1711)
!1717 = !DILocation(line: 139, column: 65, scope: !1715, inlinedAt: !1711)
!1718 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.SimpleRandom.next_short", scope: !63, file: !63, line: 29, type: !1719, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1719 = !DISubroutineType(types: !1720)
!1720 = !{!23, !1616}
!1721 = !DILocation(line: 29, column: 54, scope: !1718)
!1722 = !DILocalVariable(name: "self", arg: 1, scope: !1718, file: !63, line: 29, type: !1616)
!1723 = !DILocation(line: 29, column: 35, scope: !1718)
!1724 = !DILocation(line: 29, column: 62, scope: !1718)
!1725 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.SimpleRandom.next_byte", scope: !63, file: !63, line: 30, type: !1726, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1726 = !DISubroutineType(types: !1727)
!1727 = !{!60, !1616}
!1728 = !DILocation(line: 30, column: 51, scope: !1725)
!1729 = !DILocalVariable(name: "self", arg: 1, scope: !1725, file: !63, line: 30, type: !1616)
!1730 = !DILocation(line: 30, column: 32, scope: !1725)
!1731 = !DILocation(line: 30, column: 57, scope: !1725)
!1732 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg128Random.set_seed", scope: !71, file: !71, line: 18, type: !1733, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1733 = !DISubroutineType(types: !1734)
!1734 = !{null, !1735, !257}
!1735 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg128Random*", baseType: !1736, size: 64, align: 64, dwarfAddressSpace: 0)
!1736 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg128Random", scope: !71, file: !71, line: 16, baseType: !15, align: 16)
!1737 = !DILocation(line: 19, column: 1, scope: !1732)
!1738 = !DILocalVariable(name: "self", arg: 1, scope: !1732, file: !71, line: 18, type: !1735)
!1739 = !DILocation(line: 18, column: 31, scope: !1732)
!1740 = !DILocalVariable(name: "input", arg: 2, scope: !1732, file: !71, line: 18, type: !257)
!1741 = !DILocation(line: 18, column: 45, scope: !1732)
!1742 = !DILocation(line: 20, column: 3, scope: !1732)
!1743 = !DILocalVariable(name: "return_value", scope: !1744, file: !71, line: 10, type: !15, align: 16)
!1744 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1745 = !DILocation(line: 10, column: 8, scope: !1744, inlinedAt: !1746)
!1746 = !DILocation(line: 20, column: 10, scope: !1732)
!1747 = !DILocation(line: 11, column: 2, scope: !1744, inlinedAt: !1746)
!1748 = !DILocation(line: 12, column: 9, scope: !1744, inlinedAt: !1746)
!1749 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg128Random.next_long", scope: !71, file: !71, line: 24, type: !1750, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1750 = !DISubroutineType(types: !1751)
!1751 = !{!6, !1735}
!1752 = !DILocation(line: 25, column: 1, scope: !1749)
!1753 = !DILocalVariable(name: "self", arg: 1, scope: !1749, file: !71, line: 24, type: !1735)
!1754 = !DILocation(line: 24, column: 33, scope: !1749)
!1755 = !DILocalVariable(name: "s", scope: !1749, file: !71, line: 26, type: !282, align: 8)
!1756 = !DILocation(line: 26, column: 11, scope: !1749)
!1757 = !DILocation(line: 26, column: 25, scope: !1749)
!1758 = !DILocalVariable(name: "result", scope: !1749, file: !71, line: 27, type: !6, align: 8)
!1759 = !DILocation(line: 27, column: 8, scope: !1749)
!1760 = !DILocation(line: 27, column: 26, scope: !1749)
!1761 = !DILocation(line: 27, column: 17, scope: !1749)
!1762 = !DILocation(line: 28, column: 3, scope: !1749)
!1763 = !DILocation(line: 28, column: 8, scope: !1749)
!1764 = !DILocation(line: 28, column: 7, scope: !1749)
!1765 = !DILocation(line: 29, column: 9, scope: !1749)
!1766 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg128Random.next_bytes", scope: !71, file: !71, line: 35, type: !1733, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1767 = !DILocation(line: 35, column: 66, scope: !1766)
!1768 = !DILocalVariable(name: "self", arg: 1, scope: !1766, file: !71, line: 35, type: !1735)
!1769 = !DILocation(line: 35, column: 33, scope: !1766)
!1770 = !DILocalVariable(name: "bytes", arg: 2, scope: !1766, file: !71, line: 35, type: !257)
!1771 = !DILocation(line: 35, column: 47, scope: !1766)
!1772 = !DILocation(line: 33, column: 11, scope: !1773)
!1773 = distinct !DILexicalBlock(scope: !1766, file: !71, line: 35, column: 66)
!1774 = !DILocalVariable(name: "len", scope: !1775, file: !71, line: 146, type: !262, align: 8)
!1775 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1776 = !DILocation(line: 146, column: 6, scope: !1775, inlinedAt: !1767)
!1777 = !DILocation(line: 146, column: 12, scope: !1775, inlinedAt: !1767)
!1778 = !DILocation(line: 148, column: 2, scope: !1775, inlinedAt: !1767)
!1779 = !DILocation(line: 148, column: 9, scope: !1780, inlinedAt: !1767)
!1780 = distinct !DILexicalBlock(scope: !1775, file: !2, line: 148, column: 2)
!1781 = !DILocalVariable(name: "value", scope: !1782, file: !71, line: 150, type: !6, align: 8)
!1782 = distinct !DILexicalBlock(scope: !1780, file: !2, line: 149, column: 2)
!1783 = !DILocation(line: 150, column: 7, scope: !1782, inlinedAt: !1767)
!1784 = !DILocation(line: 35, column: 89, scope: !1782, inlinedAt: !1767)
!1785 = !DILocation(line: 150, column: 15, scope: !1782, inlinedAt: !1767)
!1786 = !DILocation(line: 151, column: 7, scope: !1782, inlinedAt: !1767)
!1787 = !DILocation(line: 153, column: 33, scope: !1788, inlinedAt: !1767)
!1788 = distinct !DILexicalBlock(scope: !1782, file: !2, line: 152, column: 3)
!1789 = !DILocation(line: 153, column: 17, scope: !1788, inlinedAt: !1767)
!1790 = !DILocation(line: 153, column: 4, scope: !1788, inlinedAt: !1767)
!1791 = !DILocation(line: 153, column: 10, scope: !1788, inlinedAt: !1767)
!1792 = !DILocation(line: 154, column: 10, scope: !1788, inlinedAt: !1767)
!1793 = !DILocation(line: 156, column: 3, scope: !1782, inlinedAt: !1767)
!1794 = !DILocation(line: 157, column: 3, scope: !1782, inlinedAt: !1767)
!1795 = !DILocation(line: 158, column: 11, scope: !1782, inlinedAt: !1767)
!1796 = !DILocation(line: 158, column: 17, scope: !1782, inlinedAt: !1767)
!1797 = !DILocation(line: 206, column: 33, scope: !1798, inlinedAt: !1799)
!1798 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1799 = !DILocation(line: 160, column: 2, scope: !1775, inlinedAt: !1767)
!1800 = !DILocation(line: 206, column: 2, scope: !1798, inlinedAt: !1799)
!1801 = !DILocation(line: 208, column: 2, scope: !1798, inlinedAt: !1799)
!1802 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg128Random.next_int128", scope: !71, file: !71, line: 36, type: !1803, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1803 = !DISubroutineType(types: !1804)
!1804 = !{!15, !1735}
!1805 = !DILocation(line: 36, column: 56, scope: !1802)
!1806 = !DILocalVariable(name: "self", arg: 1, scope: !1802, file: !71, line: 36, type: !1735)
!1807 = !DILocation(line: 36, column: 37, scope: !1802)
!1808 = !DILocation(line: 36, column: 72, scope: !1809, inlinedAt: !1805)
!1809 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1810 = !DILocation(line: 138, column: 45, scope: !1809, inlinedAt: !1805)
!1811 = !DILocation(line: 138, column: 72, scope: !1809, inlinedAt: !1805)
!1812 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg128Random.next_int", scope: !71, file: !71, line: 37, type: !1813, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1813 = !DISubroutineType(types: !1814)
!1814 = !{!20, !1735}
!1815 = !DILocation(line: 37, column: 50, scope: !1812)
!1816 = !DILocalVariable(name: "self", arg: 1, scope: !1812, file: !71, line: 37, type: !1735)
!1817 = !DILocation(line: 37, column: 31, scope: !1812)
!1818 = !DILocation(line: 37, column: 56, scope: !1812)
!1819 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg128Random.next_short", scope: !71, file: !71, line: 38, type: !1820, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1820 = !DISubroutineType(types: !1821)
!1821 = !{!23, !1735}
!1822 = !DILocation(line: 38, column: 54, scope: !1819)
!1823 = !DILocalVariable(name: "self", arg: 1, scope: !1819, file: !71, line: 38, type: !1735)
!1824 = !DILocation(line: 38, column: 35, scope: !1819)
!1825 = !DILocation(line: 38, column: 62, scope: !1819)
!1826 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg128Random.next_byte", scope: !71, file: !71, line: 39, type: !1827, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1827 = !DISubroutineType(types: !1828)
!1828 = !{!60, !1735}
!1829 = !DILocation(line: 39, column: 51, scope: !1826)
!1830 = !DILocalVariable(name: "self", arg: 1, scope: !1826, file: !71, line: 39, type: !1735)
!1831 = !DILocation(line: 39, column: 32, scope: !1826)
!1832 = !DILocation(line: 39, column: 57, scope: !1826)
!1833 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg64Random.set_seed", scope: !71, file: !71, line: 45, type: !1834, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1834 = !DISubroutineType(types: !1835)
!1835 = !{null, !1836, !257}
!1836 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg64Random*", baseType: !1837, size: 64, align: 64, dwarfAddressSpace: 0)
!1837 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg64Random", scope: !71, file: !71, line: 43, baseType: !6, align: 8)
!1838 = !DILocation(line: 46, column: 1, scope: !1833)
!1839 = !DILocalVariable(name: "self", arg: 1, scope: !1833, file: !71, line: 45, type: !1836)
!1840 = !DILocation(line: 45, column: 30, scope: !1833)
!1841 = !DILocalVariable(name: "seed", arg: 2, scope: !1833, file: !71, line: 45, type: !257)
!1842 = !DILocation(line: 45, column: 44, scope: !1833)
!1843 = !DILocation(line: 47, column: 3, scope: !1833)
!1844 = !DILocalVariable(name: "return_value", scope: !1845, file: !71, line: 10, type: !6, align: 8)
!1845 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1846 = !DILocation(line: 10, column: 8, scope: !1845, inlinedAt: !1847)
!1847 = !DILocation(line: 47, column: 10, scope: !1833)
!1848 = !DILocation(line: 11, column: 2, scope: !1845, inlinedAt: !1847)
!1849 = !DILocation(line: 12, column: 9, scope: !1845, inlinedAt: !1847)
!1850 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg64Random.next_int", scope: !71, file: !71, line: 51, type: !1851, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1851 = !DISubroutineType(types: !1852)
!1852 = !{!20, !1836}
!1853 = !DILocation(line: 52, column: 1, scope: !1850)
!1854 = !DILocalVariable(name: "self", arg: 1, scope: !1850, file: !71, line: 51, type: !1836)
!1855 = !DILocation(line: 51, column: 30, scope: !1850)
!1856 = !DILocalVariable(name: "s", scope: !1850, file: !71, line: 53, type: !397, align: 8)
!1857 = !DILocation(line: 53, column: 9, scope: !1850)
!1858 = !DILocation(line: 53, column: 21, scope: !1850)
!1859 = !DILocalVariable(name: "result", scope: !1850, file: !71, line: 54, type: !20, align: 4)
!1860 = !DILocation(line: 54, column: 7, scope: !1850)
!1861 = !DILocation(line: 54, column: 24, scope: !1850)
!1862 = !DILocation(line: 54, column: 16, scope: !1850)
!1863 = !DILocation(line: 55, column: 3, scope: !1850)
!1864 = !DILocation(line: 55, column: 8, scope: !1850)
!1865 = !DILocation(line: 55, column: 7, scope: !1850)
!1866 = !DILocation(line: 56, column: 9, scope: !1850)
!1867 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg64Random.next_bytes", scope: !71, file: !71, line: 62, type: !1834, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1868 = !DILocation(line: 62, column: 65, scope: !1867)
!1869 = !DILocalVariable(name: "self", arg: 1, scope: !1867, file: !71, line: 62, type: !1836)
!1870 = !DILocation(line: 62, column: 32, scope: !1867)
!1871 = !DILocalVariable(name: "bytes", arg: 2, scope: !1867, file: !71, line: 62, type: !257)
!1872 = !DILocation(line: 62, column: 46, scope: !1867)
!1873 = !DILocation(line: 60, column: 11, scope: !1874)
!1874 = distinct !DILexicalBlock(scope: !1867, file: !71, line: 62, column: 65)
!1875 = !DILocalVariable(name: "len", scope: !1876, file: !71, line: 146, type: !262, align: 8)
!1876 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1877 = !DILocation(line: 146, column: 6, scope: !1876, inlinedAt: !1868)
!1878 = !DILocation(line: 146, column: 12, scope: !1876, inlinedAt: !1868)
!1879 = !DILocation(line: 148, column: 2, scope: !1876, inlinedAt: !1868)
!1880 = !DILocation(line: 148, column: 9, scope: !1881, inlinedAt: !1868)
!1881 = distinct !DILexicalBlock(scope: !1876, file: !2, line: 148, column: 2)
!1882 = !DILocalVariable(name: "value", scope: !1883, file: !71, line: 150, type: !20, align: 4)
!1883 = distinct !DILexicalBlock(scope: !1881, file: !2, line: 149, column: 2)
!1884 = !DILocation(line: 150, column: 7, scope: !1883, inlinedAt: !1868)
!1885 = !DILocation(line: 62, column: 88, scope: !1883, inlinedAt: !1868)
!1886 = !DILocation(line: 150, column: 15, scope: !1883, inlinedAt: !1868)
!1887 = !DILocation(line: 151, column: 7, scope: !1883, inlinedAt: !1868)
!1888 = !DILocation(line: 153, column: 33, scope: !1889, inlinedAt: !1868)
!1889 = distinct !DILexicalBlock(scope: !1883, file: !2, line: 152, column: 3)
!1890 = !DILocation(line: 153, column: 17, scope: !1889, inlinedAt: !1868)
!1891 = !DILocation(line: 153, column: 4, scope: !1889, inlinedAt: !1868)
!1892 = !DILocation(line: 153, column: 10, scope: !1889, inlinedAt: !1868)
!1893 = !DILocation(line: 154, column: 10, scope: !1889, inlinedAt: !1868)
!1894 = !DILocation(line: 156, column: 3, scope: !1883, inlinedAt: !1868)
!1895 = !DILocation(line: 157, column: 3, scope: !1883, inlinedAt: !1868)
!1896 = !DILocation(line: 158, column: 11, scope: !1883, inlinedAt: !1868)
!1897 = !DILocation(line: 158, column: 17, scope: !1883, inlinedAt: !1868)
!1898 = !DILocation(line: 206, column: 33, scope: !1899, inlinedAt: !1900)
!1899 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1900 = !DILocation(line: 160, column: 2, scope: !1876, inlinedAt: !1868)
!1901 = !DILocation(line: 206, column: 2, scope: !1899, inlinedAt: !1900)
!1902 = !DILocation(line: 208, column: 2, scope: !1899, inlinedAt: !1900)
!1903 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg64Random.next_int128", scope: !71, file: !71, line: 63, type: !1904, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1904 = !DISubroutineType(types: !1905)
!1905 = !{!15, !1836}
!1906 = !DILocation(line: 63, column: 55, scope: !1903)
!1907 = !DILocalVariable(name: "self", arg: 1, scope: !1903, file: !71, line: 63, type: !1836)
!1908 = !DILocation(line: 63, column: 36, scope: !1903)
!1909 = !DILocation(line: 63, column: 71, scope: !1910, inlinedAt: !1906)
!1910 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1911 = !DILocation(line: 138, column: 45, scope: !1910, inlinedAt: !1906)
!1912 = !DILocation(line: 138, column: 72, scope: !1910, inlinedAt: !1906)
!1913 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg64Random.next_long", scope: !71, file: !71, line: 64, type: !1914, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1914 = !DISubroutineType(types: !1915)
!1915 = !{!6, !1836}
!1916 = !DILocation(line: 64, column: 51, scope: !1913)
!1917 = !DILocalVariable(name: "self", arg: 1, scope: !1913, file: !71, line: 64, type: !1836)
!1918 = !DILocation(line: 64, column: 32, scope: !1913)
!1919 = !DILocation(line: 64, column: 64, scope: !1920, inlinedAt: !1916)
!1920 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!1921 = !DILocation(line: 139, column: 40, scope: !1920, inlinedAt: !1916)
!1922 = !DILocation(line: 139, column: 65, scope: !1920, inlinedAt: !1916)
!1923 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg64Random.next_short", scope: !71, file: !71, line: 65, type: !1924, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1924 = !DISubroutineType(types: !1925)
!1925 = !{!23, !1836}
!1926 = !DILocation(line: 65, column: 53, scope: !1923)
!1927 = !DILocalVariable(name: "self", arg: 1, scope: !1923, file: !71, line: 65, type: !1836)
!1928 = !DILocation(line: 65, column: 34, scope: !1923)
!1929 = !DILocation(line: 65, column: 61, scope: !1923)
!1930 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg64Random.next_byte", scope: !71, file: !71, line: 66, type: !1931, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1931 = !DISubroutineType(types: !1932)
!1932 = !{!60, !1836}
!1933 = !DILocation(line: 66, column: 50, scope: !1930)
!1934 = !DILocalVariable(name: "self", arg: 1, scope: !1930, file: !71, line: 66, type: !1836)
!1935 = !DILocation(line: 66, column: 31, scope: !1930)
!1936 = !DILocation(line: 66, column: 56, scope: !1930)
!1937 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg32Random.set_seed", scope: !71, file: !71, line: 72, type: !1938, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1938 = !DISubroutineType(types: !1939)
!1939 = !{null, !1940, !257}
!1940 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg32Random*", baseType: !1941, size: 64, align: 64, dwarfAddressSpace: 0)
!1941 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg32Random", scope: !71, file: !71, line: 70, baseType: !20, align: 4)
!1942 = !DILocation(line: 73, column: 1, scope: !1937)
!1943 = !DILocalVariable(name: "self", arg: 1, scope: !1937, file: !71, line: 72, type: !1940)
!1944 = !DILocation(line: 72, column: 30, scope: !1937)
!1945 = !DILocalVariable(name: "seed", arg: 2, scope: !1937, file: !71, line: 72, type: !257)
!1946 = !DILocation(line: 72, column: 44, scope: !1937)
!1947 = !DILocation(line: 74, column: 3, scope: !1937)
!1948 = !DILocalVariable(name: "return_value", scope: !1949, file: !71, line: 10, type: !20, align: 4)
!1949 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1950 = !DILocation(line: 10, column: 8, scope: !1949, inlinedAt: !1951)
!1951 = !DILocation(line: 74, column: 10, scope: !1937)
!1952 = !DILocation(line: 11, column: 2, scope: !1949, inlinedAt: !1951)
!1953 = !DILocation(line: 12, column: 9, scope: !1949, inlinedAt: !1951)
!1954 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg32Random.next_short", scope: !71, file: !71, line: 77, type: !1955, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1955 = !DISubroutineType(types: !1956)
!1956 = !{!23, !1940}
!1957 = !DILocation(line: 78, column: 1, scope: !1954)
!1958 = !DILocalVariable(name: "self", arg: 1, scope: !1954, file: !71, line: 77, type: !1940)
!1959 = !DILocation(line: 77, column: 34, scope: !1954)
!1960 = !DILocalVariable(name: "s", scope: !1954, file: !71, line: 79, type: !514, align: 8)
!1961 = !DILocation(line: 79, column: 8, scope: !1954)
!1962 = !DILocation(line: 79, column: 19, scope: !1954)
!1963 = !DILocalVariable(name: "result", scope: !1954, file: !71, line: 80, type: !23, align: 2)
!1964 = !DILocation(line: 80, column: 9, scope: !1954)
!1965 = !DILocation(line: 80, column: 28, scope: !1954)
!1966 = !DILocation(line: 80, column: 18, scope: !1954)
!1967 = !DILocation(line: 81, column: 3, scope: !1954)
!1968 = !DILocation(line: 81, column: 8, scope: !1954)
!1969 = !DILocation(line: 81, column: 7, scope: !1954)
!1970 = !DILocation(line: 82, column: 9, scope: !1954)
!1971 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg32Random.next_bytes", scope: !71, file: !71, line: 85, type: !1938, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1972 = !DILocation(line: 85, column: 65, scope: !1971)
!1973 = !DILocalVariable(name: "self", arg: 1, scope: !1971, file: !71, line: 85, type: !1940)
!1974 = !DILocation(line: 85, column: 32, scope: !1971)
!1975 = !DILocalVariable(name: "bytes", arg: 2, scope: !1971, file: !71, line: 85, type: !257)
!1976 = !DILocation(line: 85, column: 46, scope: !1971)
!1977 = !DILocalVariable(name: "len", scope: !1978, file: !71, line: 146, type: !262, align: 8)
!1978 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!1979 = !DILocation(line: 146, column: 6, scope: !1978, inlinedAt: !1972)
!1980 = !DILocation(line: 146, column: 12, scope: !1978, inlinedAt: !1972)
!1981 = !DILocation(line: 148, column: 2, scope: !1978, inlinedAt: !1972)
!1982 = !DILocation(line: 148, column: 9, scope: !1983, inlinedAt: !1972)
!1983 = distinct !DILexicalBlock(scope: !1978, file: !2, line: 148, column: 2)
!1984 = !DILocalVariable(name: "value", scope: !1985, file: !71, line: 150, type: !23, align: 2)
!1985 = distinct !DILexicalBlock(scope: !1983, file: !2, line: 149, column: 2)
!1986 = !DILocation(line: 150, column: 7, scope: !1985, inlinedAt: !1972)
!1987 = !DILocation(line: 85, column: 88, scope: !1985, inlinedAt: !1972)
!1988 = !DILocation(line: 150, column: 15, scope: !1985, inlinedAt: !1972)
!1989 = !DILocation(line: 151, column: 7, scope: !1985, inlinedAt: !1972)
!1990 = !DILocation(line: 153, column: 33, scope: !1991, inlinedAt: !1972)
!1991 = distinct !DILexicalBlock(scope: !1985, file: !2, line: 152, column: 3)
!1992 = !DILocation(line: 153, column: 17, scope: !1991, inlinedAt: !1972)
!1993 = !DILocation(line: 153, column: 4, scope: !1991, inlinedAt: !1972)
!1994 = !DILocation(line: 153, column: 10, scope: !1991, inlinedAt: !1972)
!1995 = !DILocation(line: 154, column: 10, scope: !1991, inlinedAt: !1972)
!1996 = !DILocation(line: 156, column: 3, scope: !1985, inlinedAt: !1972)
!1997 = !DILocation(line: 157, column: 3, scope: !1985, inlinedAt: !1972)
!1998 = !DILocation(line: 158, column: 11, scope: !1985, inlinedAt: !1972)
!1999 = !DILocation(line: 158, column: 17, scope: !1985, inlinedAt: !1972)
!2000 = !DILocation(line: 206, column: 33, scope: !2001, inlinedAt: !2002)
!2001 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2002 = !DILocation(line: 160, column: 2, scope: !1978, inlinedAt: !1972)
!2003 = !DILocation(line: 206, column: 2, scope: !2001, inlinedAt: !2002)
!2004 = !DILocation(line: 208, column: 2, scope: !2001, inlinedAt: !2002)
!2005 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg32Random.next_int128", scope: !71, file: !71, line: 86, type: !2006, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2006 = !DISubroutineType(types: !2007)
!2007 = !{!15, !1940}
!2008 = !DILocation(line: 86, column: 55, scope: !2005)
!2009 = !DILocalVariable(name: "self", arg: 1, scope: !2005, file: !71, line: 86, type: !1940)
!2010 = !DILocation(line: 86, column: 36, scope: !2005)
!2011 = !DILocation(line: 86, column: 71, scope: !2012, inlinedAt: !2008)
!2012 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2013 = !DILocation(line: 138, column: 45, scope: !2012, inlinedAt: !2008)
!2014 = !DILocation(line: 138, column: 72, scope: !2012, inlinedAt: !2008)
!2015 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg32Random.next_long", scope: !71, file: !71, line: 87, type: !2016, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2016 = !DISubroutineType(types: !2017)
!2017 = !{!6, !1940}
!2018 = !DILocation(line: 87, column: 51, scope: !2015)
!2019 = !DILocalVariable(name: "self", arg: 1, scope: !2015, file: !71, line: 87, type: !1940)
!2020 = !DILocation(line: 87, column: 32, scope: !2015)
!2021 = !DILocation(line: 87, column: 64, scope: !2022, inlinedAt: !2018)
!2022 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2023 = !DILocation(line: 139, column: 40, scope: !2022, inlinedAt: !2018)
!2024 = !DILocation(line: 139, column: 65, scope: !2022, inlinedAt: !2018)
!2025 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg32Random.next_int", scope: !71, file: !71, line: 88, type: !2026, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2026 = !DISubroutineType(types: !2027)
!2027 = !{!20, !1940}
!2028 = !DILocation(line: 88, column: 49, scope: !2025)
!2029 = !DILocalVariable(name: "self", arg: 1, scope: !2025, file: !71, line: 88, type: !1940)
!2030 = !DILocation(line: 88, column: 30, scope: !2025)
!2031 = !DILocation(line: 88, column: 63, scope: !2032, inlinedAt: !2028)
!2032 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2033 = !DILocation(line: 140, column: 40, scope: !2032, inlinedAt: !2028)
!2034 = !DILocation(line: 140, column: 64, scope: !2032, inlinedAt: !2028)
!2035 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg32Random.next_byte", scope: !71, file: !71, line: 89, type: !2036, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2036 = !DISubroutineType(types: !2037)
!2037 = !{!60, !1940}
!2038 = !DILocation(line: 89, column: 50, scope: !2035)
!2039 = !DILocalVariable(name: "self", arg: 1, scope: !2035, file: !71, line: 89, type: !1940)
!2040 = !DILocation(line: 89, column: 31, scope: !2035)
!2041 = !DILocation(line: 89, column: 56, scope: !2035)
!2042 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg16Random.set_seed", scope: !71, file: !71, line: 95, type: !2043, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2043 = !DISubroutineType(types: !2044)
!2044 = !{null, !2045, !257}
!2045 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg16Random*", baseType: !2046, size: 64, align: 64, dwarfAddressSpace: 0)
!2046 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg16Random", scope: !71, file: !71, line: 93, baseType: !23, align: 2)
!2047 = !DILocation(line: 96, column: 1, scope: !2042)
!2048 = !DILocalVariable(name: "self", arg: 1, scope: !2042, file: !71, line: 95, type: !2045)
!2049 = !DILocation(line: 95, column: 30, scope: !2042)
!2050 = !DILocalVariable(name: "seed", arg: 2, scope: !2042, file: !71, line: 95, type: !257)
!2051 = !DILocation(line: 95, column: 44, scope: !2042)
!2052 = !DILocation(line: 97, column: 3, scope: !2042)
!2053 = !DILocalVariable(name: "return_value", scope: !2054, file: !71, line: 10, type: !23, align: 2)
!2054 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2055 = !DILocation(line: 10, column: 8, scope: !2054, inlinedAt: !2056)
!2056 = !DILocation(line: 97, column: 10, scope: !2042)
!2057 = !DILocation(line: 11, column: 2, scope: !2054, inlinedAt: !2056)
!2058 = !DILocation(line: 12, column: 9, scope: !2054, inlinedAt: !2056)
!2059 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg16Random.next_byte", scope: !71, file: !71, line: 100, type: !2060, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2060 = !DISubroutineType(types: !2061)
!2061 = !{!60, !2045}
!2062 = !DILocation(line: 101, column: 1, scope: !2059)
!2063 = !DILocalVariable(name: "self", arg: 1, scope: !2059, file: !71, line: 100, type: !2045)
!2064 = !DILocation(line: 100, column: 31, scope: !2059)
!2065 = !DILocalVariable(name: "s", scope: !2059, file: !71, line: 102, type: !634, align: 8)
!2066 = !DILocation(line: 102, column: 10, scope: !2059)
!2067 = !DILocation(line: 102, column: 23, scope: !2059)
!2068 = !DILocalVariable(name: "result", scope: !2059, file: !71, line: 103, type: !60, align: 1)
!2069 = !DILocation(line: 103, column: 7, scope: !2059)
!2070 = !DILocation(line: 103, column: 24, scope: !2059)
!2071 = !DILocation(line: 103, column: 16, scope: !2059)
!2072 = !DILocation(line: 104, column: 3, scope: !2059)
!2073 = !DILocation(line: 104, column: 8, scope: !2059)
!2074 = !DILocation(line: 104, column: 7, scope: !2059)
!2075 = !DILocation(line: 105, column: 9, scope: !2059)
!2076 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg16Random.next_bytes", scope: !71, file: !71, line: 108, type: !2043, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2077 = !DILocation(line: 108, column: 65, scope: !2076)
!2078 = !DILocalVariable(name: "self", arg: 1, scope: !2076, file: !71, line: 108, type: !2045)
!2079 = !DILocation(line: 108, column: 32, scope: !2076)
!2080 = !DILocalVariable(name: "bytes", arg: 2, scope: !2076, file: !71, line: 108, type: !257)
!2081 = !DILocation(line: 108, column: 46, scope: !2076)
!2082 = !DILocalVariable(name: "len", scope: !2083, file: !71, line: 146, type: !262, align: 8)
!2083 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2084 = !DILocation(line: 146, column: 6, scope: !2083, inlinedAt: !2077)
!2085 = !DILocation(line: 146, column: 12, scope: !2083, inlinedAt: !2077)
!2086 = !DILocation(line: 148, column: 2, scope: !2083, inlinedAt: !2077)
!2087 = !DILocation(line: 148, column: 9, scope: !2088, inlinedAt: !2077)
!2088 = distinct !DILexicalBlock(scope: !2083, file: !2, line: 148, column: 2)
!2089 = !DILocalVariable(name: "value", scope: !2090, file: !71, line: 150, type: !60, align: 1)
!2090 = distinct !DILexicalBlock(scope: !2088, file: !2, line: 149, column: 2)
!2091 = !DILocation(line: 150, column: 7, scope: !2090, inlinedAt: !2077)
!2092 = !DILocation(line: 108, column: 88, scope: !2090, inlinedAt: !2077)
!2093 = !DILocation(line: 150, column: 15, scope: !2090, inlinedAt: !2077)
!2094 = !DILocation(line: 151, column: 7, scope: !2090, inlinedAt: !2077)
!2095 = !DILocation(line: 153, column: 33, scope: !2096, inlinedAt: !2077)
!2096 = distinct !DILexicalBlock(scope: !2090, file: !2, line: 152, column: 3)
!2097 = !DILocation(line: 153, column: 17, scope: !2096, inlinedAt: !2077)
!2098 = !DILocation(line: 153, column: 4, scope: !2096, inlinedAt: !2077)
!2099 = !DILocation(line: 153, column: 10, scope: !2096, inlinedAt: !2077)
!2100 = !DILocation(line: 154, column: 10, scope: !2096, inlinedAt: !2077)
!2101 = !DILocation(line: 156, column: 3, scope: !2090, inlinedAt: !2077)
!2102 = !DILocation(line: 157, column: 3, scope: !2090, inlinedAt: !2077)
!2103 = !DILocation(line: 158, column: 11, scope: !2090, inlinedAt: !2077)
!2104 = !DILocation(line: 158, column: 17, scope: !2090, inlinedAt: !2077)
!2105 = !DILocation(line: 206, column: 33, scope: !2106, inlinedAt: !2107)
!2106 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2107 = !DILocation(line: 160, column: 2, scope: !2083, inlinedAt: !2077)
!2108 = !DILocation(line: 206, column: 2, scope: !2106, inlinedAt: !2107)
!2109 = !DILocation(line: 208, column: 2, scope: !2106, inlinedAt: !2107)
!2110 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg16Random.next_int128", scope: !71, file: !71, line: 109, type: !2111, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2111 = !DISubroutineType(types: !2112)
!2112 = !{!15, !2045}
!2113 = !DILocation(line: 109, column: 55, scope: !2110)
!2114 = !DILocalVariable(name: "self", arg: 1, scope: !2110, file: !71, line: 109, type: !2045)
!2115 = !DILocation(line: 109, column: 36, scope: !2110)
!2116 = !DILocation(line: 109, column: 71, scope: !2117, inlinedAt: !2113)
!2117 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2118 = !DILocation(line: 138, column: 45, scope: !2117, inlinedAt: !2113)
!2119 = !DILocation(line: 138, column: 72, scope: !2117, inlinedAt: !2113)
!2120 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg16Random.next_long", scope: !71, file: !71, line: 110, type: !2121, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2121 = !DISubroutineType(types: !2122)
!2122 = !{!6, !2045}
!2123 = !DILocation(line: 110, column: 51, scope: !2120)
!2124 = !DILocalVariable(name: "self", arg: 1, scope: !2120, file: !71, line: 110, type: !2045)
!2125 = !DILocation(line: 110, column: 32, scope: !2120)
!2126 = !DILocation(line: 110, column: 64, scope: !2127, inlinedAt: !2123)
!2127 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2128 = !DILocation(line: 139, column: 40, scope: !2127, inlinedAt: !2123)
!2129 = !DILocation(line: 139, column: 65, scope: !2127, inlinedAt: !2123)
!2130 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg16Random.next_int", scope: !71, file: !71, line: 111, type: !2131, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2131 = !DISubroutineType(types: !2132)
!2132 = !{!20, !2045}
!2133 = !DILocation(line: 111, column: 49, scope: !2130)
!2134 = !DILocalVariable(name: "self", arg: 1, scope: !2130, file: !71, line: 111, type: !2045)
!2135 = !DILocation(line: 111, column: 30, scope: !2130)
!2136 = !DILocation(line: 111, column: 63, scope: !2137, inlinedAt: !2133)
!2137 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2138 = !DILocation(line: 140, column: 40, scope: !2137, inlinedAt: !2133)
!2139 = !DILocation(line: 140, column: 64, scope: !2137, inlinedAt: !2133)
!2140 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg16Random.next_short", scope: !71, file: !71, line: 112, type: !2141, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2141 = !DISubroutineType(types: !2142)
!2142 = !{!23, !2045}
!2143 = !DILocation(line: 112, column: 53, scope: !2140)
!2144 = !DILocalVariable(name: "self", arg: 1, scope: !2140, file: !71, line: 112, type: !2045)
!2145 = !DILocation(line: 112, column: 34, scope: !2140)
!2146 = !DILocation(line: 112, column: 68, scope: !2147, inlinedAt: !2143)
!2147 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2148 = !DILocation(line: 141, column: 43, scope: !2147, inlinedAt: !2143)
!2149 = !DILocation(line: 141, column: 68, scope: !2147, inlinedAt: !2143)
!2150 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg128Random.set_seed", scope: !88, file: !88, line: 12, type: !2151, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2151 = !DISubroutineType(types: !2152)
!2152 = !{null, !2153, !257}
!2153 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg128Random*", baseType: !2154, size: 64, align: 64, dwarfAddressSpace: 0)
!2154 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg128Random", scope: !88, file: !88, line: 10, baseType: !15, align: 16)
!2155 = !DILocation(line: 13, column: 1, scope: !2150)
!2156 = !DILocalVariable(name: "self", arg: 1, scope: !2150, file: !88, line: 12, type: !2153)
!2157 = !DILocation(line: 12, column: 31, scope: !2150)
!2158 = !DILocalVariable(name: "seed", arg: 2, scope: !2150, file: !88, line: 12, type: !257)
!2159 = !DILocation(line: 12, column: 45, scope: !2150)
!2160 = !DILocation(line: 14, column: 3, scope: !2150)
!2161 = !DILocalVariable(name: "return_value", scope: !2162, file: !88, line: 10, type: !15, align: 16)
!2162 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2163 = !DILocation(line: 10, column: 8, scope: !2162, inlinedAt: !2164)
!2164 = !DILocation(line: 14, column: 25, scope: !2150)
!2165 = !DILocation(line: 11, column: 2, scope: !2162, inlinedAt: !2164)
!2166 = !DILocation(line: 12, column: 9, scope: !2162, inlinedAt: !2164)
!2167 = !DILocation(line: 14, column: 10, scope: !2150)
!2168 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg128Random.next_bytes", scope: !88, file: !88, line: 20, type: !2151, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2169 = !DILocation(line: 21, column: 1, scope: !2168)
!2170 = !DILocalVariable(name: "self", arg: 1, scope: !2168, file: !88, line: 20, type: !2153)
!2171 = !DILocation(line: 20, column: 33, scope: !2168)
!2172 = !DILocalVariable(name: "bytes", arg: 2, scope: !2168, file: !88, line: 20, type: !257)
!2173 = !DILocation(line: 20, column: 47, scope: !2168)
!2174 = !DILocation(line: 18, column: 11, scope: !2175)
!2175 = distinct !DILexicalBlock(scope: !2168, file: !88, line: 21, column: 1)
!2176 = !DILocalVariable(name: "len", scope: !2177, file: !88, line: 146, type: !262, align: 8)
!2177 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2178 = !DILocation(line: 146, column: 6, scope: !2177, inlinedAt: !2179)
!2179 = !DILocation(line: 22, column: 2, scope: !2168)
!2180 = !DILocation(line: 146, column: 12, scope: !2177, inlinedAt: !2179)
!2181 = !DILocation(line: 148, column: 2, scope: !2177, inlinedAt: !2179)
!2182 = !DILocation(line: 148, column: 9, scope: !2183, inlinedAt: !2179)
!2183 = distinct !DILexicalBlock(scope: !2177, file: !2, line: 148, column: 2)
!2184 = !DILocalVariable(name: "value", scope: !2185, file: !88, line: 150, type: !6, align: 8)
!2185 = distinct !DILexicalBlock(scope: !2183, file: !2, line: 149, column: 2)
!2186 = !DILocation(line: 150, column: 7, scope: !2185, inlinedAt: !2179)
!2187 = !DILocation(line: 22, column: 25, scope: !2185, inlinedAt: !2179)
!2188 = !DILocation(line: 150, column: 15, scope: !2185, inlinedAt: !2179)
!2189 = !DILocation(line: 151, column: 7, scope: !2185, inlinedAt: !2179)
!2190 = !DILocation(line: 153, column: 33, scope: !2191, inlinedAt: !2179)
!2191 = distinct !DILexicalBlock(scope: !2185, file: !2, line: 152, column: 3)
!2192 = !DILocation(line: 153, column: 17, scope: !2191, inlinedAt: !2179)
!2193 = !DILocation(line: 153, column: 4, scope: !2191, inlinedAt: !2179)
!2194 = !DILocation(line: 153, column: 10, scope: !2191, inlinedAt: !2179)
!2195 = !DILocation(line: 154, column: 10, scope: !2191, inlinedAt: !2179)
!2196 = !DILocation(line: 156, column: 3, scope: !2185, inlinedAt: !2179)
!2197 = !DILocation(line: 157, column: 3, scope: !2185, inlinedAt: !2179)
!2198 = !DILocation(line: 158, column: 11, scope: !2185, inlinedAt: !2179)
!2199 = !DILocation(line: 158, column: 17, scope: !2185, inlinedAt: !2179)
!2200 = !DILocation(line: 206, column: 33, scope: !2201, inlinedAt: !2202)
!2201 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2202 = !DILocation(line: 160, column: 2, scope: !2177, inlinedAt: !2179)
!2203 = !DILocation(line: 206, column: 2, scope: !2201, inlinedAt: !2202)
!2204 = !DILocation(line: 208, column: 2, scope: !2201, inlinedAt: !2202)
!2205 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg128Random.next_long", scope: !88, file: !88, line: 25, type: !2206, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2206 = !DISubroutineType(types: !2207)
!2207 = !{!6, !2153}
!2208 = !DILocation(line: 26, column: 1, scope: !2205)
!2209 = !DILocalVariable(name: "self", arg: 1, scope: !2205, file: !88, line: 25, type: !2153)
!2210 = !DILocation(line: 25, column: 33, scope: !2205)
!2211 = !DILocalVariable(name: "s", scope: !2205, file: !88, line: 27, type: !282, align: 8)
!2212 = !DILocation(line: 27, column: 11, scope: !2205)
!2213 = !DILocation(line: 27, column: 25, scope: !2205)
!2214 = !DILocalVariable(name: "result", scope: !2205, file: !88, line: 28, type: !6, align: 8)
!2215 = !DILocation(line: 28, column: 8, scope: !2205)
!2216 = !DILocation(line: 28, column: 26, scope: !2205)
!2217 = !DILocation(line: 28, column: 17, scope: !2205)
!2218 = !DILocation(line: 29, column: 3, scope: !2205)
!2219 = !DILocation(line: 29, column: 2, scope: !2205)
!2220 = !DILocation(line: 30, column: 9, scope: !2205)
!2221 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg128Random.next_int128", scope: !88, file: !88, line: 33, type: !2222, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2222 = !DISubroutineType(types: !2223)
!2223 = !{!15, !2153}
!2224 = !DILocation(line: 33, column: 56, scope: !2221)
!2225 = !DILocalVariable(name: "self", arg: 1, scope: !2221, file: !88, line: 33, type: !2153)
!2226 = !DILocation(line: 33, column: 37, scope: !2221)
!2227 = !DILocation(line: 33, column: 72, scope: !2228, inlinedAt: !2224)
!2228 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2229 = !DILocation(line: 138, column: 45, scope: !2228, inlinedAt: !2224)
!2230 = !DILocation(line: 138, column: 72, scope: !2228, inlinedAt: !2224)
!2231 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg128Random.next_int", scope: !88, file: !88, line: 34, type: !2232, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2232 = !DISubroutineType(types: !2233)
!2233 = !{!20, !2153}
!2234 = !DILocation(line: 34, column: 50, scope: !2231)
!2235 = !DILocalVariable(name: "self", arg: 1, scope: !2231, file: !88, line: 34, type: !2153)
!2236 = !DILocation(line: 34, column: 31, scope: !2231)
!2237 = !DILocation(line: 34, column: 56, scope: !2231)
!2238 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg128Random.next_short", scope: !88, file: !88, line: 35, type: !2239, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2239 = !DISubroutineType(types: !2240)
!2240 = !{!23, !2153}
!2241 = !DILocation(line: 35, column: 54, scope: !2238)
!2242 = !DILocalVariable(name: "self", arg: 1, scope: !2238, file: !88, line: 35, type: !2153)
!2243 = !DILocation(line: 35, column: 35, scope: !2238)
!2244 = !DILocation(line: 35, column: 62, scope: !2238)
!2245 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg128Random.next_byte", scope: !88, file: !88, line: 36, type: !2246, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2246 = !DISubroutineType(types: !2247)
!2247 = !{!60, !2153}
!2248 = !DILocation(line: 36, column: 51, scope: !2245)
!2249 = !DILocalVariable(name: "self", arg: 1, scope: !2245, file: !88, line: 36, type: !2153)
!2250 = !DILocation(line: 36, column: 32, scope: !2245)
!2251 = !DILocation(line: 36, column: 57, scope: !2245)
!2252 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg64Random.set_seed", scope: !88, file: !88, line: 45, type: !2253, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2253 = !DISubroutineType(types: !2254)
!2254 = !{null, !2255, !257}
!2255 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg64Random*", baseType: !2256, size: 64, align: 64, dwarfAddressSpace: 0)
!2256 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg64Random", scope: !88, file: !88, line: 43, baseType: !6, align: 8)
!2257 = !DILocation(line: 46, column: 1, scope: !2252)
!2258 = !DILocalVariable(name: "self", arg: 1, scope: !2252, file: !88, line: 45, type: !2255)
!2259 = !DILocation(line: 45, column: 30, scope: !2252)
!2260 = !DILocalVariable(name: "seed", arg: 2, scope: !2252, file: !88, line: 45, type: !257)
!2261 = !DILocation(line: 45, column: 44, scope: !2252)
!2262 = !DILocation(line: 47, column: 3, scope: !2252)
!2263 = !DILocalVariable(name: "return_value", scope: !2264, file: !88, line: 10, type: !6, align: 8)
!2264 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2265 = !DILocation(line: 10, column: 8, scope: !2264, inlinedAt: !2266)
!2266 = !DILocation(line: 47, column: 10, scope: !2252)
!2267 = !DILocation(line: 11, column: 2, scope: !2264, inlinedAt: !2266)
!2268 = !DILocation(line: 12, column: 9, scope: !2264, inlinedAt: !2266)
!2269 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg64Random.next_bytes", scope: !88, file: !88, line: 53, type: !2253, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2270 = !DILocation(line: 54, column: 1, scope: !2269)
!2271 = !DILocalVariable(name: "self", arg: 1, scope: !2269, file: !88, line: 53, type: !2255)
!2272 = !DILocation(line: 53, column: 32, scope: !2269)
!2273 = !DILocalVariable(name: "bytes", arg: 2, scope: !2269, file: !88, line: 53, type: !257)
!2274 = !DILocation(line: 53, column: 46, scope: !2269)
!2275 = !DILocation(line: 51, column: 11, scope: !2276)
!2276 = distinct !DILexicalBlock(scope: !2269, file: !88, line: 54, column: 1)
!2277 = !DILocalVariable(name: "len", scope: !2278, file: !88, line: 146, type: !262, align: 8)
!2278 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2279 = !DILocation(line: 146, column: 6, scope: !2278, inlinedAt: !2280)
!2280 = !DILocation(line: 55, column: 2, scope: !2269)
!2281 = !DILocation(line: 146, column: 12, scope: !2278, inlinedAt: !2280)
!2282 = !DILocation(line: 148, column: 2, scope: !2278, inlinedAt: !2280)
!2283 = !DILocation(line: 148, column: 9, scope: !2284, inlinedAt: !2280)
!2284 = distinct !DILexicalBlock(scope: !2278, file: !2, line: 148, column: 2)
!2285 = !DILocalVariable(name: "value", scope: !2286, file: !88, line: 150, type: !20, align: 4)
!2286 = distinct !DILexicalBlock(scope: !2284, file: !2, line: 149, column: 2)
!2287 = !DILocation(line: 150, column: 7, scope: !2286, inlinedAt: !2280)
!2288 = !DILocation(line: 55, column: 25, scope: !2286, inlinedAt: !2280)
!2289 = !DILocation(line: 150, column: 15, scope: !2286, inlinedAt: !2280)
!2290 = !DILocation(line: 151, column: 7, scope: !2286, inlinedAt: !2280)
!2291 = !DILocation(line: 153, column: 33, scope: !2292, inlinedAt: !2280)
!2292 = distinct !DILexicalBlock(scope: !2286, file: !2, line: 152, column: 3)
!2293 = !DILocation(line: 153, column: 17, scope: !2292, inlinedAt: !2280)
!2294 = !DILocation(line: 153, column: 4, scope: !2292, inlinedAt: !2280)
!2295 = !DILocation(line: 153, column: 10, scope: !2292, inlinedAt: !2280)
!2296 = !DILocation(line: 154, column: 10, scope: !2292, inlinedAt: !2280)
!2297 = !DILocation(line: 156, column: 3, scope: !2286, inlinedAt: !2280)
!2298 = !DILocation(line: 157, column: 3, scope: !2286, inlinedAt: !2280)
!2299 = !DILocation(line: 158, column: 11, scope: !2286, inlinedAt: !2280)
!2300 = !DILocation(line: 158, column: 17, scope: !2286, inlinedAt: !2280)
!2301 = !DILocation(line: 206, column: 33, scope: !2302, inlinedAt: !2303)
!2302 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2303 = !DILocation(line: 160, column: 2, scope: !2278, inlinedAt: !2280)
!2304 = !DILocation(line: 206, column: 2, scope: !2302, inlinedAt: !2303)
!2305 = !DILocation(line: 208, column: 2, scope: !2302, inlinedAt: !2303)
!2306 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg64Random.next_int", scope: !88, file: !88, line: 58, type: !2307, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2307 = !DISubroutineType(types: !2308)
!2308 = !{!20, !2255}
!2309 = !DILocation(line: 59, column: 1, scope: !2306)
!2310 = !DILocalVariable(name: "self", arg: 1, scope: !2306, file: !88, line: 58, type: !2255)
!2311 = !DILocation(line: 58, column: 30, scope: !2306)
!2312 = !DILocalVariable(name: "s", scope: !2306, file: !88, line: 60, type: !397, align: 8)
!2313 = !DILocation(line: 60, column: 9, scope: !2306)
!2314 = !DILocation(line: 60, column: 21, scope: !2306)
!2315 = !DILocalVariable(name: "result", scope: !2306, file: !88, line: 61, type: !20, align: 4)
!2316 = !DILocation(line: 61, column: 7, scope: !2306)
!2317 = !DILocation(line: 61, column: 24, scope: !2306)
!2318 = !DILocation(line: 61, column: 16, scope: !2306)
!2319 = !DILocation(line: 62, column: 3, scope: !2306)
!2320 = !DILocation(line: 62, column: 2, scope: !2306)
!2321 = !DILocation(line: 63, column: 9, scope: !2306)
!2322 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg64Random.next_int128", scope: !88, file: !88, line: 66, type: !2323, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2323 = !DISubroutineType(types: !2324)
!2324 = !{!15, !2255}
!2325 = !DILocation(line: 66, column: 55, scope: !2322)
!2326 = !DILocalVariable(name: "self", arg: 1, scope: !2322, file: !88, line: 66, type: !2255)
!2327 = !DILocation(line: 66, column: 36, scope: !2322)
!2328 = !DILocation(line: 66, column: 71, scope: !2329, inlinedAt: !2325)
!2329 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2330 = !DILocation(line: 138, column: 45, scope: !2329, inlinedAt: !2325)
!2331 = !DILocation(line: 138, column: 72, scope: !2329, inlinedAt: !2325)
!2332 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg64Random.next_long", scope: !88, file: !88, line: 67, type: !2333, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2333 = !DISubroutineType(types: !2334)
!2334 = !{!6, !2255}
!2335 = !DILocation(line: 67, column: 51, scope: !2332)
!2336 = !DILocalVariable(name: "self", arg: 1, scope: !2332, file: !88, line: 67, type: !2255)
!2337 = !DILocation(line: 67, column: 32, scope: !2332)
!2338 = !DILocation(line: 67, column: 64, scope: !2339, inlinedAt: !2335)
!2339 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2340 = !DILocation(line: 139, column: 40, scope: !2339, inlinedAt: !2335)
!2341 = !DILocation(line: 139, column: 65, scope: !2339, inlinedAt: !2335)
!2342 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg64Random.next_short", scope: !88, file: !88, line: 68, type: !2343, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2343 = !DISubroutineType(types: !2344)
!2344 = !{!23, !2255}
!2345 = !DILocation(line: 68, column: 53, scope: !2342)
!2346 = !DILocalVariable(name: "self", arg: 1, scope: !2342, file: !88, line: 68, type: !2255)
!2347 = !DILocation(line: 68, column: 34, scope: !2342)
!2348 = !DILocation(line: 68, column: 61, scope: !2342)
!2349 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg64Random.next_byte", scope: !88, file: !88, line: 69, type: !2350, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2350 = !DISubroutineType(types: !2351)
!2351 = !{!60, !2255}
!2352 = !DILocation(line: 69, column: 50, scope: !2349)
!2353 = !DILocalVariable(name: "self", arg: 1, scope: !2349, file: !88, line: 69, type: !2255)
!2354 = !DILocation(line: 69, column: 31, scope: !2349)
!2355 = !DILocation(line: 69, column: 56, scope: !2349)
!2356 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg32Random.set_seed", scope: !88, file: !88, line: 76, type: !2357, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2357 = !DISubroutineType(types: !2358)
!2358 = !{null, !2359, !257}
!2359 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg32Random*", baseType: !2360, size: 64, align: 64, dwarfAddressSpace: 0)
!2360 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg32Random", scope: !88, file: !88, line: 74, baseType: !20, align: 4)
!2361 = !DILocation(line: 77, column: 1, scope: !2356)
!2362 = !DILocalVariable(name: "self", arg: 1, scope: !2356, file: !88, line: 76, type: !2359)
!2363 = !DILocation(line: 76, column: 30, scope: !2356)
!2364 = !DILocalVariable(name: "seed", arg: 2, scope: !2356, file: !88, line: 76, type: !257)
!2365 = !DILocation(line: 76, column: 44, scope: !2356)
!2366 = !DILocation(line: 78, column: 3, scope: !2356)
!2367 = !DILocalVariable(name: "return_value", scope: !2368, file: !88, line: 10, type: !20, align: 4)
!2368 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2369 = !DILocation(line: 10, column: 8, scope: !2368, inlinedAt: !2370)
!2370 = !DILocation(line: 78, column: 10, scope: !2356)
!2371 = !DILocation(line: 11, column: 2, scope: !2368, inlinedAt: !2370)
!2372 = !DILocation(line: 12, column: 9, scope: !2368, inlinedAt: !2370)
!2373 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg32Random.next_short", scope: !88, file: !88, line: 81, type: !2374, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2374 = !DISubroutineType(types: !2375)
!2375 = !{!23, !2359}
!2376 = !DILocation(line: 82, column: 1, scope: !2373)
!2377 = !DILocalVariable(name: "self", arg: 1, scope: !2373, file: !88, line: 81, type: !2359)
!2378 = !DILocation(line: 81, column: 34, scope: !2373)
!2379 = !DILocalVariable(name: "s", scope: !2373, file: !88, line: 83, type: !514, align: 8)
!2380 = !DILocation(line: 83, column: 8, scope: !2373)
!2381 = !DILocation(line: 83, column: 19, scope: !2373)
!2382 = !DILocalVariable(name: "result", scope: !2373, file: !88, line: 84, type: !23, align: 2)
!2383 = !DILocation(line: 84, column: 9, scope: !2373)
!2384 = !DILocation(line: 84, column: 28, scope: !2373)
!2385 = !DILocation(line: 84, column: 18, scope: !2373)
!2386 = !DILocation(line: 85, column: 3, scope: !2373)
!2387 = !DILocation(line: 85, column: 2, scope: !2373)
!2388 = !DILocation(line: 86, column: 9, scope: !2373)
!2389 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg32Random.next_bytes", scope: !88, file: !88, line: 92, type: !2357, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2390 = !DILocation(line: 92, column: 65, scope: !2389)
!2391 = !DILocalVariable(name: "self", arg: 1, scope: !2389, file: !88, line: 92, type: !2359)
!2392 = !DILocation(line: 92, column: 32, scope: !2389)
!2393 = !DILocalVariable(name: "bytes", arg: 2, scope: !2389, file: !88, line: 92, type: !257)
!2394 = !DILocation(line: 92, column: 46, scope: !2389)
!2395 = !DILocation(line: 90, column: 11, scope: !2396)
!2396 = distinct !DILexicalBlock(scope: !2389, file: !88, line: 92, column: 65)
!2397 = !DILocalVariable(name: "len", scope: !2398, file: !88, line: 146, type: !262, align: 8)
!2398 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2399 = !DILocation(line: 146, column: 6, scope: !2398, inlinedAt: !2390)
!2400 = !DILocation(line: 146, column: 12, scope: !2398, inlinedAt: !2390)
!2401 = !DILocation(line: 148, column: 2, scope: !2398, inlinedAt: !2390)
!2402 = !DILocation(line: 148, column: 9, scope: !2403, inlinedAt: !2390)
!2403 = distinct !DILexicalBlock(scope: !2398, file: !2, line: 148, column: 2)
!2404 = !DILocalVariable(name: "value", scope: !2405, file: !88, line: 150, type: !23, align: 2)
!2405 = distinct !DILexicalBlock(scope: !2403, file: !2, line: 149, column: 2)
!2406 = !DILocation(line: 150, column: 7, scope: !2405, inlinedAt: !2390)
!2407 = !DILocation(line: 92, column: 88, scope: !2405, inlinedAt: !2390)
!2408 = !DILocation(line: 150, column: 15, scope: !2405, inlinedAt: !2390)
!2409 = !DILocation(line: 151, column: 7, scope: !2405, inlinedAt: !2390)
!2410 = !DILocation(line: 153, column: 33, scope: !2411, inlinedAt: !2390)
!2411 = distinct !DILexicalBlock(scope: !2405, file: !2, line: 152, column: 3)
!2412 = !DILocation(line: 153, column: 17, scope: !2411, inlinedAt: !2390)
!2413 = !DILocation(line: 153, column: 4, scope: !2411, inlinedAt: !2390)
!2414 = !DILocation(line: 153, column: 10, scope: !2411, inlinedAt: !2390)
!2415 = !DILocation(line: 154, column: 10, scope: !2411, inlinedAt: !2390)
!2416 = !DILocation(line: 156, column: 3, scope: !2405, inlinedAt: !2390)
!2417 = !DILocation(line: 157, column: 3, scope: !2405, inlinedAt: !2390)
!2418 = !DILocation(line: 158, column: 11, scope: !2405, inlinedAt: !2390)
!2419 = !DILocation(line: 158, column: 17, scope: !2405, inlinedAt: !2390)
!2420 = !DILocation(line: 206, column: 33, scope: !2421, inlinedAt: !2422)
!2421 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2422 = !DILocation(line: 160, column: 2, scope: !2398, inlinedAt: !2390)
!2423 = !DILocation(line: 206, column: 2, scope: !2421, inlinedAt: !2422)
!2424 = !DILocation(line: 208, column: 2, scope: !2421, inlinedAt: !2422)
!2425 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg32Random.next_int128", scope: !88, file: !88, line: 93, type: !2426, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2426 = !DISubroutineType(types: !2427)
!2427 = !{!15, !2359}
!2428 = !DILocation(line: 93, column: 55, scope: !2425)
!2429 = !DILocalVariable(name: "self", arg: 1, scope: !2425, file: !88, line: 93, type: !2359)
!2430 = !DILocation(line: 93, column: 36, scope: !2425)
!2431 = !DILocation(line: 93, column: 71, scope: !2432, inlinedAt: !2428)
!2432 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2433 = !DILocation(line: 138, column: 45, scope: !2432, inlinedAt: !2428)
!2434 = !DILocation(line: 138, column: 72, scope: !2432, inlinedAt: !2428)
!2435 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg32Random.next_long", scope: !88, file: !88, line: 94, type: !2436, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2436 = !DISubroutineType(types: !2437)
!2437 = !{!6, !2359}
!2438 = !DILocation(line: 94, column: 51, scope: !2435)
!2439 = !DILocalVariable(name: "self", arg: 1, scope: !2435, file: !88, line: 94, type: !2359)
!2440 = !DILocation(line: 94, column: 32, scope: !2435)
!2441 = !DILocation(line: 94, column: 64, scope: !2442, inlinedAt: !2438)
!2442 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2443 = !DILocation(line: 139, column: 40, scope: !2442, inlinedAt: !2438)
!2444 = !DILocation(line: 139, column: 65, scope: !2442, inlinedAt: !2438)
!2445 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg32Random.next_int", scope: !88, file: !88, line: 95, type: !2446, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2446 = !DISubroutineType(types: !2447)
!2447 = !{!20, !2359}
!2448 = !DILocation(line: 95, column: 49, scope: !2445)
!2449 = !DILocalVariable(name: "self", arg: 1, scope: !2445, file: !88, line: 95, type: !2359)
!2450 = !DILocation(line: 95, column: 30, scope: !2445)
!2451 = !DILocation(line: 95, column: 63, scope: !2452, inlinedAt: !2448)
!2452 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2453 = !DILocation(line: 140, column: 40, scope: !2452, inlinedAt: !2448)
!2454 = !DILocation(line: 140, column: 64, scope: !2452, inlinedAt: !2448)
!2455 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg32Random.next_byte", scope: !88, file: !88, line: 96, type: !2456, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2456 = !DISubroutineType(types: !2457)
!2457 = !{!60, !2359}
!2458 = !DILocation(line: 96, column: 50, scope: !2455)
!2459 = !DILocalVariable(name: "self", arg: 1, scope: !2455, file: !88, line: 96, type: !2359)
!2460 = !DILocation(line: 96, column: 31, scope: !2455)
!2461 = !DILocation(line: 96, column: 56, scope: !2455)
!2462 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg16Random.set_seed", scope: !88, file: !88, line: 102, type: !2463, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2463 = !DISubroutineType(types: !2464)
!2464 = !{null, !2465, !257}
!2465 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg16Random*", baseType: !2466, size: 64, align: 64, dwarfAddressSpace: 0)
!2466 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg16Random", scope: !88, file: !88, line: 100, baseType: !23, align: 2)
!2467 = !DILocation(line: 103, column: 1, scope: !2462)
!2468 = !DILocalVariable(name: "self", arg: 1, scope: !2462, file: !88, line: 102, type: !2465)
!2469 = !DILocation(line: 102, column: 30, scope: !2462)
!2470 = !DILocalVariable(name: "seed", arg: 2, scope: !2462, file: !88, line: 102, type: !257)
!2471 = !DILocation(line: 102, column: 44, scope: !2462)
!2472 = !DILocation(line: 104, column: 3, scope: !2462)
!2473 = !DILocalVariable(name: "return_value", scope: !2474, file: !88, line: 10, type: !23, align: 2)
!2474 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2475 = !DILocation(line: 10, column: 8, scope: !2474, inlinedAt: !2476)
!2476 = !DILocation(line: 104, column: 10, scope: !2462)
!2477 = !DILocation(line: 11, column: 2, scope: !2474, inlinedAt: !2476)
!2478 = !DILocation(line: 12, column: 9, scope: !2474, inlinedAt: !2476)
!2479 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg16Random.next_byte", scope: !88, file: !88, line: 107, type: !2480, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2480 = !DISubroutineType(types: !2481)
!2481 = !{!60, !2465}
!2482 = !DILocation(line: 108, column: 1, scope: !2479)
!2483 = !DILocalVariable(name: "self", arg: 1, scope: !2479, file: !88, line: 107, type: !2465)
!2484 = !DILocation(line: 107, column: 31, scope: !2479)
!2485 = !DILocalVariable(name: "s", scope: !2479, file: !88, line: 109, type: !634, align: 8)
!2486 = !DILocation(line: 109, column: 10, scope: !2479)
!2487 = !DILocation(line: 109, column: 23, scope: !2479)
!2488 = !DILocalVariable(name: "result", scope: !2479, file: !88, line: 110, type: !60, align: 1)
!2489 = !DILocation(line: 110, column: 7, scope: !2479)
!2490 = !DILocation(line: 110, column: 24, scope: !2479)
!2491 = !DILocation(line: 110, column: 16, scope: !2479)
!2492 = !DILocation(line: 111, column: 3, scope: !2479)
!2493 = !DILocation(line: 111, column: 2, scope: !2479)
!2494 = !DILocation(line: 112, column: 9, scope: !2479)
!2495 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg16Random.next_bytes", scope: !88, file: !88, line: 115, type: !2463, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2496 = !DILocation(line: 115, column: 65, scope: !2495)
!2497 = !DILocalVariable(name: "self", arg: 1, scope: !2495, file: !88, line: 115, type: !2465)
!2498 = !DILocation(line: 115, column: 32, scope: !2495)
!2499 = !DILocalVariable(name: "bytes", arg: 2, scope: !2495, file: !88, line: 115, type: !257)
!2500 = !DILocation(line: 115, column: 46, scope: !2495)
!2501 = !DILocalVariable(name: "len", scope: !2502, file: !88, line: 146, type: !262, align: 8)
!2502 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2503 = !DILocation(line: 146, column: 6, scope: !2502, inlinedAt: !2496)
!2504 = !DILocation(line: 146, column: 12, scope: !2502, inlinedAt: !2496)
!2505 = !DILocation(line: 148, column: 2, scope: !2502, inlinedAt: !2496)
!2506 = !DILocation(line: 148, column: 9, scope: !2507, inlinedAt: !2496)
!2507 = distinct !DILexicalBlock(scope: !2502, file: !2, line: 148, column: 2)
!2508 = !DILocalVariable(name: "value", scope: !2509, file: !88, line: 150, type: !60, align: 1)
!2509 = distinct !DILexicalBlock(scope: !2507, file: !2, line: 149, column: 2)
!2510 = !DILocation(line: 150, column: 7, scope: !2509, inlinedAt: !2496)
!2511 = !DILocation(line: 115, column: 88, scope: !2509, inlinedAt: !2496)
!2512 = !DILocation(line: 150, column: 15, scope: !2509, inlinedAt: !2496)
!2513 = !DILocation(line: 151, column: 7, scope: !2509, inlinedAt: !2496)
!2514 = !DILocation(line: 153, column: 33, scope: !2515, inlinedAt: !2496)
!2515 = distinct !DILexicalBlock(scope: !2509, file: !2, line: 152, column: 3)
!2516 = !DILocation(line: 153, column: 17, scope: !2515, inlinedAt: !2496)
!2517 = !DILocation(line: 153, column: 4, scope: !2515, inlinedAt: !2496)
!2518 = !DILocation(line: 153, column: 10, scope: !2515, inlinedAt: !2496)
!2519 = !DILocation(line: 154, column: 10, scope: !2515, inlinedAt: !2496)
!2520 = !DILocation(line: 156, column: 3, scope: !2509, inlinedAt: !2496)
!2521 = !DILocation(line: 157, column: 3, scope: !2509, inlinedAt: !2496)
!2522 = !DILocation(line: 158, column: 11, scope: !2509, inlinedAt: !2496)
!2523 = !DILocation(line: 158, column: 17, scope: !2509, inlinedAt: !2496)
!2524 = !DILocation(line: 206, column: 33, scope: !2525, inlinedAt: !2526)
!2525 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2526 = !DILocation(line: 160, column: 2, scope: !2502, inlinedAt: !2496)
!2527 = !DILocation(line: 206, column: 2, scope: !2525, inlinedAt: !2526)
!2528 = !DILocation(line: 208, column: 2, scope: !2525, inlinedAt: !2526)
!2529 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg16Random.next_int128", scope: !88, file: !88, line: 116, type: !2530, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2530 = !DISubroutineType(types: !2531)
!2531 = !{!15, !2465}
!2532 = !DILocation(line: 116, column: 55, scope: !2529)
!2533 = !DILocalVariable(name: "self", arg: 1, scope: !2529, file: !88, line: 116, type: !2465)
!2534 = !DILocation(line: 116, column: 36, scope: !2529)
!2535 = !DILocation(line: 116, column: 71, scope: !2536, inlinedAt: !2532)
!2536 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2537 = !DILocation(line: 138, column: 45, scope: !2536, inlinedAt: !2532)
!2538 = !DILocation(line: 138, column: 72, scope: !2536, inlinedAt: !2532)
!2539 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg16Random.next_long", scope: !88, file: !88, line: 117, type: !2540, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2540 = !DISubroutineType(types: !2541)
!2541 = !{!6, !2465}
!2542 = !DILocation(line: 117, column: 51, scope: !2539)
!2543 = !DILocalVariable(name: "self", arg: 1, scope: !2539, file: !88, line: 117, type: !2465)
!2544 = !DILocation(line: 117, column: 32, scope: !2539)
!2545 = !DILocation(line: 117, column: 64, scope: !2546, inlinedAt: !2542)
!2546 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2547 = !DILocation(line: 139, column: 40, scope: !2546, inlinedAt: !2542)
!2548 = !DILocation(line: 139, column: 65, scope: !2546, inlinedAt: !2542)
!2549 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg16Random.next_int", scope: !88, file: !88, line: 118, type: !2550, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2550 = !DISubroutineType(types: !2551)
!2551 = !{!20, !2465}
!2552 = !DILocation(line: 118, column: 49, scope: !2549)
!2553 = !DILocalVariable(name: "self", arg: 1, scope: !2549, file: !88, line: 118, type: !2465)
!2554 = !DILocation(line: 118, column: 30, scope: !2549)
!2555 = !DILocation(line: 118, column: 63, scope: !2556, inlinedAt: !2552)
!2556 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2557 = !DILocation(line: 140, column: 40, scope: !2556, inlinedAt: !2552)
!2558 = !DILocation(line: 140, column: 64, scope: !2556, inlinedAt: !2552)
!2559 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg16Random.next_short", scope: !88, file: !88, line: 119, type: !2560, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2560 = !DISubroutineType(types: !2561)
!2561 = !{!23, !2465}
!2562 = !DILocation(line: 119, column: 53, scope: !2559)
!2563 = !DILocalVariable(name: "self", arg: 1, scope: !2559, file: !88, line: 119, type: !2465)
!2564 = !DILocation(line: 119, column: 34, scope: !2559)
!2565 = !DILocation(line: 119, column: 68, scope: !2566, inlinedAt: !2562)
!2566 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2567 = !DILocation(line: 141, column: 43, scope: !2566, inlinedAt: !2562)
!2568 = !DILocation(line: 141, column: 68, scope: !2566, inlinedAt: !2562)
!2569 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws128Random.set_seed", scope: !97, file: !97, line: 17, type: !2570, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2570 = !DISubroutineType(types: !2571)
!2571 = !{null, !2572, !257}
!2572 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws128Random*", baseType: !2573, size: 64, align: 64, dwarfAddressSpace: 0)
!2573 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws128Random", scope: !97, file: !97, line: 11, size: 512, align: 128, elements: !2574, identifier: "std.math.random.Msws128Random")
!2574 = !{!2575, !2576, !2577, !2578}
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !2573, file: !97, line: 13, baseType: !15, size: 128, align: 128)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !2573, file: !97, line: 13, baseType: !15, size: 128, align: 128, offset: 128)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !2573, file: !97, line: 14, baseType: !15, size: 128, align: 128, offset: 256)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !2573, file: !97, line: 14, baseType: !15, size: 128, align: 128, offset: 384)
!2579 = !DILocation(line: 18, column: 1, scope: !2569)
!2580 = !DILocalVariable(name: "self", arg: 1, scope: !2569, file: !97, line: 17, type: !2572)
!2581 = !DILocation(line: 17, column: 32, scope: !2569)
!2582 = !DILocalVariable(name: "input", arg: 2, scope: !2569, file: !97, line: 17, type: !257)
!2583 = !DILocation(line: 17, column: 46, scope: !2569)
!2584 = !DILocation(line: 19, column: 3, scope: !2569)
!2585 = !DILocalVariable(name: "return_value", scope: !2586, file: !97, line: 10, type: !982, align: 16)
!2586 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2587 = !DILocation(line: 10, column: 8, scope: !2586, inlinedAt: !2588)
!2588 = !DILocation(line: 19, column: 18, scope: !2569)
!2589 = !DILocation(line: 11, column: 2, scope: !2586, inlinedAt: !2588)
!2590 = !DILocation(line: 254, column: 20, scope: !2591, inlinedAt: !2592)
!2591 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2592 = !DILocation(line: 19, column: 10, scope: !2569)
!2593 = !DILocation(line: 254, column: 11, scope: !2591, inlinedAt: !2592)
!2594 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws128Random.next_int128", scope: !97, file: !97, line: 23, type: !2595, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2595 = !DISubroutineType(types: !2596)
!2596 = !{!15, !2572}
!2597 = !DILocation(line: 24, column: 1, scope: !2594)
!2598 = !DILocalVariable(name: "self", arg: 1, scope: !2594, file: !97, line: 23, type: !2572)
!2599 = !DILocation(line: 23, column: 38, scope: !2594)
!2600 = !DILocalVariable(name: "s0", scope: !2594, file: !97, line: 25, type: !15, align: 16)
!2601 = !DILocation(line: 25, column: 10, scope: !2594)
!2602 = !DILocation(line: 25, column: 15, scope: !2594)
!2603 = !DILocation(line: 26, column: 2, scope: !2594)
!2604 = !DILocation(line: 26, column: 16, scope: !2594)
!2605 = !DILocation(line: 26, column: 30, scope: !2594)
!2606 = !DILocation(line: 26, column: 44, scope: !2594)
!2607 = !DILocation(line: 27, column: 2, scope: !2594)
!2608 = !DILocation(line: 27, column: 16, scope: !2594)
!2609 = !DILocation(line: 163, column: 59, scope: !2610, inlinedAt: !2608)
!2610 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2611 = !DILocation(line: 163, column: 65, scope: !2610, inlinedAt: !2608)
!2612 = !DILocation(line: 163, column: 71, scope: !2610, inlinedAt: !2608)
!2613 = !DILocation(line: 28, column: 2, scope: !2594)
!2614 = !DILocation(line: 30, column: 2, scope: !2594)
!2615 = !DILocation(line: 30, column: 16, scope: !2594)
!2616 = !DILocation(line: 30, column: 30, scope: !2594)
!2617 = !DILocation(line: 30, column: 44, scope: !2594)
!2618 = !DILocalVariable(name: "s1", scope: !2594, file: !97, line: 31, type: !15, align: 16)
!2619 = !DILocation(line: 31, column: 10, scope: !2594)
!2620 = !DILocation(line: 31, column: 15, scope: !2594)
!2621 = !DILocation(line: 32, column: 2, scope: !2594)
!2622 = !DILocation(line: 32, column: 16, scope: !2594)
!2623 = !DILocation(line: 163, column: 59, scope: !2624, inlinedAt: !2622)
!2624 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2625 = !DILocation(line: 163, column: 65, scope: !2624, inlinedAt: !2622)
!2626 = !DILocation(line: 163, column: 71, scope: !2624, inlinedAt: !2622)
!2627 = !DILocation(line: 33, column: 2, scope: !2594)
!2628 = !DILocation(line: 35, column: 9, scope: !2594)
!2629 = !DILocation(line: 35, column: 14, scope: !2594)
!2630 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws128Random.next_bytes", scope: !97, file: !97, line: 41, type: !2570, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2631 = !DILocation(line: 41, column: 67, scope: !2630)
!2632 = !DILocalVariable(name: "self", arg: 1, scope: !2630, file: !97, line: 41, type: !2572)
!2633 = !DILocation(line: 41, column: 34, scope: !2630)
!2634 = !DILocalVariable(name: "bytes", arg: 2, scope: !2630, file: !97, line: 41, type: !257)
!2635 = !DILocation(line: 41, column: 48, scope: !2630)
!2636 = !DILocation(line: 39, column: 11, scope: !2637)
!2637 = distinct !DILexicalBlock(scope: !2630, file: !97, line: 41, column: 67)
!2638 = !DILocalVariable(name: "len", scope: !2639, file: !97, line: 146, type: !262, align: 8)
!2639 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2640 = !DILocation(line: 146, column: 6, scope: !2639, inlinedAt: !2631)
!2641 = !DILocation(line: 146, column: 12, scope: !2639, inlinedAt: !2631)
!2642 = !DILocation(line: 148, column: 2, scope: !2639, inlinedAt: !2631)
!2643 = !DILocation(line: 148, column: 9, scope: !2644, inlinedAt: !2631)
!2644 = distinct !DILexicalBlock(scope: !2639, file: !2, line: 148, column: 2)
!2645 = !DILocalVariable(name: "value", scope: !2646, file: !97, line: 150, type: !15, align: 16)
!2646 = distinct !DILexicalBlock(scope: !2644, file: !2, line: 149, column: 2)
!2647 = !DILocation(line: 150, column: 7, scope: !2646, inlinedAt: !2631)
!2648 = !DILocation(line: 41, column: 90, scope: !2646, inlinedAt: !2631)
!2649 = !DILocation(line: 150, column: 15, scope: !2646, inlinedAt: !2631)
!2650 = !DILocation(line: 151, column: 7, scope: !2646, inlinedAt: !2631)
!2651 = !DILocation(line: 153, column: 33, scope: !2652, inlinedAt: !2631)
!2652 = distinct !DILexicalBlock(scope: !2646, file: !2, line: 152, column: 3)
!2653 = !DILocation(line: 153, column: 17, scope: !2652, inlinedAt: !2631)
!2654 = !DILocation(line: 153, column: 4, scope: !2652, inlinedAt: !2631)
!2655 = !DILocation(line: 153, column: 10, scope: !2652, inlinedAt: !2631)
!2656 = !DILocation(line: 154, column: 10, scope: !2652, inlinedAt: !2631)
!2657 = !DILocation(line: 156, column: 3, scope: !2646, inlinedAt: !2631)
!2658 = !DILocation(line: 157, column: 3, scope: !2646, inlinedAt: !2631)
!2659 = !DILocation(line: 158, column: 11, scope: !2646, inlinedAt: !2631)
!2660 = !DILocation(line: 158, column: 17, scope: !2646, inlinedAt: !2631)
!2661 = !DILocation(line: 206, column: 33, scope: !2662, inlinedAt: !2663)
!2662 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2663 = !DILocation(line: 160, column: 2, scope: !2639, inlinedAt: !2631)
!2664 = !DILocation(line: 206, column: 2, scope: !2662, inlinedAt: !2663)
!2665 = !DILocation(line: 208, column: 2, scope: !2662, inlinedAt: !2663)
!2666 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws128Random.next_long", scope: !97, file: !97, line: 42, type: !2667, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2667 = !DISubroutineType(types: !2668)
!2668 = !{!6, !2572}
!2669 = !DILocation(line: 42, column: 53, scope: !2666)
!2670 = !DILocalVariable(name: "self", arg: 1, scope: !2666, file: !97, line: 42, type: !2572)
!2671 = !DILocation(line: 42, column: 34, scope: !2666)
!2672 = !DILocation(line: 42, column: 60, scope: !2666)
!2673 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws128Random.next_int", scope: !97, file: !97, line: 43, type: !2674, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2674 = !DISubroutineType(types: !2675)
!2675 = !{!20, !2572}
!2676 = !DILocation(line: 43, column: 51, scope: !2673)
!2677 = !DILocalVariable(name: "self", arg: 1, scope: !2673, file: !97, line: 43, type: !2572)
!2678 = !DILocation(line: 43, column: 32, scope: !2673)
!2679 = !DILocation(line: 43, column: 57, scope: !2673)
!2680 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws128Random.next_short", scope: !97, file: !97, line: 44, type: !2681, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2681 = !DISubroutineType(types: !2682)
!2682 = !{!23, !2572}
!2683 = !DILocation(line: 44, column: 55, scope: !2680)
!2684 = !DILocalVariable(name: "self", arg: 1, scope: !2680, file: !97, line: 44, type: !2572)
!2685 = !DILocation(line: 44, column: 36, scope: !2680)
!2686 = !DILocation(line: 44, column: 63, scope: !2680)
!2687 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws128Random.next_byte", scope: !97, file: !97, line: 45, type: !2688, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2688 = !DISubroutineType(types: !2689)
!2689 = !{!60, !2572}
!2690 = !DILocation(line: 45, column: 52, scope: !2687)
!2691 = !DILocalVariable(name: "self", arg: 1, scope: !2687, file: !97, line: 45, type: !2572)
!2692 = !DILocation(line: 45, column: 33, scope: !2687)
!2693 = !DILocation(line: 45, column: 58, scope: !2687)
!2694 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws64Random.set_seed", scope: !97, file: !97, line: 55, type: !2695, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2695 = !DISubroutineType(types: !2696)
!2696 = !{null, !2697, !257}
!2697 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws64Random*", baseType: !2698, size: 64, align: 64, dwarfAddressSpace: 0)
!2698 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws64Random", scope: !97, file: !97, line: 49, size: 256, align: 64, elements: !2699, identifier: "std.math.random.Msws64Random")
!2699 = !{!2700, !2701, !2702, !2703}
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !2698, file: !97, line: 51, baseType: !6, size: 64, align: 64)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !2698, file: !97, line: 51, baseType: !6, size: 64, align: 64, offset: 64)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !2698, file: !97, line: 52, baseType: !6, size: 64, align: 64, offset: 128)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !2698, file: !97, line: 52, baseType: !6, size: 64, align: 64, offset: 192)
!2704 = !DILocation(line: 56, column: 1, scope: !2694)
!2705 = !DILocalVariable(name: "self", arg: 1, scope: !2694, file: !97, line: 55, type: !2697)
!2706 = !DILocation(line: 55, column: 32, scope: !2694)
!2707 = !DILocalVariable(name: "input", arg: 2, scope: !2694, file: !97, line: 55, type: !257)
!2708 = !DILocation(line: 55, column: 46, scope: !2694)
!2709 = !DILocation(line: 57, column: 3, scope: !2694)
!2710 = !DILocalVariable(name: "return_value", scope: !2711, file: !97, line: 10, type: !5, align: 16)
!2711 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2712 = !DILocation(line: 10, column: 8, scope: !2711, inlinedAt: !2713)
!2713 = !DILocation(line: 57, column: 18, scope: !2694)
!2714 = !DILocation(line: 11, column: 2, scope: !2711, inlinedAt: !2713)
!2715 = !DILocation(line: 254, column: 20, scope: !2716, inlinedAt: !2717)
!2716 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2717 = !DILocation(line: 57, column: 10, scope: !2694)
!2718 = !DILocation(line: 254, column: 11, scope: !2716, inlinedAt: !2717)
!2719 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws64Random.next_long", scope: !97, file: !97, line: 60, type: !2720, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2720 = !DISubroutineType(types: !2721)
!2721 = !{!6, !2697}
!2722 = !DILocation(line: 61, column: 1, scope: !2719)
!2723 = !DILocalVariable(name: "self", arg: 1, scope: !2719, file: !97, line: 60, type: !2697)
!2724 = !DILocation(line: 60, column: 33, scope: !2719)
!2725 = !DILocalVariable(name: "s0", scope: !2719, file: !97, line: 62, type: !6, align: 8)
!2726 = !DILocation(line: 62, column: 8, scope: !2719)
!2727 = !DILocation(line: 62, column: 13, scope: !2719)
!2728 = !DILocation(line: 63, column: 2, scope: !2719)
!2729 = !DILocation(line: 63, column: 16, scope: !2719)
!2730 = !DILocation(line: 63, column: 30, scope: !2719)
!2731 = !DILocation(line: 63, column: 44, scope: !2719)
!2732 = !DILocation(line: 64, column: 2, scope: !2719)
!2733 = !DILocation(line: 64, column: 16, scope: !2719)
!2734 = !DILocation(line: 147, column: 53, scope: !2735, inlinedAt: !2733)
!2735 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2736 = !DILocation(line: 147, column: 59, scope: !2735, inlinedAt: !2733)
!2737 = !DILocation(line: 147, column: 65, scope: !2735, inlinedAt: !2733)
!2738 = !DILocation(line: 65, column: 2, scope: !2719)
!2739 = !DILocation(line: 67, column: 2, scope: !2719)
!2740 = !DILocation(line: 67, column: 16, scope: !2719)
!2741 = !DILocation(line: 67, column: 30, scope: !2719)
!2742 = !DILocation(line: 67, column: 44, scope: !2719)
!2743 = !DILocalVariable(name: "s1", scope: !2719, file: !97, line: 68, type: !6, align: 8)
!2744 = !DILocation(line: 68, column: 8, scope: !2719)
!2745 = !DILocation(line: 68, column: 13, scope: !2719)
!2746 = !DILocation(line: 69, column: 2, scope: !2719)
!2747 = !DILocation(line: 69, column: 16, scope: !2719)
!2748 = !DILocation(line: 147, column: 53, scope: !2749, inlinedAt: !2747)
!2749 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2750 = !DILocation(line: 147, column: 59, scope: !2749, inlinedAt: !2747)
!2751 = !DILocation(line: 147, column: 65, scope: !2749, inlinedAt: !2747)
!2752 = !DILocation(line: 70, column: 2, scope: !2719)
!2753 = !DILocation(line: 72, column: 9, scope: !2719)
!2754 = !DILocation(line: 72, column: 14, scope: !2719)
!2755 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws64Random.next_bytes", scope: !97, file: !97, line: 78, type: !2695, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2756 = !DILocation(line: 78, column: 66, scope: !2755)
!2757 = !DILocalVariable(name: "self", arg: 1, scope: !2755, file: !97, line: 78, type: !2697)
!2758 = !DILocation(line: 78, column: 33, scope: !2755)
!2759 = !DILocalVariable(name: "bytes", arg: 2, scope: !2755, file: !97, line: 78, type: !257)
!2760 = !DILocation(line: 78, column: 47, scope: !2755)
!2761 = !DILocation(line: 76, column: 11, scope: !2762)
!2762 = distinct !DILexicalBlock(scope: !2755, file: !97, line: 78, column: 66)
!2763 = !DILocalVariable(name: "len", scope: !2764, file: !97, line: 146, type: !262, align: 8)
!2764 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2765 = !DILocation(line: 146, column: 6, scope: !2764, inlinedAt: !2756)
!2766 = !DILocation(line: 146, column: 12, scope: !2764, inlinedAt: !2756)
!2767 = !DILocation(line: 148, column: 2, scope: !2764, inlinedAt: !2756)
!2768 = !DILocation(line: 148, column: 9, scope: !2769, inlinedAt: !2756)
!2769 = distinct !DILexicalBlock(scope: !2764, file: !2, line: 148, column: 2)
!2770 = !DILocalVariable(name: "value", scope: !2771, file: !97, line: 150, type: !6, align: 8)
!2771 = distinct !DILexicalBlock(scope: !2769, file: !2, line: 149, column: 2)
!2772 = !DILocation(line: 150, column: 7, scope: !2771, inlinedAt: !2756)
!2773 = !DILocation(line: 78, column: 89, scope: !2771, inlinedAt: !2756)
!2774 = !DILocation(line: 150, column: 15, scope: !2771, inlinedAt: !2756)
!2775 = !DILocation(line: 151, column: 7, scope: !2771, inlinedAt: !2756)
!2776 = !DILocation(line: 153, column: 33, scope: !2777, inlinedAt: !2756)
!2777 = distinct !DILexicalBlock(scope: !2771, file: !2, line: 152, column: 3)
!2778 = !DILocation(line: 153, column: 17, scope: !2777, inlinedAt: !2756)
!2779 = !DILocation(line: 153, column: 4, scope: !2777, inlinedAt: !2756)
!2780 = !DILocation(line: 153, column: 10, scope: !2777, inlinedAt: !2756)
!2781 = !DILocation(line: 154, column: 10, scope: !2777, inlinedAt: !2756)
!2782 = !DILocation(line: 156, column: 3, scope: !2771, inlinedAt: !2756)
!2783 = !DILocation(line: 157, column: 3, scope: !2771, inlinedAt: !2756)
!2784 = !DILocation(line: 158, column: 11, scope: !2771, inlinedAt: !2756)
!2785 = !DILocation(line: 158, column: 17, scope: !2771, inlinedAt: !2756)
!2786 = !DILocation(line: 206, column: 33, scope: !2787, inlinedAt: !2788)
!2787 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2788 = !DILocation(line: 160, column: 2, scope: !2764, inlinedAt: !2756)
!2789 = !DILocation(line: 206, column: 2, scope: !2787, inlinedAt: !2788)
!2790 = !DILocation(line: 208, column: 2, scope: !2787, inlinedAt: !2788)
!2791 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws64Random.next_int128", scope: !97, file: !97, line: 79, type: !2792, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2792 = !DISubroutineType(types: !2793)
!2793 = !{!15, !2697}
!2794 = !DILocation(line: 79, column: 56, scope: !2791)
!2795 = !DILocalVariable(name: "self", arg: 1, scope: !2791, file: !97, line: 79, type: !2697)
!2796 = !DILocation(line: 79, column: 37, scope: !2791)
!2797 = !DILocation(line: 79, column: 72, scope: !2798, inlinedAt: !2794)
!2798 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2799 = !DILocation(line: 138, column: 45, scope: !2798, inlinedAt: !2794)
!2800 = !DILocation(line: 138, column: 72, scope: !2798, inlinedAt: !2794)
!2801 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws64Random.next_int", scope: !97, file: !97, line: 80, type: !2802, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2802 = !DISubroutineType(types: !2803)
!2803 = !{!20, !2697}
!2804 = !DILocation(line: 80, column: 50, scope: !2801)
!2805 = !DILocalVariable(name: "self", arg: 1, scope: !2801, file: !97, line: 80, type: !2697)
!2806 = !DILocation(line: 80, column: 31, scope: !2801)
!2807 = !DILocation(line: 80, column: 56, scope: !2801)
!2808 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws64Random.next_short", scope: !97, file: !97, line: 81, type: !2809, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2809 = !DISubroutineType(types: !2810)
!2810 = !{!23, !2697}
!2811 = !DILocation(line: 81, column: 54, scope: !2808)
!2812 = !DILocalVariable(name: "self", arg: 1, scope: !2808, file: !97, line: 81, type: !2697)
!2813 = !DILocation(line: 81, column: 35, scope: !2808)
!2814 = !DILocation(line: 81, column: 62, scope: !2808)
!2815 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws64Random.next_byte", scope: !97, file: !97, line: 82, type: !2816, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2816 = !DISubroutineType(types: !2817)
!2817 = !{!60, !2697}
!2818 = !DILocation(line: 82, column: 51, scope: !2815)
!2819 = !DILocalVariable(name: "self", arg: 1, scope: !2815, file: !97, line: 82, type: !2697)
!2820 = !DILocation(line: 82, column: 32, scope: !2815)
!2821 = !DILocation(line: 82, column: 57, scope: !2815)
!2822 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws32Random.set_seed", scope: !97, file: !97, line: 91, type: !2823, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2823 = !DISubroutineType(types: !2824)
!2824 = !{null, !2825, !257}
!2825 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws32Random*", baseType: !2826, size: 64, align: 64, dwarfAddressSpace: 0)
!2826 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws32Random", scope: !97, file: !97, line: 85, size: 128, align: 32, elements: !2827, identifier: "std.math.random.Msws32Random")
!2827 = !{!2828, !2829, !2830, !2831}
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !2826, file: !97, line: 87, baseType: !20, size: 32, align: 32)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !2826, file: !97, line: 87, baseType: !20, size: 32, align: 32, offset: 32)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !2826, file: !97, line: 88, baseType: !20, size: 32, align: 32, offset: 64)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !2826, file: !97, line: 88, baseType: !20, size: 32, align: 32, offset: 96)
!2832 = !DILocation(line: 92, column: 1, scope: !2822)
!2833 = !DILocalVariable(name: "self", arg: 1, scope: !2822, file: !97, line: 91, type: !2825)
!2834 = !DILocation(line: 91, column: 32, scope: !2822)
!2835 = !DILocalVariable(name: "input", arg: 2, scope: !2822, file: !97, line: 91, type: !257)
!2836 = !DILocation(line: 91, column: 46, scope: !2822)
!2837 = !DILocation(line: 93, column: 3, scope: !2822)
!2838 = !DILocalVariable(name: "return_value", scope: !2839, file: !97, line: 10, type: !1227, align: 16)
!2839 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2840 = !DILocation(line: 10, column: 8, scope: !2839, inlinedAt: !2841)
!2841 = !DILocation(line: 93, column: 18, scope: !2822)
!2842 = !DILocation(line: 11, column: 2, scope: !2839, inlinedAt: !2841)
!2843 = !DILocation(line: 254, column: 20, scope: !2844, inlinedAt: !2845)
!2844 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2845 = !DILocation(line: 93, column: 10, scope: !2822)
!2846 = !DILocation(line: 254, column: 11, scope: !2844, inlinedAt: !2845)
!2847 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws32Random.next_int", scope: !97, file: !97, line: 97, type: !2848, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2848 = !DISubroutineType(types: !2849)
!2849 = !{!20, !2825}
!2850 = !DILocation(line: 98, column: 1, scope: !2847)
!2851 = !DILocalVariable(name: "self", arg: 1, scope: !2847, file: !97, line: 97, type: !2825)
!2852 = !DILocation(line: 97, column: 31, scope: !2847)
!2853 = !DILocalVariable(name: "s0", scope: !2847, file: !97, line: 99, type: !20, align: 4)
!2854 = !DILocation(line: 99, column: 7, scope: !2847)
!2855 = !DILocation(line: 99, column: 12, scope: !2847)
!2856 = !DILocation(line: 100, column: 2, scope: !2847)
!2857 = !DILocation(line: 100, column: 16, scope: !2847)
!2858 = !DILocation(line: 100, column: 30, scope: !2847)
!2859 = !DILocation(line: 100, column: 44, scope: !2847)
!2860 = !DILocation(line: 101, column: 2, scope: !2847)
!2861 = !DILocation(line: 101, column: 16, scope: !2847)
!2862 = !DILocation(line: 99, column: 50, scope: !2863, inlinedAt: !2861)
!2863 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2864 = !DILocation(line: 99, column: 56, scope: !2863, inlinedAt: !2861)
!2865 = !DILocation(line: 99, column: 62, scope: !2863, inlinedAt: !2861)
!2866 = !DILocation(line: 102, column: 2, scope: !2847)
!2867 = !DILocation(line: 104, column: 2, scope: !2847)
!2868 = !DILocation(line: 104, column: 16, scope: !2847)
!2869 = !DILocation(line: 104, column: 30, scope: !2847)
!2870 = !DILocation(line: 104, column: 44, scope: !2847)
!2871 = !DILocalVariable(name: "s1", scope: !2847, file: !97, line: 105, type: !20, align: 4)
!2872 = !DILocation(line: 105, column: 7, scope: !2847)
!2873 = !DILocation(line: 105, column: 12, scope: !2847)
!2874 = !DILocation(line: 106, column: 2, scope: !2847)
!2875 = !DILocation(line: 106, column: 16, scope: !2847)
!2876 = !DILocation(line: 99, column: 50, scope: !2877, inlinedAt: !2875)
!2877 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2878 = !DILocation(line: 99, column: 56, scope: !2877, inlinedAt: !2875)
!2879 = !DILocation(line: 99, column: 62, scope: !2877, inlinedAt: !2875)
!2880 = !DILocation(line: 107, column: 2, scope: !2847)
!2881 = !DILocation(line: 109, column: 9, scope: !2847)
!2882 = !DILocation(line: 109, column: 14, scope: !2847)
!2883 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws32Random.next_bytes", scope: !97, file: !97, line: 115, type: !2823, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2884 = !DILocation(line: 115, column: 66, scope: !2883)
!2885 = !DILocalVariable(name: "self", arg: 1, scope: !2883, file: !97, line: 115, type: !2825)
!2886 = !DILocation(line: 115, column: 33, scope: !2883)
!2887 = !DILocalVariable(name: "bytes", arg: 2, scope: !2883, file: !97, line: 115, type: !257)
!2888 = !DILocation(line: 115, column: 47, scope: !2883)
!2889 = !DILocation(line: 113, column: 11, scope: !2890)
!2890 = distinct !DILexicalBlock(scope: !2883, file: !97, line: 115, column: 66)
!2891 = !DILocalVariable(name: "len", scope: !2892, file: !97, line: 146, type: !262, align: 8)
!2892 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2893 = !DILocation(line: 146, column: 6, scope: !2892, inlinedAt: !2884)
!2894 = !DILocation(line: 146, column: 12, scope: !2892, inlinedAt: !2884)
!2895 = !DILocation(line: 148, column: 2, scope: !2892, inlinedAt: !2884)
!2896 = !DILocation(line: 148, column: 9, scope: !2897, inlinedAt: !2884)
!2897 = distinct !DILexicalBlock(scope: !2892, file: !2, line: 148, column: 2)
!2898 = !DILocalVariable(name: "value", scope: !2899, file: !97, line: 150, type: !20, align: 4)
!2899 = distinct !DILexicalBlock(scope: !2897, file: !2, line: 149, column: 2)
!2900 = !DILocation(line: 150, column: 7, scope: !2899, inlinedAt: !2884)
!2901 = !DILocation(line: 115, column: 89, scope: !2899, inlinedAt: !2884)
!2902 = !DILocation(line: 150, column: 15, scope: !2899, inlinedAt: !2884)
!2903 = !DILocation(line: 151, column: 7, scope: !2899, inlinedAt: !2884)
!2904 = !DILocation(line: 153, column: 33, scope: !2905, inlinedAt: !2884)
!2905 = distinct !DILexicalBlock(scope: !2899, file: !2, line: 152, column: 3)
!2906 = !DILocation(line: 153, column: 17, scope: !2905, inlinedAt: !2884)
!2907 = !DILocation(line: 153, column: 4, scope: !2905, inlinedAt: !2884)
!2908 = !DILocation(line: 153, column: 10, scope: !2905, inlinedAt: !2884)
!2909 = !DILocation(line: 154, column: 10, scope: !2905, inlinedAt: !2884)
!2910 = !DILocation(line: 156, column: 3, scope: !2899, inlinedAt: !2884)
!2911 = !DILocation(line: 157, column: 3, scope: !2899, inlinedAt: !2884)
!2912 = !DILocation(line: 158, column: 11, scope: !2899, inlinedAt: !2884)
!2913 = !DILocation(line: 158, column: 17, scope: !2899, inlinedAt: !2884)
!2914 = !DILocation(line: 206, column: 33, scope: !2915, inlinedAt: !2916)
!2915 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2916 = !DILocation(line: 160, column: 2, scope: !2892, inlinedAt: !2884)
!2917 = !DILocation(line: 206, column: 2, scope: !2915, inlinedAt: !2916)
!2918 = !DILocation(line: 208, column: 2, scope: !2915, inlinedAt: !2916)
!2919 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws32Random.next_int128", scope: !97, file: !97, line: 116, type: !2920, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2920 = !DISubroutineType(types: !2921)
!2921 = !{!15, !2825}
!2922 = !DILocation(line: 116, column: 56, scope: !2919)
!2923 = !DILocalVariable(name: "self", arg: 1, scope: !2919, file: !97, line: 116, type: !2825)
!2924 = !DILocation(line: 116, column: 37, scope: !2919)
!2925 = !DILocation(line: 116, column: 72, scope: !2926, inlinedAt: !2922)
!2926 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2927 = !DILocation(line: 138, column: 45, scope: !2926, inlinedAt: !2922)
!2928 = !DILocation(line: 138, column: 72, scope: !2926, inlinedAt: !2922)
!2929 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws32Random.next_long", scope: !97, file: !97, line: 117, type: !2930, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2930 = !DISubroutineType(types: !2931)
!2931 = !{!6, !2825}
!2932 = !DILocation(line: 117, column: 52, scope: !2929)
!2933 = !DILocalVariable(name: "self", arg: 1, scope: !2929, file: !97, line: 117, type: !2825)
!2934 = !DILocation(line: 117, column: 33, scope: !2929)
!2935 = !DILocation(line: 117, column: 65, scope: !2936, inlinedAt: !2932)
!2936 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2937 = !DILocation(line: 139, column: 40, scope: !2936, inlinedAt: !2932)
!2938 = !DILocation(line: 139, column: 65, scope: !2936, inlinedAt: !2932)
!2939 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws32Random.next_short", scope: !97, file: !97, line: 118, type: !2940, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2940 = !DISubroutineType(types: !2941)
!2941 = !{!23, !2825}
!2942 = !DILocation(line: 118, column: 54, scope: !2939)
!2943 = !DILocalVariable(name: "self", arg: 1, scope: !2939, file: !97, line: 118, type: !2825)
!2944 = !DILocation(line: 118, column: 35, scope: !2939)
!2945 = !DILocation(line: 118, column: 62, scope: !2939)
!2946 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws32Random.next_byte", scope: !97, file: !97, line: 119, type: !2947, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2947 = !DISubroutineType(types: !2948)
!2948 = !{!60, !2825}
!2949 = !DILocation(line: 119, column: 51, scope: !2946)
!2950 = !DILocalVariable(name: "self", arg: 1, scope: !2946, file: !97, line: 119, type: !2825)
!2951 = !DILocation(line: 119, column: 32, scope: !2946)
!2952 = !DILocation(line: 119, column: 57, scope: !2946)
!2953 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws16Random.set_seed", scope: !97, file: !97, line: 129, type: !2954, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2954 = !DISubroutineType(types: !2955)
!2955 = !{null, !2956, !257}
!2956 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws16Random*", baseType: !2957, size: 64, align: 64, dwarfAddressSpace: 0)
!2957 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws16Random", scope: !97, file: !97, line: 123, size: 64, align: 16, elements: !2958, identifier: "std.math.random.Msws16Random")
!2958 = !{!2959, !2960, !2961, !2962}
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !2957, file: !97, line: 125, baseType: !23, size: 16, align: 16)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !2957, file: !97, line: 125, baseType: !23, size: 16, align: 16, offset: 16)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !2957, file: !97, line: 126, baseType: !23, size: 16, align: 16, offset: 32)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !2957, file: !97, line: 126, baseType: !23, size: 16, align: 16, offset: 48)
!2963 = !DILocation(line: 130, column: 1, scope: !2953)
!2964 = !DILocalVariable(name: "self", arg: 1, scope: !2953, file: !97, line: 129, type: !2956)
!2965 = !DILocation(line: 129, column: 32, scope: !2953)
!2966 = !DILocalVariable(name: "input", arg: 2, scope: !2953, file: !97, line: 129, type: !257)
!2967 = !DILocation(line: 129, column: 46, scope: !2953)
!2968 = !DILocation(line: 131, column: 3, scope: !2953)
!2969 = !DILocalVariable(name: "return_value", scope: !2970, file: !97, line: 10, type: !1355, align: 2)
!2970 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2971 = !DILocation(line: 10, column: 8, scope: !2970, inlinedAt: !2972)
!2972 = !DILocation(line: 131, column: 18, scope: !2953)
!2973 = !DILocation(line: 11, column: 2, scope: !2970, inlinedAt: !2972)
!2974 = !DILocation(line: 254, column: 20, scope: !2975, inlinedAt: !2976)
!2975 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2976 = !DILocation(line: 131, column: 10, scope: !2953)
!2977 = !DILocation(line: 254, column: 11, scope: !2975, inlinedAt: !2976)
!2978 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws16Random.next_short", scope: !97, file: !97, line: 135, type: !2979, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!2979 = !DISubroutineType(types: !2980)
!2980 = !{!23, !2956}
!2981 = !DILocation(line: 136, column: 1, scope: !2978)
!2982 = !DILocalVariable(name: "self", arg: 1, scope: !2978, file: !97, line: 135, type: !2956)
!2983 = !DILocation(line: 135, column: 35, scope: !2978)
!2984 = !DILocalVariable(name: "s0", scope: !2978, file: !97, line: 137, type: !23, align: 2)
!2985 = !DILocation(line: 137, column: 9, scope: !2978)
!2986 = !DILocation(line: 137, column: 14, scope: !2978)
!2987 = !DILocation(line: 138, column: 2, scope: !2978)
!2988 = !DILocation(line: 138, column: 16, scope: !2978)
!2989 = !DILocation(line: 138, column: 30, scope: !2978)
!2990 = !DILocation(line: 138, column: 44, scope: !2978)
!2991 = !DILocation(line: 139, column: 2, scope: !2978)
!2992 = !DILocation(line: 139, column: 16, scope: !2978)
!2993 = !DILocation(line: 115, column: 56, scope: !2994, inlinedAt: !2992)
!2994 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!2995 = !DILocation(line: 115, column: 62, scope: !2994, inlinedAt: !2992)
!2996 = !DILocation(line: 115, column: 68, scope: !2994, inlinedAt: !2992)
!2997 = !DILocation(line: 140, column: 2, scope: !2978)
!2998 = !DILocation(line: 142, column: 2, scope: !2978)
!2999 = !DILocation(line: 142, column: 16, scope: !2978)
!3000 = !DILocation(line: 142, column: 30, scope: !2978)
!3001 = !DILocation(line: 142, column: 44, scope: !2978)
!3002 = !DILocalVariable(name: "s1", scope: !2978, file: !97, line: 143, type: !23, align: 2)
!3003 = !DILocation(line: 143, column: 9, scope: !2978)
!3004 = !DILocation(line: 143, column: 14, scope: !2978)
!3005 = !DILocation(line: 144, column: 2, scope: !2978)
!3006 = !DILocation(line: 144, column: 16, scope: !2978)
!3007 = !DILocation(line: 115, column: 56, scope: !3008, inlinedAt: !3006)
!3008 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3009 = !DILocation(line: 115, column: 62, scope: !3008, inlinedAt: !3006)
!3010 = !DILocation(line: 115, column: 68, scope: !3008, inlinedAt: !3006)
!3011 = !DILocation(line: 145, column: 2, scope: !2978)
!3012 = !DILocation(line: 147, column: 9, scope: !2978)
!3013 = !DILocation(line: 147, column: 14, scope: !2978)
!3014 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws16Random.next_bytes", scope: !97, file: !97, line: 153, type: !2954, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3015 = !DILocation(line: 153, column: 66, scope: !3014)
!3016 = !DILocalVariable(name: "self", arg: 1, scope: !3014, file: !97, line: 153, type: !2956)
!3017 = !DILocation(line: 153, column: 33, scope: !3014)
!3018 = !DILocalVariable(name: "bytes", arg: 2, scope: !3014, file: !97, line: 153, type: !257)
!3019 = !DILocation(line: 153, column: 47, scope: !3014)
!3020 = !DILocation(line: 151, column: 11, scope: !3021)
!3021 = distinct !DILexicalBlock(scope: !3014, file: !97, line: 153, column: 66)
!3022 = !DILocalVariable(name: "len", scope: !3023, file: !97, line: 146, type: !262, align: 8)
!3023 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3024 = !DILocation(line: 146, column: 6, scope: !3023, inlinedAt: !3015)
!3025 = !DILocation(line: 146, column: 12, scope: !3023, inlinedAt: !3015)
!3026 = !DILocation(line: 148, column: 2, scope: !3023, inlinedAt: !3015)
!3027 = !DILocation(line: 148, column: 9, scope: !3028, inlinedAt: !3015)
!3028 = distinct !DILexicalBlock(scope: !3023, file: !2, line: 148, column: 2)
!3029 = !DILocalVariable(name: "value", scope: !3030, file: !97, line: 150, type: !23, align: 2)
!3030 = distinct !DILexicalBlock(scope: !3028, file: !2, line: 149, column: 2)
!3031 = !DILocation(line: 150, column: 7, scope: !3030, inlinedAt: !3015)
!3032 = !DILocation(line: 153, column: 89, scope: !3030, inlinedAt: !3015)
!3033 = !DILocation(line: 150, column: 15, scope: !3030, inlinedAt: !3015)
!3034 = !DILocation(line: 151, column: 7, scope: !3030, inlinedAt: !3015)
!3035 = !DILocation(line: 153, column: 33, scope: !3036, inlinedAt: !3015)
!3036 = distinct !DILexicalBlock(scope: !3030, file: !2, line: 152, column: 3)
!3037 = !DILocation(line: 153, column: 17, scope: !3036, inlinedAt: !3015)
!3038 = !DILocation(line: 153, column: 4, scope: !3036, inlinedAt: !3015)
!3039 = !DILocation(line: 153, column: 10, scope: !3036, inlinedAt: !3015)
!3040 = !DILocation(line: 154, column: 10, scope: !3036, inlinedAt: !3015)
!3041 = !DILocation(line: 156, column: 3, scope: !3030, inlinedAt: !3015)
!3042 = !DILocation(line: 157, column: 3, scope: !3030, inlinedAt: !3015)
!3043 = !DILocation(line: 158, column: 11, scope: !3030, inlinedAt: !3015)
!3044 = !DILocation(line: 158, column: 17, scope: !3030, inlinedAt: !3015)
!3045 = !DILocation(line: 206, column: 33, scope: !3046, inlinedAt: !3047)
!3046 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3047 = !DILocation(line: 160, column: 2, scope: !3023, inlinedAt: !3015)
!3048 = !DILocation(line: 206, column: 2, scope: !3046, inlinedAt: !3047)
!3049 = !DILocation(line: 208, column: 2, scope: !3046, inlinedAt: !3047)
!3050 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws16Random.next_int128", scope: !97, file: !97, line: 154, type: !3051, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3051 = !DISubroutineType(types: !3052)
!3052 = !{!15, !2956}
!3053 = !DILocation(line: 154, column: 56, scope: !3050)
!3054 = !DILocalVariable(name: "self", arg: 1, scope: !3050, file: !97, line: 154, type: !2956)
!3055 = !DILocation(line: 154, column: 37, scope: !3050)
!3056 = !DILocation(line: 154, column: 72, scope: !3057, inlinedAt: !3053)
!3057 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3058 = !DILocation(line: 138, column: 45, scope: !3057, inlinedAt: !3053)
!3059 = !DILocation(line: 138, column: 72, scope: !3057, inlinedAt: !3053)
!3060 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws16Random.next_long", scope: !97, file: !97, line: 155, type: !3061, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3061 = !DISubroutineType(types: !3062)
!3062 = !{!6, !2956}
!3063 = !DILocation(line: 155, column: 52, scope: !3060)
!3064 = !DILocalVariable(name: "self", arg: 1, scope: !3060, file: !97, line: 155, type: !2956)
!3065 = !DILocation(line: 155, column: 33, scope: !3060)
!3066 = !DILocation(line: 155, column: 65, scope: !3067, inlinedAt: !3063)
!3067 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3068 = !DILocation(line: 139, column: 40, scope: !3067, inlinedAt: !3063)
!3069 = !DILocation(line: 139, column: 65, scope: !3067, inlinedAt: !3063)
!3070 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws16Random.next_int", scope: !97, file: !97, line: 156, type: !3071, scopeLine: 156, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3071 = !DISubroutineType(types: !3072)
!3072 = !{!20, !2956}
!3073 = !DILocation(line: 156, column: 50, scope: !3070)
!3074 = !DILocalVariable(name: "self", arg: 1, scope: !3070, file: !97, line: 156, type: !2956)
!3075 = !DILocation(line: 156, column: 31, scope: !3070)
!3076 = !DILocation(line: 156, column: 64, scope: !3077, inlinedAt: !3073)
!3077 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3078 = !DILocation(line: 140, column: 40, scope: !3077, inlinedAt: !3073)
!3079 = !DILocation(line: 140, column: 64, scope: !3077, inlinedAt: !3073)
!3080 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws16Random.next_byte", scope: !97, file: !97, line: 157, type: !3081, scopeLine: 157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3081 = !DISubroutineType(types: !3082)
!3082 = !{!60, !2956}
!3083 = !DILocation(line: 157, column: 51, scope: !3080)
!3084 = !DILocalVariable(name: "self", arg: 1, scope: !3080, file: !97, line: 157, type: !2956)
!3085 = !DILocation(line: 157, column: 32, scope: !3080)
!3086 = !DILocation(line: 157, column: 57, scope: !3080)
!3087 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws8Random.set_seed", scope: !97, file: !97, line: 166, type: !3088, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3088 = !DISubroutineType(types: !3089)
!3089 = !{null, !3090, !257}
!3090 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws8Random*", baseType: !3091, size: 64, align: 64, dwarfAddressSpace: 0)
!3091 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws8Random", scope: !97, file: !97, line: 160, size: 32, align: 8, elements: !3092, identifier: "std.math.random.Msws8Random")
!3092 = !{!3093, !3094, !3095, !3096}
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !3091, file: !97, line: 162, baseType: !60, size: 8, align: 8)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !3091, file: !97, line: 162, baseType: !60, size: 8, align: 8, offset: 8)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !3091, file: !97, line: 163, baseType: !60, size: 8, align: 8, offset: 16)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !3091, file: !97, line: 163, baseType: !60, size: 8, align: 8, offset: 24)
!3097 = !DILocation(line: 167, column: 1, scope: !3087)
!3098 = !DILocalVariable(name: "self", arg: 1, scope: !3087, file: !97, line: 166, type: !3090)
!3099 = !DILocation(line: 166, column: 31, scope: !3087)
!3100 = !DILocalVariable(name: "input", arg: 2, scope: !3087, file: !97, line: 166, type: !257)
!3101 = !DILocation(line: 166, column: 45, scope: !3087)
!3102 = !DILocation(line: 168, column: 3, scope: !3087)
!3103 = !DILocalVariable(name: "return_value", scope: !3104, file: !97, line: 10, type: !1486, align: 1)
!3104 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !43, file: !43, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3105 = !DILocation(line: 10, column: 8, scope: !3104, inlinedAt: !3106)
!3106 = !DILocation(line: 168, column: 18, scope: !3087)
!3107 = !DILocation(line: 11, column: 2, scope: !3104, inlinedAt: !3106)
!3108 = !DILocation(line: 254, column: 20, scope: !3109, inlinedAt: !3110)
!3109 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !338, file: !338, line: 251, scopeLine: 251, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3110 = !DILocation(line: 168, column: 10, scope: !3087)
!3111 = !DILocation(line: 254, column: 11, scope: !3109, inlinedAt: !3110)
!3112 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws8Random.next_byte", scope: !97, file: !97, line: 171, type: !3113, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3113 = !DISubroutineType(types: !3114)
!3114 = !{!60, !3090}
!3115 = !DILocation(line: 172, column: 1, scope: !3112)
!3116 = !DILocalVariable(name: "self", arg: 1, scope: !3112, file: !97, line: 171, type: !3090)
!3117 = !DILocation(line: 171, column: 31, scope: !3112)
!3118 = !DILocalVariable(name: "s0", scope: !3112, file: !97, line: 173, type: !60, align: 1)
!3119 = !DILocation(line: 173, column: 7, scope: !3112)
!3120 = !DILocation(line: 173, column: 12, scope: !3112)
!3121 = !DILocation(line: 174, column: 2, scope: !3112)
!3122 = !DILocation(line: 174, column: 16, scope: !3112)
!3123 = !DILocation(line: 174, column: 30, scope: !3112)
!3124 = !DILocation(line: 174, column: 44, scope: !3112)
!3125 = !DILocation(line: 175, column: 2, scope: !3112)
!3126 = !DILocation(line: 175, column: 16, scope: !3112)
!3127 = !DILocation(line: 131, column: 50, scope: !3128, inlinedAt: !3126)
!3128 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3129 = !DILocation(line: 131, column: 56, scope: !3128, inlinedAt: !3126)
!3130 = !DILocation(line: 131, column: 62, scope: !3128, inlinedAt: !3126)
!3131 = !DILocation(line: 176, column: 2, scope: !3112)
!3132 = !DILocation(line: 178, column: 2, scope: !3112)
!3133 = !DILocation(line: 178, column: 16, scope: !3112)
!3134 = !DILocation(line: 178, column: 30, scope: !3112)
!3135 = !DILocation(line: 178, column: 44, scope: !3112)
!3136 = !DILocalVariable(name: "s1", scope: !3112, file: !97, line: 179, type: !60, align: 1)
!3137 = !DILocation(line: 179, column: 7, scope: !3112)
!3138 = !DILocation(line: 179, column: 12, scope: !3112)
!3139 = !DILocation(line: 180, column: 2, scope: !3112)
!3140 = !DILocation(line: 180, column: 16, scope: !3112)
!3141 = !DILocation(line: 131, column: 50, scope: !3142, inlinedAt: !3140)
!3142 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !158, file: !158, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3143 = !DILocation(line: 131, column: 56, scope: !3142, inlinedAt: !3140)
!3144 = !DILocation(line: 131, column: 62, scope: !3142, inlinedAt: !3140)
!3145 = !DILocation(line: 181, column: 2, scope: !3112)
!3146 = !DILocation(line: 183, column: 9, scope: !3112)
!3147 = !DILocation(line: 183, column: 14, scope: !3112)
!3148 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws8Random.next_bytes", scope: !97, file: !97, line: 186, type: !3088, scopeLine: 186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3149 = !DILocation(line: 186, column: 65, scope: !3148)
!3150 = !DILocalVariable(name: "self", arg: 1, scope: !3148, file: !97, line: 186, type: !3090)
!3151 = !DILocation(line: 186, column: 32, scope: !3148)
!3152 = !DILocalVariable(name: "bytes", arg: 2, scope: !3148, file: !97, line: 186, type: !257)
!3153 = !DILocation(line: 186, column: 46, scope: !3148)
!3154 = !DILocalVariable(name: "len", scope: !3155, file: !97, line: 146, type: !262, align: 8)
!3155 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3156 = !DILocation(line: 146, column: 6, scope: !3155, inlinedAt: !3149)
!3157 = !DILocation(line: 146, column: 12, scope: !3155, inlinedAt: !3149)
!3158 = !DILocation(line: 148, column: 2, scope: !3155, inlinedAt: !3149)
!3159 = !DILocation(line: 148, column: 9, scope: !3160, inlinedAt: !3149)
!3160 = distinct !DILexicalBlock(scope: !3155, file: !2, line: 148, column: 2)
!3161 = !DILocalVariable(name: "value", scope: !3162, file: !97, line: 150, type: !60, align: 1)
!3162 = distinct !DILexicalBlock(scope: !3160, file: !2, line: 149, column: 2)
!3163 = !DILocation(line: 150, column: 7, scope: !3162, inlinedAt: !3149)
!3164 = !DILocation(line: 186, column: 88, scope: !3162, inlinedAt: !3149)
!3165 = !DILocation(line: 150, column: 15, scope: !3162, inlinedAt: !3149)
!3166 = !DILocation(line: 151, column: 7, scope: !3162, inlinedAt: !3149)
!3167 = !DILocation(line: 153, column: 33, scope: !3168, inlinedAt: !3149)
!3168 = distinct !DILexicalBlock(scope: !3162, file: !2, line: 152, column: 3)
!3169 = !DILocation(line: 153, column: 17, scope: !3168, inlinedAt: !3149)
!3170 = !DILocation(line: 153, column: 4, scope: !3168, inlinedAt: !3149)
!3171 = !DILocation(line: 153, column: 10, scope: !3168, inlinedAt: !3149)
!3172 = !DILocation(line: 154, column: 10, scope: !3168, inlinedAt: !3149)
!3173 = !DILocation(line: 156, column: 3, scope: !3162, inlinedAt: !3149)
!3174 = !DILocation(line: 157, column: 3, scope: !3162, inlinedAt: !3149)
!3175 = !DILocation(line: 158, column: 11, scope: !3162, inlinedAt: !3149)
!3176 = !DILocation(line: 158, column: 17, scope: !3162, inlinedAt: !3149)
!3177 = !DILocation(line: 206, column: 33, scope: !3178, inlinedAt: !3179)
!3178 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !338, file: !338, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3179 = !DILocation(line: 160, column: 2, scope: !3155, inlinedAt: !3149)
!3180 = !DILocation(line: 206, column: 2, scope: !3178, inlinedAt: !3179)
!3181 = !DILocation(line: 208, column: 2, scope: !3178, inlinedAt: !3179)
!3182 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws8Random.next_int128", scope: !97, file: !97, line: 187, type: !3183, scopeLine: 187, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3183 = !DISubroutineType(types: !3184)
!3184 = !{!15, !3090}
!3185 = !DILocation(line: 187, column: 55, scope: !3182)
!3186 = !DILocalVariable(name: "self", arg: 1, scope: !3182, file: !97, line: 187, type: !3090)
!3187 = !DILocation(line: 187, column: 36, scope: !3182)
!3188 = !DILocation(line: 187, column: 71, scope: !3189, inlinedAt: !3185)
!3189 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3190 = !DILocation(line: 138, column: 45, scope: !3189, inlinedAt: !3185)
!3191 = !DILocation(line: 138, column: 72, scope: !3189, inlinedAt: !3185)
!3192 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws8Random.next_long", scope: !97, file: !97, line: 188, type: !3193, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3193 = !DISubroutineType(types: !3194)
!3194 = !{!6, !3090}
!3195 = !DILocation(line: 188, column: 51, scope: !3192)
!3196 = !DILocalVariable(name: "self", arg: 1, scope: !3192, file: !97, line: 188, type: !3090)
!3197 = !DILocation(line: 188, column: 32, scope: !3192)
!3198 = !DILocation(line: 188, column: 64, scope: !3199, inlinedAt: !3195)
!3199 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3200 = !DILocation(line: 139, column: 40, scope: !3199, inlinedAt: !3195)
!3201 = !DILocation(line: 139, column: 65, scope: !3199, inlinedAt: !3195)
!3202 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws8Random.next_int", scope: !97, file: !97, line: 189, type: !3203, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3203 = !DISubroutineType(types: !3204)
!3204 = !{!20, !3090}
!3205 = !DILocation(line: 189, column: 49, scope: !3202)
!3206 = !DILocalVariable(name: "self", arg: 1, scope: !3202, file: !97, line: 189, type: !3090)
!3207 = !DILocation(line: 189, column: 30, scope: !3202)
!3208 = !DILocation(line: 189, column: 63, scope: !3209, inlinedAt: !3205)
!3209 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3210 = !DILocation(line: 140, column: 40, scope: !3209, inlinedAt: !3205)
!3211 = !DILocation(line: 140, column: 64, scope: !3209, inlinedAt: !3205)
!3212 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws8Random.next_short", scope: !97, file: !97, line: 190, type: !3213, scopeLine: 190, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !113, retainedNodes: !118)
!3213 = !DISubroutineType(types: !3214)
!3214 = !{!23, !3090}
!3215 = !DILocation(line: 190, column: 53, scope: !3212)
!3216 = !DILocalVariable(name: "self", arg: 1, scope: !3212, file: !97, line: 190, type: !3090)
!3217 = !DILocation(line: 190, column: 34, scope: !3212)
!3218 = !DILocation(line: 190, column: 68, scope: !3219, inlinedAt: !3215)
!3219 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !113)
!3220 = !DILocation(line: 141, column: 43, scope: !3219, inlinedAt: !3215)
!3221 = !DILocation(line: 141, column: 68, scope: !3219, inlinedAt: !3215)
