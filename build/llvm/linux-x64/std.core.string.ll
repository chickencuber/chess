; ModuleID = 'std::core::string'
source_filename = "std::core::string"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%"char[]" = type { ptr, i64 }
%any = type { ptr, i64 }
%"char[][]" = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%"ushort[]" = type { ptr, i64 }
%"uint[]" = type { ptr, i64 }
%StringIterator = type { %"char[]", i64 }
%Splitter = type { %"char[]", %"char[]", i64, i32, i32 }

$std.core.String.replace = comdat any

$std.core.String.treplace = comdat any

$std.core.String.trim = comdat any

$std.core.String.trim_left = comdat any

$std.core.String.trim_right = comdat any

$std.core.String.starts_with = comdat any

$std.core.String.ends_with = comdat any

$std.core.String.strip = comdat any

$std.core.String.strip_end = comdat any

$std.core.String.split = comdat any

$std.core.String.tsplit = comdat any

$std.core.String.split_to_buffer = comdat any

$std.core.String.contains = comdat any

$std.core.String.count = comdat any

$std.core.String.index_of_char = comdat any

$std.core.String.index_of_chars = comdat any

$std.core.String.index_of_char_from = comdat any

$std.core.String.rindex_of_char = comdat any

$std.core.String.index_of = comdat any

$std.core.String.rindex_of = comdat any

$std.core.string.ZString.str_view = comdat any

$std.core.string.ZString.char_len = comdat any

$std.core.string.ZString.len = comdat any

$std.core.String.zstr_copy = comdat any

$std.core.String.concat = comdat any

$std.core.String.tconcat = comdat any

$std.core.String.zstr_tcopy = comdat any

$std.core.String.copy = comdat any

$std.core.String.free = comdat any

$std.core.String.tcopy = comdat any

$std.core.string.ZString.copy = comdat any

$std.core.string.ZString.tcopy = comdat any

$std.core.String.to_utf16 = comdat any

$std.core.String.to_temp_utf16 = comdat any

$std.core.String.to_wstring = comdat any

$std.core.String.to_temp_wstring = comdat any

$std.core.String.to_utf32 = comdat any

$std.core.String.to_temp_utf32 = comdat any

$std.core.String.convert_to_lower = comdat any

$std.core.String.to_lower_copy = comdat any

$std.core.String.to_lower_tcopy = comdat any

$std.core.String.convert_to_upper = comdat any

$std.core.String.to_upper_copy = comdat any

$std.core.String.iterator = comdat any

$std.core.String.to_upper_tcopy = comdat any

$std.core.String.utf8_codepoints = comdat any

$std.core.String.is_zstr = comdat any

$std.core.String.quick_zstr = comdat any

$std.core.String.to_int128 = comdat any

$std.core.String.to_long = comdat any

$std.core.String.to_int = comdat any

$std.core.String.to_short = comdat any

$std.core.String.to_ichar = comdat any

$std.core.String.to_uint128 = comdat any

$std.core.String.to_ulong = comdat any

$std.core.String.to_uint = comdat any

$std.core.String.to_ushort = comdat any

$std.core.String.to_uchar = comdat any

$std.core.String.to_double = comdat any

$std.core.String.to_float = comdat any

$std.core.String.tokenize = comdat any

$std.core.String.tokenize_all = comdat any

$std.core.String.splitter = comdat any

$std.core.string.Splitter.reset = comdat any

$std.core.string.Splitter.next = comdat any

$std.core.string.tformat_zstr = comdat any

$std.core.string.format = comdat any

$std.core.string.tformat = comdat any

$std.core.string.join = comdat any

$std.core.string.from_utf32 = comdat any

$std.core.string.from_utf16 = comdat any

$std.core.string.from_wstring = comdat any

$std.core.string.tfrom_wstring = comdat any

$std.core.string.tfrom_utf16 = comdat any

$.dyn_search = comdat any

$"$ct.std.core.string.ZString" = comdat any

$"$ct.p$char" = comdat any

$"$ct.char" = comdat any

$"$ct.std.core.string.WString" = comdat any

$"$ct.p$ushort" = comdat any

$"$ct.ushort" = comdat any

$"$ct.std.core.string.Splitter" = comdat any

$"$ct.int" = comdat any

$"$ct.std.core.string.SplitterType" = comdat any

$std.core.string.KMAX = comdat any

$std.core.string.MASK = comdat any

$std.core.string.B1B_DIG = comdat any

$std.core.string.B1B_MAX = comdat any

$"$sel.acquire" = comdat any

$"$ct.ulong" = comdat any

$"$ct.fault" = comdat any

$"$ct.long" = comdat any

$"$sel.release" = comdat any

$std.core.builtin.NOT_FOUND = comdat any

$"$sel.resize" = comdat any

$std.core.string.BUFFER_EXCEEDED = comdat any

$std.core.string.EMPTY_STRING = comdat any

$std.core.string.MALFORMED_INTEGER = comdat any

$std.core.string.INTEGER_OVERFLOW = comdat any

$std.core.string.NEGATIVE_VALUE = comdat any

$std.core.string.MALFORMED_FLOAT = comdat any

$std.core.string.FLOAT_OUT_OF_RANGE = comdat any

$"$ct.uint" = comdat any

$std.core.builtin.NO_MORE_ELEMENT = comdat any

@"$ct.std.core.string.ZString" = linkonce global %.introspect { i8 17, i64 ptrtoint (ptr @"$ct.p$char" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$char" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.string.WString" = linkonce global %.introspect { i8 17, i64 ptrtoint (ptr @"$ct.p$ushort" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$ushort" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.string.Splitter" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 48, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@.enum.TOKENIZE = internal constant [9 x i8] c"TOKENIZE\00", align 1
@.enum.TOKENIZE_ALL = internal constant [13 x i8] c"TOKENIZE_ALL\00", align 1
@.enum.TOKENIZE_ALL_SKIP_LAST = internal constant [23 x i8] c"TOKENIZE_ALL_SKIP_LAST\00", align 1
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.string.SplitterType" = linkonce global { i8, i64, ptr, i64, i64, i64, [3 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 3, [3 x %"char[]"] [%"char[]" { ptr @.enum.TOKENIZE, i64 8 }, %"char[]" { ptr @.enum.TOKENIZE_ALL, i64 12 }, %"char[]" { ptr @.enum.TOKENIZE_ALL_SKIP_LAST, i64 22 }] }, comdat, align 8
@std.core.string.KMAX = weak local_unnamed_addr constant i32 128, comdat, align 4, !dbg !0
@std.core.string.MASK = weak local_unnamed_addr constant i32 127, comdat, align 4, !dbg !4
@std.core.string.B1B_DIG = weak local_unnamed_addr constant i32 2, comdat, align 4, !dbg !6
@std.core.string.B1B_MAX = weak local_unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], comdat, align 4, !dbg !8
@std.core.string.SURROGATE_OFFSET = internal unnamed_addr constant i32 65536, align 4, !dbg !14
@std.core.string.SURROGATE_GENERIC_MASK = internal unnamed_addr constant i32 63488, align 4, !dbg !17
@std.core.string.SURROGATE_MASK = internal unnamed_addr constant i32 64512, align 4, !dbg !19
@std.core.string.SURROGATE_CODEPOINT_MASK = internal unnamed_addr constant i32 1023, align 4, !dbg !21
@std.core.string.SURROGATE_BITS = internal unnamed_addr constant i32 10, align 4, !dbg !23
@std.core.string.SURROGATE_LOW_VALUE = internal unnamed_addr constant i32 56320, align 4, !dbg !25
@std.core.string.SURROGATE_HIGH_VALUE = internal unnamed_addr constant i32 55296, align 4, !dbg !27
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", comdat, align 1
@.panic_msg = internal constant [66 x i8] c"@require \22!alignment || math::is_power_of_2(alignment)\22 violated.\00", align 1
@.file = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.func = internal constant [5 x i8] c"join\00", align 1
@std.core.builtin.panic = extern_weak global ptr, align 8
@.panic_msg.10 = internal constant [81 x i8] c"@require \22alignment <= mem::MAX_MEMORY_ALIGNMENT\22 violated: 'alignment too big'.\00", align 1
@.panic_msg.11 = internal constant [60 x i8] c"@require \22size > 0\22 violated: 'The size must be 1 or more'.\00", align 1
@.panic_msg.12 = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.13 = internal constant [44 x i8] c"Negative value (%d) given for slice length.\00", align 1
@"$ct.fault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.14 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.15 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.file.16 = internal constant [10 x i8] c"string.c3\00", align 1
@.panic_msg.17 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@.panic_msg.18 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.19 = internal constant [45 x i8] c"Dereference of null pointer, 'str' was null.\00", align 1
@.panic_msg.20 = internal constant [95 x i8] c"Unaligned access: ptr %% %s = %s, use @unaligned_load / @unaligned_store for unaligned access.\00", align 1
@.panic_msg.21 = internal constant [33 x i8] c"Called a method on a null value.\00", align 1
@.file.22 = internal constant [11 x i8] c"dstring.c3\00", align 1
@.panic_msg.23 = internal constant [48 x i8] c"Dereference of null pointer, 's[1..]' was null.\00", align 1
@.func.24 = internal constant [11 x i8] c"from_utf32\00", align 1
@.func.25 = internal constant [11 x i8] c"from_utf16\00", align 1
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", comdat, align 1
@.panic_msg.26 = internal constant [76 x i8] c"@require \22ptr != null\22 violated: 'Empty pointers should never be released'.\00", align 1
@.panic_msg.27 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@.func.28 = internal constant [13 x i8] c"from_wstring\00", align 1
@std.core.mem.allocator.current_temp = extern_weak thread_local global %any, align 8
@std.core.mem.allocator.thread_allocator = extern_weak thread_local global %any, align 8
@.func.29 = internal constant [10 x i8] c"trim_left\00", align 1
@.panic_msg.30 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.func.31 = internal constant [11 x i8] c"trim_right\00", align 1
@.func.32 = internal constant [12 x i8] c"starts_with\00", align 1
@.func.33 = internal constant [10 x i8] c"ends_with\00", align 1
@.func.34 = internal constant [6 x i8] c"strip\00", align 1
@.func.35 = internal constant [10 x i8] c"strip_end\00", align 1
@.panic_msg.36 = internal constant [90 x i8] c"@require \22delimiter.len > 0\22 violated: 'The delimiter must be at least 1 character long'.\00", align 1
@.func.37 = internal constant [6 x i8] c"split\00", align 1
@std.core.builtin.NOT_FOUND = linkonce constant %"char[]" { ptr @std.core.builtin.NOT_FOUND.nameof, i64 18 }, comdat, align 8
@std.core.builtin.NOT_FOUND.nameof = internal constant [19 x i8] c"builtin::NOT_FOUND\00", align 1
@.panic_msg.38 = internal constant [72 x i8] c"@require \22substr.len > 0\22 violated: 'The string must be len 1 or more'.\00", align 1
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", comdat, align 1
@.panic_msg.39 = internal constant [33 x i8] c"@require \22ptr != null\22 violated.\00", align 1
@.panic_msg.40 = internal constant [34 x i8] c"@require \22new_size > 0\22 violated.\00", align 1
@.panic_msg.41 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.panic_msg.42 = internal constant [49 x i8] c"@ensure \22return.len > 0 || skip_empty\22 violated.\00", align 1
@.func.43 = internal constant [7 x i8] c"tsplit\00", align 1
@.func.44 = internal constant [16 x i8] c"split_to_buffer\00", align 1
@std.core.string.BUFFER_EXCEEDED = linkonce constant %"char[]" { ptr @std.core.string.BUFFER_EXCEEDED.nameof, i64 23 }, comdat, align 8
@std.core.string.BUFFER_EXCEEDED.nameof = internal constant [24 x i8] c"string::BUFFER_EXCEEDED\00", align 1
@.file.45 = internal constant [11 x i8] c"builtin.c3\00", align 1
@.func.46 = internal constant [9 x i8] c"contains\00", align 1
@.func.47 = internal constant [6 x i8] c"count\00", align 1
@.panic_msg.48 = internal constant [45 x i8] c"Negative size (start %d is less than end %d)\00", align 1
@.panic_msg.49 = internal constant [57 x i8] c"Dereference of null pointer, 'self[..^needed]' was null.\00", align 1
@.func.50 = internal constant [14 x i8] c"index_of_char\00", align 1
@.panic_msg.51 = internal constant [38 x i8] c"@ensure \22return < self.len\22 violated.\00", align 1
@.func.52 = internal constant [15 x i8] c"index_of_chars\00", align 1
@.func.53 = internal constant [19 x i8] c"index_of_char_from\00", align 1
@.func.54 = internal constant [15 x i8] c"rindex_of_char\00", align 1
@.func.55 = internal constant [9 x i8] c"index_of\00", align 1
@.panic_msg.56 = internal constant [75 x i8] c"@require \22substr.len > 0\22 violated: 'The substring must be len 1 or more'.\00", align 1
@.func.57 = internal constant [10 x i8] c"rindex_of\00", align 1
@.func.58 = internal constant [9 x i8] c"str_view\00", align 1
@.func.59 = internal constant [10 x i8] c"zstr_copy\00", align 1
@.panic_msg.60 = internal constant [38 x i8] c"Passed null to a ref ('&') parameter.\00", align 1
@.file.61 = internal constant [7 x i8] c"mem.c3\00", align 1
@.panic_msg.62 = internal constant [95 x i8] c"@require \22src != null || len == 0\22 violated: 'Copying a null with non-zero length is invalid'.\00", align 1
@.panic_msg.63 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.func.64 = internal constant [7 x i8] c"concat\00", align 1
@.func.65 = internal constant [5 x i8] c"copy\00", align 1
@.panic_msg.66 = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.func.67 = internal constant [5 x i8] c"free\00", align 1
@.panic_msg.68 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.emptystr = internal constant [1 x i8] zeroinitializer, align 1
@.func.69 = internal constant [9 x i8] c"to_utf16\00", align 1
@.func.70 = internal constant [9 x i8] c"to_utf32\00", align 1
@.func.71 = internal constant [17 x i8] c"convert_to_lower\00", align 1
@.panic_msg.72 = internal constant [43 x i8] c"Dereference of null pointer, 'c' was null.\00", align 1
@std.core.ascii.ASCII_LOOKUP = extern_weak constant [256 x i16], align 16
@.file.73 = internal constant [9 x i8] c"ascii.c3\00", align 1
@.func.74 = internal constant [17 x i8] c"convert_to_upper\00", align 1
@.func.75 = internal constant [16 x i8] c"utf8_codepoints\00", align 1
@.panic_msg.76 = internal constant [61 x i8] c"Dereference of null pointer, 'self.ptr + self.len' was null.\00", align 1
@.func.77 = internal constant [8 x i8] c"is_zstr\00", align 1
@.panic_msg.78 = internal constant [42 x i8] c"@ensure \22return[self.len] == 0\22 violated.\00", align 1
@.func.79 = internal constant [11 x i8] c"quick_zstr\00", align 1
@.panic_msg.80 = internal constant [64 x i8] c"@require \22base > 0 && base <= 16\22 violated: 'Unsupported base'.\00", align 1
@.func.81 = internal constant [10 x i8] c"to_int128\00", align 1
@std.core.string.EMPTY_STRING = linkonce constant %"char[]" { ptr @std.core.string.EMPTY_STRING.nameof, i64 20 }, comdat, align 8
@std.core.string.EMPTY_STRING.nameof = internal constant [21 x i8] c"string::EMPTY_STRING\00", align 1
@std.core.string.MALFORMED_INTEGER = linkonce constant %"char[]" { ptr @std.core.string.MALFORMED_INTEGER.nameof, i64 25 }, comdat, align 8
@std.core.string.MALFORMED_INTEGER.nameof = internal constant [26 x i8] c"string::MALFORMED_INTEGER\00", align 1
@std.core.string.INTEGER_OVERFLOW = linkonce constant %"char[]" { ptr @std.core.string.INTEGER_OVERFLOW.nameof, i64 24 }, comdat, align 8
@std.core.string.INTEGER_OVERFLOW.nameof = internal constant [25 x i8] c"string::INTEGER_OVERFLOW\00", align 1
@.func.82 = internal constant [8 x i8] c"to_long\00", align 1
@.func.83 = internal constant [7 x i8] c"to_int\00", align 1
@.func.84 = internal constant [9 x i8] c"to_short\00", align 1
@.func.85 = internal constant [9 x i8] c"to_ichar\00", align 1
@.func.86 = internal constant [11 x i8] c"to_uint128\00", align 1
@std.core.string.NEGATIVE_VALUE = linkonce constant %"char[]" { ptr @std.core.string.NEGATIVE_VALUE.nameof, i64 22 }, comdat, align 8
@std.core.string.NEGATIVE_VALUE.nameof = internal constant [23 x i8] c"string::NEGATIVE_VALUE\00", align 1
@.func.87 = internal constant [9 x i8] c"to_ulong\00", align 1
@.func.88 = internal constant [8 x i8] c"to_uint\00", align 1
@.func.89 = internal constant [10 x i8] c"to_ushort\00", align 1
@.func.90 = internal constant [9 x i8] c"to_uchar\00", align 1
@to_double.BITS = internal unnamed_addr constant i32 53, align 4, !dbg !29
@to_double.EMIN = internal unnamed_addr constant i32 -1074, align 4, !dbg !31
@.file.91 = internal constant [18 x i8] c"string_to_real.c3\00", align 1
@.func.92 = internal constant [10 x i8] c"to_double\00", align 1
@std.core.string.MALFORMED_FLOAT = linkonce constant %"char[]" { ptr @std.core.string.MALFORMED_FLOAT.nameof, i64 23 }, comdat, align 8
@std.core.string.MALFORMED_FLOAT.nameof = internal constant [24 x i8] c"string::MALFORMED_FLOAT\00", align 1
@.str = private unnamed_addr constant [9 x i8] c"infinity\00", align 1
@.str.93 = private unnamed_addr constant [9 x i8] c"INFINITY\00", align 1
@.str.94 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.95 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.panic_msg.96 = internal constant [23 x i8] c"Negative indexing (%d)\00", align 1
@std.core.string.FLOAT_OUT_OF_RANGE = linkonce constant %"char[]" { ptr @std.core.string.FLOAT_OUT_OF_RANGE.nameof, i64 26 }, comdat, align 8
@std.core.string.FLOAT_OUT_OF_RANGE.nameof = internal constant [27 x i8] c"string::FLOAT_OUT_OF_RANGE\00", align 1
@.panic_msg.97 = internal constant [35 x i8] c"@require \22chars.len > 0\22 violated.\00", align 1
@to_double.TH = internal unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !33
@to_double.P10S = internal unnamed_addr constant [8 x i32] [i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000], align 16, !dbg !35
@.panic_msg.98 = internal constant [21 x i8] c"Assert \22len\22 failed.\00", align 1
@.panic_msg.99 = internal constant [35 x i8] c"Assert \22index < last_char\22 failed.\00", align 1
@.panic_msg.100 = internal constant [18 x i8] c"Division by zero.\00", align 1
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.101 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.102 = internal constant [11 x i8] c"% by zero.\00", align 1
@to_float.BITS = internal unnamed_addr constant i32 24, align 4, !dbg !40
@to_float.EMIN = internal unnamed_addr constant i32 -149, align 4, !dbg !42
@.func.103 = internal constant [9 x i8] c"to_float\00", align 1
@.str.104 = private unnamed_addr constant [9 x i8] c"infinity\00", align 1
@.str.105 = private unnamed_addr constant [9 x i8] c"INFINITY\00", align 1
@.str.106 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.107 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@to_float.TH = internal unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !44
@to_float.P10S = internal unnamed_addr constant [8 x i32] [i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000], align 16, !dbg !46
@.func.108 = internal constant [6 x i8] c"reset\00", align 1
@.func.109 = internal constant [5 x i8] c"next\00", align 1
@std.core.builtin.NO_MORE_ELEMENT = linkonce constant %"char[]" { ptr @std.core.builtin.NO_MORE_ELEMENT.nameof, i64 24 }, comdat, align 8
@std.core.builtin.NO_MORE_ELEMENT.nameof = internal constant [25 x i8] c"builtin::NO_MORE_ELEMENT\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.replace(ptr %0, i64 %1, i64 %2, ptr %3, ptr %4, i64 %5, ptr byval(%"char[]") align 8 %6) #0 comdat !dbg !79 {
entry:
  %self = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %needle = alloca %"char[]", align 8
  %state = alloca ptr, align 8
  %split = alloca %"char[][]", align 8
  %result = alloca %"char[][]", align 8
  %result17 = alloca %"char[]", align 8
  %taddr = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !89, !DIExpression(), !90)
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !91, !DIExpression(), !92)
  store ptr %4, ptr %needle, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %5, ptr %ptradd2, align 8
    #dbg_declare(ptr %needle, !93, !DIExpression(), !94)
    #dbg_declare(ptr %6, !95, !DIExpression(), !96)
    #dbg_declare(ptr %state, !97, !DIExpression(), !124)
  %7 = call ptr @std.core.mem.allocator.push_pool() #5, !dbg !126
  store ptr %7, ptr %state, align 8, !dbg !126
    #dbg_declare(ptr %split, !127, !DIExpression(), !134)
  %lo = load ptr, ptr %self, align 8, !dbg !135
  %ptradd3 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !135
  %hi = load i64, ptr %ptradd3, align 8, !dbg !135
  %lo4 = load ptr, ptr %needle, align 8, !dbg !135
  %ptradd5 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !135
  %hi6 = load i64, ptr %ptradd5, align 8, !dbg !135
  %8 = call { ptr, i64 } @std.core.String.tsplit(ptr %lo, i64 %hi, ptr %lo4, i64 %hi6, i64 0, i8 zeroext 0), !dbg !137
  store { ptr, i64 } %8, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %split, ptr align 8 %result, i32 16, i1 false)
  %lo7 = load i64, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !138
  %hi8 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8, !dbg !138
  %lo9 = load ptr, ptr %split, align 8, !dbg !138
  %ptradd10 = getelementptr inbounds i8, ptr %split, i64 8, !dbg !138
  %hi11 = load i64, ptr %ptradd10, align 8, !dbg !138
  %lo12 = load ptr, ptr %6, align 8, !dbg !138
  %ptradd13 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !138
  %hi14 = load i64, ptr %ptradd13, align 8, !dbg !138
  %9 = call ptr @std.core.dstring.join(i64 %lo7, ptr %hi8, ptr %lo9, i64 %hi11, ptr %lo12, i64 %hi14), !dbg !139
  %lo15 = load i64, ptr @std.core.mem.allocator.thread_allocator, align 8, !dbg !140
  %hi16 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.thread_allocator, i64 8), align 8, !dbg !140
  %10 = call { ptr, i64 } @std.core.dstring.DString.copy_str(ptr %9, i64 %lo15, ptr %hi16), !dbg !139
  store { ptr, i64 } %10, ptr %result17, align 8
  %11 = load %"char[]", ptr %result17, align 8
  %12 = load ptr, ptr %state, align 8, !dbg !141
  call void @std.core.mem.allocator.pop_pool(ptr %12) #5, !dbg !143
  store %"char[]" %11, ptr %taddr, align 8
  %13 = load { ptr, i64 }, ptr %taddr, align 8
  ret { ptr, i64 } %13
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.treplace(ptr %0, i64 %1, ptr %2, i64 %3, ptr %4, i64 %5) #0 comdat !dbg !144 {
entry:
  %self = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %new_str = alloca %"char[]", align 8
  %split = alloca %"char[][]", align 8
  %result = alloca %"char[][]", align 8
  %result15 = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !147, !DIExpression(), !148)
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %needle, !149, !DIExpression(), !150)
  store ptr %4, ptr %new_str, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %new_str, i64 8
  store i64 %5, ptr %ptradd2, align 8
    #dbg_declare(ptr %new_str, !151, !DIExpression(), !152)
    #dbg_declare(ptr %split, !153, !DIExpression(), !154)
  %lo = load ptr, ptr %self, align 8, !dbg !155
  %ptradd3 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !155
  %hi = load i64, ptr %ptradd3, align 8, !dbg !155
  %lo4 = load ptr, ptr %needle, align 8, !dbg !155
  %ptradd5 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !155
  %hi6 = load i64, ptr %ptradd5, align 8, !dbg !155
  %6 = call { ptr, i64 } @std.core.String.tsplit(ptr %lo, i64 %hi, ptr %lo4, i64 %hi6, i64 0, i8 zeroext 0), !dbg !157
  store { ptr, i64 } %6, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %split, ptr align 8 %result, i32 16, i1 false)
  %lo7 = load i64, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !158
  %hi8 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8, !dbg !158
  %lo9 = load ptr, ptr %split, align 8, !dbg !158
  %ptradd10 = getelementptr inbounds i8, ptr %split, i64 8, !dbg !158
  %hi11 = load i64, ptr %ptradd10, align 8, !dbg !158
  %lo12 = load ptr, ptr %new_str, align 8, !dbg !158
  %ptradd13 = getelementptr inbounds i8, ptr %new_str, i64 8, !dbg !158
  %hi14 = load i64, ptr %ptradd13, align 8, !dbg !158
  %7 = call ptr @std.core.dstring.join(i64 %lo7, ptr %hi8, ptr %lo9, i64 %hi11, ptr %lo12, i64 %hi14), !dbg !159
  %8 = call { ptr, i64 } @std.core.dstring.DString.str_view(ptr %7), !dbg !159
  store { ptr, i64 } %8, ptr %result15, align 8
  %9 = load { ptr, i64 }, ptr %result15, align 8
  ret { ptr, i64 } %9
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.trim(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !160 {
entry:
  %self = alloca %"char[]", align 8
  %to_trim = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  %result12 = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !163, !DIExpression(), !164)
  store ptr %2, ptr %to_trim, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %to_trim, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %to_trim, !165, !DIExpression(), !166)
  %lo = load ptr, ptr %self, align 8, !dbg !167
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !167
  %hi = load i64, ptr %ptradd2, align 8, !dbg !167
  %lo3 = load ptr, ptr %to_trim, align 8, !dbg !167
  %ptradd4 = getelementptr inbounds i8, ptr %to_trim, i64 8, !dbg !167
  %hi5 = load i64, ptr %ptradd4, align 8, !dbg !167
  %4 = call { ptr, i64 } @std.core.String.trim_left(ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !168
  store { ptr, i64 } %4, ptr %result, align 8
  %lo6 = load ptr, ptr %result, align 8, !dbg !169
  %ptradd7 = getelementptr inbounds i8, ptr %result, i64 8, !dbg !169
  %hi8 = load i64, ptr %ptradd7, align 8, !dbg !169
  %lo9 = load ptr, ptr %to_trim, align 8, !dbg !169
  %ptradd10 = getelementptr inbounds i8, ptr %to_trim, i64 8, !dbg !169
  %hi11 = load i64, ptr %ptradd10, align 8, !dbg !169
  %5 = call { ptr, i64 } @std.core.String.trim_right(ptr %lo6, i64 %hi8, ptr %lo9, i64 %hi11), !dbg !168
  store { ptr, i64 } %5, ptr %result12, align 8
  %6 = load { ptr, i64 }, ptr %result12, align 8
  ret { ptr, i64 } %6
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.trim_left(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !170 {
entry:
  %self = alloca %"char[]", align 8
  %to_trim = alloca %"char[]", align 8
  %start = alloca i64, align 8
  %len = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %set = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %.anon = alloca i64, align 8
  %ch = alloca i8, align 1
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %varargslots15 = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr54 = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !171, !DIExpression(), !172)
  store ptr %2, ptr %to_trim, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %to_trim, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %to_trim, !173, !DIExpression(), !174)
    #dbg_declare(ptr %start, !175, !DIExpression(), !176)
  store i64 0, ptr %start, align 8, !dbg !177
    #dbg_declare(ptr %len, !178, !DIExpression(), !179)
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !180
  %4 = load i64, ptr %ptradd2, align 8, !dbg !180
  store i64 %4, ptr %len, align 8, !dbg !180
  br label %loop.cond, !dbg !181

loop.cond:                                        ; preds = %loop.body21, %entry
  %5 = load i64, ptr %start, align 8, !dbg !182
  %6 = load i64, ptr %len, align 8, !dbg !184
  %lt = icmp ult i64 %5, %6, !dbg !182
  br i1 %lt, label %and.rhs, label %and.phi, !dbg !182

and.rhs:                                          ; preds = %loop.cond
  %ptradd3 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !185
  %7 = load i64, ptr %ptradd3, align 8, !dbg !185
  %8 = load ptr, ptr %self, align 8, !dbg !185
  %9 = load i64, ptr %start, align 8, !dbg !186
  %ge = icmp uge i64 %9, %7, !dbg !186
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !186
  br i1 %10, label %panic, label %checkok, !dbg !186

checkok:                                          ; preds = %and.rhs
  %ptradd6 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !186
  %11 = load i8, ptr %ptradd6, align 1
  store i8 %11, ptr %c, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %set, ptr align 8 %to_trim, i32 16, i1 false)
  %ptradd7 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !187
  %12 = load i64, ptr %ptradd7, align 8, !dbg !187
    #dbg_declare(ptr %.anon, !191, !DIExpression(), !187)
  store i64 0, ptr %.anon, align 8, !dbg !187
  br label %loop.cond8, !dbg !187

loop.cond8:                                       ; preds = %if.exit, %checkok
  %13 = load i64, ptr %.anon, align 8, !dbg !187
  %lt9 = icmp ult i64 %13, %12, !dbg !187
  br i1 %lt9, label %loop.body, label %loop.exit, !dbg !187

loop.body:                                        ; preds = %loop.cond8
    #dbg_declare(ptr %ch, !192, !DIExpression(), !194)
  %ptradd10 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !195
  %14 = load i64, ptr %ptradd10, align 8, !dbg !195
  %15 = load ptr, ptr %set, align 8, !dbg !195
  %16 = load i64, ptr %.anon, align 8, !dbg !195
  %ge11 = icmp uge i64 %16, %14, !dbg !195
  %17 = call i1 @llvm.expect.i1(i1 %ge11, i1 false), !dbg !195
  br i1 %17, label %panic12, label %checkok19, !dbg !195

checkok19:                                        ; preds = %loop.body
  %ptradd20 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !195
  %18 = load i8, ptr %ptradd20, align 1, !dbg !195
  store i8 %18, ptr %ch, align 1, !dbg !195
  %19 = load i8, ptr %ch, align 1, !dbg !196
  %20 = load i8, ptr %c, align 1, !dbg !197
  %eq = icmp eq i8 %19, %20, !dbg !196
  br i1 %eq, label %if.then, label %if.exit, !dbg !196

if.then:                                          ; preds = %checkok19
  store i8 1, ptr %blockret, align 1, !dbg !198
  br label %expr_block.exit, !dbg !198

if.exit:                                          ; preds = %checkok19
  %21 = load i64, ptr %.anon, align 8, !dbg !187
  %addnuw = add nuw i64 %21, 1, !dbg !187
  store i64 %addnuw, ptr %.anon, align 8, !dbg !187
  br label %loop.cond8, !dbg !187

loop.exit:                                        ; preds = %loop.cond8
  store i8 0, ptr %blockret, align 1, !dbg !199
  br label %expr_block.exit, !dbg !199

expr_block.exit:                                  ; preds = %loop.exit, %if.then
  %22 = load i8, ptr %blockret, align 1, !dbg !199
  %23 = trunc i8 %22 to i1, !dbg !199
  br label %and.phi, !dbg !199

and.phi:                                          ; preds = %expr_block.exit, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %23, %expr_block.exit ], !dbg !199
  br i1 %val, label %loop.body21, label %loop.exit22, !dbg !199

loop.body21:                                      ; preds = %and.phi
  %24 = load i64, ptr %start, align 8, !dbg !200
  %add = add i64 %24, 1, !dbg !200
  store i64 %add, ptr %start, align 8, !dbg !200
  br label %loop.cond, !dbg !200

loop.exit22:                                      ; preds = %and.phi
  %25 = load i64, ptr %start, align 8, !dbg !201
  %26 = load i64, ptr %len, align 8, !dbg !202
  %eq23 = icmp eq i64 %25, %26, !dbg !201
  br i1 %eq23, label %if.then24, label %if.exit43, !dbg !201

if.then24:                                        ; preds = %loop.exit22
  %27 = load %"char[]", ptr %self, align 8, !dbg !203
  %28 = extractvalue %"char[]" %27, 0, !dbg !203
  %29 = extractvalue %"char[]" %27, 1, !dbg !203
  %gt = icmp sgt i64 0, %29, !dbg !203
  %30 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !203
  br i1 %30, label %panic25, label %checkok32, !dbg !203

checkok32:                                        ; preds = %if.then24
  %lt33 = icmp slt i64 %29, 0, !dbg !203
  %31 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !203
  br i1 %31, label %panic34, label %checkok41, !dbg !203

checkok41:                                        ; preds = %checkok32
  %32 = insertvalue %"char[]" undef, ptr %28, 0, !dbg !203
  %33 = insertvalue %"char[]" %32, i64 0, 1, !dbg !203
  store %"char[]" %33, ptr %taddr42, align 8
  %34 = load { ptr, i64 }, ptr %taddr42, align 8
  ret { ptr, i64 } %34

if.exit43:                                        ; preds = %loop.exit22
  %35 = load %"char[]", ptr %self, align 8, !dbg !204
  %36 = extractvalue %"char[]" %35, 0, !dbg !204
  %37 = load i64, ptr %start, align 8, !dbg !205
  %38 = extractvalue %"char[]" %35, 1, !dbg !205
  %gt44 = icmp ugt i64 %37, %38, !dbg !205
  %39 = call i1 @llvm.expect.i1(i1 %gt44, i1 false), !dbg !205
  br i1 %39, label %panic45, label %checkok52, !dbg !205

checkok52:                                        ; preds = %if.exit43
  %size = sub i64 %38, %37, !dbg !204
  %ptradd53 = getelementptr inbounds i8, ptr %36, i64 %37, !dbg !204
  %40 = insertvalue %"char[]" undef, ptr %ptradd53, 0, !dbg !204
  %41 = insertvalue %"char[]" %40, i64 %size, 1, !dbg !204
  store %"char[]" %41, ptr %taddr54, align 8
  %42 = load { ptr, i64 }, ptr %taddr54, align 8
  ret { ptr, i64 } %42

panic:                                            ; preds = %and.rhs
  store i64 %7, ptr %taddr, align 8
  %43 = insertvalue %any undef, ptr %taddr, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr4, align 8
  %45 = insertvalue %any undef, ptr %taddr4, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %44, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %46, ptr %ptradd5, align 16
  %47 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %47, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.29, i64 9, i32 215, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !186
  unreachable, !dbg !186

panic12:                                          ; preds = %loop.body
  store i64 %14, ptr %taddr13, align 8
  %48 = insertvalue %any undef, ptr %taddr13, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr14, align 8
  %50 = insertvalue %any undef, ptr %taddr14, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %49, ptr %varargslots15, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots15, i64 16
  store %any %51, ptr %ptradd16, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots15, 0
  %"$$temp17" = insertvalue %"any[]" %52, i64 2, 1
  store %"any[]" %"$$temp17", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.29, i64 9, i32 128, ptr byval(%"any[]") align 8 %indirectarg18) #6, !dbg !195
  unreachable, !dbg !195

panic25:                                          ; preds = %if.then24
  store i64 %29, ptr %taddr26, align 8
  %53 = insertvalue %any undef, ptr %taddr26, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %55 = insertvalue %any undef, ptr %taddr27, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %54, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %56, ptr %ptradd29, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.29, i64 9, i32 216, ptr byval(%"any[]") align 8 %indirectarg31) #6, !dbg !203
  unreachable, !dbg !203

panic34:                                          ; preds = %checkok32
  store i64 -1, ptr %taddr35, align 8
  %58 = insertvalue %any undef, ptr %taddr35, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %29, ptr %taddr36, align 8
  %60 = insertvalue %any undef, ptr %taddr36, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %59, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %61, ptr %ptradd38, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.29, i64 9, i32 216, ptr byval(%"any[]") align 8 %indirectarg40) #6, !dbg !203
  unreachable, !dbg !203

panic45:                                          ; preds = %if.exit43
  store i64 %38, ptr %taddr46, align 8
  %63 = insertvalue %any undef, ptr %taddr46, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr47, align 8
  %65 = insertvalue %any undef, ptr %taddr47, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %64, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %66, ptr %ptradd49, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.29, i64 9, i32 217, ptr byval(%"any[]") align 8 %indirectarg51) #6, !dbg !204
  unreachable, !dbg !204
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.trim_right(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !206 {
entry:
  %self = alloca %"char[]", align 8
  %to_trim = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %taddr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots8 = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %set = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %.anon = alloca i64, align 8
  %ch = alloca i8, align 1
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr42 = alloca i64, align 8
  %varargslots43 = alloca [1 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %taddr57 = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !207, !DIExpression(), !208)
  store ptr %2, ptr %to_trim, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %to_trim, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %to_trim, !209, !DIExpression(), !210)
    #dbg_declare(ptr %len, !211, !DIExpression(), !212)
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !213
  %4 = load i64, ptr %ptradd2, align 8, !dbg !213
  store i64 %4, ptr %len, align 8, !dbg !213
  br label %loop.cond, !dbg !214

loop.cond:                                        ; preds = %loop.body28, %entry
  %5 = load i64, ptr %len, align 8, !dbg !215
  %lt = icmp ult i64 0, %5, !dbg !215
  br i1 %lt, label %and.rhs, label %and.phi, !dbg !215

and.rhs:                                          ; preds = %loop.cond
  %ptradd3 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !217
  %6 = load i64, ptr %ptradd3, align 8, !dbg !217
  %7 = load ptr, ptr %self, align 8, !dbg !217
  %8 = load i64, ptr %len, align 8, !dbg !218
  %sub = sub i64 %8, 1, !dbg !218
  %lt4 = icmp slt i64 %sub, 0, !dbg !218
  %9 = call i1 @llvm.expect.i1(i1 %lt4, i1 false), !dbg !218
  br i1 %9, label %panic, label %checkok, !dbg !218

checkok:                                          ; preds = %and.rhs
  %ge = icmp sge i64 %sub, %6, !dbg !218
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !218
  br i1 %10, label %panic5, label %checkok12, !dbg !218

checkok12:                                        ; preds = %checkok
  %ptradd13 = getelementptr inbounds i8, ptr %7, i64 %sub, !dbg !218
  %11 = load i8, ptr %ptradd13, align 1
  store i8 %11, ptr %c, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %set, ptr align 8 %to_trim, i32 16, i1 false)
  %ptradd14 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !219
  %12 = load i64, ptr %ptradd14, align 8, !dbg !219
    #dbg_declare(ptr %.anon, !223, !DIExpression(), !219)
  store i64 0, ptr %.anon, align 8, !dbg !219
  br label %loop.cond15, !dbg !219

loop.cond15:                                      ; preds = %if.exit, %checkok12
  %13 = load i64, ptr %.anon, align 8, !dbg !219
  %lt16 = icmp ult i64 %13, %12, !dbg !219
  br i1 %lt16, label %loop.body, label %loop.exit, !dbg !219

loop.body:                                        ; preds = %loop.cond15
    #dbg_declare(ptr %ch, !224, !DIExpression(), !226)
  %ptradd17 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !227
  %14 = load i64, ptr %ptradd17, align 8, !dbg !227
  %15 = load ptr, ptr %set, align 8, !dbg !227
  %16 = load i64, ptr %.anon, align 8, !dbg !227
  %ge18 = icmp uge i64 %16, %14, !dbg !227
  %17 = call i1 @llvm.expect.i1(i1 %ge18, i1 false), !dbg !227
  br i1 %17, label %panic19, label %checkok26, !dbg !227

checkok26:                                        ; preds = %loop.body
  %ptradd27 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !227
  %18 = load i8, ptr %ptradd27, align 1, !dbg !227
  store i8 %18, ptr %ch, align 1, !dbg !227
  %19 = load i8, ptr %ch, align 1, !dbg !228
  %20 = load i8, ptr %c, align 1, !dbg !229
  %eq = icmp eq i8 %19, %20, !dbg !228
  br i1 %eq, label %if.then, label %if.exit, !dbg !228

if.then:                                          ; preds = %checkok26
  store i8 1, ptr %blockret, align 1, !dbg !230
  br label %expr_block.exit, !dbg !230

if.exit:                                          ; preds = %checkok26
  %21 = load i64, ptr %.anon, align 8, !dbg !219
  %addnuw = add nuw i64 %21, 1, !dbg !219
  store i64 %addnuw, ptr %.anon, align 8, !dbg !219
  br label %loop.cond15, !dbg !219

loop.exit:                                        ; preds = %loop.cond15
  store i8 0, ptr %blockret, align 1, !dbg !231
  br label %expr_block.exit, !dbg !231

expr_block.exit:                                  ; preds = %loop.exit, %if.then
  %22 = load i8, ptr %blockret, align 1, !dbg !231
  %23 = trunc i8 %22 to i1, !dbg !231
  br label %and.phi, !dbg !231

and.phi:                                          ; preds = %expr_block.exit, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %23, %expr_block.exit ], !dbg !231
  br i1 %val, label %loop.body28, label %loop.exit30, !dbg !231

loop.body28:                                      ; preds = %and.phi
  %24 = load i64, ptr %len, align 8, !dbg !232
  %sub29 = sub i64 %24, 1, !dbg !232
  store i64 %sub29, ptr %len, align 8, !dbg !232
  br label %loop.cond, !dbg !232

loop.exit30:                                      ; preds = %and.phi
  %25 = load %"char[]", ptr %self, align 8, !dbg !233
  %26 = extractvalue %"char[]" %25, 0, !dbg !233
  %27 = extractvalue %"char[]" %25, 1, !dbg !234
  %gt = icmp ugt i64 0, %27, !dbg !234
  %28 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !234
  br i1 %28, label %panic31, label %checkok38, !dbg !234

checkok38:                                        ; preds = %loop.exit30
  %29 = load i64, ptr %len, align 8, !dbg !235
  %add = add i64 0, %29, !dbg !235
  %gt39 = icmp ugt i64 0, %add, !dbg !235
  %sub40 = sub i64 %add, 0, !dbg !235
  %30 = call i1 @llvm.expect.i1(i1 %gt39, i1 false), !dbg !235
  br i1 %30, label %panic41, label %checkok46, !dbg !235

checkok46:                                        ; preds = %checkok38
  %lt47 = icmp ult i64 %27, %add, !dbg !233
  %sub48 = sub i64 %add, 1, !dbg !233
  %31 = call i1 @llvm.expect.i1(i1 %lt47, i1 false), !dbg !233
  br i1 %31, label %panic49, label %checkok56, !dbg !233

checkok56:                                        ; preds = %checkok46
  %size = sub i64 %add, 0, !dbg !233
  %32 = insertvalue %"char[]" undef, ptr %26, 0, !dbg !233
  %33 = insertvalue %"char[]" %32, i64 %size, 1, !dbg !233
  store %"char[]" %33, ptr %taddr57, align 8
  %34 = load { ptr, i64 }, ptr %taddr57, align 8
  ret { ptr, i64 } %34

panic:                                            ; preds = %and.rhs
  store i64 %sub, ptr %taddr, align 8
  %35 = insertvalue %any undef, ptr %taddr, 0
  %36 = insertvalue %any %35, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %36, ptr %varargslots, align 16
  %37 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %37, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.16, i64 9, ptr @.func.31, i64 10, i32 231, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !218
  unreachable, !dbg !218

panic5:                                           ; preds = %checkok
  store i64 %6, ptr %taddr6, align 8
  %38 = insertvalue %any undef, ptr %taddr6, 0
  %39 = insertvalue %any %38, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub, ptr %taddr7, align 8
  %40 = insertvalue %any undef, ptr %taddr7, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %39, ptr %varargslots8, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots8, i64 16
  store %any %41, ptr %ptradd9, align 16
  %42 = insertvalue %"any[]" undef, ptr %varargslots8, 0
  %"$$temp10" = insertvalue %"any[]" %42, i64 2, 1
  store %"any[]" %"$$temp10", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.31, i64 10, i32 231, ptr byval(%"any[]") align 8 %indirectarg11) #6, !dbg !218
  unreachable, !dbg !218

panic19:                                          ; preds = %loop.body
  store i64 %14, ptr %taddr20, align 8
  %43 = insertvalue %any undef, ptr %taddr20, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr21, align 8
  %45 = insertvalue %any undef, ptr %taddr21, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %44, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %46, ptr %ptradd23, align 16
  %47 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %47, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.31, i64 10, i32 128, ptr byval(%"any[]") align 8 %indirectarg25) #6, !dbg !227
  unreachable, !dbg !227

panic31:                                          ; preds = %loop.exit30
  store i64 %27, ptr %taddr32, align 8
  %48 = insertvalue %any undef, ptr %taddr32, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr33, align 8
  %50 = insertvalue %any undef, ptr %taddr33, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %49, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %51, ptr %ptradd35, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %52, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.31, i64 10, i32 232, ptr byval(%"any[]") align 8 %indirectarg37) #6, !dbg !233
  unreachable, !dbg !233

panic41:                                          ; preds = %checkok38
  store i64 %sub40, ptr %taddr42, align 8
  %53 = insertvalue %any undef, ptr %taddr42, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots43, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots43, 0
  %"$$temp44" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.31, i64 10, i32 232, ptr byval(%"any[]") align 8 %indirectarg45) #6, !dbg !233
  unreachable, !dbg !233

panic49:                                          ; preds = %checkok46
  store i64 %sub48, ptr %taddr50, align 8
  %56 = insertvalue %any undef, ptr %taddr50, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr51, align 8
  %58 = insertvalue %any undef, ptr %taddr51, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %57, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %59, ptr %ptradd53, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.31, i64 10, i32 232, ptr byval(%"any[]") align 8 %indirectarg55) #6, !dbg !233
  unreachable, !dbg !233
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.core.String.starts_with(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !236 {
entry:
  %self = alloca %"char[]", align 8
  %prefix = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [1 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !239, !DIExpression(), !240)
  store ptr %2, ptr %prefix, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %prefix, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %prefix, !241, !DIExpression(), !242)
  %ptradd2 = getelementptr inbounds i8, ptr %prefix, i64 8, !dbg !243
  %4 = load i64, ptr %ptradd2, align 8, !dbg !243
  %ptradd3 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !244
  %5 = load i64, ptr %ptradd3, align 8, !dbg !244
  %gt = icmp ugt i64 %4, %5, !dbg !243
  br i1 %gt, label %if.then, label %if.exit, !dbg !243

if.then:                                          ; preds = %entry
  ret i8 0, !dbg !245

if.exit:                                          ; preds = %entry
  %ptradd4 = getelementptr inbounds i8, ptr %prefix, i64 8, !dbg !246
  %6 = load i64, ptr %ptradd4, align 8, !dbg !246
  %i2nb = icmp eq i64 %6, 0, !dbg !246
  br i1 %i2nb, label %if.then5, label %if.exit6, !dbg !246

if.then5:                                         ; preds = %if.exit
  ret i8 1, !dbg !247

if.exit6:                                         ; preds = %if.exit
  %7 = load %"char[]", ptr %self, align 8, !dbg !248
  %8 = extractvalue %"char[]" %7, 0, !dbg !248
  %9 = extractvalue %"char[]" %7, 1, !dbg !249
  %gt7 = icmp ugt i64 0, %9, !dbg !249
  %10 = call i1 @llvm.expect.i1(i1 %gt7, i1 false), !dbg !249
  br i1 %10, label %panic, label %checkok, !dbg !249

checkok:                                          ; preds = %if.exit6
  %ptradd10 = getelementptr inbounds i8, ptr %prefix, i64 8, !dbg !250
  %11 = load i64, ptr %ptradd10, align 8, !dbg !250
  %add = add i64 0, %11, !dbg !250
  %gt11 = icmp ugt i64 0, %add, !dbg !250
  %sub = sub i64 %add, 0, !dbg !250
  %12 = call i1 @llvm.expect.i1(i1 %gt11, i1 false), !dbg !250
  br i1 %12, label %panic12, label %checkok17, !dbg !250

checkok17:                                        ; preds = %checkok
  %lt = icmp ult i64 %9, %add, !dbg !248
  %sub18 = sub i64 %add, 1, !dbg !248
  %13 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !248
  br i1 %13, label %panic19, label %checkok26, !dbg !248

checkok26:                                        ; preds = %checkok17
  %size = sub i64 %add, 0, !dbg !248
  %14 = insertvalue %"char[]" undef, ptr %8, 0, !dbg !248
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !248
  %16 = load %"char[]", ptr %prefix, align 8, !dbg !251
  %17 = extractvalue %"char[]" %15, 1, !dbg !248
  %18 = extractvalue %"char[]" %16, 1, !dbg !248
  %19 = extractvalue %"char[]" %15, 0, !dbg !248
  %20 = extractvalue %"char[]" %16, 0, !dbg !248
  %eq = icmp eq i64 %17, %18, !dbg !248
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !248

slice_cmp_values:                                 ; preds = %checkok26
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %21 = load i64, ptr %cmp.idx, align 8
  %lt27 = icmp slt i64 %21, %17
  br i1 %lt27, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd28 = getelementptr inbounds i8, ptr %19, i64 %21
  %ptradd29 = getelementptr inbounds i8, ptr %20, i64 %21
  %22 = load i8, ptr %ptradd28, align 1
  %23 = load i8, ptr %ptradd29, align 1
  %eq30 = icmp eq i8 %22, %23
  %24 = add i64 %21, 1
  store i64 %24, ptr %cmp.idx, align 8
  br i1 %eq30, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok26
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok26 ], [ false, %slice_loop_comparison ]
  %25 = zext i1 %slice_cmp_phi to i8
  ret i8 %25

panic:                                            ; preds = %if.exit6
  store i64 %9, ptr %taddr, align 8
  %26 = insertvalue %any undef, ptr %taddr, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %28 = insertvalue %any undef, ptr %taddr8, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %27, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %29, ptr %ptradd9, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.32, i64 11, i32 247, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !248
  unreachable, !dbg !248

panic12:                                          ; preds = %checkok
  store i64 %sub, ptr %taddr13, align 8
  %31 = insertvalue %any undef, ptr %taddr13, 0
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %32, ptr %varargslots14, align 16
  %33 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp15" = insertvalue %"any[]" %33, i64 1, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.32, i64 11, i32 247, ptr byval(%"any[]") align 8 %indirectarg16) #6, !dbg !248
  unreachable, !dbg !248

panic19:                                          ; preds = %checkok17
  store i64 %sub18, ptr %taddr20, align 8
  %34 = insertvalue %any undef, ptr %taddr20, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr21, align 8
  %36 = insertvalue %any undef, ptr %taddr21, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %35, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %37, ptr %ptradd23, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.32, i64 11, i32 247, ptr byval(%"any[]") align 8 %indirectarg25) #6, !dbg !248
  unreachable, !dbg !248
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.core.String.ends_with(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !252 {
entry:
  %self = alloca %"char[]", align 8
  %suffix = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !253, !DIExpression(), !254)
  store ptr %2, ptr %suffix, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %suffix, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %suffix, !255, !DIExpression(), !256)
  %ptradd2 = getelementptr inbounds i8, ptr %suffix, i64 8, !dbg !257
  %4 = load i64, ptr %ptradd2, align 8, !dbg !257
  %ptradd3 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !258
  %5 = load i64, ptr %ptradd3, align 8, !dbg !258
  %gt = icmp ugt i64 %4, %5, !dbg !257
  br i1 %gt, label %if.then, label %if.exit, !dbg !257

if.then:                                          ; preds = %entry
  ret i8 0, !dbg !259

if.exit:                                          ; preds = %entry
  %ptradd4 = getelementptr inbounds i8, ptr %suffix, i64 8, !dbg !260
  %6 = load i64, ptr %ptradd4, align 8, !dbg !260
  %i2nb = icmp eq i64 %6, 0, !dbg !260
  br i1 %i2nb, label %if.then5, label %if.exit6, !dbg !260

if.then5:                                         ; preds = %if.exit
  ret i8 1, !dbg !261

if.exit6:                                         ; preds = %if.exit
  %7 = load %"char[]", ptr %self, align 8, !dbg !262
  %8 = extractvalue %"char[]" %7, 0, !dbg !262
  %ptradd7 = getelementptr inbounds i8, ptr %suffix, i64 8, !dbg !263
  %9 = load i64, ptr %ptradd7, align 8, !dbg !263
  %10 = extractvalue %"char[]" %7, 1, !dbg !263
  %sub = sub i64 %10, %9, !dbg !263
  %gt8 = icmp ugt i64 %sub, %10, !dbg !263
  %11 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !263
  br i1 %11, label %panic, label %checkok, !dbg !263

checkok:                                          ; preds = %if.exit6
  %size = sub i64 %10, %sub, !dbg !262
  %ptradd11 = getelementptr inbounds i8, ptr %8, i64 %sub, !dbg !262
  %12 = insertvalue %"char[]" undef, ptr %ptradd11, 0, !dbg !262
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !262
  %14 = load %"char[]", ptr %suffix, align 8, !dbg !264
  %15 = extractvalue %"char[]" %13, 1, !dbg !262
  %16 = extractvalue %"char[]" %14, 1, !dbg !262
  %17 = extractvalue %"char[]" %13, 0, !dbg !262
  %18 = extractvalue %"char[]" %14, 0, !dbg !262
  %eq = icmp eq i64 %15, %16, !dbg !262
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !262

slice_cmp_values:                                 ; preds = %checkok
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %19 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %19, %15
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd12 = getelementptr inbounds i8, ptr %17, i64 %19
  %ptradd13 = getelementptr inbounds i8, ptr %18, i64 %19
  %20 = load i8, ptr %ptradd12, align 1
  %21 = load i8, ptr %ptradd13, align 1
  %eq14 = icmp eq i8 %20, %21
  %22 = add i64 %19, 1
  store i64 %22, ptr %cmp.idx, align 8
  br i1 %eq14, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok ], [ false, %slice_loop_comparison ]
  %23 = zext i1 %slice_cmp_phi to i8
  ret i8 %23

panic:                                            ; preds = %if.exit6
  store i64 %10, ptr %taddr, align 8
  %24 = insertvalue %any undef, ptr %taddr, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr9, align 8
  %26 = insertvalue %any undef, ptr %taddr9, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %25, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %27, ptr %ptradd10, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.33, i64 9, i32 262, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !262
  unreachable, !dbg !262
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.strip(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !265 {
entry:
  %self = alloca %"char[]", align 8
  %prefix = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !266, !DIExpression(), !267)
  store ptr %2, ptr %prefix, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %prefix, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %prefix, !268, !DIExpression(), !269)
  %ptradd2 = getelementptr inbounds i8, ptr %prefix, i64 8, !dbg !270
  %4 = load i64, ptr %ptradd2, align 8, !dbg !270
  %i2nb = icmp eq i64 %4, 0, !dbg !270
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !270

or.rhs:                                           ; preds = %entry
  %lo = load ptr, ptr %self, align 8, !dbg !271
  %ptradd3 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !271
  %hi = load i64, ptr %ptradd3, align 8, !dbg !271
  %lo4 = load ptr, ptr %prefix, align 8, !dbg !271
  %ptradd5 = getelementptr inbounds i8, ptr %prefix, i64 8, !dbg !271
  %hi6 = load i64, ptr %ptradd5, align 8, !dbg !271
  %5 = call i8 @std.core.String.starts_with(ptr %lo, i64 %hi, ptr %lo4, i64 %hi6), !dbg !272
  %6 = trunc i8 %5 to i1, !dbg !272
  %not = xor i1 %6, true, !dbg !272
  br label %or.phi, !dbg !272

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %not, %or.rhs ], !dbg !272
  br i1 %val, label %if.then, label %if.exit, !dbg !272

if.then:                                          ; preds = %or.phi
  %7 = load { ptr, i64 }, ptr %self, align 8, !dbg !273
  ret { ptr, i64 } %7, !dbg !273

if.exit:                                          ; preds = %or.phi
  %8 = load %"char[]", ptr %self, align 8, !dbg !274
  %9 = extractvalue %"char[]" %8, 0, !dbg !274
  %ptradd7 = getelementptr inbounds i8, ptr %prefix, i64 8, !dbg !275
  %10 = load i64, ptr %ptradd7, align 8, !dbg !275
  %11 = extractvalue %"char[]" %8, 1, !dbg !275
  %gt = icmp ugt i64 %10, %11, !dbg !275
  %12 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !275
  br i1 %12, label %panic, label %checkok, !dbg !275

checkok:                                          ; preds = %if.exit
  %size = sub i64 %11, %10, !dbg !274
  %ptradd10 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !274
  %13 = insertvalue %"char[]" undef, ptr %ptradd10, 0, !dbg !274
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !274
  store %"char[]" %14, ptr %taddr11, align 8
  %15 = load { ptr, i64 }, ptr %taddr11, align 8
  ret { ptr, i64 } %15

panic:                                            ; preds = %if.exit
  store i64 %11, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr8, align 8
  %18 = insertvalue %any undef, ptr %taddr8, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd9, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.34, i64 5, i32 276, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !274
  unreachable, !dbg !274
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.strip_end(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !276 {
entry:
  %self = alloca %"char[]", align 8
  %suffix = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %varargslots15 = alloca [1 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr28 = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !277, !DIExpression(), !278)
  store ptr %2, ptr %suffix, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %suffix, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %suffix, !279, !DIExpression(), !280)
  %ptradd2 = getelementptr inbounds i8, ptr %suffix, i64 8, !dbg !281
  %4 = load i64, ptr %ptradd2, align 8, !dbg !281
  %i2nb = icmp eq i64 %4, 0, !dbg !281
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !281

or.rhs:                                           ; preds = %entry
  %lo = load ptr, ptr %self, align 8, !dbg !282
  %ptradd3 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !282
  %hi = load i64, ptr %ptradd3, align 8, !dbg !282
  %lo4 = load ptr, ptr %suffix, align 8, !dbg !282
  %ptradd5 = getelementptr inbounds i8, ptr %suffix, i64 8, !dbg !282
  %hi6 = load i64, ptr %ptradd5, align 8, !dbg !282
  %5 = call i8 @std.core.String.ends_with(ptr %lo, i64 %hi, ptr %lo4, i64 %hi6), !dbg !283
  %6 = trunc i8 %5 to i1, !dbg !283
  %not = xor i1 %6, true, !dbg !283
  br label %or.phi, !dbg !283

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %not, %or.rhs ], !dbg !283
  br i1 %val, label %if.then, label %if.exit, !dbg !283

if.then:                                          ; preds = %or.phi
  %7 = load { ptr, i64 }, ptr %self, align 8, !dbg !284
  ret { ptr, i64 } %7, !dbg !284

if.exit:                                          ; preds = %or.phi
  %8 = load %"char[]", ptr %self, align 8, !dbg !285
  %9 = extractvalue %"char[]" %8, 0, !dbg !285
  %10 = extractvalue %"char[]" %8, 1, !dbg !286
  %gt = icmp ugt i64 0, %10, !dbg !286
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !286
  br i1 %11, label %panic, label %checkok, !dbg !286

checkok:                                          ; preds = %if.exit
  %ptradd9 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !287
  %12 = load i64, ptr %ptradd9, align 8, !dbg !287
  %ptradd10 = getelementptr inbounds i8, ptr %suffix, i64 8, !dbg !288
  %13 = load i64, ptr %ptradd10, align 8, !dbg !288
  %sub = sub i64 %12, %13, !dbg !287
  %add = add i64 0, %sub, !dbg !287
  %gt11 = icmp ugt i64 0, %add, !dbg !287
  %sub12 = sub i64 %add, 0, !dbg !287
  %14 = call i1 @llvm.expect.i1(i1 %gt11, i1 false), !dbg !287
  br i1 %14, label %panic13, label %checkok18, !dbg !287

checkok18:                                        ; preds = %checkok
  %lt = icmp ult i64 %10, %add, !dbg !285
  %sub19 = sub i64 %add, 1, !dbg !285
  %15 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !285
  br i1 %15, label %panic20, label %checkok27, !dbg !285

checkok27:                                        ; preds = %checkok18
  %size = sub i64 %add, 0, !dbg !285
  %16 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !285
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !285
  store %"char[]" %17, ptr %taddr28, align 8
  %18 = load { ptr, i64 }, ptr %taddr28, align 8
  ret { ptr, i64 } %18

panic:                                            ; preds = %if.exit
  store i64 %10, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %21 = insertvalue %any undef, ptr %taddr7, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %20, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd8, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.35, i64 9, i32 291, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !285
  unreachable, !dbg !285

panic13:                                          ; preds = %checkok
  store i64 %sub12, ptr %taddr14, align 8
  %24 = insertvalue %any undef, ptr %taddr14, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %25, ptr %varargslots15, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots15, 0
  %"$$temp16" = insertvalue %"any[]" %26, i64 1, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.35, i64 9, i32 291, ptr byval(%"any[]") align 8 %indirectarg17) #6, !dbg !285
  unreachable, !dbg !285

panic20:                                          ; preds = %checkok18
  store i64 %sub19, ptr %taddr21, align 8
  %27 = insertvalue %any undef, ptr %taddr21, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr22, align 8
  %29 = insertvalue %any undef, ptr %taddr22, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %30, ptr %ptradd24, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.35, i64 9, i32 291, ptr byval(%"any[]") align 8 %indirectarg26) #6, !dbg !285
  unreachable, !dbg !285
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.split(ptr %0, i64 %1, i64 %2, ptr %3, ptr %4, i64 %5, i64 %6, i8 zeroext %7) #0 comdat !dbg !289 {
entry:
  %self = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %delimiter = alloca %"char[]", align 8
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %capacity = alloca i64, align 8
  %i = alloca i64, align 8
  %holder = alloca ptr, align 8
  %allocator4 = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator5 = alloca %any, align 8
  %elements6 = alloca i64, align 8
  %allocator7 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %taddr19 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %varargslots21 = alloca [1 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %no_more = alloca i8, align 1
  %index = alloca i64, align 8
  %index.f = alloca i64, align 8
  %retparam29 = alloca i64, align 8
  %res = alloca %"char[]", align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %varargslots48 = alloca [1 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %taddr67 = alloca i64, align 8
  %taddr68 = alloca i64, align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %allocator87 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %error_var89 = alloca i64, align 8
  %allocator90 = alloca %any, align 8
  %ptr91 = alloca ptr, align 8
  %new_size92 = alloca i64, align 8
  %blockret93 = alloca ptr, align 8
  %allocator96 = alloca %any, align 8
  %ptr97 = alloca ptr, align 8
  %.inlinecache105 = alloca ptr, align 8
  %.cachedtype106 = alloca ptr, align 8
  %x120 = alloca i64, align 8
  %.inlinecache138 = alloca ptr, align 8
  %.cachedtype139 = alloca ptr, align 8
  %retparam148 = alloca ptr, align 8
  %x154 = alloca i64, align 8
  %.inlinecache175 = alloca ptr, align 8
  %.cachedtype176 = alloca ptr, align 8
  %retparam185 = alloca ptr, align 8
  %varargslots191 = alloca [1 x %any], align 16
  %indirectarg193 = alloca %"any[]", align 8
  %taddr201 = alloca i64, align 8
  %varargslots202 = alloca [1 x %any], align 16
  %indirectarg204 = alloca %"any[]", align 8
  %taddr213 = alloca %"char[][]", align 8
  store ptr null, ptr %.cachedtype176, align 8
  store ptr null, ptr %.cachedtype139, align 8
  store ptr null, ptr %.cachedtype106, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !292, !DIExpression(), !293)
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !294, !DIExpression(), !295)
  store ptr %4, ptr %delimiter, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %delimiter, i64 8
  store i64 %5, ptr %ptradd2, align 8
    #dbg_declare(ptr %delimiter, !296, !DIExpression(), !297)
  store i64 %6, ptr %max, align 8
    #dbg_declare(ptr %max, !298, !DIExpression(), !299)
  store i8 %7, ptr %skip_empty, align 1
    #dbg_declare(ptr %skip_empty, !300, !DIExpression(), !301)
  %ptradd3 = getelementptr inbounds i8, ptr %delimiter, i64 8, !dbg !302
  %8 = load i64, ptr %ptradd3, align 8, !dbg !302
  %lt = icmp ult i64 0, %8, !dbg !302
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !302

assert_fail:                                      ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !302
  call void %9(ptr @.panic_msg.36, i64 89, ptr @.file.16, i64 9, ptr @.func.37, i64 5, i32 303) #6, !dbg !302
  unreachable, !dbg !302

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %capacity, !304, !DIExpression(), !305)
  store i64 16, ptr %capacity, align 8, !dbg !306
    #dbg_declare(ptr %i, !307, !DIExpression(), !308)
  store i64 0, ptr %i, align 8, !dbg !309
    #dbg_declare(ptr %holder, !310, !DIExpression(), !311)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator, i32 16, i1 false)
  %10 = load i64, ptr %capacity, align 8
  store i64 %10, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator4, i32 16, i1 false)
  %11 = load i64, ptr %elements, align 8
  store i64 %11, ptr %elements6, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator7, ptr align 8 %allocator5, i32 16, i1 false)
  %12 = load i64, ptr %elements6, align 8, !dbg !312
  %mul = mul i64 16, %12, !dbg !318
  store i64 %mul, ptr %size, align 8
  %13 = load i64, ptr %size, align 8, !dbg !319
  %i2nb = icmp eq i64 %13, 0, !dbg !319
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !319

if.then:                                          ; preds = %assert_ok
  store ptr null, ptr %blockret, align 8, !dbg !322
  br label %expr_block.exit, !dbg !322

if.exit:                                          ; preds = %assert_ok
  %14 = load i64, ptr %size, align 8, !dbg !323
  br i1 true, label %or.phi, label %or.rhs, !dbg !324

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %15 = load i64, ptr %x, align 8, !dbg !325
  %neq = icmp ne i64 0, %15, !dbg !325
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !325

and.rhs:                                          ; preds = %or.rhs
  %16 = load i64, ptr %x, align 8, !dbg !329
  %17 = load i64, ptr %x, align 8, !dbg !330
  %sub = sub i64 %17, 1, !dbg !330
  %and = and i64 %16, %sub, !dbg !329
  %eq = icmp eq i64 %and, 0, !dbg !329
  br label %and.phi, !dbg !329

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !329
  br label %or.phi, !dbg !329

or.phi:                                           ; preds = %and.phi, %if.exit
  %val8 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !329
  br i1 %val8, label %assert_ok10, label %assert_fail9, !dbg !329

assert_fail9:                                     ; preds = %or.phi
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !331
  call void %18(ptr @.panic_msg, i64 65, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 85) #6, !dbg !331
  unreachable, !dbg !331

assert_ok10:                                      ; preds = %or.phi
  br i1 true, label %assert_ok12, label %assert_fail11, !dbg !331

assert_fail11:                                    ; preds = %assert_ok10
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !331
  call void %19(ptr @.panic_msg.10, i64 80, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 85) #6, !dbg !331
  unreachable, !dbg !331

assert_ok12:                                      ; preds = %assert_ok10
  %lt13 = icmp ult i64 0, %14, !dbg !331
  br i1 %lt13, label %assert_ok15, label %assert_fail14, !dbg !331

assert_fail14:                                    ; preds = %assert_ok12
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !331
  call void %20(ptr @.panic_msg.11, i64 59, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 85) #6, !dbg !331
  unreachable, !dbg !331

assert_ok15:                                      ; preds = %assert_ok12
  %ptradd16 = getelementptr inbounds i8, ptr %allocator7, i64 8, !dbg !331
  %21 = load i64, ptr %ptradd16, align 8, !dbg !331
  %22 = inttoptr i64 %21 to ptr, !dbg !331
  %type = load ptr, ptr %.cachedtype, align 8
  %23 = icmp eq ptr %22, %type
  br i1 %23, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok15
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 16
  %24 = load ptr, ptr %ptradd17, align 8
  %25 = call ptr @.dyn_search(ptr %24, ptr @"$sel.acquire")
  store ptr %25, ptr %.inlinecache, align 8
  store ptr %22, ptr %.cachedtype, align 8
  br label %26

cache_hit:                                        ; preds = %assert_ok15
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %26

26:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %25, %cache_miss ]
  %27 = icmp eq ptr %fn_phi, null
  br i1 %27, label %missing_function, label %match

missing_function:                                 ; preds = %26
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !331
  call void %28(ptr @.panic_msg.12, i64 44, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 85) #6, !dbg !331
  unreachable, !dbg !331

match:                                            ; preds = %26
  %29 = load ptr, ptr %allocator7, align 8
  %30 = call i64 %fn_phi(ptr %retparam, ptr %29, i64 %14, i32 0, i64 0), !dbg !331
  %not_err = icmp eq i64 %30, 0, !dbg !331
  %31 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !331
  br i1 %31, label %after_check, label %assign_optional, !dbg !331

assign_optional:                                  ; preds = %match
  store i64 %30, ptr %error_var, align 8, !dbg !331
  br label %panic_block, !dbg !331

after_check:                                      ; preds = %match
  %32 = load ptr, ptr %retparam, align 8, !dbg !331
  store ptr %32, ptr %blockret, align 8, !dbg !331
  br label %expr_block.exit, !dbg !331

expr_block.exit:                                  ; preds = %after_check, %if.then
  %33 = load ptr, ptr %blockret, align 8, !dbg !331
  store ptr %33, ptr %taddr, align 8
  %34 = load ptr, ptr %taddr, align 8
  %35 = load i64, ptr %elements6, align 8, !dbg !332
  %add = add i64 0, %35, !dbg !332
  %gt = icmp ugt i64 0, %add, !dbg !332
  %sub18 = sub i64 %add, 0, !dbg !332
  %36 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !332
  br i1 %36, label %panic, label %checkok, !dbg !332

checkok:                                          ; preds = %expr_block.exit
  %size20 = sub i64 %add, 0, !dbg !333
  %37 = insertvalue %"char[][]" undef, ptr %34, 0, !dbg !333
  %38 = insertvalue %"char[][]" %37, i64 %size20, 1, !dbg !333
  br label %noerr_block, !dbg !333

panic_block:                                      ; preds = %assign_optional
  %39 = insertvalue %any undef, ptr %error_var, 0, !dbg !333
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !333
  store %any %40, ptr %varargslots21, align 16
  %41 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp22" = insertvalue %"any[]" %41, i64 1, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.14, i64 36, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 286, ptr byval(%"any[]") align 8 %indirectarg23) #6, !dbg !315
  unreachable, !dbg !315

noerr_block:                                      ; preds = %checkok
  %42 = extractvalue %"char[][]" %38, 0, !dbg !315
  store ptr %42, ptr %holder, align 8, !dbg !315
    #dbg_declare(ptr %no_more, !334, !DIExpression(), !335)
  store i8 0, ptr %no_more, align 1, !dbg !336
  br label %loop.cond, !dbg !337

loop.cond:                                        ; preds = %if.exit195, %if.then82, %noerr_block
  %43 = load i8, ptr %no_more, align 1, !dbg !338
  %44 = trunc i8 %43 to i1, !dbg !338
  %not = xor i1 %44, true, !dbg !338
  br i1 %not, label %loop.body, label %loop.exit, !dbg !338

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %index, !340, !DIExpression(), !342)
  %45 = load i64, ptr %i, align 8, !dbg !343
  %46 = load i64, ptr %max, align 8, !dbg !344
  %sub24 = sub i64 %46, 1, !dbg !344
  %eq25 = icmp eq i64 %sub24, %45, !dbg !343
  %check = icmp sge i64 %sub24, 0, !dbg !343
  %siui-eq = and i1 %check, %eq25, !dbg !343
  br i1 %siui-eq, label %cond.lhs, label %cond.rhs, !dbg !343

cond.lhs:                                         ; preds = %loop.body
  store i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), ptr %index.f, align 8, !dbg !345
  br label %after_assign, !dbg !345

cond.rhs:                                         ; preds = %loop.body
  %47 = load %"char[]", ptr %self, align 8, !dbg !346
  %48 = load %"char[]", ptr %delimiter, align 8, !dbg !347
  %49 = extractvalue %"char[]" %48, 1, !dbg !348
  %lt26 = icmp ult i64 0, %49, !dbg !346
  br i1 %lt26, label %assert_ok28, label %assert_fail27, !dbg !346

assert_fail27:                                    ; preds = %cond.rhs
  %50 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !346
  call void %50(ptr @.panic_msg.38, i64 71, ptr @.file.16, i64 9, ptr @.func.37, i64 5, i32 314) #6, !dbg !346
  unreachable, !dbg !346

assert_ok28:                                      ; preds = %cond.rhs
  %51 = extractvalue %"char[]" %47, 0
  %52 = extractvalue %"char[]" %47, 1
  %53 = extractvalue %"char[]" %48, 0
  %54 = extractvalue %"char[]" %48, 1
  %55 = call i64 @std.core.String.index_of(ptr %retparam29, ptr %51, i64 %52, ptr %53, i64 %54), !dbg !346
  %not_err30 = icmp eq i64 %55, 0, !dbg !346
  %56 = call i1 @llvm.expect.i1(i1 %not_err30, i1 true), !dbg !346
  br i1 %56, label %after_check32, label %assign_optional31, !dbg !346

assign_optional31:                                ; preds = %assert_ok28
  store i64 %55, ptr %index.f, align 8, !dbg !346
  br label %after_assign, !dbg !346

after_check32:                                    ; preds = %assert_ok28
  %57 = load i64, ptr %retparam29, align 8, !dbg !346
  br label %cond.phi, !dbg !346

cond.phi:                                         ; preds = %after_check32
  store i64 %57, ptr %index, align 8, !dbg !346
  store i64 0, ptr %index.f, align 8, !dbg !346
  br label %after_assign, !dbg !346

after_assign:                                     ; preds = %cond.phi, %assign_optional31, %cond.lhs
    #dbg_declare(ptr %res, !349, !DIExpression(), !350)
  %load.err = load i64, ptr %index.f, align 8, !dbg !351
  %result = icmp eq i64 %load.err, 0, !dbg !351
  br i1 %result, label %if.then33, label %if.else, !dbg !351

if.then33:                                        ; preds = %after_assign
  %58 = load %"char[]", ptr %self, align 8, !dbg !352
  %59 = extractvalue %"char[]" %58, 0, !dbg !352
  %60 = extractvalue %"char[]" %58, 1, !dbg !354
  %gt34 = icmp ugt i64 0, %60, !dbg !354
  %61 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !354
  br i1 %61, label %panic35, label %checkok42, !dbg !354

checkok42:                                        ; preds = %if.then33
  %62 = load i64, ptr %index, align 8, !dbg !355
  %add43 = add i64 0, %62, !dbg !355
  %gt44 = icmp ugt i64 0, %add43, !dbg !355
  %sub45 = sub i64 %add43, 0, !dbg !355
  %63 = call i1 @llvm.expect.i1(i1 %gt44, i1 false), !dbg !355
  br i1 %63, label %panic46, label %checkok51, !dbg !355

checkok51:                                        ; preds = %checkok42
  %lt52 = icmp ult i64 %60, %add43, !dbg !352
  %sub53 = sub i64 %add43, 1, !dbg !352
  %64 = call i1 @llvm.expect.i1(i1 %lt52, i1 false), !dbg !352
  br i1 %64, label %panic54, label %checkok61, !dbg !352

checkok61:                                        ; preds = %checkok51
  %size62 = sub i64 %add43, 0, !dbg !352
  %65 = insertvalue %"char[]" undef, ptr %59, 0, !dbg !352
  %66 = insertvalue %"char[]" %65, i64 %size62, 1, !dbg !352
  store %"char[]" %66, ptr %res, align 8, !dbg !352
  %67 = load %"char[]", ptr %self, align 8, !dbg !356
  %68 = extractvalue %"char[]" %67, 0, !dbg !356
  %69 = load i64, ptr %index, align 8, !dbg !357
  %ptradd63 = getelementptr inbounds i8, ptr %delimiter, i64 8, !dbg !358
  %70 = load i64, ptr %ptradd63, align 8, !dbg !358
  %add64 = add i64 %69, %70, !dbg !357
  %71 = extractvalue %"char[]" %67, 1, !dbg !357
  %gt65 = icmp ugt i64 %add64, %71, !dbg !357
  %72 = call i1 @llvm.expect.i1(i1 %gt65, i1 false), !dbg !357
  br i1 %72, label %panic66, label %checkok73, !dbg !357

checkok73:                                        ; preds = %checkok61
  %size74 = sub i64 %71, %add64, !dbg !356
  %ptradd75 = getelementptr inbounds i8, ptr %68, i64 %add64, !dbg !356
  %73 = insertvalue %"char[]" undef, ptr %ptradd75, 0, !dbg !356
  %74 = insertvalue %"char[]" %73, i64 %size74, 1, !dbg !356
  store %"char[]" %74, ptr %self, align 8, !dbg !356
  br label %if.exit76, !dbg !356

if.else:                                          ; preds = %after_assign
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %res, ptr align 8 %self, i32 16, i1 false), !dbg !359
  store i8 1, ptr %no_more, align 1, !dbg !361
  br label %if.exit76, !dbg !361

if.exit76:                                        ; preds = %if.else, %checkok73
  %ptradd77 = getelementptr inbounds i8, ptr %res, i64 8, !dbg !362
  %75 = load i64, ptr %ptradd77, align 8, !dbg !362
  %i2nb78 = icmp eq i64 %75, 0, !dbg !362
  br i1 %i2nb78, label %and.rhs79, label %and.phi80, !dbg !362

and.rhs79:                                        ; preds = %if.exit76
  %76 = load i8, ptr %skip_empty, align 1, !dbg !363
  %77 = trunc i8 %76 to i1, !dbg !363
  br label %and.phi80, !dbg !363

and.phi80:                                        ; preds = %and.rhs79, %if.exit76
  %val81 = phi i1 [ false, %if.exit76 ], [ %77, %and.rhs79 ], !dbg !363
  br i1 %val81, label %if.then82, label %if.exit83, !dbg !363

if.then82:                                        ; preds = %and.phi80
  br label %loop.cond, !dbg !364

if.exit83:                                        ; preds = %and.phi80
  %78 = load i64, ptr %i, align 8, !dbg !366
  %79 = load i64, ptr %capacity, align 8, !dbg !367
  %eq84 = icmp eq i64 %78, %79, !dbg !366
  br i1 %eq84, label %if.then85, label %if.exit195, !dbg !366

if.then85:                                        ; preds = %if.exit83
  %80 = load i64, ptr %capacity, align 8, !dbg !368
  %mul86 = mul i64 %80, 2, !dbg !368
  store i64 %mul86, ptr %capacity, align 8, !dbg !368
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator87, ptr align 8 %allocator, i32 16, i1 false)
  %81 = load ptr, ptr %holder, align 8, !dbg !370
  store ptr %81, ptr %ptr, align 8
  %82 = load i64, ptr %capacity, align 8, !dbg !371
  %mul88 = mul i64 16, %82, !dbg !372
  store i64 %mul88, ptr %new_size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator90, ptr align 8 %allocator87, i32 16, i1 false)
  %83 = load ptr, ptr %ptr, align 8
  store ptr %83, ptr %ptr91, align 8
  %84 = load i64, ptr %new_size, align 8
  store i64 %84, ptr %new_size92, align 8
  %85 = load i64, ptr %new_size92, align 8, !dbg !373
  %i2nb94 = icmp eq i64 %85, 0, !dbg !373
  br i1 %i2nb94, label %if.then95, label %if.exit116, !dbg !373

if.then95:                                        ; preds = %if.then85
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator96, ptr align 8 %allocator90, i32 16, i1 false)
  %86 = load ptr, ptr %ptr91, align 8
  store ptr %86, ptr %ptr97, align 8
  %87 = load ptr, ptr %ptr97, align 8, !dbg !378
  %i2nb98 = icmp eq ptr %87, null, !dbg !378
  br i1 %i2nb98, label %if.then99, label %if.exit100, !dbg !378

if.then99:                                        ; preds = %if.then95
  br label %expr_block.exit115, !dbg !382

if.exit100:                                       ; preds = %if.then95
  %88 = load ptr, ptr %ptr97, align 8, !dbg !383
  %neq101 = icmp ne ptr %88, null, !dbg !384
  br i1 %neq101, label %assert_ok103, label %assert_fail102, !dbg !384

assert_fail102:                                   ; preds = %if.exit100
  %89 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !384
  call void %89(ptr @.panic_msg.26, i64 75, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 122) #6, !dbg !384
  unreachable, !dbg !384

assert_ok103:                                     ; preds = %if.exit100
  %ptradd104 = getelementptr inbounds i8, ptr %allocator96, i64 8, !dbg !384
  %90 = load i64, ptr %ptradd104, align 8, !dbg !384
  %91 = inttoptr i64 %90 to ptr, !dbg !384
  %type107 = load ptr, ptr %.cachedtype106, align 8
  %92 = icmp eq ptr %91, %type107
  br i1 %92, label %cache_hit110, label %cache_miss108

cache_miss108:                                    ; preds = %assert_ok103
  %ptradd109 = getelementptr inbounds i8, ptr %91, i64 16
  %93 = load ptr, ptr %ptradd109, align 8
  %94 = call ptr @.dyn_search(ptr %93, ptr @"$sel.release")
  store ptr %94, ptr %.inlinecache105, align 8
  store ptr %91, ptr %.cachedtype106, align 8
  br label %95

cache_hit110:                                     ; preds = %assert_ok103
  %cache_hit_fn111 = load ptr, ptr %.inlinecache105, align 8
  br label %95

95:                                               ; preds = %cache_hit110, %cache_miss108
  %fn_phi112 = phi ptr [ %cache_hit_fn111, %cache_hit110 ], [ %94, %cache_miss108 ]
  %96 = icmp eq ptr %fn_phi112, null
  br i1 %96, label %missing_function113, label %match114

missing_function113:                              ; preds = %95
  %97 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !384
  call void %97(ptr @.panic_msg.27, i64 44, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 122) #6, !dbg !384
  unreachable, !dbg !384

match114:                                         ; preds = %95
  %98 = load ptr, ptr %allocator96, align 8, !dbg !384
  call void %fn_phi112(ptr %98, ptr %88, i8 zeroext 0), !dbg !384
  br label %expr_block.exit115, !dbg !384

expr_block.exit115:                               ; preds = %match114, %if.then99
  store ptr null, ptr %blockret93, align 8, !dbg !385
  br label %expr_block.exit189, !dbg !385

if.exit116:                                       ; preds = %if.then85
  %99 = load ptr, ptr %ptr91, align 8, !dbg !386
  %i2nb117 = icmp eq ptr %99, null, !dbg !386
  br i1 %i2nb117, label %if.then118, label %if.exit152, !dbg !386

if.then118:                                       ; preds = %if.exit116
  %100 = load i64, ptr %new_size92, align 8, !dbg !387
  br i1 true, label %or.phi128, label %or.rhs119, !dbg !388

or.rhs119:                                        ; preds = %if.then118
  store i64 0, ptr %x120, align 8
  %101 = load i64, ptr %x120, align 8, !dbg !389
  %neq121 = icmp ne i64 0, %101, !dbg !389
  br i1 %neq121, label %and.rhs122, label %and.phi126, !dbg !389

and.rhs122:                                       ; preds = %or.rhs119
  %102 = load i64, ptr %x120, align 8, !dbg !392
  %103 = load i64, ptr %x120, align 8, !dbg !393
  %sub123 = sub i64 %103, 1, !dbg !393
  %and124 = and i64 %102, %sub123, !dbg !392
  %eq125 = icmp eq i64 %and124, 0, !dbg !392
  br label %and.phi126, !dbg !392

and.phi126:                                       ; preds = %and.rhs122, %or.rhs119
  %val127 = phi i1 [ false, %or.rhs119 ], [ %eq125, %and.rhs122 ], !dbg !392
  br label %or.phi128, !dbg !392

or.phi128:                                        ; preds = %and.phi126, %if.then118
  %val129 = phi i1 [ true, %if.then118 ], [ %val127, %and.phi126 ], !dbg !392
  br i1 %val129, label %assert_ok131, label %assert_fail130, !dbg !392

assert_fail130:                                   ; preds = %or.phi128
  %104 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !394
  call void %104(ptr @.panic_msg, i64 65, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 112) #6, !dbg !394
  unreachable, !dbg !394

assert_ok131:                                     ; preds = %or.phi128
  br i1 true, label %assert_ok133, label %assert_fail132, !dbg !394

assert_fail132:                                   ; preds = %assert_ok131
  %105 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !394
  call void %105(ptr @.panic_msg.10, i64 80, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 112) #6, !dbg !394
  unreachable, !dbg !394

assert_ok133:                                     ; preds = %assert_ok131
  %lt134 = icmp ult i64 0, %100, !dbg !394
  br i1 %lt134, label %assert_ok136, label %assert_fail135, !dbg !394

assert_fail135:                                   ; preds = %assert_ok133
  %106 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !394
  call void %106(ptr @.panic_msg.11, i64 59, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 112) #6, !dbg !394
  unreachable, !dbg !394

assert_ok136:                                     ; preds = %assert_ok133
  %ptradd137 = getelementptr inbounds i8, ptr %allocator90, i64 8, !dbg !394
  %107 = load i64, ptr %ptradd137, align 8, !dbg !394
  %108 = inttoptr i64 %107 to ptr, !dbg !394
  %type140 = load ptr, ptr %.cachedtype139, align 8
  %109 = icmp eq ptr %108, %type140
  br i1 %109, label %cache_hit143, label %cache_miss141

cache_miss141:                                    ; preds = %assert_ok136
  %ptradd142 = getelementptr inbounds i8, ptr %108, i64 16
  %110 = load ptr, ptr %ptradd142, align 8
  %111 = call ptr @.dyn_search(ptr %110, ptr @"$sel.acquire")
  store ptr %111, ptr %.inlinecache138, align 8
  store ptr %108, ptr %.cachedtype139, align 8
  br label %112

cache_hit143:                                     ; preds = %assert_ok136
  %cache_hit_fn144 = load ptr, ptr %.inlinecache138, align 8
  br label %112

112:                                              ; preds = %cache_hit143, %cache_miss141
  %fn_phi145 = phi ptr [ %cache_hit_fn144, %cache_hit143 ], [ %111, %cache_miss141 ]
  %113 = icmp eq ptr %fn_phi145, null
  br i1 %113, label %missing_function146, label %match147

missing_function146:                              ; preds = %112
  %114 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !394
  call void %114(ptr @.panic_msg.12, i64 44, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 112) #6, !dbg !394
  unreachable, !dbg !394

match147:                                         ; preds = %112
  %115 = load ptr, ptr %allocator90, align 8
  %116 = call i64 %fn_phi145(ptr %retparam148, ptr %115, i64 %100, i32 0, i64 0), !dbg !394
  %not_err149 = icmp eq i64 %116, 0, !dbg !394
  %117 = call i1 @llvm.expect.i1(i1 %not_err149, i1 true), !dbg !394
  br i1 %117, label %after_check151, label %assign_optional150, !dbg !394

assign_optional150:                               ; preds = %match147
  store i64 %116, ptr %error_var89, align 8, !dbg !394
  br label %panic_block190, !dbg !394

after_check151:                                   ; preds = %match147
  %118 = load ptr, ptr %retparam148, align 8, !dbg !394
  store ptr %118, ptr %blockret93, align 8, !dbg !394
  br label %expr_block.exit189, !dbg !394

if.exit152:                                       ; preds = %if.exit116
  %119 = load ptr, ptr %ptr91, align 8, !dbg !395
  %120 = load i64, ptr %new_size92, align 8, !dbg !396
  br i1 true, label %or.phi162, label %or.rhs153, !dbg !397

or.rhs153:                                        ; preds = %if.exit152
  store i64 0, ptr %x154, align 8
  %121 = load i64, ptr %x154, align 8, !dbg !398
  %neq155 = icmp ne i64 0, %121, !dbg !398
  br i1 %neq155, label %and.rhs156, label %and.phi160, !dbg !398

and.rhs156:                                       ; preds = %or.rhs153
  %122 = load i64, ptr %x154, align 8, !dbg !401
  %123 = load i64, ptr %x154, align 8, !dbg !402
  %sub157 = sub i64 %123, 1, !dbg !402
  %and158 = and i64 %122, %sub157, !dbg !401
  %eq159 = icmp eq i64 %and158, 0, !dbg !401
  br label %and.phi160, !dbg !401

and.phi160:                                       ; preds = %and.rhs156, %or.rhs153
  %val161 = phi i1 [ false, %or.rhs153 ], [ %eq159, %and.rhs156 ], !dbg !401
  br label %or.phi162, !dbg !401

or.phi162:                                        ; preds = %and.phi160, %if.exit152
  %val163 = phi i1 [ true, %if.exit152 ], [ %val161, %and.phi160 ], !dbg !401
  br i1 %val163, label %assert_ok165, label %assert_fail164, !dbg !401

assert_fail164:                                   ; preds = %or.phi162
  %124 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !403
  call void %124(ptr @.panic_msg, i64 65, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 113) #6, !dbg !403
  unreachable, !dbg !403

assert_ok165:                                     ; preds = %or.phi162
  br i1 true, label %assert_ok167, label %assert_fail166, !dbg !403

assert_fail166:                                   ; preds = %assert_ok165
  %125 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !403
  call void %125(ptr @.panic_msg.10, i64 80, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 113) #6, !dbg !403
  unreachable, !dbg !403

assert_ok167:                                     ; preds = %assert_ok165
  %neq168 = icmp ne ptr %119, null, !dbg !403
  br i1 %neq168, label %assert_ok170, label %assert_fail169, !dbg !403

assert_fail169:                                   ; preds = %assert_ok167
  %126 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !403
  call void %126(ptr @.panic_msg.39, i64 32, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 113) #6, !dbg !403
  unreachable, !dbg !403

assert_ok170:                                     ; preds = %assert_ok167
  %lt171 = icmp ult i64 0, %120, !dbg !403
  br i1 %lt171, label %assert_ok173, label %assert_fail172, !dbg !403

assert_fail172:                                   ; preds = %assert_ok170
  %127 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !403
  call void %127(ptr @.panic_msg.40, i64 33, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 113) #6, !dbg !403
  unreachable, !dbg !403

assert_ok173:                                     ; preds = %assert_ok170
  %ptradd174 = getelementptr inbounds i8, ptr %allocator90, i64 8, !dbg !403
  %128 = load i64, ptr %ptradd174, align 8, !dbg !403
  %129 = inttoptr i64 %128 to ptr, !dbg !403
  %type177 = load ptr, ptr %.cachedtype176, align 8
  %130 = icmp eq ptr %129, %type177
  br i1 %130, label %cache_hit180, label %cache_miss178

cache_miss178:                                    ; preds = %assert_ok173
  %ptradd179 = getelementptr inbounds i8, ptr %129, i64 16
  %131 = load ptr, ptr %ptradd179, align 8
  %132 = call ptr @.dyn_search(ptr %131, ptr @"$sel.resize")
  store ptr %132, ptr %.inlinecache175, align 8
  store ptr %129, ptr %.cachedtype176, align 8
  br label %133

cache_hit180:                                     ; preds = %assert_ok173
  %cache_hit_fn181 = load ptr, ptr %.inlinecache175, align 8
  br label %133

133:                                              ; preds = %cache_hit180, %cache_miss178
  %fn_phi182 = phi ptr [ %cache_hit_fn181, %cache_hit180 ], [ %132, %cache_miss178 ]
  %134 = icmp eq ptr %fn_phi182, null
  br i1 %134, label %missing_function183, label %match184

missing_function183:                              ; preds = %133
  %135 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !403
  call void %135(ptr @.panic_msg.41, i64 43, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 113) #6, !dbg !403
  unreachable, !dbg !403

match184:                                         ; preds = %133
  %136 = load ptr, ptr %allocator90, align 8
  %137 = call i64 %fn_phi182(ptr %retparam185, ptr %136, ptr %119, i64 %120, i64 0), !dbg !403
  %not_err186 = icmp eq i64 %137, 0, !dbg !403
  %138 = call i1 @llvm.expect.i1(i1 %not_err186, i1 true), !dbg !403
  br i1 %138, label %after_check188, label %assign_optional187, !dbg !403

assign_optional187:                               ; preds = %match184
  store i64 %137, ptr %error_var89, align 8, !dbg !403
  br label %panic_block190, !dbg !403

after_check188:                                   ; preds = %match184
  %139 = load ptr, ptr %retparam185, align 8, !dbg !403
  store ptr %139, ptr %blockret93, align 8, !dbg !403
  br label %expr_block.exit189, !dbg !403

expr_block.exit189:                               ; preds = %after_check188, %after_check151, %expr_block.exit115
  br label %noerr_block194, !dbg !403

panic_block190:                                   ; preds = %assign_optional187, %assign_optional150
  %140 = insertvalue %any undef, ptr %error_var89, 0, !dbg !403
  %141 = insertvalue %any %140, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !403
  store %any %141, ptr %varargslots191, align 16
  %142 = insertvalue %"any[]" undef, ptr %varargslots191, 0
  %"$$temp192" = insertvalue %"any[]" %142, i64 1, 1
  store %"any[]" %"$$temp192", ptr %indirectarg193, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.14, i64 36, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 102, ptr byval(%"any[]") align 8 %indirectarg193) #6, !dbg !375
  unreachable, !dbg !375

noerr_block194:                                   ; preds = %expr_block.exit189
  %143 = load ptr, ptr %blockret93, align 8, !dbg !375
  store ptr %143, ptr %holder, align 8, !dbg !375
  br label %if.exit195, !dbg !375

if.exit195:                                       ; preds = %noerr_block194, %if.exit83
  %144 = load ptr, ptr %holder, align 8, !dbg !404
  %145 = load i64, ptr %i, align 8, !dbg !405
  %add196 = add i64 %145, 1, !dbg !405
  store i64 %add196, ptr %i, align 8, !dbg !405
  %ptroffset = getelementptr inbounds [16 x i8], ptr %144, i64 %145, !dbg !405
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptroffset, ptr align 8 %res, i32 16, i1 false), !dbg !406
  br label %loop.cond, !dbg !406

loop.exit:                                        ; preds = %loop.cond
  %146 = load ptr, ptr %holder, align 8, !dbg !407
  %147 = load i64, ptr %i, align 8, !dbg !408
  %add197 = add i64 0, %147, !dbg !408
  %gt198 = icmp ugt i64 0, %add197, !dbg !408
  %sub199 = sub i64 %add197, 0, !dbg !408
  %148 = call i1 @llvm.expect.i1(i1 %gt198, i1 false), !dbg !408
  br i1 %148, label %panic200, label %checkok205, !dbg !408

checkok205:                                       ; preds = %loop.exit
  %size206 = sub i64 %add197, 0, !dbg !407
  %149 = insertvalue %"char[][]" undef, ptr %146, 0, !dbg !407
  %150 = insertvalue %"char[][]" %149, i64 %size206, 1, !dbg !407
  %151 = extractvalue %"char[][]" %150, 1, !dbg !409
  %lt207 = icmp ult i64 0, %151, !dbg !409
  br i1 %lt207, label %or.phi209, label %or.rhs208, !dbg !409

or.rhs208:                                        ; preds = %checkok205
  %152 = load i8, ptr %skip_empty, align 1, !dbg !410
  %153 = trunc i8 %152 to i1, !dbg !410
  br label %or.phi209, !dbg !410

or.phi209:                                        ; preds = %or.rhs208, %checkok205
  %val210 = phi i1 [ true, %checkok205 ], [ %153, %or.rhs208 ], !dbg !410
  br i1 %val210, label %assert_ok212, label %assert_fail211, !dbg !410

assert_fail211:                                   ; preds = %or.phi209
  %154 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !407
  call void %154(ptr @.panic_msg.42, i64 48, ptr @.file.16, i64 9, ptr @.func.37, i64 5, i32 338) #6, !dbg !407
  unreachable, !dbg !407

assert_ok212:                                     ; preds = %or.phi209
  store %"char[][]" %150, ptr %taddr213, align 8
  %155 = load { ptr, i64 }, ptr %taddr213, align 8
  ret { ptr, i64 } %155

panic:                                            ; preds = %expr_block.exit
  store i64 %sub18, ptr %taddr19, align 8
  %156 = insertvalue %any undef, ptr %taddr19, 0
  %157 = insertvalue %any %156, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %157, ptr %varargslots, align 16
  %158 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %158, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file, i64 16, ptr @.func.37, i64 5, i32 303, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !333
  unreachable, !dbg !333

panic35:                                          ; preds = %if.then33
  store i64 %60, ptr %taddr36, align 8
  %159 = insertvalue %any undef, ptr %taddr36, 0
  %160 = insertvalue %any %159, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %161 = insertvalue %any undef, ptr %taddr37, 0
  %162 = insertvalue %any %161, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %160, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %162, ptr %ptradd39, align 16
  %163 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %163, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.37, i64 5, i32 318, ptr byval(%"any[]") align 8 %indirectarg41) #6, !dbg !352
  unreachable, !dbg !352

panic46:                                          ; preds = %checkok42
  store i64 %sub45, ptr %taddr47, align 8
  %164 = insertvalue %any undef, ptr %taddr47, 0
  %165 = insertvalue %any %164, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %165, ptr %varargslots48, align 16
  %166 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp49" = insertvalue %"any[]" %166, i64 1, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.37, i64 5, i32 318, ptr byval(%"any[]") align 8 %indirectarg50) #6, !dbg !352
  unreachable, !dbg !352

panic54:                                          ; preds = %checkok51
  store i64 %sub53, ptr %taddr55, align 8
  %167 = insertvalue %any undef, ptr %taddr55, 0
  %168 = insertvalue %any %167, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %60, ptr %taddr56, align 8
  %169 = insertvalue %any undef, ptr %taddr56, 0
  %170 = insertvalue %any %169, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %168, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %170, ptr %ptradd58, align 16
  %171 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %171, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.37, i64 5, i32 318, ptr byval(%"any[]") align 8 %indirectarg60) #6, !dbg !352
  unreachable, !dbg !352

panic66:                                          ; preds = %checkok61
  store i64 %71, ptr %taddr67, align 8
  %172 = insertvalue %any undef, ptr %taddr67, 0
  %173 = insertvalue %any %172, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add64, ptr %taddr68, align 8
  %174 = insertvalue %any undef, ptr %taddr68, 0
  %175 = insertvalue %any %174, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %173, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %175, ptr %ptradd70, align 16
  %176 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %176, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.37, i64 5, i32 319, ptr byval(%"any[]") align 8 %indirectarg72) #6, !dbg !356
  unreachable, !dbg !356

panic200:                                         ; preds = %loop.exit
  store i64 %sub199, ptr %taddr201, align 8
  %177 = insertvalue %any undef, ptr %taddr201, 0
  %178 = insertvalue %any %177, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %178, ptr %varargslots202, align 16
  %179 = insertvalue %"any[]" undef, ptr %varargslots202, 0
  %"$$temp203" = insertvalue %"any[]" %179, i64 1, 1
  store %"any[]" %"$$temp203", ptr %indirectarg204, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.37, i64 5, i32 338, ptr byval(%"any[]") align 8 %indirectarg204) #6, !dbg !407
  unreachable, !dbg !407
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.tsplit(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, i8 zeroext %5) #0 comdat !dbg !411 {
entry:
  %s = alloca %"char[]", align 8
  %delimiter = alloca %"char[]", align 8
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %taddr = alloca %any, align 8
  %result = alloca %"char[][]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !414, !DIExpression(), !415)
  store ptr %2, ptr %delimiter, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %delimiter, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %delimiter, !416, !DIExpression(), !417)
  store i64 %4, ptr %max, align 8
    #dbg_declare(ptr %max, !418, !DIExpression(), !419)
  store i8 %5, ptr %skip_empty, align 1
    #dbg_declare(ptr %skip_empty, !420, !DIExpression(), !421)
  %6 = load %"char[]", ptr %s, align 8, !dbg !422
  %7 = load %any, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !423
  %8 = load %"char[]", ptr %delimiter, align 8, !dbg !424
  %9 = load i64, ptr %max, align 8, !dbg !425
  %10 = load i8, ptr %skip_empty, align 1, !dbg !426
  %11 = trunc i8 %10 to i1, !dbg !426
  %12 = extractvalue %"char[]" %8, 1, !dbg !427
  %lt = icmp ult i64 0, %12, !dbg !422
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !422

assert_fail:                                      ; preds = %entry
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !422
  call void %13(ptr @.panic_msg.36, i64 89, ptr @.file.16, i64 9, ptr @.func.43, i64 6, i32 351) #6, !dbg !422
  unreachable, !dbg !422

assert_ok:                                        ; preds = %entry
  %14 = extractvalue %"char[]" %6, 0, !dbg !422
  %15 = extractvalue %"char[]" %6, 1, !dbg !422
  store %any %7, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd2, align 8
  %16 = extractvalue %"char[]" %8, 0
  %17 = extractvalue %"char[]" %8, 1
  %18 = zext i1 %11 to i8
  %19 = call { ptr, i64 } @std.core.String.split(ptr %14, i64 %15, i64 %lo, ptr %hi, ptr %16, i64 %17, i64 %9, i8 zeroext %18) #5, !dbg !422
  store { ptr, i64 } %19, ptr %result, align 8
  %20 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %20
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.split_to_buffer(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4, ptr byval(%"char[][]") align 8 %5, i64 %6, i8 zeroext %7) #0 comdat !dbg !428 {
entry:
  %s = alloca %"char[]", align 8
  %delimiter = alloca %"char[]", align 8
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %max_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  %no_more = alloca i8, align 1
  %index = alloca i64, align 8
  %index.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %res = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %varargslots13 = alloca [1 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %varargslots33 = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %varargslots60 = alloca [2 x %any], align 16
  %indirectarg63 = alloca %"any[]", align 8
  %taddr69 = alloca i64, align 8
  %varargslots70 = alloca [1 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr77 = alloca i64, align 8
  %taddr78 = alloca i64, align 8
  %varargslots79 = alloca [2 x %any], align 16
  %indirectarg82 = alloca %"any[]", align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !434, !DIExpression(), !435)
  store ptr %3, ptr %delimiter, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %delimiter, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %delimiter, !436, !DIExpression(), !437)
    #dbg_declare(ptr %5, !438, !DIExpression(), !439)
  store i64 %6, ptr %max, align 8
    #dbg_declare(ptr %max, !440, !DIExpression(), !441)
  store i8 %7, ptr %skip_empty, align 1
    #dbg_declare(ptr %skip_empty, !442, !DIExpression(), !443)
  %ptradd2 = getelementptr inbounds i8, ptr %delimiter, i64 8, !dbg !444
  %8 = load i64, ptr %ptradd2, align 8, !dbg !444
  %lt = icmp ult i64 0, %8, !dbg !444
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !444

assert_fail:                                      ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !444
  call void %9(ptr @.panic_msg.36, i64 89, ptr @.file.16, i64 9, ptr @.func.44, i64 15, i32 362) #6, !dbg !444
  unreachable, !dbg !444

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %max_capacity, !446, !DIExpression(), !447)
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !448
  %10 = load i64, ptr %ptradd3, align 8, !dbg !448
  store i64 %10, ptr %max_capacity, align 8, !dbg !448
    #dbg_declare(ptr %i, !449, !DIExpression(), !450)
  store i64 0, ptr %i, align 8, !dbg !451
    #dbg_declare(ptr %no_more, !452, !DIExpression(), !453)
  store i8 0, ptr %no_more, align 1, !dbg !454
  br label %loop.cond, !dbg !455

loop.cond:                                        ; preds = %checkok55, %if.then41, %assert_ok
  %11 = load i8, ptr %no_more, align 1, !dbg !456
  %12 = trunc i8 %11 to i1, !dbg !456
  %not = xor i1 %12, true, !dbg !456
  br i1 %not, label %loop.body, label %loop.exit, !dbg !456

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %index, !458, !DIExpression(), !460)
  %13 = load i64, ptr %i, align 8, !dbg !461
  %14 = load i64, ptr %max, align 8, !dbg !462
  %sub = sub i64 %14, 1, !dbg !462
  %eq = icmp eq i64 %sub, %13, !dbg !461
  %check = icmp sge i64 %sub, 0, !dbg !461
  %siui-eq = and i1 %check, %eq, !dbg !461
  br i1 %siui-eq, label %cond.lhs, label %cond.rhs, !dbg !461

cond.lhs:                                         ; preds = %loop.body
  store i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), ptr %index.f, align 8, !dbg !463
  br label %after_assign, !dbg !463

cond.rhs:                                         ; preds = %loop.body
  %15 = load %"char[]", ptr %s, align 8, !dbg !464
  %16 = load %"char[]", ptr %delimiter, align 8, !dbg !465
  %17 = extractvalue %"char[]" %16, 1, !dbg !466
  %lt4 = icmp ult i64 0, %17, !dbg !464
  br i1 %lt4, label %assert_ok6, label %assert_fail5, !dbg !464

assert_fail5:                                     ; preds = %cond.rhs
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !464
  call void %18(ptr @.panic_msg.38, i64 71, ptr @.file.16, i64 9, ptr @.func.44, i64 15, i32 373) #6, !dbg !464
  unreachable, !dbg !464

assert_ok6:                                       ; preds = %cond.rhs
  %19 = extractvalue %"char[]" %15, 0
  %20 = extractvalue %"char[]" %15, 1
  %21 = extractvalue %"char[]" %16, 0
  %22 = extractvalue %"char[]" %16, 1
  %23 = call i64 @std.core.String.index_of(ptr %retparam, ptr %19, i64 %20, ptr %21, i64 %22), !dbg !464
  %not_err = icmp eq i64 %23, 0, !dbg !464
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !464
  br i1 %24, label %after_check, label %assign_optional, !dbg !464

assign_optional:                                  ; preds = %assert_ok6
  store i64 %23, ptr %index.f, align 8, !dbg !464
  br label %after_assign, !dbg !464

after_check:                                      ; preds = %assert_ok6
  %25 = load i64, ptr %retparam, align 8, !dbg !464
  br label %cond.phi, !dbg !464

cond.phi:                                         ; preds = %after_check
  store i64 %25, ptr %index, align 8, !dbg !464
  store i64 0, ptr %index.f, align 8, !dbg !464
  br label %after_assign, !dbg !464

after_assign:                                     ; preds = %cond.phi, %assign_optional, %cond.lhs
    #dbg_declare(ptr %res, !467, !DIExpression(), !468)
  %load.err = load i64, ptr %index.f, align 8, !dbg !469
  %result = icmp eq i64 %load.err, 0, !dbg !469
  br i1 %result, label %if.then, label %if.else, !dbg !469

if.then:                                          ; preds = %after_assign
  %26 = load %"char[]", ptr %s, align 8, !dbg !470
  %27 = extractvalue %"char[]" %26, 0, !dbg !470
  %28 = extractvalue %"char[]" %26, 1, !dbg !472
  %gt = icmp ugt i64 0, %28, !dbg !472
  %29 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !472
  br i1 %29, label %panic, label %checkok, !dbg !472

checkok:                                          ; preds = %if.then
  %30 = load i64, ptr %index, align 8, !dbg !473
  %add = add i64 0, %30, !dbg !473
  %gt9 = icmp ugt i64 0, %add, !dbg !473
  %sub10 = sub i64 %add, 0, !dbg !473
  %31 = call i1 @llvm.expect.i1(i1 %gt9, i1 false), !dbg !473
  br i1 %31, label %panic11, label %checkok16, !dbg !473

checkok16:                                        ; preds = %checkok
  %lt17 = icmp ult i64 %28, %add, !dbg !470
  %sub18 = sub i64 %add, 1, !dbg !470
  %32 = call i1 @llvm.expect.i1(i1 %lt17, i1 false), !dbg !470
  br i1 %32, label %panic19, label %checkok26, !dbg !470

checkok26:                                        ; preds = %checkok16
  %size = sub i64 %add, 0, !dbg !470
  %33 = insertvalue %"char[]" undef, ptr %27, 0, !dbg !470
  %34 = insertvalue %"char[]" %33, i64 %size, 1, !dbg !470
  store %"char[]" %34, ptr %res, align 8, !dbg !470
  %35 = load %"char[]", ptr %s, align 8, !dbg !474
  %36 = extractvalue %"char[]" %35, 0, !dbg !474
  %37 = load i64, ptr %index, align 8, !dbg !475
  %ptradd27 = getelementptr inbounds i8, ptr %delimiter, i64 8, !dbg !476
  %38 = load i64, ptr %ptradd27, align 8, !dbg !476
  %add28 = add i64 %37, %38, !dbg !475
  %39 = extractvalue %"char[]" %35, 1, !dbg !475
  %gt29 = icmp ugt i64 %add28, %39, !dbg !475
  %40 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !475
  br i1 %40, label %panic30, label %checkok37, !dbg !475

checkok37:                                        ; preds = %checkok26
  %size38 = sub i64 %39, %add28, !dbg !474
  %ptradd39 = getelementptr inbounds i8, ptr %36, i64 %add28, !dbg !474
  %41 = insertvalue %"char[]" undef, ptr %ptradd39, 0, !dbg !474
  %42 = insertvalue %"char[]" %41, i64 %size38, 1, !dbg !474
  store %"char[]" %42, ptr %s, align 8, !dbg !474
  br label %if.exit, !dbg !474

if.else:                                          ; preds = %after_assign
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %res, ptr align 8 %s, i32 16, i1 false), !dbg !477
  store i8 1, ptr %no_more, align 1, !dbg !479
  br label %if.exit, !dbg !479

if.exit:                                          ; preds = %if.else, %checkok37
  %ptradd40 = getelementptr inbounds i8, ptr %res, i64 8, !dbg !480
  %43 = load i64, ptr %ptradd40, align 8, !dbg !480
  %i2nb = icmp eq i64 %43, 0, !dbg !480
  br i1 %i2nb, label %and.rhs, label %and.phi, !dbg !480

and.rhs:                                          ; preds = %if.exit
  %44 = load i8, ptr %skip_empty, align 1, !dbg !481
  %45 = trunc i8 %44 to i1, !dbg !481
  br label %and.phi, !dbg !481

and.phi:                                          ; preds = %and.rhs, %if.exit
  %val = phi i1 [ false, %if.exit ], [ %45, %and.rhs ], !dbg !481
  br i1 %val, label %if.then41, label %if.exit42, !dbg !481

if.then41:                                        ; preds = %and.phi
  br label %loop.cond, !dbg !482

if.exit42:                                        ; preds = %and.phi
  %46 = load i64, ptr %i, align 8, !dbg !484
  %47 = load i64, ptr %max_capacity, align 8, !dbg !485
  %eq43 = icmp eq i64 %46, %47, !dbg !484
  br i1 %eq43, label %if.then44, label %if.exit45, !dbg !484

if.then44:                                        ; preds = %if.exit42
  ret i64 ptrtoint (ptr @std.core.string.BUFFER_EXCEEDED to i64), !dbg !486

if.exit45:                                        ; preds = %if.exit42
  %ptradd46 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !488
  %48 = load i64, ptr %ptradd46, align 8, !dbg !488
  %49 = load ptr, ptr %5, align 8, !dbg !488
  %50 = load i64, ptr %i, align 8, !dbg !489
  %add47 = add i64 %50, 1, !dbg !489
  store i64 %add47, ptr %i, align 8, !dbg !489
  %ge = icmp uge i64 %50, %48, !dbg !489
  %51 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !489
  br i1 %51, label %panic48, label %checkok55, !dbg !489

checkok55:                                        ; preds = %if.exit45
  %ptroffset = getelementptr inbounds [16 x i8], ptr %49, i64 %50, !dbg !489
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptroffset, ptr align 8 %res, i32 16, i1 false), !dbg !490
  br label %loop.cond, !dbg !490

loop.exit:                                        ; preds = %loop.cond
  %52 = load %"char[][]", ptr %5, align 8, !dbg !491
  %53 = extractvalue %"char[][]" %52, 0, !dbg !491
  %54 = extractvalue %"char[][]" %52, 1, !dbg !492
  %gt56 = icmp ugt i64 0, %54, !dbg !492
  %55 = call i1 @llvm.expect.i1(i1 %gt56, i1 false), !dbg !492
  br i1 %55, label %panic57, label %checkok64, !dbg !492

checkok64:                                        ; preds = %loop.exit
  %56 = load i64, ptr %i, align 8, !dbg !493
  %add65 = add i64 0, %56, !dbg !493
  %gt66 = icmp ugt i64 0, %add65, !dbg !493
  %sub67 = sub i64 %add65, 0, !dbg !493
  %57 = call i1 @llvm.expect.i1(i1 %gt66, i1 false), !dbg !493
  br i1 %57, label %panic68, label %checkok73, !dbg !493

checkok73:                                        ; preds = %checkok64
  %lt74 = icmp ult i64 %54, %add65, !dbg !491
  %sub75 = sub i64 %add65, 1, !dbg !491
  %58 = call i1 @llvm.expect.i1(i1 %lt74, i1 false), !dbg !491
  br i1 %58, label %panic76, label %checkok83, !dbg !491

checkok83:                                        ; preds = %checkok73
  %size84 = sub i64 %add65, 0, !dbg !491
  %59 = insertvalue %"char[][]" undef, ptr %53, 0, !dbg !491
  %60 = insertvalue %"char[][]" %59, i64 %size84, 1, !dbg !491
  %61 = extractvalue %"char[][]" %60, 1, !dbg !494
  %lt85 = icmp ult i64 0, %61, !dbg !494
  br i1 %lt85, label %or.phi, label %or.rhs, !dbg !494

or.rhs:                                           ; preds = %checkok83
  %62 = load i8, ptr %skip_empty, align 1, !dbg !495
  %63 = trunc i8 %62 to i1, !dbg !495
  br label %or.phi, !dbg !495

or.phi:                                           ; preds = %or.rhs, %checkok83
  %val86 = phi i1 [ true, %checkok83 ], [ %63, %or.rhs ], !dbg !495
  br i1 %val86, label %assert_ok88, label %assert_fail87, !dbg !495

assert_fail87:                                    ; preds = %or.phi
  %64 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !491
  call void %64(ptr @.panic_msg.42, i64 48, ptr @.file.16, i64 9, ptr @.func.44, i64 15, i32 395) #6, !dbg !491
  unreachable, !dbg !491

assert_ok88:                                      ; preds = %or.phi
  store %"char[][]" %60, ptr %0, align 8, !dbg !491
  ret i64 0, !dbg !491

panic:                                            ; preds = %if.then
  store i64 %28, ptr %taddr, align 8
  %65 = insertvalue %any undef, ptr %taddr, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %67 = insertvalue %any undef, ptr %taddr7, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %66, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %68, ptr %ptradd8, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.44, i64 15, i32 377, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !470
  unreachable, !dbg !470

panic11:                                          ; preds = %checkok
  store i64 %sub10, ptr %taddr12, align 8
  %70 = insertvalue %any undef, ptr %taddr12, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots13, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp14" = insertvalue %"any[]" %72, i64 1, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.44, i64 15, i32 377, ptr byval(%"any[]") align 8 %indirectarg15) #6, !dbg !470
  unreachable, !dbg !470

panic19:                                          ; preds = %checkok16
  store i64 %sub18, ptr %taddr20, align 8
  %73 = insertvalue %any undef, ptr %taddr20, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %28, ptr %taddr21, align 8
  %75 = insertvalue %any undef, ptr %taddr21, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %76, ptr %ptradd23, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.44, i64 15, i32 377, ptr byval(%"any[]") align 8 %indirectarg25) #6, !dbg !470
  unreachable, !dbg !470

panic30:                                          ; preds = %checkok26
  store i64 %39, ptr %taddr31, align 8
  %78 = insertvalue %any undef, ptr %taddr31, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add28, ptr %taddr32, align 8
  %80 = insertvalue %any undef, ptr %taddr32, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %79, ptr %varargslots33, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %81, ptr %ptradd34, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp35", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.44, i64 15, i32 378, ptr byval(%"any[]") align 8 %indirectarg36) #6, !dbg !474
  unreachable, !dbg !474

panic48:                                          ; preds = %if.exit45
  store i64 %48, ptr %taddr49, align 8
  %83 = insertvalue %any undef, ptr %taddr49, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %50, ptr %taddr50, align 8
  %85 = insertvalue %any undef, ptr %taddr50, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %84, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %86, ptr %ptradd52, align 16
  %87 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %87, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.44, i64 15, i32 393, ptr byval(%"any[]") align 8 %indirectarg54) #6, !dbg !489
  unreachable, !dbg !489

panic57:                                          ; preds = %loop.exit
  store i64 %54, ptr %taddr58, align 8
  %88 = insertvalue %any undef, ptr %taddr58, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr59, align 8
  %90 = insertvalue %any undef, ptr %taddr59, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %89, ptr %varargslots60, align 16
  %ptradd61 = getelementptr inbounds i8, ptr %varargslots60, i64 16
  store %any %91, ptr %ptradd61, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots60, 0
  %"$$temp62" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp62", ptr %indirectarg63, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.44, i64 15, i32 395, ptr byval(%"any[]") align 8 %indirectarg63) #6, !dbg !491
  unreachable, !dbg !491

panic68:                                          ; preds = %checkok64
  store i64 %sub67, ptr %taddr69, align 8
  %93 = insertvalue %any undef, ptr %taddr69, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %94, ptr %varargslots70, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots70, 0
  %"$$temp71" = insertvalue %"any[]" %95, i64 1, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.44, i64 15, i32 395, ptr byval(%"any[]") align 8 %indirectarg72) #6, !dbg !491
  unreachable, !dbg !491

panic76:                                          ; preds = %checkok73
  store i64 %sub75, ptr %taddr77, align 8
  %96 = insertvalue %any undef, ptr %taddr77, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr78, align 8
  %98 = insertvalue %any undef, ptr %taddr78, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %97, ptr %varargslots79, align 16
  %ptradd80 = getelementptr inbounds i8, ptr %varargslots79, i64 16
  store %any %99, ptr %ptradd80, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots79, 0
  %"$$temp81" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp81", ptr %indirectarg82, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.44, i64 15, i32 395, ptr byval(%"any[]") align 8 %indirectarg82) #6, !dbg !491
  unreachable, !dbg !491
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.core.String.contains(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !496 {
entry:
  %s = alloca %"char[]", align 8
  %substr = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %temp_err = alloca i64, align 8
  %retparam = alloca i64, align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !497, !DIExpression(), !498)
  store ptr %2, ptr %substr, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %substr, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %substr, !499, !DIExpression(), !500)
  br label %testblock

testblock:                                        ; preds = %entry
  %4 = load %"char[]", ptr %s, align 8, !dbg !501
  %5 = load %"char[]", ptr %substr, align 8, !dbg !505
  %6 = extractvalue %"char[]" %5, 1, !dbg !506
  %lt = icmp ult i64 0, %6, !dbg !507
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !507

assert_fail:                                      ; preds = %testblock
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !507
  call void %7(ptr @.panic_msg.38, i64 71, ptr @.file.45, i64 10, ptr @.func.46, i64 8, i32 406) #6, !dbg !507
  unreachable, !dbg !507

assert_ok:                                        ; preds = %testblock
  %8 = extractvalue %"char[]" %4, 0
  %9 = extractvalue %"char[]" %4, 1
  %10 = extractvalue %"char[]" %5, 0
  %11 = extractvalue %"char[]" %5, 1
  %12 = call i64 @std.core.String.index_of(ptr %retparam, ptr %8, i64 %9, ptr %10, i64 %11), !dbg !507
  %not_err = icmp eq i64 %12, 0, !dbg !507
  %13 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !507
  br i1 %13, label %after_check, label %assign_optional, !dbg !507

assign_optional:                                  ; preds = %assert_ok
  store i64 %12, ptr %temp_err, align 8, !dbg !507
  br label %end_block, !dbg !507

after_check:                                      ; preds = %assert_ok
  store i64 0, ptr %temp_err, align 8, !dbg !507
  br label %end_block, !dbg !507

end_block:                                        ; preds = %after_check, %assign_optional
  %14 = load i64, ptr %temp_err, align 8, !dbg !507
  %i2b = icmp ne i64 %14, 0, !dbg !507
  br i1 %i2b, label %if.then, label %if.exit, !dbg !507

if.then:                                          ; preds = %end_block
  store i8 0, ptr %blockret, align 1, !dbg !508
  br label %expr_block.exit, !dbg !508

if.exit:                                          ; preds = %end_block
  store i8 1, ptr %blockret, align 1, !dbg !509
  br label %expr_block.exit, !dbg !509

expr_block.exit:                                  ; preds = %if.exit, %if.then
  %15 = load i8, ptr %blockret, align 1, !dbg !509
  ret i8 %15, !dbg !509
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.count(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !510 {
entry:
  %self = alloca %"char[]", align 8
  %substr = alloca %"char[]", align 8
  %count = alloca i64, align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %varargslots11 = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca %"char[]", align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr51 = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr61 = alloca i64, align 8
  %taddr62 = alloca i64, align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %taddr72 = alloca i64, align 8
  %taddr73 = alloca i64, align 8
  %varargslots74 = alloca [2 x %any], align 16
  %indirectarg77 = alloca %"any[]", align 8
  %taddr82 = alloca i64, align 8
  %varargslots83 = alloca [1 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %varargslots92 = alloca [2 x %any], align 16
  %indirectarg95 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %taddr109 = alloca i64, align 8
  %taddr110 = alloca i64, align 8
  %varargslots111 = alloca [2 x %any], align 16
  %indirectarg114 = alloca %"any[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !513, !DIExpression(), !514)
  store ptr %2, ptr %substr, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %substr, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %substr, !515, !DIExpression(), !516)
    #dbg_declare(ptr %count, !517, !DIExpression(), !518)
  store i64 0, ptr %count, align 8, !dbg !519
    #dbg_declare(ptr %needed, !520, !DIExpression(), !521)
  %ptradd2 = getelementptr inbounds i8, ptr %substr, i64 8, !dbg !522
  %4 = load i64, ptr %ptradd2, align 8, !dbg !522
  store i64 %4, ptr %needed, align 8, !dbg !522
  %5 = load i64, ptr %needed, align 8, !dbg !523
  %eq = icmp eq i64 0, %5, !dbg !523
  br i1 %eq, label %if.then, label %if.exit, !dbg !523

if.then:                                          ; preds = %entry
  ret i64 0, !dbg !524

if.exit:                                          ; preds = %entry
    #dbg_declare(ptr %first, !525, !DIExpression(), !526)
  %ptradd3 = getelementptr inbounds i8, ptr %substr, i64 8, !dbg !527
  %6 = load i64, ptr %ptradd3, align 8, !dbg !527
  %7 = load ptr, ptr %substr, align 8, !dbg !527
  %ge = icmp sge i64 0, %6, !dbg !528
  %8 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !528
  br i1 %8, label %panic, label %checkok, !dbg !528

checkok:                                          ; preds = %if.exit
  %9 = load i8, ptr %7, align 1, !dbg !528
  store i8 %9, ptr %first, align 1, !dbg !528
  br label %loop.cond, !dbg !529

loop.cond:                                        ; preds = %checkok115, %checkok
  %ptradd6 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !530
  %10 = load i64, ptr %ptradd6, align 8, !dbg !530
  %11 = load i64, ptr %needed, align 8, !dbg !532
  %ge7 = icmp uge i64 %10, %11, !dbg !530
  br i1 %ge7, label %loop.body, label %loop.exit119, !dbg !530

loop.body:                                        ; preds = %loop.cond
  %12 = load %"char[]", ptr %self, align 8, !dbg !533
  %13 = extractvalue %"char[]" %12, 0, !dbg !533
  %14 = extractvalue %"char[]" %12, 1, !dbg !536
  %gt = icmp ugt i64 0, %14, !dbg !536
  %15 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !536
  br i1 %15, label %panic8, label %checkok15, !dbg !536

checkok15:                                        ; preds = %loop.body
  %16 = load i64, ptr %needed, align 8, !dbg !537
  %sub = sub i64 %14, %16, !dbg !537
  %gt16 = icmp ugt i64 0, %sub, !dbg !537
  %17 = call i1 @llvm.expect.i1(i1 %gt16, i1 false), !dbg !537
  br i1 %17, label %panic17, label %checkok24, !dbg !537

checkok24:                                        ; preds = %checkok15
  %le = icmp ule i64 %14, %sub, !dbg !533
  %18 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !533
  br i1 %18, label %panic25, label %checkok32, !dbg !533

checkok32:                                        ; preds = %checkok24
  %19 = add i64 %sub, 1, !dbg !533
  %size = sub i64 %19, 0, !dbg !533
  %20 = insertvalue %"char[]" undef, ptr %13, 0, !dbg !533
  %21 = insertvalue %"char[]" %20, i64 %size, 1, !dbg !533
  store %"char[]" %21, ptr %taddr33, align 8
  %checknull = icmp eq ptr %taddr33, null, !dbg !533
  %22 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !533
  br i1 %22, label %panic34, label %checkok35, !dbg !533

checkok35:                                        ; preds = %checkok32
  %23 = ptrtoint ptr %taddr33 to i64, !dbg !533
  %24 = urem i64 %23, 8, !dbg !533
  %25 = icmp ne i64 %24, 0, !dbg !533
  %26 = call i1 @llvm.expect.i1(i1 %25, i1 false), !dbg !533
  br i1 %26, label %panic36, label %checkok43, !dbg !533

checkok43:                                        ; preds = %checkok35
  %ptradd44 = getelementptr inbounds i8, ptr %taddr33, i64 8, !dbg !533
  %27 = load i64, ptr %ptradd44, align 8, !dbg !533
    #dbg_declare(ptr %.anon, !538, !DIExpression(), !539)
  store i64 0, ptr %.anon, align 8, !dbg !539
  br label %loop.cond45, !dbg !539

loop.cond45:                                      ; preds = %if.exit118, %checkok43
  %28 = load i64, ptr %.anon, align 8, !dbg !539
  %lt = icmp ult i64 %28, %27, !dbg !539
  br i1 %lt, label %loop.body46, label %loop.exit, !dbg !539

loop.body46:                                      ; preds = %loop.cond45
    #dbg_declare(ptr %i, !540, !DIExpression(), !542)
  %29 = load i64, ptr %.anon, align 8, !dbg !542
  store i64 %29, ptr %i, align 8, !dbg !542
    #dbg_declare(ptr %c, !543, !DIExpression(), !544)
  %checknull47 = icmp eq ptr %taddr33, null, !dbg !545
  %30 = call i1 @llvm.expect.i1(i1 %checknull47, i1 false), !dbg !545
  br i1 %30, label %panic48, label %checkok49, !dbg !545

checkok49:                                        ; preds = %loop.body46
  %31 = ptrtoint ptr %taddr33 to i64, !dbg !545
  %32 = urem i64 %31, 8, !dbg !545
  %33 = icmp ne i64 %32, 0, !dbg !545
  %34 = call i1 @llvm.expect.i1(i1 %33, i1 false), !dbg !545
  br i1 %34, label %panic50, label %checkok57, !dbg !545

checkok57:                                        ; preds = %checkok49
  %ptradd58 = getelementptr inbounds i8, ptr %taddr33, i64 8, !dbg !545
  %35 = load i64, ptr %ptradd58, align 8, !dbg !545
  %36 = load ptr, ptr %taddr33, align 8, !dbg !545
  %37 = load i64, ptr %.anon, align 8, !dbg !542
  %ge59 = icmp uge i64 %37, %35, !dbg !542
  %38 = call i1 @llvm.expect.i1(i1 %ge59, i1 false), !dbg !542
  br i1 %38, label %panic60, label %checkok67, !dbg !542

checkok67:                                        ; preds = %checkok57
  %ptradd68 = getelementptr inbounds i8, ptr %36, i64 %37, !dbg !542
  %39 = load i8, ptr %ptradd68, align 1, !dbg !542
  store i8 %39, ptr %c, align 1, !dbg !542
  %40 = load i8, ptr %c, align 1, !dbg !546
  %41 = load i8, ptr %first, align 1, !dbg !548
  %eq69 = icmp eq i8 %40, %41, !dbg !546
  br i1 %eq69, label %and.rhs, label %and.phi, !dbg !546

and.rhs:                                          ; preds = %checkok67
  %42 = load %"char[]", ptr %self, align 8, !dbg !549
  %43 = extractvalue %"char[]" %42, 0, !dbg !549
  %44 = load i64, ptr %i, align 8, !dbg !550
  %45 = extractvalue %"char[]" %42, 1, !dbg !550
  %gt70 = icmp ugt i64 %44, %45, !dbg !550
  %46 = call i1 @llvm.expect.i1(i1 %gt70, i1 false), !dbg !550
  br i1 %46, label %panic71, label %checkok78, !dbg !550

checkok78:                                        ; preds = %and.rhs
  %47 = load i64, ptr %needed, align 8, !dbg !551
  %add = add i64 %44, %47, !dbg !551
  %gt79 = icmp ugt i64 %44, %add, !dbg !551
  %sub80 = sub i64 %add, %44, !dbg !551
  %48 = call i1 @llvm.expect.i1(i1 %gt79, i1 false), !dbg !551
  br i1 %48, label %panic81, label %checkok86, !dbg !551

checkok86:                                        ; preds = %checkok78
  %lt87 = icmp ult i64 %45, %add, !dbg !549
  %sub88 = sub i64 %add, 1, !dbg !549
  %49 = call i1 @llvm.expect.i1(i1 %lt87, i1 false), !dbg !549
  br i1 %49, label %panic89, label %checkok96, !dbg !549

checkok96:                                        ; preds = %checkok86
  %size97 = sub i64 %add, %44, !dbg !549
  %ptradd98 = getelementptr inbounds i8, ptr %43, i64 %44, !dbg !549
  %50 = insertvalue %"char[]" undef, ptr %ptradd98, 0, !dbg !549
  %51 = insertvalue %"char[]" %50, i64 %size97, 1, !dbg !549
  %52 = load %"char[]", ptr %substr, align 8, !dbg !552
  %53 = extractvalue %"char[]" %51, 1, !dbg !549
  %54 = extractvalue %"char[]" %52, 1, !dbg !549
  %55 = extractvalue %"char[]" %51, 0, !dbg !549
  %56 = extractvalue %"char[]" %52, 0, !dbg !549
  %eq99 = icmp eq i64 %53, %54, !dbg !549
  br i1 %eq99, label %slice_cmp_values, label %slice_cmp_exit, !dbg !549

slice_cmp_values:                                 ; preds = %checkok96
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %57 = load i64, ptr %cmp.idx, align 8
  %lt100 = icmp slt i64 %57, %53
  br i1 %lt100, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd101 = getelementptr inbounds i8, ptr %55, i64 %57
  %ptradd102 = getelementptr inbounds i8, ptr %56, i64 %57
  %58 = load i8, ptr %ptradd101, align 1
  %59 = load i8, ptr %ptradd102, align 1
  %eq103 = icmp eq i8 %58, %59
  %60 = add i64 %57, 1
  store i64 %60, ptr %cmp.idx, align 8
  br i1 %eq103, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok96
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok96 ], [ false, %slice_loop_comparison ]
  br label %and.phi

and.phi:                                          ; preds = %slice_cmp_exit, %checkok67
  %val = phi i1 [ false, %checkok67 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val, label %if.then104, label %if.exit118

if.then104:                                       ; preds = %and.phi
  %61 = load i64, ptr %count, align 8, !dbg !553
  %add105 = add i64 %61, 1, !dbg !553
  store i64 %add105, ptr %count, align 8, !dbg !553
  %62 = load %"char[]", ptr %self, align 8, !dbg !555
  %63 = extractvalue %"char[]" %62, 0, !dbg !555
  %64 = load i64, ptr %i, align 8, !dbg !556
  %65 = load i64, ptr %needed, align 8, !dbg !557
  %add106 = add i64 %64, %65, !dbg !556
  %66 = extractvalue %"char[]" %62, 1, !dbg !556
  %gt107 = icmp ugt i64 %add106, %66, !dbg !556
  %67 = call i1 @llvm.expect.i1(i1 %gt107, i1 false), !dbg !556
  br i1 %67, label %panic108, label %checkok115, !dbg !556

checkok115:                                       ; preds = %if.then104
  %size116 = sub i64 %66, %add106, !dbg !555
  %ptradd117 = getelementptr inbounds i8, ptr %63, i64 %add106, !dbg !555
  %68 = insertvalue %"char[]" undef, ptr %ptradd117, 0, !dbg !555
  %69 = insertvalue %"char[]" %68, i64 %size116, 1, !dbg !555
  store %"char[]" %69, ptr %self, align 8, !dbg !555
  br label %loop.cond, !dbg !558

if.exit118:                                       ; preds = %and.phi
  %70 = load i64, ptr %.anon, align 8, !dbg !539
  %addnuw = add nuw i64 %70, 1, !dbg !539
  store i64 %addnuw, ptr %.anon, align 8, !dbg !539
  br label %loop.cond45, !dbg !539

loop.exit:                                        ; preds = %loop.cond45
  br label %loop.exit119, !dbg !559

loop.exit119:                                     ; preds = %loop.exit, %loop.cond
  %71 = load i64, ptr %count, align 8, !dbg !560
  ret i64 %71, !dbg !560

panic:                                            ; preds = %if.exit
  store i64 %6, ptr %taddr, align 8
  %72 = insertvalue %any undef, ptr %taddr, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr4, align 8
  %74 = insertvalue %any undef, ptr %taddr4, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %73, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %75, ptr %ptradd5, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.47, i64 5, i32 426, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !528
  unreachable, !dbg !528

panic8:                                           ; preds = %loop.body
  store i64 %14, ptr %taddr9, align 8
  %77 = insertvalue %any undef, ptr %taddr9, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %79 = insertvalue %any undef, ptr %taddr10, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots11, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots11, i64 16
  store %any %80, ptr %ptradd12, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots11, 0
  %"$$temp13" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp13", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.47, i64 5, i32 429, ptr byval(%"any[]") align 8 %indirectarg14) #6, !dbg !533
  unreachable, !dbg !533

panic17:                                          ; preds = %checkok15
  store i64 0, ptr %taddr18, align 8
  %82 = insertvalue %any undef, ptr %taddr18, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr19, align 8
  %84 = insertvalue %any undef, ptr %taddr19, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %83, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %85, ptr %ptradd21, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.48, i64 44, ptr @.file.16, i64 9, ptr @.func.47, i64 5, i32 429, ptr byval(%"any[]") align 8 %indirectarg23) #6, !dbg !533
  unreachable, !dbg !533

panic25:                                          ; preds = %checkok24
  store i64 %sub, ptr %taddr26, align 8
  %87 = insertvalue %any undef, ptr %taddr26, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr27, align 8
  %89 = insertvalue %any undef, ptr %taddr27, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %88, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %90, ptr %ptradd29, align 16
  %91 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %91, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.47, i64 5, i32 429, ptr byval(%"any[]") align 8 %indirectarg31) #6, !dbg !533
  unreachable, !dbg !533

panic34:                                          ; preds = %checkok32
  %92 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !533
  call void %92(ptr @.panic_msg.49, i64 56, ptr @.file.16, i64 9, ptr @.func.47, i64 5, i32 429) #6, !dbg !533
  unreachable, !dbg !533

panic36:                                          ; preds = %checkok35
  store i64 8, ptr %taddr37, align 8
  %93 = insertvalue %any undef, ptr %taddr37, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr38, align 8
  %95 = insertvalue %any undef, ptr %taddr38, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %94, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %96, ptr %ptradd40, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 94, ptr @.file.16, i64 9, ptr @.func.47, i64 5, i32 429, ptr byval(%"any[]") align 8 %indirectarg42) #6, !dbg !533
  unreachable, !dbg !533

panic48:                                          ; preds = %loop.body46
  %98 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !545
  call void %98(ptr @.panic_msg.49, i64 56, ptr @.file.16, i64 9, ptr @.func.47, i64 5, i32 429) #6, !dbg !545
  unreachable, !dbg !545

panic50:                                          ; preds = %checkok49
  store i64 8, ptr %taddr51, align 8
  %99 = insertvalue %any undef, ptr %taddr51, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr52, align 8
  %101 = insertvalue %any undef, ptr %taddr52, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %100, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %102, ptr %ptradd54, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 94, ptr @.file.16, i64 9, ptr @.func.47, i64 5, i32 429, ptr byval(%"any[]") align 8 %indirectarg56) #6, !dbg !545
  unreachable, !dbg !545

panic60:                                          ; preds = %checkok57
  store i64 %35, ptr %taddr61, align 8
  %104 = insertvalue %any undef, ptr %taddr61, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr62, align 8
  %106 = insertvalue %any undef, ptr %taddr62, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %105, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %107, ptr %ptradd64, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.47, i64 5, i32 429, ptr byval(%"any[]") align 8 %indirectarg66) #6, !dbg !542
  unreachable, !dbg !542

panic71:                                          ; preds = %and.rhs
  store i64 %45, ptr %taddr72, align 8
  %109 = insertvalue %any undef, ptr %taddr72, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr73, align 8
  %111 = insertvalue %any undef, ptr %taddr73, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %110, ptr %varargslots74, align 16
  %ptradd75 = getelementptr inbounds i8, ptr %varargslots74, i64 16
  store %any %112, ptr %ptradd75, align 16
  %113 = insertvalue %"any[]" undef, ptr %varargslots74, 0
  %"$$temp76" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp76", ptr %indirectarg77, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.47, i64 5, i32 431, ptr byval(%"any[]") align 8 %indirectarg77) #6, !dbg !549
  unreachable, !dbg !549

panic81:                                          ; preds = %checkok78
  store i64 %sub80, ptr %taddr82, align 8
  %114 = insertvalue %any undef, ptr %taddr82, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %115, ptr %varargslots83, align 16
  %116 = insertvalue %"any[]" undef, ptr %varargslots83, 0
  %"$$temp84" = insertvalue %"any[]" %116, i64 1, 1
  store %"any[]" %"$$temp84", ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.47, i64 5, i32 431, ptr byval(%"any[]") align 8 %indirectarg85) #6, !dbg !549
  unreachable, !dbg !549

panic89:                                          ; preds = %checkok86
  store i64 %sub88, ptr %taddr90, align 8
  %117 = insertvalue %any undef, ptr %taddr90, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr91, align 8
  %119 = insertvalue %any undef, ptr %taddr91, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %118, ptr %varargslots92, align 16
  %ptradd93 = getelementptr inbounds i8, ptr %varargslots92, i64 16
  store %any %120, ptr %ptradd93, align 16
  %121 = insertvalue %"any[]" undef, ptr %varargslots92, 0
  %"$$temp94" = insertvalue %"any[]" %121, i64 2, 1
  store %"any[]" %"$$temp94", ptr %indirectarg95, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.47, i64 5, i32 431, ptr byval(%"any[]") align 8 %indirectarg95) #6, !dbg !549
  unreachable, !dbg !549

panic108:                                         ; preds = %if.then104
  store i64 %66, ptr %taddr109, align 8
  %122 = insertvalue %any undef, ptr %taddr109, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add106, ptr %taddr110, align 8
  %124 = insertvalue %any undef, ptr %taddr110, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %123, ptr %varargslots111, align 16
  %ptradd112 = getelementptr inbounds i8, ptr %varargslots111, i64 16
  store %any %125, ptr %ptradd112, align 16
  %126 = insertvalue %"any[]" undef, ptr %varargslots111, 0
  %"$$temp113" = insertvalue %"any[]" %126, i64 2, 1
  store %"any[]" %"$$temp113", ptr %indirectarg114, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.47, i64 5, i32 434, ptr byval(%"any[]") align 8 %indirectarg114) #6, !dbg !555
  unreachable, !dbg !555
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.index_of_char(ptr %0, ptr %1, i64 %2, i8 zeroext %3) #0 comdat !dbg !561 {
entry:
  %self = alloca %"char[]", align 8
  %character = alloca i8, align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !565, !DIExpression(), !566)
  store i8 %3, ptr %character, align 1
    #dbg_declare(ptr %character, !567, !DIExpression(), !568)
  %ptradd1 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !569
  %4 = load i64, ptr %ptradd1, align 8, !dbg !569
    #dbg_declare(ptr %.anon, !571, !DIExpression(), !572)
  store i64 0, ptr %.anon, align 8, !dbg !572
  br label %loop.cond, !dbg !572

loop.cond:                                        ; preds = %if.exit, %entry
  %5 = load i64, ptr %.anon, align 8, !dbg !572
  %lt = icmp ult i64 %5, %4, !dbg !572
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !572

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !573, !DIExpression(), !575)
  %6 = load i64, ptr %.anon, align 8, !dbg !575
  store i64 %6, ptr %i, align 8, !dbg !575
    #dbg_declare(ptr %c, !576, !DIExpression(), !577)
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !578
  %7 = load i64, ptr %ptradd2, align 8, !dbg !578
  %8 = load ptr, ptr %self, align 8, !dbg !578
  %9 = load i64, ptr %.anon, align 8, !dbg !575
  %ge = icmp uge i64 %9, %7, !dbg !575
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !575
  br i1 %10, label %panic, label %checkok, !dbg !575

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !575
  %11 = load i8, ptr %ptradd5, align 1, !dbg !575
  store i8 %11, ptr %c, align 1, !dbg !575
  %12 = load i8, ptr %c, align 1, !dbg !579
  %13 = load i8, ptr %character, align 1, !dbg !581
  %eq = icmp eq i8 %12, %13, !dbg !579
  br i1 %eq, label %if.then, label %if.exit, !dbg !579

if.then:                                          ; preds = %checkok
  %14 = load i64, ptr %i, align 8, !dbg !582
  %15 = load i64, ptr %i, align 8, !dbg !583
  %ptradd6 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !584
  %16 = load i64, ptr %ptradd6, align 8, !dbg !584
  %lt7 = icmp ult i64 %15, %16, !dbg !582
  br i1 %lt7, label %assert_ok, label %assert_fail, !dbg !582

assert_fail:                                      ; preds = %if.then
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !582
  call void %17(ptr @.panic_msg.51, i64 37, ptr @.file.16, i64 9, ptr @.func.50, i64 13, i32 457) #6, !dbg !582
  unreachable, !dbg !582

assert_ok:                                        ; preds = %if.then
  store i64 %14, ptr %0, align 8, !dbg !582
  ret i64 0, !dbg !582

if.exit:                                          ; preds = %checkok
  %18 = load i64, ptr %.anon, align 8, !dbg !572
  %addnuw = add nuw i64 %18, 1, !dbg !572
  store i64 %addnuw, ptr %.anon, align 8, !dbg !572
  br label %loop.cond, !dbg !572

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !585

panic:                                            ; preds = %loop.body
  store i64 %7, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr3, align 8
  %21 = insertvalue %any undef, ptr %taddr3, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %20, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd4, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.50, i64 13, i32 455, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !575
  unreachable, !dbg !575
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.index_of_chars(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !586 {
entry:
  %self = alloca %"char[]", align 8
  %characters = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.anon8 = alloca i64, align 8
  %j = alloca i64, align 8
  %pin = alloca i8, align 1
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !589, !DIExpression(), !590)
  store ptr %3, ptr %characters, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %characters, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %characters, !591, !DIExpression(), !592)
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !593
  %5 = load i64, ptr %ptradd2, align 8, !dbg !593
    #dbg_declare(ptr %.anon, !595, !DIExpression(), !596)
  store i64 0, ptr %.anon, align 8, !dbg !596
  br label %loop.cond, !dbg !596

loop.cond:                                        ; preds = %loop.exit, %entry
  %6 = load i64, ptr %.anon, align 8, !dbg !596
  %lt = icmp ult i64 %6, %5, !dbg !596
  br i1 %lt, label %loop.body, label %loop.exit26, !dbg !596

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !597, !DIExpression(), !599)
  %7 = load i64, ptr %.anon, align 8, !dbg !599
  store i64 %7, ptr %i, align 8, !dbg !599
    #dbg_declare(ptr %c, !600, !DIExpression(), !601)
  %ptradd3 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !602
  %8 = load i64, ptr %ptradd3, align 8, !dbg !602
  %9 = load ptr, ptr %self, align 8, !dbg !602
  %10 = load i64, ptr %.anon, align 8, !dbg !599
  %ge = icmp uge i64 %10, %8, !dbg !599
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !599
  br i1 %11, label %panic, label %checkok, !dbg !599

checkok:                                          ; preds = %loop.body
  %ptradd6 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !599
  %12 = load i8, ptr %ptradd6, align 1, !dbg !599
  store i8 %12, ptr %c, align 1, !dbg !599
  %ptradd7 = getelementptr inbounds i8, ptr %characters, i64 8, !dbg !603
  %13 = load i64, ptr %ptradd7, align 8, !dbg !603
    #dbg_declare(ptr %.anon8, !606, !DIExpression(), !607)
  store i64 0, ptr %.anon8, align 8, !dbg !607
  br label %loop.cond9, !dbg !607

loop.cond9:                                       ; preds = %if.exit, %checkok
  %14 = load i64, ptr %.anon8, align 8, !dbg !607
  %lt10 = icmp ult i64 %14, %13, !dbg !607
  br i1 %lt10, label %loop.body11, label %loop.exit, !dbg !607

loop.body11:                                      ; preds = %loop.cond9
    #dbg_declare(ptr %j, !608, !DIExpression(), !610)
  %15 = load i64, ptr %.anon8, align 8, !dbg !610
  store i64 %15, ptr %j, align 8, !dbg !610
    #dbg_declare(ptr %pin, !611, !DIExpression(), !612)
  %ptradd12 = getelementptr inbounds i8, ptr %characters, i64 8, !dbg !613
  %16 = load i64, ptr %ptradd12, align 8, !dbg !613
  %17 = load ptr, ptr %characters, align 8, !dbg !613
  %18 = load i64, ptr %.anon8, align 8, !dbg !610
  %ge13 = icmp uge i64 %18, %16, !dbg !610
  %19 = call i1 @llvm.expect.i1(i1 %ge13, i1 false), !dbg !610
  br i1 %19, label %panic14, label %checkok21, !dbg !610

checkok21:                                        ; preds = %loop.body11
  %ptradd22 = getelementptr inbounds i8, ptr %17, i64 %18, !dbg !610
  %20 = load i8, ptr %ptradd22, align 1, !dbg !610
  store i8 %20, ptr %pin, align 1, !dbg !610
  %21 = load i8, ptr %c, align 1, !dbg !614
  %22 = load i8, ptr %pin, align 1, !dbg !616
  %eq = icmp eq i8 %21, %22, !dbg !614
  br i1 %eq, label %if.then, label %if.exit, !dbg !614

if.then:                                          ; preds = %checkok21
  %23 = load i64, ptr %i, align 8, !dbg !617
  %24 = load i64, ptr %i, align 8, !dbg !618
  %ptradd23 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !619
  %25 = load i64, ptr %ptradd23, align 8, !dbg !619
  %lt24 = icmp ult i64 %24, %25, !dbg !617
  br i1 %lt24, label %assert_ok, label %assert_fail, !dbg !617

assert_fail:                                      ; preds = %if.then
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !617
  call void %26(ptr @.panic_msg.51, i64 37, ptr @.file.16, i64 9, ptr @.func.52, i64 14, i32 478) #6, !dbg !617
  unreachable, !dbg !617

assert_ok:                                        ; preds = %if.then
  store i64 %23, ptr %0, align 8, !dbg !617
  ret i64 0, !dbg !617

if.exit:                                          ; preds = %checkok21
  %27 = load i64, ptr %.anon8, align 8, !dbg !607
  %addnuw = add nuw i64 %27, 1, !dbg !607
  store i64 %addnuw, ptr %.anon8, align 8, !dbg !607
  br label %loop.cond9, !dbg !607

loop.exit:                                        ; preds = %loop.cond9
  %28 = load i64, ptr %.anon, align 8, !dbg !596
  %addnuw25 = add nuw i64 %28, 1, !dbg !596
  store i64 %addnuw25, ptr %.anon, align 8, !dbg !596
  br label %loop.cond, !dbg !596

loop.exit26:                                      ; preds = %loop.cond
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !620

panic:                                            ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %29 = insertvalue %any undef, ptr %taddr, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr4, align 8
  %31 = insertvalue %any undef, ptr %taddr4, 0
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %30, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %32, ptr %ptradd5, align 16
  %33 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %33, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.52, i64 14, i32 474, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !599
  unreachable, !dbg !599

panic14:                                          ; preds = %loop.body11
  store i64 %16, ptr %taddr15, align 8
  %34 = insertvalue %any undef, ptr %taddr15, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %18, ptr %taddr16, align 8
  %36 = insertvalue %any undef, ptr %taddr16, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %35, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %37, ptr %ptradd18, align 16
  %38 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.52, i64 14, i32 476, ptr byval(%"any[]") align 8 %indirectarg20) #6, !dbg !610
  unreachable, !dbg !610
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.index_of_char_from(ptr %0, ptr %1, i64 %2, i8 zeroext %3, i64 %4) #0 comdat !dbg !621 {
entry:
  %self = alloca %"char[]", align 8
  %character = alloca i8, align 1
  %start_index = alloca i64, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !624, !DIExpression(), !625)
  store i8 %3, ptr %character, align 1
    #dbg_declare(ptr %character, !626, !DIExpression(), !627)
  store i64 %4, ptr %start_index, align 8
    #dbg_declare(ptr %start_index, !628, !DIExpression(), !629)
    #dbg_declare(ptr %len, !630, !DIExpression(), !631)
  %ptradd1 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !632
  %5 = load i64, ptr %ptradd1, align 8, !dbg !632
  store i64 %5, ptr %len, align 8, !dbg !632
  %6 = load i64, ptr %len, align 8, !dbg !633
  %7 = load i64, ptr %start_index, align 8, !dbg !634
  %le = icmp ule i64 %6, %7, !dbg !633
  br i1 %le, label %if.then, label %if.exit, !dbg !633

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !635

if.exit:                                          ; preds = %entry
    #dbg_declare(ptr %i, !636, !DIExpression(), !638)
  %8 = load i64, ptr %start_index, align 8, !dbg !639
  store i64 %8, ptr %i, align 8, !dbg !639
  br label %loop.cond, !dbg !639

loop.cond:                                        ; preds = %if.exit9, %if.exit
  %9 = load i64, ptr %i, align 8, !dbg !640
  %10 = load i64, ptr %len, align 8, !dbg !641
  %lt = icmp ult i64 %9, %10, !dbg !640
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !640

loop.body:                                        ; preds = %loop.cond
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !642
  %11 = load i64, ptr %ptradd2, align 8, !dbg !642
  %12 = load ptr, ptr %self, align 8, !dbg !642
  %13 = load i64, ptr %i, align 8, !dbg !644
  %ge = icmp uge i64 %13, %11, !dbg !644
  %14 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !644
  br i1 %14, label %panic, label %checkok, !dbg !644

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !644
  %15 = load i8, ptr %ptradd5, align 1, !dbg !644
  %16 = load i8, ptr %character, align 1, !dbg !645
  %eq = icmp eq i8 %15, %16, !dbg !642
  br i1 %eq, label %if.then6, label %if.exit9, !dbg !642

if.then6:                                         ; preds = %checkok
  %17 = load i64, ptr %i, align 8, !dbg !646
  %18 = load i64, ptr %i, align 8, !dbg !647
  %ptradd7 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !648
  %19 = load i64, ptr %ptradd7, align 8, !dbg !648
  %lt8 = icmp ult i64 %18, %19, !dbg !646
  br i1 %lt8, label %assert_ok, label %assert_fail, !dbg !646

assert_fail:                                      ; preds = %if.then6
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !646
  call void %20(ptr @.panic_msg.51, i64 37, ptr @.file.16, i64 9, ptr @.func.53, i64 18, i32 502) #6, !dbg !646
  unreachable, !dbg !646

assert_ok:                                        ; preds = %if.then6
  store i64 %17, ptr %0, align 8, !dbg !646
  ret i64 0, !dbg !646

if.exit9:                                         ; preds = %checkok
  %21 = load i64, ptr %i, align 8, !dbg !649
  %add = add i64 %21, 1, !dbg !649
  store i64 %add, ptr %i, align 8, !dbg !649
  br label %loop.cond, !dbg !649

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !650

panic:                                            ; preds = %loop.body
  store i64 %11, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr3, align 8
  %24 = insertvalue %any undef, ptr %taddr3, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd4, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.53, i64 18, i32 502, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !644
  unreachable, !dbg !644
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.rindex_of_char(ptr %0, ptr %1, i64 %2, i8 zeroext %3) #0 comdat !dbg !651 {
entry:
  %self = alloca %"char[]", align 8
  %character = alloca i8, align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !652, !DIExpression(), !653)
  store i8 %3, ptr %character, align 1
    #dbg_declare(ptr %character, !654, !DIExpression(), !655)
    #dbg_declare(ptr %.anon, !656, !DIExpression(), !658)
  %ptradd1 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !659
  %4 = load i64, ptr %ptradd1, align 8, !dbg !659
  store i64 %4, ptr %.anon, align 8, !dbg !659
  br label %loop.cond, !dbg !659

loop.cond:                                        ; preds = %if.exit, %entry
  %5 = load i64, ptr %.anon, align 8, !dbg !658
  %gt = icmp ugt i64 %5, 0, !dbg !658
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !658

loop.body:                                        ; preds = %loop.cond
  %6 = load i64, ptr %.anon, align 8, !dbg !658
  %subnuw = sub nuw i64 %6, 1, !dbg !658
  store i64 %subnuw, ptr %.anon, align 8, !dbg !658
    #dbg_declare(ptr %i, !660, !DIExpression(), !662)
  %7 = load i64, ptr %.anon, align 8, !dbg !662
  store i64 %7, ptr %i, align 8, !dbg !662
    #dbg_declare(ptr %c, !663, !DIExpression(), !664)
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !665
  %8 = load i64, ptr %ptradd2, align 8, !dbg !665
  %9 = load ptr, ptr %self, align 8, !dbg !665
  %10 = load i64, ptr %.anon, align 8, !dbg !662
  %ge = icmp uge i64 %10, %8, !dbg !662
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !662
  br i1 %11, label %panic, label %checkok, !dbg !662

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !662
  %12 = load i8, ptr %ptradd5, align 1, !dbg !662
  store i8 %12, ptr %c, align 1, !dbg !662
  %13 = load i8, ptr %c, align 1, !dbg !666
  %14 = load i8, ptr %character, align 1, !dbg !668
  %eq = icmp eq i8 %13, %14, !dbg !666
  br i1 %eq, label %if.then, label %if.exit, !dbg !666

if.then:                                          ; preds = %checkok
  %15 = load i64, ptr %i, align 8, !dbg !669
  %16 = load i64, ptr %i, align 8, !dbg !670
  %ptradd6 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !671
  %17 = load i64, ptr %ptradd6, align 8, !dbg !671
  %lt = icmp ult i64 %16, %17, !dbg !669
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !669

assert_fail:                                      ; preds = %if.then
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !669
  call void %18(ptr @.panic_msg.51, i64 37, ptr @.file.16, i64 9, ptr @.func.54, i64 14, i32 521) #6, !dbg !669
  unreachable, !dbg !669

assert_ok:                                        ; preds = %if.then
  store i64 %15, ptr %0, align 8, !dbg !669
  ret i64 0, !dbg !669

if.exit:                                          ; preds = %checkok
  br label %loop.cond, !dbg !669

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !672

panic:                                            ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr3, align 8
  %21 = insertvalue %any undef, ptr %taddr3, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %20, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd4, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.54, i64 14, i32 519, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !662
  unreachable, !dbg !662
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.index_of(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !673 {
entry:
  %self = alloca %"char[]", align 8
  %substr = alloca %"char[]", align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %varargslots13 = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr52 = alloca i64, align 8
  %taddr53 = alloca i64, align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr62 = alloca i64, align 8
  %taddr63 = alloca i64, align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr73 = alloca i64, align 8
  %taddr74 = alloca i64, align 8
  %varargslots75 = alloca [2 x %any], align 16
  %indirectarg78 = alloca %"any[]", align 8
  %taddr83 = alloca i64, align 8
  %varargslots84 = alloca [1 x %any], align 16
  %indirectarg86 = alloca %"any[]", align 8
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %varargslots93 = alloca [2 x %any], align 16
  %indirectarg96 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !676, !DIExpression(), !677)
  store ptr %3, ptr %substr, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %substr, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %substr, !678, !DIExpression(), !679)
  %ptradd2 = getelementptr inbounds i8, ptr %substr, i64 8, !dbg !680
  %5 = load i64, ptr %ptradd2, align 8, !dbg !680
  %lt = icmp ult i64 0, %5, !dbg !680
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !680

assert_fail:                                      ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !680
  call void %6(ptr @.panic_msg.38, i64 71, ptr @.file.16, i64 9, ptr @.func.55, i64 8, i32 533) #6, !dbg !680
  unreachable, !dbg !680

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %needed, !682, !DIExpression(), !683)
  %ptradd3 = getelementptr inbounds i8, ptr %substr, i64 8, !dbg !684
  %7 = load i64, ptr %ptradd3, align 8, !dbg !684
  store i64 %7, ptr %needed, align 8, !dbg !684
  %8 = load i64, ptr %needed, align 8, !dbg !685
  %lt4 = icmp ult i64 0, %8, !dbg !685
  br i1 %lt4, label %and.rhs, label %and.phi, !dbg !685

and.rhs:                                          ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !686
  %9 = load i64, ptr %ptradd5, align 8, !dbg !686
  %10 = load i64, ptr %needed, align 8, !dbg !687
  %ge = icmp uge i64 %9, %10, !dbg !686
  br label %and.phi, !dbg !686

and.phi:                                          ; preds = %and.rhs, %assert_ok
  %val = phi i1 [ false, %assert_ok ], [ %ge, %and.rhs ], !dbg !686
  br i1 %val, label %if.then, label %if.exit112, !dbg !686

if.then:                                          ; preds = %and.phi
    #dbg_declare(ptr %first, !688, !DIExpression(), !690)
  %ptradd6 = getelementptr inbounds i8, ptr %substr, i64 8, !dbg !691
  %11 = load i64, ptr %ptradd6, align 8, !dbg !691
  %12 = load ptr, ptr %substr, align 8, !dbg !691
  %ge7 = icmp sge i64 0, %11, !dbg !692
  %13 = call i1 @llvm.expect.i1(i1 %ge7, i1 false), !dbg !692
  br i1 %13, label %panic, label %checkok, !dbg !692

checkok:                                          ; preds = %if.then
  %14 = load i8, ptr %12, align 1, !dbg !692
  store i8 %14, ptr %first, align 1, !dbg !692
  %15 = load %"char[]", ptr %self, align 8, !dbg !693
  %16 = extractvalue %"char[]" %15, 0, !dbg !693
  %17 = extractvalue %"char[]" %15, 1, !dbg !695
  %gt = icmp ugt i64 0, %17, !dbg !695
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !695
  br i1 %18, label %panic10, label %checkok17, !dbg !695

checkok17:                                        ; preds = %checkok
  %19 = load i64, ptr %needed, align 8, !dbg !696
  %sub = sub i64 %17, %19, !dbg !696
  %gt18 = icmp ugt i64 0, %sub, !dbg !696
  %20 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !696
  br i1 %20, label %panic19, label %checkok26, !dbg !696

checkok26:                                        ; preds = %checkok17
  %le = icmp ule i64 %17, %sub, !dbg !693
  %21 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !693
  br i1 %21, label %panic27, label %checkok34, !dbg !693

checkok34:                                        ; preds = %checkok26
  %22 = add i64 %sub, 1, !dbg !693
  %size = sub i64 %22, 0, !dbg !693
  %23 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !693
  %24 = insertvalue %"char[]" %23, i64 %size, 1, !dbg !693
  store %"char[]" %24, ptr %taddr35, align 8
  %checknull = icmp eq ptr %taddr35, null, !dbg !693
  %25 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !693
  br i1 %25, label %panic36, label %checkok37, !dbg !693

checkok37:                                        ; preds = %checkok34
  %26 = ptrtoint ptr %taddr35 to i64, !dbg !693
  %27 = urem i64 %26, 8, !dbg !693
  %28 = icmp ne i64 %27, 0, !dbg !693
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false), !dbg !693
  br i1 %29, label %panic38, label %checkok45, !dbg !693

checkok45:                                        ; preds = %checkok37
  %ptradd46 = getelementptr inbounds i8, ptr %taddr35, i64 8, !dbg !693
  %30 = load i64, ptr %ptradd46, align 8, !dbg !693
    #dbg_declare(ptr %.anon, !697, !DIExpression(), !698)
  store i64 0, ptr %.anon, align 8, !dbg !698
  br label %loop.cond, !dbg !698

loop.cond:                                        ; preds = %if.exit, %checkok45
  %31 = load i64, ptr %.anon, align 8, !dbg !698
  %lt47 = icmp ult i64 %31, %30, !dbg !698
  br i1 %lt47, label %loop.body, label %loop.exit, !dbg !698

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !699, !DIExpression(), !701)
  %32 = load i64, ptr %.anon, align 8, !dbg !701
  store i64 %32, ptr %i, align 8, !dbg !701
    #dbg_declare(ptr %c, !702, !DIExpression(), !703)
  %checknull48 = icmp eq ptr %taddr35, null, !dbg !704
  %33 = call i1 @llvm.expect.i1(i1 %checknull48, i1 false), !dbg !704
  br i1 %33, label %panic49, label %checkok50, !dbg !704

checkok50:                                        ; preds = %loop.body
  %34 = ptrtoint ptr %taddr35 to i64, !dbg !704
  %35 = urem i64 %34, 8, !dbg !704
  %36 = icmp ne i64 %35, 0, !dbg !704
  %37 = call i1 @llvm.expect.i1(i1 %36, i1 false), !dbg !704
  br i1 %37, label %panic51, label %checkok58, !dbg !704

checkok58:                                        ; preds = %checkok50
  %ptradd59 = getelementptr inbounds i8, ptr %taddr35, i64 8, !dbg !704
  %38 = load i64, ptr %ptradd59, align 8, !dbg !704
  %39 = load ptr, ptr %taddr35, align 8, !dbg !704
  %40 = load i64, ptr %.anon, align 8, !dbg !701
  %ge60 = icmp uge i64 %40, %38, !dbg !701
  %41 = call i1 @llvm.expect.i1(i1 %ge60, i1 false), !dbg !701
  br i1 %41, label %panic61, label %checkok68, !dbg !701

checkok68:                                        ; preds = %checkok58
  %ptradd69 = getelementptr inbounds i8, ptr %39, i64 %40, !dbg !701
  %42 = load i8, ptr %ptradd69, align 1, !dbg !701
  store i8 %42, ptr %c, align 1, !dbg !701
  %43 = load i8, ptr %c, align 1, !dbg !705
  %44 = load i8, ptr %first, align 1, !dbg !707
  %eq = icmp eq i8 %43, %44, !dbg !705
  br i1 %eq, label %and.rhs70, label %and.phi105, !dbg !705

and.rhs70:                                        ; preds = %checkok68
  %45 = load %"char[]", ptr %self, align 8, !dbg !708
  %46 = extractvalue %"char[]" %45, 0, !dbg !708
  %47 = load i64, ptr %i, align 8, !dbg !709
  %48 = extractvalue %"char[]" %45, 1, !dbg !709
  %gt71 = icmp ugt i64 %47, %48, !dbg !709
  %49 = call i1 @llvm.expect.i1(i1 %gt71, i1 false), !dbg !709
  br i1 %49, label %panic72, label %checkok79, !dbg !709

checkok79:                                        ; preds = %and.rhs70
  %50 = load i64, ptr %needed, align 8, !dbg !710
  %add = add i64 %47, %50, !dbg !710
  %gt80 = icmp ugt i64 %47, %add, !dbg !710
  %sub81 = sub i64 %add, %47, !dbg !710
  %51 = call i1 @llvm.expect.i1(i1 %gt80, i1 false), !dbg !710
  br i1 %51, label %panic82, label %checkok87, !dbg !710

checkok87:                                        ; preds = %checkok79
  %lt88 = icmp ult i64 %48, %add, !dbg !708
  %sub89 = sub i64 %add, 1, !dbg !708
  %52 = call i1 @llvm.expect.i1(i1 %lt88, i1 false), !dbg !708
  br i1 %52, label %panic90, label %checkok97, !dbg !708

checkok97:                                        ; preds = %checkok87
  %size98 = sub i64 %add, %47, !dbg !708
  %ptradd99 = getelementptr inbounds i8, ptr %46, i64 %47, !dbg !708
  %53 = insertvalue %"char[]" undef, ptr %ptradd99, 0, !dbg !708
  %54 = insertvalue %"char[]" %53, i64 %size98, 1, !dbg !708
  %55 = load %"char[]", ptr %substr, align 8, !dbg !711
  %56 = extractvalue %"char[]" %54, 1, !dbg !708
  %57 = extractvalue %"char[]" %55, 1, !dbg !708
  %58 = extractvalue %"char[]" %54, 0, !dbg !708
  %59 = extractvalue %"char[]" %55, 0, !dbg !708
  %eq100 = icmp eq i64 %56, %57, !dbg !708
  br i1 %eq100, label %slice_cmp_values, label %slice_cmp_exit, !dbg !708

slice_cmp_values:                                 ; preds = %checkok97
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %60 = load i64, ptr %cmp.idx, align 8
  %lt101 = icmp slt i64 %60, %56
  br i1 %lt101, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd102 = getelementptr inbounds i8, ptr %58, i64 %60
  %ptradd103 = getelementptr inbounds i8, ptr %59, i64 %60
  %61 = load i8, ptr %ptradd102, align 1
  %62 = load i8, ptr %ptradd103, align 1
  %eq104 = icmp eq i8 %61, %62
  %63 = add i64 %60, 1
  store i64 %63, ptr %cmp.idx, align 8
  br i1 %eq104, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok97
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok97 ], [ false, %slice_loop_comparison ]
  br label %and.phi105

and.phi105:                                       ; preds = %slice_cmp_exit, %checkok68
  %val106 = phi i1 [ false, %checkok68 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val106, label %if.then107, label %if.exit

if.then107:                                       ; preds = %and.phi105
  %64 = load i64, ptr %i, align 8, !dbg !712
  %65 = load i64, ptr %i, align 8, !dbg !713
  %ptradd108 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !714
  %66 = load i64, ptr %ptradd108, align 8, !dbg !714
  %lt109 = icmp ult i64 %65, %66, !dbg !712
  br i1 %lt109, label %assert_ok111, label %assert_fail110, !dbg !712

assert_fail110:                                   ; preds = %if.then107
  %67 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !712
  call void %67(ptr @.panic_msg.51, i64 37, ptr @.file.16, i64 9, ptr @.func.55, i64 8, i32 545) #6, !dbg !712
  unreachable, !dbg !712

assert_ok111:                                     ; preds = %if.then107
  store i64 %64, ptr %0, align 8, !dbg !712
  ret i64 0, !dbg !712

if.exit:                                          ; preds = %and.phi105
  %68 = load i64, ptr %.anon, align 8, !dbg !698
  %addnuw = add nuw i64 %68, 1, !dbg !698
  store i64 %addnuw, ptr %.anon, align 8, !dbg !698
  br label %loop.cond, !dbg !698

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit112, !dbg !698

if.exit112:                                       ; preds = %loop.exit, %and.phi
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !715

panic:                                            ; preds = %if.then
  store i64 %11, ptr %taddr, align 8
  %69 = insertvalue %any undef, ptr %taddr, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %71 = insertvalue %any undef, ptr %taddr8, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %70, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %72, ptr %ptradd9, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.55, i64 8, i32 542, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !692
  unreachable, !dbg !692

panic10:                                          ; preds = %checkok
  store i64 %17, ptr %taddr11, align 8
  %74 = insertvalue %any undef, ptr %taddr11, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %76 = insertvalue %any undef, ptr %taddr12, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %75, ptr %varargslots13, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %77, ptr %ptradd14, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.55, i64 8, i32 543, ptr byval(%"any[]") align 8 %indirectarg16) #6, !dbg !693
  unreachable, !dbg !693

panic19:                                          ; preds = %checkok17
  store i64 0, ptr %taddr20, align 8
  %79 = insertvalue %any undef, ptr %taddr20, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr21, align 8
  %81 = insertvalue %any undef, ptr %taddr21, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %80, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %82, ptr %ptradd23, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.48, i64 44, ptr @.file.16, i64 9, ptr @.func.55, i64 8, i32 543, ptr byval(%"any[]") align 8 %indirectarg25) #6, !dbg !693
  unreachable, !dbg !693

panic27:                                          ; preds = %checkok26
  store i64 %sub, ptr %taddr28, align 8
  %84 = insertvalue %any undef, ptr %taddr28, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr29, align 8
  %86 = insertvalue %any undef, ptr %taddr29, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %85, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %87, ptr %ptradd31, align 16
  %88 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %88, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.55, i64 8, i32 543, ptr byval(%"any[]") align 8 %indirectarg33) #6, !dbg !693
  unreachable, !dbg !693

panic36:                                          ; preds = %checkok34
  %89 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !693
  call void %89(ptr @.panic_msg.49, i64 56, ptr @.file.16, i64 9, ptr @.func.55, i64 8, i32 543) #6, !dbg !693
  unreachable, !dbg !693

panic38:                                          ; preds = %checkok37
  store i64 8, ptr %taddr39, align 8
  %90 = insertvalue %any undef, ptr %taddr39, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr40, align 8
  %92 = insertvalue %any undef, ptr %taddr40, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %93, ptr %ptradd42, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 94, ptr @.file.16, i64 9, ptr @.func.55, i64 8, i32 543, ptr byval(%"any[]") align 8 %indirectarg44) #6, !dbg !693
  unreachable, !dbg !693

panic49:                                          ; preds = %loop.body
  %95 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !704
  call void %95(ptr @.panic_msg.49, i64 56, ptr @.file.16, i64 9, ptr @.func.55, i64 8, i32 543) #6, !dbg !704
  unreachable, !dbg !704

panic51:                                          ; preds = %checkok50
  store i64 8, ptr %taddr52, align 8
  %96 = insertvalue %any undef, ptr %taddr52, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr53, align 8
  %98 = insertvalue %any undef, ptr %taddr53, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %97, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %99, ptr %ptradd55, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 94, ptr @.file.16, i64 9, ptr @.func.55, i64 8, i32 543, ptr byval(%"any[]") align 8 %indirectarg57) #6, !dbg !704
  unreachable, !dbg !704

panic61:                                          ; preds = %checkok58
  store i64 %38, ptr %taddr62, align 8
  %101 = insertvalue %any undef, ptr %taddr62, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr63, align 8
  %103 = insertvalue %any undef, ptr %taddr63, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %102, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %104, ptr %ptradd65, align 16
  %105 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.55, i64 8, i32 543, ptr byval(%"any[]") align 8 %indirectarg67) #6, !dbg !701
  unreachable, !dbg !701

panic72:                                          ; preds = %and.rhs70
  store i64 %48, ptr %taddr73, align 8
  %106 = insertvalue %any undef, ptr %taddr73, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %47, ptr %taddr74, align 8
  %108 = insertvalue %any undef, ptr %taddr74, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %107, ptr %varargslots75, align 16
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp77", ptr %indirectarg78, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.55, i64 8, i32 545, ptr byval(%"any[]") align 8 %indirectarg78) #6, !dbg !708
  unreachable, !dbg !708

panic82:                                          ; preds = %checkok79
  store i64 %sub81, ptr %taddr83, align 8
  %111 = insertvalue %any undef, ptr %taddr83, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %112, ptr %varargslots84, align 16
  %113 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp85" = insertvalue %"any[]" %113, i64 1, 1
  store %"any[]" %"$$temp85", ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.55, i64 8, i32 545, ptr byval(%"any[]") align 8 %indirectarg86) #6, !dbg !708
  unreachable, !dbg !708

panic90:                                          ; preds = %checkok87
  store i64 %sub89, ptr %taddr91, align 8
  %114 = insertvalue %any undef, ptr %taddr91, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %48, ptr %taddr92, align 8
  %116 = insertvalue %any undef, ptr %taddr92, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %115, ptr %varargslots93, align 16
  %ptradd94 = getelementptr inbounds i8, ptr %varargslots93, i64 16
  store %any %117, ptr %ptradd94, align 16
  %118 = insertvalue %"any[]" undef, ptr %varargslots93, 0
  %"$$temp95" = insertvalue %"any[]" %118, i64 2, 1
  store %"any[]" %"$$temp95", ptr %indirectarg96, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.55, i64 8, i32 545, ptr byval(%"any[]") align 8 %indirectarg96) #6, !dbg !708
  unreachable, !dbg !708
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.rindex_of(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !716 {
entry:
  %self = alloca %"char[]", align 8
  %substr = alloca %"char[]", align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %varargslots13 = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr52 = alloca i64, align 8
  %taddr53 = alloca i64, align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr62 = alloca i64, align 8
  %taddr63 = alloca i64, align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr73 = alloca i64, align 8
  %taddr74 = alloca i64, align 8
  %varargslots75 = alloca [2 x %any], align 16
  %indirectarg78 = alloca %"any[]", align 8
  %taddr83 = alloca i64, align 8
  %varargslots84 = alloca [1 x %any], align 16
  %indirectarg86 = alloca %"any[]", align 8
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %varargslots93 = alloca [2 x %any], align 16
  %indirectarg96 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !717, !DIExpression(), !718)
  store ptr %3, ptr %substr, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %substr, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %substr, !719, !DIExpression(), !720)
  %ptradd2 = getelementptr inbounds i8, ptr %substr, i64 8, !dbg !721
  %5 = load i64, ptr %ptradd2, align 8, !dbg !721
  %lt = icmp ult i64 0, %5, !dbg !721
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !721

assert_fail:                                      ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !721
  call void %6(ptr @.panic_msg.56, i64 74, ptr @.file.16, i64 9, ptr @.func.57, i64 9, i32 558) #6, !dbg !721
  unreachable, !dbg !721

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %needed, !723, !DIExpression(), !724)
  %ptradd3 = getelementptr inbounds i8, ptr %substr, i64 8, !dbg !725
  %7 = load i64, ptr %ptradd3, align 8, !dbg !725
  store i64 %7, ptr %needed, align 8, !dbg !725
  %8 = load i64, ptr %needed, align 8, !dbg !726
  %lt4 = icmp ult i64 0, %8, !dbg !726
  br i1 %lt4, label %and.rhs, label %and.phi, !dbg !726

and.rhs:                                          ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !727
  %9 = load i64, ptr %ptradd5, align 8, !dbg !727
  %10 = load i64, ptr %needed, align 8, !dbg !728
  %ge = icmp uge i64 %9, %10, !dbg !727
  br label %and.phi, !dbg !727

and.phi:                                          ; preds = %and.rhs, %assert_ok
  %val = phi i1 [ false, %assert_ok ], [ %ge, %and.rhs ], !dbg !727
  br i1 %val, label %if.then, label %if.exit112, !dbg !727

if.then:                                          ; preds = %and.phi
    #dbg_declare(ptr %first, !729, !DIExpression(), !731)
  %ptradd6 = getelementptr inbounds i8, ptr %substr, i64 8, !dbg !732
  %11 = load i64, ptr %ptradd6, align 8, !dbg !732
  %12 = load ptr, ptr %substr, align 8, !dbg !732
  %ge7 = icmp sge i64 0, %11, !dbg !733
  %13 = call i1 @llvm.expect.i1(i1 %ge7, i1 false), !dbg !733
  br i1 %13, label %panic, label %checkok, !dbg !733

checkok:                                          ; preds = %if.then
  %14 = load i8, ptr %12, align 1, !dbg !733
  store i8 %14, ptr %first, align 1, !dbg !733
  %15 = load %"char[]", ptr %self, align 8, !dbg !734
  %16 = extractvalue %"char[]" %15, 0, !dbg !734
  %17 = extractvalue %"char[]" %15, 1, !dbg !736
  %gt = icmp ugt i64 0, %17, !dbg !736
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !736
  br i1 %18, label %panic10, label %checkok17, !dbg !736

checkok17:                                        ; preds = %checkok
  %19 = load i64, ptr %needed, align 8, !dbg !737
  %sub = sub i64 %17, %19, !dbg !737
  %gt18 = icmp ugt i64 0, %sub, !dbg !737
  %20 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !737
  br i1 %20, label %panic19, label %checkok26, !dbg !737

checkok26:                                        ; preds = %checkok17
  %le = icmp ule i64 %17, %sub, !dbg !734
  %21 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !734
  br i1 %21, label %panic27, label %checkok34, !dbg !734

checkok34:                                        ; preds = %checkok26
  %22 = add i64 %sub, 1, !dbg !734
  %size = sub i64 %22, 0, !dbg !734
  %23 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !734
  %24 = insertvalue %"char[]" %23, i64 %size, 1, !dbg !734
  store %"char[]" %24, ptr %taddr35, align 8
    #dbg_declare(ptr %.anon, !738, !DIExpression(), !739)
  %checknull = icmp eq ptr %taddr35, null, !dbg !734
  %25 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !734
  br i1 %25, label %panic36, label %checkok37, !dbg !734

checkok37:                                        ; preds = %checkok34
  %26 = ptrtoint ptr %taddr35 to i64, !dbg !734
  %27 = urem i64 %26, 8, !dbg !734
  %28 = icmp ne i64 %27, 0, !dbg !734
  %29 = call i1 @llvm.expect.i1(i1 %28, i1 false), !dbg !734
  br i1 %29, label %panic38, label %checkok45, !dbg !734

checkok45:                                        ; preds = %checkok37
  %ptradd46 = getelementptr inbounds i8, ptr %taddr35, i64 8, !dbg !734
  %30 = load i64, ptr %ptradd46, align 8, !dbg !734
  store i64 %30, ptr %.anon, align 8, !dbg !734
  br label %loop.cond, !dbg !734

loop.cond:                                        ; preds = %if.exit, %checkok45
  %31 = load i64, ptr %.anon, align 8, !dbg !739
  %gt47 = icmp ugt i64 %31, 0, !dbg !739
  br i1 %gt47, label %loop.body, label %loop.exit, !dbg !739

loop.body:                                        ; preds = %loop.cond
  %32 = load i64, ptr %.anon, align 8, !dbg !739
  %subnuw = sub nuw i64 %32, 1, !dbg !739
  store i64 %subnuw, ptr %.anon, align 8, !dbg !739
    #dbg_declare(ptr %i, !740, !DIExpression(), !742)
  %33 = load i64, ptr %.anon, align 8, !dbg !742
  store i64 %33, ptr %i, align 8, !dbg !742
    #dbg_declare(ptr %c, !743, !DIExpression(), !744)
  %checknull48 = icmp eq ptr %taddr35, null, !dbg !745
  %34 = call i1 @llvm.expect.i1(i1 %checknull48, i1 false), !dbg !745
  br i1 %34, label %panic49, label %checkok50, !dbg !745

checkok50:                                        ; preds = %loop.body
  %35 = ptrtoint ptr %taddr35 to i64, !dbg !745
  %36 = urem i64 %35, 8, !dbg !745
  %37 = icmp ne i64 %36, 0, !dbg !745
  %38 = call i1 @llvm.expect.i1(i1 %37, i1 false), !dbg !745
  br i1 %38, label %panic51, label %checkok58, !dbg !745

checkok58:                                        ; preds = %checkok50
  %ptradd59 = getelementptr inbounds i8, ptr %taddr35, i64 8, !dbg !745
  %39 = load i64, ptr %ptradd59, align 8, !dbg !745
  %40 = load ptr, ptr %taddr35, align 8, !dbg !745
  %41 = load i64, ptr %.anon, align 8, !dbg !742
  %ge60 = icmp uge i64 %41, %39, !dbg !742
  %42 = call i1 @llvm.expect.i1(i1 %ge60, i1 false), !dbg !742
  br i1 %42, label %panic61, label %checkok68, !dbg !742

checkok68:                                        ; preds = %checkok58
  %ptradd69 = getelementptr inbounds i8, ptr %40, i64 %41, !dbg !742
  %43 = load i8, ptr %ptradd69, align 1, !dbg !742
  store i8 %43, ptr %c, align 1, !dbg !742
  %44 = load i8, ptr %c, align 1, !dbg !746
  %45 = load i8, ptr %first, align 1, !dbg !748
  %eq = icmp eq i8 %44, %45, !dbg !746
  br i1 %eq, label %and.rhs70, label %and.phi105, !dbg !746

and.rhs70:                                        ; preds = %checkok68
  %46 = load %"char[]", ptr %self, align 8, !dbg !749
  %47 = extractvalue %"char[]" %46, 0, !dbg !749
  %48 = load i64, ptr %i, align 8, !dbg !750
  %49 = extractvalue %"char[]" %46, 1, !dbg !750
  %gt71 = icmp ugt i64 %48, %49, !dbg !750
  %50 = call i1 @llvm.expect.i1(i1 %gt71, i1 false), !dbg !750
  br i1 %50, label %panic72, label %checkok79, !dbg !750

checkok79:                                        ; preds = %and.rhs70
  %51 = load i64, ptr %needed, align 8, !dbg !751
  %add = add i64 %48, %51, !dbg !751
  %gt80 = icmp ugt i64 %48, %add, !dbg !751
  %sub81 = sub i64 %add, %48, !dbg !751
  %52 = call i1 @llvm.expect.i1(i1 %gt80, i1 false), !dbg !751
  br i1 %52, label %panic82, label %checkok87, !dbg !751

checkok87:                                        ; preds = %checkok79
  %lt88 = icmp ult i64 %49, %add, !dbg !749
  %sub89 = sub i64 %add, 1, !dbg !749
  %53 = call i1 @llvm.expect.i1(i1 %lt88, i1 false), !dbg !749
  br i1 %53, label %panic90, label %checkok97, !dbg !749

checkok97:                                        ; preds = %checkok87
  %size98 = sub i64 %add, %48, !dbg !749
  %ptradd99 = getelementptr inbounds i8, ptr %47, i64 %48, !dbg !749
  %54 = insertvalue %"char[]" undef, ptr %ptradd99, 0, !dbg !749
  %55 = insertvalue %"char[]" %54, i64 %size98, 1, !dbg !749
  %56 = load %"char[]", ptr %substr, align 8, !dbg !752
  %57 = extractvalue %"char[]" %55, 1, !dbg !749
  %58 = extractvalue %"char[]" %56, 1, !dbg !749
  %59 = extractvalue %"char[]" %55, 0, !dbg !749
  %60 = extractvalue %"char[]" %56, 0, !dbg !749
  %eq100 = icmp eq i64 %57, %58, !dbg !749
  br i1 %eq100, label %slice_cmp_values, label %slice_cmp_exit, !dbg !749

slice_cmp_values:                                 ; preds = %checkok97
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %61 = load i64, ptr %cmp.idx, align 8
  %lt101 = icmp slt i64 %61, %57
  br i1 %lt101, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd102 = getelementptr inbounds i8, ptr %59, i64 %61
  %ptradd103 = getelementptr inbounds i8, ptr %60, i64 %61
  %62 = load i8, ptr %ptradd102, align 1
  %63 = load i8, ptr %ptradd103, align 1
  %eq104 = icmp eq i8 %62, %63
  %64 = add i64 %61, 1
  store i64 %64, ptr %cmp.idx, align 8
  br i1 %eq104, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok97
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok97 ], [ false, %slice_loop_comparison ]
  br label %and.phi105

and.phi105:                                       ; preds = %slice_cmp_exit, %checkok68
  %val106 = phi i1 [ false, %checkok68 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val106, label %if.then107, label %if.exit

if.then107:                                       ; preds = %and.phi105
  %65 = load i64, ptr %i, align 8, !dbg !753
  %66 = load i64, ptr %i, align 8, !dbg !754
  %ptradd108 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !755
  %67 = load i64, ptr %ptradd108, align 8, !dbg !755
  %lt109 = icmp ult i64 %66, %67, !dbg !753
  br i1 %lt109, label %assert_ok111, label %assert_fail110, !dbg !753

assert_fail110:                                   ; preds = %if.then107
  %68 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !753
  call void %68(ptr @.panic_msg.51, i64 37, ptr @.file.16, i64 9, ptr @.func.57, i64 9, i32 570) #6, !dbg !753
  unreachable, !dbg !753

assert_ok111:                                     ; preds = %if.then107
  store i64 %65, ptr %0, align 8, !dbg !753
  ret i64 0, !dbg !753

if.exit:                                          ; preds = %and.phi105
  br label %loop.cond, !dbg !753

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit112, !dbg !753

if.exit112:                                       ; preds = %loop.exit, %and.phi
  ret i64 ptrtoint (ptr @std.core.builtin.NOT_FOUND to i64), !dbg !756

panic:                                            ; preds = %if.then
  store i64 %11, ptr %taddr, align 8
  %69 = insertvalue %any undef, ptr %taddr, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %71 = insertvalue %any undef, ptr %taddr8, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %70, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %72, ptr %ptradd9, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.57, i64 9, i32 567, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !733
  unreachable, !dbg !733

panic10:                                          ; preds = %checkok
  store i64 %17, ptr %taddr11, align 8
  %74 = insertvalue %any undef, ptr %taddr11, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %76 = insertvalue %any undef, ptr %taddr12, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %75, ptr %varargslots13, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %77, ptr %ptradd14, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.57, i64 9, i32 568, ptr byval(%"any[]") align 8 %indirectarg16) #6, !dbg !734
  unreachable, !dbg !734

panic19:                                          ; preds = %checkok17
  store i64 0, ptr %taddr20, align 8
  %79 = insertvalue %any undef, ptr %taddr20, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr21, align 8
  %81 = insertvalue %any undef, ptr %taddr21, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %80, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %82, ptr %ptradd23, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.48, i64 44, ptr @.file.16, i64 9, ptr @.func.57, i64 9, i32 568, ptr byval(%"any[]") align 8 %indirectarg25) #6, !dbg !734
  unreachable, !dbg !734

panic27:                                          ; preds = %checkok26
  store i64 %sub, ptr %taddr28, align 8
  %84 = insertvalue %any undef, ptr %taddr28, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr29, align 8
  %86 = insertvalue %any undef, ptr %taddr29, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %85, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %87, ptr %ptradd31, align 16
  %88 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %88, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.57, i64 9, i32 568, ptr byval(%"any[]") align 8 %indirectarg33) #6, !dbg !734
  unreachable, !dbg !734

panic36:                                          ; preds = %checkok34
  %89 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !734
  call void %89(ptr @.panic_msg.49, i64 56, ptr @.file.16, i64 9, ptr @.func.57, i64 9, i32 568) #6, !dbg !734
  unreachable, !dbg !734

panic38:                                          ; preds = %checkok37
  store i64 8, ptr %taddr39, align 8
  %90 = insertvalue %any undef, ptr %taddr39, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr40, align 8
  %92 = insertvalue %any undef, ptr %taddr40, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %93, ptr %ptradd42, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 94, ptr @.file.16, i64 9, ptr @.func.57, i64 9, i32 568, ptr byval(%"any[]") align 8 %indirectarg44) #6, !dbg !734
  unreachable, !dbg !734

panic49:                                          ; preds = %loop.body
  %95 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !745
  call void %95(ptr @.panic_msg.49, i64 56, ptr @.file.16, i64 9, ptr @.func.57, i64 9, i32 568) #6, !dbg !745
  unreachable, !dbg !745

panic51:                                          ; preds = %checkok50
  store i64 8, ptr %taddr52, align 8
  %96 = insertvalue %any undef, ptr %taddr52, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr53, align 8
  %98 = insertvalue %any undef, ptr %taddr53, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %97, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %99, ptr %ptradd55, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 94, ptr @.file.16, i64 9, ptr @.func.57, i64 9, i32 568, ptr byval(%"any[]") align 8 %indirectarg57) #6, !dbg !745
  unreachable, !dbg !745

panic61:                                          ; preds = %checkok58
  store i64 %39, ptr %taddr62, align 8
  %101 = insertvalue %any undef, ptr %taddr62, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr63, align 8
  %103 = insertvalue %any undef, ptr %taddr63, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %102, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %104, ptr %ptradd65, align 16
  %105 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.57, i64 9, i32 568, ptr byval(%"any[]") align 8 %indirectarg67) #6, !dbg !742
  unreachable, !dbg !742

panic72:                                          ; preds = %and.rhs70
  store i64 %49, ptr %taddr73, align 8
  %106 = insertvalue %any undef, ptr %taddr73, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %48, ptr %taddr74, align 8
  %108 = insertvalue %any undef, ptr %taddr74, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %107, ptr %varargslots75, align 16
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp77", ptr %indirectarg78, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.57, i64 9, i32 570, ptr byval(%"any[]") align 8 %indirectarg78) #6, !dbg !749
  unreachable, !dbg !749

panic82:                                          ; preds = %checkok79
  store i64 %sub81, ptr %taddr83, align 8
  %111 = insertvalue %any undef, ptr %taddr83, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %112, ptr %varargslots84, align 16
  %113 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp85" = insertvalue %"any[]" %113, i64 1, 1
  store %"any[]" %"$$temp85", ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.57, i64 9, i32 570, ptr byval(%"any[]") align 8 %indirectarg86) #6, !dbg !749
  unreachable, !dbg !749

panic90:                                          ; preds = %checkok87
  store i64 %sub89, ptr %taddr91, align 8
  %114 = insertvalue %any undef, ptr %taddr91, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %49, ptr %taddr92, align 8
  %116 = insertvalue %any undef, ptr %taddr92, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %115, ptr %varargslots93, align 16
  %ptradd94 = getelementptr inbounds i8, ptr %varargslots93, i64 16
  store %any %117, ptr %ptradd94, align 16
  %118 = insertvalue %"any[]" undef, ptr %varargslots93, 0
  %"$$temp95" = insertvalue %"any[]" %118, i64 2, 1
  store %"any[]" %"$$temp95", ptr %indirectarg96, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.57, i64 9, i32 570, ptr byval(%"any[]") align 8 %indirectarg96) #6, !dbg !749
  unreachable, !dbg !749
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.ZString.str_view(ptr %0) #0 comdat !dbg !757 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr1 = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !761, !DIExpression(), !762)
  %1 = load ptr, ptr %self, align 8, !dbg !763
  %2 = load ptr, ptr %self, align 8, !dbg !764
  %3 = call i64 @std.core.string.ZString.len(ptr %2), !dbg !764
  %add = add i64 0, %3, !dbg !764
  %gt = icmp ugt i64 0, %add, !dbg !764
  %sub = sub i64 %add, 0, !dbg !764
  %4 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !764
  br i1 %4, label %panic, label %checkok, !dbg !764

checkok:                                          ; preds = %entry
  %size = sub i64 %add, 0, !dbg !765
  %5 = insertvalue %"char[]" undef, ptr %1, 0, !dbg !765
  %6 = insertvalue %"char[]" %5, i64 %size, 1, !dbg !765
  store %"char[]" %6, ptr %taddr1, align 8
  %7 = load { ptr, i64 }, ptr %taddr1, align 8
  ret { ptr, i64 } %7

panic:                                            ; preds = %entry
  store i64 %sub, ptr %taddr, align 8
  %8 = insertvalue %any undef, ptr %taddr, 0
  %9 = insertvalue %any %8, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %9, ptr %varargslots, align 16
  %10 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %10, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.58, i64 8, i32 578, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !765
  unreachable, !dbg !765
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.ZString.char_len(ptr %0) #0 comdat !dbg !766 {
entry:
  %str = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %str, align 8
    #dbg_declare(ptr %str, !769, !DIExpression(), !770)
    #dbg_declare(ptr %len, !771, !DIExpression(), !772)
  store i64 0, ptr %len, align 8, !dbg !773
    #dbg_declare(ptr %ptr, !774, !DIExpression(), !775)
  %1 = load ptr, ptr %str, align 8, !dbg !776
  store ptr %1, ptr %ptr, align 8, !dbg !776
  br label %loop.cond, !dbg !777

loop.cond:                                        ; preds = %if.exit, %entry
    #dbg_declare(ptr %c, !778, !DIExpression(), !780)
  %2 = load ptr, ptr %ptr, align 8, !dbg !781
  %ptradd_any = getelementptr i8, ptr %2, i8 1, !dbg !781
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !781
  %3 = load i8, ptr %2, align 1, !dbg !782
  store i8 %3, ptr %c, align 1, !dbg !782
  %i2b = icmp ne i8 %3, 0, !dbg !782
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !782

loop.body:                                        ; preds = %loop.cond
  %4 = load i8, ptr %c, align 1, !dbg !783
  %zext = zext i8 %4 to i32, !dbg !783
  %and = and i32 %zext, 192, !dbg !783
  %neq = icmp ne i32 %and, 128, !dbg !783
  br i1 %neq, label %if.then, label %if.exit, !dbg !783

if.then:                                          ; preds = %loop.body
  %5 = load i64, ptr %len, align 8, !dbg !785
  %add = add i64 %5, 1, !dbg !785
  store i64 %add, ptr %len, align 8, !dbg !785
  br label %if.exit, !dbg !785

if.exit:                                          ; preds = %if.then, %loop.body
  br label %loop.cond, !dbg !785

loop.exit:                                        ; preds = %loop.cond
  %6 = load i64, ptr %len, align 8, !dbg !786
  ret i64 %6, !dbg !786
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.ZString.len(ptr %0) #0 comdat !dbg !787 {
entry:
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !788, !DIExpression(), !789)
    #dbg_declare(ptr %len, !790, !DIExpression(), !791)
  store i64 0, ptr %len, align 8, !dbg !792
    #dbg_declare(ptr %ptr, !793, !DIExpression(), !794)
  %1 = load ptr, ptr %self, align 8, !dbg !795
  store ptr %1, ptr %ptr, align 8, !dbg !795
  br label %loop.cond, !dbg !796

loop.cond:                                        ; preds = %loop.body, %entry
    #dbg_declare(ptr %c, !797, !DIExpression(), !799)
  %2 = load ptr, ptr %ptr, align 8, !dbg !800
  %ptradd_any = getelementptr i8, ptr %2, i8 1, !dbg !800
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !800
  %3 = load i8, ptr %2, align 1, !dbg !801
  store i8 %3, ptr %c, align 1, !dbg !801
  %i2b = icmp ne i8 %3, 0, !dbg !801
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !801

loop.body:                                        ; preds = %loop.cond
  %4 = load i64, ptr %len, align 8, !dbg !802
  %add = add i64 %4, 1, !dbg !802
  store i64 %add, ptr %len, align 8, !dbg !802
  br label %loop.cond, !dbg !802

loop.exit:                                        ; preds = %loop.cond
  %5 = load i64, ptr %len, align 8, !dbg !803
  ret i64 %5, !dbg !803
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.String.zstr_copy(ptr %0, i64 %1, i64 %2, ptr %3) #0 comdat !dbg !804 {
entry:
  %self = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size5 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len13 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !807, !DIExpression(), !808)
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !809, !DIExpression(), !810)
    #dbg_declare(ptr %len, !811, !DIExpression(), !812)
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !813
  %4 = load i64, ptr %ptradd2, align 8, !dbg !813
  store i64 %4, ptr %len, align 8, !dbg !813
    #dbg_declare(ptr %str, !814, !DIExpression(), !815)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %len, align 8, !dbg !816
  %add = add i64 %5, 1, !dbg !816
  store i64 %add, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator3, i32 16, i1 false)
  %6 = load i64, ptr %size, align 8
  store i64 %6, ptr %size5, align 8
  %7 = load i64, ptr %size5, align 8, !dbg !817
  %i2nb = icmp eq i64 %7, 0, !dbg !817
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !817

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !822
  br label %expr_block.exit, !dbg !822

if.exit:                                          ; preds = %entry
  %8 = load i64, ptr %size5, align 8, !dbg !823
  br i1 true, label %or.phi, label %or.rhs, !dbg !824

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %9 = load i64, ptr %x, align 8, !dbg !825
  %neq = icmp ne i64 0, %9, !dbg !825
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !825

and.rhs:                                          ; preds = %or.rhs
  %10 = load i64, ptr %x, align 8, !dbg !828
  %11 = load i64, ptr %x, align 8, !dbg !829
  %sub = sub i64 %11, 1, !dbg !829
  %and = and i64 %10, %sub, !dbg !828
  %eq = icmp eq i64 %and, 0, !dbg !828
  br label %and.phi, !dbg !828

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !828
  br label %or.phi, !dbg !828

or.phi:                                           ; preds = %and.phi, %if.exit
  %val6 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !828
  br i1 %val6, label %assert_ok, label %assert_fail, !dbg !828

assert_fail:                                      ; preds = %or.phi
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !830
  call void %12(ptr @.panic_msg, i64 65, ptr @.file, i64 16, ptr @.func.59, i64 9, i32 85) #6, !dbg !830
  unreachable, !dbg !830

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok8, label %assert_fail7, !dbg !830

assert_fail7:                                     ; preds = %assert_ok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !830
  call void %13(ptr @.panic_msg.10, i64 80, ptr @.file, i64 16, ptr @.func.59, i64 9, i32 85) #6, !dbg !830
  unreachable, !dbg !830

assert_ok8:                                       ; preds = %assert_ok
  %lt = icmp ult i64 0, %8, !dbg !830
  br i1 %lt, label %assert_ok10, label %assert_fail9, !dbg !830

assert_fail9:                                     ; preds = %assert_ok8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !830
  call void %14(ptr @.panic_msg.11, i64 59, ptr @.file, i64 16, ptr @.func.59, i64 9, i32 85) #6, !dbg !830
  unreachable, !dbg !830

assert_ok10:                                      ; preds = %assert_ok8
  %ptradd11 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !830
  %15 = load i64, ptr %ptradd11, align 8, !dbg !830
  %16 = inttoptr i64 %15 to ptr, !dbg !830
  %type = load ptr, ptr %.cachedtype, align 8
  %17 = icmp eq ptr %16, %type
  br i1 %17, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok10
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 16
  %18 = load ptr, ptr %ptradd12, align 8
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.acquire")
  store ptr %19, ptr %.inlinecache, align 8
  store ptr %16, ptr %.cachedtype, align 8
  br label %20

cache_hit:                                        ; preds = %assert_ok10
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %20

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ]
  %21 = icmp eq ptr %fn_phi, null
  br i1 %21, label %missing_function, label %match

missing_function:                                 ; preds = %20
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !830
  call void %22(ptr @.panic_msg.12, i64 44, ptr @.file, i64 16, ptr @.func.59, i64 9, i32 85) #6, !dbg !830
  unreachable, !dbg !830

match:                                            ; preds = %20
  %23 = load ptr, ptr %allocator4, align 8
  %24 = call i64 %fn_phi(ptr %retparam, ptr %23, i64 %8, i32 0, i64 0), !dbg !830
  %not_err = icmp eq i64 %24, 0, !dbg !830
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !830
  br i1 %25, label %after_check, label %assign_optional, !dbg !830

assign_optional:                                  ; preds = %match
  store i64 %24, ptr %error_var, align 8, !dbg !830
  br label %panic_block, !dbg !830

after_check:                                      ; preds = %match
  %26 = load ptr, ptr %retparam, align 8, !dbg !830
  store ptr %26, ptr %blockret, align 8, !dbg !830
  br label %expr_block.exit, !dbg !830

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !830

panic_block:                                      ; preds = %assign_optional
  %27 = insertvalue %any undef, ptr %error_var, 0, !dbg !830
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !830
  store %any %28, ptr %varargslots, align 16
  %29 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %29, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.14, i64 36, ptr @.file, i64 16, ptr @.func.59, i64 9, i32 74, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !819
  unreachable, !dbg !819

noerr_block:                                      ; preds = %expr_block.exit
  %30 = load ptr, ptr %blockret, align 8, !dbg !819
  store ptr %30, ptr %str, align 8, !dbg !819
  %31 = load ptr, ptr %str, align 8, !dbg !831
  store ptr %31, ptr %dst, align 8
  %32 = load ptr, ptr %self, align 8, !dbg !832
  store ptr %32, ptr %src, align 8
  %33 = load i64, ptr %len, align 8
  store i64 %33, ptr %len13, align 8
  %34 = load ptr, ptr %dst, align 8, !dbg !833
  %neq14 = icmp ne ptr %34, null, !dbg !833
  br i1 %neq14, label %assert_ok16, label %assert_fail15, !dbg !833

assert_fail15:                                    ; preds = %noerr_block
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !833
  call void %35(ptr @.panic_msg.60, i64 37, ptr @.file.61, i64 6, ptr @.func.59, i64 9, i32 329) #6, !dbg !833
  unreachable, !dbg !833

assert_ok16:                                      ; preds = %noerr_block
  %36 = load ptr, ptr %src, align 8, !dbg !837
  %neq17 = icmp ne ptr %36, null, !dbg !837
  br i1 %neq17, label %or.phi20, label %or.rhs18, !dbg !837

or.rhs18:                                         ; preds = %assert_ok16
  %37 = load i64, ptr %len13, align 8, !dbg !838
  %eq19 = icmp eq i64 0, %37, !dbg !838
  br label %or.phi20, !dbg !838

or.phi20:                                         ; preds = %or.rhs18, %assert_ok16
  %val21 = phi i1 [ true, %assert_ok16 ], [ %eq19, %or.rhs18 ], !dbg !838
  br i1 %val21, label %assert_ok23, label %assert_fail22, !dbg !838

assert_fail22:                                    ; preds = %or.phi20
  %38 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !839
  call void %38(ptr @.panic_msg.62, i64 94, ptr @.file.16, i64 9, ptr @.func.59, i64 9, i32 605) #6, !dbg !839
  unreachable, !dbg !839

assert_ok23:                                      ; preds = %or.phi20
  %39 = load i64, ptr %len13, align 8, !dbg !840
  %eq24 = icmp eq i64 0, %39, !dbg !840
  br i1 %eq24, label %or.phi26, label %or.rhs25, !dbg !840

or.rhs25:                                         ; preds = %assert_ok23
  %40 = load ptr, ptr %dst, align 8, !dbg !841
  %41 = load i64, ptr %len13, align 8, !dbg !842
  %ptradd_any = getelementptr i8, ptr %40, i64 %41, !dbg !842
  %42 = load ptr, ptr %src, align 8, !dbg !843
  %le = icmp ule ptr %ptradd_any, %42, !dbg !841
  br label %or.phi26, !dbg !841

or.phi26:                                         ; preds = %or.rhs25, %assert_ok23
  %val27 = phi i1 [ true, %assert_ok23 ], [ %le, %or.rhs25 ], !dbg !841
  br i1 %val27, label %or.phi31, label %or.rhs28, !dbg !841

or.rhs28:                                         ; preds = %or.phi26
  %43 = load ptr, ptr %src, align 8, !dbg !844
  %44 = load i64, ptr %len13, align 8, !dbg !845
  %ptradd_any29 = getelementptr i8, ptr %43, i64 %44, !dbg !845
  %45 = load ptr, ptr %dst, align 8, !dbg !846
  %le30 = icmp ule ptr %ptradd_any29, %45, !dbg !844
  br label %or.phi31, !dbg !844

or.phi31:                                         ; preds = %or.rhs28, %or.phi26
  %val32 = phi i1 [ true, %or.phi26 ], [ %le30, %or.rhs28 ], !dbg !844
  br i1 %val32, label %assert_ok34, label %assert_fail33, !dbg !844

assert_fail33:                                    ; preds = %or.phi31
  %46 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !839
  call void %46(ptr @.panic_msg.63, i64 95, ptr @.file.16, i64 9, ptr @.func.59, i64 9, i32 605) #6, !dbg !839
  unreachable, !dbg !839

assert_ok34:                                      ; preds = %or.phi31
  %47 = load ptr, ptr %dst, align 8, !dbg !847
  %48 = load ptr, ptr %src, align 8, !dbg !848
  %49 = load i64, ptr %len13, align 8, !dbg !849
  call void @llvm.memcpy.p0.p0.i64(ptr %47, ptr %48, i64 %49, i1 false), !dbg !850
  %50 = load ptr, ptr %str, align 8, !dbg !851
  %51 = load i64, ptr %len, align 8, !dbg !852
  %ptradd35 = getelementptr inbounds i8, ptr %50, i64 %51, !dbg !852
  store i8 0, ptr %ptradd35, align 1, !dbg !853
  %52 = load ptr, ptr %str, align 8, !dbg !854
  ret ptr %52, !dbg !854
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.concat(ptr %0, i64 %1, i64 %2, ptr %3, ptr %4, i64 %5) #0 comdat !dbg !855 {
entry:
  %self = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %s2 = alloca %"char[]", align 8
  %full_len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator5 = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator7 = alloca %any, align 8
  %size8 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %self_len = alloca i64, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %dst39 = alloca ptr, align 8
  %src40 = alloca ptr, align 8
  %len42 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %varargslots69 = alloca [1 x %any], align 16
  %indirectarg71 = alloca %"any[]", align 8
  %taddr73 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !858, !DIExpression(), !859)
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !860, !DIExpression(), !861)
  store ptr %4, ptr %s2, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %s2, i64 8
  store i64 %5, ptr %ptradd2, align 8
    #dbg_declare(ptr %s2, !862, !DIExpression(), !863)
    #dbg_declare(ptr %full_len, !864, !DIExpression(), !865)
  %ptradd3 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !866
  %6 = load i64, ptr %ptradd3, align 8, !dbg !866
  %ptradd4 = getelementptr inbounds i8, ptr %s2, i64 8, !dbg !867
  %7 = load i64, ptr %ptradd4, align 8, !dbg !867
  %add = add i64 %6, %7, !dbg !866
  store i64 %add, ptr %full_len, align 8, !dbg !866
    #dbg_declare(ptr %str, !868, !DIExpression(), !869)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator, i32 16, i1 false)
  %8 = load i64, ptr %full_len, align 8, !dbg !870
  %add6 = add i64 %8, 1, !dbg !870
  store i64 %add6, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator7, ptr align 8 %allocator5, i32 16, i1 false)
  %9 = load i64, ptr %size, align 8
  store i64 %9, ptr %size8, align 8
  %10 = load i64, ptr %size8, align 8, !dbg !871
  %i2nb = icmp eq i64 %10, 0, !dbg !871
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !871

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !876
  br label %expr_block.exit, !dbg !876

if.exit:                                          ; preds = %entry
  %11 = load i64, ptr %size8, align 8, !dbg !877
  br i1 true, label %or.phi, label %or.rhs, !dbg !878

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %12 = load i64, ptr %x, align 8, !dbg !879
  %neq = icmp ne i64 0, %12, !dbg !879
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !879

and.rhs:                                          ; preds = %or.rhs
  %13 = load i64, ptr %x, align 8, !dbg !882
  %14 = load i64, ptr %x, align 8, !dbg !883
  %sub = sub i64 %14, 1, !dbg !883
  %and = and i64 %13, %sub, !dbg !882
  %eq = icmp eq i64 %and, 0, !dbg !882
  br label %and.phi, !dbg !882

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !882
  br label %or.phi, !dbg !882

or.phi:                                           ; preds = %and.phi, %if.exit
  %val9 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !882
  br i1 %val9, label %assert_ok, label %assert_fail, !dbg !882

assert_fail:                                      ; preds = %or.phi
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !884
  call void %15(ptr @.panic_msg, i64 65, ptr @.file, i64 16, ptr @.func.64, i64 6, i32 85) #6, !dbg !884
  unreachable, !dbg !884

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok11, label %assert_fail10, !dbg !884

assert_fail10:                                    ; preds = %assert_ok
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !884
  call void %16(ptr @.panic_msg.10, i64 80, ptr @.file, i64 16, ptr @.func.64, i64 6, i32 85) #6, !dbg !884
  unreachable, !dbg !884

assert_ok11:                                      ; preds = %assert_ok
  %lt = icmp ult i64 0, %11, !dbg !884
  br i1 %lt, label %assert_ok13, label %assert_fail12, !dbg !884

assert_fail12:                                    ; preds = %assert_ok11
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !884
  call void %17(ptr @.panic_msg.11, i64 59, ptr @.file, i64 16, ptr @.func.64, i64 6, i32 85) #6, !dbg !884
  unreachable, !dbg !884

assert_ok13:                                      ; preds = %assert_ok11
  %ptradd14 = getelementptr inbounds i8, ptr %allocator7, i64 8, !dbg !884
  %18 = load i64, ptr %ptradd14, align 8, !dbg !884
  %19 = inttoptr i64 %18 to ptr, !dbg !884
  %type = load ptr, ptr %.cachedtype, align 8
  %20 = icmp eq ptr %19, %type
  br i1 %20, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok13
  %ptradd15 = getelementptr inbounds i8, ptr %19, i64 16
  %21 = load ptr, ptr %ptradd15, align 8
  %22 = call ptr @.dyn_search(ptr %21, ptr @"$sel.acquire")
  store ptr %22, ptr %.inlinecache, align 8
  store ptr %19, ptr %.cachedtype, align 8
  br label %23

cache_hit:                                        ; preds = %assert_ok13
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %23

23:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %22, %cache_miss ]
  %24 = icmp eq ptr %fn_phi, null
  br i1 %24, label %missing_function, label %match

missing_function:                                 ; preds = %23
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !884
  call void %25(ptr @.panic_msg.12, i64 44, ptr @.file, i64 16, ptr @.func.64, i64 6, i32 85) #6, !dbg !884
  unreachable, !dbg !884

match:                                            ; preds = %23
  %26 = load ptr, ptr %allocator7, align 8
  %27 = call i64 %fn_phi(ptr %retparam, ptr %26, i64 %11, i32 0, i64 0), !dbg !884
  %not_err = icmp eq i64 %27, 0, !dbg !884
  %28 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !884
  br i1 %28, label %after_check, label %assign_optional, !dbg !884

assign_optional:                                  ; preds = %match
  store i64 %27, ptr %error_var, align 8, !dbg !884
  br label %panic_block, !dbg !884

after_check:                                      ; preds = %match
  %29 = load ptr, ptr %retparam, align 8, !dbg !884
  store ptr %29, ptr %blockret, align 8, !dbg !884
  br label %expr_block.exit, !dbg !884

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !884

panic_block:                                      ; preds = %assign_optional
  %30 = insertvalue %any undef, ptr %error_var, 0, !dbg !884
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !884
  store %any %31, ptr %varargslots, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.14, i64 36, ptr @.file, i64 16, ptr @.func.64, i64 6, i32 74, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !873
  unreachable, !dbg !873

noerr_block:                                      ; preds = %expr_block.exit
  %33 = load ptr, ptr %blockret, align 8, !dbg !873
  store ptr %33, ptr %str, align 8, !dbg !873
    #dbg_declare(ptr %self_len, !885, !DIExpression(), !886)
  %ptradd16 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !887
  %34 = load i64, ptr %ptradd16, align 8, !dbg !887
  store i64 %34, ptr %self_len, align 8, !dbg !887
  %35 = load ptr, ptr %str, align 8, !dbg !888
  store ptr %35, ptr %dst, align 8
  %36 = load ptr, ptr %self, align 8, !dbg !889
  store ptr %36, ptr %src, align 8
  %37 = load i64, ptr %self_len, align 8
  store i64 %37, ptr %len, align 8
  %38 = load ptr, ptr %dst, align 8, !dbg !890
  %neq17 = icmp ne ptr %38, null, !dbg !890
  br i1 %neq17, label %assert_ok19, label %assert_fail18, !dbg !890

assert_fail18:                                    ; preds = %noerr_block
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !890
  call void %39(ptr @.panic_msg.60, i64 37, ptr @.file.61, i64 6, ptr @.func.64, i64 6, i32 329) #6, !dbg !890
  unreachable, !dbg !890

assert_ok19:                                      ; preds = %noerr_block
  %40 = load ptr, ptr %src, align 8, !dbg !894
  %neq20 = icmp ne ptr %40, null, !dbg !894
  br i1 %neq20, label %or.phi23, label %or.rhs21, !dbg !894

or.rhs21:                                         ; preds = %assert_ok19
  %41 = load i64, ptr %len, align 8, !dbg !895
  %eq22 = icmp eq i64 0, %41, !dbg !895
  br label %or.phi23, !dbg !895

or.phi23:                                         ; preds = %or.rhs21, %assert_ok19
  %val24 = phi i1 [ true, %assert_ok19 ], [ %eq22, %or.rhs21 ], !dbg !895
  br i1 %val24, label %assert_ok26, label %assert_fail25, !dbg !895

assert_fail25:                                    ; preds = %or.phi23
  %42 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !896
  call void %42(ptr @.panic_msg.62, i64 94, ptr @.file.16, i64 9, ptr @.func.64, i64 6, i32 615) #6, !dbg !896
  unreachable, !dbg !896

assert_ok26:                                      ; preds = %or.phi23
  %43 = load i64, ptr %len, align 8, !dbg !897
  %eq27 = icmp eq i64 0, %43, !dbg !897
  br i1 %eq27, label %or.phi29, label %or.rhs28, !dbg !897

or.rhs28:                                         ; preds = %assert_ok26
  %44 = load ptr, ptr %dst, align 8, !dbg !898
  %45 = load i64, ptr %len, align 8, !dbg !899
  %ptradd_any = getelementptr i8, ptr %44, i64 %45, !dbg !899
  %46 = load ptr, ptr %src, align 8, !dbg !900
  %le = icmp ule ptr %ptradd_any, %46, !dbg !898
  br label %or.phi29, !dbg !898

or.phi29:                                         ; preds = %or.rhs28, %assert_ok26
  %val30 = phi i1 [ true, %assert_ok26 ], [ %le, %or.rhs28 ], !dbg !898
  br i1 %val30, label %or.phi34, label %or.rhs31, !dbg !898

or.rhs31:                                         ; preds = %or.phi29
  %47 = load ptr, ptr %src, align 8, !dbg !901
  %48 = load i64, ptr %len, align 8, !dbg !902
  %ptradd_any32 = getelementptr i8, ptr %47, i64 %48, !dbg !902
  %49 = load ptr, ptr %dst, align 8, !dbg !903
  %le33 = icmp ule ptr %ptradd_any32, %49, !dbg !901
  br label %or.phi34, !dbg !901

or.phi34:                                         ; preds = %or.rhs31, %or.phi29
  %val35 = phi i1 [ true, %or.phi29 ], [ %le33, %or.rhs31 ], !dbg !901
  br i1 %val35, label %assert_ok37, label %assert_fail36, !dbg !901

assert_fail36:                                    ; preds = %or.phi34
  %50 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !896
  call void %50(ptr @.panic_msg.63, i64 95, ptr @.file.16, i64 9, ptr @.func.64, i64 6, i32 615) #6, !dbg !896
  unreachable, !dbg !896

assert_ok37:                                      ; preds = %or.phi34
  %51 = load ptr, ptr %dst, align 8, !dbg !904
  %52 = load ptr, ptr %src, align 8, !dbg !905
  %53 = load i64, ptr %len, align 8, !dbg !906
  call void @llvm.memcpy.p0.p0.i64(ptr %51, ptr %52, i64 %53, i1 false), !dbg !907
  %54 = load ptr, ptr %str, align 8, !dbg !908
  %55 = load i64, ptr %self_len, align 8, !dbg !909
  %ptradd_any38 = getelementptr i8, ptr %54, i64 %55, !dbg !909
  store ptr %ptradd_any38, ptr %dst39, align 8
  %56 = load ptr, ptr %s2, align 8, !dbg !910
  store ptr %56, ptr %src40, align 8
  %ptradd41 = getelementptr inbounds i8, ptr %s2, i64 8, !dbg !911
  %57 = load i64, ptr %ptradd41, align 8
  store i64 %57, ptr %len42, align 8
  %58 = load ptr, ptr %dst39, align 8, !dbg !912
  %neq43 = icmp ne ptr %58, null, !dbg !912
  br i1 %neq43, label %assert_ok45, label %assert_fail44, !dbg !912

assert_fail44:                                    ; preds = %assert_ok37
  %59 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !912
  call void %59(ptr @.panic_msg.60, i64 37, ptr @.file.61, i64 6, ptr @.func.64, i64 6, i32 329) #6, !dbg !912
  unreachable, !dbg !912

assert_ok45:                                      ; preds = %assert_ok37
  %60 = load ptr, ptr %src40, align 8, !dbg !916
  %neq46 = icmp ne ptr %60, null, !dbg !916
  br i1 %neq46, label %or.phi49, label %or.rhs47, !dbg !916

or.rhs47:                                         ; preds = %assert_ok45
  %61 = load i64, ptr %len42, align 8, !dbg !917
  %eq48 = icmp eq i64 0, %61, !dbg !917
  br label %or.phi49, !dbg !917

or.phi49:                                         ; preds = %or.rhs47, %assert_ok45
  %val50 = phi i1 [ true, %assert_ok45 ], [ %eq48, %or.rhs47 ], !dbg !917
  br i1 %val50, label %assert_ok52, label %assert_fail51, !dbg !917

assert_fail51:                                    ; preds = %or.phi49
  %62 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !918
  call void %62(ptr @.panic_msg.62, i64 94, ptr @.file.16, i64 9, ptr @.func.64, i64 6, i32 616) #6, !dbg !918
  unreachable, !dbg !918

assert_ok52:                                      ; preds = %or.phi49
  %63 = load i64, ptr %len42, align 8, !dbg !919
  %eq53 = icmp eq i64 0, %63, !dbg !919
  br i1 %eq53, label %or.phi57, label %or.rhs54, !dbg !919

or.rhs54:                                         ; preds = %assert_ok52
  %64 = load ptr, ptr %dst39, align 8, !dbg !920
  %65 = load i64, ptr %len42, align 8, !dbg !921
  %ptradd_any55 = getelementptr i8, ptr %64, i64 %65, !dbg !921
  %66 = load ptr, ptr %src40, align 8, !dbg !922
  %le56 = icmp ule ptr %ptradd_any55, %66, !dbg !920
  br label %or.phi57, !dbg !920

or.phi57:                                         ; preds = %or.rhs54, %assert_ok52
  %val58 = phi i1 [ true, %assert_ok52 ], [ %le56, %or.rhs54 ], !dbg !920
  br i1 %val58, label %or.phi62, label %or.rhs59, !dbg !920

or.rhs59:                                         ; preds = %or.phi57
  %67 = load ptr, ptr %src40, align 8, !dbg !923
  %68 = load i64, ptr %len42, align 8, !dbg !924
  %ptradd_any60 = getelementptr i8, ptr %67, i64 %68, !dbg !924
  %69 = load ptr, ptr %dst39, align 8, !dbg !925
  %le61 = icmp ule ptr %ptradd_any60, %69, !dbg !923
  br label %or.phi62, !dbg !923

or.phi62:                                         ; preds = %or.rhs59, %or.phi57
  %val63 = phi i1 [ true, %or.phi57 ], [ %le61, %or.rhs59 ], !dbg !923
  br i1 %val63, label %assert_ok65, label %assert_fail64, !dbg !923

assert_fail64:                                    ; preds = %or.phi62
  %70 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !918
  call void %70(ptr @.panic_msg.63, i64 95, ptr @.file.16, i64 9, ptr @.func.64, i64 6, i32 616) #6, !dbg !918
  unreachable, !dbg !918

assert_ok65:                                      ; preds = %or.phi62
  %71 = load ptr, ptr %dst39, align 8, !dbg !926
  %72 = load ptr, ptr %src40, align 8, !dbg !927
  %73 = load i64, ptr %len42, align 8, !dbg !928
  call void @llvm.memcpy.p0.p0.i64(ptr %71, ptr %72, i64 %73, i1 false), !dbg !929
  %74 = load ptr, ptr %str, align 8, !dbg !930
  %75 = load i64, ptr %full_len, align 8, !dbg !931
  %ptradd66 = getelementptr inbounds i8, ptr %74, i64 %75, !dbg !931
  store i8 0, ptr %ptradd66, align 1, !dbg !932
  %76 = load ptr, ptr %str, align 8, !dbg !933
  %77 = load i64, ptr %full_len, align 8, !dbg !934
  %add67 = add i64 0, %77, !dbg !934
  %gt = icmp ugt i64 0, %add67, !dbg !934
  %sub68 = sub i64 %add67, 0, !dbg !934
  %78 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !934
  br i1 %78, label %panic, label %checkok, !dbg !934

checkok:                                          ; preds = %assert_ok65
  %size72 = sub i64 %add67, 0, !dbg !935
  %79 = insertvalue %"char[]" undef, ptr %76, 0, !dbg !935
  %80 = insertvalue %"char[]" %79, i64 %size72, 1, !dbg !935
  store %"char[]" %80, ptr %taddr73, align 8
  %81 = load { ptr, i64 }, ptr %taddr73, align 8
  ret { ptr, i64 } %81

panic:                                            ; preds = %assert_ok65
  store i64 %sub68, ptr %taddr, align 8
  %82 = insertvalue %any undef, ptr %taddr, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %83, ptr %varargslots69, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp70" = insertvalue %"any[]" %84, i64 1, 1
  store %"any[]" %"$$temp70", ptr %indirectarg71, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.64, i64 6, i32 618, ptr byval(%"any[]") align 8 %indirectarg71) #6, !dbg !935
  unreachable, !dbg !935
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.tconcat(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !936 {
entry:
  %self = alloca %"char[]", align 8
  %s2 = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !937, !DIExpression(), !938)
  store ptr %2, ptr %s2, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s2, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %s2, !939, !DIExpression(), !940)
  %lo = load ptr, ptr %self, align 8, !dbg !941
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !941
  %hi = load i64, ptr %ptradd2, align 8, !dbg !941
  %lo3 = load i64, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !941
  %hi4 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8, !dbg !941
  %lo5 = load ptr, ptr %s2, align 8, !dbg !941
  %ptradd6 = getelementptr inbounds i8, ptr %s2, i64 8, !dbg !941
  %hi7 = load i64, ptr %ptradd6, align 8, !dbg !941
  %4 = call { ptr, i64 } @std.core.String.concat(ptr %lo, i64 %hi, i64 %lo3, ptr %hi4, ptr %lo5, i64 %hi7), !dbg !942
  store { ptr, i64 } %4, ptr %result, align 8
  %5 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %5
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.String.zstr_tcopy(ptr %0, i64 %1) #0 comdat !dbg !943 {
entry:
  %self = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !946, !DIExpression(), !947)
  %lo = load ptr, ptr %self, align 8, !dbg !948
  %ptradd1 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !948
  %hi = load i64, ptr %ptradd1, align 8, !dbg !948
  %lo2 = load i64, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !948
  %hi3 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8, !dbg !948
  %2 = call ptr @std.core.String.zstr_copy(ptr %lo, i64 %hi, i64 %lo2, ptr %hi3) #5, !dbg !949
  ret ptr %2, !dbg !949
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.copy(ptr %0, i64 %1, i64 %2, ptr %3) #0 comdat !dbg !950 {
entry:
  %self = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size5 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len13 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %varargslots38 = alloca [1 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !953, !DIExpression(), !954)
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !955, !DIExpression(), !956)
    #dbg_declare(ptr %len, !957, !DIExpression(), !958)
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !959
  %4 = load i64, ptr %ptradd2, align 8, !dbg !959
  store i64 %4, ptr %len, align 8, !dbg !959
    #dbg_declare(ptr %str, !960, !DIExpression(), !961)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %len, align 8, !dbg !962
  %add = add i64 %5, 1, !dbg !962
  store i64 %add, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator3, i32 16, i1 false)
  %6 = load i64, ptr %size, align 8
  store i64 %6, ptr %size5, align 8
  %7 = load i64, ptr %size5, align 8, !dbg !963
  %i2nb = icmp eq i64 %7, 0, !dbg !963
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !963

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !968
  br label %expr_block.exit, !dbg !968

if.exit:                                          ; preds = %entry
  %8 = load i64, ptr %size5, align 8, !dbg !969
  br i1 true, label %or.phi, label %or.rhs, !dbg !970

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %9 = load i64, ptr %x, align 8, !dbg !971
  %neq = icmp ne i64 0, %9, !dbg !971
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !971

and.rhs:                                          ; preds = %or.rhs
  %10 = load i64, ptr %x, align 8, !dbg !974
  %11 = load i64, ptr %x, align 8, !dbg !975
  %sub = sub i64 %11, 1, !dbg !975
  %and = and i64 %10, %sub, !dbg !974
  %eq = icmp eq i64 %and, 0, !dbg !974
  br label %and.phi, !dbg !974

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !974
  br label %or.phi, !dbg !974

or.phi:                                           ; preds = %and.phi, %if.exit
  %val6 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !974
  br i1 %val6, label %assert_ok, label %assert_fail, !dbg !974

assert_fail:                                      ; preds = %or.phi
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !976
  call void %12(ptr @.panic_msg, i64 65, ptr @.file, i64 16, ptr @.func.65, i64 4, i32 85) #6, !dbg !976
  unreachable, !dbg !976

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok8, label %assert_fail7, !dbg !976

assert_fail7:                                     ; preds = %assert_ok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !976
  call void %13(ptr @.panic_msg.10, i64 80, ptr @.file, i64 16, ptr @.func.65, i64 4, i32 85) #6, !dbg !976
  unreachable, !dbg !976

assert_ok8:                                       ; preds = %assert_ok
  %lt = icmp ult i64 0, %8, !dbg !976
  br i1 %lt, label %assert_ok10, label %assert_fail9, !dbg !976

assert_fail9:                                     ; preds = %assert_ok8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !976
  call void %14(ptr @.panic_msg.11, i64 59, ptr @.file, i64 16, ptr @.func.65, i64 4, i32 85) #6, !dbg !976
  unreachable, !dbg !976

assert_ok10:                                      ; preds = %assert_ok8
  %ptradd11 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !976
  %15 = load i64, ptr %ptradd11, align 8, !dbg !976
  %16 = inttoptr i64 %15 to ptr, !dbg !976
  %type = load ptr, ptr %.cachedtype, align 8
  %17 = icmp eq ptr %16, %type
  br i1 %17, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok10
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 16
  %18 = load ptr, ptr %ptradd12, align 8
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.acquire")
  store ptr %19, ptr %.inlinecache, align 8
  store ptr %16, ptr %.cachedtype, align 8
  br label %20

cache_hit:                                        ; preds = %assert_ok10
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %20

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ]
  %21 = icmp eq ptr %fn_phi, null
  br i1 %21, label %missing_function, label %match

missing_function:                                 ; preds = %20
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !976
  call void %22(ptr @.panic_msg.12, i64 44, ptr @.file, i64 16, ptr @.func.65, i64 4, i32 85) #6, !dbg !976
  unreachable, !dbg !976

match:                                            ; preds = %20
  %23 = load ptr, ptr %allocator4, align 8
  %24 = call i64 %fn_phi(ptr %retparam, ptr %23, i64 %8, i32 0, i64 0), !dbg !976
  %not_err = icmp eq i64 %24, 0, !dbg !976
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !976
  br i1 %25, label %after_check, label %assign_optional, !dbg !976

assign_optional:                                  ; preds = %match
  store i64 %24, ptr %error_var, align 8, !dbg !976
  br label %panic_block, !dbg !976

after_check:                                      ; preds = %match
  %26 = load ptr, ptr %retparam, align 8, !dbg !976
  store ptr %26, ptr %blockret, align 8, !dbg !976
  br label %expr_block.exit, !dbg !976

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !976

panic_block:                                      ; preds = %assign_optional
  %27 = insertvalue %any undef, ptr %error_var, 0, !dbg !976
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !976
  store %any %28, ptr %varargslots, align 16
  %29 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %29, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.14, i64 36, ptr @.file, i64 16, ptr @.func.65, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !965
  unreachable, !dbg !965

noerr_block:                                      ; preds = %expr_block.exit
  %30 = load ptr, ptr %blockret, align 8, !dbg !965
  store ptr %30, ptr %str, align 8, !dbg !965
  %31 = load ptr, ptr %str, align 8, !dbg !977
  store ptr %31, ptr %dst, align 8
  %32 = load ptr, ptr %self, align 8, !dbg !978
  store ptr %32, ptr %src, align 8
  %33 = load i64, ptr %len, align 8
  store i64 %33, ptr %len13, align 8
  %34 = load ptr, ptr %dst, align 8, !dbg !979
  %neq14 = icmp ne ptr %34, null, !dbg !979
  br i1 %neq14, label %assert_ok16, label %assert_fail15, !dbg !979

assert_fail15:                                    ; preds = %noerr_block
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !979
  call void %35(ptr @.panic_msg.60, i64 37, ptr @.file.61, i64 6, ptr @.func.65, i64 4, i32 329) #6, !dbg !979
  unreachable, !dbg !979

assert_ok16:                                      ; preds = %noerr_block
  %36 = load ptr, ptr %src, align 8, !dbg !983
  %neq17 = icmp ne ptr %36, null, !dbg !983
  br i1 %neq17, label %or.phi20, label %or.rhs18, !dbg !983

or.rhs18:                                         ; preds = %assert_ok16
  %37 = load i64, ptr %len13, align 8, !dbg !984
  %eq19 = icmp eq i64 0, %37, !dbg !984
  br label %or.phi20, !dbg !984

or.phi20:                                         ; preds = %or.rhs18, %assert_ok16
  %val21 = phi i1 [ true, %assert_ok16 ], [ %eq19, %or.rhs18 ], !dbg !984
  br i1 %val21, label %assert_ok23, label %assert_fail22, !dbg !984

assert_fail22:                                    ; preds = %or.phi20
  %38 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !985
  call void %38(ptr @.panic_msg.62, i64 94, ptr @.file.16, i64 9, ptr @.func.65, i64 4, i32 635) #6, !dbg !985
  unreachable, !dbg !985

assert_ok23:                                      ; preds = %or.phi20
  %39 = load i64, ptr %len13, align 8, !dbg !986
  %eq24 = icmp eq i64 0, %39, !dbg !986
  br i1 %eq24, label %or.phi26, label %or.rhs25, !dbg !986

or.rhs25:                                         ; preds = %assert_ok23
  %40 = load ptr, ptr %dst, align 8, !dbg !987
  %41 = load i64, ptr %len13, align 8, !dbg !988
  %ptradd_any = getelementptr i8, ptr %40, i64 %41, !dbg !988
  %42 = load ptr, ptr %src, align 8, !dbg !989
  %le = icmp ule ptr %ptradd_any, %42, !dbg !987
  br label %or.phi26, !dbg !987

or.phi26:                                         ; preds = %or.rhs25, %assert_ok23
  %val27 = phi i1 [ true, %assert_ok23 ], [ %le, %or.rhs25 ], !dbg !987
  br i1 %val27, label %or.phi31, label %or.rhs28, !dbg !987

or.rhs28:                                         ; preds = %or.phi26
  %43 = load ptr, ptr %src, align 8, !dbg !990
  %44 = load i64, ptr %len13, align 8, !dbg !991
  %ptradd_any29 = getelementptr i8, ptr %43, i64 %44, !dbg !991
  %45 = load ptr, ptr %dst, align 8, !dbg !992
  %le30 = icmp ule ptr %ptradd_any29, %45, !dbg !990
  br label %or.phi31, !dbg !990

or.phi31:                                         ; preds = %or.rhs28, %or.phi26
  %val32 = phi i1 [ true, %or.phi26 ], [ %le30, %or.rhs28 ], !dbg !990
  br i1 %val32, label %assert_ok34, label %assert_fail33, !dbg !990

assert_fail33:                                    ; preds = %or.phi31
  %46 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !985
  call void %46(ptr @.panic_msg.63, i64 95, ptr @.file.16, i64 9, ptr @.func.65, i64 4, i32 635) #6, !dbg !985
  unreachable, !dbg !985

assert_ok34:                                      ; preds = %or.phi31
  %47 = load ptr, ptr %dst, align 8, !dbg !993
  %48 = load ptr, ptr %src, align 8, !dbg !994
  %49 = load i64, ptr %len13, align 8, !dbg !995
  call void @llvm.memcpy.p0.p0.i64(ptr %47, ptr %48, i64 %49, i1 false), !dbg !996
  %50 = load ptr, ptr %str, align 8, !dbg !997
  %51 = load i64, ptr %len, align 8, !dbg !998
  %ptradd35 = getelementptr inbounds i8, ptr %50, i64 %51, !dbg !998
  store i8 0, ptr %ptradd35, align 1, !dbg !999
  %52 = load ptr, ptr %str, align 8, !dbg !1000
  %53 = load i64, ptr %len, align 8, !dbg !1001
  %add36 = add i64 0, %53, !dbg !1001
  %gt = icmp ugt i64 0, %add36, !dbg !1001
  %sub37 = sub i64 %add36, 0, !dbg !1001
  %54 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1001
  br i1 %54, label %panic, label %checkok, !dbg !1001

checkok:                                          ; preds = %assert_ok34
  %size41 = sub i64 %add36, 0, !dbg !1002
  %55 = insertvalue %"char[]" undef, ptr %52, 0, !dbg !1002
  %56 = insertvalue %"char[]" %55, i64 %size41, 1, !dbg !1002
  store %"char[]" %56, ptr %taddr42, align 8
  %57 = load { ptr, i64 }, ptr %taddr42, align 8
  ret { ptr, i64 } %57

panic:                                            ; preds = %assert_ok34
  store i64 %sub37, ptr %taddr, align 8
  %58 = insertvalue %any undef, ptr %taddr, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %59, ptr %varargslots38, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp39" = insertvalue %"any[]" %60, i64 1, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.65, i64 4, i32 637, ptr byval(%"any[]") align 8 %indirectarg40) #6, !dbg !1002
  unreachable, !dbg !1002
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.free(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !1003 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %allocator7 = alloca %any, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1006
  %3 = icmp eq ptr %0, null, !dbg !1006
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1006
  br i1 %4, label %panic, label %checkok, !dbg !1006

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1007, !DIExpression(), !1008)
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !1009, !DIExpression(), !1010)
  %5 = load ptr, ptr %self, align 8, !dbg !1011
  %checknull = icmp eq ptr %5, null, !dbg !1011
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1011
  br i1 %6, label %panic1, label %checkok2, !dbg !1011

checkok2:                                         ; preds = %checkok
  %7 = ptrtoint ptr %5 to i64, !dbg !1011
  %8 = urem i64 %7, 8, !dbg !1011
  %9 = icmp ne i64 %8, 0, !dbg !1011
  %10 = call i1 @llvm.expect.i1(i1 %9, i1 false), !dbg !1011
  br i1 %10, label %panic3, label %checkok6, !dbg !1011

checkok6:                                         ; preds = %checkok2
  %11 = load ptr, ptr %5, align 8, !dbg !1011
  %i2nb = icmp eq ptr %11, null, !dbg !1011
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1011

if.then:                                          ; preds = %checkok6
  ret void, !dbg !1012

if.exit:                                          ; preds = %checkok6
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator7, ptr align 8 %allocator, i32 16, i1 false)
  %12 = load ptr, ptr %self, align 8, !dbg !1013
  %checknull8 = icmp eq ptr %12, null, !dbg !1013
  %13 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1013
  br i1 %13, label %panic9, label %checkok10, !dbg !1013

checkok10:                                        ; preds = %if.exit
  %14 = ptrtoint ptr %12 to i64, !dbg !1013
  %15 = urem i64 %14, 8, !dbg !1013
  %16 = icmp ne i64 %15, 0, !dbg !1013
  %17 = call i1 @llvm.expect.i1(i1 %16, i1 false), !dbg !1013
  br i1 %17, label %panic11, label %checkok18, !dbg !1013

checkok18:                                        ; preds = %checkok10
  %18 = load ptr, ptr %12, align 8, !dbg !1013
  store ptr %18, ptr %ptr, align 8
  %19 = load ptr, ptr %ptr, align 8, !dbg !1014
  %i2nb19 = icmp eq ptr %19, null, !dbg !1014
  br i1 %i2nb19, label %if.then20, label %if.exit21, !dbg !1014

if.then20:                                        ; preds = %checkok18
  br label %expr_block.exit, !dbg !1017

if.exit21:                                        ; preds = %checkok18
  %20 = load ptr, ptr %ptr, align 8, !dbg !1018
  %neq = icmp ne ptr %20, null, !dbg !1019
  br i1 %neq, label %assert_ok, label %assert_fail, !dbg !1019

assert_fail:                                      ; preds = %if.exit21
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1019
  call void %21(ptr @.panic_msg.26, i64 75, ptr @.file, i64 16, ptr @.func.67, i64 4, i32 122) #6, !dbg !1019
  unreachable, !dbg !1019

assert_ok:                                        ; preds = %if.exit21
  %ptradd22 = getelementptr inbounds i8, ptr %allocator7, i64 8, !dbg !1019
  %22 = load i64, ptr %ptradd22, align 8, !dbg !1019
  %23 = inttoptr i64 %22 to ptr, !dbg !1019
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1006
  %24 = icmp eq ptr %23, %type, !dbg !1006
  br i1 %24, label %cache_hit, label %cache_miss, !dbg !1006

cache_miss:                                       ; preds = %assert_ok
  %ptradd23 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !1006
  %25 = load ptr, ptr %ptradd23, align 8, !dbg !1006
  %26 = call ptr @.dyn_search(ptr %25, ptr @"$sel.release"), !dbg !1006
  store ptr %26, ptr %.inlinecache, align 8, !dbg !1006
  store ptr %23, ptr %.cachedtype, align 8, !dbg !1006
  br label %27, !dbg !1006

cache_hit:                                        ; preds = %assert_ok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1006
  br label %27, !dbg !1006

27:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %26, %cache_miss ], !dbg !1006
  %28 = icmp eq ptr %fn_phi, null, !dbg !1006
  br i1 %28, label %missing_function, label %match, !dbg !1006

missing_function:                                 ; preds = %27
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1006
  call void %29(ptr @.panic_msg.27, i64 44, ptr @.file, i64 16, ptr @.func.67, i64 4, i32 122) #6, !dbg !1006
  unreachable, !dbg !1006

match:                                            ; preds = %27
  %30 = load ptr, ptr %allocator7, align 8, !dbg !1006
  call void %fn_phi(ptr %30, ptr %20, i8 zeroext 0), !dbg !1006
  br label %expr_block.exit, !dbg !1006

expr_block.exit:                                  ; preds = %match, %if.then20
  %31 = load ptr, ptr %self, align 8, !dbg !1020
  %checknull24 = icmp eq ptr %31, null, !dbg !1020
  %32 = call i1 @llvm.expect.i1(i1 %checknull24, i1 false), !dbg !1020
  br i1 %32, label %panic25, label %checkok26, !dbg !1020

checkok26:                                        ; preds = %expr_block.exit
  %33 = ptrtoint ptr %31 to i64, !dbg !1020
  %34 = urem i64 %33, 8, !dbg !1020
  %35 = icmp ne i64 %34, 0, !dbg !1020
  %36 = call i1 @llvm.expect.i1(i1 %35, i1 false), !dbg !1020
  br i1 %36, label %panic27, label %checkok34, !dbg !1020

checkok34:                                        ; preds = %checkok26
  store %"char[]" { ptr @.emptystr, i64 0 }, ptr %31, align 8, !dbg !1021
  ret void, !dbg !1021

panic:                                            ; preds = %entry
  %37 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1008
  call void %37(ptr @.panic_msg.66, i64 62, ptr @.file.16, i64 9, ptr @.func.67, i64 4, i32 640) #6, !dbg !1008
  unreachable, !dbg !1008

panic1:                                           ; preds = %checkok
  %38 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1011
  call void %38(ptr @.panic_msg.68, i64 45, ptr @.file.16, i64 9, ptr @.func.67, i64 4, i32 642) #6, !dbg !1011
  unreachable, !dbg !1011

panic3:                                           ; preds = %checkok2
  store i64 8, ptr %taddr, align 8
  %39 = insertvalue %any undef, ptr %taddr, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr4, align 8
  %41 = insertvalue %any undef, ptr %taddr4, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %40, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %42, ptr %ptradd5, align 16
  %43 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %43, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 94, ptr @.file.16, i64 9, ptr @.func.67, i64 4, i32 642, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1011
  unreachable, !dbg !1011

panic9:                                           ; preds = %if.exit
  %44 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1013
  call void %44(ptr @.panic_msg.68, i64 45, ptr @.file.16, i64 9, ptr @.func.67, i64 4, i32 643) #6, !dbg !1013
  unreachable, !dbg !1013

panic11:                                          ; preds = %checkok10
  store i64 8, ptr %taddr12, align 8
  %45 = insertvalue %any undef, ptr %taddr12, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr13, align 8
  %47 = insertvalue %any undef, ptr %taddr13, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %46, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %48, ptr %ptradd15, align 16
  %49 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %49, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 94, ptr @.file.16, i64 9, ptr @.func.67, i64 4, i32 643, ptr byval(%"any[]") align 8 %indirectarg17) #6, !dbg !1013
  unreachable, !dbg !1013

panic25:                                          ; preds = %expr_block.exit
  %50 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1020
  call void %50(ptr @.panic_msg.68, i64 45, ptr @.file.16, i64 9, ptr @.func.67, i64 4, i32 644) #6, !dbg !1020
  unreachable, !dbg !1020

panic27:                                          ; preds = %checkok26
  store i64 8, ptr %taddr28, align 8
  %51 = insertvalue %any undef, ptr %taddr28, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr29, align 8
  %53 = insertvalue %any undef, ptr %taddr29, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %52, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %54, ptr %ptradd31, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 94, ptr @.file.16, i64 9, ptr @.func.67, i64 4, i32 644, ptr byval(%"any[]") align 8 %indirectarg33) #6, !dbg !1020
  unreachable, !dbg !1020
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.tcopy(ptr %0, i64 %1) #0 comdat !dbg !1022 {
entry:
  %self = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1025, !DIExpression(), !1026)
  %lo = load ptr, ptr %self, align 8, !dbg !1027
  %ptradd1 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1027
  %hi = load i64, ptr %ptradd1, align 8, !dbg !1027
  %lo2 = load i64, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !1027
  %hi3 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8, !dbg !1027
  %2 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo2, ptr %hi3) #5, !dbg !1028
  store { ptr, i64 } %2, ptr %result, align 8
  %3 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %3
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.ZString.copy(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !1029 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %result = alloca %"char[]", align 8
  %result5 = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1032, !DIExpression(), !1033)
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !1034, !DIExpression(), !1035)
  %3 = load ptr, ptr %self, align 8, !dbg !1036
  %4 = call { ptr, i64 } @std.core.string.ZString.str_view(ptr %3), !dbg !1036
  store { ptr, i64 } %4, ptr %result, align 8
  %lo = load ptr, ptr %result, align 8, !dbg !1037
  %ptradd1 = getelementptr inbounds i8, ptr %result, i64 8, !dbg !1037
  %hi = load i64, ptr %ptradd1, align 8, !dbg !1037
  %lo2 = load i64, ptr %allocator, align 8, !dbg !1037
  %ptradd3 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1037
  %hi4 = load ptr, ptr %ptradd3, align 8, !dbg !1037
  %5 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo2, ptr %hi4) #5, !dbg !1036
  store { ptr, i64 } %5, ptr %result5, align 8
  %6 = load { ptr, i64 }, ptr %result5, align 8
  ret { ptr, i64 } %6
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.ZString.tcopy(ptr %0) #0 comdat !dbg !1038 {
entry:
  %self = alloca ptr, align 8
  %result = alloca %"char[]", align 8
  %result3 = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1039, !DIExpression(), !1040)
  %1 = load ptr, ptr %self, align 8, !dbg !1041
  %2 = call { ptr, i64 } @std.core.string.ZString.str_view(ptr %1), !dbg !1041
  store { ptr, i64 } %2, ptr %result, align 8
  %lo = load ptr, ptr %result, align 8, !dbg !1042
  %ptradd = getelementptr inbounds i8, ptr %result, i64 8, !dbg !1042
  %hi = load i64, ptr %ptradd, align 8, !dbg !1042
  %lo1 = load i64, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !1042
  %hi2 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8, !dbg !1042
  %3 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo1, ptr %hi2) #5, !dbg !1041
  store { ptr, i64 } %3, ptr %result3, align 8
  %4 = load { ptr, i64 }, ptr %result3, align 8
  ret { ptr, i64 } %4
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_utf16(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !1043 {
entry:
  %self = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %len16 = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %elements = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %taddr14 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %error_var16 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [1 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1054, !DIExpression(), !1055)
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !1056, !DIExpression(), !1057)
    #dbg_declare(ptr %len16, !1058, !DIExpression(), !1059)
  %lo = load ptr, ptr %self, align 8, !dbg !1060
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1060
  %hi = load i64, ptr %ptradd2, align 8, !dbg !1060
  %5 = call i64 @std.core.string.conv.utf16len_for_utf8(ptr %lo, i64 %hi), !dbg !1061
  store i64 %5, ptr %len16, align 8, !dbg !1061
    #dbg_declare(ptr %data, !1062, !DIExpression(), !1063)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %6 = load i64, ptr %len16, align 8, !dbg !1064
  %add = add i64 %6, 1, !dbg !1064
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator3, i32 16, i1 false)
  %7 = load i64, ptr %elements, align 8, !dbg !1065
  %mul = mul i64 2, %7, !dbg !1068
  store i64 %mul, ptr %size, align 8
  %8 = load i64, ptr %size, align 8, !dbg !1069
  %i2nb = icmp eq i64 %8, 0, !dbg !1069
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1069

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !1072
  br label %expr_block.exit, !dbg !1072

if.exit:                                          ; preds = %entry
  %9 = load i64, ptr %size, align 8, !dbg !1073
  br i1 true, label %or.phi, label %or.rhs, !dbg !1074

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %10 = load i64, ptr %x, align 8, !dbg !1075
  %neq = icmp ne i64 0, %10, !dbg !1075
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1075

and.rhs:                                          ; preds = %or.rhs
  %11 = load i64, ptr %x, align 8, !dbg !1078
  %12 = load i64, ptr %x, align 8, !dbg !1079
  %sub = sub i64 %12, 1, !dbg !1079
  %and = and i64 %11, %sub, !dbg !1078
  %eq = icmp eq i64 %and, 0, !dbg !1078
  br label %and.phi, !dbg !1078

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !1078
  br label %or.phi, !dbg !1078

or.phi:                                           ; preds = %and.phi, %if.exit
  %val5 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !1078
  br i1 %val5, label %assert_ok, label %assert_fail, !dbg !1078

assert_fail:                                      ; preds = %or.phi
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1080
  call void %13(ptr @.panic_msg, i64 65, ptr @.file, i64 16, ptr @.func.69, i64 8, i32 85) #6, !dbg !1080
  unreachable, !dbg !1080

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok7, label %assert_fail6, !dbg !1080

assert_fail6:                                     ; preds = %assert_ok
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1080
  call void %14(ptr @.panic_msg.10, i64 80, ptr @.file, i64 16, ptr @.func.69, i64 8, i32 85) #6, !dbg !1080
  unreachable, !dbg !1080

assert_ok7:                                       ; preds = %assert_ok
  %lt = icmp ult i64 0, %9, !dbg !1080
  br i1 %lt, label %assert_ok9, label %assert_fail8, !dbg !1080

assert_fail8:                                     ; preds = %assert_ok7
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1080
  call void %15(ptr @.panic_msg.11, i64 59, ptr @.file, i64 16, ptr @.func.69, i64 8, i32 85) #6, !dbg !1080
  unreachable, !dbg !1080

assert_ok9:                                       ; preds = %assert_ok7
  %ptradd10 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !1080
  %16 = load i64, ptr %ptradd10, align 8, !dbg !1080
  %17 = inttoptr i64 %16 to ptr, !dbg !1080
  %type = load ptr, ptr %.cachedtype, align 8
  %18 = icmp eq ptr %17, %type
  br i1 %18, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok9
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 16
  %19 = load ptr, ptr %ptradd11, align 8
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.acquire")
  store ptr %20, ptr %.inlinecache, align 8
  store ptr %17, ptr %.cachedtype, align 8
  br label %21

cache_hit:                                        ; preds = %assert_ok9
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %21

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ]
  %22 = icmp eq ptr %fn_phi, null
  br i1 %22, label %missing_function, label %match

missing_function:                                 ; preds = %21
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1080
  call void %23(ptr @.panic_msg.12, i64 44, ptr @.file, i64 16, ptr @.func.69, i64 8, i32 85) #6, !dbg !1080
  unreachable, !dbg !1080

match:                                            ; preds = %21
  %24 = load ptr, ptr %allocator4, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24, i64 %9, i32 0, i64 0), !dbg !1080
  %not_err = icmp eq i64 %25, 0, !dbg !1080
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1080
  br i1 %26, label %after_check, label %assign_optional, !dbg !1080

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %error_var, align 8, !dbg !1080
  br label %guard_block, !dbg !1080

after_check:                                      ; preds = %match
  %27 = load ptr, ptr %retparam, align 8, !dbg !1080
  store ptr %27, ptr %blockret, align 8, !dbg !1080
  br label %expr_block.exit, !dbg !1080

expr_block.exit:                                  ; preds = %after_check, %if.then
  %28 = load ptr, ptr %blockret, align 8, !dbg !1080
  store ptr %28, ptr %taddr, align 8
  %29 = load ptr, ptr %taddr, align 8
  %30 = load i64, ptr %elements, align 8, !dbg !1081
  %add12 = add i64 0, %30, !dbg !1081
  %gt = icmp ugt i64 0, %add12, !dbg !1081
  %sub13 = sub i64 %add12, 0, !dbg !1081
  %31 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1081
  br i1 %31, label %panic, label %checkok, !dbg !1081

checkok:                                          ; preds = %expr_block.exit
  %size15 = sub i64 %add12, 0, !dbg !1082
  %32 = insertvalue %"ushort[]" undef, ptr %29, 0, !dbg !1082
  %33 = insertvalue %"ushort[]" %32, i64 %size15, 1, !dbg !1082
  br label %noerr_block, !dbg !1082

guard_block:                                      ; preds = %assign_optional
  %34 = load i64, ptr %error_var, align 8, !dbg !1082
  ret i64 %34, !dbg !1082

noerr_block:                                      ; preds = %checkok
  %35 = extractvalue %"ushort[]" %33, 0, !dbg !1082
  store ptr %35, ptr %data, align 8, !dbg !1082
  %lo17 = load ptr, ptr %self, align 8, !dbg !1083
  %ptradd18 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1083
  %hi19 = load i64, ptr %ptradd18, align 8, !dbg !1083
  %36 = load ptr, ptr %data, align 8, !dbg !1083
  %37 = call i64 @std.core.string.conv.utf8to16_unsafe(ptr %lo17, i64 %hi19, ptr %36), !dbg !1084
  %not_err20 = icmp eq i64 %37, 0, !dbg !1084
  %38 = call i1 @llvm.expect.i1(i1 %not_err20, i1 true), !dbg !1084
  br i1 %38, label %after_check22, label %assign_optional21, !dbg !1084

assign_optional21:                                ; preds = %noerr_block
  store i64 %37, ptr %error_var16, align 8, !dbg !1084
  br label %guard_block23, !dbg !1084

after_check22:                                    ; preds = %noerr_block
  br label %noerr_block24, !dbg !1084

guard_block23:                                    ; preds = %assign_optional21
  %39 = load i64, ptr %error_var16, align 8, !dbg !1084
  ret i64 %39, !dbg !1084

noerr_block24:                                    ; preds = %after_check22
  %40 = load ptr, ptr %data, align 8, !dbg !1085
  %41 = load i64, ptr %len16, align 8, !dbg !1086
  %ptroffset = getelementptr inbounds [2 x i8], ptr %40, i64 %41, !dbg !1086
  store i16 0, ptr %ptroffset, align 2, !dbg !1087
  %42 = load ptr, ptr %data, align 8, !dbg !1088
  %43 = load i64, ptr %len16, align 8, !dbg !1089
  %add25 = add i64 0, %43, !dbg !1089
  %gt26 = icmp ugt i64 0, %add25, !dbg !1089
  %sub27 = sub i64 %add25, 0, !dbg !1089
  %44 = call i1 @llvm.expect.i1(i1 %gt26, i1 false), !dbg !1089
  br i1 %44, label %panic28, label %checkok33, !dbg !1089

checkok33:                                        ; preds = %noerr_block24
  %size34 = sub i64 %add25, 0, !dbg !1088
  %45 = insertvalue %"ushort[]" undef, ptr %42, 0, !dbg !1088
  %46 = insertvalue %"ushort[]" %45, i64 %size34, 1, !dbg !1088
  store %"ushort[]" %46, ptr %0, align 8, !dbg !1088
  ret i64 0, !dbg !1088

panic:                                            ; preds = %expr_block.exit
  store i64 %sub13, ptr %taddr14, align 8
  %47 = insertvalue %any undef, ptr %taddr14, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %48, ptr %varargslots, align 16
  %49 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %49, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file, i64 16, ptr @.func.69, i64 8, i32 303, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1082
  unreachable, !dbg !1082

panic28:                                          ; preds = %noerr_block24
  store i64 %sub27, ptr %taddr29, align 8
  %50 = insertvalue %any undef, ptr %taddr29, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots30, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp31" = insertvalue %"any[]" %52, i64 1, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.69, i64 8, i32 670, ptr byval(%"any[]") align 8 %indirectarg32) #6, !dbg !1088
  unreachable, !dbg !1088
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_temp_utf16(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1090 {
entry:
  %self = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"ushort[]", align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1093, !DIExpression(), !1094)
  %lo = load ptr, ptr %self, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %self, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  %lo2 = load i64, ptr @std.core.mem.allocator.current_temp, align 8
  %hi3 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8
  %3 = call i64 @std.core.String.to_utf16(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi3), !dbg !1095
  %not_err = icmp eq i64 %3, 0, !dbg !1095
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1095
  br i1 %4, label %after_check, label %assign_optional, !dbg !1095

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !1095
  br label %err_retblock, !dbg !1095

after_check:                                      ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !1095
  ret i64 0, !dbg !1095

err_retblock:                                     ; preds = %assign_optional
  %5 = load i64, ptr %reterr, align 8, !dbg !1095
  ret i64 %5, !dbg !1095
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_wstring(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !1096 {
entry:
  %self = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"ushort[]", align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1102, !DIExpression(), !1103)
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !1104, !DIExpression(), !1105)
  %lo = load ptr, ptr %self, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load i64, ptr %allocator, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %allocator, i64 8
  %hi5 = load ptr, ptr %ptradd4, align 8
  %5 = call i64 @std.core.String.to_utf16(ptr %retparam, ptr %lo, i64 %hi, i64 %lo3, ptr %hi5), !dbg !1106
  %not_err = icmp eq i64 %5, 0, !dbg !1106
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1106
  br i1 %6, label %after_check, label %assign_optional, !dbg !1106

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %reterr, align 8, !dbg !1106
  br label %err_retblock, !dbg !1106

after_check:                                      ; preds = %entry
  %7 = load ptr, ptr %retparam, align 8, !dbg !1106
  store ptr %7, ptr %0, align 8, !dbg !1106
  ret i64 0, !dbg !1106

err_retblock:                                     ; preds = %assign_optional
  %8 = load i64, ptr %reterr, align 8, !dbg !1106
  ret i64 %8, !dbg !1106
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_temp_wstring(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1107 {
entry:
  %self = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1110, !DIExpression(), !1111)
  %lo = load ptr, ptr %self, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %self, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  %lo2 = load i64, ptr @std.core.mem.allocator.current_temp, align 8
  %hi3 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8
  %3 = call i64 @std.core.String.to_wstring(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi3), !dbg !1112
  %not_err = icmp eq i64 %3, 0, !dbg !1112
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1112
  br i1 %4, label %after_check, label %assign_optional, !dbg !1112

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !1112
  br label %err_retblock, !dbg !1112

after_check:                                      ; preds = %entry
  %5 = load ptr, ptr %retparam, align 8, !dbg !1112
  store ptr %5, ptr %0, align 8, !dbg !1112
  ret i64 0, !dbg !1112

err_retblock:                                     ; preds = %assign_optional
  %6 = load i64, ptr %reterr, align 8, !dbg !1112
  ret i64 %6, !dbg !1112
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_utf32(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !1113 {
entry:
  %self = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %codepoints = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %elements = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %taddr14 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %error_var16 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [1 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1123, !DIExpression(), !1124)
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !1125, !DIExpression(), !1126)
    #dbg_declare(ptr %codepoints, !1127, !DIExpression(), !1128)
  %lo = load ptr, ptr %self, align 8, !dbg !1129
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1129
  %hi = load i64, ptr %ptradd2, align 8, !dbg !1129
  %5 = call i64 @std.core.string.conv.utf8_codepoints(ptr %lo, i64 %hi), !dbg !1130
  store i64 %5, ptr %codepoints, align 8, !dbg !1130
    #dbg_declare(ptr %data, !1131, !DIExpression(), !1132)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %6 = load i64, ptr %codepoints, align 8, !dbg !1133
  %add = add i64 %6, 1, !dbg !1133
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator3, i32 16, i1 false)
  %7 = load i64, ptr %elements, align 8, !dbg !1134
  %mul = mul i64 4, %7, !dbg !1137
  store i64 %mul, ptr %size, align 8
  %8 = load i64, ptr %size, align 8, !dbg !1138
  %i2nb = icmp eq i64 %8, 0, !dbg !1138
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1138

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !1141
  br label %expr_block.exit, !dbg !1141

if.exit:                                          ; preds = %entry
  %9 = load i64, ptr %size, align 8, !dbg !1142
  br i1 true, label %or.phi, label %or.rhs, !dbg !1143

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %10 = load i64, ptr %x, align 8, !dbg !1144
  %neq = icmp ne i64 0, %10, !dbg !1144
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !1144

and.rhs:                                          ; preds = %or.rhs
  %11 = load i64, ptr %x, align 8, !dbg !1147
  %12 = load i64, ptr %x, align 8, !dbg !1148
  %sub = sub i64 %12, 1, !dbg !1148
  %and = and i64 %11, %sub, !dbg !1147
  %eq = icmp eq i64 %and, 0, !dbg !1147
  br label %and.phi, !dbg !1147

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !1147
  br label %or.phi, !dbg !1147

or.phi:                                           ; preds = %and.phi, %if.exit
  %val5 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !1147
  br i1 %val5, label %assert_ok, label %assert_fail, !dbg !1147

assert_fail:                                      ; preds = %or.phi
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1149
  call void %13(ptr @.panic_msg, i64 65, ptr @.file, i64 16, ptr @.func.70, i64 8, i32 85) #6, !dbg !1149
  unreachable, !dbg !1149

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok7, label %assert_fail6, !dbg !1149

assert_fail6:                                     ; preds = %assert_ok
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1149
  call void %14(ptr @.panic_msg.10, i64 80, ptr @.file, i64 16, ptr @.func.70, i64 8, i32 85) #6, !dbg !1149
  unreachable, !dbg !1149

assert_ok7:                                       ; preds = %assert_ok
  %lt = icmp ult i64 0, %9, !dbg !1149
  br i1 %lt, label %assert_ok9, label %assert_fail8, !dbg !1149

assert_fail8:                                     ; preds = %assert_ok7
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1149
  call void %15(ptr @.panic_msg.11, i64 59, ptr @.file, i64 16, ptr @.func.70, i64 8, i32 85) #6, !dbg !1149
  unreachable, !dbg !1149

assert_ok9:                                       ; preds = %assert_ok7
  %ptradd10 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !1149
  %16 = load i64, ptr %ptradd10, align 8, !dbg !1149
  %17 = inttoptr i64 %16 to ptr, !dbg !1149
  %type = load ptr, ptr %.cachedtype, align 8
  %18 = icmp eq ptr %17, %type
  br i1 %18, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok9
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 16
  %19 = load ptr, ptr %ptradd11, align 8
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.acquire")
  store ptr %20, ptr %.inlinecache, align 8
  store ptr %17, ptr %.cachedtype, align 8
  br label %21

cache_hit:                                        ; preds = %assert_ok9
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %21

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ]
  %22 = icmp eq ptr %fn_phi, null
  br i1 %22, label %missing_function, label %match

missing_function:                                 ; preds = %21
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1149
  call void %23(ptr @.panic_msg.12, i64 44, ptr @.file, i64 16, ptr @.func.70, i64 8, i32 85) #6, !dbg !1149
  unreachable, !dbg !1149

match:                                            ; preds = %21
  %24 = load ptr, ptr %allocator4, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24, i64 %9, i32 0, i64 0), !dbg !1149
  %not_err = icmp eq i64 %25, 0, !dbg !1149
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1149
  br i1 %26, label %after_check, label %assign_optional, !dbg !1149

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %error_var, align 8, !dbg !1149
  br label %guard_block, !dbg !1149

after_check:                                      ; preds = %match
  %27 = load ptr, ptr %retparam, align 8, !dbg !1149
  store ptr %27, ptr %blockret, align 8, !dbg !1149
  br label %expr_block.exit, !dbg !1149

expr_block.exit:                                  ; preds = %after_check, %if.then
  %28 = load ptr, ptr %blockret, align 8, !dbg !1149
  store ptr %28, ptr %taddr, align 8
  %29 = load ptr, ptr %taddr, align 8
  %30 = load i64, ptr %elements, align 8, !dbg !1150
  %add12 = add i64 0, %30, !dbg !1150
  %gt = icmp ugt i64 0, %add12, !dbg !1150
  %sub13 = sub i64 %add12, 0, !dbg !1150
  %31 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1150
  br i1 %31, label %panic, label %checkok, !dbg !1150

checkok:                                          ; preds = %expr_block.exit
  %size15 = sub i64 %add12, 0, !dbg !1151
  %32 = insertvalue %"uint[]" undef, ptr %29, 0, !dbg !1151
  %33 = insertvalue %"uint[]" %32, i64 %size15, 1, !dbg !1151
  br label %noerr_block, !dbg !1151

guard_block:                                      ; preds = %assign_optional
  %34 = load i64, ptr %error_var, align 8, !dbg !1151
  ret i64 %34, !dbg !1151

noerr_block:                                      ; preds = %checkok
  %35 = extractvalue %"uint[]" %33, 0, !dbg !1151
  store ptr %35, ptr %data, align 8, !dbg !1151
  %lo17 = load ptr, ptr %self, align 8, !dbg !1152
  %ptradd18 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1152
  %hi19 = load i64, ptr %ptradd18, align 8, !dbg !1152
  %36 = load ptr, ptr %data, align 8, !dbg !1152
  %37 = call i64 @std.core.string.conv.utf8to32_unsafe(ptr %lo17, i64 %hi19, ptr %36), !dbg !1153
  %not_err20 = icmp eq i64 %37, 0, !dbg !1153
  %38 = call i1 @llvm.expect.i1(i1 %not_err20, i1 true), !dbg !1153
  br i1 %38, label %after_check22, label %assign_optional21, !dbg !1153

assign_optional21:                                ; preds = %noerr_block
  store i64 %37, ptr %error_var16, align 8, !dbg !1153
  br label %guard_block23, !dbg !1153

after_check22:                                    ; preds = %noerr_block
  br label %noerr_block24, !dbg !1153

guard_block23:                                    ; preds = %assign_optional21
  %39 = load i64, ptr %error_var16, align 8, !dbg !1153
  ret i64 %39, !dbg !1153

noerr_block24:                                    ; preds = %after_check22
  %40 = load ptr, ptr %data, align 8, !dbg !1154
  %41 = load i64, ptr %codepoints, align 8, !dbg !1155
  %ptroffset = getelementptr inbounds [4 x i8], ptr %40, i64 %41, !dbg !1155
  store i32 0, ptr %ptroffset, align 4, !dbg !1156
  %42 = load ptr, ptr %data, align 8, !dbg !1157
  %43 = load i64, ptr %codepoints, align 8, !dbg !1158
  %add25 = add i64 0, %43, !dbg !1158
  %gt26 = icmp ugt i64 0, %add25, !dbg !1158
  %sub27 = sub i64 %add25, 0, !dbg !1158
  %44 = call i1 @llvm.expect.i1(i1 %gt26, i1 false), !dbg !1158
  br i1 %44, label %panic28, label %checkok33, !dbg !1158

checkok33:                                        ; preds = %noerr_block24
  %size34 = sub i64 %add25, 0, !dbg !1157
  %45 = insertvalue %"uint[]" undef, ptr %42, 0, !dbg !1157
  %46 = insertvalue %"uint[]" %45, i64 %size34, 1, !dbg !1157
  store %"uint[]" %46, ptr %0, align 8, !dbg !1157
  ret i64 0, !dbg !1157

panic:                                            ; preds = %expr_block.exit
  store i64 %sub13, ptr %taddr14, align 8
  %47 = insertvalue %any undef, ptr %taddr14, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %48, ptr %varargslots, align 16
  %49 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %49, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file, i64 16, ptr @.func.70, i64 8, i32 303, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1151
  unreachable, !dbg !1151

panic28:                                          ; preds = %noerr_block24
  store i64 %sub27, ptr %taddr29, align 8
  %50 = insertvalue %any undef, ptr %taddr29, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots30, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp31" = insertvalue %"any[]" %52, i64 1, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.70, i64 8, i32 688, ptr byval(%"any[]") align 8 %indirectarg32) #6, !dbg !1157
  unreachable, !dbg !1157
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_temp_utf32(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1159 {
entry:
  %self = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"uint[]", align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1162, !DIExpression(), !1163)
  %lo = load ptr, ptr %self, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %self, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  %lo2 = load i64, ptr @std.core.mem.allocator.current_temp, align 8
  %hi3 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8
  %3 = call i64 @std.core.String.to_utf32(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi3), !dbg !1164
  %not_err = icmp eq i64 %3, 0, !dbg !1164
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1164
  br i1 %4, label %after_check, label %assign_optional, !dbg !1164

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !1164
  br label %err_retblock, !dbg !1164

after_check:                                      ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !1164
  ret i64 0, !dbg !1164

err_retblock:                                     ; preds = %assign_optional
  %5 = load i64, ptr %reterr, align 8, !dbg !1164
  ret i64 %5, !dbg !1164
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.convert_to_lower(ptr %0, i64 %1) #0 comdat !dbg !1165 {
entry:
  %self = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %c = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %c8 = alloca i8, align 1
  %c9 = alloca i8, align 1
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1168, !DIExpression(), !1169)
  %ptradd1 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1170
  %2 = load i64, ptr %ptradd1, align 8, !dbg !1170
    #dbg_declare(ptr %.anon, !1172, !DIExpression(), !1170)
  store i64 0, ptr %.anon, align 8, !dbg !1170
  br label %loop.cond, !dbg !1170

loop.cond:                                        ; preds = %if.exit, %entry
  %3 = load i64, ptr %.anon, align 8, !dbg !1170
  %lt = icmp ult i64 %3, %2, !dbg !1170
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1170

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1173, !DIExpression(), !1175)
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1176
  %4 = load i64, ptr %ptradd2, align 8, !dbg !1176
  %5 = load ptr, ptr %self, align 8, !dbg !1176
  %6 = load i64, ptr %.anon, align 8, !dbg !1176
  %ge = icmp uge i64 %6, %4, !dbg !1176
  %7 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1176
  br i1 %7, label %panic, label %checkok, !dbg !1176

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %5, i64 %6, !dbg !1176
  store ptr %ptradd5, ptr %c, align 8, !dbg !1176
  %8 = load ptr, ptr %c, align 8, !dbg !1177
  %checknull = icmp eq ptr %8, null, !dbg !1177
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1177
  br i1 %9, label %panic6, label %checkok7, !dbg !1177

checkok7:                                         ; preds = %checkok
  %10 = load i8, ptr %8, align 1
  store i8 %10, ptr %c8, align 1
  %11 = load i8, ptr %c8, align 1
  store i8 %11, ptr %c9, align 1
  %12 = load i8, ptr %c9, align 1, !dbg !1178
  %zext = zext i8 %12 to i64, !dbg !1178
  %ge10 = icmp uge i64 %zext, 256, !dbg !1178
  %13 = call i1 @llvm.expect.i1(i1 %ge10, i1 false), !dbg !1178
  br i1 %13, label %panic11, label %checkok18, !dbg !1178

checkok18:                                        ; preds = %checkok7
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1178
  %14 = load i16, ptr %ptroffset, align 2, !dbg !1178
  %lshrl = lshr i16 %14, 1, !dbg !1178
  %15 = and i16 1, %lshrl, !dbg !1178
  %trunc = trunc i16 %15 to i8, !dbg !1178
  %16 = trunc i8 %trunc to i1, !dbg !1178
  br i1 %16, label %if.then, label %if.exit, !dbg !1178

if.then:                                          ; preds = %checkok18
  %17 = load ptr, ptr %c, align 8, !dbg !1183
  %checknull19 = icmp eq ptr %17, null, !dbg !1183
  %18 = call i1 @llvm.expect.i1(i1 %checknull19, i1 false), !dbg !1183
  br i1 %18, label %panic20, label %checkok21, !dbg !1183

checkok21:                                        ; preds = %if.then
  %19 = load i8, ptr %17, align 1, !dbg !1183
  %add = add i8 %19, 32, !dbg !1184
  store i8 %add, ptr %17, align 1, !dbg !1184
  br label %if.exit, !dbg !1184

if.exit:                                          ; preds = %checkok21, %checkok18
  %20 = load i64, ptr %.anon, align 8, !dbg !1170
  %addnuw = add nuw i64 %20, 1, !dbg !1170
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1170
  br label %loop.cond, !dbg !1170

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !1170

panic:                                            ; preds = %loop.body
  store i64 %4, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr3, align 8
  %23 = insertvalue %any undef, ptr %taddr3, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd4, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.71, i64 16, i32 701, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1176
  unreachable, !dbg !1176

panic6:                                           ; preds = %checkok
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1177
  call void %26(ptr @.panic_msg.72, i64 42, ptr @.file.16, i64 9, ptr @.func.71, i64 16, i32 701) #6, !dbg !1177
  unreachable, !dbg !1177

panic11:                                          ; preds = %checkok7
  store i64 256, ptr %taddr12, align 8
  %27 = insertvalue %any undef, ptr %taddr12, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr13, align 8
  %29 = insertvalue %any undef, ptr %taddr13, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %30, ptr %ptradd15, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 8, ptr @.func.71, i64 16, i32 8, ptr byval(%"any[]") align 8 %indirectarg17) #6, !dbg !1178
  unreachable, !dbg !1178

panic20:                                          ; preds = %if.then
  %32 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1183
  call void %32(ptr @.panic_msg.72, i64 42, ptr @.file.16, i64 9, ptr @.func.71, i64 16, i32 701) #6, !dbg !1183
  unreachable, !dbg !1183
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.to_lower_copy(ptr %0, i64 %1, i64 %2, ptr %3) #0 comdat !dbg !1185 {
entry:
  %self = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %copy = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1186, !DIExpression(), !1187)
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !1188, !DIExpression(), !1189)
    #dbg_declare(ptr %copy, !1190, !DIExpression(), !1191)
  %lo = load ptr, ptr %self, align 8, !dbg !1192
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1192
  %hi = load i64, ptr %ptradd2, align 8, !dbg !1192
  %lo3 = load i64, ptr %allocator, align 8, !dbg !1192
  %ptradd4 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1192
  %hi5 = load ptr, ptr %ptradd4, align 8, !dbg !1192
  %4 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo3, ptr %hi5), !dbg !1193
  store { ptr, i64 } %4, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %copy, ptr align 8 %result, i32 16, i1 false)
  %lo6 = load ptr, ptr %copy, align 8, !dbg !1194
  %ptradd7 = getelementptr inbounds i8, ptr %copy, i64 8, !dbg !1194
  %hi8 = load i64, ptr %ptradd7, align 8, !dbg !1194
  call void @std.core.String.convert_to_lower(ptr %lo6, i64 %hi8), !dbg !1194
  %5 = load { ptr, i64 }, ptr %copy, align 8, !dbg !1195
  ret { ptr, i64 } %5, !dbg !1195
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.to_lower_tcopy(ptr %0, i64 %1) #0 comdat !dbg !1196 {
entry:
  %self = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1197, !DIExpression(), !1198)
  %lo = load ptr, ptr %self, align 8, !dbg !1199
  %ptradd1 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1199
  %hi = load i64, ptr %ptradd1, align 8, !dbg !1199
  %lo2 = load i64, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !1199
  %hi3 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8, !dbg !1199
  %2 = call { ptr, i64 } @std.core.String.to_lower_copy(ptr %lo, i64 %hi, i64 %lo2, ptr %hi3), !dbg !1200
  store { ptr, i64 } %2, ptr %result, align 8
  %3 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %3
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.convert_to_upper(ptr %0, i64 %1) #0 comdat !dbg !1201 {
entry:
  %self = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %c = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %c8 = alloca i8, align 1
  %c9 = alloca i8, align 1
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1202, !DIExpression(), !1203)
  %ptradd1 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1204
  %2 = load i64, ptr %ptradd1, align 8, !dbg !1204
    #dbg_declare(ptr %.anon, !1206, !DIExpression(), !1204)
  store i64 0, ptr %.anon, align 8, !dbg !1204
  br label %loop.cond, !dbg !1204

loop.cond:                                        ; preds = %if.exit, %entry
  %3 = load i64, ptr %.anon, align 8, !dbg !1204
  %lt = icmp ult i64 %3, %2, !dbg !1204
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1204

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1207, !DIExpression(), !1209)
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1210
  %4 = load i64, ptr %ptradd2, align 8, !dbg !1210
  %5 = load ptr, ptr %self, align 8, !dbg !1210
  %6 = load i64, ptr %.anon, align 8, !dbg !1210
  %ge = icmp uge i64 %6, %4, !dbg !1210
  %7 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1210
  br i1 %7, label %panic, label %checkok, !dbg !1210

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %5, i64 %6, !dbg !1210
  store ptr %ptradd5, ptr %c, align 8, !dbg !1210
  %8 = load ptr, ptr %c, align 8, !dbg !1211
  %checknull = icmp eq ptr %8, null, !dbg !1211
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1211
  br i1 %9, label %panic6, label %checkok7, !dbg !1211

checkok7:                                         ; preds = %checkok
  %10 = load i8, ptr %8, align 1
  store i8 %10, ptr %c8, align 1
  %11 = load i8, ptr %c8, align 1
  store i8 %11, ptr %c9, align 1
  %12 = load i8, ptr %c9, align 1, !dbg !1212
  %zext = zext i8 %12 to i64, !dbg !1212
  %ge10 = icmp uge i64 %zext, 256, !dbg !1212
  %13 = call i1 @llvm.expect.i1(i1 %ge10, i1 false), !dbg !1212
  br i1 %13, label %panic11, label %checkok18, !dbg !1212

checkok18:                                        ; preds = %checkok7
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1212
  %14 = load i16, ptr %ptroffset, align 2, !dbg !1212
  %15 = and i16 1, %14, !dbg !1212
  %trunc = trunc i16 %15 to i8, !dbg !1212
  %16 = trunc i8 %trunc to i1, !dbg !1212
  br i1 %16, label %if.then, label %if.exit, !dbg !1212

if.then:                                          ; preds = %checkok18
  %17 = load ptr, ptr %c, align 8, !dbg !1216
  %checknull19 = icmp eq ptr %17, null, !dbg !1216
  %18 = call i1 @llvm.expect.i1(i1 %checknull19, i1 false), !dbg !1216
  br i1 %18, label %panic20, label %checkok21, !dbg !1216

checkok21:                                        ; preds = %if.then
  %19 = load i8, ptr %17, align 1, !dbg !1216
  %sub = sub i8 %19, 32, !dbg !1217
  store i8 %sub, ptr %17, align 1, !dbg !1217
  br label %if.exit, !dbg !1217

if.exit:                                          ; preds = %checkok21, %checkok18
  %20 = load i64, ptr %.anon, align 8, !dbg !1204
  %addnuw = add nuw i64 %20, 1, !dbg !1204
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1204
  br label %loop.cond, !dbg !1204

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !1204

panic:                                            ; preds = %loop.body
  store i64 %4, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr3, align 8
  %23 = insertvalue %any undef, ptr %taddr3, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %22, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd4, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.74, i64 16, i32 724, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1210
  unreachable, !dbg !1210

panic6:                                           ; preds = %checkok
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1211
  call void %26(ptr @.panic_msg.72, i64 42, ptr @.file.16, i64 9, ptr @.func.74, i64 16, i32 724) #6, !dbg !1211
  unreachable, !dbg !1211

panic11:                                          ; preds = %checkok7
  store i64 256, ptr %taddr12, align 8
  %27 = insertvalue %any undef, ptr %taddr12, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr13, align 8
  %29 = insertvalue %any undef, ptr %taddr13, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %30, ptr %ptradd15, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 8, ptr @.func.74, i64 16, i32 7, ptr byval(%"any[]") align 8 %indirectarg17) #6, !dbg !1212
  unreachable, !dbg !1212

panic20:                                          ; preds = %if.then
  %32 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1216
  call void %32(ptr @.panic_msg.72, i64 42, ptr @.file.16, i64 9, ptr @.func.74, i64 16, i32 724) #6, !dbg !1216
  unreachable, !dbg !1216
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.to_upper_copy(ptr %0, i64 %1, i64 %2, ptr %3) #0 comdat !dbg !1218 {
entry:
  %self = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %copy = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1219, !DIExpression(), !1220)
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %allocator, !1221, !DIExpression(), !1222)
    #dbg_declare(ptr %copy, !1223, !DIExpression(), !1224)
  %lo = load ptr, ptr %self, align 8, !dbg !1225
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1225
  %hi = load i64, ptr %ptradd2, align 8, !dbg !1225
  %lo3 = load i64, ptr %allocator, align 8, !dbg !1225
  %ptradd4 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1225
  %hi5 = load ptr, ptr %ptradd4, align 8, !dbg !1225
  %4 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo3, ptr %hi5), !dbg !1226
  store { ptr, i64 } %4, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %copy, ptr align 8 %result, i32 16, i1 false)
  %lo6 = load ptr, ptr %copy, align 8, !dbg !1227
  %ptradd7 = getelementptr inbounds i8, ptr %copy, i64 8, !dbg !1227
  %hi8 = load i64, ptr %ptradd7, align 8, !dbg !1227
  call void @std.core.String.convert_to_upper(ptr %lo6, i64 %hi8), !dbg !1227
  %5 = load { ptr, i64 }, ptr %copy, align 8, !dbg !1228
  ret { ptr, i64 } %5, !dbg !1228
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.iterator(ptr noalias sret(%StringIterator) align 8 %0, ptr %1, i64 %2) #0 comdat !dbg !1229 {
entry:
  %self = alloca %"char[]", align 8
  %literal = alloca %StringIterator, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1236, !DIExpression(), !1237)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %self, i32 16, i1 false), !dbg !1238
  %ptradd1 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !1238
  store i64 0, ptr %ptradd1, align 8, !dbg !1239
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 24, i1 false), !dbg !1239
  ret void, !dbg !1239
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.to_upper_tcopy(ptr %0, i64 %1) #0 comdat !dbg !1240 {
entry:
  %self = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1241, !DIExpression(), !1242)
  %lo = load ptr, ptr %self, align 8, !dbg !1243
  %ptradd1 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1243
  %hi = load i64, ptr %ptradd1, align 8, !dbg !1243
  %lo2 = load i64, ptr @std.core.mem.allocator.current_temp, align 8, !dbg !1243
  %hi3 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8, !dbg !1243
  %2 = call { ptr, i64 } @std.core.String.to_upper_copy(ptr %lo, i64 %hi, i64 %lo2, ptr %hi3), !dbg !1244
  store { ptr, i64 } %2, ptr %result, align 8
  %3 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %3
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.utf8_codepoints(ptr %0, i64 %1) #0 comdat !dbg !1245 {
entry:
  %s = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %s, !1248, !DIExpression(), !1249)
    #dbg_declare(ptr %len, !1250, !DIExpression(), !1251)
  store i64 0, ptr %len, align 8, !dbg !1252
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1253
  %2 = load i64, ptr %ptradd1, align 8, !dbg !1253
    #dbg_declare(ptr %.anon, !1255, !DIExpression(), !1253)
  store i64 0, ptr %.anon, align 8, !dbg !1253
  br label %loop.cond, !dbg !1253

loop.cond:                                        ; preds = %if.exit, %entry
  %3 = load i64, ptr %.anon, align 8, !dbg !1253
  %lt = icmp ult i64 %3, %2, !dbg !1253
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1253

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1256, !DIExpression(), !1258)
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1259
  %4 = load i64, ptr %ptradd2, align 8, !dbg !1259
  %5 = load ptr, ptr %s, align 8, !dbg !1259
  %6 = load i64, ptr %.anon, align 8, !dbg !1259
  %ge = icmp uge i64 %6, %4, !dbg !1259
  %7 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1259
  br i1 %7, label %panic, label %checkok, !dbg !1259

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %5, i64 %6, !dbg !1259
  %8 = load i8, ptr %ptradd5, align 1, !dbg !1259
  store i8 %8, ptr %c, align 1, !dbg !1259
  %9 = load i8, ptr %c, align 1, !dbg !1260
  %zext = zext i8 %9 to i32, !dbg !1260
  %and = and i32 %zext, 192, !dbg !1260
  %neq = icmp ne i32 %and, 128, !dbg !1260
  br i1 %neq, label %if.then, label %if.exit, !dbg !1260

if.then:                                          ; preds = %checkok
  %10 = load i64, ptr %len, align 8, !dbg !1262
  %add = add i64 %10, 1, !dbg !1262
  store i64 %add, ptr %len, align 8, !dbg !1262
  br label %if.exit, !dbg !1262

if.exit:                                          ; preds = %if.then, %checkok
  %11 = load i64, ptr %.anon, align 8, !dbg !1253
  %addnuw = add nuw i64 %11, 1, !dbg !1253
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1253
  br label %loop.cond, !dbg !1253

loop.exit:                                        ; preds = %loop.cond
  %12 = load i64, ptr %len, align 8, !dbg !1263
  ret i64 %12, !dbg !1263

panic:                                            ; preds = %loop.body
  store i64 %4, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr3, align 8
  %15 = insertvalue %any undef, ptr %taddr3, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %14, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %16, ptr %ptradd4, align 16
  %17 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %17, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.75, i64 15, i32 790, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1259
  unreachable, !dbg !1259
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.core.String.is_zstr(ptr %0, i64 %1) #0 comdat !dbg !1264 {
entry:
  %self = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1267, !DIExpression(), !1268)
  %2 = load ptr, ptr %self, align 8, !dbg !1269
  %i2b = icmp ne ptr %2, null, !dbg !1269
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !1269

and.rhs:                                          ; preds = %entry
  %3 = load ptr, ptr %self, align 8, !dbg !1270
  %ptradd1 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1271
  %4 = load i64, ptr %ptradd1, align 8, !dbg !1271
  %ptradd_any = getelementptr i8, ptr %3, i64 %4, !dbg !1271
  %checknull = icmp eq ptr %ptradd_any, null, !dbg !1271
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1271
  br i1 %5, label %panic, label %checkok, !dbg !1271

checkok:                                          ; preds = %and.rhs
  %6 = load i8, ptr %ptradd_any, align 1, !dbg !1270
  %zext = zext i8 %6 to i32, !dbg !1270
  %eq = icmp eq i32 0, %zext, !dbg !1272
  br label %and.phi, !dbg !1272

and.phi:                                          ; preds = %checkok, %entry
  %val = phi i1 [ false, %entry ], [ %eq, %checkok ], !dbg !1272
  %7 = zext i1 %val to i8, !dbg !1272
  ret i8 %7, !dbg !1272

panic:                                            ; preds = %and.rhs
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1270
  call void %8(ptr @.panic_msg.76, i64 60, ptr @.file.16, i64 9, ptr @.func.77, i64 7, i32 808) #6, !dbg !1270
  unreachable, !dbg !1270
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.String.quick_zstr(ptr %0, i64 %1) #0 comdat !dbg !1273 {
entry:
  %self = alloca %"char[]", align 8
  store ptr %0, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1274, !DIExpression(), !1275)
  %lo = load ptr, ptr %self, align 8, !dbg !1276
  %ptradd1 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1276
  %hi = load i64, ptr %ptradd1, align 8, !dbg !1276
  %2 = call i8 @std.core.String.is_zstr(ptr %lo, i64 %hi) #5, !dbg !1276
  %3 = trunc i8 %2 to i1, !dbg !1276
  br i1 %3, label %if.then, label %if.exit, !dbg !1276

if.then:                                          ; preds = %entry
  %4 = load ptr, ptr %self, align 8, !dbg !1277
  %5 = load ptr, ptr %self, align 8, !dbg !1278
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1279
  %6 = load i64, ptr %ptradd2, align 8, !dbg !1279
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 %6, !dbg !1279
  %7 = load i8, ptr %ptradd3, align 1, !dbg !1279
  %zext = zext i8 %7 to i32, !dbg !1279
  %eq = icmp eq i32 0, %zext, !dbg !1277
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !1277

assert_fail:                                      ; preds = %if.then
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1277
  call void %8(ptr @.panic_msg.78, i64 41, ptr @.file.16, i64 9, ptr @.func.79, i64 10, i32 829) #6, !dbg !1277
  unreachable, !dbg !1277

assert_ok:                                        ; preds = %if.then
  ret ptr %4, !dbg !1277

if.exit:                                          ; preds = %entry
  %lo4 = load ptr, ptr %self, align 8, !dbg !1280
  %ptradd5 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1280
  %hi6 = load i64, ptr %ptradd5, align 8, !dbg !1280
  %9 = call ptr @std.core.String.zstr_tcopy(ptr %lo4, i64 %hi6), !dbg !1280
  %ptradd7 = getelementptr inbounds i8, ptr %self, i64 8, !dbg !1279
  %10 = load i64, ptr %ptradd7, align 8, !dbg !1279
  %ptradd8 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !1279
  %11 = load i8, ptr %ptradd8, align 1, !dbg !1279
  %zext9 = zext i8 %11 to i32, !dbg !1279
  %eq10 = icmp eq i32 0, %zext9, !dbg !1280
  br i1 %eq10, label %assert_ok12, label %assert_fail11, !dbg !1280

assert_fail11:                                    ; preds = %if.exit
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1280
  call void %12(ptr @.panic_msg.78, i64 41, ptr @.file.16, i64 9, ptr @.func.79, i64 10, i32 830) #6, !dbg !1280
  unreachable, !dbg !1280

assert_ok12:                                      ; preds = %if.exit
  ret ptr %9, !dbg !1280
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_int128(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1281 {
entry:
  %self = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self1 = alloca %"char[]", align 8
  %base2 = alloca i32, align 4
  %blockret = alloca i128, align 16
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i128, align 16
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %switch61 = alloca i8, align 1
  %value = alloca i128, align 16
  %c77 = alloca i8, align 1
  %taddr82 = alloca i64, align 8
  %taddr83 = alloca i64, align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %switch90 = alloca i8, align 1
  %new_value = alloca i128, align 16
  %new_value124 = alloca i128, align 16
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1286, !DIExpression(), !1287)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1288, !DIExpression(), !1289)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self1, ptr align 8 %self, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base2, align 4
  %5 = load i32, ptr %base2, align 4, !dbg !1290
  %gt = icmp sgt i32 %5, 0, !dbg !1290
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1290

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base2, align 4, !dbg !1294
  %le = icmp sle i32 %6, 16, !dbg !1294
  br label %and.phi, !dbg !1294

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1294
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1294

assert_fail:                                      ; preds = %and.phi
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1295
  call void %7(ptr @.panic_msg.80, i64 63, ptr @.file.16, i64 9, ptr @.func.81, i64 9, i32 922) #6, !dbg !1295
  unreachable, !dbg !1295

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1296, !DIExpression(), !1297)
  %ptradd3 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1298
  %8 = load i64, ptr %ptradd3, align 8, !dbg !1298
  store i64 %8, ptr %len, align 8, !dbg !1298
    #dbg_declare(ptr %index, !1299, !DIExpression(), !1300)
  store i64 0, ptr %index, align 8, !dbg !1301
    #dbg_declare(ptr %ptr, !1302, !DIExpression(), !1303)
  %9 = load ptr, ptr %self1, align 8, !dbg !1304
  store ptr %9, ptr %ptr, align 8, !dbg !1304
  br label %loop.cond, !dbg !1305

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1306
  %11 = load i64, ptr %len, align 8, !dbg !1308
  %lt = icmp ult i64 %10, %11, !dbg !1306
  br i1 %lt, label %and.rhs4, label %and.phi9, !dbg !1306

and.rhs4:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1309
  %13 = load i64, ptr %index, align 8, !dbg !1310
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1310
  %14 = load i8, ptr %ptradd5, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1
  store i8 %15, ptr %c6, align 1
  %16 = load i8, ptr %c6, align 1, !dbg !1311
  %zext = zext i8 %16 to i64, !dbg !1311
  %ge = icmp uge i64 %zext, 256, !dbg !1311
  %17 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1311
  br i1 %17, label %panic, label %checkok, !dbg !1311

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1311
  %18 = load i16, ptr %ptroffset, align 2, !dbg !1311
  %lshrl = lshr i16 %18, 10, !dbg !1311
  %19 = and i16 1, %lshrl, !dbg !1311
  %trunc = trunc i16 %19 to i8, !dbg !1311
  %20 = trunc i8 %trunc to i1, !dbg !1311
  br label %and.phi9, !dbg !1311

and.phi9:                                         ; preds = %checkok, %loop.cond
  %val10 = phi i1 [ false, %loop.cond ], [ %20, %checkok ], !dbg !1311
  br i1 %val10, label %loop.body, label %loop.exit, !dbg !1311

loop.body:                                        ; preds = %and.phi9
  %21 = load i64, ptr %index, align 8, !dbg !1315
  %add = add i64 %21, 1, !dbg !1315
  store i64 %add, ptr %index, align 8, !dbg !1315
  br label %loop.cond, !dbg !1315

loop.exit:                                        ; preds = %and.phi9
  %22 = load i64, ptr %len, align 8, !dbg !1316
  %23 = load i64, ptr %index, align 8, !dbg !1317
  %eq = icmp eq i64 %22, %23, !dbg !1316
  br i1 %eq, label %if.then, label %if.exit, !dbg !1316

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1318
  br label %err_retblock, !dbg !1318

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1319, !DIExpression(), !1320)
  store i8 0, ptr %is_negative, align 1, !dbg !1320
  %ptradd11 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1321
  %24 = load i64, ptr %ptradd11, align 8, !dbg !1321
  %25 = load ptr, ptr %self1, align 8, !dbg !1321
  %26 = load i64, ptr %index, align 8, !dbg !1323
  %ge12 = icmp uge i64 %26, %24, !dbg !1323
  %27 = call i1 @llvm.expect.i1(i1 %ge12, i1 false), !dbg !1323
  br i1 %27, label %panic13, label %checkok20, !dbg !1323

checkok20:                                        ; preds = %if.exit
  %ptradd21 = getelementptr inbounds i8, ptr %25, i64 %26, !dbg !1323
  %28 = load i8, ptr %ptradd21, align 1
  store i8 %28, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok20
  %29 = load i8, ptr %switch, align 1
  switch i8 %29, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case24
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit22, !dbg !1324

if.exit22:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1326
  %30 = load i64, ptr %index, align 8, !dbg !1327
  %add23 = add i64 %30, 1, !dbg !1327
  store i64 %add23, ptr %index, align 8, !dbg !1327
  br label %switch.exit, !dbg !1327

switch.case24:                                    ; preds = %switch.entry
  %31 = load i64, ptr %index, align 8, !dbg !1328
  %add25 = add i64 %31, 1, !dbg !1328
  store i64 %add25, ptr %index, align 8, !dbg !1328
  br label %switch.exit, !dbg !1328

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1330

switch.exit:                                      ; preds = %switch.default, %switch.case24, %if.exit22
  %32 = load i64, ptr %len, align 8, !dbg !1332
  %33 = load i64, ptr %index, align 8, !dbg !1333
  %eq26 = icmp eq i64 %32, %33, !dbg !1332
  br i1 %eq26, label %if.then27, label %if.exit28, !dbg !1332

if.then27:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1334
  br label %err_retblock, !dbg !1334

if.exit28:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1335, !DIExpression(), !1336)
  %34 = load i32, ptr %base2, align 4, !dbg !1337
  %sext = sext i32 %34 to i128, !dbg !1337
  store i128 %sext, ptr %base_used, align 16, !dbg !1337
  %ptradd29 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1338
  %35 = load i64, ptr %ptradd29, align 8, !dbg !1338
  %36 = load ptr, ptr %self1, align 8, !dbg !1338
  %37 = load i64, ptr %index, align 8, !dbg !1339
  %ge30 = icmp uge i64 %37, %35, !dbg !1339
  %38 = call i1 @llvm.expect.i1(i1 %ge30, i1 false), !dbg !1339
  br i1 %38, label %panic31, label %checkok38, !dbg !1339

checkok38:                                        ; preds = %if.exit28
  %ptradd39 = getelementptr inbounds i8, ptr %36, i64 %37, !dbg !1339
  %39 = load i8, ptr %ptradd39, align 1, !dbg !1339
  %eq40 = icmp eq i8 %39, 48, !dbg !1338
  br i1 %eq40, label %and.rhs41, label %and.phi43, !dbg !1338

and.rhs41:                                        ; preds = %checkok38
  %40 = load i32, ptr %base2, align 4, !dbg !1340
  %eq42 = icmp eq i32 %40, 10, !dbg !1340
  br label %and.phi43, !dbg !1340

and.phi43:                                        ; preds = %and.rhs41, %checkok38
  %val44 = phi i1 [ false, %checkok38 ], [ %eq42, %and.rhs41 ], !dbg !1340
  br i1 %val44, label %if.then45, label %if.exit74, !dbg !1340

if.then45:                                        ; preds = %and.phi43
  %41 = load i64, ptr %index, align 8, !dbg !1341
  %add46 = add i64 %41, 1, !dbg !1341
  store i64 %add46, ptr %index, align 8, !dbg !1341
  %42 = load i64, ptr %index, align 8, !dbg !1343
  %43 = load i64, ptr %len, align 8, !dbg !1344
  %eq47 = icmp eq i64 %42, %43, !dbg !1343
  br i1 %eq47, label %if.then48, label %if.exit49, !dbg !1343

if.then48:                                        ; preds = %if.then45
  store i128 0, ptr %blockret, align 16, !dbg !1345
  br label %expr_block.exit, !dbg !1345

if.exit49:                                        ; preds = %if.then45
  %ptradd50 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1346
  %44 = load i64, ptr %ptradd50, align 8, !dbg !1346
  %45 = load ptr, ptr %self1, align 8, !dbg !1346
  %46 = load i64, ptr %index, align 8, !dbg !1348
  %ge51 = icmp uge i64 %46, %44, !dbg !1348
  %47 = call i1 @llvm.expect.i1(i1 %ge51, i1 false), !dbg !1348
  br i1 %47, label %panic52, label %checkok59, !dbg !1348

checkok59:                                        ; preds = %if.exit49
  %ptradd60 = getelementptr inbounds i8, ptr %45, i64 %46, !dbg !1348
  %48 = load i8, ptr %ptradd60, align 1
  store i8 %48, ptr %switch61, align 1
  br label %switch.entry62

switch.entry62:                                   ; preds = %checkok59
  %49 = load i8, ptr %switch61, align 1
  switch i8 %49, label %switch.default69 [
    i8 120, label %switch.case63
    i8 88, label %switch.case63
    i8 98, label %switch.case65
    i8 66, label %switch.case65
    i8 111, label %switch.case67
    i8 79, label %switch.case67
  ]

switch.case63:                                    ; preds = %switch.entry62, %switch.entry62
  store i128 16, ptr %base_used, align 16, !dbg !1349
  %50 = load i64, ptr %index, align 8, !dbg !1351
  %add64 = add i64 %50, 1, !dbg !1351
  store i64 %add64, ptr %index, align 8, !dbg !1351
  br label %switch.exit70, !dbg !1351

switch.case65:                                    ; preds = %switch.entry62, %switch.entry62
  store i128 2, ptr %base_used, align 16, !dbg !1352
  %51 = load i64, ptr %index, align 8, !dbg !1354
  %add66 = add i64 %51, 1, !dbg !1354
  store i64 %add66, ptr %index, align 8, !dbg !1354
  br label %switch.exit70, !dbg !1354

switch.case67:                                    ; preds = %switch.entry62, %switch.entry62
  store i128 8, ptr %base_used, align 16, !dbg !1355
  %52 = load i64, ptr %index, align 8, !dbg !1357
  %add68 = add i64 %52, 1, !dbg !1357
  store i64 %add68, ptr %index, align 8, !dbg !1357
  br label %switch.exit70, !dbg !1357

switch.default69:                                 ; preds = %switch.entry62
  br label %switch.exit70, !dbg !1358

switch.exit70:                                    ; preds = %switch.default69, %switch.case67, %switch.case65, %switch.case63
  %53 = load i64, ptr %len, align 8, !dbg !1360
  %54 = load i64, ptr %index, align 8, !dbg !1361
  %eq71 = icmp eq i64 %53, %54, !dbg !1360
  br i1 %eq71, label %if.then72, label %if.exit73, !dbg !1360

if.then72:                                        ; preds = %switch.exit70
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1362
  br label %err_retblock, !dbg !1362

if.exit73:                                        ; preds = %switch.exit70
  br label %if.exit74, !dbg !1362

if.exit74:                                        ; preds = %if.exit73, %and.phi43
    #dbg_declare(ptr %value, !1363, !DIExpression(), !1364)
  store i128 0, ptr %value, align 16, !dbg !1365
  br label %loop.cond75, !dbg !1366

loop.cond75:                                      ; preds = %loop.exit131, %if.exit74
  %55 = load i64, ptr %index, align 8, !dbg !1367
  %56 = load i64, ptr %len, align 8, !dbg !1369
  %neq = icmp ne i64 %55, %56, !dbg !1367
  br i1 %neq, label %loop.body76, label %loop.exit132, !dbg !1367

loop.body76:                                      ; preds = %loop.cond75
    #dbg_declare(ptr %c77, !1370, !DIExpression(), !1372)
  %ptradd78 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1373
  %57 = load i64, ptr %ptradd78, align 8, !dbg !1373
  %58 = load ptr, ptr %self1, align 8, !dbg !1373
  %59 = load i64, ptr %index, align 8, !dbg !1374
  %add79 = add i64 %59, 1, !dbg !1374
  store i64 %add79, ptr %index, align 8, !dbg !1374
  %ge80 = icmp uge i64 %59, %57, !dbg !1374
  %60 = call i1 @llvm.expect.i1(i1 %ge80, i1 false), !dbg !1374
  br i1 %60, label %panic81, label %checkok88, !dbg !1374

checkok88:                                        ; preds = %loop.body76
  %ptradd89 = getelementptr inbounds i8, ptr %58, i64 %59, !dbg !1374
  %61 = load i8, ptr %ptradd89, align 1, !dbg !1374
  store i8 %61, ptr %c77, align 1, !dbg !1374
  store i8 1, ptr %switch90, align 1
  br label %switch.entry91

switch.entry91:                                   ; preds = %checkok88
  %62 = load i8, ptr %switch90, align 1
  %63 = trunc i8 %62 to i1
  %64 = load i128, ptr %base_used, align 16, !dbg !1375
  %lt92 = icmp slt i128 %64, 10, !dbg !1375
  br i1 %lt92, label %or.phi, label %or.rhs, !dbg !1375

or.rhs:                                           ; preds = %switch.entry91
  %65 = load i8, ptr %c77, align 1, !dbg !1377
  %lt93 = icmp ult i8 %65, 65, !dbg !1377
  br label %or.phi, !dbg !1377

or.phi:                                           ; preds = %or.rhs, %switch.entry91
  %val94 = phi i1 [ true, %switch.entry91 ], [ %lt93, %or.rhs ], !dbg !1377
  %eq95 = icmp eq i1 %val94, %63, !dbg !1377
  br i1 %eq95, label %switch.case96, label %next_if, !dbg !1377

switch.case96:                                    ; preds = %or.phi
  %66 = load i8, ptr %c77, align 1, !dbg !1378
  %sub = sub i8 %66, 48, !dbg !1378
  store i8 %sub, ptr %c77, align 1, !dbg !1378
  br label %switch.exit112, !dbg !1378

next_if:                                          ; preds = %or.phi
  %67 = load i8, ptr %c77, align 1, !dbg !1380
  %le97 = icmp ule i8 %67, 70, !dbg !1380
  %eq98 = icmp eq i1 %le97, %63, !dbg !1380
  br i1 %eq98, label %switch.case99, label %next_if101, !dbg !1380

switch.case99:                                    ; preds = %next_if
  %68 = load i8, ptr %c77, align 1, !dbg !1381
  %sub100 = sub i8 %68, 55, !dbg !1381
  store i8 %sub100, ptr %c77, align 1, !dbg !1381
  br label %switch.exit112, !dbg !1381

next_if101:                                       ; preds = %next_if
  %69 = load i8, ptr %c77, align 1, !dbg !1383
  %lt102 = icmp ult i8 %69, 97, !dbg !1383
  br i1 %lt102, label %or.phi105, label %or.rhs103, !dbg !1383

or.rhs103:                                        ; preds = %next_if101
  %70 = load i8, ptr %c77, align 1, !dbg !1384
  %gt104 = icmp ugt i8 %70, 102, !dbg !1384
  br label %or.phi105, !dbg !1384

or.phi105:                                        ; preds = %or.rhs103, %next_if101
  %val106 = phi i1 [ true, %next_if101 ], [ %gt104, %or.rhs103 ], !dbg !1384
  %eq107 = icmp eq i1 %val106, %63, !dbg !1384
  br i1 %eq107, label %switch.case108, label %next_if109, !dbg !1384

switch.case108:                                   ; preds = %or.phi105
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1385
  br label %err_retblock, !dbg !1385

next_if109:                                       ; preds = %or.phi105
  br label %switch.default110, !dbg !1385

switch.default110:                                ; preds = %next_if109
  %71 = load i8, ptr %c77, align 1, !dbg !1387
  %sub111 = sub i8 %71, 87, !dbg !1387
  store i8 %sub111, ptr %c77, align 1, !dbg !1387
  br label %switch.exit112, !dbg !1387

switch.exit112:                                   ; preds = %switch.default110, %switch.case99, %switch.case96
  %72 = load i8, ptr %c77, align 1, !dbg !1389
  %zext113 = zext i8 %72 to i128, !dbg !1389
  %73 = load i128, ptr %base_used, align 16, !dbg !1390
  %le114 = icmp sle i128 %73, %zext113, !dbg !1389
  %check = icmp slt i128 %zext113, 0, !dbg !1389
  %siui-le = or i1 %check, %le114, !dbg !1389
  br i1 %siui-le, label %if.then115, label %if.exit116, !dbg !1389

if.then115:                                       ; preds = %switch.exit112
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1391
  br label %err_retblock, !dbg !1391

if.exit116:                                       ; preds = %switch.exit112
  %74 = load i8, ptr %is_negative, align 1, !dbg !1392
  %75 = trunc i8 %74 to i1, !dbg !1392
  br i1 %75, label %if.then117, label %if.exit123, !dbg !1392

if.then117:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value, !1395, !DIExpression(), !1397)
  %76 = load i128, ptr %value, align 16, !dbg !1398
  %77 = load i128, ptr %base_used, align 16, !dbg !1399
  %mul = mul i128 %76, %77, !dbg !1398
  %78 = load i8, ptr %c77, align 1, !dbg !1400
  %zext118 = zext i8 %78 to i128, !dbg !1400
  %sub119 = sub i128 %mul, %zext118, !dbg !1398
  store i128 %sub119, ptr %new_value, align 16, !dbg !1398
  %79 = load i128, ptr %new_value, align 16, !dbg !1401
  %80 = load i128, ptr %value, align 16, !dbg !1402
  %gt120 = icmp sgt i128 %79, %80, !dbg !1401
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !1401

if.then121:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1403
  br label %err_retblock, !dbg !1403

if.exit122:                                       ; preds = %if.then117
  %81 = load i128, ptr %new_value, align 16, !dbg !1404
  store i128 %81, ptr %value, align 16, !dbg !1404
  br label %loop.exit131, !dbg !1405

if.exit123:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value124, !1406, !DIExpression(), !1407)
  %82 = load i128, ptr %value, align 16, !dbg !1408
  %83 = load i128, ptr %base_used, align 16, !dbg !1409
  %mul125 = mul i128 %82, %83, !dbg !1408
  %84 = load i8, ptr %c77, align 1, !dbg !1410
  %zext126 = zext i8 %84 to i128, !dbg !1410
  %add127 = add i128 %mul125, %zext126, !dbg !1408
  store i128 %add127, ptr %new_value124, align 16, !dbg !1408
  %85 = load i128, ptr %new_value124, align 16, !dbg !1411
  %86 = load i128, ptr %value, align 16, !dbg !1412
  %lt128 = icmp slt i128 %85, %86, !dbg !1411
  br i1 %lt128, label %if.then129, label %if.exit130, !dbg !1411

if.then129:                                       ; preds = %if.exit123
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1413
  br label %err_retblock, !dbg !1413

if.exit130:                                       ; preds = %if.exit123
  %87 = load i128, ptr %new_value124, align 16, !dbg !1414
  store i128 %87, ptr %value, align 16, !dbg !1414
  br label %loop.exit131, !dbg !1414

loop.exit131:                                     ; preds = %if.exit130, %if.exit122
  br label %loop.cond75, !dbg !1414

loop.exit132:                                     ; preds = %loop.cond75
  %88 = load i128, ptr %value, align 16, !dbg !1415
  store i128 %88, ptr %blockret, align 16, !dbg !1415
  br label %expr_block.exit, !dbg !1415

expr_block.exit:                                  ; preds = %loop.exit132, %if.then48
  %89 = load i128, ptr %blockret, align 16, !dbg !1415
  store i128 %89, ptr %0, align 16, !dbg !1415
  ret i64 0, !dbg !1415

err_retblock:                                     ; preds = %if.then129, %if.then121, %if.then115, %switch.case108, %if.then72, %if.then27, %if.then
  %90 = load i64, ptr %reterr, align 8, !dbg !1415
  ret i64 %90, !dbg !1415

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %91 = insertvalue %any undef, ptr %taddr, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %93 = insertvalue %any undef, ptr %taddr7, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %92, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %94, ptr %ptradd8, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 8, ptr @.func.81, i64 9, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1311
  unreachable, !dbg !1311

panic13:                                          ; preds = %if.exit
  store i64 %24, ptr %taddr14, align 8
  %96 = insertvalue %any undef, ptr %taddr14, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr15, align 8
  %98 = insertvalue %any undef, ptr %taddr15, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %97, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %99, ptr %ptradd17, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.81, i64 9, i32 857, ptr byval(%"any[]") align 8 %indirectarg19) #6, !dbg !1323
  unreachable, !dbg !1323

panic31:                                          ; preds = %if.exit28
  store i64 %35, ptr %taddr32, align 8
  %101 = insertvalue %any undef, ptr %taddr32, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr33, align 8
  %103 = insertvalue %any undef, ptr %taddr33, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %102, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %104, ptr %ptradd35, align 16
  %105 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.81, i64 9, i32 870, ptr byval(%"any[]") align 8 %indirectarg37) #6, !dbg !1339
  unreachable, !dbg !1339

panic52:                                          ; preds = %if.exit49
  store i64 %44, ptr %taddr53, align 8
  %106 = insertvalue %any undef, ptr %taddr53, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %46, ptr %taddr54, align 8
  %108 = insertvalue %any undef, ptr %taddr54, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %107, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %109, ptr %ptradd56, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.81, i64 9, i32 874, ptr byval(%"any[]") align 8 %indirectarg58) #6, !dbg !1348
  unreachable, !dbg !1348

panic81:                                          ; preds = %loop.body76
  store i64 %57, ptr %taddr82, align 8
  %111 = insertvalue %any undef, ptr %taddr82, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %59, ptr %taddr83, align 8
  %113 = insertvalue %any undef, ptr %taddr83, 0
  %114 = insertvalue %any %113, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %112, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %114, ptr %ptradd85, align 16
  %115 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %115, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.81, i64 9, i32 896, ptr byval(%"any[]") align 8 %indirectarg87) #6, !dbg !1374
  unreachable, !dbg !1374
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_long(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1416 {
entry:
  %self = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self1 = alloca %"char[]", align 8
  %base2 = alloca i32, align 4
  %blockret = alloca i64, align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %switch61 = alloca i8, align 1
  %value = alloca i64, align 8
  %c77 = alloca i8, align 1
  %taddr82 = alloca i64, align 8
  %taddr83 = alloca i64, align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %switch90 = alloca i8, align 1
  %new_value = alloca i64, align 8
  %new_value124 = alloca i64, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1420, !DIExpression(), !1421)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1422, !DIExpression(), !1423)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self1, ptr align 8 %self, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base2, align 4
  %5 = load i32, ptr %base2, align 4, !dbg !1424
  %gt = icmp sgt i32 %5, 0, !dbg !1424
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1424

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base2, align 4, !dbg !1428
  %le = icmp sle i32 %6, 16, !dbg !1428
  br label %and.phi, !dbg !1428

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1428
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1428

assert_fail:                                      ; preds = %and.phi
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1429
  call void %7(ptr @.panic_msg.80, i64 63, ptr @.file.16, i64 9, ptr @.func.82, i64 7, i32 923) #6, !dbg !1429
  unreachable, !dbg !1429

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1430, !DIExpression(), !1431)
  %ptradd3 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1432
  %8 = load i64, ptr %ptradd3, align 8, !dbg !1432
  store i64 %8, ptr %len, align 8, !dbg !1432
    #dbg_declare(ptr %index, !1433, !DIExpression(), !1434)
  store i64 0, ptr %index, align 8, !dbg !1435
    #dbg_declare(ptr %ptr, !1436, !DIExpression(), !1437)
  %9 = load ptr, ptr %self1, align 8, !dbg !1438
  store ptr %9, ptr %ptr, align 8, !dbg !1438
  br label %loop.cond, !dbg !1439

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1440
  %11 = load i64, ptr %len, align 8, !dbg !1442
  %lt = icmp ult i64 %10, %11, !dbg !1440
  br i1 %lt, label %and.rhs4, label %and.phi9, !dbg !1440

and.rhs4:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1443
  %13 = load i64, ptr %index, align 8, !dbg !1444
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1444
  %14 = load i8, ptr %ptradd5, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1
  store i8 %15, ptr %c6, align 1
  %16 = load i8, ptr %c6, align 1, !dbg !1445
  %zext = zext i8 %16 to i64, !dbg !1445
  %ge = icmp uge i64 %zext, 256, !dbg !1445
  %17 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1445
  br i1 %17, label %panic, label %checkok, !dbg !1445

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1445
  %18 = load i16, ptr %ptroffset, align 2, !dbg !1445
  %lshrl = lshr i16 %18, 10, !dbg !1445
  %19 = and i16 1, %lshrl, !dbg !1445
  %trunc = trunc i16 %19 to i8, !dbg !1445
  %20 = trunc i8 %trunc to i1, !dbg !1445
  br label %and.phi9, !dbg !1445

and.phi9:                                         ; preds = %checkok, %loop.cond
  %val10 = phi i1 [ false, %loop.cond ], [ %20, %checkok ], !dbg !1445
  br i1 %val10, label %loop.body, label %loop.exit, !dbg !1445

loop.body:                                        ; preds = %and.phi9
  %21 = load i64, ptr %index, align 8, !dbg !1449
  %add = add i64 %21, 1, !dbg !1449
  store i64 %add, ptr %index, align 8, !dbg !1449
  br label %loop.cond, !dbg !1449

loop.exit:                                        ; preds = %and.phi9
  %22 = load i64, ptr %len, align 8, !dbg !1450
  %23 = load i64, ptr %index, align 8, !dbg !1451
  %eq = icmp eq i64 %22, %23, !dbg !1450
  br i1 %eq, label %if.then, label %if.exit, !dbg !1450

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1452
  br label %err_retblock, !dbg !1452

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1453, !DIExpression(), !1454)
  store i8 0, ptr %is_negative, align 1, !dbg !1454
  %ptradd11 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1455
  %24 = load i64, ptr %ptradd11, align 8, !dbg !1455
  %25 = load ptr, ptr %self1, align 8, !dbg !1455
  %26 = load i64, ptr %index, align 8, !dbg !1457
  %ge12 = icmp uge i64 %26, %24, !dbg !1457
  %27 = call i1 @llvm.expect.i1(i1 %ge12, i1 false), !dbg !1457
  br i1 %27, label %panic13, label %checkok20, !dbg !1457

checkok20:                                        ; preds = %if.exit
  %ptradd21 = getelementptr inbounds i8, ptr %25, i64 %26, !dbg !1457
  %28 = load i8, ptr %ptradd21, align 1
  store i8 %28, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok20
  %29 = load i8, ptr %switch, align 1
  switch i8 %29, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case24
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit22, !dbg !1458

if.exit22:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1460
  %30 = load i64, ptr %index, align 8, !dbg !1461
  %add23 = add i64 %30, 1, !dbg !1461
  store i64 %add23, ptr %index, align 8, !dbg !1461
  br label %switch.exit, !dbg !1461

switch.case24:                                    ; preds = %switch.entry
  %31 = load i64, ptr %index, align 8, !dbg !1462
  %add25 = add i64 %31, 1, !dbg !1462
  store i64 %add25, ptr %index, align 8, !dbg !1462
  br label %switch.exit, !dbg !1462

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1464

switch.exit:                                      ; preds = %switch.default, %switch.case24, %if.exit22
  %32 = load i64, ptr %len, align 8, !dbg !1466
  %33 = load i64, ptr %index, align 8, !dbg !1467
  %eq26 = icmp eq i64 %32, %33, !dbg !1466
  br i1 %eq26, label %if.then27, label %if.exit28, !dbg !1466

if.then27:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1468
  br label %err_retblock, !dbg !1468

if.exit28:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1469, !DIExpression(), !1470)
  %34 = load i32, ptr %base2, align 4, !dbg !1471
  %sext = sext i32 %34 to i64, !dbg !1471
  store i64 %sext, ptr %base_used, align 8, !dbg !1471
  %ptradd29 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1472
  %35 = load i64, ptr %ptradd29, align 8, !dbg !1472
  %36 = load ptr, ptr %self1, align 8, !dbg !1472
  %37 = load i64, ptr %index, align 8, !dbg !1473
  %ge30 = icmp uge i64 %37, %35, !dbg !1473
  %38 = call i1 @llvm.expect.i1(i1 %ge30, i1 false), !dbg !1473
  br i1 %38, label %panic31, label %checkok38, !dbg !1473

checkok38:                                        ; preds = %if.exit28
  %ptradd39 = getelementptr inbounds i8, ptr %36, i64 %37, !dbg !1473
  %39 = load i8, ptr %ptradd39, align 1, !dbg !1473
  %eq40 = icmp eq i8 %39, 48, !dbg !1472
  br i1 %eq40, label %and.rhs41, label %and.phi43, !dbg !1472

and.rhs41:                                        ; preds = %checkok38
  %40 = load i32, ptr %base2, align 4, !dbg !1474
  %eq42 = icmp eq i32 %40, 10, !dbg !1474
  br label %and.phi43, !dbg !1474

and.phi43:                                        ; preds = %and.rhs41, %checkok38
  %val44 = phi i1 [ false, %checkok38 ], [ %eq42, %and.rhs41 ], !dbg !1474
  br i1 %val44, label %if.then45, label %if.exit74, !dbg !1474

if.then45:                                        ; preds = %and.phi43
  %41 = load i64, ptr %index, align 8, !dbg !1475
  %add46 = add i64 %41, 1, !dbg !1475
  store i64 %add46, ptr %index, align 8, !dbg !1475
  %42 = load i64, ptr %index, align 8, !dbg !1477
  %43 = load i64, ptr %len, align 8, !dbg !1478
  %eq47 = icmp eq i64 %42, %43, !dbg !1477
  br i1 %eq47, label %if.then48, label %if.exit49, !dbg !1477

if.then48:                                        ; preds = %if.then45
  store i64 0, ptr %blockret, align 8, !dbg !1479
  br label %expr_block.exit, !dbg !1479

if.exit49:                                        ; preds = %if.then45
  %ptradd50 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1480
  %44 = load i64, ptr %ptradd50, align 8, !dbg !1480
  %45 = load ptr, ptr %self1, align 8, !dbg !1480
  %46 = load i64, ptr %index, align 8, !dbg !1482
  %ge51 = icmp uge i64 %46, %44, !dbg !1482
  %47 = call i1 @llvm.expect.i1(i1 %ge51, i1 false), !dbg !1482
  br i1 %47, label %panic52, label %checkok59, !dbg !1482

checkok59:                                        ; preds = %if.exit49
  %ptradd60 = getelementptr inbounds i8, ptr %45, i64 %46, !dbg !1482
  %48 = load i8, ptr %ptradd60, align 1
  store i8 %48, ptr %switch61, align 1
  br label %switch.entry62

switch.entry62:                                   ; preds = %checkok59
  %49 = load i8, ptr %switch61, align 1
  switch i8 %49, label %switch.default69 [
    i8 120, label %switch.case63
    i8 88, label %switch.case63
    i8 98, label %switch.case65
    i8 66, label %switch.case65
    i8 111, label %switch.case67
    i8 79, label %switch.case67
  ]

switch.case63:                                    ; preds = %switch.entry62, %switch.entry62
  store i64 16, ptr %base_used, align 8, !dbg !1483
  %50 = load i64, ptr %index, align 8, !dbg !1485
  %add64 = add i64 %50, 1, !dbg !1485
  store i64 %add64, ptr %index, align 8, !dbg !1485
  br label %switch.exit70, !dbg !1485

switch.case65:                                    ; preds = %switch.entry62, %switch.entry62
  store i64 2, ptr %base_used, align 8, !dbg !1486
  %51 = load i64, ptr %index, align 8, !dbg !1488
  %add66 = add i64 %51, 1, !dbg !1488
  store i64 %add66, ptr %index, align 8, !dbg !1488
  br label %switch.exit70, !dbg !1488

switch.case67:                                    ; preds = %switch.entry62, %switch.entry62
  store i64 8, ptr %base_used, align 8, !dbg !1489
  %52 = load i64, ptr %index, align 8, !dbg !1491
  %add68 = add i64 %52, 1, !dbg !1491
  store i64 %add68, ptr %index, align 8, !dbg !1491
  br label %switch.exit70, !dbg !1491

switch.default69:                                 ; preds = %switch.entry62
  br label %switch.exit70, !dbg !1492

switch.exit70:                                    ; preds = %switch.default69, %switch.case67, %switch.case65, %switch.case63
  %53 = load i64, ptr %len, align 8, !dbg !1494
  %54 = load i64, ptr %index, align 8, !dbg !1495
  %eq71 = icmp eq i64 %53, %54, !dbg !1494
  br i1 %eq71, label %if.then72, label %if.exit73, !dbg !1494

if.then72:                                        ; preds = %switch.exit70
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1496
  br label %err_retblock, !dbg !1496

if.exit73:                                        ; preds = %switch.exit70
  br label %if.exit74, !dbg !1496

if.exit74:                                        ; preds = %if.exit73, %and.phi43
    #dbg_declare(ptr %value, !1497, !DIExpression(), !1498)
  store i64 0, ptr %value, align 8, !dbg !1499
  br label %loop.cond75, !dbg !1500

loop.cond75:                                      ; preds = %loop.exit131, %if.exit74
  %55 = load i64, ptr %index, align 8, !dbg !1501
  %56 = load i64, ptr %len, align 8, !dbg !1503
  %neq = icmp ne i64 %55, %56, !dbg !1501
  br i1 %neq, label %loop.body76, label %loop.exit132, !dbg !1501

loop.body76:                                      ; preds = %loop.cond75
    #dbg_declare(ptr %c77, !1504, !DIExpression(), !1506)
  %ptradd78 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1507
  %57 = load i64, ptr %ptradd78, align 8, !dbg !1507
  %58 = load ptr, ptr %self1, align 8, !dbg !1507
  %59 = load i64, ptr %index, align 8, !dbg !1508
  %add79 = add i64 %59, 1, !dbg !1508
  store i64 %add79, ptr %index, align 8, !dbg !1508
  %ge80 = icmp uge i64 %59, %57, !dbg !1508
  %60 = call i1 @llvm.expect.i1(i1 %ge80, i1 false), !dbg !1508
  br i1 %60, label %panic81, label %checkok88, !dbg !1508

checkok88:                                        ; preds = %loop.body76
  %ptradd89 = getelementptr inbounds i8, ptr %58, i64 %59, !dbg !1508
  %61 = load i8, ptr %ptradd89, align 1, !dbg !1508
  store i8 %61, ptr %c77, align 1, !dbg !1508
  store i8 1, ptr %switch90, align 1
  br label %switch.entry91

switch.entry91:                                   ; preds = %checkok88
  %62 = load i8, ptr %switch90, align 1
  %63 = trunc i8 %62 to i1
  %64 = load i64, ptr %base_used, align 8, !dbg !1509
  %lt92 = icmp slt i64 %64, 10, !dbg !1509
  br i1 %lt92, label %or.phi, label %or.rhs, !dbg !1509

or.rhs:                                           ; preds = %switch.entry91
  %65 = load i8, ptr %c77, align 1, !dbg !1511
  %lt93 = icmp ult i8 %65, 65, !dbg !1511
  br label %or.phi, !dbg !1511

or.phi:                                           ; preds = %or.rhs, %switch.entry91
  %val94 = phi i1 [ true, %switch.entry91 ], [ %lt93, %or.rhs ], !dbg !1511
  %eq95 = icmp eq i1 %val94, %63, !dbg !1511
  br i1 %eq95, label %switch.case96, label %next_if, !dbg !1511

switch.case96:                                    ; preds = %or.phi
  %66 = load i8, ptr %c77, align 1, !dbg !1512
  %sub = sub i8 %66, 48, !dbg !1512
  store i8 %sub, ptr %c77, align 1, !dbg !1512
  br label %switch.exit112, !dbg !1512

next_if:                                          ; preds = %or.phi
  %67 = load i8, ptr %c77, align 1, !dbg !1514
  %le97 = icmp ule i8 %67, 70, !dbg !1514
  %eq98 = icmp eq i1 %le97, %63, !dbg !1514
  br i1 %eq98, label %switch.case99, label %next_if101, !dbg !1514

switch.case99:                                    ; preds = %next_if
  %68 = load i8, ptr %c77, align 1, !dbg !1515
  %sub100 = sub i8 %68, 55, !dbg !1515
  store i8 %sub100, ptr %c77, align 1, !dbg !1515
  br label %switch.exit112, !dbg !1515

next_if101:                                       ; preds = %next_if
  %69 = load i8, ptr %c77, align 1, !dbg !1517
  %lt102 = icmp ult i8 %69, 97, !dbg !1517
  br i1 %lt102, label %or.phi105, label %or.rhs103, !dbg !1517

or.rhs103:                                        ; preds = %next_if101
  %70 = load i8, ptr %c77, align 1, !dbg !1518
  %gt104 = icmp ugt i8 %70, 102, !dbg !1518
  br label %or.phi105, !dbg !1518

or.phi105:                                        ; preds = %or.rhs103, %next_if101
  %val106 = phi i1 [ true, %next_if101 ], [ %gt104, %or.rhs103 ], !dbg !1518
  %eq107 = icmp eq i1 %val106, %63, !dbg !1518
  br i1 %eq107, label %switch.case108, label %next_if109, !dbg !1518

switch.case108:                                   ; preds = %or.phi105
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1519
  br label %err_retblock, !dbg !1519

next_if109:                                       ; preds = %or.phi105
  br label %switch.default110, !dbg !1519

switch.default110:                                ; preds = %next_if109
  %71 = load i8, ptr %c77, align 1, !dbg !1521
  %sub111 = sub i8 %71, 87, !dbg !1521
  store i8 %sub111, ptr %c77, align 1, !dbg !1521
  br label %switch.exit112, !dbg !1521

switch.exit112:                                   ; preds = %switch.default110, %switch.case99, %switch.case96
  %72 = load i8, ptr %c77, align 1, !dbg !1523
  %zext113 = zext i8 %72 to i64, !dbg !1523
  %73 = load i64, ptr %base_used, align 8, !dbg !1524
  %le114 = icmp sle i64 %73, %zext113, !dbg !1523
  %check = icmp slt i64 %zext113, 0, !dbg !1523
  %siui-le = or i1 %check, %le114, !dbg !1523
  br i1 %siui-le, label %if.then115, label %if.exit116, !dbg !1523

if.then115:                                       ; preds = %switch.exit112
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1525
  br label %err_retblock, !dbg !1525

if.exit116:                                       ; preds = %switch.exit112
  %74 = load i8, ptr %is_negative, align 1, !dbg !1526
  %75 = trunc i8 %74 to i1, !dbg !1526
  br i1 %75, label %if.then117, label %if.exit123, !dbg !1526

if.then117:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value, !1529, !DIExpression(), !1531)
  %76 = load i64, ptr %value, align 8, !dbg !1532
  %77 = load i64, ptr %base_used, align 8, !dbg !1533
  %mul = mul i64 %76, %77, !dbg !1532
  %78 = load i8, ptr %c77, align 1, !dbg !1534
  %zext118 = zext i8 %78 to i64, !dbg !1534
  %sub119 = sub i64 %mul, %zext118, !dbg !1532
  store i64 %sub119, ptr %new_value, align 8, !dbg !1532
  %79 = load i64, ptr %new_value, align 8, !dbg !1535
  %80 = load i64, ptr %value, align 8, !dbg !1536
  %gt120 = icmp sgt i64 %79, %80, !dbg !1535
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !1535

if.then121:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1537
  br label %err_retblock, !dbg !1537

if.exit122:                                       ; preds = %if.then117
  %81 = load i64, ptr %new_value, align 8, !dbg !1538
  store i64 %81, ptr %value, align 8, !dbg !1538
  br label %loop.exit131, !dbg !1539

if.exit123:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value124, !1540, !DIExpression(), !1541)
  %82 = load i64, ptr %value, align 8, !dbg !1542
  %83 = load i64, ptr %base_used, align 8, !dbg !1543
  %mul125 = mul i64 %82, %83, !dbg !1542
  %84 = load i8, ptr %c77, align 1, !dbg !1544
  %zext126 = zext i8 %84 to i64, !dbg !1544
  %add127 = add i64 %mul125, %zext126, !dbg !1542
  store i64 %add127, ptr %new_value124, align 8, !dbg !1542
  %85 = load i64, ptr %new_value124, align 8, !dbg !1545
  %86 = load i64, ptr %value, align 8, !dbg !1546
  %lt128 = icmp slt i64 %85, %86, !dbg !1545
  br i1 %lt128, label %if.then129, label %if.exit130, !dbg !1545

if.then129:                                       ; preds = %if.exit123
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1547
  br label %err_retblock, !dbg !1547

if.exit130:                                       ; preds = %if.exit123
  %87 = load i64, ptr %new_value124, align 8, !dbg !1548
  store i64 %87, ptr %value, align 8, !dbg !1548
  br label %loop.exit131, !dbg !1548

loop.exit131:                                     ; preds = %if.exit130, %if.exit122
  br label %loop.cond75, !dbg !1548

loop.exit132:                                     ; preds = %loop.cond75
  %88 = load i64, ptr %value, align 8, !dbg !1549
  store i64 %88, ptr %blockret, align 8, !dbg !1549
  br label %expr_block.exit, !dbg !1549

expr_block.exit:                                  ; preds = %loop.exit132, %if.then48
  %89 = load i64, ptr %blockret, align 8, !dbg !1549
  store i64 %89, ptr %0, align 8, !dbg !1549
  ret i64 0, !dbg !1549

err_retblock:                                     ; preds = %if.then129, %if.then121, %if.then115, %switch.case108, %if.then72, %if.then27, %if.then
  %90 = load i64, ptr %reterr, align 8, !dbg !1549
  ret i64 %90, !dbg !1549

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %91 = insertvalue %any undef, ptr %taddr, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %93 = insertvalue %any undef, ptr %taddr7, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %92, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %94, ptr %ptradd8, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 8, ptr @.func.82, i64 7, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1445
  unreachable, !dbg !1445

panic13:                                          ; preds = %if.exit
  store i64 %24, ptr %taddr14, align 8
  %96 = insertvalue %any undef, ptr %taddr14, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr15, align 8
  %98 = insertvalue %any undef, ptr %taddr15, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %97, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %99, ptr %ptradd17, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.82, i64 7, i32 857, ptr byval(%"any[]") align 8 %indirectarg19) #6, !dbg !1457
  unreachable, !dbg !1457

panic31:                                          ; preds = %if.exit28
  store i64 %35, ptr %taddr32, align 8
  %101 = insertvalue %any undef, ptr %taddr32, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr33, align 8
  %103 = insertvalue %any undef, ptr %taddr33, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %102, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %104, ptr %ptradd35, align 16
  %105 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.82, i64 7, i32 870, ptr byval(%"any[]") align 8 %indirectarg37) #6, !dbg !1473
  unreachable, !dbg !1473

panic52:                                          ; preds = %if.exit49
  store i64 %44, ptr %taddr53, align 8
  %106 = insertvalue %any undef, ptr %taddr53, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %46, ptr %taddr54, align 8
  %108 = insertvalue %any undef, ptr %taddr54, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %107, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %109, ptr %ptradd56, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.82, i64 7, i32 874, ptr byval(%"any[]") align 8 %indirectarg58) #6, !dbg !1482
  unreachable, !dbg !1482

panic81:                                          ; preds = %loop.body76
  store i64 %57, ptr %taddr82, align 8
  %111 = insertvalue %any undef, ptr %taddr82, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %59, ptr %taddr83, align 8
  %113 = insertvalue %any undef, ptr %taddr83, 0
  %114 = insertvalue %any %113, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %112, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %114, ptr %ptradd85, align 16
  %115 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %115, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.82, i64 7, i32 896, ptr byval(%"any[]") align 8 %indirectarg87) #6, !dbg !1508
  unreachable, !dbg !1508
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_int(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1550 {
entry:
  %self = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self1 = alloca %"char[]", align 8
  %base2 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i32, align 4
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %switch61 = alloca i8, align 1
  %value = alloca i32, align 4
  %c77 = alloca i8, align 1
  %taddr82 = alloca i64, align 8
  %taddr83 = alloca i64, align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %switch90 = alloca i8, align 1
  %new_value = alloca i32, align 4
  %new_value124 = alloca i32, align 4
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1554, !DIExpression(), !1555)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1556, !DIExpression(), !1557)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self1, ptr align 8 %self, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base2, align 4
  %5 = load i32, ptr %base2, align 4, !dbg !1558
  %gt = icmp sgt i32 %5, 0, !dbg !1558
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1558

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base2, align 4, !dbg !1562
  %le = icmp sle i32 %6, 16, !dbg !1562
  br label %and.phi, !dbg !1562

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1562
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1562

assert_fail:                                      ; preds = %and.phi
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1563
  call void %7(ptr @.panic_msg.80, i64 63, ptr @.file.16, i64 9, ptr @.func.83, i64 6, i32 924) #6, !dbg !1563
  unreachable, !dbg !1563

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1564, !DIExpression(), !1565)
  %ptradd3 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1566
  %8 = load i64, ptr %ptradd3, align 8, !dbg !1566
  store i64 %8, ptr %len, align 8, !dbg !1566
    #dbg_declare(ptr %index, !1567, !DIExpression(), !1568)
  store i64 0, ptr %index, align 8, !dbg !1569
    #dbg_declare(ptr %ptr, !1570, !DIExpression(), !1571)
  %9 = load ptr, ptr %self1, align 8, !dbg !1572
  store ptr %9, ptr %ptr, align 8, !dbg !1572
  br label %loop.cond, !dbg !1573

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1574
  %11 = load i64, ptr %len, align 8, !dbg !1576
  %lt = icmp ult i64 %10, %11, !dbg !1574
  br i1 %lt, label %and.rhs4, label %and.phi9, !dbg !1574

and.rhs4:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1577
  %13 = load i64, ptr %index, align 8, !dbg !1578
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1578
  %14 = load i8, ptr %ptradd5, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1
  store i8 %15, ptr %c6, align 1
  %16 = load i8, ptr %c6, align 1, !dbg !1579
  %zext = zext i8 %16 to i64, !dbg !1579
  %ge = icmp uge i64 %zext, 256, !dbg !1579
  %17 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1579
  br i1 %17, label %panic, label %checkok, !dbg !1579

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1579
  %18 = load i16, ptr %ptroffset, align 2, !dbg !1579
  %lshrl = lshr i16 %18, 10, !dbg !1579
  %19 = and i16 1, %lshrl, !dbg !1579
  %trunc = trunc i16 %19 to i8, !dbg !1579
  %20 = trunc i8 %trunc to i1, !dbg !1579
  br label %and.phi9, !dbg !1579

and.phi9:                                         ; preds = %checkok, %loop.cond
  %val10 = phi i1 [ false, %loop.cond ], [ %20, %checkok ], !dbg !1579
  br i1 %val10, label %loop.body, label %loop.exit, !dbg !1579

loop.body:                                        ; preds = %and.phi9
  %21 = load i64, ptr %index, align 8, !dbg !1583
  %add = add i64 %21, 1, !dbg !1583
  store i64 %add, ptr %index, align 8, !dbg !1583
  br label %loop.cond, !dbg !1583

loop.exit:                                        ; preds = %and.phi9
  %22 = load i64, ptr %len, align 8, !dbg !1584
  %23 = load i64, ptr %index, align 8, !dbg !1585
  %eq = icmp eq i64 %22, %23, !dbg !1584
  br i1 %eq, label %if.then, label %if.exit, !dbg !1584

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1586
  br label %err_retblock, !dbg !1586

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1587, !DIExpression(), !1588)
  store i8 0, ptr %is_negative, align 1, !dbg !1588
  %ptradd11 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1589
  %24 = load i64, ptr %ptradd11, align 8, !dbg !1589
  %25 = load ptr, ptr %self1, align 8, !dbg !1589
  %26 = load i64, ptr %index, align 8, !dbg !1591
  %ge12 = icmp uge i64 %26, %24, !dbg !1591
  %27 = call i1 @llvm.expect.i1(i1 %ge12, i1 false), !dbg !1591
  br i1 %27, label %panic13, label %checkok20, !dbg !1591

checkok20:                                        ; preds = %if.exit
  %ptradd21 = getelementptr inbounds i8, ptr %25, i64 %26, !dbg !1591
  %28 = load i8, ptr %ptradd21, align 1
  store i8 %28, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok20
  %29 = load i8, ptr %switch, align 1
  switch i8 %29, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case24
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit22, !dbg !1592

if.exit22:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1594
  %30 = load i64, ptr %index, align 8, !dbg !1595
  %add23 = add i64 %30, 1, !dbg !1595
  store i64 %add23, ptr %index, align 8, !dbg !1595
  br label %switch.exit, !dbg !1595

switch.case24:                                    ; preds = %switch.entry
  %31 = load i64, ptr %index, align 8, !dbg !1596
  %add25 = add i64 %31, 1, !dbg !1596
  store i64 %add25, ptr %index, align 8, !dbg !1596
  br label %switch.exit, !dbg !1596

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1598

switch.exit:                                      ; preds = %switch.default, %switch.case24, %if.exit22
  %32 = load i64, ptr %len, align 8, !dbg !1600
  %33 = load i64, ptr %index, align 8, !dbg !1601
  %eq26 = icmp eq i64 %32, %33, !dbg !1600
  br i1 %eq26, label %if.then27, label %if.exit28, !dbg !1600

if.then27:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1602
  br label %err_retblock, !dbg !1602

if.exit28:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1603, !DIExpression(), !1604)
  %34 = load i32, ptr %base2, align 4, !dbg !1605
  store i32 %34, ptr %base_used, align 4, !dbg !1605
  %ptradd29 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1606
  %35 = load i64, ptr %ptradd29, align 8, !dbg !1606
  %36 = load ptr, ptr %self1, align 8, !dbg !1606
  %37 = load i64, ptr %index, align 8, !dbg !1607
  %ge30 = icmp uge i64 %37, %35, !dbg !1607
  %38 = call i1 @llvm.expect.i1(i1 %ge30, i1 false), !dbg !1607
  br i1 %38, label %panic31, label %checkok38, !dbg !1607

checkok38:                                        ; preds = %if.exit28
  %ptradd39 = getelementptr inbounds i8, ptr %36, i64 %37, !dbg !1607
  %39 = load i8, ptr %ptradd39, align 1, !dbg !1607
  %eq40 = icmp eq i8 %39, 48, !dbg !1606
  br i1 %eq40, label %and.rhs41, label %and.phi43, !dbg !1606

and.rhs41:                                        ; preds = %checkok38
  %40 = load i32, ptr %base2, align 4, !dbg !1608
  %eq42 = icmp eq i32 %40, 10, !dbg !1608
  br label %and.phi43, !dbg !1608

and.phi43:                                        ; preds = %and.rhs41, %checkok38
  %val44 = phi i1 [ false, %checkok38 ], [ %eq42, %and.rhs41 ], !dbg !1608
  br i1 %val44, label %if.then45, label %if.exit74, !dbg !1608

if.then45:                                        ; preds = %and.phi43
  %41 = load i64, ptr %index, align 8, !dbg !1609
  %add46 = add i64 %41, 1, !dbg !1609
  store i64 %add46, ptr %index, align 8, !dbg !1609
  %42 = load i64, ptr %index, align 8, !dbg !1611
  %43 = load i64, ptr %len, align 8, !dbg !1612
  %eq47 = icmp eq i64 %42, %43, !dbg !1611
  br i1 %eq47, label %if.then48, label %if.exit49, !dbg !1611

if.then48:                                        ; preds = %if.then45
  store i32 0, ptr %blockret, align 4, !dbg !1613
  br label %expr_block.exit, !dbg !1613

if.exit49:                                        ; preds = %if.then45
  %ptradd50 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1614
  %44 = load i64, ptr %ptradd50, align 8, !dbg !1614
  %45 = load ptr, ptr %self1, align 8, !dbg !1614
  %46 = load i64, ptr %index, align 8, !dbg !1616
  %ge51 = icmp uge i64 %46, %44, !dbg !1616
  %47 = call i1 @llvm.expect.i1(i1 %ge51, i1 false), !dbg !1616
  br i1 %47, label %panic52, label %checkok59, !dbg !1616

checkok59:                                        ; preds = %if.exit49
  %ptradd60 = getelementptr inbounds i8, ptr %45, i64 %46, !dbg !1616
  %48 = load i8, ptr %ptradd60, align 1
  store i8 %48, ptr %switch61, align 1
  br label %switch.entry62

switch.entry62:                                   ; preds = %checkok59
  %49 = load i8, ptr %switch61, align 1
  switch i8 %49, label %switch.default69 [
    i8 120, label %switch.case63
    i8 88, label %switch.case63
    i8 98, label %switch.case65
    i8 66, label %switch.case65
    i8 111, label %switch.case67
    i8 79, label %switch.case67
  ]

switch.case63:                                    ; preds = %switch.entry62, %switch.entry62
  store i32 16, ptr %base_used, align 4, !dbg !1617
  %50 = load i64, ptr %index, align 8, !dbg !1619
  %add64 = add i64 %50, 1, !dbg !1619
  store i64 %add64, ptr %index, align 8, !dbg !1619
  br label %switch.exit70, !dbg !1619

switch.case65:                                    ; preds = %switch.entry62, %switch.entry62
  store i32 2, ptr %base_used, align 4, !dbg !1620
  %51 = load i64, ptr %index, align 8, !dbg !1622
  %add66 = add i64 %51, 1, !dbg !1622
  store i64 %add66, ptr %index, align 8, !dbg !1622
  br label %switch.exit70, !dbg !1622

switch.case67:                                    ; preds = %switch.entry62, %switch.entry62
  store i32 8, ptr %base_used, align 4, !dbg !1623
  %52 = load i64, ptr %index, align 8, !dbg !1625
  %add68 = add i64 %52, 1, !dbg !1625
  store i64 %add68, ptr %index, align 8, !dbg !1625
  br label %switch.exit70, !dbg !1625

switch.default69:                                 ; preds = %switch.entry62
  br label %switch.exit70, !dbg !1626

switch.exit70:                                    ; preds = %switch.default69, %switch.case67, %switch.case65, %switch.case63
  %53 = load i64, ptr %len, align 8, !dbg !1628
  %54 = load i64, ptr %index, align 8, !dbg !1629
  %eq71 = icmp eq i64 %53, %54, !dbg !1628
  br i1 %eq71, label %if.then72, label %if.exit73, !dbg !1628

if.then72:                                        ; preds = %switch.exit70
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1630
  br label %err_retblock, !dbg !1630

if.exit73:                                        ; preds = %switch.exit70
  br label %if.exit74, !dbg !1630

if.exit74:                                        ; preds = %if.exit73, %and.phi43
    #dbg_declare(ptr %value, !1631, !DIExpression(), !1632)
  store i32 0, ptr %value, align 4, !dbg !1633
  br label %loop.cond75, !dbg !1634

loop.cond75:                                      ; preds = %loop.exit131, %if.exit74
  %55 = load i64, ptr %index, align 8, !dbg !1635
  %56 = load i64, ptr %len, align 8, !dbg !1637
  %neq = icmp ne i64 %55, %56, !dbg !1635
  br i1 %neq, label %loop.body76, label %loop.exit132, !dbg !1635

loop.body76:                                      ; preds = %loop.cond75
    #dbg_declare(ptr %c77, !1638, !DIExpression(), !1640)
  %ptradd78 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1641
  %57 = load i64, ptr %ptradd78, align 8, !dbg !1641
  %58 = load ptr, ptr %self1, align 8, !dbg !1641
  %59 = load i64, ptr %index, align 8, !dbg !1642
  %add79 = add i64 %59, 1, !dbg !1642
  store i64 %add79, ptr %index, align 8, !dbg !1642
  %ge80 = icmp uge i64 %59, %57, !dbg !1642
  %60 = call i1 @llvm.expect.i1(i1 %ge80, i1 false), !dbg !1642
  br i1 %60, label %panic81, label %checkok88, !dbg !1642

checkok88:                                        ; preds = %loop.body76
  %ptradd89 = getelementptr inbounds i8, ptr %58, i64 %59, !dbg !1642
  %61 = load i8, ptr %ptradd89, align 1, !dbg !1642
  store i8 %61, ptr %c77, align 1, !dbg !1642
  store i8 1, ptr %switch90, align 1
  br label %switch.entry91

switch.entry91:                                   ; preds = %checkok88
  %62 = load i8, ptr %switch90, align 1
  %63 = trunc i8 %62 to i1
  %64 = load i32, ptr %base_used, align 4, !dbg !1643
  %lt92 = icmp slt i32 %64, 10, !dbg !1643
  br i1 %lt92, label %or.phi, label %or.rhs, !dbg !1643

or.rhs:                                           ; preds = %switch.entry91
  %65 = load i8, ptr %c77, align 1, !dbg !1645
  %lt93 = icmp ult i8 %65, 65, !dbg !1645
  br label %or.phi, !dbg !1645

or.phi:                                           ; preds = %or.rhs, %switch.entry91
  %val94 = phi i1 [ true, %switch.entry91 ], [ %lt93, %or.rhs ], !dbg !1645
  %eq95 = icmp eq i1 %val94, %63, !dbg !1645
  br i1 %eq95, label %switch.case96, label %next_if, !dbg !1645

switch.case96:                                    ; preds = %or.phi
  %66 = load i8, ptr %c77, align 1, !dbg !1646
  %sub = sub i8 %66, 48, !dbg !1646
  store i8 %sub, ptr %c77, align 1, !dbg !1646
  br label %switch.exit112, !dbg !1646

next_if:                                          ; preds = %or.phi
  %67 = load i8, ptr %c77, align 1, !dbg !1648
  %le97 = icmp ule i8 %67, 70, !dbg !1648
  %eq98 = icmp eq i1 %le97, %63, !dbg !1648
  br i1 %eq98, label %switch.case99, label %next_if101, !dbg !1648

switch.case99:                                    ; preds = %next_if
  %68 = load i8, ptr %c77, align 1, !dbg !1649
  %sub100 = sub i8 %68, 55, !dbg !1649
  store i8 %sub100, ptr %c77, align 1, !dbg !1649
  br label %switch.exit112, !dbg !1649

next_if101:                                       ; preds = %next_if
  %69 = load i8, ptr %c77, align 1, !dbg !1651
  %lt102 = icmp ult i8 %69, 97, !dbg !1651
  br i1 %lt102, label %or.phi105, label %or.rhs103, !dbg !1651

or.rhs103:                                        ; preds = %next_if101
  %70 = load i8, ptr %c77, align 1, !dbg !1652
  %gt104 = icmp ugt i8 %70, 102, !dbg !1652
  br label %or.phi105, !dbg !1652

or.phi105:                                        ; preds = %or.rhs103, %next_if101
  %val106 = phi i1 [ true, %next_if101 ], [ %gt104, %or.rhs103 ], !dbg !1652
  %eq107 = icmp eq i1 %val106, %63, !dbg !1652
  br i1 %eq107, label %switch.case108, label %next_if109, !dbg !1652

switch.case108:                                   ; preds = %or.phi105
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1653
  br label %err_retblock, !dbg !1653

next_if109:                                       ; preds = %or.phi105
  br label %switch.default110, !dbg !1653

switch.default110:                                ; preds = %next_if109
  %71 = load i8, ptr %c77, align 1, !dbg !1655
  %sub111 = sub i8 %71, 87, !dbg !1655
  store i8 %sub111, ptr %c77, align 1, !dbg !1655
  br label %switch.exit112, !dbg !1655

switch.exit112:                                   ; preds = %switch.default110, %switch.case99, %switch.case96
  %72 = load i8, ptr %c77, align 1, !dbg !1657
  %zext113 = zext i8 %72 to i32, !dbg !1657
  %73 = load i32, ptr %base_used, align 4, !dbg !1658
  %le114 = icmp sle i32 %73, %zext113, !dbg !1657
  %check = icmp slt i32 %zext113, 0, !dbg !1657
  %siui-le = or i1 %check, %le114, !dbg !1657
  br i1 %siui-le, label %if.then115, label %if.exit116, !dbg !1657

if.then115:                                       ; preds = %switch.exit112
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1659
  br label %err_retblock, !dbg !1659

if.exit116:                                       ; preds = %switch.exit112
  %74 = load i8, ptr %is_negative, align 1, !dbg !1660
  %75 = trunc i8 %74 to i1, !dbg !1660
  br i1 %75, label %if.then117, label %if.exit123, !dbg !1660

if.then117:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value, !1663, !DIExpression(), !1665)
  %76 = load i32, ptr %value, align 4, !dbg !1666
  %77 = load i32, ptr %base_used, align 4, !dbg !1667
  %mul = mul i32 %76, %77, !dbg !1666
  %78 = load i8, ptr %c77, align 1, !dbg !1668
  %zext118 = zext i8 %78 to i32, !dbg !1668
  %sub119 = sub i32 %mul, %zext118, !dbg !1666
  store i32 %sub119, ptr %new_value, align 4, !dbg !1666
  %79 = load i32, ptr %new_value, align 4, !dbg !1669
  %80 = load i32, ptr %value, align 4, !dbg !1670
  %gt120 = icmp sgt i32 %79, %80, !dbg !1669
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !1669

if.then121:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1671
  br label %err_retblock, !dbg !1671

if.exit122:                                       ; preds = %if.then117
  %81 = load i32, ptr %new_value, align 4, !dbg !1672
  store i32 %81, ptr %value, align 4, !dbg !1672
  br label %loop.exit131, !dbg !1673

if.exit123:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value124, !1674, !DIExpression(), !1675)
  %82 = load i32, ptr %value, align 4, !dbg !1676
  %83 = load i32, ptr %base_used, align 4, !dbg !1677
  %mul125 = mul i32 %82, %83, !dbg !1676
  %84 = load i8, ptr %c77, align 1, !dbg !1678
  %zext126 = zext i8 %84 to i32, !dbg !1678
  %add127 = add i32 %mul125, %zext126, !dbg !1676
  store i32 %add127, ptr %new_value124, align 4, !dbg !1676
  %85 = load i32, ptr %new_value124, align 4, !dbg !1679
  %86 = load i32, ptr %value, align 4, !dbg !1680
  %lt128 = icmp slt i32 %85, %86, !dbg !1679
  br i1 %lt128, label %if.then129, label %if.exit130, !dbg !1679

if.then129:                                       ; preds = %if.exit123
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1681
  br label %err_retblock, !dbg !1681

if.exit130:                                       ; preds = %if.exit123
  %87 = load i32, ptr %new_value124, align 4, !dbg !1682
  store i32 %87, ptr %value, align 4, !dbg !1682
  br label %loop.exit131, !dbg !1682

loop.exit131:                                     ; preds = %if.exit130, %if.exit122
  br label %loop.cond75, !dbg !1682

loop.exit132:                                     ; preds = %loop.cond75
  %88 = load i32, ptr %value, align 4, !dbg !1683
  store i32 %88, ptr %blockret, align 4, !dbg !1683
  br label %expr_block.exit, !dbg !1683

expr_block.exit:                                  ; preds = %loop.exit132, %if.then48
  %89 = load i32, ptr %blockret, align 4, !dbg !1683
  store i32 %89, ptr %0, align 4, !dbg !1683
  ret i64 0, !dbg !1683

err_retblock:                                     ; preds = %if.then129, %if.then121, %if.then115, %switch.case108, %if.then72, %if.then27, %if.then
  %90 = load i64, ptr %reterr, align 8, !dbg !1683
  ret i64 %90, !dbg !1683

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %91 = insertvalue %any undef, ptr %taddr, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %93 = insertvalue %any undef, ptr %taddr7, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %92, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %94, ptr %ptradd8, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 8, ptr @.func.83, i64 6, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1579
  unreachable, !dbg !1579

panic13:                                          ; preds = %if.exit
  store i64 %24, ptr %taddr14, align 8
  %96 = insertvalue %any undef, ptr %taddr14, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr15, align 8
  %98 = insertvalue %any undef, ptr %taddr15, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %97, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %99, ptr %ptradd17, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.83, i64 6, i32 857, ptr byval(%"any[]") align 8 %indirectarg19) #6, !dbg !1591
  unreachable, !dbg !1591

panic31:                                          ; preds = %if.exit28
  store i64 %35, ptr %taddr32, align 8
  %101 = insertvalue %any undef, ptr %taddr32, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr33, align 8
  %103 = insertvalue %any undef, ptr %taddr33, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %102, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %104, ptr %ptradd35, align 16
  %105 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.83, i64 6, i32 870, ptr byval(%"any[]") align 8 %indirectarg37) #6, !dbg !1607
  unreachable, !dbg !1607

panic52:                                          ; preds = %if.exit49
  store i64 %44, ptr %taddr53, align 8
  %106 = insertvalue %any undef, ptr %taddr53, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %46, ptr %taddr54, align 8
  %108 = insertvalue %any undef, ptr %taddr54, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %107, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %109, ptr %ptradd56, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.83, i64 6, i32 874, ptr byval(%"any[]") align 8 %indirectarg58) #6, !dbg !1616
  unreachable, !dbg !1616

panic81:                                          ; preds = %loop.body76
  store i64 %57, ptr %taddr82, align 8
  %111 = insertvalue %any undef, ptr %taddr82, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %59, ptr %taddr83, align 8
  %113 = insertvalue %any undef, ptr %taddr83, 0
  %114 = insertvalue %any %113, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %112, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %114, ptr %ptradd85, align 16
  %115 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %115, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.83, i64 6, i32 896, ptr byval(%"any[]") align 8 %indirectarg87) #6, !dbg !1642
  unreachable, !dbg !1642
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_short(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1684 {
entry:
  %self = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self1 = alloca %"char[]", align 8
  %base2 = alloca i32, align 4
  %blockret = alloca i16, align 2
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i16, align 2
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %varargslots56 = alloca [2 x %any], align 16
  %indirectarg59 = alloca %"any[]", align 8
  %switch62 = alloca i8, align 1
  %value = alloca i16, align 2
  %c78 = alloca i8, align 1
  %taddr83 = alloca i64, align 8
  %taddr84 = alloca i64, align 8
  %varargslots85 = alloca [2 x %any], align 16
  %indirectarg88 = alloca %"any[]", align 8
  %switch91 = alloca i8, align 1
  %new_value = alloca i16, align 2
  %new_value128 = alloca i16, align 2
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1689, !DIExpression(), !1690)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1691, !DIExpression(), !1692)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self1, ptr align 8 %self, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base2, align 4
  %5 = load i32, ptr %base2, align 4, !dbg !1693
  %gt = icmp sgt i32 %5, 0, !dbg !1693
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1693

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base2, align 4, !dbg !1697
  %le = icmp sle i32 %6, 16, !dbg !1697
  br label %and.phi, !dbg !1697

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1697
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1697

assert_fail:                                      ; preds = %and.phi
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1698
  call void %7(ptr @.panic_msg.80, i64 63, ptr @.file.16, i64 9, ptr @.func.84, i64 8, i32 925) #6, !dbg !1698
  unreachable, !dbg !1698

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1699, !DIExpression(), !1700)
  %ptradd3 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1701
  %8 = load i64, ptr %ptradd3, align 8, !dbg !1701
  store i64 %8, ptr %len, align 8, !dbg !1701
    #dbg_declare(ptr %index, !1702, !DIExpression(), !1703)
  store i64 0, ptr %index, align 8, !dbg !1704
    #dbg_declare(ptr %ptr, !1705, !DIExpression(), !1706)
  %9 = load ptr, ptr %self1, align 8, !dbg !1707
  store ptr %9, ptr %ptr, align 8, !dbg !1707
  br label %loop.cond, !dbg !1708

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1709
  %11 = load i64, ptr %len, align 8, !dbg !1711
  %lt = icmp ult i64 %10, %11, !dbg !1709
  br i1 %lt, label %and.rhs4, label %and.phi9, !dbg !1709

and.rhs4:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1712
  %13 = load i64, ptr %index, align 8, !dbg !1713
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1713
  %14 = load i8, ptr %ptradd5, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1
  store i8 %15, ptr %c6, align 1
  %16 = load i8, ptr %c6, align 1, !dbg !1714
  %zext = zext i8 %16 to i64, !dbg !1714
  %ge = icmp uge i64 %zext, 256, !dbg !1714
  %17 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1714
  br i1 %17, label %panic, label %checkok, !dbg !1714

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1714
  %18 = load i16, ptr %ptroffset, align 2, !dbg !1714
  %lshrl = lshr i16 %18, 10, !dbg !1714
  %19 = and i16 1, %lshrl, !dbg !1714
  %trunc = trunc i16 %19 to i8, !dbg !1714
  %20 = trunc i8 %trunc to i1, !dbg !1714
  br label %and.phi9, !dbg !1714

and.phi9:                                         ; preds = %checkok, %loop.cond
  %val10 = phi i1 [ false, %loop.cond ], [ %20, %checkok ], !dbg !1714
  br i1 %val10, label %loop.body, label %loop.exit, !dbg !1714

loop.body:                                        ; preds = %and.phi9
  %21 = load i64, ptr %index, align 8, !dbg !1718
  %add = add i64 %21, 1, !dbg !1718
  store i64 %add, ptr %index, align 8, !dbg !1718
  br label %loop.cond, !dbg !1718

loop.exit:                                        ; preds = %and.phi9
  %22 = load i64, ptr %len, align 8, !dbg !1719
  %23 = load i64, ptr %index, align 8, !dbg !1720
  %eq = icmp eq i64 %22, %23, !dbg !1719
  br i1 %eq, label %if.then, label %if.exit, !dbg !1719

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1721
  br label %err_retblock, !dbg !1721

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1722, !DIExpression(), !1723)
  store i8 0, ptr %is_negative, align 1, !dbg !1723
  %ptradd11 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1724
  %24 = load i64, ptr %ptradd11, align 8, !dbg !1724
  %25 = load ptr, ptr %self1, align 8, !dbg !1724
  %26 = load i64, ptr %index, align 8, !dbg !1726
  %ge12 = icmp uge i64 %26, %24, !dbg !1726
  %27 = call i1 @llvm.expect.i1(i1 %ge12, i1 false), !dbg !1726
  br i1 %27, label %panic13, label %checkok20, !dbg !1726

checkok20:                                        ; preds = %if.exit
  %ptradd21 = getelementptr inbounds i8, ptr %25, i64 %26, !dbg !1726
  %28 = load i8, ptr %ptradd21, align 1
  store i8 %28, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok20
  %29 = load i8, ptr %switch, align 1
  switch i8 %29, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case24
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit22, !dbg !1727

if.exit22:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1729
  %30 = load i64, ptr %index, align 8, !dbg !1730
  %add23 = add i64 %30, 1, !dbg !1730
  store i64 %add23, ptr %index, align 8, !dbg !1730
  br label %switch.exit, !dbg !1730

switch.case24:                                    ; preds = %switch.entry
  %31 = load i64, ptr %index, align 8, !dbg !1731
  %add25 = add i64 %31, 1, !dbg !1731
  store i64 %add25, ptr %index, align 8, !dbg !1731
  br label %switch.exit, !dbg !1731

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1733

switch.exit:                                      ; preds = %switch.default, %switch.case24, %if.exit22
  %32 = load i64, ptr %len, align 8, !dbg !1735
  %33 = load i64, ptr %index, align 8, !dbg !1736
  %eq26 = icmp eq i64 %32, %33, !dbg !1735
  br i1 %eq26, label %if.then27, label %if.exit28, !dbg !1735

if.then27:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1737
  br label %err_retblock, !dbg !1737

if.exit28:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1738, !DIExpression(), !1739)
  %34 = load i32, ptr %base2, align 4, !dbg !1740
  %trunc29 = trunc i32 %34 to i16, !dbg !1740
  store i16 %trunc29, ptr %base_used, align 2, !dbg !1740
  %ptradd30 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1741
  %35 = load i64, ptr %ptradd30, align 8, !dbg !1741
  %36 = load ptr, ptr %self1, align 8, !dbg !1741
  %37 = load i64, ptr %index, align 8, !dbg !1742
  %ge31 = icmp uge i64 %37, %35, !dbg !1742
  %38 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !1742
  br i1 %38, label %panic32, label %checkok39, !dbg !1742

checkok39:                                        ; preds = %if.exit28
  %ptradd40 = getelementptr inbounds i8, ptr %36, i64 %37, !dbg !1742
  %39 = load i8, ptr %ptradd40, align 1, !dbg !1742
  %eq41 = icmp eq i8 %39, 48, !dbg !1741
  br i1 %eq41, label %and.rhs42, label %and.phi44, !dbg !1741

and.rhs42:                                        ; preds = %checkok39
  %40 = load i32, ptr %base2, align 4, !dbg !1743
  %eq43 = icmp eq i32 %40, 10, !dbg !1743
  br label %and.phi44, !dbg !1743

and.phi44:                                        ; preds = %and.rhs42, %checkok39
  %val45 = phi i1 [ false, %checkok39 ], [ %eq43, %and.rhs42 ], !dbg !1743
  br i1 %val45, label %if.then46, label %if.exit75, !dbg !1743

if.then46:                                        ; preds = %and.phi44
  %41 = load i64, ptr %index, align 8, !dbg !1744
  %add47 = add i64 %41, 1, !dbg !1744
  store i64 %add47, ptr %index, align 8, !dbg !1744
  %42 = load i64, ptr %index, align 8, !dbg !1746
  %43 = load i64, ptr %len, align 8, !dbg !1747
  %eq48 = icmp eq i64 %42, %43, !dbg !1746
  br i1 %eq48, label %if.then49, label %if.exit50, !dbg !1746

if.then49:                                        ; preds = %if.then46
  store i16 0, ptr %blockret, align 2, !dbg !1748
  br label %expr_block.exit, !dbg !1748

if.exit50:                                        ; preds = %if.then46
  %ptradd51 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1749
  %44 = load i64, ptr %ptradd51, align 8, !dbg !1749
  %45 = load ptr, ptr %self1, align 8, !dbg !1749
  %46 = load i64, ptr %index, align 8, !dbg !1751
  %ge52 = icmp uge i64 %46, %44, !dbg !1751
  %47 = call i1 @llvm.expect.i1(i1 %ge52, i1 false), !dbg !1751
  br i1 %47, label %panic53, label %checkok60, !dbg !1751

checkok60:                                        ; preds = %if.exit50
  %ptradd61 = getelementptr inbounds i8, ptr %45, i64 %46, !dbg !1751
  %48 = load i8, ptr %ptradd61, align 1
  store i8 %48, ptr %switch62, align 1
  br label %switch.entry63

switch.entry63:                                   ; preds = %checkok60
  %49 = load i8, ptr %switch62, align 1
  switch i8 %49, label %switch.default70 [
    i8 120, label %switch.case64
    i8 88, label %switch.case64
    i8 98, label %switch.case66
    i8 66, label %switch.case66
    i8 111, label %switch.case68
    i8 79, label %switch.case68
  ]

switch.case64:                                    ; preds = %switch.entry63, %switch.entry63
  store i16 16, ptr %base_used, align 2, !dbg !1752
  %50 = load i64, ptr %index, align 8, !dbg !1754
  %add65 = add i64 %50, 1, !dbg !1754
  store i64 %add65, ptr %index, align 8, !dbg !1754
  br label %switch.exit71, !dbg !1754

switch.case66:                                    ; preds = %switch.entry63, %switch.entry63
  store i16 2, ptr %base_used, align 2, !dbg !1755
  %51 = load i64, ptr %index, align 8, !dbg !1757
  %add67 = add i64 %51, 1, !dbg !1757
  store i64 %add67, ptr %index, align 8, !dbg !1757
  br label %switch.exit71, !dbg !1757

switch.case68:                                    ; preds = %switch.entry63, %switch.entry63
  store i16 8, ptr %base_used, align 2, !dbg !1758
  %52 = load i64, ptr %index, align 8, !dbg !1760
  %add69 = add i64 %52, 1, !dbg !1760
  store i64 %add69, ptr %index, align 8, !dbg !1760
  br label %switch.exit71, !dbg !1760

switch.default70:                                 ; preds = %switch.entry63
  br label %switch.exit71, !dbg !1761

switch.exit71:                                    ; preds = %switch.default70, %switch.case68, %switch.case66, %switch.case64
  %53 = load i64, ptr %len, align 8, !dbg !1763
  %54 = load i64, ptr %index, align 8, !dbg !1764
  %eq72 = icmp eq i64 %53, %54, !dbg !1763
  br i1 %eq72, label %if.then73, label %if.exit74, !dbg !1763

if.then73:                                        ; preds = %switch.exit71
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1765
  br label %err_retblock, !dbg !1765

if.exit74:                                        ; preds = %switch.exit71
  br label %if.exit75, !dbg !1765

if.exit75:                                        ; preds = %if.exit74, %and.phi44
    #dbg_declare(ptr %value, !1766, !DIExpression(), !1767)
  store i16 0, ptr %value, align 2, !dbg !1768
  br label %loop.cond76, !dbg !1769

loop.cond76:                                      ; preds = %loop.exit138, %if.exit75
  %55 = load i64, ptr %index, align 8, !dbg !1770
  %56 = load i64, ptr %len, align 8, !dbg !1772
  %neq = icmp ne i64 %55, %56, !dbg !1770
  br i1 %neq, label %loop.body77, label %loop.exit139, !dbg !1770

loop.body77:                                      ; preds = %loop.cond76
    #dbg_declare(ptr %c78, !1773, !DIExpression(), !1775)
  %ptradd79 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1776
  %57 = load i64, ptr %ptradd79, align 8, !dbg !1776
  %58 = load ptr, ptr %self1, align 8, !dbg !1776
  %59 = load i64, ptr %index, align 8, !dbg !1777
  %add80 = add i64 %59, 1, !dbg !1777
  store i64 %add80, ptr %index, align 8, !dbg !1777
  %ge81 = icmp uge i64 %59, %57, !dbg !1777
  %60 = call i1 @llvm.expect.i1(i1 %ge81, i1 false), !dbg !1777
  br i1 %60, label %panic82, label %checkok89, !dbg !1777

checkok89:                                        ; preds = %loop.body77
  %ptradd90 = getelementptr inbounds i8, ptr %58, i64 %59, !dbg !1777
  %61 = load i8, ptr %ptradd90, align 1, !dbg !1777
  store i8 %61, ptr %c78, align 1, !dbg !1777
  store i8 1, ptr %switch91, align 1
  br label %switch.entry92

switch.entry92:                                   ; preds = %checkok89
  %62 = load i8, ptr %switch91, align 1
  %63 = trunc i8 %62 to i1
  %64 = load i16, ptr %base_used, align 2, !dbg !1778
  %sext = sext i16 %64 to i32, !dbg !1778
  %lt93 = icmp slt i32 %sext, 10, !dbg !1778
  br i1 %lt93, label %or.phi, label %or.rhs, !dbg !1778

or.rhs:                                           ; preds = %switch.entry92
  %65 = load i8, ptr %c78, align 1, !dbg !1780
  %lt94 = icmp ult i8 %65, 65, !dbg !1780
  br label %or.phi, !dbg !1780

or.phi:                                           ; preds = %or.rhs, %switch.entry92
  %val95 = phi i1 [ true, %switch.entry92 ], [ %lt94, %or.rhs ], !dbg !1780
  %eq96 = icmp eq i1 %val95, %63, !dbg !1780
  br i1 %eq96, label %switch.case97, label %next_if, !dbg !1780

switch.case97:                                    ; preds = %or.phi
  %66 = load i8, ptr %c78, align 1, !dbg !1781
  %sub = sub i8 %66, 48, !dbg !1781
  store i8 %sub, ptr %c78, align 1, !dbg !1781
  br label %switch.exit113, !dbg !1781

next_if:                                          ; preds = %or.phi
  %67 = load i8, ptr %c78, align 1, !dbg !1783
  %le98 = icmp ule i8 %67, 70, !dbg !1783
  %eq99 = icmp eq i1 %le98, %63, !dbg !1783
  br i1 %eq99, label %switch.case100, label %next_if102, !dbg !1783

switch.case100:                                   ; preds = %next_if
  %68 = load i8, ptr %c78, align 1, !dbg !1784
  %sub101 = sub i8 %68, 55, !dbg !1784
  store i8 %sub101, ptr %c78, align 1, !dbg !1784
  br label %switch.exit113, !dbg !1784

next_if102:                                       ; preds = %next_if
  %69 = load i8, ptr %c78, align 1, !dbg !1786
  %lt103 = icmp ult i8 %69, 97, !dbg !1786
  br i1 %lt103, label %or.phi106, label %or.rhs104, !dbg !1786

or.rhs104:                                        ; preds = %next_if102
  %70 = load i8, ptr %c78, align 1, !dbg !1787
  %gt105 = icmp ugt i8 %70, 102, !dbg !1787
  br label %or.phi106, !dbg !1787

or.phi106:                                        ; preds = %or.rhs104, %next_if102
  %val107 = phi i1 [ true, %next_if102 ], [ %gt105, %or.rhs104 ], !dbg !1787
  %eq108 = icmp eq i1 %val107, %63, !dbg !1787
  br i1 %eq108, label %switch.case109, label %next_if110, !dbg !1787

switch.case109:                                   ; preds = %or.phi106
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1788
  br label %err_retblock, !dbg !1788

next_if110:                                       ; preds = %or.phi106
  br label %switch.default111, !dbg !1788

switch.default111:                                ; preds = %next_if110
  %71 = load i8, ptr %c78, align 1, !dbg !1790
  %sub112 = sub i8 %71, 87, !dbg !1790
  store i8 %sub112, ptr %c78, align 1, !dbg !1790
  br label %switch.exit113, !dbg !1790

switch.exit113:                                   ; preds = %switch.default111, %switch.case100, %switch.case97
  %72 = load i8, ptr %c78, align 1, !dbg !1792
  %zext114 = zext i8 %72 to i16, !dbg !1792
  %73 = load i16, ptr %base_used, align 2, !dbg !1793
  %le115 = icmp sle i16 %73, %zext114, !dbg !1792
  %check = icmp slt i16 %zext114, 0, !dbg !1792
  %siui-le = or i1 %check, %le115, !dbg !1792
  br i1 %siui-le, label %if.then116, label %if.exit117, !dbg !1792

if.then116:                                       ; preds = %switch.exit113
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1794
  br label %err_retblock, !dbg !1794

if.exit117:                                       ; preds = %switch.exit113
  %74 = load i8, ptr %is_negative, align 1, !dbg !1795
  %75 = trunc i8 %74 to i1, !dbg !1795
  br i1 %75, label %if.then118, label %if.exit127, !dbg !1795

if.then118:                                       ; preds = %if.exit117
    #dbg_declare(ptr %new_value, !1798, !DIExpression(), !1800)
  %76 = load i16, ptr %value, align 2, !dbg !1801
  %sext119 = sext i16 %76 to i32, !dbg !1801
  %77 = load i16, ptr %base_used, align 2, !dbg !1802
  %sext120 = sext i16 %77 to i32, !dbg !1802
  %mul = mul i32 %sext119, %sext120, !dbg !1801
  %78 = load i8, ptr %c78, align 1, !dbg !1803
  %zext121 = zext i8 %78 to i32, !dbg !1803
  %sub122 = sub i32 %mul, %zext121, !dbg !1801
  %trunc123 = trunc i32 %sub122 to i16, !dbg !1801
  store i16 %trunc123, ptr %new_value, align 2, !dbg !1801
  %79 = load i16, ptr %new_value, align 2, !dbg !1804
  %80 = load i16, ptr %value, align 2, !dbg !1805
  %gt124 = icmp sgt i16 %79, %80, !dbg !1804
  br i1 %gt124, label %if.then125, label %if.exit126, !dbg !1804

if.then125:                                       ; preds = %if.then118
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1806
  br label %err_retblock, !dbg !1806

if.exit126:                                       ; preds = %if.then118
  %81 = load i16, ptr %new_value, align 2, !dbg !1807
  store i16 %81, ptr %value, align 2, !dbg !1807
  br label %loop.exit138, !dbg !1808

if.exit127:                                       ; preds = %if.exit117
    #dbg_declare(ptr %new_value128, !1809, !DIExpression(), !1810)
  %82 = load i16, ptr %value, align 2, !dbg !1811
  %sext129 = sext i16 %82 to i32, !dbg !1811
  %83 = load i16, ptr %base_used, align 2, !dbg !1812
  %sext130 = sext i16 %83 to i32, !dbg !1812
  %mul131 = mul i32 %sext129, %sext130, !dbg !1811
  %84 = load i8, ptr %c78, align 1, !dbg !1813
  %zext132 = zext i8 %84 to i32, !dbg !1813
  %add133 = add i32 %mul131, %zext132, !dbg !1811
  %trunc134 = trunc i32 %add133 to i16, !dbg !1811
  store i16 %trunc134, ptr %new_value128, align 2, !dbg !1811
  %85 = load i16, ptr %new_value128, align 2, !dbg !1814
  %86 = load i16, ptr %value, align 2, !dbg !1815
  %lt135 = icmp slt i16 %85, %86, !dbg !1814
  br i1 %lt135, label %if.then136, label %if.exit137, !dbg !1814

if.then136:                                       ; preds = %if.exit127
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1816
  br label %err_retblock, !dbg !1816

if.exit137:                                       ; preds = %if.exit127
  %87 = load i16, ptr %new_value128, align 2, !dbg !1817
  store i16 %87, ptr %value, align 2, !dbg !1817
  br label %loop.exit138, !dbg !1817

loop.exit138:                                     ; preds = %if.exit137, %if.exit126
  br label %loop.cond76, !dbg !1817

loop.exit139:                                     ; preds = %loop.cond76
  %88 = load i16, ptr %value, align 2, !dbg !1818
  store i16 %88, ptr %blockret, align 2, !dbg !1818
  br label %expr_block.exit, !dbg !1818

expr_block.exit:                                  ; preds = %loop.exit139, %if.then49
  %89 = load i16, ptr %blockret, align 2, !dbg !1818
  store i16 %89, ptr %0, align 2, !dbg !1818
  ret i64 0, !dbg !1818

err_retblock:                                     ; preds = %if.then136, %if.then125, %if.then116, %switch.case109, %if.then73, %if.then27, %if.then
  %90 = load i64, ptr %reterr, align 8, !dbg !1818
  ret i64 %90, !dbg !1818

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %91 = insertvalue %any undef, ptr %taddr, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %93 = insertvalue %any undef, ptr %taddr7, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %92, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %94, ptr %ptradd8, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 8, ptr @.func.84, i64 8, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1714
  unreachable, !dbg !1714

panic13:                                          ; preds = %if.exit
  store i64 %24, ptr %taddr14, align 8
  %96 = insertvalue %any undef, ptr %taddr14, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr15, align 8
  %98 = insertvalue %any undef, ptr %taddr15, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %97, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %99, ptr %ptradd17, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.84, i64 8, i32 857, ptr byval(%"any[]") align 8 %indirectarg19) #6, !dbg !1726
  unreachable, !dbg !1726

panic32:                                          ; preds = %if.exit28
  store i64 %35, ptr %taddr33, align 8
  %101 = insertvalue %any undef, ptr %taddr33, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr34, align 8
  %103 = insertvalue %any undef, ptr %taddr34, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %102, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %104, ptr %ptradd36, align 16
  %105 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.84, i64 8, i32 870, ptr byval(%"any[]") align 8 %indirectarg38) #6, !dbg !1742
  unreachable, !dbg !1742

panic53:                                          ; preds = %if.exit50
  store i64 %44, ptr %taddr54, align 8
  %106 = insertvalue %any undef, ptr %taddr54, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %46, ptr %taddr55, align 8
  %108 = insertvalue %any undef, ptr %taddr55, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %107, ptr %varargslots56, align 16
  %ptradd57 = getelementptr inbounds i8, ptr %varargslots56, i64 16
  store %any %109, ptr %ptradd57, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp58" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp58", ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.84, i64 8, i32 874, ptr byval(%"any[]") align 8 %indirectarg59) #6, !dbg !1751
  unreachable, !dbg !1751

panic82:                                          ; preds = %loop.body77
  store i64 %57, ptr %taddr83, align 8
  %111 = insertvalue %any undef, ptr %taddr83, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %59, ptr %taddr84, align 8
  %113 = insertvalue %any undef, ptr %taddr84, 0
  %114 = insertvalue %any %113, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %112, ptr %varargslots85, align 16
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %114, ptr %ptradd86, align 16
  %115 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %115, i64 2, 1
  store %"any[]" %"$$temp87", ptr %indirectarg88, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.84, i64 8, i32 896, ptr byval(%"any[]") align 8 %indirectarg88) #6, !dbg !1777
  unreachable, !dbg !1777
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_ichar(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1819 {
entry:
  %self = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self1 = alloca %"char[]", align 8
  %base2 = alloca i32, align 4
  %blockret = alloca i8, align 1
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i8, align 1
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %varargslots56 = alloca [2 x %any], align 16
  %indirectarg59 = alloca %"any[]", align 8
  %switch62 = alloca i8, align 1
  %value = alloca i8, align 1
  %c78 = alloca i8, align 1
  %taddr83 = alloca i64, align 8
  %taddr84 = alloca i64, align 8
  %varargslots85 = alloca [2 x %any], align 16
  %indirectarg88 = alloca %"any[]", align 8
  %switch91 = alloca i8, align 1
  %new_value = alloca i8, align 1
  %new_value127 = alloca i8, align 1
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1824, !DIExpression(), !1825)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1826, !DIExpression(), !1827)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self1, ptr align 8 %self, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base2, align 4
  %5 = load i32, ptr %base2, align 4, !dbg !1828
  %gt = icmp sgt i32 %5, 0, !dbg !1828
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1828

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base2, align 4, !dbg !1832
  %le = icmp sle i32 %6, 16, !dbg !1832
  br label %and.phi, !dbg !1832

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1832
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1832

assert_fail:                                      ; preds = %and.phi
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1833
  call void %7(ptr @.panic_msg.80, i64 63, ptr @.file.16, i64 9, ptr @.func.85, i64 8, i32 926) #6, !dbg !1833
  unreachable, !dbg !1833

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1834, !DIExpression(), !1835)
  %ptradd3 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1836
  %8 = load i64, ptr %ptradd3, align 8, !dbg !1836
  store i64 %8, ptr %len, align 8, !dbg !1836
    #dbg_declare(ptr %index, !1837, !DIExpression(), !1838)
  store i64 0, ptr %index, align 8, !dbg !1839
    #dbg_declare(ptr %ptr, !1840, !DIExpression(), !1841)
  %9 = load ptr, ptr %self1, align 8, !dbg !1842
  store ptr %9, ptr %ptr, align 8, !dbg !1842
  br label %loop.cond, !dbg !1843

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1844
  %11 = load i64, ptr %len, align 8, !dbg !1846
  %lt = icmp ult i64 %10, %11, !dbg !1844
  br i1 %lt, label %and.rhs4, label %and.phi9, !dbg !1844

and.rhs4:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1847
  %13 = load i64, ptr %index, align 8, !dbg !1848
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1848
  %14 = load i8, ptr %ptradd5, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1
  store i8 %15, ptr %c6, align 1
  %16 = load i8, ptr %c6, align 1, !dbg !1849
  %zext = zext i8 %16 to i64, !dbg !1849
  %ge = icmp uge i64 %zext, 256, !dbg !1849
  %17 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1849
  br i1 %17, label %panic, label %checkok, !dbg !1849

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1849
  %18 = load i16, ptr %ptroffset, align 2, !dbg !1849
  %lshrl = lshr i16 %18, 10, !dbg !1849
  %19 = and i16 1, %lshrl, !dbg !1849
  %trunc = trunc i16 %19 to i8, !dbg !1849
  %20 = trunc i8 %trunc to i1, !dbg !1849
  br label %and.phi9, !dbg !1849

and.phi9:                                         ; preds = %checkok, %loop.cond
  %val10 = phi i1 [ false, %loop.cond ], [ %20, %checkok ], !dbg !1849
  br i1 %val10, label %loop.body, label %loop.exit, !dbg !1849

loop.body:                                        ; preds = %and.phi9
  %21 = load i64, ptr %index, align 8, !dbg !1853
  %add = add i64 %21, 1, !dbg !1853
  store i64 %add, ptr %index, align 8, !dbg !1853
  br label %loop.cond, !dbg !1853

loop.exit:                                        ; preds = %and.phi9
  %22 = load i64, ptr %len, align 8, !dbg !1854
  %23 = load i64, ptr %index, align 8, !dbg !1855
  %eq = icmp eq i64 %22, %23, !dbg !1854
  br i1 %eq, label %if.then, label %if.exit, !dbg !1854

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1856
  br label %err_retblock, !dbg !1856

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1857, !DIExpression(), !1858)
  store i8 0, ptr %is_negative, align 1, !dbg !1858
  %ptradd11 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1859
  %24 = load i64, ptr %ptradd11, align 8, !dbg !1859
  %25 = load ptr, ptr %self1, align 8, !dbg !1859
  %26 = load i64, ptr %index, align 8, !dbg !1861
  %ge12 = icmp uge i64 %26, %24, !dbg !1861
  %27 = call i1 @llvm.expect.i1(i1 %ge12, i1 false), !dbg !1861
  br i1 %27, label %panic13, label %checkok20, !dbg !1861

checkok20:                                        ; preds = %if.exit
  %ptradd21 = getelementptr inbounds i8, ptr %25, i64 %26, !dbg !1861
  %28 = load i8, ptr %ptradd21, align 1
  store i8 %28, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok20
  %29 = load i8, ptr %switch, align 1
  switch i8 %29, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case24
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit22, !dbg !1862

if.exit22:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1864
  %30 = load i64, ptr %index, align 8, !dbg !1865
  %add23 = add i64 %30, 1, !dbg !1865
  store i64 %add23, ptr %index, align 8, !dbg !1865
  br label %switch.exit, !dbg !1865

switch.case24:                                    ; preds = %switch.entry
  %31 = load i64, ptr %index, align 8, !dbg !1866
  %add25 = add i64 %31, 1, !dbg !1866
  store i64 %add25, ptr %index, align 8, !dbg !1866
  br label %switch.exit, !dbg !1866

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1868

switch.exit:                                      ; preds = %switch.default, %switch.case24, %if.exit22
  %32 = load i64, ptr %len, align 8, !dbg !1870
  %33 = load i64, ptr %index, align 8, !dbg !1871
  %eq26 = icmp eq i64 %32, %33, !dbg !1870
  br i1 %eq26, label %if.then27, label %if.exit28, !dbg !1870

if.then27:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1872
  br label %err_retblock, !dbg !1872

if.exit28:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1873, !DIExpression(), !1874)
  %34 = load i32, ptr %base2, align 4, !dbg !1875
  %trunc29 = trunc i32 %34 to i8, !dbg !1875
  store i8 %trunc29, ptr %base_used, align 1, !dbg !1875
  %ptradd30 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1876
  %35 = load i64, ptr %ptradd30, align 8, !dbg !1876
  %36 = load ptr, ptr %self1, align 8, !dbg !1876
  %37 = load i64, ptr %index, align 8, !dbg !1877
  %ge31 = icmp uge i64 %37, %35, !dbg !1877
  %38 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !1877
  br i1 %38, label %panic32, label %checkok39, !dbg !1877

checkok39:                                        ; preds = %if.exit28
  %ptradd40 = getelementptr inbounds i8, ptr %36, i64 %37, !dbg !1877
  %39 = load i8, ptr %ptradd40, align 1, !dbg !1877
  %eq41 = icmp eq i8 %39, 48, !dbg !1876
  br i1 %eq41, label %and.rhs42, label %and.phi44, !dbg !1876

and.rhs42:                                        ; preds = %checkok39
  %40 = load i32, ptr %base2, align 4, !dbg !1878
  %eq43 = icmp eq i32 %40, 10, !dbg !1878
  br label %and.phi44, !dbg !1878

and.phi44:                                        ; preds = %and.rhs42, %checkok39
  %val45 = phi i1 [ false, %checkok39 ], [ %eq43, %and.rhs42 ], !dbg !1878
  br i1 %val45, label %if.then46, label %if.exit75, !dbg !1878

if.then46:                                        ; preds = %and.phi44
  %41 = load i64, ptr %index, align 8, !dbg !1879
  %add47 = add i64 %41, 1, !dbg !1879
  store i64 %add47, ptr %index, align 8, !dbg !1879
  %42 = load i64, ptr %index, align 8, !dbg !1881
  %43 = load i64, ptr %len, align 8, !dbg !1882
  %eq48 = icmp eq i64 %42, %43, !dbg !1881
  br i1 %eq48, label %if.then49, label %if.exit50, !dbg !1881

if.then49:                                        ; preds = %if.then46
  store i8 0, ptr %blockret, align 1, !dbg !1883
  br label %expr_block.exit, !dbg !1883

if.exit50:                                        ; preds = %if.then46
  %ptradd51 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1884
  %44 = load i64, ptr %ptradd51, align 8, !dbg !1884
  %45 = load ptr, ptr %self1, align 8, !dbg !1884
  %46 = load i64, ptr %index, align 8, !dbg !1886
  %ge52 = icmp uge i64 %46, %44, !dbg !1886
  %47 = call i1 @llvm.expect.i1(i1 %ge52, i1 false), !dbg !1886
  br i1 %47, label %panic53, label %checkok60, !dbg !1886

checkok60:                                        ; preds = %if.exit50
  %ptradd61 = getelementptr inbounds i8, ptr %45, i64 %46, !dbg !1886
  %48 = load i8, ptr %ptradd61, align 1
  store i8 %48, ptr %switch62, align 1
  br label %switch.entry63

switch.entry63:                                   ; preds = %checkok60
  %49 = load i8, ptr %switch62, align 1
  switch i8 %49, label %switch.default70 [
    i8 120, label %switch.case64
    i8 88, label %switch.case64
    i8 98, label %switch.case66
    i8 66, label %switch.case66
    i8 111, label %switch.case68
    i8 79, label %switch.case68
  ]

switch.case64:                                    ; preds = %switch.entry63, %switch.entry63
  store i8 16, ptr %base_used, align 1, !dbg !1887
  %50 = load i64, ptr %index, align 8, !dbg !1889
  %add65 = add i64 %50, 1, !dbg !1889
  store i64 %add65, ptr %index, align 8, !dbg !1889
  br label %switch.exit71, !dbg !1889

switch.case66:                                    ; preds = %switch.entry63, %switch.entry63
  store i8 2, ptr %base_used, align 1, !dbg !1890
  %51 = load i64, ptr %index, align 8, !dbg !1892
  %add67 = add i64 %51, 1, !dbg !1892
  store i64 %add67, ptr %index, align 8, !dbg !1892
  br label %switch.exit71, !dbg !1892

switch.case68:                                    ; preds = %switch.entry63, %switch.entry63
  store i8 8, ptr %base_used, align 1, !dbg !1893
  %52 = load i64, ptr %index, align 8, !dbg !1895
  %add69 = add i64 %52, 1, !dbg !1895
  store i64 %add69, ptr %index, align 8, !dbg !1895
  br label %switch.exit71, !dbg !1895

switch.default70:                                 ; preds = %switch.entry63
  br label %switch.exit71, !dbg !1896

switch.exit71:                                    ; preds = %switch.default70, %switch.case68, %switch.case66, %switch.case64
  %53 = load i64, ptr %len, align 8, !dbg !1898
  %54 = load i64, ptr %index, align 8, !dbg !1899
  %eq72 = icmp eq i64 %53, %54, !dbg !1898
  br i1 %eq72, label %if.then73, label %if.exit74, !dbg !1898

if.then73:                                        ; preds = %switch.exit71
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1900
  br label %err_retblock, !dbg !1900

if.exit74:                                        ; preds = %switch.exit71
  br label %if.exit75, !dbg !1900

if.exit75:                                        ; preds = %if.exit74, %and.phi44
    #dbg_declare(ptr %value, !1901, !DIExpression(), !1902)
  store i8 0, ptr %value, align 1, !dbg !1903
  br label %loop.cond76, !dbg !1904

loop.cond76:                                      ; preds = %loop.exit137, %if.exit75
  %55 = load i64, ptr %index, align 8, !dbg !1905
  %56 = load i64, ptr %len, align 8, !dbg !1907
  %neq = icmp ne i64 %55, %56, !dbg !1905
  br i1 %neq, label %loop.body77, label %loop.exit138, !dbg !1905

loop.body77:                                      ; preds = %loop.cond76
    #dbg_declare(ptr %c78, !1908, !DIExpression(), !1910)
  %ptradd79 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1911
  %57 = load i64, ptr %ptradd79, align 8, !dbg !1911
  %58 = load ptr, ptr %self1, align 8, !dbg !1911
  %59 = load i64, ptr %index, align 8, !dbg !1912
  %add80 = add i64 %59, 1, !dbg !1912
  store i64 %add80, ptr %index, align 8, !dbg !1912
  %ge81 = icmp uge i64 %59, %57, !dbg !1912
  %60 = call i1 @llvm.expect.i1(i1 %ge81, i1 false), !dbg !1912
  br i1 %60, label %panic82, label %checkok89, !dbg !1912

checkok89:                                        ; preds = %loop.body77
  %ptradd90 = getelementptr inbounds i8, ptr %58, i64 %59, !dbg !1912
  %61 = load i8, ptr %ptradd90, align 1, !dbg !1912
  store i8 %61, ptr %c78, align 1, !dbg !1912
  store i8 1, ptr %switch91, align 1
  br label %switch.entry92

switch.entry92:                                   ; preds = %checkok89
  %62 = load i8, ptr %switch91, align 1
  %63 = trunc i8 %62 to i1
  %64 = load i8, ptr %base_used, align 1, !dbg !1913
  %sext = sext i8 %64 to i32, !dbg !1913
  %lt93 = icmp slt i32 %sext, 10, !dbg !1913
  br i1 %lt93, label %or.phi, label %or.rhs, !dbg !1913

or.rhs:                                           ; preds = %switch.entry92
  %65 = load i8, ptr %c78, align 1, !dbg !1915
  %lt94 = icmp ult i8 %65, 65, !dbg !1915
  br label %or.phi, !dbg !1915

or.phi:                                           ; preds = %or.rhs, %switch.entry92
  %val95 = phi i1 [ true, %switch.entry92 ], [ %lt94, %or.rhs ], !dbg !1915
  %eq96 = icmp eq i1 %val95, %63, !dbg !1915
  br i1 %eq96, label %switch.case97, label %next_if, !dbg !1915

switch.case97:                                    ; preds = %or.phi
  %66 = load i8, ptr %c78, align 1, !dbg !1916
  %sub = sub i8 %66, 48, !dbg !1916
  store i8 %sub, ptr %c78, align 1, !dbg !1916
  br label %switch.exit113, !dbg !1916

next_if:                                          ; preds = %or.phi
  %67 = load i8, ptr %c78, align 1, !dbg !1918
  %le98 = icmp ule i8 %67, 70, !dbg !1918
  %eq99 = icmp eq i1 %le98, %63, !dbg !1918
  br i1 %eq99, label %switch.case100, label %next_if102, !dbg !1918

switch.case100:                                   ; preds = %next_if
  %68 = load i8, ptr %c78, align 1, !dbg !1919
  %sub101 = sub i8 %68, 55, !dbg !1919
  store i8 %sub101, ptr %c78, align 1, !dbg !1919
  br label %switch.exit113, !dbg !1919

next_if102:                                       ; preds = %next_if
  %69 = load i8, ptr %c78, align 1, !dbg !1921
  %lt103 = icmp ult i8 %69, 97, !dbg !1921
  br i1 %lt103, label %or.phi106, label %or.rhs104, !dbg !1921

or.rhs104:                                        ; preds = %next_if102
  %70 = load i8, ptr %c78, align 1, !dbg !1922
  %gt105 = icmp ugt i8 %70, 102, !dbg !1922
  br label %or.phi106, !dbg !1922

or.phi106:                                        ; preds = %or.rhs104, %next_if102
  %val107 = phi i1 [ true, %next_if102 ], [ %gt105, %or.rhs104 ], !dbg !1922
  %eq108 = icmp eq i1 %val107, %63, !dbg !1922
  br i1 %eq108, label %switch.case109, label %next_if110, !dbg !1922

switch.case109:                                   ; preds = %or.phi106
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1923
  br label %err_retblock, !dbg !1923

next_if110:                                       ; preds = %or.phi106
  br label %switch.default111, !dbg !1923

switch.default111:                                ; preds = %next_if110
  %71 = load i8, ptr %c78, align 1, !dbg !1925
  %sub112 = sub i8 %71, 87, !dbg !1925
  store i8 %sub112, ptr %c78, align 1, !dbg !1925
  br label %switch.exit113, !dbg !1925

switch.exit113:                                   ; preds = %switch.default111, %switch.case100, %switch.case97
  %72 = load i8, ptr %c78, align 1, !dbg !1927
  %73 = load i8, ptr %base_used, align 1, !dbg !1928
  %le114 = icmp sle i8 %73, %72, !dbg !1927
  %check = icmp slt i8 %72, 0, !dbg !1927
  %siui-le = or i1 %check, %le114, !dbg !1927
  br i1 %siui-le, label %if.then115, label %if.exit116, !dbg !1927

if.then115:                                       ; preds = %switch.exit113
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !1929
  br label %err_retblock, !dbg !1929

if.exit116:                                       ; preds = %switch.exit113
  %74 = load i8, ptr %is_negative, align 1, !dbg !1930
  %75 = trunc i8 %74 to i1, !dbg !1930
  br i1 %75, label %if.then117, label %if.exit126, !dbg !1930

if.then117:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value, !1933, !DIExpression(), !1935)
  %76 = load i8, ptr %value, align 1, !dbg !1936
  %sext118 = sext i8 %76 to i32, !dbg !1936
  %77 = load i8, ptr %base_used, align 1, !dbg !1937
  %sext119 = sext i8 %77 to i32, !dbg !1937
  %mul = mul i32 %sext118, %sext119, !dbg !1936
  %78 = load i8, ptr %c78, align 1, !dbg !1938
  %zext120 = zext i8 %78 to i32, !dbg !1938
  %sub121 = sub i32 %mul, %zext120, !dbg !1936
  %trunc122 = trunc i32 %sub121 to i8, !dbg !1936
  store i8 %trunc122, ptr %new_value, align 1, !dbg !1936
  %79 = load i8, ptr %new_value, align 1, !dbg !1939
  %80 = load i8, ptr %value, align 1, !dbg !1940
  %gt123 = icmp sgt i8 %79, %80, !dbg !1939
  br i1 %gt123, label %if.then124, label %if.exit125, !dbg !1939

if.then124:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1941
  br label %err_retblock, !dbg !1941

if.exit125:                                       ; preds = %if.then117
  %81 = load i8, ptr %new_value, align 1, !dbg !1942
  store i8 %81, ptr %value, align 1, !dbg !1942
  br label %loop.exit137, !dbg !1943

if.exit126:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value127, !1944, !DIExpression(), !1945)
  %82 = load i8, ptr %value, align 1, !dbg !1946
  %sext128 = sext i8 %82 to i32, !dbg !1946
  %83 = load i8, ptr %base_used, align 1, !dbg !1947
  %sext129 = sext i8 %83 to i32, !dbg !1947
  %mul130 = mul i32 %sext128, %sext129, !dbg !1946
  %84 = load i8, ptr %c78, align 1, !dbg !1948
  %zext131 = zext i8 %84 to i32, !dbg !1948
  %add132 = add i32 %mul130, %zext131, !dbg !1946
  %trunc133 = trunc i32 %add132 to i8, !dbg !1946
  store i8 %trunc133, ptr %new_value127, align 1, !dbg !1946
  %85 = load i8, ptr %new_value127, align 1, !dbg !1949
  %86 = load i8, ptr %value, align 1, !dbg !1950
  %lt134 = icmp slt i8 %85, %86, !dbg !1949
  br i1 %lt134, label %if.then135, label %if.exit136, !dbg !1949

if.then135:                                       ; preds = %if.exit126
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !1951
  br label %err_retblock, !dbg !1951

if.exit136:                                       ; preds = %if.exit126
  %87 = load i8, ptr %new_value127, align 1, !dbg !1952
  store i8 %87, ptr %value, align 1, !dbg !1952
  br label %loop.exit137, !dbg !1952

loop.exit137:                                     ; preds = %if.exit136, %if.exit125
  br label %loop.cond76, !dbg !1952

loop.exit138:                                     ; preds = %loop.cond76
  %88 = load i8, ptr %value, align 1, !dbg !1953
  store i8 %88, ptr %blockret, align 1, !dbg !1953
  br label %expr_block.exit, !dbg !1953

expr_block.exit:                                  ; preds = %loop.exit138, %if.then49
  %89 = load i8, ptr %blockret, align 1, !dbg !1953
  store i8 %89, ptr %0, align 1, !dbg !1953
  ret i64 0, !dbg !1953

err_retblock:                                     ; preds = %if.then135, %if.then124, %if.then115, %switch.case109, %if.then73, %if.then27, %if.then
  %90 = load i64, ptr %reterr, align 8, !dbg !1953
  ret i64 %90, !dbg !1953

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %91 = insertvalue %any undef, ptr %taddr, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %93 = insertvalue %any undef, ptr %taddr7, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %92, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %94, ptr %ptradd8, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 8, ptr @.func.85, i64 8, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1849
  unreachable, !dbg !1849

panic13:                                          ; preds = %if.exit
  store i64 %24, ptr %taddr14, align 8
  %96 = insertvalue %any undef, ptr %taddr14, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr15, align 8
  %98 = insertvalue %any undef, ptr %taddr15, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %97, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %99, ptr %ptradd17, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.85, i64 8, i32 857, ptr byval(%"any[]") align 8 %indirectarg19) #6, !dbg !1861
  unreachable, !dbg !1861

panic32:                                          ; preds = %if.exit28
  store i64 %35, ptr %taddr33, align 8
  %101 = insertvalue %any undef, ptr %taddr33, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr34, align 8
  %103 = insertvalue %any undef, ptr %taddr34, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %102, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %104, ptr %ptradd36, align 16
  %105 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.85, i64 8, i32 870, ptr byval(%"any[]") align 8 %indirectarg38) #6, !dbg !1877
  unreachable, !dbg !1877

panic53:                                          ; preds = %if.exit50
  store i64 %44, ptr %taddr54, align 8
  %106 = insertvalue %any undef, ptr %taddr54, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %46, ptr %taddr55, align 8
  %108 = insertvalue %any undef, ptr %taddr55, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %107, ptr %varargslots56, align 16
  %ptradd57 = getelementptr inbounds i8, ptr %varargslots56, i64 16
  store %any %109, ptr %ptradd57, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp58" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp58", ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.85, i64 8, i32 874, ptr byval(%"any[]") align 8 %indirectarg59) #6, !dbg !1886
  unreachable, !dbg !1886

panic82:                                          ; preds = %loop.body77
  store i64 %57, ptr %taddr83, align 8
  %111 = insertvalue %any undef, ptr %taddr83, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %59, ptr %taddr84, align 8
  %113 = insertvalue %any undef, ptr %taddr84, 0
  %114 = insertvalue %any %113, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %112, ptr %varargslots85, align 16
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %114, ptr %ptradd86, align 16
  %115 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %115, i64 2, 1
  store %"any[]" %"$$temp87", ptr %indirectarg88, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.85, i64 8, i32 896, ptr byval(%"any[]") align 8 %indirectarg88) #6, !dbg !1912
  unreachable, !dbg !1912
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_uint128(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1954 {
entry:
  %self = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self1 = alloca %"char[]", align 8
  %base2 = alloca i32, align 4
  %blockret = alloca i128, align 16
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i128, align 16
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %switch61 = alloca i8, align 1
  %value = alloca i128, align 16
  %c77 = alloca i8, align 1
  %taddr82 = alloca i64, align 8
  %taddr83 = alloca i64, align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %switch90 = alloca i8, align 1
  %new_value = alloca i128, align 16
  %new_value124 = alloca i128, align 16
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !1959, !DIExpression(), !1960)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1961, !DIExpression(), !1962)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self1, ptr align 8 %self, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base2, align 4
  %5 = load i32, ptr %base2, align 4, !dbg !1963
  %gt = icmp sgt i32 %5, 0, !dbg !1963
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !1963

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base2, align 4, !dbg !1967
  %le = icmp sle i32 %6, 16, !dbg !1967
  br label %and.phi, !dbg !1967

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !1967
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !1967

assert_fail:                                      ; preds = %and.phi
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1968
  call void %7(ptr @.panic_msg.80, i64 63, ptr @.file.16, i64 9, ptr @.func.86, i64 10, i32 928) #6, !dbg !1968
  unreachable, !dbg !1968

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !1969, !DIExpression(), !1970)
  %ptradd3 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1971
  %8 = load i64, ptr %ptradd3, align 8, !dbg !1971
  store i64 %8, ptr %len, align 8, !dbg !1971
    #dbg_declare(ptr %index, !1972, !DIExpression(), !1973)
  store i64 0, ptr %index, align 8, !dbg !1974
    #dbg_declare(ptr %ptr, !1975, !DIExpression(), !1976)
  %9 = load ptr, ptr %self1, align 8, !dbg !1977
  store ptr %9, ptr %ptr, align 8, !dbg !1977
  br label %loop.cond, !dbg !1978

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1979
  %11 = load i64, ptr %len, align 8, !dbg !1981
  %lt = icmp ult i64 %10, %11, !dbg !1979
  br i1 %lt, label %and.rhs4, label %and.phi9, !dbg !1979

and.rhs4:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1982
  %13 = load i64, ptr %index, align 8, !dbg !1983
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1983
  %14 = load i8, ptr %ptradd5, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1
  store i8 %15, ptr %c6, align 1
  %16 = load i8, ptr %c6, align 1, !dbg !1984
  %zext = zext i8 %16 to i64, !dbg !1984
  %ge = icmp uge i64 %zext, 256, !dbg !1984
  %17 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1984
  br i1 %17, label %panic, label %checkok, !dbg !1984

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !1984
  %18 = load i16, ptr %ptroffset, align 2, !dbg !1984
  %lshrl = lshr i16 %18, 10, !dbg !1984
  %19 = and i16 1, %lshrl, !dbg !1984
  %trunc = trunc i16 %19 to i8, !dbg !1984
  %20 = trunc i8 %trunc to i1, !dbg !1984
  br label %and.phi9, !dbg !1984

and.phi9:                                         ; preds = %checkok, %loop.cond
  %val10 = phi i1 [ false, %loop.cond ], [ %20, %checkok ], !dbg !1984
  br i1 %val10, label %loop.body, label %loop.exit, !dbg !1984

loop.body:                                        ; preds = %and.phi9
  %21 = load i64, ptr %index, align 8, !dbg !1988
  %add = add i64 %21, 1, !dbg !1988
  store i64 %add, ptr %index, align 8, !dbg !1988
  br label %loop.cond, !dbg !1988

loop.exit:                                        ; preds = %and.phi9
  %22 = load i64, ptr %len, align 8, !dbg !1989
  %23 = load i64, ptr %index, align 8, !dbg !1990
  %eq = icmp eq i64 %22, %23, !dbg !1989
  br i1 %eq, label %if.then, label %if.exit, !dbg !1989

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !1991
  br label %err_retblock, !dbg !1991

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1992, !DIExpression(), !1993)
  store i8 0, ptr %is_negative, align 1, !dbg !1993
  %ptradd11 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !1994
  %24 = load i64, ptr %ptradd11, align 8, !dbg !1994
  %25 = load ptr, ptr %self1, align 8, !dbg !1994
  %26 = load i64, ptr %index, align 8, !dbg !1996
  %ge12 = icmp uge i64 %26, %24, !dbg !1996
  %27 = call i1 @llvm.expect.i1(i1 %ge12, i1 false), !dbg !1996
  br i1 %27, label %panic13, label %checkok20, !dbg !1996

checkok20:                                        ; preds = %if.exit
  %ptradd21 = getelementptr inbounds i8, ptr %25, i64 %26, !dbg !1996
  %28 = load i8, ptr %ptradd21, align 1
  store i8 %28, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok20
  %29 = load i8, ptr %switch, align 1
  switch i8 %29, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case24
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then22, !dbg !1997

if.then22:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @std.core.string.NEGATIVE_VALUE to i64), ptr %reterr, align 8, !dbg !1999
  br label %err_retblock, !dbg !1999

switch.case24:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !2000
  %add25 = add i64 %30, 1, !dbg !2000
  store i64 %add25, ptr %index, align 8, !dbg !2000
  br label %switch.exit, !dbg !2000

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2002

switch.exit:                                      ; preds = %switch.default, %switch.case24
  %31 = load i64, ptr %len, align 8, !dbg !2004
  %32 = load i64, ptr %index, align 8, !dbg !2005
  %eq26 = icmp eq i64 %31, %32, !dbg !2004
  br i1 %eq26, label %if.then27, label %if.exit28, !dbg !2004

if.then27:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2006
  br label %err_retblock, !dbg !2006

if.exit28:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !2007, !DIExpression(), !2008)
  %33 = load i32, ptr %base2, align 4, !dbg !2009
  %sext = sext i32 %33 to i128, !dbg !2009
  store i128 %sext, ptr %base_used, align 16, !dbg !2009
  %ptradd29 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2010
  %34 = load i64, ptr %ptradd29, align 8, !dbg !2010
  %35 = load ptr, ptr %self1, align 8, !dbg !2010
  %36 = load i64, ptr %index, align 8, !dbg !2011
  %ge30 = icmp uge i64 %36, %34, !dbg !2011
  %37 = call i1 @llvm.expect.i1(i1 %ge30, i1 false), !dbg !2011
  br i1 %37, label %panic31, label %checkok38, !dbg !2011

checkok38:                                        ; preds = %if.exit28
  %ptradd39 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !2011
  %38 = load i8, ptr %ptradd39, align 1, !dbg !2011
  %eq40 = icmp eq i8 %38, 48, !dbg !2010
  br i1 %eq40, label %and.rhs41, label %and.phi43, !dbg !2010

and.rhs41:                                        ; preds = %checkok38
  %39 = load i32, ptr %base2, align 4, !dbg !2012
  %eq42 = icmp eq i32 %39, 10, !dbg !2012
  br label %and.phi43, !dbg !2012

and.phi43:                                        ; preds = %and.rhs41, %checkok38
  %val44 = phi i1 [ false, %checkok38 ], [ %eq42, %and.rhs41 ], !dbg !2012
  br i1 %val44, label %if.then45, label %if.exit74, !dbg !2012

if.then45:                                        ; preds = %and.phi43
  %40 = load i64, ptr %index, align 8, !dbg !2013
  %add46 = add i64 %40, 1, !dbg !2013
  store i64 %add46, ptr %index, align 8, !dbg !2013
  %41 = load i64, ptr %index, align 8, !dbg !2015
  %42 = load i64, ptr %len, align 8, !dbg !2016
  %eq47 = icmp eq i64 %41, %42, !dbg !2015
  br i1 %eq47, label %if.then48, label %if.exit49, !dbg !2015

if.then48:                                        ; preds = %if.then45
  store i128 0, ptr %blockret, align 16, !dbg !2017
  br label %expr_block.exit, !dbg !2017

if.exit49:                                        ; preds = %if.then45
  %ptradd50 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2018
  %43 = load i64, ptr %ptradd50, align 8, !dbg !2018
  %44 = load ptr, ptr %self1, align 8, !dbg !2018
  %45 = load i64, ptr %index, align 8, !dbg !2020
  %ge51 = icmp uge i64 %45, %43, !dbg !2020
  %46 = call i1 @llvm.expect.i1(i1 %ge51, i1 false), !dbg !2020
  br i1 %46, label %panic52, label %checkok59, !dbg !2020

checkok59:                                        ; preds = %if.exit49
  %ptradd60 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !2020
  %47 = load i8, ptr %ptradd60, align 1
  store i8 %47, ptr %switch61, align 1
  br label %switch.entry62

switch.entry62:                                   ; preds = %checkok59
  %48 = load i8, ptr %switch61, align 1
  switch i8 %48, label %switch.default69 [
    i8 120, label %switch.case63
    i8 88, label %switch.case63
    i8 98, label %switch.case65
    i8 66, label %switch.case65
    i8 111, label %switch.case67
    i8 79, label %switch.case67
  ]

switch.case63:                                    ; preds = %switch.entry62, %switch.entry62
  store i128 16, ptr %base_used, align 16, !dbg !2021
  %49 = load i64, ptr %index, align 8, !dbg !2023
  %add64 = add i64 %49, 1, !dbg !2023
  store i64 %add64, ptr %index, align 8, !dbg !2023
  br label %switch.exit70, !dbg !2023

switch.case65:                                    ; preds = %switch.entry62, %switch.entry62
  store i128 2, ptr %base_used, align 16, !dbg !2024
  %50 = load i64, ptr %index, align 8, !dbg !2026
  %add66 = add i64 %50, 1, !dbg !2026
  store i64 %add66, ptr %index, align 8, !dbg !2026
  br label %switch.exit70, !dbg !2026

switch.case67:                                    ; preds = %switch.entry62, %switch.entry62
  store i128 8, ptr %base_used, align 16, !dbg !2027
  %51 = load i64, ptr %index, align 8, !dbg !2029
  %add68 = add i64 %51, 1, !dbg !2029
  store i64 %add68, ptr %index, align 8, !dbg !2029
  br label %switch.exit70, !dbg !2029

switch.default69:                                 ; preds = %switch.entry62
  br label %switch.exit70, !dbg !2030

switch.exit70:                                    ; preds = %switch.default69, %switch.case67, %switch.case65, %switch.case63
  %52 = load i64, ptr %len, align 8, !dbg !2032
  %53 = load i64, ptr %index, align 8, !dbg !2033
  %eq71 = icmp eq i64 %52, %53, !dbg !2032
  br i1 %eq71, label %if.then72, label %if.exit73, !dbg !2032

if.then72:                                        ; preds = %switch.exit70
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2034
  br label %err_retblock, !dbg !2034

if.exit73:                                        ; preds = %switch.exit70
  br label %if.exit74, !dbg !2034

if.exit74:                                        ; preds = %if.exit73, %and.phi43
    #dbg_declare(ptr %value, !2035, !DIExpression(), !2036)
  store i128 0, ptr %value, align 16, !dbg !2037
  br label %loop.cond75, !dbg !2038

loop.cond75:                                      ; preds = %loop.exit131, %if.exit74
  %54 = load i64, ptr %index, align 8, !dbg !2039
  %55 = load i64, ptr %len, align 8, !dbg !2041
  %neq = icmp ne i64 %54, %55, !dbg !2039
  br i1 %neq, label %loop.body76, label %loop.exit132, !dbg !2039

loop.body76:                                      ; preds = %loop.cond75
    #dbg_declare(ptr %c77, !2042, !DIExpression(), !2044)
  %ptradd78 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2045
  %56 = load i64, ptr %ptradd78, align 8, !dbg !2045
  %57 = load ptr, ptr %self1, align 8, !dbg !2045
  %58 = load i64, ptr %index, align 8, !dbg !2046
  %add79 = add i64 %58, 1, !dbg !2046
  store i64 %add79, ptr %index, align 8, !dbg !2046
  %ge80 = icmp uge i64 %58, %56, !dbg !2046
  %59 = call i1 @llvm.expect.i1(i1 %ge80, i1 false), !dbg !2046
  br i1 %59, label %panic81, label %checkok88, !dbg !2046

checkok88:                                        ; preds = %loop.body76
  %ptradd89 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !2046
  %60 = load i8, ptr %ptradd89, align 1, !dbg !2046
  store i8 %60, ptr %c77, align 1, !dbg !2046
  store i8 1, ptr %switch90, align 1
  br label %switch.entry91

switch.entry91:                                   ; preds = %checkok88
  %61 = load i8, ptr %switch90, align 1
  %62 = trunc i8 %61 to i1
  %63 = load i128, ptr %base_used, align 16, !dbg !2047
  %gt92 = icmp sgt i128 10, %63, !dbg !2047
  %check = icmp sge i128 %63, 0, !dbg !2047
  %siui-gt = and i1 %check, %gt92, !dbg !2047
  br i1 %siui-gt, label %or.phi, label %or.rhs, !dbg !2047

or.rhs:                                           ; preds = %switch.entry91
  %64 = load i8, ptr %c77, align 1, !dbg !2049
  %lt93 = icmp ult i8 %64, 65, !dbg !2049
  br label %or.phi, !dbg !2049

or.phi:                                           ; preds = %or.rhs, %switch.entry91
  %val94 = phi i1 [ true, %switch.entry91 ], [ %lt93, %or.rhs ], !dbg !2049
  %eq95 = icmp eq i1 %val94, %62, !dbg !2049
  br i1 %eq95, label %switch.case96, label %next_if, !dbg !2049

switch.case96:                                    ; preds = %or.phi
  %65 = load i8, ptr %c77, align 1, !dbg !2050
  %sub = sub i8 %65, 48, !dbg !2050
  store i8 %sub, ptr %c77, align 1, !dbg !2050
  br label %switch.exit112, !dbg !2050

next_if:                                          ; preds = %or.phi
  %66 = load i8, ptr %c77, align 1, !dbg !2052
  %le97 = icmp ule i8 %66, 70, !dbg !2052
  %eq98 = icmp eq i1 %le97, %62, !dbg !2052
  br i1 %eq98, label %switch.case99, label %next_if101, !dbg !2052

switch.case99:                                    ; preds = %next_if
  %67 = load i8, ptr %c77, align 1, !dbg !2053
  %sub100 = sub i8 %67, 55, !dbg !2053
  store i8 %sub100, ptr %c77, align 1, !dbg !2053
  br label %switch.exit112, !dbg !2053

next_if101:                                       ; preds = %next_if
  %68 = load i8, ptr %c77, align 1, !dbg !2055
  %lt102 = icmp ult i8 %68, 97, !dbg !2055
  br i1 %lt102, label %or.phi105, label %or.rhs103, !dbg !2055

or.rhs103:                                        ; preds = %next_if101
  %69 = load i8, ptr %c77, align 1, !dbg !2056
  %gt104 = icmp ugt i8 %69, 102, !dbg !2056
  br label %or.phi105, !dbg !2056

or.phi105:                                        ; preds = %or.rhs103, %next_if101
  %val106 = phi i1 [ true, %next_if101 ], [ %gt104, %or.rhs103 ], !dbg !2056
  %eq107 = icmp eq i1 %val106, %62, !dbg !2056
  br i1 %eq107, label %switch.case108, label %next_if109, !dbg !2056

switch.case108:                                   ; preds = %or.phi105
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2057
  br label %err_retblock, !dbg !2057

next_if109:                                       ; preds = %or.phi105
  br label %switch.default110, !dbg !2057

switch.default110:                                ; preds = %next_if109
  %70 = load i8, ptr %c77, align 1, !dbg !2059
  %sub111 = sub i8 %70, 87, !dbg !2059
  store i8 %sub111, ptr %c77, align 1, !dbg !2059
  br label %switch.exit112, !dbg !2059

switch.exit112:                                   ; preds = %switch.default110, %switch.case99, %switch.case96
  %71 = load i8, ptr %c77, align 1, !dbg !2061
  %zext113 = zext i8 %71 to i128, !dbg !2061
  %72 = load i128, ptr %base_used, align 16, !dbg !2062
  %ge114 = icmp uge i128 %zext113, %72, !dbg !2061
  br i1 %ge114, label %if.then115, label %if.exit116, !dbg !2061

if.then115:                                       ; preds = %switch.exit112
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2063
  br label %err_retblock, !dbg !2063

if.exit116:                                       ; preds = %switch.exit112
  %73 = load i8, ptr %is_negative, align 1, !dbg !2064
  %74 = trunc i8 %73 to i1, !dbg !2064
  br i1 %74, label %if.then117, label %if.exit123, !dbg !2064

if.then117:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value, !2067, !DIExpression(), !2069)
  %75 = load i128, ptr %value, align 16, !dbg !2070
  %76 = load i128, ptr %base_used, align 16, !dbg !2071
  %mul = mul i128 %75, %76, !dbg !2070
  %77 = load i8, ptr %c77, align 1, !dbg !2072
  %zext118 = zext i8 %77 to i128, !dbg !2072
  %sub119 = sub i128 %mul, %zext118, !dbg !2070
  store i128 %sub119, ptr %new_value, align 16, !dbg !2070
  %78 = load i128, ptr %new_value, align 16, !dbg !2073
  %79 = load i128, ptr %value, align 16, !dbg !2074
  %gt120 = icmp ugt i128 %78, %79, !dbg !2073
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !2073

if.then121:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !2075
  br label %err_retblock, !dbg !2075

if.exit122:                                       ; preds = %if.then117
  %80 = load i128, ptr %new_value, align 16, !dbg !2076
  store i128 %80, ptr %value, align 16, !dbg !2076
  br label %loop.exit131, !dbg !2077

if.exit123:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value124, !2078, !DIExpression(), !2079)
  %81 = load i128, ptr %value, align 16, !dbg !2080
  %82 = load i128, ptr %base_used, align 16, !dbg !2081
  %mul125 = mul i128 %81, %82, !dbg !2080
  %83 = load i8, ptr %c77, align 1, !dbg !2082
  %zext126 = zext i8 %83 to i128, !dbg !2082
  %add127 = add i128 %mul125, %zext126, !dbg !2080
  store i128 %add127, ptr %new_value124, align 16, !dbg !2080
  %84 = load i128, ptr %new_value124, align 16, !dbg !2083
  %85 = load i128, ptr %value, align 16, !dbg !2084
  %lt128 = icmp ult i128 %84, %85, !dbg !2083
  br i1 %lt128, label %if.then129, label %if.exit130, !dbg !2083

if.then129:                                       ; preds = %if.exit123
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !2085
  br label %err_retblock, !dbg !2085

if.exit130:                                       ; preds = %if.exit123
  %86 = load i128, ptr %new_value124, align 16, !dbg !2086
  store i128 %86, ptr %value, align 16, !dbg !2086
  br label %loop.exit131, !dbg !2086

loop.exit131:                                     ; preds = %if.exit130, %if.exit122
  br label %loop.cond75, !dbg !2086

loop.exit132:                                     ; preds = %loop.cond75
  %87 = load i128, ptr %value, align 16, !dbg !2087
  store i128 %87, ptr %blockret, align 16, !dbg !2087
  br label %expr_block.exit, !dbg !2087

expr_block.exit:                                  ; preds = %loop.exit132, %if.then48
  %88 = load i128, ptr %blockret, align 16, !dbg !2087
  store i128 %88, ptr %0, align 16, !dbg !2087
  ret i64 0, !dbg !2087

err_retblock:                                     ; preds = %if.then129, %if.then121, %if.then115, %switch.case108, %if.then72, %if.then27, %if.then22, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !2087
  ret i64 %89, !dbg !2087

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %92 = insertvalue %any undef, ptr %taddr7, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd8, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 8, ptr @.func.86, i64 10, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !1984
  unreachable, !dbg !1984

panic13:                                          ; preds = %if.exit
  store i64 %24, ptr %taddr14, align 8
  %95 = insertvalue %any undef, ptr %taddr14, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr15, align 8
  %97 = insertvalue %any undef, ptr %taddr15, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %98, ptr %ptradd17, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.86, i64 10, i32 857, ptr byval(%"any[]") align 8 %indirectarg19) #6, !dbg !1996
  unreachable, !dbg !1996

panic31:                                          ; preds = %if.exit28
  store i64 %34, ptr %taddr32, align 8
  %100 = insertvalue %any undef, ptr %taddr32, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr33, align 8
  %102 = insertvalue %any undef, ptr %taddr33, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %103, ptr %ptradd35, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.86, i64 10, i32 870, ptr byval(%"any[]") align 8 %indirectarg37) #6, !dbg !2011
  unreachable, !dbg !2011

panic52:                                          ; preds = %if.exit49
  store i64 %43, ptr %taddr53, align 8
  %105 = insertvalue %any undef, ptr %taddr53, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr54, align 8
  %107 = insertvalue %any undef, ptr %taddr54, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %108, ptr %ptradd56, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.86, i64 10, i32 874, ptr byval(%"any[]") align 8 %indirectarg58) #6, !dbg !2020
  unreachable, !dbg !2020

panic81:                                          ; preds = %loop.body76
  store i64 %56, ptr %taddr82, align 8
  %110 = insertvalue %any undef, ptr %taddr82, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr83, align 8
  %112 = insertvalue %any undef, ptr %taddr83, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %111, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %113, ptr %ptradd85, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.86, i64 10, i32 896, ptr byval(%"any[]") align 8 %indirectarg87) #6, !dbg !2046
  unreachable, !dbg !2046
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_ulong(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !2088 {
entry:
  %self = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self1 = alloca %"char[]", align 8
  %base2 = alloca i32, align 4
  %blockret = alloca i64, align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %switch61 = alloca i8, align 1
  %value = alloca i64, align 8
  %c77 = alloca i8, align 1
  %taddr82 = alloca i64, align 8
  %taddr83 = alloca i64, align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %switch90 = alloca i8, align 1
  %new_value = alloca i64, align 8
  %new_value124 = alloca i64, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !2092, !DIExpression(), !2093)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !2094, !DIExpression(), !2095)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self1, ptr align 8 %self, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base2, align 4
  %5 = load i32, ptr %base2, align 4, !dbg !2096
  %gt = icmp sgt i32 %5, 0, !dbg !2096
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !2096

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base2, align 4, !dbg !2100
  %le = icmp sle i32 %6, 16, !dbg !2100
  br label %and.phi, !dbg !2100

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !2100
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !2100

assert_fail:                                      ; preds = %and.phi
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2101
  call void %7(ptr @.panic_msg.80, i64 63, ptr @.file.16, i64 9, ptr @.func.87, i64 8, i32 929) #6, !dbg !2101
  unreachable, !dbg !2101

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !2102, !DIExpression(), !2103)
  %ptradd3 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2104
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2104
  store i64 %8, ptr %len, align 8, !dbg !2104
    #dbg_declare(ptr %index, !2105, !DIExpression(), !2106)
  store i64 0, ptr %index, align 8, !dbg !2107
    #dbg_declare(ptr %ptr, !2108, !DIExpression(), !2109)
  %9 = load ptr, ptr %self1, align 8, !dbg !2110
  store ptr %9, ptr %ptr, align 8, !dbg !2110
  br label %loop.cond, !dbg !2111

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !2112
  %11 = load i64, ptr %len, align 8, !dbg !2114
  %lt = icmp ult i64 %10, %11, !dbg !2112
  br i1 %lt, label %and.rhs4, label %and.phi9, !dbg !2112

and.rhs4:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !2115
  %13 = load i64, ptr %index, align 8, !dbg !2116
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !2116
  %14 = load i8, ptr %ptradd5, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1
  store i8 %15, ptr %c6, align 1
  %16 = load i8, ptr %c6, align 1, !dbg !2117
  %zext = zext i8 %16 to i64, !dbg !2117
  %ge = icmp uge i64 %zext, 256, !dbg !2117
  %17 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2117
  br i1 %17, label %panic, label %checkok, !dbg !2117

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !2117
  %18 = load i16, ptr %ptroffset, align 2, !dbg !2117
  %lshrl = lshr i16 %18, 10, !dbg !2117
  %19 = and i16 1, %lshrl, !dbg !2117
  %trunc = trunc i16 %19 to i8, !dbg !2117
  %20 = trunc i8 %trunc to i1, !dbg !2117
  br label %and.phi9, !dbg !2117

and.phi9:                                         ; preds = %checkok, %loop.cond
  %val10 = phi i1 [ false, %loop.cond ], [ %20, %checkok ], !dbg !2117
  br i1 %val10, label %loop.body, label %loop.exit, !dbg !2117

loop.body:                                        ; preds = %and.phi9
  %21 = load i64, ptr %index, align 8, !dbg !2121
  %add = add i64 %21, 1, !dbg !2121
  store i64 %add, ptr %index, align 8, !dbg !2121
  br label %loop.cond, !dbg !2121

loop.exit:                                        ; preds = %and.phi9
  %22 = load i64, ptr %len, align 8, !dbg !2122
  %23 = load i64, ptr %index, align 8, !dbg !2123
  %eq = icmp eq i64 %22, %23, !dbg !2122
  br i1 %eq, label %if.then, label %if.exit, !dbg !2122

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !2124
  br label %err_retblock, !dbg !2124

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !2125, !DIExpression(), !2126)
  store i8 0, ptr %is_negative, align 1, !dbg !2126
  %ptradd11 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2127
  %24 = load i64, ptr %ptradd11, align 8, !dbg !2127
  %25 = load ptr, ptr %self1, align 8, !dbg !2127
  %26 = load i64, ptr %index, align 8, !dbg !2129
  %ge12 = icmp uge i64 %26, %24, !dbg !2129
  %27 = call i1 @llvm.expect.i1(i1 %ge12, i1 false), !dbg !2129
  br i1 %27, label %panic13, label %checkok20, !dbg !2129

checkok20:                                        ; preds = %if.exit
  %ptradd21 = getelementptr inbounds i8, ptr %25, i64 %26, !dbg !2129
  %28 = load i8, ptr %ptradd21, align 1
  store i8 %28, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok20
  %29 = load i8, ptr %switch, align 1
  switch i8 %29, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case24
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then22, !dbg !2130

if.then22:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @std.core.string.NEGATIVE_VALUE to i64), ptr %reterr, align 8, !dbg !2132
  br label %err_retblock, !dbg !2132

switch.case24:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !2133
  %add25 = add i64 %30, 1, !dbg !2133
  store i64 %add25, ptr %index, align 8, !dbg !2133
  br label %switch.exit, !dbg !2133

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2135

switch.exit:                                      ; preds = %switch.default, %switch.case24
  %31 = load i64, ptr %len, align 8, !dbg !2137
  %32 = load i64, ptr %index, align 8, !dbg !2138
  %eq26 = icmp eq i64 %31, %32, !dbg !2137
  br i1 %eq26, label %if.then27, label %if.exit28, !dbg !2137

if.then27:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2139
  br label %err_retblock, !dbg !2139

if.exit28:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !2140, !DIExpression(), !2141)
  %33 = load i32, ptr %base2, align 4, !dbg !2142
  %sext = sext i32 %33 to i64, !dbg !2142
  store i64 %sext, ptr %base_used, align 8, !dbg !2142
  %ptradd29 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2143
  %34 = load i64, ptr %ptradd29, align 8, !dbg !2143
  %35 = load ptr, ptr %self1, align 8, !dbg !2143
  %36 = load i64, ptr %index, align 8, !dbg !2144
  %ge30 = icmp uge i64 %36, %34, !dbg !2144
  %37 = call i1 @llvm.expect.i1(i1 %ge30, i1 false), !dbg !2144
  br i1 %37, label %panic31, label %checkok38, !dbg !2144

checkok38:                                        ; preds = %if.exit28
  %ptradd39 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !2144
  %38 = load i8, ptr %ptradd39, align 1, !dbg !2144
  %eq40 = icmp eq i8 %38, 48, !dbg !2143
  br i1 %eq40, label %and.rhs41, label %and.phi43, !dbg !2143

and.rhs41:                                        ; preds = %checkok38
  %39 = load i32, ptr %base2, align 4, !dbg !2145
  %eq42 = icmp eq i32 %39, 10, !dbg !2145
  br label %and.phi43, !dbg !2145

and.phi43:                                        ; preds = %and.rhs41, %checkok38
  %val44 = phi i1 [ false, %checkok38 ], [ %eq42, %and.rhs41 ], !dbg !2145
  br i1 %val44, label %if.then45, label %if.exit74, !dbg !2145

if.then45:                                        ; preds = %and.phi43
  %40 = load i64, ptr %index, align 8, !dbg !2146
  %add46 = add i64 %40, 1, !dbg !2146
  store i64 %add46, ptr %index, align 8, !dbg !2146
  %41 = load i64, ptr %index, align 8, !dbg !2148
  %42 = load i64, ptr %len, align 8, !dbg !2149
  %eq47 = icmp eq i64 %41, %42, !dbg !2148
  br i1 %eq47, label %if.then48, label %if.exit49, !dbg !2148

if.then48:                                        ; preds = %if.then45
  store i64 0, ptr %blockret, align 8, !dbg !2150
  br label %expr_block.exit, !dbg !2150

if.exit49:                                        ; preds = %if.then45
  %ptradd50 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2151
  %43 = load i64, ptr %ptradd50, align 8, !dbg !2151
  %44 = load ptr, ptr %self1, align 8, !dbg !2151
  %45 = load i64, ptr %index, align 8, !dbg !2153
  %ge51 = icmp uge i64 %45, %43, !dbg !2153
  %46 = call i1 @llvm.expect.i1(i1 %ge51, i1 false), !dbg !2153
  br i1 %46, label %panic52, label %checkok59, !dbg !2153

checkok59:                                        ; preds = %if.exit49
  %ptradd60 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !2153
  %47 = load i8, ptr %ptradd60, align 1
  store i8 %47, ptr %switch61, align 1
  br label %switch.entry62

switch.entry62:                                   ; preds = %checkok59
  %48 = load i8, ptr %switch61, align 1
  switch i8 %48, label %switch.default69 [
    i8 120, label %switch.case63
    i8 88, label %switch.case63
    i8 98, label %switch.case65
    i8 66, label %switch.case65
    i8 111, label %switch.case67
    i8 79, label %switch.case67
  ]

switch.case63:                                    ; preds = %switch.entry62, %switch.entry62
  store i64 16, ptr %base_used, align 8, !dbg !2154
  %49 = load i64, ptr %index, align 8, !dbg !2156
  %add64 = add i64 %49, 1, !dbg !2156
  store i64 %add64, ptr %index, align 8, !dbg !2156
  br label %switch.exit70, !dbg !2156

switch.case65:                                    ; preds = %switch.entry62, %switch.entry62
  store i64 2, ptr %base_used, align 8, !dbg !2157
  %50 = load i64, ptr %index, align 8, !dbg !2159
  %add66 = add i64 %50, 1, !dbg !2159
  store i64 %add66, ptr %index, align 8, !dbg !2159
  br label %switch.exit70, !dbg !2159

switch.case67:                                    ; preds = %switch.entry62, %switch.entry62
  store i64 8, ptr %base_used, align 8, !dbg !2160
  %51 = load i64, ptr %index, align 8, !dbg !2162
  %add68 = add i64 %51, 1, !dbg !2162
  store i64 %add68, ptr %index, align 8, !dbg !2162
  br label %switch.exit70, !dbg !2162

switch.default69:                                 ; preds = %switch.entry62
  br label %switch.exit70, !dbg !2163

switch.exit70:                                    ; preds = %switch.default69, %switch.case67, %switch.case65, %switch.case63
  %52 = load i64, ptr %len, align 8, !dbg !2165
  %53 = load i64, ptr %index, align 8, !dbg !2166
  %eq71 = icmp eq i64 %52, %53, !dbg !2165
  br i1 %eq71, label %if.then72, label %if.exit73, !dbg !2165

if.then72:                                        ; preds = %switch.exit70
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2167
  br label %err_retblock, !dbg !2167

if.exit73:                                        ; preds = %switch.exit70
  br label %if.exit74, !dbg !2167

if.exit74:                                        ; preds = %if.exit73, %and.phi43
    #dbg_declare(ptr %value, !2168, !DIExpression(), !2169)
  store i64 0, ptr %value, align 8, !dbg !2170
  br label %loop.cond75, !dbg !2171

loop.cond75:                                      ; preds = %loop.exit131, %if.exit74
  %54 = load i64, ptr %index, align 8, !dbg !2172
  %55 = load i64, ptr %len, align 8, !dbg !2174
  %neq = icmp ne i64 %54, %55, !dbg !2172
  br i1 %neq, label %loop.body76, label %loop.exit132, !dbg !2172

loop.body76:                                      ; preds = %loop.cond75
    #dbg_declare(ptr %c77, !2175, !DIExpression(), !2177)
  %ptradd78 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2178
  %56 = load i64, ptr %ptradd78, align 8, !dbg !2178
  %57 = load ptr, ptr %self1, align 8, !dbg !2178
  %58 = load i64, ptr %index, align 8, !dbg !2179
  %add79 = add i64 %58, 1, !dbg !2179
  store i64 %add79, ptr %index, align 8, !dbg !2179
  %ge80 = icmp uge i64 %58, %56, !dbg !2179
  %59 = call i1 @llvm.expect.i1(i1 %ge80, i1 false), !dbg !2179
  br i1 %59, label %panic81, label %checkok88, !dbg !2179

checkok88:                                        ; preds = %loop.body76
  %ptradd89 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !2179
  %60 = load i8, ptr %ptradd89, align 1, !dbg !2179
  store i8 %60, ptr %c77, align 1, !dbg !2179
  store i8 1, ptr %switch90, align 1
  br label %switch.entry91

switch.entry91:                                   ; preds = %checkok88
  %61 = load i8, ptr %switch90, align 1
  %62 = trunc i8 %61 to i1
  %63 = load i64, ptr %base_used, align 8, !dbg !2180
  %gt92 = icmp ugt i64 10, %63, !dbg !2180
  br i1 %gt92, label %or.phi, label %or.rhs, !dbg !2180

or.rhs:                                           ; preds = %switch.entry91
  %64 = load i8, ptr %c77, align 1, !dbg !2182
  %lt93 = icmp ult i8 %64, 65, !dbg !2182
  br label %or.phi, !dbg !2182

or.phi:                                           ; preds = %or.rhs, %switch.entry91
  %val94 = phi i1 [ true, %switch.entry91 ], [ %lt93, %or.rhs ], !dbg !2182
  %eq95 = icmp eq i1 %val94, %62, !dbg !2182
  br i1 %eq95, label %switch.case96, label %next_if, !dbg !2182

switch.case96:                                    ; preds = %or.phi
  %65 = load i8, ptr %c77, align 1, !dbg !2183
  %sub = sub i8 %65, 48, !dbg !2183
  store i8 %sub, ptr %c77, align 1, !dbg !2183
  br label %switch.exit112, !dbg !2183

next_if:                                          ; preds = %or.phi
  %66 = load i8, ptr %c77, align 1, !dbg !2185
  %le97 = icmp ule i8 %66, 70, !dbg !2185
  %eq98 = icmp eq i1 %le97, %62, !dbg !2185
  br i1 %eq98, label %switch.case99, label %next_if101, !dbg !2185

switch.case99:                                    ; preds = %next_if
  %67 = load i8, ptr %c77, align 1, !dbg !2186
  %sub100 = sub i8 %67, 55, !dbg !2186
  store i8 %sub100, ptr %c77, align 1, !dbg !2186
  br label %switch.exit112, !dbg !2186

next_if101:                                       ; preds = %next_if
  %68 = load i8, ptr %c77, align 1, !dbg !2188
  %lt102 = icmp ult i8 %68, 97, !dbg !2188
  br i1 %lt102, label %or.phi105, label %or.rhs103, !dbg !2188

or.rhs103:                                        ; preds = %next_if101
  %69 = load i8, ptr %c77, align 1, !dbg !2189
  %gt104 = icmp ugt i8 %69, 102, !dbg !2189
  br label %or.phi105, !dbg !2189

or.phi105:                                        ; preds = %or.rhs103, %next_if101
  %val106 = phi i1 [ true, %next_if101 ], [ %gt104, %or.rhs103 ], !dbg !2189
  %eq107 = icmp eq i1 %val106, %62, !dbg !2189
  br i1 %eq107, label %switch.case108, label %next_if109, !dbg !2189

switch.case108:                                   ; preds = %or.phi105
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2190
  br label %err_retblock, !dbg !2190

next_if109:                                       ; preds = %or.phi105
  br label %switch.default110, !dbg !2190

switch.default110:                                ; preds = %next_if109
  %70 = load i8, ptr %c77, align 1, !dbg !2192
  %sub111 = sub i8 %70, 87, !dbg !2192
  store i8 %sub111, ptr %c77, align 1, !dbg !2192
  br label %switch.exit112, !dbg !2192

switch.exit112:                                   ; preds = %switch.default110, %switch.case99, %switch.case96
  %71 = load i8, ptr %c77, align 1, !dbg !2194
  %zext113 = zext i8 %71 to i64, !dbg !2194
  %72 = load i64, ptr %base_used, align 8, !dbg !2195
  %ge114 = icmp uge i64 %zext113, %72, !dbg !2194
  br i1 %ge114, label %if.then115, label %if.exit116, !dbg !2194

if.then115:                                       ; preds = %switch.exit112
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2196
  br label %err_retblock, !dbg !2196

if.exit116:                                       ; preds = %switch.exit112
  %73 = load i8, ptr %is_negative, align 1, !dbg !2197
  %74 = trunc i8 %73 to i1, !dbg !2197
  br i1 %74, label %if.then117, label %if.exit123, !dbg !2197

if.then117:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value, !2200, !DIExpression(), !2202)
  %75 = load i64, ptr %value, align 8, !dbg !2203
  %76 = load i64, ptr %base_used, align 8, !dbg !2204
  %mul = mul i64 %75, %76, !dbg !2203
  %77 = load i8, ptr %c77, align 1, !dbg !2205
  %zext118 = zext i8 %77 to i64, !dbg !2205
  %sub119 = sub i64 %mul, %zext118, !dbg !2203
  store i64 %sub119, ptr %new_value, align 8, !dbg !2203
  %78 = load i64, ptr %new_value, align 8, !dbg !2206
  %79 = load i64, ptr %value, align 8, !dbg !2207
  %gt120 = icmp ugt i64 %78, %79, !dbg !2206
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !2206

if.then121:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !2208
  br label %err_retblock, !dbg !2208

if.exit122:                                       ; preds = %if.then117
  %80 = load i64, ptr %new_value, align 8, !dbg !2209
  store i64 %80, ptr %value, align 8, !dbg !2209
  br label %loop.exit131, !dbg !2210

if.exit123:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value124, !2211, !DIExpression(), !2212)
  %81 = load i64, ptr %value, align 8, !dbg !2213
  %82 = load i64, ptr %base_used, align 8, !dbg !2214
  %mul125 = mul i64 %81, %82, !dbg !2213
  %83 = load i8, ptr %c77, align 1, !dbg !2215
  %zext126 = zext i8 %83 to i64, !dbg !2215
  %add127 = add i64 %mul125, %zext126, !dbg !2213
  store i64 %add127, ptr %new_value124, align 8, !dbg !2213
  %84 = load i64, ptr %new_value124, align 8, !dbg !2216
  %85 = load i64, ptr %value, align 8, !dbg !2217
  %lt128 = icmp ult i64 %84, %85, !dbg !2216
  br i1 %lt128, label %if.then129, label %if.exit130, !dbg !2216

if.then129:                                       ; preds = %if.exit123
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !2218
  br label %err_retblock, !dbg !2218

if.exit130:                                       ; preds = %if.exit123
  %86 = load i64, ptr %new_value124, align 8, !dbg !2219
  store i64 %86, ptr %value, align 8, !dbg !2219
  br label %loop.exit131, !dbg !2219

loop.exit131:                                     ; preds = %if.exit130, %if.exit122
  br label %loop.cond75, !dbg !2219

loop.exit132:                                     ; preds = %loop.cond75
  %87 = load i64, ptr %value, align 8, !dbg !2220
  store i64 %87, ptr %blockret, align 8, !dbg !2220
  br label %expr_block.exit, !dbg !2220

expr_block.exit:                                  ; preds = %loop.exit132, %if.then48
  %88 = load i64, ptr %blockret, align 8, !dbg !2220
  store i64 %88, ptr %0, align 8, !dbg !2220
  ret i64 0, !dbg !2220

err_retblock:                                     ; preds = %if.then129, %if.then121, %if.then115, %switch.case108, %if.then72, %if.then27, %if.then22, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !2220
  ret i64 %89, !dbg !2220

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %92 = insertvalue %any undef, ptr %taddr7, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd8, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 8, ptr @.func.87, i64 8, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !2117
  unreachable, !dbg !2117

panic13:                                          ; preds = %if.exit
  store i64 %24, ptr %taddr14, align 8
  %95 = insertvalue %any undef, ptr %taddr14, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr15, align 8
  %97 = insertvalue %any undef, ptr %taddr15, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %98, ptr %ptradd17, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.87, i64 8, i32 857, ptr byval(%"any[]") align 8 %indirectarg19) #6, !dbg !2129
  unreachable, !dbg !2129

panic31:                                          ; preds = %if.exit28
  store i64 %34, ptr %taddr32, align 8
  %100 = insertvalue %any undef, ptr %taddr32, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr33, align 8
  %102 = insertvalue %any undef, ptr %taddr33, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %103, ptr %ptradd35, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.87, i64 8, i32 870, ptr byval(%"any[]") align 8 %indirectarg37) #6, !dbg !2144
  unreachable, !dbg !2144

panic52:                                          ; preds = %if.exit49
  store i64 %43, ptr %taddr53, align 8
  %105 = insertvalue %any undef, ptr %taddr53, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr54, align 8
  %107 = insertvalue %any undef, ptr %taddr54, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %108, ptr %ptradd56, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.87, i64 8, i32 874, ptr byval(%"any[]") align 8 %indirectarg58) #6, !dbg !2153
  unreachable, !dbg !2153

panic81:                                          ; preds = %loop.body76
  store i64 %56, ptr %taddr82, align 8
  %110 = insertvalue %any undef, ptr %taddr82, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr83, align 8
  %112 = insertvalue %any undef, ptr %taddr83, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %111, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %113, ptr %ptradd85, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.87, i64 8, i32 896, ptr byval(%"any[]") align 8 %indirectarg87) #6, !dbg !2179
  unreachable, !dbg !2179
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_uint(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !2221 {
entry:
  %self = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self1 = alloca %"char[]", align 8
  %base2 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i32, align 4
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %switch61 = alloca i8, align 1
  %value = alloca i32, align 4
  %c77 = alloca i8, align 1
  %taddr82 = alloca i64, align 8
  %taddr83 = alloca i64, align 8
  %varargslots84 = alloca [2 x %any], align 16
  %indirectarg87 = alloca %"any[]", align 8
  %switch90 = alloca i8, align 1
  %new_value = alloca i32, align 4
  %new_value124 = alloca i32, align 4
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !2225, !DIExpression(), !2226)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !2227, !DIExpression(), !2228)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self1, ptr align 8 %self, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base2, align 4
  %5 = load i32, ptr %base2, align 4, !dbg !2229
  %gt = icmp sgt i32 %5, 0, !dbg !2229
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !2229

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base2, align 4, !dbg !2233
  %le = icmp sle i32 %6, 16, !dbg !2233
  br label %and.phi, !dbg !2233

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !2233
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !2233

assert_fail:                                      ; preds = %and.phi
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2234
  call void %7(ptr @.panic_msg.80, i64 63, ptr @.file.16, i64 9, ptr @.func.88, i64 7, i32 930) #6, !dbg !2234
  unreachable, !dbg !2234

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !2235, !DIExpression(), !2236)
  %ptradd3 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2237
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2237
  store i64 %8, ptr %len, align 8, !dbg !2237
    #dbg_declare(ptr %index, !2238, !DIExpression(), !2239)
  store i64 0, ptr %index, align 8, !dbg !2240
    #dbg_declare(ptr %ptr, !2241, !DIExpression(), !2242)
  %9 = load ptr, ptr %self1, align 8, !dbg !2243
  store ptr %9, ptr %ptr, align 8, !dbg !2243
  br label %loop.cond, !dbg !2244

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !2245
  %11 = load i64, ptr %len, align 8, !dbg !2247
  %lt = icmp ult i64 %10, %11, !dbg !2245
  br i1 %lt, label %and.rhs4, label %and.phi9, !dbg !2245

and.rhs4:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !2248
  %13 = load i64, ptr %index, align 8, !dbg !2249
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !2249
  %14 = load i8, ptr %ptradd5, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1
  store i8 %15, ptr %c6, align 1
  %16 = load i8, ptr %c6, align 1, !dbg !2250
  %zext = zext i8 %16 to i64, !dbg !2250
  %ge = icmp uge i64 %zext, 256, !dbg !2250
  %17 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2250
  br i1 %17, label %panic, label %checkok, !dbg !2250

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !2250
  %18 = load i16, ptr %ptroffset, align 2, !dbg !2250
  %lshrl = lshr i16 %18, 10, !dbg !2250
  %19 = and i16 1, %lshrl, !dbg !2250
  %trunc = trunc i16 %19 to i8, !dbg !2250
  %20 = trunc i8 %trunc to i1, !dbg !2250
  br label %and.phi9, !dbg !2250

and.phi9:                                         ; preds = %checkok, %loop.cond
  %val10 = phi i1 [ false, %loop.cond ], [ %20, %checkok ], !dbg !2250
  br i1 %val10, label %loop.body, label %loop.exit, !dbg !2250

loop.body:                                        ; preds = %and.phi9
  %21 = load i64, ptr %index, align 8, !dbg !2254
  %add = add i64 %21, 1, !dbg !2254
  store i64 %add, ptr %index, align 8, !dbg !2254
  br label %loop.cond, !dbg !2254

loop.exit:                                        ; preds = %and.phi9
  %22 = load i64, ptr %len, align 8, !dbg !2255
  %23 = load i64, ptr %index, align 8, !dbg !2256
  %eq = icmp eq i64 %22, %23, !dbg !2255
  br i1 %eq, label %if.then, label %if.exit, !dbg !2255

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !2257
  br label %err_retblock, !dbg !2257

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !2258, !DIExpression(), !2259)
  store i8 0, ptr %is_negative, align 1, !dbg !2259
  %ptradd11 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2260
  %24 = load i64, ptr %ptradd11, align 8, !dbg !2260
  %25 = load ptr, ptr %self1, align 8, !dbg !2260
  %26 = load i64, ptr %index, align 8, !dbg !2262
  %ge12 = icmp uge i64 %26, %24, !dbg !2262
  %27 = call i1 @llvm.expect.i1(i1 %ge12, i1 false), !dbg !2262
  br i1 %27, label %panic13, label %checkok20, !dbg !2262

checkok20:                                        ; preds = %if.exit
  %ptradd21 = getelementptr inbounds i8, ptr %25, i64 %26, !dbg !2262
  %28 = load i8, ptr %ptradd21, align 1
  store i8 %28, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok20
  %29 = load i8, ptr %switch, align 1
  switch i8 %29, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case24
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then22, !dbg !2263

if.then22:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @std.core.string.NEGATIVE_VALUE to i64), ptr %reterr, align 8, !dbg !2265
  br label %err_retblock, !dbg !2265

switch.case24:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !2266
  %add25 = add i64 %30, 1, !dbg !2266
  store i64 %add25, ptr %index, align 8, !dbg !2266
  br label %switch.exit, !dbg !2266

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2268

switch.exit:                                      ; preds = %switch.default, %switch.case24
  %31 = load i64, ptr %len, align 8, !dbg !2270
  %32 = load i64, ptr %index, align 8, !dbg !2271
  %eq26 = icmp eq i64 %31, %32, !dbg !2270
  br i1 %eq26, label %if.then27, label %if.exit28, !dbg !2270

if.then27:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2272
  br label %err_retblock, !dbg !2272

if.exit28:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !2273, !DIExpression(), !2274)
  %33 = load i32, ptr %base2, align 4, !dbg !2275
  store i32 %33, ptr %base_used, align 4, !dbg !2275
  %ptradd29 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2276
  %34 = load i64, ptr %ptradd29, align 8, !dbg !2276
  %35 = load ptr, ptr %self1, align 8, !dbg !2276
  %36 = load i64, ptr %index, align 8, !dbg !2277
  %ge30 = icmp uge i64 %36, %34, !dbg !2277
  %37 = call i1 @llvm.expect.i1(i1 %ge30, i1 false), !dbg !2277
  br i1 %37, label %panic31, label %checkok38, !dbg !2277

checkok38:                                        ; preds = %if.exit28
  %ptradd39 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !2277
  %38 = load i8, ptr %ptradd39, align 1, !dbg !2277
  %eq40 = icmp eq i8 %38, 48, !dbg !2276
  br i1 %eq40, label %and.rhs41, label %and.phi43, !dbg !2276

and.rhs41:                                        ; preds = %checkok38
  %39 = load i32, ptr %base2, align 4, !dbg !2278
  %eq42 = icmp eq i32 %39, 10, !dbg !2278
  br label %and.phi43, !dbg !2278

and.phi43:                                        ; preds = %and.rhs41, %checkok38
  %val44 = phi i1 [ false, %checkok38 ], [ %eq42, %and.rhs41 ], !dbg !2278
  br i1 %val44, label %if.then45, label %if.exit74, !dbg !2278

if.then45:                                        ; preds = %and.phi43
  %40 = load i64, ptr %index, align 8, !dbg !2279
  %add46 = add i64 %40, 1, !dbg !2279
  store i64 %add46, ptr %index, align 8, !dbg !2279
  %41 = load i64, ptr %index, align 8, !dbg !2281
  %42 = load i64, ptr %len, align 8, !dbg !2282
  %eq47 = icmp eq i64 %41, %42, !dbg !2281
  br i1 %eq47, label %if.then48, label %if.exit49, !dbg !2281

if.then48:                                        ; preds = %if.then45
  store i32 0, ptr %blockret, align 4, !dbg !2283
  br label %expr_block.exit, !dbg !2283

if.exit49:                                        ; preds = %if.then45
  %ptradd50 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2284
  %43 = load i64, ptr %ptradd50, align 8, !dbg !2284
  %44 = load ptr, ptr %self1, align 8, !dbg !2284
  %45 = load i64, ptr %index, align 8, !dbg !2286
  %ge51 = icmp uge i64 %45, %43, !dbg !2286
  %46 = call i1 @llvm.expect.i1(i1 %ge51, i1 false), !dbg !2286
  br i1 %46, label %panic52, label %checkok59, !dbg !2286

checkok59:                                        ; preds = %if.exit49
  %ptradd60 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !2286
  %47 = load i8, ptr %ptradd60, align 1
  store i8 %47, ptr %switch61, align 1
  br label %switch.entry62

switch.entry62:                                   ; preds = %checkok59
  %48 = load i8, ptr %switch61, align 1
  switch i8 %48, label %switch.default69 [
    i8 120, label %switch.case63
    i8 88, label %switch.case63
    i8 98, label %switch.case65
    i8 66, label %switch.case65
    i8 111, label %switch.case67
    i8 79, label %switch.case67
  ]

switch.case63:                                    ; preds = %switch.entry62, %switch.entry62
  store i32 16, ptr %base_used, align 4, !dbg !2287
  %49 = load i64, ptr %index, align 8, !dbg !2289
  %add64 = add i64 %49, 1, !dbg !2289
  store i64 %add64, ptr %index, align 8, !dbg !2289
  br label %switch.exit70, !dbg !2289

switch.case65:                                    ; preds = %switch.entry62, %switch.entry62
  store i32 2, ptr %base_used, align 4, !dbg !2290
  %50 = load i64, ptr %index, align 8, !dbg !2292
  %add66 = add i64 %50, 1, !dbg !2292
  store i64 %add66, ptr %index, align 8, !dbg !2292
  br label %switch.exit70, !dbg !2292

switch.case67:                                    ; preds = %switch.entry62, %switch.entry62
  store i32 8, ptr %base_used, align 4, !dbg !2293
  %51 = load i64, ptr %index, align 8, !dbg !2295
  %add68 = add i64 %51, 1, !dbg !2295
  store i64 %add68, ptr %index, align 8, !dbg !2295
  br label %switch.exit70, !dbg !2295

switch.default69:                                 ; preds = %switch.entry62
  br label %switch.exit70, !dbg !2296

switch.exit70:                                    ; preds = %switch.default69, %switch.case67, %switch.case65, %switch.case63
  %52 = load i64, ptr %len, align 8, !dbg !2298
  %53 = load i64, ptr %index, align 8, !dbg !2299
  %eq71 = icmp eq i64 %52, %53, !dbg !2298
  br i1 %eq71, label %if.then72, label %if.exit73, !dbg !2298

if.then72:                                        ; preds = %switch.exit70
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2300
  br label %err_retblock, !dbg !2300

if.exit73:                                        ; preds = %switch.exit70
  br label %if.exit74, !dbg !2300

if.exit74:                                        ; preds = %if.exit73, %and.phi43
    #dbg_declare(ptr %value, !2301, !DIExpression(), !2302)
  store i32 0, ptr %value, align 4, !dbg !2303
  br label %loop.cond75, !dbg !2304

loop.cond75:                                      ; preds = %loop.exit131, %if.exit74
  %54 = load i64, ptr %index, align 8, !dbg !2305
  %55 = load i64, ptr %len, align 8, !dbg !2307
  %neq = icmp ne i64 %54, %55, !dbg !2305
  br i1 %neq, label %loop.body76, label %loop.exit132, !dbg !2305

loop.body76:                                      ; preds = %loop.cond75
    #dbg_declare(ptr %c77, !2308, !DIExpression(), !2310)
  %ptradd78 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2311
  %56 = load i64, ptr %ptradd78, align 8, !dbg !2311
  %57 = load ptr, ptr %self1, align 8, !dbg !2311
  %58 = load i64, ptr %index, align 8, !dbg !2312
  %add79 = add i64 %58, 1, !dbg !2312
  store i64 %add79, ptr %index, align 8, !dbg !2312
  %ge80 = icmp uge i64 %58, %56, !dbg !2312
  %59 = call i1 @llvm.expect.i1(i1 %ge80, i1 false), !dbg !2312
  br i1 %59, label %panic81, label %checkok88, !dbg !2312

checkok88:                                        ; preds = %loop.body76
  %ptradd89 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !2312
  %60 = load i8, ptr %ptradd89, align 1, !dbg !2312
  store i8 %60, ptr %c77, align 1, !dbg !2312
  store i8 1, ptr %switch90, align 1
  br label %switch.entry91

switch.entry91:                                   ; preds = %checkok88
  %61 = load i8, ptr %switch90, align 1
  %62 = trunc i8 %61 to i1
  %63 = load i32, ptr %base_used, align 4, !dbg !2313
  %gt92 = icmp ugt i32 10, %63, !dbg !2313
  br i1 %gt92, label %or.phi, label %or.rhs, !dbg !2313

or.rhs:                                           ; preds = %switch.entry91
  %64 = load i8, ptr %c77, align 1, !dbg !2315
  %lt93 = icmp ult i8 %64, 65, !dbg !2315
  br label %or.phi, !dbg !2315

or.phi:                                           ; preds = %or.rhs, %switch.entry91
  %val94 = phi i1 [ true, %switch.entry91 ], [ %lt93, %or.rhs ], !dbg !2315
  %eq95 = icmp eq i1 %val94, %62, !dbg !2315
  br i1 %eq95, label %switch.case96, label %next_if, !dbg !2315

switch.case96:                                    ; preds = %or.phi
  %65 = load i8, ptr %c77, align 1, !dbg !2316
  %sub = sub i8 %65, 48, !dbg !2316
  store i8 %sub, ptr %c77, align 1, !dbg !2316
  br label %switch.exit112, !dbg !2316

next_if:                                          ; preds = %or.phi
  %66 = load i8, ptr %c77, align 1, !dbg !2318
  %le97 = icmp ule i8 %66, 70, !dbg !2318
  %eq98 = icmp eq i1 %le97, %62, !dbg !2318
  br i1 %eq98, label %switch.case99, label %next_if101, !dbg !2318

switch.case99:                                    ; preds = %next_if
  %67 = load i8, ptr %c77, align 1, !dbg !2319
  %sub100 = sub i8 %67, 55, !dbg !2319
  store i8 %sub100, ptr %c77, align 1, !dbg !2319
  br label %switch.exit112, !dbg !2319

next_if101:                                       ; preds = %next_if
  %68 = load i8, ptr %c77, align 1, !dbg !2321
  %lt102 = icmp ult i8 %68, 97, !dbg !2321
  br i1 %lt102, label %or.phi105, label %or.rhs103, !dbg !2321

or.rhs103:                                        ; preds = %next_if101
  %69 = load i8, ptr %c77, align 1, !dbg !2322
  %gt104 = icmp ugt i8 %69, 102, !dbg !2322
  br label %or.phi105, !dbg !2322

or.phi105:                                        ; preds = %or.rhs103, %next_if101
  %val106 = phi i1 [ true, %next_if101 ], [ %gt104, %or.rhs103 ], !dbg !2322
  %eq107 = icmp eq i1 %val106, %62, !dbg !2322
  br i1 %eq107, label %switch.case108, label %next_if109, !dbg !2322

switch.case108:                                   ; preds = %or.phi105
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2323
  br label %err_retblock, !dbg !2323

next_if109:                                       ; preds = %or.phi105
  br label %switch.default110, !dbg !2323

switch.default110:                                ; preds = %next_if109
  %70 = load i8, ptr %c77, align 1, !dbg !2325
  %sub111 = sub i8 %70, 87, !dbg !2325
  store i8 %sub111, ptr %c77, align 1, !dbg !2325
  br label %switch.exit112, !dbg !2325

switch.exit112:                                   ; preds = %switch.default110, %switch.case99, %switch.case96
  %71 = load i8, ptr %c77, align 1, !dbg !2327
  %zext113 = zext i8 %71 to i32, !dbg !2327
  %72 = load i32, ptr %base_used, align 4, !dbg !2328
  %ge114 = icmp uge i32 %zext113, %72, !dbg !2327
  br i1 %ge114, label %if.then115, label %if.exit116, !dbg !2327

if.then115:                                       ; preds = %switch.exit112
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2329
  br label %err_retblock, !dbg !2329

if.exit116:                                       ; preds = %switch.exit112
  %73 = load i8, ptr %is_negative, align 1, !dbg !2330
  %74 = trunc i8 %73 to i1, !dbg !2330
  br i1 %74, label %if.then117, label %if.exit123, !dbg !2330

if.then117:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value, !2333, !DIExpression(), !2335)
  %75 = load i32, ptr %value, align 4, !dbg !2336
  %76 = load i32, ptr %base_used, align 4, !dbg !2337
  %mul = mul i32 %75, %76, !dbg !2336
  %77 = load i8, ptr %c77, align 1, !dbg !2338
  %zext118 = zext i8 %77 to i32, !dbg !2338
  %sub119 = sub i32 %mul, %zext118, !dbg !2336
  store i32 %sub119, ptr %new_value, align 4, !dbg !2336
  %78 = load i32, ptr %new_value, align 4, !dbg !2339
  %79 = load i32, ptr %value, align 4, !dbg !2340
  %gt120 = icmp ugt i32 %78, %79, !dbg !2339
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !2339

if.then121:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !2341
  br label %err_retblock, !dbg !2341

if.exit122:                                       ; preds = %if.then117
  %80 = load i32, ptr %new_value, align 4, !dbg !2342
  store i32 %80, ptr %value, align 4, !dbg !2342
  br label %loop.exit131, !dbg !2343

if.exit123:                                       ; preds = %if.exit116
    #dbg_declare(ptr %new_value124, !2344, !DIExpression(), !2345)
  %81 = load i32, ptr %value, align 4, !dbg !2346
  %82 = load i32, ptr %base_used, align 4, !dbg !2347
  %mul125 = mul i32 %81, %82, !dbg !2346
  %83 = load i8, ptr %c77, align 1, !dbg !2348
  %zext126 = zext i8 %83 to i32, !dbg !2348
  %add127 = add i32 %mul125, %zext126, !dbg !2346
  store i32 %add127, ptr %new_value124, align 4, !dbg !2346
  %84 = load i32, ptr %new_value124, align 4, !dbg !2349
  %85 = load i32, ptr %value, align 4, !dbg !2350
  %lt128 = icmp ult i32 %84, %85, !dbg !2349
  br i1 %lt128, label %if.then129, label %if.exit130, !dbg !2349

if.then129:                                       ; preds = %if.exit123
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !2351
  br label %err_retblock, !dbg !2351

if.exit130:                                       ; preds = %if.exit123
  %86 = load i32, ptr %new_value124, align 4, !dbg !2352
  store i32 %86, ptr %value, align 4, !dbg !2352
  br label %loop.exit131, !dbg !2352

loop.exit131:                                     ; preds = %if.exit130, %if.exit122
  br label %loop.cond75, !dbg !2352

loop.exit132:                                     ; preds = %loop.cond75
  %87 = load i32, ptr %value, align 4, !dbg !2353
  store i32 %87, ptr %blockret, align 4, !dbg !2353
  br label %expr_block.exit, !dbg !2353

expr_block.exit:                                  ; preds = %loop.exit132, %if.then48
  %88 = load i32, ptr %blockret, align 4, !dbg !2353
  store i32 %88, ptr %0, align 4, !dbg !2353
  ret i64 0, !dbg !2353

err_retblock:                                     ; preds = %if.then129, %if.then121, %if.then115, %switch.case108, %if.then72, %if.then27, %if.then22, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !2353
  ret i64 %89, !dbg !2353

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %92 = insertvalue %any undef, ptr %taddr7, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd8, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 8, ptr @.func.88, i64 7, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !2250
  unreachable, !dbg !2250

panic13:                                          ; preds = %if.exit
  store i64 %24, ptr %taddr14, align 8
  %95 = insertvalue %any undef, ptr %taddr14, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr15, align 8
  %97 = insertvalue %any undef, ptr %taddr15, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %98, ptr %ptradd17, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.88, i64 7, i32 857, ptr byval(%"any[]") align 8 %indirectarg19) #6, !dbg !2262
  unreachable, !dbg !2262

panic31:                                          ; preds = %if.exit28
  store i64 %34, ptr %taddr32, align 8
  %100 = insertvalue %any undef, ptr %taddr32, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr33, align 8
  %102 = insertvalue %any undef, ptr %taddr33, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %103, ptr %ptradd35, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.88, i64 7, i32 870, ptr byval(%"any[]") align 8 %indirectarg37) #6, !dbg !2277
  unreachable, !dbg !2277

panic52:                                          ; preds = %if.exit49
  store i64 %43, ptr %taddr53, align 8
  %105 = insertvalue %any undef, ptr %taddr53, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr54, align 8
  %107 = insertvalue %any undef, ptr %taddr54, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %108, ptr %ptradd56, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.88, i64 7, i32 874, ptr byval(%"any[]") align 8 %indirectarg58) #6, !dbg !2286
  unreachable, !dbg !2286

panic81:                                          ; preds = %loop.body76
  store i64 %56, ptr %taddr82, align 8
  %110 = insertvalue %any undef, ptr %taddr82, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr83, align 8
  %112 = insertvalue %any undef, ptr %taddr83, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %111, ptr %varargslots84, align 16
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %113, ptr %ptradd85, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp86", ptr %indirectarg87, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.88, i64 7, i32 896, ptr byval(%"any[]") align 8 %indirectarg87) #6, !dbg !2312
  unreachable, !dbg !2312
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_ushort(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !2354 {
entry:
  %self = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self1 = alloca %"char[]", align 8
  %base2 = alloca i32, align 4
  %blockret = alloca i16, align 2
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i16, align 2
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %varargslots56 = alloca [2 x %any], align 16
  %indirectarg59 = alloca %"any[]", align 8
  %switch62 = alloca i8, align 1
  %value = alloca i16, align 2
  %c78 = alloca i8, align 1
  %taddr83 = alloca i64, align 8
  %taddr84 = alloca i64, align 8
  %varargslots85 = alloca [2 x %any], align 16
  %indirectarg88 = alloca %"any[]", align 8
  %switch91 = alloca i8, align 1
  %new_value = alloca i16, align 2
  %new_value129 = alloca i16, align 2
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !2357, !DIExpression(), !2358)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !2359, !DIExpression(), !2360)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self1, ptr align 8 %self, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base2, align 4
  %5 = load i32, ptr %base2, align 4, !dbg !2361
  %gt = icmp sgt i32 %5, 0, !dbg !2361
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !2361

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base2, align 4, !dbg !2365
  %le = icmp sle i32 %6, 16, !dbg !2365
  br label %and.phi, !dbg !2365

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !2365
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !2365

assert_fail:                                      ; preds = %and.phi
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2366
  call void %7(ptr @.panic_msg.80, i64 63, ptr @.file.16, i64 9, ptr @.func.89, i64 9, i32 931) #6, !dbg !2366
  unreachable, !dbg !2366

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !2367, !DIExpression(), !2368)
  %ptradd3 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2369
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2369
  store i64 %8, ptr %len, align 8, !dbg !2369
    #dbg_declare(ptr %index, !2370, !DIExpression(), !2371)
  store i64 0, ptr %index, align 8, !dbg !2372
    #dbg_declare(ptr %ptr, !2373, !DIExpression(), !2374)
  %9 = load ptr, ptr %self1, align 8, !dbg !2375
  store ptr %9, ptr %ptr, align 8, !dbg !2375
  br label %loop.cond, !dbg !2376

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !2377
  %11 = load i64, ptr %len, align 8, !dbg !2379
  %lt = icmp ult i64 %10, %11, !dbg !2377
  br i1 %lt, label %and.rhs4, label %and.phi9, !dbg !2377

and.rhs4:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !2380
  %13 = load i64, ptr %index, align 8, !dbg !2381
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !2381
  %14 = load i8, ptr %ptradd5, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1
  store i8 %15, ptr %c6, align 1
  %16 = load i8, ptr %c6, align 1, !dbg !2382
  %zext = zext i8 %16 to i64, !dbg !2382
  %ge = icmp uge i64 %zext, 256, !dbg !2382
  %17 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2382
  br i1 %17, label %panic, label %checkok, !dbg !2382

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !2382
  %18 = load i16, ptr %ptroffset, align 2, !dbg !2382
  %lshrl = lshr i16 %18, 10, !dbg !2382
  %19 = and i16 1, %lshrl, !dbg !2382
  %trunc = trunc i16 %19 to i8, !dbg !2382
  %20 = trunc i8 %trunc to i1, !dbg !2382
  br label %and.phi9, !dbg !2382

and.phi9:                                         ; preds = %checkok, %loop.cond
  %val10 = phi i1 [ false, %loop.cond ], [ %20, %checkok ], !dbg !2382
  br i1 %val10, label %loop.body, label %loop.exit, !dbg !2382

loop.body:                                        ; preds = %and.phi9
  %21 = load i64, ptr %index, align 8, !dbg !2386
  %add = add i64 %21, 1, !dbg !2386
  store i64 %add, ptr %index, align 8, !dbg !2386
  br label %loop.cond, !dbg !2386

loop.exit:                                        ; preds = %and.phi9
  %22 = load i64, ptr %len, align 8, !dbg !2387
  %23 = load i64, ptr %index, align 8, !dbg !2388
  %eq = icmp eq i64 %22, %23, !dbg !2387
  br i1 %eq, label %if.then, label %if.exit, !dbg !2387

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !2389
  br label %err_retblock, !dbg !2389

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !2390, !DIExpression(), !2391)
  store i8 0, ptr %is_negative, align 1, !dbg !2391
  %ptradd11 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2392
  %24 = load i64, ptr %ptradd11, align 8, !dbg !2392
  %25 = load ptr, ptr %self1, align 8, !dbg !2392
  %26 = load i64, ptr %index, align 8, !dbg !2394
  %ge12 = icmp uge i64 %26, %24, !dbg !2394
  %27 = call i1 @llvm.expect.i1(i1 %ge12, i1 false), !dbg !2394
  br i1 %27, label %panic13, label %checkok20, !dbg !2394

checkok20:                                        ; preds = %if.exit
  %ptradd21 = getelementptr inbounds i8, ptr %25, i64 %26, !dbg !2394
  %28 = load i8, ptr %ptradd21, align 1
  store i8 %28, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok20
  %29 = load i8, ptr %switch, align 1
  switch i8 %29, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case24
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then22, !dbg !2395

if.then22:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @std.core.string.NEGATIVE_VALUE to i64), ptr %reterr, align 8, !dbg !2397
  br label %err_retblock, !dbg !2397

switch.case24:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !2398
  %add25 = add i64 %30, 1, !dbg !2398
  store i64 %add25, ptr %index, align 8, !dbg !2398
  br label %switch.exit, !dbg !2398

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2400

switch.exit:                                      ; preds = %switch.default, %switch.case24
  %31 = load i64, ptr %len, align 8, !dbg !2402
  %32 = load i64, ptr %index, align 8, !dbg !2403
  %eq26 = icmp eq i64 %31, %32, !dbg !2402
  br i1 %eq26, label %if.then27, label %if.exit28, !dbg !2402

if.then27:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2404
  br label %err_retblock, !dbg !2404

if.exit28:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !2405, !DIExpression(), !2406)
  %33 = load i32, ptr %base2, align 4, !dbg !2407
  %trunc29 = trunc i32 %33 to i16, !dbg !2407
  store i16 %trunc29, ptr %base_used, align 2, !dbg !2407
  %ptradd30 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2408
  %34 = load i64, ptr %ptradd30, align 8, !dbg !2408
  %35 = load ptr, ptr %self1, align 8, !dbg !2408
  %36 = load i64, ptr %index, align 8, !dbg !2409
  %ge31 = icmp uge i64 %36, %34, !dbg !2409
  %37 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !2409
  br i1 %37, label %panic32, label %checkok39, !dbg !2409

checkok39:                                        ; preds = %if.exit28
  %ptradd40 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !2409
  %38 = load i8, ptr %ptradd40, align 1, !dbg !2409
  %eq41 = icmp eq i8 %38, 48, !dbg !2408
  br i1 %eq41, label %and.rhs42, label %and.phi44, !dbg !2408

and.rhs42:                                        ; preds = %checkok39
  %39 = load i32, ptr %base2, align 4, !dbg !2410
  %eq43 = icmp eq i32 %39, 10, !dbg !2410
  br label %and.phi44, !dbg !2410

and.phi44:                                        ; preds = %and.rhs42, %checkok39
  %val45 = phi i1 [ false, %checkok39 ], [ %eq43, %and.rhs42 ], !dbg !2410
  br i1 %val45, label %if.then46, label %if.exit75, !dbg !2410

if.then46:                                        ; preds = %and.phi44
  %40 = load i64, ptr %index, align 8, !dbg !2411
  %add47 = add i64 %40, 1, !dbg !2411
  store i64 %add47, ptr %index, align 8, !dbg !2411
  %41 = load i64, ptr %index, align 8, !dbg !2413
  %42 = load i64, ptr %len, align 8, !dbg !2414
  %eq48 = icmp eq i64 %41, %42, !dbg !2413
  br i1 %eq48, label %if.then49, label %if.exit50, !dbg !2413

if.then49:                                        ; preds = %if.then46
  store i16 0, ptr %blockret, align 2, !dbg !2415
  br label %expr_block.exit, !dbg !2415

if.exit50:                                        ; preds = %if.then46
  %ptradd51 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2416
  %43 = load i64, ptr %ptradd51, align 8, !dbg !2416
  %44 = load ptr, ptr %self1, align 8, !dbg !2416
  %45 = load i64, ptr %index, align 8, !dbg !2418
  %ge52 = icmp uge i64 %45, %43, !dbg !2418
  %46 = call i1 @llvm.expect.i1(i1 %ge52, i1 false), !dbg !2418
  br i1 %46, label %panic53, label %checkok60, !dbg !2418

checkok60:                                        ; preds = %if.exit50
  %ptradd61 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !2418
  %47 = load i8, ptr %ptradd61, align 1
  store i8 %47, ptr %switch62, align 1
  br label %switch.entry63

switch.entry63:                                   ; preds = %checkok60
  %48 = load i8, ptr %switch62, align 1
  switch i8 %48, label %switch.default70 [
    i8 120, label %switch.case64
    i8 88, label %switch.case64
    i8 98, label %switch.case66
    i8 66, label %switch.case66
    i8 111, label %switch.case68
    i8 79, label %switch.case68
  ]

switch.case64:                                    ; preds = %switch.entry63, %switch.entry63
  store i16 16, ptr %base_used, align 2, !dbg !2419
  %49 = load i64, ptr %index, align 8, !dbg !2421
  %add65 = add i64 %49, 1, !dbg !2421
  store i64 %add65, ptr %index, align 8, !dbg !2421
  br label %switch.exit71, !dbg !2421

switch.case66:                                    ; preds = %switch.entry63, %switch.entry63
  store i16 2, ptr %base_used, align 2, !dbg !2422
  %50 = load i64, ptr %index, align 8, !dbg !2424
  %add67 = add i64 %50, 1, !dbg !2424
  store i64 %add67, ptr %index, align 8, !dbg !2424
  br label %switch.exit71, !dbg !2424

switch.case68:                                    ; preds = %switch.entry63, %switch.entry63
  store i16 8, ptr %base_used, align 2, !dbg !2425
  %51 = load i64, ptr %index, align 8, !dbg !2427
  %add69 = add i64 %51, 1, !dbg !2427
  store i64 %add69, ptr %index, align 8, !dbg !2427
  br label %switch.exit71, !dbg !2427

switch.default70:                                 ; preds = %switch.entry63
  br label %switch.exit71, !dbg !2428

switch.exit71:                                    ; preds = %switch.default70, %switch.case68, %switch.case66, %switch.case64
  %52 = load i64, ptr %len, align 8, !dbg !2430
  %53 = load i64, ptr %index, align 8, !dbg !2431
  %eq72 = icmp eq i64 %52, %53, !dbg !2430
  br i1 %eq72, label %if.then73, label %if.exit74, !dbg !2430

if.then73:                                        ; preds = %switch.exit71
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2432
  br label %err_retblock, !dbg !2432

if.exit74:                                        ; preds = %switch.exit71
  br label %if.exit75, !dbg !2432

if.exit75:                                        ; preds = %if.exit74, %and.phi44
    #dbg_declare(ptr %value, !2433, !DIExpression(), !2434)
  store i16 0, ptr %value, align 2, !dbg !2435
  br label %loop.cond76, !dbg !2436

loop.cond76:                                      ; preds = %loop.exit139, %if.exit75
  %54 = load i64, ptr %index, align 8, !dbg !2437
  %55 = load i64, ptr %len, align 8, !dbg !2439
  %neq = icmp ne i64 %54, %55, !dbg !2437
  br i1 %neq, label %loop.body77, label %loop.exit140, !dbg !2437

loop.body77:                                      ; preds = %loop.cond76
    #dbg_declare(ptr %c78, !2440, !DIExpression(), !2442)
  %ptradd79 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2443
  %56 = load i64, ptr %ptradd79, align 8, !dbg !2443
  %57 = load ptr, ptr %self1, align 8, !dbg !2443
  %58 = load i64, ptr %index, align 8, !dbg !2444
  %add80 = add i64 %58, 1, !dbg !2444
  store i64 %add80, ptr %index, align 8, !dbg !2444
  %ge81 = icmp uge i64 %58, %56, !dbg !2444
  %59 = call i1 @llvm.expect.i1(i1 %ge81, i1 false), !dbg !2444
  br i1 %59, label %panic82, label %checkok89, !dbg !2444

checkok89:                                        ; preds = %loop.body77
  %ptradd90 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !2444
  %60 = load i8, ptr %ptradd90, align 1, !dbg !2444
  store i8 %60, ptr %c78, align 1, !dbg !2444
  store i8 1, ptr %switch91, align 1
  br label %switch.entry92

switch.entry92:                                   ; preds = %checkok89
  %61 = load i8, ptr %switch91, align 1
  %62 = trunc i8 %61 to i1
  %63 = load i16, ptr %base_used, align 2, !dbg !2445
  %zext93 = zext i16 %63 to i32, !dbg !2445
  %gt94 = icmp ugt i32 10, %zext93, !dbg !2445
  br i1 %gt94, label %or.phi, label %or.rhs, !dbg !2445

or.rhs:                                           ; preds = %switch.entry92
  %64 = load i8, ptr %c78, align 1, !dbg !2447
  %lt95 = icmp ult i8 %64, 65, !dbg !2447
  br label %or.phi, !dbg !2447

or.phi:                                           ; preds = %or.rhs, %switch.entry92
  %val96 = phi i1 [ true, %switch.entry92 ], [ %lt95, %or.rhs ], !dbg !2447
  %eq97 = icmp eq i1 %val96, %62, !dbg !2447
  br i1 %eq97, label %switch.case98, label %next_if, !dbg !2447

switch.case98:                                    ; preds = %or.phi
  %65 = load i8, ptr %c78, align 1, !dbg !2448
  %sub = sub i8 %65, 48, !dbg !2448
  store i8 %sub, ptr %c78, align 1, !dbg !2448
  br label %switch.exit114, !dbg !2448

next_if:                                          ; preds = %or.phi
  %66 = load i8, ptr %c78, align 1, !dbg !2450
  %le99 = icmp ule i8 %66, 70, !dbg !2450
  %eq100 = icmp eq i1 %le99, %62, !dbg !2450
  br i1 %eq100, label %switch.case101, label %next_if103, !dbg !2450

switch.case101:                                   ; preds = %next_if
  %67 = load i8, ptr %c78, align 1, !dbg !2451
  %sub102 = sub i8 %67, 55, !dbg !2451
  store i8 %sub102, ptr %c78, align 1, !dbg !2451
  br label %switch.exit114, !dbg !2451

next_if103:                                       ; preds = %next_if
  %68 = load i8, ptr %c78, align 1, !dbg !2453
  %lt104 = icmp ult i8 %68, 97, !dbg !2453
  br i1 %lt104, label %or.phi107, label %or.rhs105, !dbg !2453

or.rhs105:                                        ; preds = %next_if103
  %69 = load i8, ptr %c78, align 1, !dbg !2454
  %gt106 = icmp ugt i8 %69, 102, !dbg !2454
  br label %or.phi107, !dbg !2454

or.phi107:                                        ; preds = %or.rhs105, %next_if103
  %val108 = phi i1 [ true, %next_if103 ], [ %gt106, %or.rhs105 ], !dbg !2454
  %eq109 = icmp eq i1 %val108, %62, !dbg !2454
  br i1 %eq109, label %switch.case110, label %next_if111, !dbg !2454

switch.case110:                                   ; preds = %or.phi107
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2455
  br label %err_retblock, !dbg !2455

next_if111:                                       ; preds = %or.phi107
  br label %switch.default112, !dbg !2455

switch.default112:                                ; preds = %next_if111
  %70 = load i8, ptr %c78, align 1, !dbg !2457
  %sub113 = sub i8 %70, 87, !dbg !2457
  store i8 %sub113, ptr %c78, align 1, !dbg !2457
  br label %switch.exit114, !dbg !2457

switch.exit114:                                   ; preds = %switch.default112, %switch.case101, %switch.case98
  %71 = load i8, ptr %c78, align 1, !dbg !2459
  %zext115 = zext i8 %71 to i16, !dbg !2459
  %72 = load i16, ptr %base_used, align 2, !dbg !2460
  %ge116 = icmp uge i16 %zext115, %72, !dbg !2459
  br i1 %ge116, label %if.then117, label %if.exit118, !dbg !2459

if.then117:                                       ; preds = %switch.exit114
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2461
  br label %err_retblock, !dbg !2461

if.exit118:                                       ; preds = %switch.exit114
  %73 = load i8, ptr %is_negative, align 1, !dbg !2462
  %74 = trunc i8 %73 to i1, !dbg !2462
  br i1 %74, label %if.then119, label %if.exit128, !dbg !2462

if.then119:                                       ; preds = %if.exit118
    #dbg_declare(ptr %new_value, !2465, !DIExpression(), !2467)
  %75 = load i16, ptr %value, align 2, !dbg !2468
  %zext120 = zext i16 %75 to i32, !dbg !2468
  %76 = load i16, ptr %base_used, align 2, !dbg !2469
  %zext121 = zext i16 %76 to i32, !dbg !2469
  %mul = mul i32 %zext120, %zext121, !dbg !2468
  %77 = load i8, ptr %c78, align 1, !dbg !2470
  %zext122 = zext i8 %77 to i32, !dbg !2470
  %sub123 = sub i32 %mul, %zext122, !dbg !2468
  %trunc124 = trunc i32 %sub123 to i16, !dbg !2468
  store i16 %trunc124, ptr %new_value, align 2, !dbg !2468
  %78 = load i16, ptr %new_value, align 2, !dbg !2471
  %79 = load i16, ptr %value, align 2, !dbg !2472
  %gt125 = icmp ugt i16 %78, %79, !dbg !2471
  br i1 %gt125, label %if.then126, label %if.exit127, !dbg !2471

if.then126:                                       ; preds = %if.then119
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !2473
  br label %err_retblock, !dbg !2473

if.exit127:                                       ; preds = %if.then119
  %80 = load i16, ptr %new_value, align 2, !dbg !2474
  store i16 %80, ptr %value, align 2, !dbg !2474
  br label %loop.exit139, !dbg !2475

if.exit128:                                       ; preds = %if.exit118
    #dbg_declare(ptr %new_value129, !2476, !DIExpression(), !2477)
  %81 = load i16, ptr %value, align 2, !dbg !2478
  %zext130 = zext i16 %81 to i32, !dbg !2478
  %82 = load i16, ptr %base_used, align 2, !dbg !2479
  %zext131 = zext i16 %82 to i32, !dbg !2479
  %mul132 = mul i32 %zext130, %zext131, !dbg !2478
  %83 = load i8, ptr %c78, align 1, !dbg !2480
  %zext133 = zext i8 %83 to i32, !dbg !2480
  %add134 = add i32 %mul132, %zext133, !dbg !2478
  %trunc135 = trunc i32 %add134 to i16, !dbg !2478
  store i16 %trunc135, ptr %new_value129, align 2, !dbg !2478
  %84 = load i16, ptr %new_value129, align 2, !dbg !2481
  %85 = load i16, ptr %value, align 2, !dbg !2482
  %lt136 = icmp ult i16 %84, %85, !dbg !2481
  br i1 %lt136, label %if.then137, label %if.exit138, !dbg !2481

if.then137:                                       ; preds = %if.exit128
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !2483
  br label %err_retblock, !dbg !2483

if.exit138:                                       ; preds = %if.exit128
  %86 = load i16, ptr %new_value129, align 2, !dbg !2484
  store i16 %86, ptr %value, align 2, !dbg !2484
  br label %loop.exit139, !dbg !2484

loop.exit139:                                     ; preds = %if.exit138, %if.exit127
  br label %loop.cond76, !dbg !2484

loop.exit140:                                     ; preds = %loop.cond76
  %87 = load i16, ptr %value, align 2, !dbg !2485
  store i16 %87, ptr %blockret, align 2, !dbg !2485
  br label %expr_block.exit, !dbg !2485

expr_block.exit:                                  ; preds = %loop.exit140, %if.then49
  %88 = load i16, ptr %blockret, align 2, !dbg !2485
  store i16 %88, ptr %0, align 2, !dbg !2485
  ret i64 0, !dbg !2485

err_retblock:                                     ; preds = %if.then137, %if.then126, %if.then117, %switch.case110, %if.then73, %if.then27, %if.then22, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !2485
  ret i64 %89, !dbg !2485

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %92 = insertvalue %any undef, ptr %taddr7, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd8, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 8, ptr @.func.89, i64 9, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !2382
  unreachable, !dbg !2382

panic13:                                          ; preds = %if.exit
  store i64 %24, ptr %taddr14, align 8
  %95 = insertvalue %any undef, ptr %taddr14, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr15, align 8
  %97 = insertvalue %any undef, ptr %taddr15, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %98, ptr %ptradd17, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.89, i64 9, i32 857, ptr byval(%"any[]") align 8 %indirectarg19) #6, !dbg !2394
  unreachable, !dbg !2394

panic32:                                          ; preds = %if.exit28
  store i64 %34, ptr %taddr33, align 8
  %100 = insertvalue %any undef, ptr %taddr33, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr34, align 8
  %102 = insertvalue %any undef, ptr %taddr34, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %103, ptr %ptradd36, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.89, i64 9, i32 870, ptr byval(%"any[]") align 8 %indirectarg38) #6, !dbg !2409
  unreachable, !dbg !2409

panic53:                                          ; preds = %if.exit50
  store i64 %43, ptr %taddr54, align 8
  %105 = insertvalue %any undef, ptr %taddr54, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr55, align 8
  %107 = insertvalue %any undef, ptr %taddr55, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots56, align 16
  %ptradd57 = getelementptr inbounds i8, ptr %varargslots56, i64 16
  store %any %108, ptr %ptradd57, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp58" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp58", ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.89, i64 9, i32 874, ptr byval(%"any[]") align 8 %indirectarg59) #6, !dbg !2418
  unreachable, !dbg !2418

panic82:                                          ; preds = %loop.body77
  store i64 %56, ptr %taddr83, align 8
  %110 = insertvalue %any undef, ptr %taddr83, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr84, align 8
  %112 = insertvalue %any undef, ptr %taddr84, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %111, ptr %varargslots85, align 16
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %113, ptr %ptradd86, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp87", ptr %indirectarg88, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.89, i64 9, i32 896, ptr byval(%"any[]") align 8 %indirectarg88) #6, !dbg !2444
  unreachable, !dbg !2444
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_uchar(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !2486 {
entry:
  %self = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %self1 = alloca %"char[]", align 8
  %base2 = alloca i32, align 4
  %blockret = alloca i8, align 1
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %c6 = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %is_negative = alloca i8, align 1
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i8, align 1
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %varargslots56 = alloca [2 x %any], align 16
  %indirectarg59 = alloca %"any[]", align 8
  %switch62 = alloca i8, align 1
  %value = alloca i8, align 1
  %c78 = alloca i8, align 1
  %taddr83 = alloca i64, align 8
  %taddr84 = alloca i64, align 8
  %varargslots85 = alloca [2 x %any], align 16
  %indirectarg88 = alloca %"any[]", align 8
  %switch91 = alloca i8, align 1
  %new_value = alloca i8, align 1
  %new_value128 = alloca i8, align 1
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !2489, !DIExpression(), !2490)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !2491, !DIExpression(), !2492)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self1, ptr align 8 %self, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base2, align 4
  %5 = load i32, ptr %base2, align 4, !dbg !2493
  %gt = icmp sgt i32 %5, 0, !dbg !2493
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !2493

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base2, align 4, !dbg !2497
  %le = icmp sle i32 %6, 16, !dbg !2497
  br label %and.phi, !dbg !2497

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %le, %and.rhs ], !dbg !2497
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !2497

assert_fail:                                      ; preds = %and.phi
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2498
  call void %7(ptr @.panic_msg.80, i64 63, ptr @.file.16, i64 9, ptr @.func.90, i64 8, i32 932) #6, !dbg !2498
  unreachable, !dbg !2498

assert_ok:                                        ; preds = %and.phi
    #dbg_declare(ptr %len, !2499, !DIExpression(), !2500)
  %ptradd3 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2501
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2501
  store i64 %8, ptr %len, align 8, !dbg !2501
    #dbg_declare(ptr %index, !2502, !DIExpression(), !2503)
  store i64 0, ptr %index, align 8, !dbg !2504
    #dbg_declare(ptr %ptr, !2505, !DIExpression(), !2506)
  %9 = load ptr, ptr %self1, align 8, !dbg !2507
  store ptr %9, ptr %ptr, align 8, !dbg !2507
  br label %loop.cond, !dbg !2508

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !2509
  %11 = load i64, ptr %len, align 8, !dbg !2511
  %lt = icmp ult i64 %10, %11, !dbg !2509
  br i1 %lt, label %and.rhs4, label %and.phi9, !dbg !2509

and.rhs4:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !2512
  %13 = load i64, ptr %index, align 8, !dbg !2513
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !2513
  %14 = load i8, ptr %ptradd5, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1
  store i8 %15, ptr %c6, align 1
  %16 = load i8, ptr %c6, align 1, !dbg !2514
  %zext = zext i8 %16 to i64, !dbg !2514
  %ge = icmp uge i64 %zext, 256, !dbg !2514
  %17 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2514
  br i1 %17, label %panic, label %checkok, !dbg !2514

checkok:                                          ; preds = %and.rhs4
  %ptroffset = getelementptr inbounds [2 x i8], ptr @std.core.ascii.ASCII_LOOKUP, i64 %zext, !dbg !2514
  %18 = load i16, ptr %ptroffset, align 2, !dbg !2514
  %lshrl = lshr i16 %18, 10, !dbg !2514
  %19 = and i16 1, %lshrl, !dbg !2514
  %trunc = trunc i16 %19 to i8, !dbg !2514
  %20 = trunc i8 %trunc to i1, !dbg !2514
  br label %and.phi9, !dbg !2514

and.phi9:                                         ; preds = %checkok, %loop.cond
  %val10 = phi i1 [ false, %loop.cond ], [ %20, %checkok ], !dbg !2514
  br i1 %val10, label %loop.body, label %loop.exit, !dbg !2514

loop.body:                                        ; preds = %and.phi9
  %21 = load i64, ptr %index, align 8, !dbg !2518
  %add = add i64 %21, 1, !dbg !2518
  store i64 %add, ptr %index, align 8, !dbg !2518
  br label %loop.cond, !dbg !2518

loop.exit:                                        ; preds = %and.phi9
  %22 = load i64, ptr %len, align 8, !dbg !2519
  %23 = load i64, ptr %index, align 8, !dbg !2520
  %eq = icmp eq i64 %22, %23, !dbg !2519
  br i1 %eq, label %if.then, label %if.exit, !dbg !2519

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.EMPTY_STRING to i64), ptr %reterr, align 8, !dbg !2521
  br label %err_retblock, !dbg !2521

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !2522, !DIExpression(), !2523)
  store i8 0, ptr %is_negative, align 1, !dbg !2523
  %ptradd11 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2524
  %24 = load i64, ptr %ptradd11, align 8, !dbg !2524
  %25 = load ptr, ptr %self1, align 8, !dbg !2524
  %26 = load i64, ptr %index, align 8, !dbg !2526
  %ge12 = icmp uge i64 %26, %24, !dbg !2526
  %27 = call i1 @llvm.expect.i1(i1 %ge12, i1 false), !dbg !2526
  br i1 %27, label %panic13, label %checkok20, !dbg !2526

checkok20:                                        ; preds = %if.exit
  %ptradd21 = getelementptr inbounds i8, ptr %25, i64 %26, !dbg !2526
  %28 = load i8, ptr %ptradd21, align 1
  store i8 %28, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok20
  %29 = load i8, ptr %switch, align 1
  switch i8 %29, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case24
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then22, !dbg !2527

if.then22:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @std.core.string.NEGATIVE_VALUE to i64), ptr %reterr, align 8, !dbg !2529
  br label %err_retblock, !dbg !2529

switch.case24:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !2530
  %add25 = add i64 %30, 1, !dbg !2530
  store i64 %add25, ptr %index, align 8, !dbg !2530
  br label %switch.exit, !dbg !2530

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2532

switch.exit:                                      ; preds = %switch.default, %switch.case24
  %31 = load i64, ptr %len, align 8, !dbg !2534
  %32 = load i64, ptr %index, align 8, !dbg !2535
  %eq26 = icmp eq i64 %31, %32, !dbg !2534
  br i1 %eq26, label %if.then27, label %if.exit28, !dbg !2534

if.then27:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2536
  br label %err_retblock, !dbg !2536

if.exit28:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !2537, !DIExpression(), !2538)
  %33 = load i32, ptr %base2, align 4, !dbg !2539
  %trunc29 = trunc i32 %33 to i8, !dbg !2539
  store i8 %trunc29, ptr %base_used, align 1, !dbg !2539
  %ptradd30 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2540
  %34 = load i64, ptr %ptradd30, align 8, !dbg !2540
  %35 = load ptr, ptr %self1, align 8, !dbg !2540
  %36 = load i64, ptr %index, align 8, !dbg !2541
  %ge31 = icmp uge i64 %36, %34, !dbg !2541
  %37 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !2541
  br i1 %37, label %panic32, label %checkok39, !dbg !2541

checkok39:                                        ; preds = %if.exit28
  %ptradd40 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !2541
  %38 = load i8, ptr %ptradd40, align 1, !dbg !2541
  %eq41 = icmp eq i8 %38, 48, !dbg !2540
  br i1 %eq41, label %and.rhs42, label %and.phi44, !dbg !2540

and.rhs42:                                        ; preds = %checkok39
  %39 = load i32, ptr %base2, align 4, !dbg !2542
  %eq43 = icmp eq i32 %39, 10, !dbg !2542
  br label %and.phi44, !dbg !2542

and.phi44:                                        ; preds = %and.rhs42, %checkok39
  %val45 = phi i1 [ false, %checkok39 ], [ %eq43, %and.rhs42 ], !dbg !2542
  br i1 %val45, label %if.then46, label %if.exit75, !dbg !2542

if.then46:                                        ; preds = %and.phi44
  %40 = load i64, ptr %index, align 8, !dbg !2543
  %add47 = add i64 %40, 1, !dbg !2543
  store i64 %add47, ptr %index, align 8, !dbg !2543
  %41 = load i64, ptr %index, align 8, !dbg !2545
  %42 = load i64, ptr %len, align 8, !dbg !2546
  %eq48 = icmp eq i64 %41, %42, !dbg !2545
  br i1 %eq48, label %if.then49, label %if.exit50, !dbg !2545

if.then49:                                        ; preds = %if.then46
  store i8 0, ptr %blockret, align 1, !dbg !2547
  br label %expr_block.exit, !dbg !2547

if.exit50:                                        ; preds = %if.then46
  %ptradd51 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2548
  %43 = load i64, ptr %ptradd51, align 8, !dbg !2548
  %44 = load ptr, ptr %self1, align 8, !dbg !2548
  %45 = load i64, ptr %index, align 8, !dbg !2550
  %ge52 = icmp uge i64 %45, %43, !dbg !2550
  %46 = call i1 @llvm.expect.i1(i1 %ge52, i1 false), !dbg !2550
  br i1 %46, label %panic53, label %checkok60, !dbg !2550

checkok60:                                        ; preds = %if.exit50
  %ptradd61 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !2550
  %47 = load i8, ptr %ptradd61, align 1
  store i8 %47, ptr %switch62, align 1
  br label %switch.entry63

switch.entry63:                                   ; preds = %checkok60
  %48 = load i8, ptr %switch62, align 1
  switch i8 %48, label %switch.default70 [
    i8 120, label %switch.case64
    i8 88, label %switch.case64
    i8 98, label %switch.case66
    i8 66, label %switch.case66
    i8 111, label %switch.case68
    i8 79, label %switch.case68
  ]

switch.case64:                                    ; preds = %switch.entry63, %switch.entry63
  store i8 16, ptr %base_used, align 1, !dbg !2551
  %49 = load i64, ptr %index, align 8, !dbg !2553
  %add65 = add i64 %49, 1, !dbg !2553
  store i64 %add65, ptr %index, align 8, !dbg !2553
  br label %switch.exit71, !dbg !2553

switch.case66:                                    ; preds = %switch.entry63, %switch.entry63
  store i8 2, ptr %base_used, align 1, !dbg !2554
  %50 = load i64, ptr %index, align 8, !dbg !2556
  %add67 = add i64 %50, 1, !dbg !2556
  store i64 %add67, ptr %index, align 8, !dbg !2556
  br label %switch.exit71, !dbg !2556

switch.case68:                                    ; preds = %switch.entry63, %switch.entry63
  store i8 8, ptr %base_used, align 1, !dbg !2557
  %51 = load i64, ptr %index, align 8, !dbg !2559
  %add69 = add i64 %51, 1, !dbg !2559
  store i64 %add69, ptr %index, align 8, !dbg !2559
  br label %switch.exit71, !dbg !2559

switch.default70:                                 ; preds = %switch.entry63
  br label %switch.exit71, !dbg !2560

switch.exit71:                                    ; preds = %switch.default70, %switch.case68, %switch.case66, %switch.case64
  %52 = load i64, ptr %len, align 8, !dbg !2562
  %53 = load i64, ptr %index, align 8, !dbg !2563
  %eq72 = icmp eq i64 %52, %53, !dbg !2562
  br i1 %eq72, label %if.then73, label %if.exit74, !dbg !2562

if.then73:                                        ; preds = %switch.exit71
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2564
  br label %err_retblock, !dbg !2564

if.exit74:                                        ; preds = %switch.exit71
  br label %if.exit75, !dbg !2564

if.exit75:                                        ; preds = %if.exit74, %and.phi44
    #dbg_declare(ptr %value, !2565, !DIExpression(), !2566)
  store i8 0, ptr %value, align 1, !dbg !2567
  br label %loop.cond76, !dbg !2568

loop.cond76:                                      ; preds = %loop.exit138, %if.exit75
  %54 = load i64, ptr %index, align 8, !dbg !2569
  %55 = load i64, ptr %len, align 8, !dbg !2571
  %neq = icmp ne i64 %54, %55, !dbg !2569
  br i1 %neq, label %loop.body77, label %loop.exit139, !dbg !2569

loop.body77:                                      ; preds = %loop.cond76
    #dbg_declare(ptr %c78, !2572, !DIExpression(), !2574)
  %ptradd79 = getelementptr inbounds i8, ptr %self1, i64 8, !dbg !2575
  %56 = load i64, ptr %ptradd79, align 8, !dbg !2575
  %57 = load ptr, ptr %self1, align 8, !dbg !2575
  %58 = load i64, ptr %index, align 8, !dbg !2576
  %add80 = add i64 %58, 1, !dbg !2576
  store i64 %add80, ptr %index, align 8, !dbg !2576
  %ge81 = icmp uge i64 %58, %56, !dbg !2576
  %59 = call i1 @llvm.expect.i1(i1 %ge81, i1 false), !dbg !2576
  br i1 %59, label %panic82, label %checkok89, !dbg !2576

checkok89:                                        ; preds = %loop.body77
  %ptradd90 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !2576
  %60 = load i8, ptr %ptradd90, align 1, !dbg !2576
  store i8 %60, ptr %c78, align 1, !dbg !2576
  store i8 1, ptr %switch91, align 1
  br label %switch.entry92

switch.entry92:                                   ; preds = %checkok89
  %61 = load i8, ptr %switch91, align 1
  %62 = trunc i8 %61 to i1
  %63 = load i8, ptr %base_used, align 1, !dbg !2577
  %zext93 = zext i8 %63 to i32, !dbg !2577
  %gt94 = icmp ugt i32 10, %zext93, !dbg !2577
  br i1 %gt94, label %or.phi, label %or.rhs, !dbg !2577

or.rhs:                                           ; preds = %switch.entry92
  %64 = load i8, ptr %c78, align 1, !dbg !2579
  %lt95 = icmp ult i8 %64, 65, !dbg !2579
  br label %or.phi, !dbg !2579

or.phi:                                           ; preds = %or.rhs, %switch.entry92
  %val96 = phi i1 [ true, %switch.entry92 ], [ %lt95, %or.rhs ], !dbg !2579
  %eq97 = icmp eq i1 %val96, %62, !dbg !2579
  br i1 %eq97, label %switch.case98, label %next_if, !dbg !2579

switch.case98:                                    ; preds = %or.phi
  %65 = load i8, ptr %c78, align 1, !dbg !2580
  %sub = sub i8 %65, 48, !dbg !2580
  store i8 %sub, ptr %c78, align 1, !dbg !2580
  br label %switch.exit114, !dbg !2580

next_if:                                          ; preds = %or.phi
  %66 = load i8, ptr %c78, align 1, !dbg !2582
  %le99 = icmp ule i8 %66, 70, !dbg !2582
  %eq100 = icmp eq i1 %le99, %62, !dbg !2582
  br i1 %eq100, label %switch.case101, label %next_if103, !dbg !2582

switch.case101:                                   ; preds = %next_if
  %67 = load i8, ptr %c78, align 1, !dbg !2583
  %sub102 = sub i8 %67, 55, !dbg !2583
  store i8 %sub102, ptr %c78, align 1, !dbg !2583
  br label %switch.exit114, !dbg !2583

next_if103:                                       ; preds = %next_if
  %68 = load i8, ptr %c78, align 1, !dbg !2585
  %lt104 = icmp ult i8 %68, 97, !dbg !2585
  br i1 %lt104, label %or.phi107, label %or.rhs105, !dbg !2585

or.rhs105:                                        ; preds = %next_if103
  %69 = load i8, ptr %c78, align 1, !dbg !2586
  %gt106 = icmp ugt i8 %69, 102, !dbg !2586
  br label %or.phi107, !dbg !2586

or.phi107:                                        ; preds = %or.rhs105, %next_if103
  %val108 = phi i1 [ true, %next_if103 ], [ %gt106, %or.rhs105 ], !dbg !2586
  %eq109 = icmp eq i1 %val108, %62, !dbg !2586
  br i1 %eq109, label %switch.case110, label %next_if111, !dbg !2586

switch.case110:                                   ; preds = %or.phi107
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2587
  br label %err_retblock, !dbg !2587

next_if111:                                       ; preds = %or.phi107
  br label %switch.default112, !dbg !2587

switch.default112:                                ; preds = %next_if111
  %70 = load i8, ptr %c78, align 1, !dbg !2589
  %sub113 = sub i8 %70, 87, !dbg !2589
  store i8 %sub113, ptr %c78, align 1, !dbg !2589
  br label %switch.exit114, !dbg !2589

switch.exit114:                                   ; preds = %switch.default112, %switch.case101, %switch.case98
  %71 = load i8, ptr %c78, align 1, !dbg !2591
  %72 = load i8, ptr %base_used, align 1, !dbg !2592
  %ge115 = icmp uge i8 %71, %72, !dbg !2591
  br i1 %ge115, label %if.then116, label %if.exit117, !dbg !2591

if.then116:                                       ; preds = %switch.exit114
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_INTEGER to i64), ptr %reterr, align 8, !dbg !2593
  br label %err_retblock, !dbg !2593

if.exit117:                                       ; preds = %switch.exit114
  %73 = load i8, ptr %is_negative, align 1, !dbg !2594
  %74 = trunc i8 %73 to i1, !dbg !2594
  br i1 %74, label %if.then118, label %if.exit127, !dbg !2594

if.then118:                                       ; preds = %if.exit117
    #dbg_declare(ptr %new_value, !2597, !DIExpression(), !2599)
  %75 = load i8, ptr %value, align 1, !dbg !2600
  %zext119 = zext i8 %75 to i32, !dbg !2600
  %76 = load i8, ptr %base_used, align 1, !dbg !2601
  %zext120 = zext i8 %76 to i32, !dbg !2601
  %mul = mul i32 %zext119, %zext120, !dbg !2600
  %77 = load i8, ptr %c78, align 1, !dbg !2602
  %zext121 = zext i8 %77 to i32, !dbg !2602
  %sub122 = sub i32 %mul, %zext121, !dbg !2600
  %trunc123 = trunc i32 %sub122 to i8, !dbg !2600
  store i8 %trunc123, ptr %new_value, align 1, !dbg !2600
  %78 = load i8, ptr %new_value, align 1, !dbg !2603
  %79 = load i8, ptr %value, align 1, !dbg !2604
  %gt124 = icmp ugt i8 %78, %79, !dbg !2603
  br i1 %gt124, label %if.then125, label %if.exit126, !dbg !2603

if.then125:                                       ; preds = %if.then118
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !2605
  br label %err_retblock, !dbg !2605

if.exit126:                                       ; preds = %if.then118
  %80 = load i8, ptr %new_value, align 1, !dbg !2606
  store i8 %80, ptr %value, align 1, !dbg !2606
  br label %loop.exit138, !dbg !2607

if.exit127:                                       ; preds = %if.exit117
    #dbg_declare(ptr %new_value128, !2608, !DIExpression(), !2609)
  %81 = load i8, ptr %value, align 1, !dbg !2610
  %zext129 = zext i8 %81 to i32, !dbg !2610
  %82 = load i8, ptr %base_used, align 1, !dbg !2611
  %zext130 = zext i8 %82 to i32, !dbg !2611
  %mul131 = mul i32 %zext129, %zext130, !dbg !2610
  %83 = load i8, ptr %c78, align 1, !dbg !2612
  %zext132 = zext i8 %83 to i32, !dbg !2612
  %add133 = add i32 %mul131, %zext132, !dbg !2610
  %trunc134 = trunc i32 %add133 to i8, !dbg !2610
  store i8 %trunc134, ptr %new_value128, align 1, !dbg !2610
  %84 = load i8, ptr %new_value128, align 1, !dbg !2613
  %85 = load i8, ptr %value, align 1, !dbg !2614
  %lt135 = icmp ult i8 %84, %85, !dbg !2613
  br i1 %lt135, label %if.then136, label %if.exit137, !dbg !2613

if.then136:                                       ; preds = %if.exit127
  store i64 ptrtoint (ptr @std.core.string.INTEGER_OVERFLOW to i64), ptr %reterr, align 8, !dbg !2615
  br label %err_retblock, !dbg !2615

if.exit137:                                       ; preds = %if.exit127
  %86 = load i8, ptr %new_value128, align 1, !dbg !2616
  store i8 %86, ptr %value, align 1, !dbg !2616
  br label %loop.exit138, !dbg !2616

loop.exit138:                                     ; preds = %if.exit137, %if.exit126
  br label %loop.cond76, !dbg !2616

loop.exit139:                                     ; preds = %loop.cond76
  %87 = load i8, ptr %value, align 1, !dbg !2617
  store i8 %87, ptr %blockret, align 1, !dbg !2617
  br label %expr_block.exit, !dbg !2617

expr_block.exit:                                  ; preds = %loop.exit139, %if.then49
  %88 = load i8, ptr %blockret, align 1, !dbg !2617
  store i8 %88, ptr %0, align 1, !dbg !2617
  ret i64 0, !dbg !2617

err_retblock:                                     ; preds = %if.then136, %if.then125, %if.then116, %switch.case110, %if.then73, %if.then27, %if.then22, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !2617
  ret i64 %89, !dbg !2617

panic:                                            ; preds = %and.rhs4
  store i64 256, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %zext, ptr %taddr7, align 8
  %92 = insertvalue %any undef, ptr %taddr7, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd8, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.73, i64 8, ptr @.func.90, i64 8, i32 19, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !2514
  unreachable, !dbg !2514

panic13:                                          ; preds = %if.exit
  store i64 %24, ptr %taddr14, align 8
  %95 = insertvalue %any undef, ptr %taddr14, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr15, align 8
  %97 = insertvalue %any undef, ptr %taddr15, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %98, ptr %ptradd17, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.90, i64 8, i32 857, ptr byval(%"any[]") align 8 %indirectarg19) #6, !dbg !2526
  unreachable, !dbg !2526

panic32:                                          ; preds = %if.exit28
  store i64 %34, ptr %taddr33, align 8
  %100 = insertvalue %any undef, ptr %taddr33, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr34, align 8
  %102 = insertvalue %any undef, ptr %taddr34, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %103, ptr %ptradd36, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.90, i64 8, i32 870, ptr byval(%"any[]") align 8 %indirectarg38) #6, !dbg !2541
  unreachable, !dbg !2541

panic53:                                          ; preds = %if.exit50
  store i64 %43, ptr %taddr54, align 8
  %105 = insertvalue %any undef, ptr %taddr54, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr55, align 8
  %107 = insertvalue %any undef, ptr %taddr55, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots56, align 16
  %ptradd57 = getelementptr inbounds i8, ptr %varargslots56, i64 16
  store %any %108, ptr %ptradd57, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp58" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp58", ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.90, i64 8, i32 874, ptr byval(%"any[]") align 8 %indirectarg59) #6, !dbg !2550
  unreachable, !dbg !2550

panic82:                                          ; preds = %loop.body77
  store i64 %56, ptr %taddr83, align 8
  %110 = insertvalue %any undef, ptr %taddr83, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr84, align 8
  %112 = insertvalue %any undef, ptr %taddr84, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %111, ptr %varargslots85, align 16
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %113, ptr %ptradd86, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp87", ptr %indirectarg88, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func.90, i64 8, i32 896, ptr byval(%"any[]") align 8 %indirectarg88) #6, !dbg !2576
  unreachable, !dbg !2576
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_double(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2618 {
entry:
  %self = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %chars = alloca %"char[]", align 8
  %blockret = alloca double, align 8
  %sign = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots8 = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca i64, align 8
  %varargslots32 = alloca [2 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %cmp.idx46 = alloca i64, align 8
  %cmp.idx60 = alloca i64, align 8
  %cmp.idx72 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %varargslots93 = alloca [2 x %any], align 16
  %indirectarg96 = alloca %"any[]", align 8
  %taddr105 = alloca i64, align 8
  %taddr106 = alloca i64, align 8
  %varargslots107 = alloca [2 x %any], align 16
  %indirectarg110 = alloca %"any[]", align 8
  %taddr119 = alloca i64, align 8
  %taddr120 = alloca i64, align 8
  %varargslots121 = alloca [2 x %any], align 16
  %indirectarg124 = alloca %"any[]", align 8
  %chars128 = alloca %"char[]", align 8
  %sign129 = alloca i32, align 4
  %blockret130 = alloca double, align 8
  %scale = alloca double, align 8
  %x = alloca i32, align 4
  %rp = alloca i64, align 8
  %dc = alloca i64, align 8
  %c = alloca i8, align 1
  %got_rad = alloca i8, align 1
  %got_digit = alloca i8, align 1
  %got_tail = alloca i8, align 1
  %len = alloca i64, align 8
  %last_char = alloca i64, align 8
  %index = alloca i64, align 8
  %y = alloca double, align 8
  %taddr136 = alloca i64, align 8
  %taddr137 = alloca i64, align 8
  %varargslots138 = alloca [2 x %any], align 16
  %indirectarg141 = alloca %"any[]", align 8
  %taddr165 = alloca i64, align 8
  %taddr166 = alloca i64, align 8
  %varargslots167 = alloca [2 x %any], align 16
  %indirectarg170 = alloca %"any[]", align 8
  %taddr185 = alloca i64, align 8
  %taddr186 = alloca i64, align 8
  %varargslots187 = alloca [2 x %any], align 16
  %indirectarg190 = alloca %"any[]", align 8
  %d = alloca i32, align 4
  %switch229 = alloca i8, align 1
  %taddr261 = alloca i64, align 8
  %taddr262 = alloca i64, align 8
  %varargslots263 = alloca [2 x %any], align 16
  %indirectarg266 = alloca %"any[]", align 8
  %e2 = alloca i64, align 8
  %e2val = alloca i64, align 8
  %taddr291 = alloca i64, align 8
  %taddr292 = alloca i64, align 8
  %varargslots293 = alloca [2 x %any], align 16
  %indirectarg296 = alloca %"any[]", align 8
  %taddr299 = alloca i64, align 8
  %varargslots300 = alloca [1 x %any], align 16
  %indirectarg302 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %error_var = alloca i64, align 8
  %bits = alloca i32, align 4
  %bias = alloca double, align 8
  %x347 = alloca double, align 8
  %n = alloca i32, align 4
  %mag = alloca double, align 8
  %sgn = alloca double, align 8
  %x351 = alloca double, align 8
  %y352 = alloca double, align 8
  %x377 = alloca double, align 8
  %n379 = alloca i32, align 4
  %chars382 = alloca %"char[]", align 8
  %sign383 = alloca i32, align 4
  %blockret384 = alloca double, align 8
  %x387 = alloca [128 x i32], align 16
  %emax = alloca i32, align 4
  %index388 = alloca i64, align 8
  %got_digit389 = alloca i8, align 1
  %taddr393 = alloca i64, align 8
  %taddr394 = alloca i64, align 8
  %varargslots395 = alloca [2 x %any], align 16
  %indirectarg398 = alloca %"any[]", align 8
  %got_rad401 = alloca i8, align 1
  %lrp = alloca i64, align 8
  %dc402 = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %lnz = alloca i32, align 4
  %len403 = alloca i64, align 8
  %last_char405 = alloca i64, align 8
  %c410 = alloca i8, align 1
  %taddr415 = alloca i64, align 8
  %taddr416 = alloca i64, align 8
  %varargslots417 = alloca [2 x %any], align 16
  %indirectarg420 = alloca %"any[]", align 8
  %taddr448 = alloca i64, align 8
  %taddr449 = alloca i64, align 8
  %varargslots450 = alloca [2 x %any], align 16
  %indirectarg453 = alloca %"any[]", align 8
  %taddr468 = alloca i64, align 8
  %taddr469 = alloca i64, align 8
  %varargslots470 = alloca [2 x %any], align 16
  %indirectarg473 = alloca %"any[]", align 8
  %switch493 = alloca i8, align 1
  %taddr513 = alloca i64, align 8
  %varargslots514 = alloca [1 x %any], align 16
  %indirectarg516 = alloca %"any[]", align 8
  %taddr520 = alloca i64, align 8
  %taddr521 = alloca i64, align 8
  %varargslots522 = alloca [2 x %any], align 16
  %indirectarg525 = alloca %"any[]", align 8
  %taddr530 = alloca i64, align 8
  %varargslots531 = alloca [1 x %any], align 16
  %indirectarg533 = alloca %"any[]", align 8
  %taddr537 = alloca i64, align 8
  %taddr538 = alloca i64, align 8
  %varargslots539 = alloca [2 x %any], align 16
  %indirectarg542 = alloca %"any[]", align 8
  %taddr553 = alloca i64, align 8
  %varargslots554 = alloca [1 x %any], align 16
  %indirectarg556 = alloca %"any[]", align 8
  %taddr560 = alloca i64, align 8
  %taddr561 = alloca i64, align 8
  %varargslots562 = alloca [2 x %any], align 16
  %indirectarg565 = alloca %"any[]", align 8
  %taddr594 = alloca i64, align 8
  %taddr595 = alloca i64, align 8
  %varargslots596 = alloca [2 x %any], align 16
  %indirectarg599 = alloca %"any[]", align 8
  %e10 = alloca i64, align 8
  %taddr621 = alloca i64, align 8
  %taddr622 = alloca i64, align 8
  %varargslots623 = alloca [2 x %any], align 16
  %indirectarg626 = alloca %"any[]", align 8
  %taddr630 = alloca i64, align 8
  %varargslots631 = alloca [1 x %any], align 16
  %indirectarg633 = alloca %"any[]", align 8
  %retparam637 = alloca i64, align 8
  %error_var641 = alloca i64, align 8
  %taddr687 = alloca i64, align 8
  %varargslots688 = alloca [1 x %any], align 16
  %indirectarg690 = alloca %"any[]", align 8
  %taddr694 = alloca i64, align 8
  %taddr695 = alloca i64, align 8
  %varargslots696 = alloca [2 x %any], align 16
  %indirectarg699 = alloca %"any[]", align 8
  %a = alloca i32, align 4
  %z = alloca i32, align 4
  %e2707 = alloca i32, align 4
  %rp708 = alloca i64, align 8
  %taddr733 = alloca i64, align 8
  %varargslots734 = alloca [1 x %any], align 16
  %indirectarg736 = alloca %"any[]", align 8
  %taddr740 = alloca i64, align 8
  %taddr741 = alloca i64, align 8
  %varargslots742 = alloca [2 x %any], align 16
  %indirectarg745 = alloca %"any[]", align 8
  %bitlim = alloca i32, align 4
  %taddr760 = alloca i32, align 4
  %varargslots761 = alloca [1 x %any], align 16
  %indirectarg763 = alloca %"any[]", align 8
  %taddr776 = alloca i64, align 8
  %varargslots777 = alloca [1 x %any], align 16
  %indirectarg779 = alloca %"any[]", align 8
  %taddr783 = alloca i64, align 8
  %taddr784 = alloca i64, align 8
  %varargslots785 = alloca [2 x %any], align 16
  %indirectarg788 = alloca %"any[]", align 8
  %rpm9 = alloca i64, align 8
  %p10 = alloca i32, align 4
  %taddr808 = alloca i64, align 8
  %varargslots809 = alloca [1 x %any], align 16
  %indirectarg811 = alloca %"any[]", align 8
  %taddr815 = alloca i64, align 8
  %taddr816 = alloca i64, align 8
  %varargslots817 = alloca [2 x %any], align 16
  %indirectarg820 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %tmp = alloca i32, align 4
  %taddr829 = alloca i64, align 8
  %varargslots830 = alloca [1 x %any], align 16
  %indirectarg832 = alloca %"any[]", align 8
  %taddr836 = alloca i64, align 8
  %taddr837 = alloca i64, align 8
  %varargslots838 = alloca [2 x %any], align 16
  %indirectarg841 = alloca %"any[]", align 8
  %taddr851 = alloca i64, align 8
  %varargslots852 = alloca [1 x %any], align 16
  %indirectarg854 = alloca %"any[]", align 8
  %taddr858 = alloca i64, align 8
  %taddr859 = alloca i64, align 8
  %varargslots860 = alloca [2 x %any], align 16
  %indirectarg863 = alloca %"any[]", align 8
  %taddr869 = alloca i64, align 8
  %varargslots870 = alloca [1 x %any], align 16
  %indirectarg872 = alloca %"any[]", align 8
  %taddr876 = alloca i64, align 8
  %taddr877 = alloca i64, align 8
  %varargslots878 = alloca [2 x %any], align 16
  %indirectarg881 = alloca %"any[]", align 8
  %taddr898 = alloca i64, align 8
  %varargslots899 = alloca [1 x %any], align 16
  %indirectarg901 = alloca %"any[]", align 8
  %taddr905 = alloca i64, align 8
  %taddr906 = alloca i64, align 8
  %varargslots907 = alloca [2 x %any], align 16
  %indirectarg910 = alloca %"any[]", align 8
  %taddr929 = alloca i64, align 8
  %varargslots930 = alloca [1 x %any], align 16
  %indirectarg932 = alloca %"any[]", align 8
  %taddr936 = alloca i64, align 8
  %taddr937 = alloca i64, align 8
  %varargslots938 = alloca [2 x %any], align 16
  %indirectarg941 = alloca %"any[]", align 8
  %taddr956 = alloca i64, align 8
  %varargslots957 = alloca [1 x %any], align 16
  %indirectarg959 = alloca %"any[]", align 8
  %taddr963 = alloca i64, align 8
  %taddr964 = alloca i64, align 8
  %varargslots965 = alloca [2 x %any], align 16
  %indirectarg968 = alloca %"any[]", align 8
  %carry977 = alloca i32, align 4
  %tmp982 = alloca i64, align 8
  %taddr986 = alloca i64, align 8
  %varargslots987 = alloca [1 x %any], align 16
  %indirectarg989 = alloca %"any[]", align 8
  %taddr993 = alloca i64, align 8
  %taddr994 = alloca i64, align 8
  %varargslots995 = alloca [2 x %any], align 16
  %indirectarg998 = alloca %"any[]", align 8
  %taddr1011 = alloca i64, align 8
  %varargslots1012 = alloca [1 x %any], align 16
  %indirectarg1014 = alloca %"any[]", align 8
  %taddr1018 = alloca i64, align 8
  %taddr1019 = alloca i64, align 8
  %varargslots1020 = alloca [2 x %any], align 16
  %indirectarg1023 = alloca %"any[]", align 8
  %taddr1032 = alloca i64, align 8
  %varargslots1033 = alloca [1 x %any], align 16
  %indirectarg1035 = alloca %"any[]", align 8
  %taddr1039 = alloca i64, align 8
  %taddr1040 = alloca i64, align 8
  %varargslots1041 = alloca [2 x %any], align 16
  %indirectarg1044 = alloca %"any[]", align 8
  %taddr1060 = alloca i64, align 8
  %varargslots1061 = alloca [1 x %any], align 16
  %indirectarg1063 = alloca %"any[]", align 8
  %taddr1067 = alloca i64, align 8
  %taddr1068 = alloca i64, align 8
  %varargslots1069 = alloca [2 x %any], align 16
  %indirectarg1072 = alloca %"any[]", align 8
  %taddr1100 = alloca i64, align 8
  %varargslots1101 = alloca [1 x %any], align 16
  %indirectarg1103 = alloca %"any[]", align 8
  %taddr1107 = alloca i64, align 8
  %taddr1108 = alloca i64, align 8
  %varargslots1109 = alloca [2 x %any], align 16
  %indirectarg1112 = alloca %"any[]", align 8
  %taddr1118 = alloca i64, align 8
  %varargslots1119 = alloca [1 x %any], align 16
  %indirectarg1121 = alloca %"any[]", align 8
  %taddr1125 = alloca i64, align 8
  %taddr1126 = alloca i64, align 8
  %varargslots1127 = alloca [2 x %any], align 16
  %indirectarg1130 = alloca %"any[]", align 8
  %taddr1138 = alloca i64, align 8
  %varargslots1139 = alloca [1 x %any], align 16
  %indirectarg1141 = alloca %"any[]", align 8
  %taddr1145 = alloca i64, align 8
  %taddr1146 = alloca i64, align 8
  %varargslots1147 = alloca [2 x %any], align 16
  %indirectarg1150 = alloca %"any[]", align 8
  %carry1156 = alloca i32, align 4
  %sh = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr1167 = alloca i64, align 8
  %varargslots1168 = alloca [1 x %any], align 16
  %indirectarg1170 = alloca %"any[]", align 8
  %taddr1174 = alloca i64, align 8
  %taddr1175 = alloca i64, align 8
  %varargslots1176 = alloca [2 x %any], align 16
  %indirectarg1179 = alloca %"any[]", align 8
  %taddr1185 = alloca i64, align 8
  %varargslots1186 = alloca [1 x %any], align 16
  %indirectarg1188 = alloca %"any[]", align 8
  %taddr1192 = alloca i64, align 8
  %taddr1193 = alloca i64, align 8
  %varargslots1194 = alloca [2 x %any], align 16
  %indirectarg1197 = alloca %"any[]", align 8
  %taddr1210 = alloca i64, align 8
  %varargslots1211 = alloca [1 x %any], align 16
  %indirectarg1213 = alloca %"any[]", align 8
  %taddr1217 = alloca i64, align 8
  %taddr1218 = alloca i64, align 8
  %varargslots1219 = alloca [2 x %any], align 16
  %indirectarg1222 = alloca %"any[]", align 8
  %taddr1228 = alloca i64, align 8
  %varargslots1229 = alloca [1 x %any], align 16
  %indirectarg1231 = alloca %"any[]", align 8
  %taddr1235 = alloca i64, align 8
  %taddr1236 = alloca i64, align 8
  %varargslots1237 = alloca [2 x %any], align 16
  %indirectarg1240 = alloca %"any[]", align 8
  %tmp1262 = alloca i32, align 4
  %taddr1266 = alloca i64, align 8
  %varargslots1267 = alloca [1 x %any], align 16
  %indirectarg1269 = alloca %"any[]", align 8
  %taddr1273 = alloca i64, align 8
  %taddr1274 = alloca i64, align 8
  %varargslots1275 = alloca [2 x %any], align 16
  %indirectarg1278 = alloca %"any[]", align 8
  %taddr1282 = alloca i32, align 4
  %varargslots1283 = alloca [1 x %any], align 16
  %indirectarg1285 = alloca %"any[]", align 8
  %taddr1289 = alloca i32, align 4
  %varargslots1290 = alloca [1 x %any], align 16
  %indirectarg1292 = alloca %"any[]", align 8
  %taddr1300 = alloca i64, align 8
  %varargslots1301 = alloca [1 x %any], align 16
  %indirectarg1303 = alloca %"any[]", align 8
  %taddr1307 = alloca i64, align 8
  %taddr1308 = alloca i64, align 8
  %varargslots1309 = alloca [2 x %any], align 16
  %indirectarg1312 = alloca %"any[]", align 8
  %taddr1318 = alloca i64, align 8
  %varargslots1319 = alloca [1 x %any], align 16
  %indirectarg1321 = alloca %"any[]", align 8
  %taddr1325 = alloca i64, align 8
  %taddr1326 = alloca i64, align 8
  %varargslots1327 = alloca [2 x %any], align 16
  %indirectarg1330 = alloca %"any[]", align 8
  %taddr1335 = alloca i32, align 4
  %varargslots1336 = alloca [1 x %any], align 16
  %indirectarg1338 = alloca %"any[]", align 8
  %taddr1344 = alloca i32, align 4
  %varargslots1345 = alloca [1 x %any], align 16
  %indirectarg1347 = alloca %"any[]", align 8
  %taddr1351 = alloca i32, align 4
  %varargslots1352 = alloca [1 x %any], align 16
  %indirectarg1354 = alloca %"any[]", align 8
  %taddr1362 = alloca i64, align 8
  %varargslots1363 = alloca [1 x %any], align 16
  %indirectarg1365 = alloca %"any[]", align 8
  %taddr1369 = alloca i64, align 8
  %taddr1370 = alloca i64, align 8
  %varargslots1371 = alloca [2 x %any], align 16
  %indirectarg1374 = alloca %"any[]", align 8
  %taddr1398 = alloca i64, align 8
  %varargslots1399 = alloca [1 x %any], align 16
  %indirectarg1401 = alloca %"any[]", align 8
  %taddr1405 = alloca i64, align 8
  %taddr1406 = alloca i64, align 8
  %varargslots1407 = alloca [2 x %any], align 16
  %indirectarg1410 = alloca %"any[]", align 8
  %taddr1421 = alloca i64, align 8
  %varargslots1422 = alloca [1 x %any], align 16
  %indirectarg1424 = alloca %"any[]", align 8
  %taddr1428 = alloca i64, align 8
  %taddr1429 = alloca i64, align 8
  %varargslots1430 = alloca [2 x %any], align 16
  %indirectarg1433 = alloca %"any[]", align 8
  %y1440 = alloca double, align 8
  %i1441 = alloca i32, align 4
  %taddr1455 = alloca i64, align 8
  %varargslots1456 = alloca [1 x %any], align 16
  %indirectarg1458 = alloca %"any[]", align 8
  %taddr1462 = alloca i64, align 8
  %taddr1463 = alloca i64, align 8
  %varargslots1464 = alloca [2 x %any], align 16
  %indirectarg1467 = alloca %"any[]", align 8
  %taddr1477 = alloca i64, align 8
  %varargslots1478 = alloca [1 x %any], align 16
  %indirectarg1480 = alloca %"any[]", align 8
  %taddr1484 = alloca i64, align 8
  %taddr1485 = alloca i64, align 8
  %varargslots1486 = alloca [2 x %any], align 16
  %indirectarg1489 = alloca %"any[]", align 8
  %denormal = alloca i8, align 1
  %bits1498 = alloca i32, align 4
  %bias1511 = alloca double, align 8
  %frac = alloca double, align 8
  %x1514 = alloca double, align 8
  %n1517 = alloca i32, align 4
  %mag1518 = alloca double, align 8
  %sgn1519 = alloca double, align 8
  %x1520 = alloca double, align 8
  %y1521 = alloca double, align 8
  %x1522 = alloca double, align 8
  %n1524 = alloca i32, align 4
  %t = alloca i32, align 4
  %taddr1540 = alloca i64, align 8
  %varargslots1541 = alloca [1 x %any], align 16
  %indirectarg1543 = alloca %"any[]", align 8
  %taddr1547 = alloca i64, align 8
  %taddr1548 = alloca i64, align 8
  %varargslots1549 = alloca [2 x %any], align 16
  %indirectarg1552 = alloca %"any[]", align 8
  %switch1555 = alloca i8, align 1
  %x1618 = alloca double, align 8
  %x1646 = alloca double, align 8
  %n1647 = alloca i32, align 4
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !2623, !DIExpression(), !2624)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars, ptr align 8 %self, i32 16, i1 false)
    #dbg_declare(ptr %sign, !2625, !DIExpression(), !2627)
  store i32 1, ptr %sign, align 4, !dbg !2629
  br label %loop.cond, !dbg !2630

loop.cond:                                        ; preds = %checkok12, %entry
  %ptradd1 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2631
  %3 = load i64, ptr %ptradd1, align 8, !dbg !2631
  %i2b = icmp ne i64 %3, 0, !dbg !2631
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !2631

and.rhs:                                          ; preds = %loop.cond
  %ptradd2 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2633
  %4 = load i64, ptr %ptradd2, align 8, !dbg !2633
  %5 = load ptr, ptr %chars, align 8, !dbg !2633
  %ge = icmp sge i64 0, %4, !dbg !2634
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2634
  br i1 %6, label %panic, label %checkok, !dbg !2634

checkok:                                          ; preds = %and.rhs
  %7 = load i8, ptr %5, align 1, !dbg !2634
  %eq = icmp eq i8 %7, 32, !dbg !2633
  br label %and.phi, !dbg !2633

and.phi:                                          ; preds = %checkok, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %eq, %checkok ], !dbg !2633
  br i1 %val, label %loop.body, label %loop.exit, !dbg !2633

loop.body:                                        ; preds = %and.phi
  %8 = load %"char[]", ptr %chars, align 8, !dbg !2635
  %9 = extractvalue %"char[]" %8, 0, !dbg !2635
  %10 = extractvalue %"char[]" %8, 1, !dbg !2636
  %gt = icmp sgt i64 1, %10, !dbg !2636
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2636
  br i1 %11, label %panic5, label %checkok12, !dbg !2636

checkok12:                                        ; preds = %loop.body
  %size = sub i64 %10, 1, !dbg !2635
  %ptradd13 = getelementptr inbounds i8, ptr %9, i64 1, !dbg !2635
  %12 = insertvalue %"char[]" undef, ptr %ptradd13, 0, !dbg !2635
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !2635
  store %"char[]" %13, ptr %chars, align 8, !dbg !2635
  br label %loop.cond, !dbg !2635

loop.exit:                                        ; preds = %and.phi
  %ptradd14 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2637
  %14 = load i64, ptr %ptradd14, align 8, !dbg !2637
  %i2nb = icmp eq i64 %14, 0, !dbg !2637
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2637

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2638
  br label %err_retblock, !dbg !2638

if.exit:                                          ; preds = %loop.exit
  %ptradd15 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2639
  %15 = load i64, ptr %ptradd15, align 8, !dbg !2639
  %neq = icmp ne i64 1, %15, !dbg !2639
  br i1 %neq, label %if.then16, label %if.exit39, !dbg !2639

if.then16:                                        ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2640
  %16 = load i64, ptr %ptradd17, align 8, !dbg !2640
  %17 = load ptr, ptr %chars, align 8, !dbg !2640
  %ge18 = icmp sge i64 0, %16, !dbg !2643
  %18 = call i1 @llvm.expect.i1(i1 %ge18, i1 false), !dbg !2643
  br i1 %18, label %panic19, label %checkok26, !dbg !2643

checkok26:                                        ; preds = %if.then16
  %19 = load i8, ptr %17, align 1
  store i8 %19, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok26
  %20 = load i8, ptr %switch, align 1
  switch i8 %20, label %switch.exit [
    i8 45, label %switch.case
    i8 43, label %switch.case27
  ]

switch.case:                                      ; preds = %switch.entry
  store i32 -1, ptr %sign, align 4, !dbg !2644
  br label %switch.case27, !dbg !2646

switch.case27:                                    ; preds = %switch.entry, %switch.case
  %21 = load %"char[]", ptr %chars, align 8, !dbg !2647
  %22 = extractvalue %"char[]" %21, 0, !dbg !2647
  %23 = extractvalue %"char[]" %21, 1, !dbg !2649
  %gt28 = icmp sgt i64 1, %23, !dbg !2649
  %24 = call i1 @llvm.expect.i1(i1 %gt28, i1 false), !dbg !2649
  br i1 %24, label %panic29, label %checkok36, !dbg !2649

checkok36:                                        ; preds = %switch.case27
  %size37 = sub i64 %23, 1, !dbg !2647
  %ptradd38 = getelementptr inbounds i8, ptr %22, i64 1, !dbg !2647
  %25 = insertvalue %"char[]" undef, ptr %ptradd38, 0, !dbg !2647
  %26 = insertvalue %"char[]" %25, i64 %size37, 1, !dbg !2647
  store %"char[]" %26, ptr %chars, align 8, !dbg !2647
  br label %switch.exit, !dbg !2647

switch.exit:                                      ; preds = %checkok36, %switch.entry
  br label %if.exit39, !dbg !2647

if.exit39:                                        ; preds = %switch.exit, %if.exit
  %27 = load %"char[]", ptr %chars, align 8, !dbg !2650
  %28 = extractvalue %"char[]" %27, 1, !dbg !2650
  %29 = extractvalue %"char[]" %27, 0, !dbg !2650
  %eq40 = icmp eq i64 %28, 8, !dbg !2650
  br i1 %eq40, label %slice_cmp_values, label %slice_cmp_exit, !dbg !2650

slice_cmp_values:                                 ; preds = %if.exit39
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %30 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %30, %28
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd41 = getelementptr inbounds i8, ptr %29, i64 %30
  %ptradd42 = getelementptr inbounds i8, ptr @.str, i64 %30
  %31 = load i8, ptr %ptradd41, align 1
  %32 = load i8, ptr %ptradd42, align 1
  %eq43 = icmp eq i8 %31, %32
  %33 = add i64 %30, 1
  store i64 %33, ptr %cmp.idx, align 8
  br i1 %eq43, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %if.exit39
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %if.exit39 ], [ false, %slice_loop_comparison ]
  br i1 %slice_cmp_phi, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %slice_cmp_exit
  %34 = load %"char[]", ptr %chars, align 8, !dbg !2651
  %35 = extractvalue %"char[]" %34, 1, !dbg !2651
  %36 = extractvalue %"char[]" %34, 0, !dbg !2651
  %eq44 = icmp eq i64 %35, 8, !dbg !2651
  br i1 %eq44, label %slice_cmp_values45, label %slice_cmp_exit53, !dbg !2651

slice_cmp_values45:                               ; preds = %or.rhs
  store i64 0, ptr %cmp.idx46, align 8
  br label %slice_loop_start47

slice_loop_start47:                               ; preds = %slice_loop_comparison49, %slice_cmp_values45
  %37 = load i64, ptr %cmp.idx46, align 8
  %lt48 = icmp slt i64 %37, %35
  br i1 %lt48, label %slice_loop_comparison49, label %slice_cmp_exit53

slice_loop_comparison49:                          ; preds = %slice_loop_start47
  %ptradd50 = getelementptr inbounds i8, ptr %36, i64 %37
  %ptradd51 = getelementptr inbounds i8, ptr @.str.93, i64 %37
  %38 = load i8, ptr %ptradd50, align 1
  %39 = load i8, ptr %ptradd51, align 1
  %eq52 = icmp eq i8 %38, %39
  %40 = add i64 %37, 1
  store i64 %40, ptr %cmp.idx46, align 8
  br i1 %eq52, label %slice_loop_start47, label %slice_cmp_exit53

slice_cmp_exit53:                                 ; preds = %slice_loop_comparison49, %slice_loop_start47, %or.rhs
  %slice_cmp_phi54 = phi i1 [ true, %slice_loop_start47 ], [ false, %or.rhs ], [ false, %slice_loop_comparison49 ]
  br label %or.phi

or.phi:                                           ; preds = %slice_cmp_exit53, %slice_cmp_exit
  %val55 = phi i1 [ true, %slice_cmp_exit ], [ %slice_cmp_phi54, %slice_cmp_exit53 ]
  br i1 %val55, label %if.then56, label %if.exit57

if.then56:                                        ; preds = %or.phi
  %41 = load i32, ptr %sign, align 4, !dbg !2652
  %sifp = sitofp i32 %41 to double, !dbg !2652
  %fmul = fmul double %sifp, 0x7FF0000000000000, !dbg !2652
  store double %fmul, ptr %blockret, align 8, !dbg !2652
  br label %expr_block.exit1650, !dbg !2652

if.exit57:                                        ; preds = %or.phi
  %42 = load %"char[]", ptr %chars, align 8, !dbg !2653
  %43 = extractvalue %"char[]" %42, 1, !dbg !2653
  %44 = extractvalue %"char[]" %42, 0, !dbg !2653
  %eq58 = icmp eq i64 %43, 3, !dbg !2653
  br i1 %eq58, label %slice_cmp_values59, label %slice_cmp_exit67, !dbg !2653

slice_cmp_values59:                               ; preds = %if.exit57
  store i64 0, ptr %cmp.idx60, align 8
  br label %slice_loop_start61

slice_loop_start61:                               ; preds = %slice_loop_comparison63, %slice_cmp_values59
  %45 = load i64, ptr %cmp.idx60, align 8
  %lt62 = icmp slt i64 %45, %43
  br i1 %lt62, label %slice_loop_comparison63, label %slice_cmp_exit67

slice_loop_comparison63:                          ; preds = %slice_loop_start61
  %ptradd64 = getelementptr inbounds i8, ptr %44, i64 %45
  %ptradd65 = getelementptr inbounds i8, ptr @.str.94, i64 %45
  %46 = load i8, ptr %ptradd64, align 1
  %47 = load i8, ptr %ptradd65, align 1
  %eq66 = icmp eq i8 %46, %47
  %48 = add i64 %45, 1
  store i64 %48, ptr %cmp.idx60, align 8
  br i1 %eq66, label %slice_loop_start61, label %slice_cmp_exit67

slice_cmp_exit67:                                 ; preds = %slice_loop_comparison63, %slice_loop_start61, %if.exit57
  %slice_cmp_phi68 = phi i1 [ true, %slice_loop_start61 ], [ false, %if.exit57 ], [ false, %slice_loop_comparison63 ]
  br i1 %slice_cmp_phi68, label %or.phi81, label %or.rhs69

or.rhs69:                                         ; preds = %slice_cmp_exit67
  %49 = load %"char[]", ptr %chars, align 8, !dbg !2654
  %50 = extractvalue %"char[]" %49, 1, !dbg !2654
  %51 = extractvalue %"char[]" %49, 0, !dbg !2654
  %eq70 = icmp eq i64 %50, 3, !dbg !2654
  br i1 %eq70, label %slice_cmp_values71, label %slice_cmp_exit79, !dbg !2654

slice_cmp_values71:                               ; preds = %or.rhs69
  store i64 0, ptr %cmp.idx72, align 8
  br label %slice_loop_start73

slice_loop_start73:                               ; preds = %slice_loop_comparison75, %slice_cmp_values71
  %52 = load i64, ptr %cmp.idx72, align 8
  %lt74 = icmp slt i64 %52, %50
  br i1 %lt74, label %slice_loop_comparison75, label %slice_cmp_exit79

slice_loop_comparison75:                          ; preds = %slice_loop_start73
  %ptradd76 = getelementptr inbounds i8, ptr %51, i64 %52
  %ptradd77 = getelementptr inbounds i8, ptr @.str.95, i64 %52
  %53 = load i8, ptr %ptradd76, align 1
  %54 = load i8, ptr %ptradd77, align 1
  %eq78 = icmp eq i8 %53, %54
  %55 = add i64 %52, 1
  store i64 %55, ptr %cmp.idx72, align 8
  br i1 %eq78, label %slice_loop_start73, label %slice_cmp_exit79

slice_cmp_exit79:                                 ; preds = %slice_loop_comparison75, %slice_loop_start73, %or.rhs69
  %slice_cmp_phi80 = phi i1 [ true, %slice_loop_start73 ], [ false, %or.rhs69 ], [ false, %slice_loop_comparison75 ]
  br label %or.phi81

or.phi81:                                         ; preds = %slice_cmp_exit79, %slice_cmp_exit67
  %val82 = phi i1 [ true, %slice_cmp_exit67 ], [ %slice_cmp_phi80, %slice_cmp_exit79 ]
  br i1 %val82, label %if.then83, label %if.exit84

if.then83:                                        ; preds = %or.phi81
  store double 0x7FF8000000000000, ptr %blockret, align 8, !dbg !2655
  br label %expr_block.exit1650, !dbg !2655

if.exit84:                                        ; preds = %or.phi81
  %ptradd85 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2656
  %56 = load i64, ptr %ptradd85, align 8, !dbg !2656
  %lt86 = icmp ult i64 2, %56, !dbg !2656
  br i1 %lt86, label %and.rhs87, label %and.phi99, !dbg !2656

and.rhs87:                                        ; preds = %if.exit84
  %ptradd88 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2657
  %57 = load i64, ptr %ptradd88, align 8, !dbg !2657
  %58 = load ptr, ptr %chars, align 8, !dbg !2657
  %ge89 = icmp sge i64 0, %57, !dbg !2658
  %59 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !2658
  br i1 %59, label %panic90, label %checkok97, !dbg !2658

checkok97:                                        ; preds = %and.rhs87
  %60 = load i8, ptr %58, align 1, !dbg !2658
  %eq98 = icmp eq i8 %60, 48, !dbg !2657
  br label %and.phi99, !dbg !2657

and.phi99:                                        ; preds = %checkok97, %if.exit84
  %val100 = phi i1 [ false, %if.exit84 ], [ %eq98, %checkok97 ], !dbg !2657
  br i1 %val100, label %and.rhs101, label %and.phi114, !dbg !2657

and.rhs101:                                       ; preds = %and.phi99
  %ptradd102 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2659
  %61 = load i64, ptr %ptradd102, align 8, !dbg !2659
  %62 = load ptr, ptr %chars, align 8, !dbg !2659
  %ge103 = icmp sge i64 1, %61, !dbg !2660
  %63 = call i1 @llvm.expect.i1(i1 %ge103, i1 false), !dbg !2660
  br i1 %63, label %panic104, label %checkok111, !dbg !2660

checkok111:                                       ; preds = %and.rhs101
  %ptradd112 = getelementptr inbounds i8, ptr %62, i64 1, !dbg !2660
  %64 = load i8, ptr %ptradd112, align 1, !dbg !2660
  %zext = zext i8 %64 to i32, !dbg !2660
  %or = or i32 %zext, 32, !dbg !2659
  %eq113 = icmp eq i32 %or, 120, !dbg !2659
  %check = icmp sge i32 %or, 0, !dbg !2659
  %siui-eq = and i1 %check, %eq113, !dbg !2659
  br label %and.phi114, !dbg !2659

and.phi114:                                       ; preds = %checkok111, %and.phi99
  %val115 = phi i1 [ false, %and.phi99 ], [ %siui-eq, %checkok111 ], !dbg !2659
  br i1 %val115, label %if.then116, label %if.exit381, !dbg !2659

if.then116:                                       ; preds = %and.phi114
  %65 = load %"char[]", ptr %chars, align 8, !dbg !2661
  %66 = extractvalue %"char[]" %65, 0, !dbg !2661
  %67 = extractvalue %"char[]" %65, 1, !dbg !2663
  %gt117 = icmp sgt i64 2, %67, !dbg !2663
  %68 = call i1 @llvm.expect.i1(i1 %gt117, i1 false), !dbg !2663
  br i1 %68, label %panic118, label %checkok125, !dbg !2663

checkok125:                                       ; preds = %if.then116
  %size126 = sub i64 %67, 2, !dbg !2664
  %ptradd127 = getelementptr inbounds i8, ptr %66, i64 2, !dbg !2664
  %69 = insertvalue %"char[]" undef, ptr %ptradd127, 0, !dbg !2664
  %70 = insertvalue %"char[]" %69, i64 %size126, 1, !dbg !2664
  store %"char[]" %70, ptr %chars128, align 8
  %71 = load i32, ptr %sign, align 4
  store i32 %71, ptr %sign129, align 4
    #dbg_declare(ptr %scale, !2665, !DIExpression(), !2667)
  store double 1.000000e+00, ptr %scale, align 8, !dbg !2669
    #dbg_declare(ptr %x, !2670, !DIExpression(), !2671)
  store i32 0, ptr %x, align 4, !dbg !2671
    #dbg_declare(ptr %rp, !2672, !DIExpression(), !2673)
  store i64 0, ptr %rp, align 8, !dbg !2673
    #dbg_declare(ptr %dc, !2674, !DIExpression(), !2675)
  store i64 0, ptr %dc, align 8, !dbg !2675
    #dbg_declare(ptr %c, !2676, !DIExpression(), !2677)
    #dbg_declare(ptr %got_rad, !2678, !DIExpression(), !2679)
  store i8 0, ptr %got_rad, align 1, !dbg !2679
    #dbg_declare(ptr %got_digit, !2680, !DIExpression(), !2681)
  store i8 0, ptr %got_digit, align 1, !dbg !2681
    #dbg_declare(ptr %got_tail, !2682, !DIExpression(), !2683)
  store i8 0, ptr %got_tail, align 1, !dbg !2683
    #dbg_declare(ptr %len, !2684, !DIExpression(), !2685)
  %ptradd131 = getelementptr inbounds i8, ptr %chars128, i64 8, !dbg !2686
  %72 = load i64, ptr %ptradd131, align 8, !dbg !2686
  store i64 %72, ptr %len, align 8, !dbg !2686
    #dbg_declare(ptr %last_char, !2687, !DIExpression(), !2688)
  %73 = load i64, ptr %len, align 8, !dbg !2689
  %sub = sub i64 %73, 1, !dbg !2689
  store i64 %sub, ptr %last_char, align 8, !dbg !2689
    #dbg_declare(ptr %index, !2690, !DIExpression(), !2691)
  store i64 0, ptr %index, align 8, !dbg !2691
    #dbg_declare(ptr %y, !2692, !DIExpression(), !2693)
  store double 0.000000e+00, ptr %y, align 8, !dbg !2693
  br label %loop.cond132, !dbg !2694

loop.cond132:                                     ; preds = %if.exit148, %checkok125
  %ptradd133 = getelementptr inbounds i8, ptr %chars128, i64 8, !dbg !2695
  %74 = load i64, ptr %ptradd133, align 8, !dbg !2695
  %75 = load ptr, ptr %chars128, align 8, !dbg !2695
  %76 = load i64, ptr %index, align 8, !dbg !2697
  %ge134 = icmp uge i64 %76, %74, !dbg !2697
  %77 = call i1 @llvm.expect.i1(i1 %ge134, i1 false), !dbg !2697
  br i1 %77, label %panic135, label %checkok142, !dbg !2697

checkok142:                                       ; preds = %loop.cond132
  %ptradd143 = getelementptr inbounds i8, ptr %75, i64 %76, !dbg !2697
  %78 = load i8, ptr %ptradd143, align 1, !dbg !2697
  store i8 %78, ptr %c, align 1, !dbg !2697
  %eq144 = icmp eq i8 %78, 48, !dbg !2698
  br i1 %eq144, label %loop.body145, label %loop.exit149, !dbg !2698

loop.body145:                                     ; preds = %checkok142
  %79 = load i64, ptr %index, align 8, !dbg !2699
  %80 = load i64, ptr %last_char, align 8, !dbg !2701
  %eq146 = icmp eq i64 %79, %80, !dbg !2699
  br i1 %eq146, label %if.then147, label %if.exit148, !dbg !2699

if.then147:                                       ; preds = %loop.body145
  store double 0.000000e+00, ptr %blockret130, align 8, !dbg !2702
  br label %expr_block.exit, !dbg !2702

if.exit148:                                       ; preds = %loop.body145
  %81 = load i64, ptr %index, align 8, !dbg !2703
  %add = add i64 %81, 1, !dbg !2703
  store i64 %add, ptr %index, align 8, !dbg !2703
  br label %loop.cond132, !dbg !2703

loop.exit149:                                     ; preds = %checkok142
  %82 = load i8, ptr %c, align 1, !dbg !2704
  %eq150 = icmp eq i8 %82, 46, !dbg !2704
  br i1 %eq150, label %if.then151, label %if.exit200, !dbg !2704

if.then151:                                       ; preds = %loop.exit149
  store i8 1, ptr %got_rad, align 1, !dbg !2705
  %83 = load i64, ptr %index, align 8, !dbg !2707
  %84 = load i64, ptr %last_char, align 8, !dbg !2708
  %eq152 = icmp eq i64 %83, %84, !dbg !2707
  br i1 %eq152, label %if.then153, label %if.exit158, !dbg !2707

if.then153:                                       ; preds = %if.then151
  %85 = load i8, ptr %got_digit, align 1, !dbg !2709
  %86 = trunc i8 %85 to i1, !dbg !2709
  %not = xor i1 %86, true, !dbg !2709
  br i1 %not, label %if.then154, label %if.exit155, !dbg !2709

if.then154:                                       ; preds = %if.then153
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2711
  br label %err_retblock, !dbg !2711

if.exit155:                                       ; preds = %if.then153
  %87 = load i32, ptr %sign129, align 4, !dbg !2712
  %sifp156 = sitofp i32 %87 to double, !dbg !2712
  %fmul157 = fmul double %sifp156, 0.000000e+00, !dbg !2712
  store double %fmul157, ptr %blockret130, align 8, !dbg !2712
  br label %expr_block.exit, !dbg !2712

if.exit158:                                       ; preds = %if.then151
  %88 = load i64, ptr %index, align 8, !dbg !2713
  %89 = load i64, ptr %last_char, align 8, !dbg !2714
  %neq159 = icmp ne i64 %88, %89, !dbg !2713
  br i1 %neq159, label %and.rhs160, label %and.phi174, !dbg !2713

and.rhs160:                                       ; preds = %if.exit158
  %ptradd161 = getelementptr inbounds i8, ptr %chars128, i64 8, !dbg !2715
  %90 = load i64, ptr %ptradd161, align 8, !dbg !2715
  %91 = load ptr, ptr %chars128, align 8, !dbg !2715
  %92 = load i64, ptr %index, align 8, !dbg !2716
  %add162 = add i64 %92, 1, !dbg !2716
  store i64 %add162, ptr %index, align 8, !dbg !2716
  %ge163 = icmp uge i64 %add162, %90, !dbg !2716
  %93 = call i1 @llvm.expect.i1(i1 %ge163, i1 false), !dbg !2716
  br i1 %93, label %panic164, label %checkok171, !dbg !2716

checkok171:                                       ; preds = %and.rhs160
  %ptradd172 = getelementptr inbounds i8, ptr %91, i64 %add162, !dbg !2717
  %94 = load i8, ptr %ptradd172, align 1, !dbg !2717
  store i8 %94, ptr %c, align 1, !dbg !2717
  %eq173 = icmp eq i8 %94, 48, !dbg !2718
  br label %and.phi174, !dbg !2718

and.phi174:                                       ; preds = %checkok171, %if.exit158
  %val175 = phi i1 [ false, %if.exit158 ], [ %eq173, %checkok171 ], !dbg !2718
  br i1 %val175, label %if.then176, label %if.exit199, !dbg !2718

if.then176:                                       ; preds = %and.phi174
  %95 = load i64, ptr %rp, align 8, !dbg !2719
  %sub177 = sub i64 %95, 1, !dbg !2719
  store i64 %sub177, ptr %rp, align 8, !dbg !2719
  store i8 1, ptr %got_digit, align 1, !dbg !2721
  br label %loop.cond178, !dbg !2722

loop.cond178:                                     ; preds = %loop.body196, %if.then176
  %96 = load i64, ptr %last_char, align 8, !dbg !2723
  %97 = load i64, ptr %index, align 8, !dbg !2725
  %neq179 = icmp ne i64 %96, %97, !dbg !2723
  br i1 %neq179, label %and.rhs180, label %and.phi194, !dbg !2723

and.rhs180:                                       ; preds = %loop.cond178
  %ptradd181 = getelementptr inbounds i8, ptr %chars128, i64 8, !dbg !2726
  %98 = load i64, ptr %ptradd181, align 8, !dbg !2726
  %99 = load ptr, ptr %chars128, align 8, !dbg !2726
  %100 = load i64, ptr %index, align 8, !dbg !2727
  %add182 = add i64 %100, 1, !dbg !2727
  store i64 %add182, ptr %index, align 8, !dbg !2727
  %ge183 = icmp uge i64 %add182, %98, !dbg !2727
  %101 = call i1 @llvm.expect.i1(i1 %ge183, i1 false), !dbg !2727
  br i1 %101, label %panic184, label %checkok191, !dbg !2727

checkok191:                                       ; preds = %and.rhs180
  %ptradd192 = getelementptr inbounds i8, ptr %99, i64 %add182, !dbg !2728
  %102 = load i8, ptr %ptradd192, align 1, !dbg !2728
  store i8 %102, ptr %c, align 1, !dbg !2728
  %eq193 = icmp eq i8 %102, 48, !dbg !2729
  br label %and.phi194, !dbg !2729

and.phi194:                                       ; preds = %checkok191, %loop.cond178
  %val195 = phi i1 [ false, %loop.cond178 ], [ %eq193, %checkok191 ], !dbg !2729
  br i1 %val195, label %loop.body196, label %loop.exit198, !dbg !2729

loop.body196:                                     ; preds = %and.phi194
  %103 = load i64, ptr %rp, align 8, !dbg !2730
  %sub197 = sub i64 %103, 1, !dbg !2730
  store i64 %sub197, ptr %rp, align 8, !dbg !2730
  br label %loop.cond178, !dbg !2730

loop.exit198:                                     ; preds = %and.phi194
  br label %if.exit199, !dbg !2730

if.exit199:                                       ; preds = %loop.exit198, %and.phi174
  br label %if.exit200, !dbg !2730

if.exit200:                                       ; preds = %if.exit199, %loop.exit149
  br label %loop.cond201, !dbg !2732

loop.cond201:                                     ; preds = %checkok267, %if.exit200
  %104 = load i8, ptr %c, align 1, !dbg !2733
  %zext202 = zext i8 %104 to i32, !dbg !2733
  %sub203 = sub i32 %zext202, 48, !dbg !2733
  %lt204 = icmp ult i32 %sub203, 10, !dbg !2733
  br i1 %lt204, label %or.phi210, label %or.rhs205, !dbg !2733

or.rhs205:                                        ; preds = %loop.cond201
  %105 = load i8, ptr %c, align 1, !dbg !2735
  %zext206 = zext i8 %105 to i32, !dbg !2735
  %or207 = or i32 %zext206, 32, !dbg !2735
  %sub208 = sub i32 %or207, 97, !dbg !2735
  %lt209 = icmp slt i32 %sub208, 6, !dbg !2735
  %siui-lt = or i1 false, %lt209, !dbg !2735
  br label %or.phi210, !dbg !2735

or.phi210:                                        ; preds = %or.rhs205, %loop.cond201
  %val211 = phi i1 [ true, %loop.cond201 ], [ %siui-lt, %or.rhs205 ], !dbg !2735
  br i1 %val211, label %or.phi214, label %or.rhs212, !dbg !2735

or.rhs212:                                        ; preds = %or.phi210
  %106 = load i8, ptr %c, align 1, !dbg !2736
  %eq213 = icmp eq i8 %106, 46, !dbg !2736
  br label %or.phi214, !dbg !2736

or.phi214:                                        ; preds = %or.rhs212, %or.phi210
  %val215 = phi i1 [ true, %or.phi210 ], [ %eq213, %or.rhs212 ], !dbg !2736
  br i1 %val215, label %loop.body216, label %loop.exit269, !dbg !2736

loop.body216:                                     ; preds = %or.phi214
  %107 = load i8, ptr %c, align 1, !dbg !2737
  %eq217 = icmp eq i8 %107, 46, !dbg !2737
  br i1 %eq217, label %if.then218, label %if.else, !dbg !2737

if.then218:                                       ; preds = %loop.body216
  %108 = load i8, ptr %got_rad, align 1, !dbg !2739
  %109 = trunc i8 %108 to i1, !dbg !2739
  br i1 %109, label %if.then219, label %if.exit220, !dbg !2739

if.then219:                                       ; preds = %if.then218
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2741
  br label %err_retblock, !dbg !2741

if.exit220:                                       ; preds = %if.then218
  store i8 1, ptr %got_rad, align 1, !dbg !2742
  %110 = load i64, ptr %dc, align 8, !dbg !2743
  store i64 %110, ptr %rp, align 8, !dbg !2743
  br label %if.exit253, !dbg !2743

if.else:                                          ; preds = %loop.body216
  store i8 1, ptr %got_digit, align 1, !dbg !2744
    #dbg_declare(ptr %d, !2746, !DIExpression(), !2747)
  %111 = load i8, ptr %c, align 1, !dbg !2748
  %gt221 = icmp ugt i8 %111, 57, !dbg !2748
  br i1 %gt221, label %cond.lhs, label %cond.rhs, !dbg !2748

cond.lhs:                                         ; preds = %if.else
  %112 = load i8, ptr %c, align 1, !dbg !2749
  %zext222 = zext i8 %112 to i32, !dbg !2749
  %or223 = or i32 %zext222, 32, !dbg !2749
  %add224 = add i32 %or223, 10, !dbg !2749
  %sub225 = sub i32 %add224, 97, !dbg !2749
  br label %cond.phi, !dbg !2749

cond.rhs:                                         ; preds = %if.else
  %113 = load i8, ptr %c, align 1, !dbg !2750
  %zext226 = zext i8 %113 to i32, !dbg !2750
  %sub227 = sub i32 %zext226, 48, !dbg !2750
  br label %cond.phi, !dbg !2750

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val228 = phi i32 [ %sub225, %cond.lhs ], [ %sub227, %cond.rhs ], !dbg !2750
  store i32 %val228, ptr %d, align 4, !dbg !2750
  store i8 1, ptr %switch229, align 1
  br label %switch.entry230

switch.entry230:                                  ; preds = %cond.phi
  %114 = load i8, ptr %switch229, align 1
  %115 = trunc i8 %114 to i1
  %116 = load i64, ptr %dc, align 8, !dbg !2751
  %lt231 = icmp slt i64 %116, 8, !dbg !2751
  %eq232 = icmp eq i1 %lt231, %115, !dbg !2751
  br i1 %eq232, label %switch.case233, label %next_if, !dbg !2751

switch.case233:                                   ; preds = %switch.entry230
  %117 = load i32, ptr %x, align 4, !dbg !2753
  %mul = mul i32 %117, 16, !dbg !2753
  %118 = load i32, ptr %d, align 4, !dbg !2755
  %add234 = add i32 %mul, %118, !dbg !2753
  store i32 %add234, ptr %x, align 4, !dbg !2753
  br label %switch.exit251, !dbg !2753

next_if:                                          ; preds = %switch.entry230
  %119 = load i64, ptr %dc, align 8, !dbg !2756
  %lt235 = icmp slt i64 %119, 14, !dbg !2756
  %eq236 = icmp eq i1 %lt235, %115, !dbg !2756
  br i1 %eq236, label %switch.case237, label %next_if240, !dbg !2756

switch.case237:                                   ; preds = %next_if
  %120 = load double, ptr %y, align 8, !dbg !2757
  %121 = load i32, ptr %d, align 4, !dbg !2759
  %sifp238 = sitofp i32 %121 to double, !dbg !2759
  %122 = load double, ptr %scale, align 8, !dbg !2760
  %fdiv = fdiv double %122, 1.600000e+01, !dbg !2760
  store double %fdiv, ptr %scale, align 8, !dbg !2760
  %fmul239 = fmul double %sifp238, %fdiv, !dbg !2759
  %fadd = fadd double %120, %fmul239, !dbg !2757
  store double %fadd, ptr %y, align 8, !dbg !2757
  store i8 1, ptr %got_tail, align 1, !dbg !2761
  br label %switch.exit251, !dbg !2761

next_if240:                                       ; preds = %next_if
  %123 = load i32, ptr %d, align 4, !dbg !2762
  %i2b241 = icmp ne i32 %123, 0, !dbg !2762
  br i1 %i2b241, label %and.rhs242, label %and.phi244, !dbg !2762

and.rhs242:                                       ; preds = %next_if240
  %124 = load i8, ptr %got_tail, align 1, !dbg !2763
  %125 = trunc i8 %124 to i1, !dbg !2763
  %not243 = xor i1 %125, true, !dbg !2763
  br label %and.phi244, !dbg !2763

and.phi244:                                       ; preds = %and.rhs242, %next_if240
  %val245 = phi i1 [ false, %next_if240 ], [ %not243, %and.rhs242 ], !dbg !2763
  %eq246 = icmp eq i1 %val245, %115, !dbg !2763
  br i1 %eq246, label %switch.case247, label %next_if250, !dbg !2763

switch.case247:                                   ; preds = %and.phi244
  %126 = load double, ptr %y, align 8, !dbg !2764
  %127 = load double, ptr %scale, align 8, !dbg !2766
  %fmul248 = fmul double 5.000000e-01, %127, !dbg !2767
  %fadd249 = fadd double %126, %fmul248, !dbg !2764
  store double %fadd249, ptr %y, align 8, !dbg !2764
  store i8 1, ptr %got_tail, align 1, !dbg !2768
  br label %switch.exit251, !dbg !2768

next_if250:                                       ; preds = %and.phi244
  br label %switch.exit251, !dbg !2768

switch.exit251:                                   ; preds = %next_if250, %switch.case247, %switch.case237, %switch.case233
  %128 = load i64, ptr %dc, align 8, !dbg !2769
  %add252 = add i64 %128, 1, !dbg !2769
  store i64 %add252, ptr %dc, align 8, !dbg !2769
  br label %if.exit253, !dbg !2769

if.exit253:                                       ; preds = %switch.exit251, %if.exit220
  %129 = load i64, ptr %index, align 8, !dbg !2770
  %130 = load i64, ptr %last_char, align 8, !dbg !2771
  %eq254 = icmp eq i64 %129, %130, !dbg !2770
  br i1 %eq254, label %if.then255, label %if.exit256, !dbg !2770

if.then255:                                       ; preds = %if.exit253
  br label %loop.exit269, !dbg !2772

if.exit256:                                       ; preds = %if.exit253
  %ptradd257 = getelementptr inbounds i8, ptr %chars128, i64 8, !dbg !2773
  %131 = load i64, ptr %ptradd257, align 8, !dbg !2773
  %132 = load ptr, ptr %chars128, align 8, !dbg !2773
  %133 = load i64, ptr %index, align 8, !dbg !2774
  %add258 = add i64 %133, 1, !dbg !2774
  store i64 %add258, ptr %index, align 8, !dbg !2774
  %ge259 = icmp uge i64 %add258, %131, !dbg !2774
  %134 = call i1 @llvm.expect.i1(i1 %ge259, i1 false), !dbg !2774
  br i1 %134, label %panic260, label %checkok267, !dbg !2774

checkok267:                                       ; preds = %if.exit256
  %ptradd268 = getelementptr inbounds i8, ptr %132, i64 %add258, !dbg !2775
  %135 = load i8, ptr %ptradd268, align 1, !dbg !2775
  store i8 %135, ptr %c, align 1, !dbg !2775
  br label %loop.cond201, !dbg !2775

loop.exit269:                                     ; preds = %if.then255, %or.phi214
  %136 = load i8, ptr %got_digit, align 1, !dbg !2776
  %137 = trunc i8 %136 to i1, !dbg !2776
  %not270 = xor i1 %137, true, !dbg !2776
  br i1 %not270, label %if.then271, label %if.exit272, !dbg !2776

if.then271:                                       ; preds = %loop.exit269
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2777
  br label %err_retblock, !dbg !2777

if.exit272:                                       ; preds = %loop.exit269
  %138 = load i8, ptr %got_rad, align 1, !dbg !2778
  %139 = trunc i8 %138 to i1, !dbg !2778
  %not273 = xor i1 %139, true, !dbg !2778
  br i1 %not273, label %if.then274, label %if.exit275, !dbg !2778

if.then274:                                       ; preds = %if.exit272
  %140 = load i64, ptr %dc, align 8, !dbg !2779
  store i64 %140, ptr %rp, align 8, !dbg !2779
  br label %if.exit275, !dbg !2779

if.exit275:                                       ; preds = %if.then274, %if.exit272
  br label %loop.cond276, !dbg !2780

loop.cond276:                                     ; preds = %loop.body278, %if.exit275
  %141 = load i64, ptr %dc, align 8, !dbg !2781
  %lt277 = icmp slt i64 %141, 8, !dbg !2781
  br i1 %lt277, label %loop.body278, label %loop.exit281, !dbg !2781

loop.body278:                                     ; preds = %loop.cond276
  %142 = load i32, ptr %x, align 4, !dbg !2783
  %mul279 = mul i32 %142, 16, !dbg !2783
  store i32 %mul279, ptr %x, align 4, !dbg !2783
  %143 = load i64, ptr %dc, align 8, !dbg !2784
  %add280 = add i64 %143, 1, !dbg !2784
  store i64 %add280, ptr %dc, align 8, !dbg !2784
  br label %loop.cond276, !dbg !2784

loop.exit281:                                     ; preds = %loop.cond276
    #dbg_declare(ptr %e2, !2785, !DIExpression(), !2786)
  store i64 0, ptr %e2, align 8, !dbg !2786
  %144 = load i8, ptr %c, align 1, !dbg !2787
  %zext282 = zext i8 %144 to i32, !dbg !2787
  %or283 = or i32 %zext282, 32, !dbg !2787
  %eq284 = icmp eq i32 %or283, 112, !dbg !2787
  %check285 = icmp sge i32 %or283, 0, !dbg !2787
  %siui-eq286 = and i1 %check285, %eq284, !dbg !2787
  br i1 %siui-eq286, label %if.then287, label %if.exit306, !dbg !2787

if.then287:                                       ; preds = %loop.exit281
    #dbg_declare(ptr %e2val, !2788, !DIExpression(), !2790)
  %145 = load %"char[]", ptr %chars128, align 8, !dbg !2791
  %146 = extractvalue %"char[]" %145, 0, !dbg !2791
  %147 = load i64, ptr %index, align 8, !dbg !2792
  %add288 = add i64 %147, 1, !dbg !2792
  %148 = extractvalue %"char[]" %145, 1, !dbg !2792
  %gt289 = icmp sgt i64 %add288, %148, !dbg !2792
  %149 = call i1 @llvm.expect.i1(i1 %gt289, i1 false), !dbg !2792
  br i1 %149, label %panic290, label %checkok297, !dbg !2792

checkok297:                                       ; preds = %if.then287
  %underflow = icmp slt i64 %add288, 0, !dbg !2793
  %150 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !2793
  br i1 %150, label %panic298, label %checkok303, !dbg !2793

checkok303:                                       ; preds = %checkok297
  %size304 = sub i64 %148, %add288, !dbg !2792
  %ptradd305 = getelementptr inbounds i8, ptr %146, i64 %add288, !dbg !2792
  %151 = insertvalue %"char[]" undef, ptr %ptradd305, 0, !dbg !2792
  %152 = insertvalue %"char[]" %151, i64 %size304, 1, !dbg !2792
  %153 = call i64 @std.core.String.to_long(ptr %retparam, ptr %ptradd305, i64 %size304, i32 10), !dbg !2794
  %not_err = icmp eq i64 %153, 0, !dbg !2794
  %154 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2794
  br i1 %154, label %after_check, label %else_block, !dbg !2794

after_check:                                      ; preds = %checkok303
  %155 = load i64, ptr %retparam, align 8, !dbg !2794
  br label %phi_block, !dbg !2794

else_block:                                       ; preds = %checkok303
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %error_var, align 8, !dbg !2795
  br label %guard_block, !dbg !2795

guard_block:                                      ; preds = %else_block
  %156 = load i64, ptr %error_var, align 8, !dbg !2795
  store i64 %156, ptr %reterr, align 8, !dbg !2795
  br label %err_retblock, !dbg !2795

phi_block:                                        ; preds = %after_check
  store i64 %155, ptr %e2val, align 8, !dbg !2795
  %157 = load i64, ptr %e2val, align 8, !dbg !2796
  store i64 %157, ptr %e2, align 8, !dbg !2796
  br label %if.exit306, !dbg !2796

if.exit306:                                       ; preds = %phi_block, %loop.exit281
  %158 = load i64, ptr %e2, align 8, !dbg !2797
  %159 = load i64, ptr %rp, align 8, !dbg !2798
  %mul307 = mul i64 4, %159, !dbg !2799
  %sub308 = sub i64 %mul307, 32, !dbg !2799
  %add309 = add i64 %158, %sub308, !dbg !2797
  store i64 %add309, ptr %e2, align 8, !dbg !2797
  %160 = load i32, ptr %x, align 4, !dbg !2800
  %i2nb310 = icmp eq i32 %160, 0, !dbg !2800
  br i1 %i2nb310, label %if.then311, label %if.exit314, !dbg !2800

if.then311:                                       ; preds = %if.exit306
  %161 = load i32, ptr %sign129, align 4, !dbg !2801
  %sifp312 = sitofp i32 %161 to double, !dbg !2801
  %fmul313 = fmul double %sifp312, 0.000000e+00, !dbg !2801
  store double %fmul313, ptr %blockret130, align 8, !dbg !2801
  br label %expr_block.exit, !dbg !2801

if.exit314:                                       ; preds = %if.exit306
  %162 = load i64, ptr %e2, align 8, !dbg !2802
  %gt315 = icmp sgt i64 %162, 1074, !dbg !2802
  br i1 %gt315, label %if.then316, label %if.exit317, !dbg !2802

if.then316:                                       ; preds = %if.exit314
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !2803
  br label %err_retblock, !dbg !2803

if.exit317:                                       ; preds = %if.exit314
  %163 = load i64, ptr %e2, align 8, !dbg !2804
  %lt318 = icmp slt i64 %163, -1180, !dbg !2804
  br i1 %lt318, label %if.then319, label %if.exit320, !dbg !2804

if.then319:                                       ; preds = %if.exit317
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !2805
  br label %err_retblock, !dbg !2805

if.exit320:                                       ; preds = %if.exit317
  br label %loop.cond321, !dbg !2806

loop.cond321:                                     ; preds = %if.exit332, %if.exit320
  %164 = load i32, ptr %x, align 4, !dbg !2807
  %lt322 = icmp ult i32 %164, -2147483648, !dbg !2807
  br i1 %lt322, label %loop.body323, label %loop.exit334, !dbg !2807

loop.body323:                                     ; preds = %loop.cond321
  %165 = load double, ptr %y, align 8, !dbg !2809
  %ge324 = fcmp oge double %165, 5.000000e-01, !dbg !2809
  br i1 %ge324, label %if.then325, label %if.else329, !dbg !2809

if.then325:                                       ; preds = %loop.body323
  %166 = load i32, ptr %x, align 4, !dbg !2811
  %167 = load i32, ptr %x, align 4, !dbg !2813
  %add326 = add i32 %167, 1, !dbg !2813
  %add327 = add i32 %166, %add326, !dbg !2811
  store i32 %add327, ptr %x, align 4, !dbg !2811
  %168 = load double, ptr %y, align 8, !dbg !2814
  %169 = load double, ptr %y, align 8, !dbg !2815
  %fsub = fsub double %169, 1.000000e+00, !dbg !2815
  %fadd328 = fadd double %168, %fsub, !dbg !2814
  store double %fadd328, ptr %y, align 8, !dbg !2814
  br label %if.exit332, !dbg !2814

if.else329:                                       ; preds = %loop.body323
  %170 = load i32, ptr %x, align 4, !dbg !2816
  %171 = load i32, ptr %x, align 4, !dbg !2818
  %add330 = add i32 %170, %171, !dbg !2816
  store i32 %add330, ptr %x, align 4, !dbg !2816
  %172 = load double, ptr %y, align 8, !dbg !2819
  %173 = load double, ptr %y, align 8, !dbg !2820
  %fadd331 = fadd double %172, %173, !dbg !2819
  store double %fadd331, ptr %y, align 8, !dbg !2819
  br label %if.exit332, !dbg !2819

if.exit332:                                       ; preds = %if.else329, %if.then325
  %174 = load i64, ptr %e2, align 8, !dbg !2821
  %sub333 = sub i64 %174, 1, !dbg !2821
  store i64 %sub333, ptr %e2, align 8, !dbg !2821
  br label %loop.cond321, !dbg !2821

loop.exit334:                                     ; preds = %loop.cond321
    #dbg_declare(ptr %bits, !2822, !DIExpression(), !2823)
  store i32 53, ptr %bits, align 4, !dbg !2824
  %175 = load i64, ptr %e2, align 8, !dbg !2825
  %add335 = add i64 32, %175, !dbg !2826
  %sub336 = sub i64 %add335, -1074, !dbg !2826
  %gt337 = icmp sgt i64 53, %sub336, !dbg !2827
  br i1 %gt337, label %if.then338, label %if.exit344, !dbg !2827

if.then338:                                       ; preds = %loop.exit334
  %176 = load i64, ptr %e2, align 8, !dbg !2828
  %add339 = add i64 32, %176, !dbg !2830
  %sub340 = sub i64 %add339, -1074, !dbg !2831
  %trunc = trunc i64 %sub340 to i32, !dbg !2831
  store i32 %trunc, ptr %bits, align 4, !dbg !2831
  %177 = load i32, ptr %bits, align 4, !dbg !2832
  %lt341 = icmp slt i32 %177, 0, !dbg !2832
  br i1 %lt341, label %if.then342, label %if.exit343, !dbg !2832

if.then342:                                       ; preds = %if.then338
  store i32 0, ptr %bits, align 4, !dbg !2833
  br label %if.exit343, !dbg !2833

if.exit343:                                       ; preds = %if.then342, %if.then338
  br label %if.exit344, !dbg !2833

if.exit344:                                       ; preds = %if.exit343, %loop.exit334
    #dbg_declare(ptr %bias, !2834, !DIExpression(), !2835)
  store double 0.000000e+00, ptr %bias, align 8, !dbg !2835
  %178 = load i32, ptr %bits, align 4, !dbg !2836
  %lt345 = icmp slt i32 %178, 53, !dbg !2836
  br i1 %lt345, label %if.then346, label %if.exit353, !dbg !2836

if.then346:                                       ; preds = %if.exit344
  store double 1.000000e+00, ptr %x347, align 8
  %179 = load i32, ptr %bits, align 4, !dbg !2837
  %sub348 = sub i32 85, %179, !dbg !2839
  %sub349 = sub i32 %sub348, 1, !dbg !2839
  store i32 %sub349, ptr %n, align 4
  %180 = load double, ptr %x347, align 8, !dbg !2840
  %181 = load i32, ptr %n, align 4, !dbg !2840
  %182 = call double @scalbn(double %180, i32 %181), !dbg !2843
  store double %182, ptr %mag, align 8
  %183 = load i32, ptr %sign129, align 4, !dbg !2844
  %sifp350 = sitofp i32 %183 to double, !dbg !2844
  store double %sifp350, ptr %sgn, align 8
  %184 = load double, ptr %mag, align 8
  store double %184, ptr %x351, align 8
  %185 = load double, ptr %sgn, align 8
  store double %185, ptr %y352, align 8
  %186 = load double, ptr %x351, align 8, !dbg !2845
  %187 = load double, ptr %sgn, align 8, !dbg !2851
  %188 = call double @llvm.copysign.f64(double %186, double %187), !dbg !2851
  store double %188, ptr %bias, align 8, !dbg !2851
  br label %if.exit353, !dbg !2851

if.exit353:                                       ; preds = %if.then346, %if.exit344
  %189 = load i32, ptr %bits, align 4, !dbg !2852
  %lt354 = icmp slt i32 %189, 32, !dbg !2852
  br i1 %lt354, label %and.rhs355, label %and.phi357, !dbg !2852

and.rhs355:                                       ; preds = %if.exit353
  %190 = load double, ptr %y, align 8, !dbg !2853
  %neq356 = fcmp one double %190, 0.000000e+00, !dbg !2853
  br label %and.phi357, !dbg !2853

and.phi357:                                       ; preds = %and.rhs355, %if.exit353
  %val358 = phi i1 [ false, %if.exit353 ], [ %neq356, %and.rhs355 ], !dbg !2853
  br i1 %val358, label %and.rhs359, label %and.phi361, !dbg !2853

and.rhs359:                                       ; preds = %and.phi357
  %191 = load i32, ptr %x, align 4, !dbg !2854
  %and = and i32 %191, 1, !dbg !2855
  %i2nb360 = icmp eq i32 %and, 0, !dbg !2855
  br label %and.phi361, !dbg !2855

and.phi361:                                       ; preds = %and.rhs359, %and.phi357
  %val362 = phi i1 [ false, %and.phi357 ], [ %i2nb360, %and.rhs359 ], !dbg !2855
  br i1 %val362, label %if.then363, label %if.exit365, !dbg !2855

if.then363:                                       ; preds = %and.phi361
  %192 = load i32, ptr %x, align 4, !dbg !2856
  %add364 = add i32 %192, 1, !dbg !2856
  store i32 %add364, ptr %x, align 4, !dbg !2856
  store double 0.000000e+00, ptr %y, align 8, !dbg !2858
  br label %if.exit365, !dbg !2858

if.exit365:                                       ; preds = %if.then363, %and.phi361
  %193 = load double, ptr %bias, align 8, !dbg !2859
  %194 = load i32, ptr %sign129, align 4, !dbg !2860
  %sifp366 = sitofp i32 %194 to double, !dbg !2860
  %195 = load i32, ptr %x, align 4, !dbg !2861
  %uifp = uitofp i32 %195 to double, !dbg !2861
  %fmul367 = fmul double %sifp366, %uifp, !dbg !2860
  %fadd368 = fadd double %193, %fmul367, !dbg !2859
  %196 = load i32, ptr %sign129, align 4, !dbg !2862
  %sifp369 = sitofp i32 %196 to double, !dbg !2862
  %197 = load double, ptr %y, align 8, !dbg !2863
  %fmul370 = fmul double %sifp369, %197, !dbg !2862
  %fadd371 = fadd double %fadd368, %fmul370, !dbg !2859
  store double %fadd371, ptr %y, align 8, !dbg !2859
  %198 = load double, ptr %y, align 8, !dbg !2864
  %199 = load double, ptr %bias, align 8, !dbg !2865
  %fsub372 = fsub double %198, %199, !dbg !2864
  store double %fsub372, ptr %y, align 8, !dbg !2864
  %200 = load double, ptr %y, align 8, !dbg !2866
  %neq373 = fcmp one double %200, 0.000000e+00, !dbg !2866
  %not374 = xor i1 %neq373, true, !dbg !2866
  br i1 %not374, label %if.then375, label %if.exit376, !dbg !2866

if.then375:                                       ; preds = %if.exit365
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !2867
  br label %err_retblock, !dbg !2867

if.exit376:                                       ; preds = %if.exit365
  %201 = load double, ptr %y, align 8
  store double %201, ptr %x377, align 8
  %202 = load i64, ptr %e2, align 8, !dbg !2868
  %trunc378 = trunc i64 %202 to i32, !dbg !2868
  store i32 %trunc378, ptr %n379, align 4
  %203 = load double, ptr %x377, align 8, !dbg !2869
  %204 = load i32, ptr %n379, align 4, !dbg !2869
  %205 = call double @scalbn(double %203, i32 %204), !dbg !2872
  store double %205, ptr %blockret130, align 8, !dbg !2872
  br label %expr_block.exit, !dbg !2872

expr_block.exit:                                  ; preds = %if.exit376, %if.then311, %if.exit155, %if.then147
  %206 = load double, ptr %blockret130, align 8, !dbg !2872
  store double %206, ptr %blockret, align 8, !dbg !2872
  br label %expr_block.exit1650, !dbg !2872

if.exit381:                                       ; preds = %and.phi114
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars382, ptr align 8 %chars, i32 16, i1 false)
  %207 = load i32, ptr %sign, align 4
  store i32 %207, ptr %sign383, align 4
  %ptradd385 = getelementptr inbounds i8, ptr %chars382, i64 8, !dbg !2873
  %208 = load i64, ptr %ptradd385, align 8, !dbg !2873
  %lt386 = icmp ult i64 0, %208, !dbg !2877
  br i1 %lt386, label %assert_ok, label %assert_fail, !dbg !2877

assert_fail:                                      ; preds = %if.exit381
  %209 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2877
  call void %209(ptr @.panic_msg.97, i64 34, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 486) #6, !dbg !2877
  unreachable, !dbg !2877

assert_ok:                                        ; preds = %if.exit381
    #dbg_declare(ptr %x387, !2878, !DIExpression(), !2882)
  call void @llvm.memset.p0.i64(ptr align 16 %x387, i8 0, i64 512, i1 false), !dbg !2882
    #dbg_declare(ptr %emax, !2883, !DIExpression(), !2884)
  store i32 1024, ptr %emax, align 4, !dbg !2885
    #dbg_declare(ptr %index388, !2886, !DIExpression(), !2887)
  store i64 0, ptr %index388, align 8, !dbg !2887
    #dbg_declare(ptr %got_digit389, !2888, !DIExpression(), !2889)
  %ptradd390 = getelementptr inbounds i8, ptr %chars382, i64 8, !dbg !2890
  %210 = load i64, ptr %ptradd390, align 8, !dbg !2890
  %211 = load ptr, ptr %chars382, align 8, !dbg !2890
  %ge391 = icmp sge i64 0, %210, !dbg !2891
  %212 = call i1 @llvm.expect.i1(i1 %ge391, i1 false), !dbg !2891
  br i1 %212, label %panic392, label %checkok399, !dbg !2891

checkok399:                                       ; preds = %assert_ok
  %213 = load i8, ptr %211, align 1, !dbg !2891
  %eq400 = icmp eq i8 %213, 48, !dbg !2890
  %214 = zext i1 %eq400 to i8, !dbg !2890
  store i8 %214, ptr %got_digit389, align 1, !dbg !2890
    #dbg_declare(ptr %got_rad401, !2892, !DIExpression(), !2893)
  store i8 0, ptr %got_rad401, align 1, !dbg !2893
    #dbg_declare(ptr %lrp, !2894, !DIExpression(), !2895)
  store i64 0, ptr %lrp, align 8, !dbg !2895
    #dbg_declare(ptr %dc402, !2896, !DIExpression(), !2897)
  store i64 0, ptr %dc402, align 8, !dbg !2897
    #dbg_declare(ptr %k, !2898, !DIExpression(), !2899)
  store i32 0, ptr %k, align 4, !dbg !2899
    #dbg_declare(ptr %j, !2900, !DIExpression(), !2901)
  store i32 0, ptr %j, align 4, !dbg !2901
    #dbg_declare(ptr %lnz, !2902, !DIExpression(), !2903)
  store i32 0, ptr %lnz, align 4, !dbg !2903
    #dbg_declare(ptr %len403, !2904, !DIExpression(), !2905)
  %ptradd404 = getelementptr inbounds i8, ptr %chars382, i64 8, !dbg !2906
  %215 = load i64, ptr %ptradd404, align 8, !dbg !2906
  store i64 %215, ptr %len403, align 8, !dbg !2906
    #dbg_declare(ptr %last_char405, !2907, !DIExpression(), !2908)
  %216 = load i64, ptr %len403, align 8, !dbg !2909
  %sub406 = sub i64 %216, 1, !dbg !2909
  store i64 %sub406, ptr %last_char405, align 8, !dbg !2909
  %217 = load i64, ptr %len403, align 8, !dbg !2910
  %i2b407 = icmp ne i64 %217, 0, !dbg !2910
  br i1 %i2b407, label %assert_ok409, label %assert_fail408, !dbg !2910

assert_fail408:                                   ; preds = %checkok399
  %218 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2910
  call void %218(ptr @.panic_msg.98, i64 20, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 52) #6, !dbg !2910
  unreachable, !dbg !2910

assert_ok409:                                     ; preds = %checkok399
    #dbg_declare(ptr %c410, !2911, !DIExpression(), !2912)
  br label %loop.cond411, !dbg !2913

loop.cond411:                                     ; preds = %if.exit429, %assert_ok409
  %ptradd412 = getelementptr inbounds i8, ptr %chars382, i64 8, !dbg !2914
  %219 = load i64, ptr %ptradd412, align 8, !dbg !2914
  %220 = load ptr, ptr %chars382, align 8, !dbg !2914
  %221 = load i64, ptr %index388, align 8, !dbg !2916
  %ge413 = icmp uge i64 %221, %219, !dbg !2916
  %222 = call i1 @llvm.expect.i1(i1 %ge413, i1 false), !dbg !2916
  br i1 %222, label %panic414, label %checkok421, !dbg !2916

checkok421:                                       ; preds = %loop.cond411
  %ptradd422 = getelementptr inbounds i8, ptr %220, i64 %221, !dbg !2916
  %223 = load i8, ptr %ptradd422, align 1, !dbg !2916
  store i8 %223, ptr %c410, align 1, !dbg !2916
  %eq423 = icmp eq i8 %223, 48, !dbg !2917
  br i1 %eq423, label %loop.body424, label %loop.exit431, !dbg !2917

loop.body424:                                     ; preds = %checkok421
  %224 = load i64, ptr %index388, align 8, !dbg !2918
  %225 = load i64, ptr %last_char405, align 8, !dbg !2920
  %eq425 = icmp eq i64 %224, %225, !dbg !2918
  br i1 %eq425, label %if.then426, label %if.exit429, !dbg !2918

if.then426:                                       ; preds = %loop.body424
  %226 = load i32, ptr %sign383, align 4, !dbg !2921
  %sifp427 = sitofp i32 %226 to double, !dbg !2921
  %fmul428 = fmul double %sifp427, 0.000000e+00, !dbg !2921
  store double %fmul428, ptr %blockret384, align 8, !dbg !2921
  br label %expr_block.exit1649, !dbg !2921

if.exit429:                                       ; preds = %loop.body424
  %227 = load i64, ptr %index388, align 8, !dbg !2922
  %add430 = add i64 %227, 1, !dbg !2922
  store i64 %add430, ptr %index388, align 8, !dbg !2922
  br label %loop.cond411, !dbg !2922

loop.exit431:                                     ; preds = %checkok421
  %228 = load i8, ptr %c410, align 1, !dbg !2923
  %eq432 = icmp eq i8 %228, 46, !dbg !2923
  br i1 %eq432, label %if.then433, label %if.exit483, !dbg !2923

if.then433:                                       ; preds = %loop.exit431
  store i8 1, ptr %got_rad401, align 1, !dbg !2924
  %229 = load i64, ptr %index388, align 8, !dbg !2926
  %230 = load i64, ptr %last_char405, align 8, !dbg !2927
  %eq434 = icmp eq i64 %229, %230, !dbg !2926
  br i1 %eq434, label %if.then435, label %if.exit441, !dbg !2926

if.then435:                                       ; preds = %if.then433
  %231 = load i8, ptr %got_digit389, align 1, !dbg !2928
  %232 = trunc i8 %231 to i1, !dbg !2928
  %not436 = xor i1 %232, true, !dbg !2928
  br i1 %not436, label %if.then437, label %if.exit438, !dbg !2928

if.then437:                                       ; preds = %if.then435
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2930
  br label %err_retblock, !dbg !2930

if.exit438:                                       ; preds = %if.then435
  %233 = load i32, ptr %sign383, align 4, !dbg !2931
  %sifp439 = sitofp i32 %233 to double, !dbg !2931
  %fmul440 = fmul double %sifp439, 0.000000e+00, !dbg !2931
  store double %fmul440, ptr %blockret384, align 8, !dbg !2931
  br label %expr_block.exit1649, !dbg !2931

if.exit441:                                       ; preds = %if.then433
  %234 = load i64, ptr %index388, align 8, !dbg !2932
  %235 = load i64, ptr %last_char405, align 8, !dbg !2933
  %neq442 = icmp ne i64 %234, %235, !dbg !2932
  br i1 %neq442, label %and.rhs443, label %and.phi457, !dbg !2932

and.rhs443:                                       ; preds = %if.exit441
  %ptradd444 = getelementptr inbounds i8, ptr %chars382, i64 8, !dbg !2934
  %236 = load i64, ptr %ptradd444, align 8, !dbg !2934
  %237 = load ptr, ptr %chars382, align 8, !dbg !2934
  %238 = load i64, ptr %index388, align 8, !dbg !2935
  %add445 = add i64 %238, 1, !dbg !2935
  store i64 %add445, ptr %index388, align 8, !dbg !2935
  %ge446 = icmp uge i64 %add445, %236, !dbg !2935
  %239 = call i1 @llvm.expect.i1(i1 %ge446, i1 false), !dbg !2935
  br i1 %239, label %panic447, label %checkok454, !dbg !2935

checkok454:                                       ; preds = %and.rhs443
  %ptradd455 = getelementptr inbounds i8, ptr %237, i64 %add445, !dbg !2936
  %240 = load i8, ptr %ptradd455, align 1, !dbg !2936
  store i8 %240, ptr %c410, align 1, !dbg !2936
  %eq456 = icmp eq i8 %240, 48, !dbg !2937
  br label %and.phi457, !dbg !2937

and.phi457:                                       ; preds = %checkok454, %if.exit441
  %val458 = phi i1 [ false, %if.exit441 ], [ %eq456, %checkok454 ], !dbg !2937
  br i1 %val458, label %if.then459, label %if.exit482, !dbg !2937

if.then459:                                       ; preds = %and.phi457
  %241 = load i64, ptr %lrp, align 8, !dbg !2938
  %sub460 = sub i64 %241, 1, !dbg !2938
  store i64 %sub460, ptr %lrp, align 8, !dbg !2938
  store i8 1, ptr %got_digit389, align 1, !dbg !2940
  br label %loop.cond461, !dbg !2941

loop.cond461:                                     ; preds = %loop.body479, %if.then459
  %242 = load i64, ptr %last_char405, align 8, !dbg !2942
  %243 = load i64, ptr %index388, align 8, !dbg !2944
  %neq462 = icmp ne i64 %242, %243, !dbg !2942
  br i1 %neq462, label %and.rhs463, label %and.phi477, !dbg !2942

and.rhs463:                                       ; preds = %loop.cond461
  %ptradd464 = getelementptr inbounds i8, ptr %chars382, i64 8, !dbg !2945
  %244 = load i64, ptr %ptradd464, align 8, !dbg !2945
  %245 = load ptr, ptr %chars382, align 8, !dbg !2945
  %246 = load i64, ptr %index388, align 8, !dbg !2946
  %add465 = add i64 %246, 1, !dbg !2946
  store i64 %add465, ptr %index388, align 8, !dbg !2946
  %ge466 = icmp uge i64 %add465, %244, !dbg !2946
  %247 = call i1 @llvm.expect.i1(i1 %ge466, i1 false), !dbg !2946
  br i1 %247, label %panic467, label %checkok474, !dbg !2946

checkok474:                                       ; preds = %and.rhs463
  %ptradd475 = getelementptr inbounds i8, ptr %245, i64 %add465, !dbg !2947
  %248 = load i8, ptr %ptradd475, align 1, !dbg !2947
  store i8 %248, ptr %c410, align 1, !dbg !2947
  %eq476 = icmp eq i8 %248, 48, !dbg !2948
  br label %and.phi477, !dbg !2948

and.phi477:                                       ; preds = %checkok474, %loop.cond461
  %val478 = phi i1 [ false, %loop.cond461 ], [ %eq476, %checkok474 ], !dbg !2948
  br i1 %val478, label %loop.body479, label %loop.exit481, !dbg !2948

loop.body479:                                     ; preds = %and.phi477
  %249 = load i64, ptr %lrp, align 8, !dbg !2949
  %sub480 = sub i64 %249, 1, !dbg !2949
  store i64 %sub480, ptr %lrp, align 8, !dbg !2949
  br label %loop.cond461, !dbg !2949

loop.exit481:                                     ; preds = %and.phi477
  br label %if.exit482, !dbg !2949

if.exit482:                                       ; preds = %loop.exit481, %and.phi457
  br label %if.exit483, !dbg !2949

if.exit483:                                       ; preds = %if.exit482, %loop.exit431
  br label %loop.cond484, !dbg !2951

loop.cond484:                                     ; preds = %checkok600, %if.exit483
  %250 = load i8, ptr %c410, align 1, !dbg !2952
  %zext485 = zext i8 %250 to i32, !dbg !2952
  %sub486 = sub i32 %zext485, 48, !dbg !2952
  %lt487 = icmp ult i32 %sub486, 10, !dbg !2952
  br i1 %lt487, label %or.phi490, label %or.rhs488, !dbg !2952

or.rhs488:                                        ; preds = %loop.cond484
  %251 = load i8, ptr %c410, align 1, !dbg !2954
  %eq489 = icmp eq i8 %251, 46, !dbg !2954
  br label %or.phi490, !dbg !2954

or.phi490:                                        ; preds = %or.rhs488, %loop.cond484
  %val491 = phi i1 [ true, %loop.cond484 ], [ %eq489, %or.rhs488 ], !dbg !2954
  br i1 %val491, label %loop.body492, label %loop.exit602, !dbg !2954

loop.body492:                                     ; preds = %or.phi490
  store i8 1, ptr %switch493, align 1
  br label %switch.entry494

switch.entry494:                                  ; preds = %loop.body492
  %252 = load i8, ptr %switch493, align 1
  %253 = trunc i8 %252 to i1
  %254 = load i8, ptr %c410, align 1, !dbg !2955
  %eq495 = icmp eq i8 %254, 46, !dbg !2955
  %eq496 = icmp eq i1 %eq495, %253, !dbg !2955
  br i1 %eq496, label %switch.case497, label %next_if500, !dbg !2955

switch.case497:                                   ; preds = %switch.entry494
  %255 = load i8, ptr %got_rad401, align 1, !dbg !2958
  %256 = trunc i8 %255 to i1, !dbg !2958
  br i1 %256, label %if.then498, label %if.exit499, !dbg !2958

if.then498:                                       ; preds = %switch.case497
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2960
  br label %err_retblock, !dbg !2960

if.exit499:                                       ; preds = %switch.case497
  store i8 1, ptr %got_rad401, align 1, !dbg !2961
  %257 = load i64, ptr %dc402, align 8, !dbg !2962
  store i64 %257, ptr %lrp, align 8, !dbg !2962
  br label %switch.exit583, !dbg !2962

next_if500:                                       ; preds = %switch.entry494
  %258 = load i32, ptr %k, align 4, !dbg !2963
  %lt501 = icmp slt i32 %258, 125, !dbg !2963
  %eq502 = icmp eq i1 %lt501, %253, !dbg !2963
  br i1 %eq502, label %switch.case503, label %next_if576, !dbg !2963

switch.case503:                                   ; preds = %next_if500
  %259 = load i64, ptr %dc402, align 8, !dbg !2964
  %add504 = add i64 %259, 1, !dbg !2964
  store i64 %add504, ptr %dc402, align 8, !dbg !2964
  %260 = load i8, ptr %c410, align 1, !dbg !2966
  %neq505 = icmp ne i8 %260, 48, !dbg !2966
  br i1 %neq505, label %if.then506, label %if.exit508, !dbg !2966

if.then506:                                       ; preds = %switch.case503
  %261 = load i64, ptr %dc402, align 8, !dbg !2967
  %trunc507 = trunc i64 %261 to i32, !dbg !2967
  store i32 %trunc507, ptr %lnz, align 4, !dbg !2967
  br label %if.exit508, !dbg !2967

if.exit508:                                       ; preds = %if.then506, %switch.case503
  %262 = load i32, ptr %j, align 4, !dbg !2968
  %i2b509 = icmp ne i32 %262, 0, !dbg !2968
  br i1 %i2b509, label %if.then510, label %if.else549, !dbg !2968

if.then510:                                       ; preds = %if.exit508
  %263 = load i32, ptr %k, align 4, !dbg !2969
  %sext = sext i32 %263 to i64, !dbg !2969
  %lt511 = icmp slt i64 %sext, 0, !dbg !2969
  %264 = call i1 @llvm.expect.i1(i1 %lt511, i1 false), !dbg !2969
  br i1 %264, label %panic512, label %checkok517, !dbg !2969

checkok517:                                       ; preds = %if.then510
  %ge518 = icmp sge i64 %sext, 128, !dbg !2969
  %265 = call i1 @llvm.expect.i1(i1 %ge518, i1 false), !dbg !2969
  br i1 %265, label %panic519, label %checkok526, !dbg !2969

checkok526:                                       ; preds = %checkok517
  %ptroffset = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext, !dbg !2969
  %266 = load i32, ptr %k, align 4, !dbg !2971
  %sext527 = sext i32 %266 to i64, !dbg !2971
  %lt528 = icmp slt i64 %sext527, 0, !dbg !2971
  %267 = call i1 @llvm.expect.i1(i1 %lt528, i1 false), !dbg !2971
  br i1 %267, label %panic529, label %checkok534, !dbg !2971

checkok534:                                       ; preds = %checkok526
  %ge535 = icmp sge i64 %sext527, 128, !dbg !2971
  %268 = call i1 @llvm.expect.i1(i1 %ge535, i1 false), !dbg !2971
  br i1 %268, label %panic536, label %checkok543, !dbg !2971

checkok543:                                       ; preds = %checkok534
  %ptroffset544 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext527, !dbg !2971
  %269 = load i32, ptr %ptroffset544, align 4, !dbg !2971
  %mul545 = mul i32 %269, 10, !dbg !2972
  %270 = load i8, ptr %c410, align 1, !dbg !2973
  %zext546 = zext i8 %270 to i32, !dbg !2973
  %add547 = add i32 %mul545, %zext546, !dbg !2972
  %sub548 = sub i32 %add547, 48, !dbg !2972
  store i32 %sub548, ptr %ptroffset, align 4, !dbg !2972
  br label %if.exit570, !dbg !2972

if.else549:                                       ; preds = %if.exit508
  %271 = load i32, ptr %k, align 4, !dbg !2974
  %sext550 = sext i32 %271 to i64, !dbg !2974
  %lt551 = icmp slt i64 %sext550, 0, !dbg !2974
  %272 = call i1 @llvm.expect.i1(i1 %lt551, i1 false), !dbg !2974
  br i1 %272, label %panic552, label %checkok557, !dbg !2974

checkok557:                                       ; preds = %if.else549
  %ge558 = icmp sge i64 %sext550, 128, !dbg !2974
  %273 = call i1 @llvm.expect.i1(i1 %ge558, i1 false), !dbg !2974
  br i1 %273, label %panic559, label %checkok566, !dbg !2974

checkok566:                                       ; preds = %checkok557
  %ptroffset567 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext550, !dbg !2974
  %274 = load i8, ptr %c410, align 1, !dbg !2976
  %zext568 = zext i8 %274 to i32, !dbg !2976
  %sub569 = sub i32 %zext568, 48, !dbg !2976
  store i32 %sub569, ptr %ptroffset567, align 4, !dbg !2976
  br label %if.exit570, !dbg !2976

if.exit570:                                       ; preds = %checkok566, %checkok543
  %275 = load i32, ptr %j, align 4, !dbg !2977
  %add571 = add i32 %275, 1, !dbg !2977
  store i32 %add571, ptr %j, align 4, !dbg !2977
  %eq572 = icmp eq i32 %add571, 9, !dbg !2978
  br i1 %eq572, label %if.then573, label %if.exit575, !dbg !2978

if.then573:                                       ; preds = %if.exit570
  %276 = load i32, ptr %k, align 4, !dbg !2979
  %add574 = add i32 %276, 1, !dbg !2979
  store i32 %add574, ptr %k, align 4, !dbg !2979
  store i32 0, ptr %j, align 4, !dbg !2981
  br label %if.exit575, !dbg !2981

if.exit575:                                       ; preds = %if.then573, %if.exit570
  store i8 1, ptr %got_digit389, align 1, !dbg !2982
  br label %switch.exit583, !dbg !2982

next_if576:                                       ; preds = %next_if500
  br label %switch.default, !dbg !2982

switch.default:                                   ; preds = %next_if576
  %277 = load i64, ptr %dc402, align 8, !dbg !2983
  %add577 = add i64 %277, 1, !dbg !2983
  store i64 %add577, ptr %dc402, align 8, !dbg !2983
  %278 = load i8, ptr %c410, align 1, !dbg !2985
  %neq578 = icmp ne i8 %278, 48, !dbg !2985
  br i1 %neq578, label %if.then579, label %if.exit582, !dbg !2985

if.then579:                                       ; preds = %switch.default
  %ptradd580 = getelementptr inbounds i8, ptr %x387, i64 496, !dbg !2986
  %279 = load i32, ptr %ptradd580, align 4, !dbg !2986
  %or581 = or i32 %279, 1, !dbg !2987
  store i32 %or581, ptr %ptradd580, align 4, !dbg !2987
  br label %if.exit582, !dbg !2987

if.exit582:                                       ; preds = %if.then579, %switch.default
  br label %switch.exit583, !dbg !2987

switch.exit583:                                   ; preds = %if.exit582, %if.exit575, %if.exit499
  %280 = load i64, ptr %index388, align 8, !dbg !2988
  %281 = load i64, ptr %last_char405, align 8, !dbg !2989
  %eq584 = icmp eq i64 %280, %281, !dbg !2988
  br i1 %eq584, label %if.then585, label %if.exit586, !dbg !2988

if.then585:                                       ; preds = %switch.exit583
  br label %loop.exit602, !dbg !2990

if.exit586:                                       ; preds = %switch.exit583
  %282 = load i64, ptr %index388, align 8, !dbg !2991
  %283 = load i64, ptr %last_char405, align 8, !dbg !2992
  %lt587 = icmp ult i64 %282, %283, !dbg !2991
  br i1 %lt587, label %assert_ok589, label %assert_fail588, !dbg !2991

assert_fail588:                                   ; preds = %if.exit586
  %284 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2991
  call void %284(ptr @.panic_msg.99, i64 34, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 112) #6, !dbg !2991
  unreachable, !dbg !2991

assert_ok589:                                     ; preds = %if.exit586
  %ptradd590 = getelementptr inbounds i8, ptr %chars382, i64 8, !dbg !2993
  %285 = load i64, ptr %ptradd590, align 8, !dbg !2993
  %286 = load ptr, ptr %chars382, align 8, !dbg !2993
  %287 = load i64, ptr %index388, align 8, !dbg !2994
  %add591 = add i64 %287, 1, !dbg !2994
  store i64 %add591, ptr %index388, align 8, !dbg !2994
  %ge592 = icmp uge i64 %add591, %285, !dbg !2994
  %288 = call i1 @llvm.expect.i1(i1 %ge592, i1 false), !dbg !2994
  br i1 %288, label %panic593, label %checkok600, !dbg !2994

checkok600:                                       ; preds = %assert_ok589
  %ptradd601 = getelementptr inbounds i8, ptr %286, i64 %add591, !dbg !2995
  %289 = load i8, ptr %ptradd601, align 1, !dbg !2995
  store i8 %289, ptr %c410, align 1, !dbg !2995
  br label %loop.cond484, !dbg !2995

loop.exit602:                                     ; preds = %if.then585, %or.phi490
  %290 = load i8, ptr %got_rad401, align 1, !dbg !2996
  %291 = trunc i8 %290 to i1, !dbg !2996
  %not603 = xor i1 %291, true, !dbg !2996
  br i1 %not603, label %if.then604, label %if.exit605, !dbg !2996

if.then604:                                       ; preds = %loop.exit602
  %292 = load i64, ptr %dc402, align 8, !dbg !2997
  store i64 %292, ptr %lrp, align 8, !dbg !2997
  br label %if.exit605, !dbg !2997

if.exit605:                                       ; preds = %if.then604, %loop.exit602
  %293 = load i8, ptr %got_digit389, align 1, !dbg !2998
  %294 = trunc i8 %293 to i1, !dbg !2998
  %not606 = xor i1 %294, true, !dbg !2998
  br i1 %not606, label %if.then607, label %if.exit608, !dbg !2998

if.then607:                                       ; preds = %if.exit605
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !2999
  br label %err_retblock, !dbg !2999

if.exit608:                                       ; preds = %if.exit605
  %295 = load i8, ptr %c410, align 1, !dbg !3000
  %zext609 = zext i8 %295 to i32, !dbg !3000
  %or610 = or i32 %zext609, 32, !dbg !3000
  %eq611 = icmp eq i32 %or610, 101, !dbg !3000
  %check612 = icmp sge i32 %or610, 0, !dbg !3000
  %siui-eq613 = and i1 %check612, %eq611, !dbg !3000
  br i1 %siui-eq613, label %if.then614, label %if.else645, !dbg !3000

if.then614:                                       ; preds = %if.exit608
  %296 = load i64, ptr %last_char405, align 8, !dbg !3001
  %297 = load i64, ptr %index388, align 8, !dbg !3003
  %eq615 = icmp eq i64 %296, %297, !dbg !3001
  br i1 %eq615, label %if.then616, label %if.exit617, !dbg !3001

if.then616:                                       ; preds = %if.then614
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !3004
  br label %err_retblock, !dbg !3004

if.exit617:                                       ; preds = %if.then614
    #dbg_declare(ptr %e10, !3005, !DIExpression(), !3006)
  %298 = load %"char[]", ptr %chars382, align 8, !dbg !3007
  %299 = extractvalue %"char[]" %298, 0, !dbg !3007
  %300 = load i64, ptr %index388, align 8, !dbg !3008
  %add618 = add i64 %300, 1, !dbg !3008
  %301 = extractvalue %"char[]" %298, 1, !dbg !3008
  %gt619 = icmp sgt i64 %add618, %301, !dbg !3008
  %302 = call i1 @llvm.expect.i1(i1 %gt619, i1 false), !dbg !3008
  br i1 %302, label %panic620, label %checkok627, !dbg !3008

checkok627:                                       ; preds = %if.exit617
  %underflow628 = icmp slt i64 %add618, 0, !dbg !3009
  %303 = call i1 @llvm.expect.i1(i1 %underflow628, i1 false), !dbg !3009
  br i1 %303, label %panic629, label %checkok634, !dbg !3009

checkok634:                                       ; preds = %checkok627
  %size635 = sub i64 %301, %add618, !dbg !3008
  %ptradd636 = getelementptr inbounds i8, ptr %299, i64 %add618, !dbg !3008
  %304 = insertvalue %"char[]" undef, ptr %ptradd636, 0, !dbg !3008
  %305 = insertvalue %"char[]" %304, i64 %size635, 1, !dbg !3008
  %306 = call i64 @std.core.String.to_long(ptr %retparam637, ptr %ptradd636, i64 %size635, i32 10), !dbg !3010
  %not_err638 = icmp eq i64 %306, 0, !dbg !3010
  %307 = call i1 @llvm.expect.i1(i1 %not_err638, i1 true), !dbg !3010
  br i1 %307, label %after_check639, label %else_block640, !dbg !3010

after_check639:                                   ; preds = %checkok634
  %308 = load i64, ptr %retparam637, align 8, !dbg !3010
  br label %phi_block643, !dbg !3010

else_block640:                                    ; preds = %checkok634
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %error_var641, align 8, !dbg !3011
  br label %guard_block642, !dbg !3011

guard_block642:                                   ; preds = %else_block640
  %309 = load i64, ptr %error_var641, align 8, !dbg !3011
  store i64 %309, ptr %reterr, align 8, !dbg !3011
  br label %err_retblock, !dbg !3011

phi_block643:                                     ; preds = %after_check639
  store i64 %308, ptr %e10, align 8, !dbg !3011
  %310 = load i64, ptr %lrp, align 8, !dbg !3012
  %311 = load i64, ptr %e10, align 8, !dbg !3013
  %add644 = add i64 %310, %311, !dbg !3012
  store i64 %add644, ptr %lrp, align 8, !dbg !3012
  br label %if.exit649, !dbg !3012

if.else645:                                       ; preds = %if.exit608
  %312 = load i64, ptr %index388, align 8, !dbg !3014
  %313 = load i64, ptr %last_char405, align 8, !dbg !3015
  %neq646 = icmp ne i64 %312, %313, !dbg !3014
  br i1 %neq646, label %if.then647, label %if.exit648, !dbg !3014

if.then647:                                       ; preds = %if.else645
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !3016
  br label %err_retblock, !dbg !3016

if.exit648:                                       ; preds = %if.else645
  br label %if.exit649, !dbg !3016

if.exit649:                                       ; preds = %if.exit648, %phi_block643
  %314 = load i32, ptr %x387, align 4, !dbg !3018
  %i2nb650 = icmp eq i32 %314, 0, !dbg !3018
  br i1 %i2nb650, label %if.then651, label %if.exit654, !dbg !3018

if.then651:                                       ; preds = %if.exit649
  %315 = load i32, ptr %sign383, align 4, !dbg !3019
  %sifp652 = sitofp i32 %315 to double, !dbg !3019
  %fmul653 = fmul double %sifp652, 0.000000e+00, !dbg !3019
  store double %fmul653, ptr %blockret384, align 8, !dbg !3019
  br label %expr_block.exit1649, !dbg !3019

if.exit654:                                       ; preds = %if.exit649
  %316 = load i64, ptr %lrp, align 8, !dbg !3020
  %317 = load i64, ptr %dc402, align 8, !dbg !3021
  %eq655 = icmp eq i64 %316, %317, !dbg !3020
  br i1 %eq655, label %and.rhs656, label %and.phi658, !dbg !3020

and.rhs656:                                       ; preds = %if.exit654
  %318 = load i64, ptr %dc402, align 8, !dbg !3022
  %lt657 = icmp slt i64 %318, 10, !dbg !3022
  br label %and.phi658, !dbg !3022

and.phi658:                                       ; preds = %and.rhs656, %if.exit654
  %val659 = phi i1 [ false, %if.exit654 ], [ %lt657, %and.rhs656 ], !dbg !3022
  br i1 %val659, label %and.rhs660, label %and.phi666, !dbg !3022

and.rhs660:                                       ; preds = %and.phi658
  br i1 true, label %or.phi664, label %or.rhs661, !dbg !3023

or.rhs661:                                        ; preds = %and.rhs660
  %319 = load i32, ptr %x387, align 4, !dbg !3024
  %zext662 = zext i32 %319 to i64, !dbg !3024
  %lshr = lshr i64 %zext662, 53, !dbg !3025
  %320 = freeze i64 %lshr, !dbg !3025
  %eq663 = icmp eq i64 0, %320, !dbg !3025
  br label %or.phi664, !dbg !3025

or.phi664:                                        ; preds = %or.rhs661, %and.rhs660
  %val665 = phi i1 [ true, %and.rhs660 ], [ %eq663, %or.rhs661 ], !dbg !3025
  br label %and.phi666, !dbg !3025

and.phi666:                                       ; preds = %or.phi664, %and.phi658
  %val667 = phi i1 [ false, %and.phi658 ], [ %val665, %or.phi664 ], !dbg !3025
  br i1 %val667, label %if.then668, label %if.exit672, !dbg !3025

if.then668:                                       ; preds = %and.phi666
  %321 = load i32, ptr %sign383, align 4, !dbg !3026
  %sifp669 = sitofp i32 %321 to double, !dbg !3026
  %322 = load i32, ptr %x387, align 4, !dbg !3027
  %uifp670 = uitofp i32 %322 to double, !dbg !3027
  %fmul671 = fmul double %sifp669, %uifp670, !dbg !3026
  store double %fmul671, ptr %blockret384, align 8, !dbg !3026
  br label %expr_block.exit1649, !dbg !3026

if.exit672:                                       ; preds = %and.phi666
  %323 = load i64, ptr %lrp, align 8, !dbg !3028
  %gt673 = icmp sgt i64 %323, 537, !dbg !3028
  br i1 %gt673, label %if.then674, label %if.exit675, !dbg !3028

if.then674:                                       ; preds = %if.exit672
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !3029
  br label %err_retblock, !dbg !3029

if.exit675:                                       ; preds = %if.exit672
  %324 = load i64, ptr %lrp, align 8, !dbg !3030
  %lt676 = icmp slt i64 %324, -1180, !dbg !3030
  br i1 %lt676, label %if.then677, label %if.exit678, !dbg !3030

if.then677:                                       ; preds = %if.exit675
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !3031
  br label %err_retblock, !dbg !3031

if.exit678:                                       ; preds = %if.exit675
  %325 = load i32, ptr %j, align 4, !dbg !3032
  %i2b679 = icmp ne i32 %325, 0, !dbg !3032
  br i1 %i2b679, label %if.then680, label %if.exit706, !dbg !3032

if.then680:                                       ; preds = %if.exit678
  br label %loop.cond681, !dbg !3033

loop.cond681:                                     ; preds = %checkok700, %if.then680
  %326 = load i32, ptr %j, align 4, !dbg !3035
  %lt682 = icmp slt i32 %326, 9, !dbg !3035
  br i1 %lt682, label %loop.body683, label %loop.exit704, !dbg !3035

loop.body683:                                     ; preds = %loop.cond681
  %327 = load i32, ptr %k, align 4, !dbg !3037
  %sext684 = sext i32 %327 to i64, !dbg !3037
  %lt685 = icmp slt i64 %sext684, 0, !dbg !3037
  %328 = call i1 @llvm.expect.i1(i1 %lt685, i1 false), !dbg !3037
  br i1 %328, label %panic686, label %checkok691, !dbg !3037

checkok691:                                       ; preds = %loop.body683
  %ge692 = icmp sge i64 %sext684, 128, !dbg !3037
  %329 = call i1 @llvm.expect.i1(i1 %ge692, i1 false), !dbg !3037
  br i1 %329, label %panic693, label %checkok700, !dbg !3037

checkok700:                                       ; preds = %checkok691
  %ptroffset701 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext684, !dbg !3037
  %330 = load i32, ptr %ptroffset701, align 4, !dbg !3037
  %mul702 = mul i32 %330, 10, !dbg !3038
  store i32 %mul702, ptr %ptroffset701, align 4, !dbg !3038
  %331 = load i32, ptr %j, align 4, !dbg !3039
  %add703 = add i32 %331, 1, !dbg !3039
  store i32 %add703, ptr %j, align 4, !dbg !3039
  br label %loop.cond681, !dbg !3039

loop.exit704:                                     ; preds = %loop.cond681
  %332 = load i32, ptr %k, align 4, !dbg !3040
  %add705 = add i32 %332, 1, !dbg !3040
  store i32 %add705, ptr %k, align 4, !dbg !3040
  store i32 0, ptr %j, align 4, !dbg !3041
  br label %if.exit706, !dbg !3041

if.exit706:                                       ; preds = %loop.exit704, %if.exit678
    #dbg_declare(ptr %a, !3042, !DIExpression(), !3043)
  store i32 0, ptr %a, align 4, !dbg !3043
    #dbg_declare(ptr %z, !3044, !DIExpression(), !3045)
  %333 = load i32, ptr %k, align 4, !dbg !3046
  store i32 %333, ptr %z, align 4, !dbg !3046
    #dbg_declare(ptr %e2707, !3047, !DIExpression(), !3048)
  store i32 0, ptr %e2707, align 4, !dbg !3048
    #dbg_declare(ptr %rp708, !3049, !DIExpression(), !3050)
  %334 = load i64, ptr %lrp, align 8, !dbg !3051
  store i64 %334, ptr %rp708, align 8, !dbg !3051
  %335 = load i32, ptr %lnz, align 4, !dbg !3052
  %lt709 = icmp slt i32 %335, 9, !dbg !3052
  br i1 %lt709, label %and.rhs710, label %and.phi712, !dbg !3052

and.rhs710:                                       ; preds = %if.exit706
  %336 = load i32, ptr %lnz, align 4, !dbg !3053
  %sext711 = sext i32 %336 to i64, !dbg !3053
  %337 = load i64, ptr %rp708, align 8, !dbg !3054
  %le = icmp sle i64 %sext711, %337, !dbg !3053
  br label %and.phi712, !dbg !3053

and.phi712:                                       ; preds = %and.rhs710, %if.exit706
  %val713 = phi i1 [ false, %if.exit706 ], [ %le, %and.rhs710 ], !dbg !3053
  br i1 %val713, label %and.rhs714, label %and.phi716, !dbg !3053

and.rhs714:                                       ; preds = %and.phi712
  %338 = load i64, ptr %rp708, align 8, !dbg !3055
  %lt715 = icmp slt i64 %338, 18, !dbg !3055
  br label %and.phi716, !dbg !3055

and.phi716:                                       ; preds = %and.rhs714, %and.phi712
  %val717 = phi i1 [ false, %and.phi712 ], [ %lt715, %and.rhs714 ], !dbg !3055
  br i1 %val717, label %if.then718, label %if.exit794, !dbg !3055

if.then718:                                       ; preds = %and.phi716
  %339 = load i64, ptr %rp708, align 8, !dbg !3056
  %eq719 = icmp eq i64 %339, 9, !dbg !3056
  br i1 %eq719, label %if.then720, label %if.exit724, !dbg !3056

if.then720:                                       ; preds = %if.then718
  %340 = load i32, ptr %sign383, align 4, !dbg !3058
  %sifp721 = sitofp i32 %340 to double, !dbg !3058
  %341 = load i32, ptr %x387, align 4, !dbg !3059
  %uifp722 = uitofp i32 %341 to double, !dbg !3059
  %fmul723 = fmul double %sifp721, %uifp722, !dbg !3058
  store double %fmul723, ptr %blockret384, align 8, !dbg !3058
  br label %expr_block.exit1649, !dbg !3058

if.exit724:                                       ; preds = %if.then718
  %342 = load i64, ptr %rp708, align 8, !dbg !3060
  %lt725 = icmp slt i64 %342, 9, !dbg !3060
  br i1 %lt725, label %if.then726, label %if.exit752, !dbg !3060

if.then726:                                       ; preds = %if.exit724
  %343 = load i32, ptr %sign383, align 4, !dbg !3061
  %sifp727 = sitofp i32 %343 to double, !dbg !3061
  %344 = load i32, ptr %x387, align 4, !dbg !3062
  %uifp728 = uitofp i32 %344 to double, !dbg !3062
  %fmul729 = fmul double %sifp727, %uifp728, !dbg !3061
  %345 = load i64, ptr %rp708, align 8, !dbg !3063
  %sub730 = sub i64 8, %345, !dbg !3064
  %lt731 = icmp slt i64 %sub730, 0, !dbg !3064
  %346 = call i1 @llvm.expect.i1(i1 %lt731, i1 false), !dbg !3064
  br i1 %346, label %panic732, label %checkok737, !dbg !3064

checkok737:                                       ; preds = %if.then726
  %ge738 = icmp sge i64 %sub730, 8, !dbg !3064
  %347 = call i1 @llvm.expect.i1(i1 %ge738, i1 false), !dbg !3064
  br i1 %347, label %panic739, label %checkok746, !dbg !3064

checkok746:                                       ; preds = %checkok737
  %ptroffset747 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub730, !dbg !3064
  %348 = load i32, ptr %ptroffset747, align 4, !dbg !3064
  %sifp748 = sitofp i32 %348 to double, !dbg !3064
  %zero = fcmp ueq double %sifp748, 0.000000e+00, !dbg !3061
  %349 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !3061
  br i1 %349, label %panic749, label %checkok750, !dbg !3061

checkok750:                                       ; preds = %checkok746
  %fdiv751 = fdiv double %fmul729, %sifp748, !dbg !3061
  store double %fdiv751, ptr %blockret384, align 8, !dbg !3061
  br label %expr_block.exit1649, !dbg !3061

if.exit752:                                       ; preds = %if.exit724
    #dbg_declare(ptr %bitlim, !3065, !DIExpression(), !3066)
  %350 = load i64, ptr %rp708, align 8, !dbg !3067
  %sub753 = sub i64 %350, 9, !dbg !3068
  %trunc754 = trunc i64 %sub753 to i32, !dbg !3068
  %mul755 = mul i32 3, %trunc754, !dbg !3069
  %sub756 = sub i32 53, %mul755, !dbg !3070
  store i32 %sub756, ptr %bitlim, align 4, !dbg !3070
  %351 = load i32, ptr %bitlim, align 4, !dbg !3071
  %gt757 = icmp sgt i32 %351, 30, !dbg !3071
  br i1 %gt757, label %or.phi767, label %or.rhs758, !dbg !3071

or.rhs758:                                        ; preds = %if.exit752
  %352 = load i32, ptr %x387, align 4, !dbg !3072
  %353 = load i32, ptr %bitlim, align 4, !dbg !3073
  %shift_exceeds = icmp uge i32 %353, 32, !dbg !3074
  %354 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !3074
  br i1 %354, label %panic759, label %checkok764, !dbg !3074

checkok764:                                       ; preds = %or.rhs758
  %lshr765 = lshr i32 %352, %353, !dbg !3074
  %355 = freeze i32 %lshr765, !dbg !3074
  %eq766 = icmp eq i32 0, %355, !dbg !3074
  br label %or.phi767, !dbg !3074

or.phi767:                                        ; preds = %checkok764, %if.exit752
  %val768 = phi i1 [ true, %if.exit752 ], [ %eq766, %checkok764 ], !dbg !3074
  br i1 %val768, label %if.then769, label %if.exit793, !dbg !3074

if.then769:                                       ; preds = %or.phi767
  %356 = load i32, ptr %sign383, align 4, !dbg !3075
  %sifp770 = sitofp i32 %356 to double, !dbg !3075
  %357 = load i32, ptr %x387, align 4, !dbg !3076
  %uifp771 = uitofp i32 %357 to double, !dbg !3076
  %fmul772 = fmul double %sifp770, %uifp771, !dbg !3075
  %358 = load i64, ptr %rp708, align 8, !dbg !3077
  %sub773 = sub i64 %358, 10, !dbg !3077
  %lt774 = icmp slt i64 %sub773, 0, !dbg !3077
  %359 = call i1 @llvm.expect.i1(i1 %lt774, i1 false), !dbg !3077
  br i1 %359, label %panic775, label %checkok780, !dbg !3077

checkok780:                                       ; preds = %if.then769
  %ge781 = icmp sge i64 %sub773, 8, !dbg !3077
  %360 = call i1 @llvm.expect.i1(i1 %ge781, i1 false), !dbg !3077
  br i1 %360, label %panic782, label %checkok789, !dbg !3077

checkok789:                                       ; preds = %checkok780
  %ptroffset790 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub773, !dbg !3077
  %361 = load i32, ptr %ptroffset790, align 4, !dbg !3077
  %sifp791 = sitofp i32 %361 to double, !dbg !3077
  %fmul792 = fmul double %fmul772, %sifp791, !dbg !3075
  store double %fmul792, ptr %blockret384, align 8, !dbg !3075
  br label %expr_block.exit1649, !dbg !3075

if.exit793:                                       ; preds = %or.phi767
  br label %if.exit794, !dbg !3075

if.exit794:                                       ; preds = %if.exit793, %and.phi716
  %362 = load i64, ptr %rp708, align 8, !dbg !3078
  %smod = srem i64 %362, 9, !dbg !3078
  %i2b795 = icmp ne i64 %smod, 0, !dbg !3078
  br i1 %i2b795, label %if.then796, label %if.exit947, !dbg !3078

if.then796:                                       ; preds = %if.exit794
    #dbg_declare(ptr %rpm9, !3079, !DIExpression(), !3081)
  %363 = load i64, ptr %rp708, align 8, !dbg !3082
  %ge797 = icmp sge i64 %363, 0, !dbg !3082
  br i1 %ge797, label %cond.lhs798, label %cond.rhs800, !dbg !3082

cond.lhs798:                                      ; preds = %if.then796
  %364 = load i64, ptr %rp708, align 8, !dbg !3083
  %smod799 = srem i64 %364, 9, !dbg !3083
  br label %cond.phi803, !dbg !3083

cond.rhs800:                                      ; preds = %if.then796
  %365 = load i64, ptr %rp708, align 8, !dbg !3084
  %smod801 = srem i64 %365, 9, !dbg !3084
  %add802 = add i64 %smod801, 9, !dbg !3084
  br label %cond.phi803, !dbg !3084

cond.phi803:                                      ; preds = %cond.rhs800, %cond.lhs798
  %val804 = phi i64 [ %smod799, %cond.lhs798 ], [ %add802, %cond.rhs800 ], !dbg !3084
  store i64 %val804, ptr %rpm9, align 8, !dbg !3084
    #dbg_declare(ptr %p10, !3085, !DIExpression(), !3086)
  %366 = load i64, ptr %rpm9, align 8, !dbg !3087
  %sub805 = sub i64 8, %366, !dbg !3088
  %lt806 = icmp slt i64 %sub805, 0, !dbg !3088
  %367 = call i1 @llvm.expect.i1(i1 %lt806, i1 false), !dbg !3088
  br i1 %367, label %panic807, label %checkok812, !dbg !3088

checkok812:                                       ; preds = %cond.phi803
  %ge813 = icmp sge i64 %sub805, 8, !dbg !3088
  %368 = call i1 @llvm.expect.i1(i1 %ge813, i1 false), !dbg !3088
  br i1 %368, label %panic814, label %checkok821, !dbg !3088

checkok821:                                       ; preds = %checkok812
  %ptroffset822 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub805, !dbg !3088
  %369 = load i32, ptr %ptroffset822, align 4, !dbg !3088
  store i32 %369, ptr %p10, align 4, !dbg !3088
    #dbg_declare(ptr %carry, !3089, !DIExpression(), !3090)
  store i32 0, ptr %carry, align 4, !dbg !3091
  %370 = load i32, ptr %a, align 4, !dbg !3092
  store i32 %370, ptr %k, align 4, !dbg !3092
  br label %loop.cond823, !dbg !3092

loop.cond823:                                     ; preds = %if.exit920, %checkok821
  %371 = load i32, ptr %k, align 4, !dbg !3094
  %372 = load i32, ptr %z, align 4, !dbg !3095
  %neq824 = icmp ne i32 %371, %372, !dbg !3094
  br i1 %neq824, label %loop.body825, label %loop.exit922, !dbg !3094

loop.body825:                                     ; preds = %loop.cond823
    #dbg_declare(ptr %tmp, !3096, !DIExpression(), !3098)
  %373 = load i32, ptr %k, align 4, !dbg !3099
  %sext826 = sext i32 %373 to i64, !dbg !3099
  %lt827 = icmp slt i64 %sext826, 0, !dbg !3099
  %374 = call i1 @llvm.expect.i1(i1 %lt827, i1 false), !dbg !3099
  br i1 %374, label %panic828, label %checkok833, !dbg !3099

checkok833:                                       ; preds = %loop.body825
  %ge834 = icmp sge i64 %sext826, 128, !dbg !3099
  %375 = call i1 @llvm.expect.i1(i1 %ge834, i1 false), !dbg !3099
  br i1 %375, label %panic835, label %checkok842, !dbg !3099

checkok842:                                       ; preds = %checkok833
  %ptroffset843 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext826, !dbg !3099
  %376 = load i32, ptr %ptroffset843, align 4, !dbg !3099
  %377 = load i32, ptr %p10, align 4, !dbg !3100
  %zero844 = icmp eq i32 %377, 0, !dbg !3101
  %378 = call i1 @llvm.expect.i1(i1 %zero844, i1 false), !dbg !3101
  br i1 %378, label %panic845, label %checkok846, !dbg !3101

checkok846:                                       ; preds = %checkok842
  %smod847 = srem i32 %376, %377, !dbg !3101
  store i32 %smod847, ptr %tmp, align 4, !dbg !3101
  %379 = load i32, ptr %k, align 4, !dbg !3102
  %sext848 = sext i32 %379 to i64, !dbg !3102
  %lt849 = icmp slt i64 %sext848, 0, !dbg !3102
  %380 = call i1 @llvm.expect.i1(i1 %lt849, i1 false), !dbg !3102
  br i1 %380, label %panic850, label %checkok855, !dbg !3102

checkok855:                                       ; preds = %checkok846
  %ge856 = icmp sge i64 %sext848, 128, !dbg !3102
  %381 = call i1 @llvm.expect.i1(i1 %ge856, i1 false), !dbg !3102
  br i1 %381, label %panic857, label %checkok864, !dbg !3102

checkok864:                                       ; preds = %checkok855
  %ptroffset865 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext848, !dbg !3102
  %382 = load i32, ptr %k, align 4, !dbg !3103
  %sext866 = sext i32 %382 to i64, !dbg !3103
  %lt867 = icmp slt i64 %sext866, 0, !dbg !3103
  %383 = call i1 @llvm.expect.i1(i1 %lt867, i1 false), !dbg !3103
  br i1 %383, label %panic868, label %checkok873, !dbg !3103

checkok873:                                       ; preds = %checkok864
  %ge874 = icmp sge i64 %sext866, 128, !dbg !3103
  %384 = call i1 @llvm.expect.i1(i1 %ge874, i1 false), !dbg !3103
  br i1 %384, label %panic875, label %checkok882, !dbg !3103

checkok882:                                       ; preds = %checkok873
  %ptroffset883 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext866, !dbg !3103
  %385 = load i32, ptr %ptroffset883, align 4, !dbg !3103
  %386 = load i32, ptr %p10, align 4, !dbg !3104
  %zero884 = icmp eq i32 %386, 0, !dbg !3105
  %387 = call i1 @llvm.expect.i1(i1 %zero884, i1 false), !dbg !3105
  br i1 %387, label %panic885, label %checkok886, !dbg !3105

checkok886:                                       ; preds = %checkok882
  %sdiv = sdiv i32 %385, %386, !dbg !3105
  %388 = load i32, ptr %carry, align 4, !dbg !3106
  %add887 = add i32 %sdiv, %388, !dbg !3105
  store i32 %add887, ptr %ptroffset865, align 4, !dbg !3105
  %389 = load i32, ptr %p10, align 4, !dbg !3107
  %zero888 = icmp eq i32 %389, 0, !dbg !3108
  %390 = call i1 @llvm.expect.i1(i1 %zero888, i1 false), !dbg !3108
  br i1 %390, label %panic889, label %checkok890, !dbg !3108

checkok890:                                       ; preds = %checkok886
  %sdiv891 = sdiv i32 1000000000, %389, !dbg !3108
  %391 = load i32, ptr %tmp, align 4, !dbg !3109
  %mul892 = mul i32 %sdiv891, %391, !dbg !3108
  store i32 %mul892, ptr %carry, align 4, !dbg !3108
  %392 = load i32, ptr %k, align 4, !dbg !3110
  %393 = load i32, ptr %a, align 4, !dbg !3111
  %eq893 = icmp eq i32 %392, %393, !dbg !3110
  br i1 %eq893, label %and.rhs894, label %and.phi914, !dbg !3110

and.rhs894:                                       ; preds = %checkok890
  %394 = load i32, ptr %k, align 4, !dbg !3112
  %sext895 = sext i32 %394 to i64, !dbg !3112
  %lt896 = icmp slt i64 %sext895, 0, !dbg !3112
  %395 = call i1 @llvm.expect.i1(i1 %lt896, i1 false), !dbg !3112
  br i1 %395, label %panic897, label %checkok902, !dbg !3112

checkok902:                                       ; preds = %and.rhs894
  %ge903 = icmp sge i64 %sext895, 128, !dbg !3112
  %396 = call i1 @llvm.expect.i1(i1 %ge903, i1 false), !dbg !3112
  br i1 %396, label %panic904, label %checkok911, !dbg !3112

checkok911:                                       ; preds = %checkok902
  %ptroffset912 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext895, !dbg !3112
  %397 = load i32, ptr %ptroffset912, align 4, !dbg !3112
  %i2nb913 = icmp eq i32 %397, 0, !dbg !3112
  br label %and.phi914, !dbg !3112

and.phi914:                                       ; preds = %checkok911, %checkok890
  %val915 = phi i1 [ false, %checkok890 ], [ %i2nb913, %checkok911 ], !dbg !3112
  br i1 %val915, label %if.then916, label %if.exit920, !dbg !3112

if.then916:                                       ; preds = %and.phi914
  %398 = load i32, ptr %a, align 4, !dbg !3113
  %add917 = add i32 %398, 1, !dbg !3113
  %and918 = and i32 %add917, 127, !dbg !3113
  store i32 %and918, ptr %a, align 4, !dbg !3113
  %399 = load i64, ptr %rp708, align 8, !dbg !3115
  %sub919 = sub i64 %399, 9, !dbg !3115
  store i64 %sub919, ptr %rp708, align 8, !dbg !3115
  br label %if.exit920, !dbg !3115

if.exit920:                                       ; preds = %if.then916, %and.phi914
  %400 = load i32, ptr %k, align 4, !dbg !3116
  %add921 = add i32 %400, 1, !dbg !3116
  store i32 %add921, ptr %k, align 4, !dbg !3116
  br label %loop.cond823, !dbg !3116

loop.exit922:                                     ; preds = %loop.cond823
  %401 = load i32, ptr %carry, align 4, !dbg !3117
  %i2b923 = icmp ne i32 %401, 0, !dbg !3117
  br i1 %i2b923, label %if.then924, label %if.exit944, !dbg !3117

if.then924:                                       ; preds = %loop.exit922
  %402 = load i32, ptr %z, align 4, !dbg !3118
  %add925 = add i32 %402, 1, !dbg !3118
  store i32 %add925, ptr %z, align 4, !dbg !3118
  %sext926 = sext i32 %402 to i64, !dbg !3118
  %lt927 = icmp slt i64 %sext926, 0, !dbg !3118
  %403 = call i1 @llvm.expect.i1(i1 %lt927, i1 false), !dbg !3118
  br i1 %403, label %panic928, label %checkok933, !dbg !3118

checkok933:                                       ; preds = %if.then924
  %ge934 = icmp sge i64 %sext926, 128, !dbg !3118
  %404 = call i1 @llvm.expect.i1(i1 %ge934, i1 false), !dbg !3118
  br i1 %404, label %panic935, label %checkok942, !dbg !3118

checkok942:                                       ; preds = %checkok933
  %ptroffset943 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext926, !dbg !3118
  %405 = load i32, ptr %carry, align 4, !dbg !3119
  store i32 %405, ptr %ptroffset943, align 4, !dbg !3119
  br label %if.exit944, !dbg !3119

if.exit944:                                       ; preds = %checkok942, %loop.exit922
  %406 = load i64, ptr %rp708, align 8, !dbg !3120
  %407 = load i64, ptr %rpm9, align 8, !dbg !3121
  %sub945 = sub i64 9, %407, !dbg !3122
  %add946 = add i64 %406, %sub945, !dbg !3120
  store i64 %add946, ptr %rp708, align 8, !dbg !3120
  br label %if.exit947, !dbg !3120

if.exit947:                                       ; preds = %if.exit944, %if.exit794
  br label %loop.cond948, !dbg !3123

loop.cond948:                                     ; preds = %if.exit1153, %if.exit947
  %408 = load i64, ptr %rp708, align 8, !dbg !3124
  %lt949 = icmp slt i64 %408, 18, !dbg !3124
  br i1 %lt949, label %or.phi974, label %or.rhs950, !dbg !3124

or.rhs950:                                        ; preds = %loop.cond948
  %409 = load i64, ptr %rp708, align 8, !dbg !3126
  %eq951 = icmp eq i64 %409, 18, !dbg !3126
  br i1 %eq951, label %and.rhs952, label %and.phi972, !dbg !3126

and.rhs952:                                       ; preds = %or.rhs950
  %410 = load i32, ptr %a, align 4, !dbg !3127
  %sext953 = sext i32 %410 to i64, !dbg !3127
  %lt954 = icmp slt i64 %sext953, 0, !dbg !3127
  %411 = call i1 @llvm.expect.i1(i1 %lt954, i1 false), !dbg !3127
  br i1 %411, label %panic955, label %checkok960, !dbg !3127

checkok960:                                       ; preds = %and.rhs952
  %ge961 = icmp sge i64 %sext953, 128, !dbg !3127
  %412 = call i1 @llvm.expect.i1(i1 %ge961, i1 false), !dbg !3127
  br i1 %412, label %panic962, label %checkok969, !dbg !3127

checkok969:                                       ; preds = %checkok960
  %ptroffset970 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext953, !dbg !3127
  %413 = load i32, ptr %ptroffset970, align 4, !dbg !3127
  %lt971 = icmp ult i32 %413, 9007199, !dbg !3128
  br label %and.phi972, !dbg !3128

and.phi972:                                       ; preds = %checkok969, %or.rhs950
  %val973 = phi i1 [ false, %or.rhs950 ], [ %lt971, %checkok969 ], !dbg !3128
  br label %or.phi974, !dbg !3128

or.phi974:                                        ; preds = %and.phi972, %loop.cond948
  %val975 = phi i1 [ true, %loop.cond948 ], [ %val973, %and.phi972 ], !dbg !3128
  br i1 %val975, label %loop.body976, label %loop.exit1154, !dbg !3128

loop.body976:                                     ; preds = %or.phi974
    #dbg_declare(ptr %carry977, !3129, !DIExpression(), !3131)
  store i32 0, ptr %carry977, align 4, !dbg !3132
  %414 = load i32, ptr %e2707, align 4, !dbg !3133
  %sub978 = sub i32 %414, 29, !dbg !3133
  store i32 %sub978, ptr %e2707, align 4, !dbg !3133
  %415 = load i32, ptr %z, align 4, !dbg !3134
  %sub979 = sub i32 %415, 1, !dbg !3134
  %and980 = and i32 %sub979, 127, !dbg !3134
  store i32 %and980, ptr %k, align 4, !dbg !3134
  br label %loop.body981, !dbg !3134

loop.body981:                                     ; preds = %if.exit1082, %loop.body976
    #dbg_declare(ptr %tmp982, !3136, !DIExpression(), !3138)
  %416 = load i32, ptr %k, align 4, !dbg !3139
  %sext983 = sext i32 %416 to i64, !dbg !3139
  %lt984 = icmp slt i64 %sext983, 0, !dbg !3139
  %417 = call i1 @llvm.expect.i1(i1 %lt984, i1 false), !dbg !3139
  br i1 %417, label %panic985, label %checkok990, !dbg !3139

checkok990:                                       ; preds = %loop.body981
  %ge991 = icmp sge i64 %sext983, 128, !dbg !3139
  %418 = call i1 @llvm.expect.i1(i1 %ge991, i1 false), !dbg !3139
  br i1 %418, label %panic992, label %checkok999, !dbg !3139

checkok999:                                       ; preds = %checkok990
  %ptroffset1000 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext983, !dbg !3139
  %419 = load i32, ptr %ptroffset1000, align 4, !dbg !3139
  %zext1001 = zext i32 %419 to i64, !dbg !3139
  %shl = shl i64 %zext1001, 29, !dbg !3140
  %420 = freeze i64 %shl, !dbg !3140
  %421 = load i32, ptr %carry977, align 4, !dbg !3141
  %zext1002 = zext i32 %421 to i64, !dbg !3141
  %add1003 = add i64 %420, %zext1002, !dbg !3140
  store i64 %add1003, ptr %tmp982, align 8, !dbg !3140
  %422 = load i64, ptr %tmp982, align 8, !dbg !3142
  %lt1004 = icmp ult i64 1000000000, %422, !dbg !3142
  br i1 %lt1004, label %if.then1005, label %if.else1028, !dbg !3142

if.then1005:                                      ; preds = %checkok999
  %423 = load i64, ptr %tmp982, align 8, !dbg !3143
  %sdiv1006 = sdiv i64 %423, 1000000000, !dbg !3145
  %trunc1007 = trunc i64 %sdiv1006 to i32, !dbg !3145
  store i32 %trunc1007, ptr %carry977, align 4, !dbg !3145
  %424 = load i32, ptr %k, align 4, !dbg !3146
  %sext1008 = sext i32 %424 to i64, !dbg !3146
  %lt1009 = icmp slt i64 %sext1008, 0, !dbg !3146
  %425 = call i1 @llvm.expect.i1(i1 %lt1009, i1 false), !dbg !3146
  br i1 %425, label %panic1010, label %checkok1015, !dbg !3146

checkok1015:                                      ; preds = %if.then1005
  %ge1016 = icmp sge i64 %sext1008, 128, !dbg !3146
  %426 = call i1 @llvm.expect.i1(i1 %ge1016, i1 false), !dbg !3146
  br i1 %426, label %panic1017, label %checkok1024, !dbg !3146

checkok1024:                                      ; preds = %checkok1015
  %ptroffset1025 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1008, !dbg !3146
  %427 = load i64, ptr %tmp982, align 8, !dbg !3147
  %smod1026 = srem i64 %427, 1000000000, !dbg !3148
  %trunc1027 = trunc i64 %smod1026 to i32, !dbg !3148
  store i32 %trunc1027, ptr %ptroffset1025, align 4, !dbg !3148
  br label %if.exit1048, !dbg !3148

if.else1028:                                      ; preds = %checkok999
  store i32 0, ptr %carry977, align 4, !dbg !3149
  %428 = load i32, ptr %k, align 4, !dbg !3151
  %sext1029 = sext i32 %428 to i64, !dbg !3151
  %lt1030 = icmp slt i64 %sext1029, 0, !dbg !3151
  %429 = call i1 @llvm.expect.i1(i1 %lt1030, i1 false), !dbg !3151
  br i1 %429, label %panic1031, label %checkok1036, !dbg !3151

checkok1036:                                      ; preds = %if.else1028
  %ge1037 = icmp sge i64 %sext1029, 128, !dbg !3151
  %430 = call i1 @llvm.expect.i1(i1 %ge1037, i1 false), !dbg !3151
  br i1 %430, label %panic1038, label %checkok1045, !dbg !3151

checkok1045:                                      ; preds = %checkok1036
  %ptroffset1046 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1029, !dbg !3151
  %431 = load i64, ptr %tmp982, align 8, !dbg !3152
  %trunc1047 = trunc i64 %431 to i32, !dbg !3152
  store i32 %trunc1047, ptr %ptroffset1046, align 4, !dbg !3152
  br label %if.exit1048, !dbg !3152

if.exit1048:                                      ; preds = %checkok1045, %checkok1024
  %432 = load i32, ptr %k, align 4, !dbg !3153
  %433 = load i32, ptr %z, align 4, !dbg !3154
  %sub1049 = sub i32 %433, 1, !dbg !3154
  %and1050 = and i32 %sub1049, 127, !dbg !3154
  %eq1051 = icmp eq i32 %432, %and1050, !dbg !3153
  br i1 %eq1051, label %and.rhs1052, label %and.phi1054, !dbg !3153

and.rhs1052:                                      ; preds = %if.exit1048
  %434 = load i32, ptr %k, align 4, !dbg !3155
  %435 = load i32, ptr %a, align 4, !dbg !3156
  %neq1053 = icmp ne i32 %434, %435, !dbg !3155
  br label %and.phi1054, !dbg !3155

and.phi1054:                                      ; preds = %and.rhs1052, %if.exit1048
  %val1055 = phi i1 [ false, %if.exit1048 ], [ %neq1053, %and.rhs1052 ], !dbg !3155
  br i1 %val1055, label %and.rhs1056, label %and.phi1076, !dbg !3155

and.rhs1056:                                      ; preds = %and.phi1054
  %436 = load i32, ptr %k, align 4, !dbg !3157
  %sext1057 = sext i32 %436 to i64, !dbg !3157
  %lt1058 = icmp slt i64 %sext1057, 0, !dbg !3157
  %437 = call i1 @llvm.expect.i1(i1 %lt1058, i1 false), !dbg !3157
  br i1 %437, label %panic1059, label %checkok1064, !dbg !3157

checkok1064:                                      ; preds = %and.rhs1056
  %ge1065 = icmp sge i64 %sext1057, 128, !dbg !3157
  %438 = call i1 @llvm.expect.i1(i1 %ge1065, i1 false), !dbg !3157
  br i1 %438, label %panic1066, label %checkok1073, !dbg !3157

checkok1073:                                      ; preds = %checkok1064
  %ptroffset1074 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1057, !dbg !3157
  %439 = load i32, ptr %ptroffset1074, align 4, !dbg !3157
  %i2nb1075 = icmp eq i32 %439, 0, !dbg !3157
  br label %and.phi1076, !dbg !3157

and.phi1076:                                      ; preds = %checkok1073, %and.phi1054
  %val1077 = phi i1 [ false, %and.phi1054 ], [ %i2nb1075, %checkok1073 ], !dbg !3157
  br i1 %val1077, label %if.then1078, label %if.exit1079, !dbg !3157

if.then1078:                                      ; preds = %and.phi1076
  %440 = load i32, ptr %k, align 4, !dbg !3158
  store i32 %440, ptr %z, align 4, !dbg !3158
  br label %if.exit1079, !dbg !3158

if.exit1079:                                      ; preds = %if.then1078, %and.phi1076
  %441 = load i32, ptr %k, align 4, !dbg !3159
  %442 = load i32, ptr %a, align 4, !dbg !3160
  %eq1080 = icmp eq i32 %441, %442, !dbg !3159
  br i1 %eq1080, label %if.then1081, label %if.exit1082, !dbg !3159

if.then1081:                                      ; preds = %if.exit1079
  br label %loop.exit1085, !dbg !3161

if.exit1082:                                      ; preds = %if.exit1079
  %443 = load i32, ptr %k, align 4, !dbg !3162
  %sub1083 = sub i32 %443, 1, !dbg !3162
  %and1084 = and i32 %sub1083, 127, !dbg !3162
  store i32 %and1084, ptr %k, align 4, !dbg !3162
  br label %loop.body981, !dbg !3162

loop.exit1085:                                    ; preds = %if.then1081
  %444 = load i32, ptr %carry977, align 4, !dbg !3163
  %i2b1086 = icmp ne i32 %444, 0, !dbg !3163
  br i1 %i2b1086, label %if.then1087, label %if.exit1153, !dbg !3163

if.then1087:                                      ; preds = %loop.exit1085
  %445 = load i64, ptr %rp708, align 8, !dbg !3164
  %add1088 = add i64 %445, 9, !dbg !3164
  store i64 %add1088, ptr %rp708, align 8, !dbg !3164
  %446 = load i32, ptr %a, align 4, !dbg !3166
  %sub1089 = sub i32 %446, 1, !dbg !3166
  %and1090 = and i32 %sub1089, 127, !dbg !3166
  store i32 %and1090, ptr %a, align 4, !dbg !3166
  %447 = load i32, ptr %a, align 4, !dbg !3167
  %448 = load i32, ptr %z, align 4, !dbg !3168
  %eq1091 = icmp eq i32 %447, %448, !dbg !3167
  br i1 %eq1091, label %if.then1092, label %if.exit1134, !dbg !3167

if.then1092:                                      ; preds = %if.then1087
  %449 = load i32, ptr %z, align 4, !dbg !3169
  %sub1093 = sub i32 %449, 1, !dbg !3169
  %and1094 = and i32 %sub1093, 127, !dbg !3169
  store i32 %and1094, ptr %z, align 4, !dbg !3169
  %450 = load i32, ptr %z, align 4, !dbg !3171
  %sub1095 = sub i32 %450, 1, !dbg !3171
  %and1096 = and i32 %sub1095, 127, !dbg !3171
  %sext1097 = sext i32 %and1096 to i64, !dbg !3171
  %lt1098 = icmp slt i64 %sext1097, 0, !dbg !3171
  %451 = call i1 @llvm.expect.i1(i1 %lt1098, i1 false), !dbg !3171
  br i1 %451, label %panic1099, label %checkok1104, !dbg !3171

checkok1104:                                      ; preds = %if.then1092
  %ge1105 = icmp sge i64 %sext1097, 128, !dbg !3171
  %452 = call i1 @llvm.expect.i1(i1 %ge1105, i1 false), !dbg !3171
  br i1 %452, label %panic1106, label %checkok1113, !dbg !3171

checkok1113:                                      ; preds = %checkok1104
  %ptroffset1114 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1097, !dbg !3171
  %453 = load i32, ptr %ptroffset1114, align 4, !dbg !3171
  %454 = load i32, ptr %z, align 4, !dbg !3172
  %sext1115 = sext i32 %454 to i64, !dbg !3172
  %lt1116 = icmp slt i64 %sext1115, 0, !dbg !3172
  %455 = call i1 @llvm.expect.i1(i1 %lt1116, i1 false), !dbg !3172
  br i1 %455, label %panic1117, label %checkok1122, !dbg !3172

checkok1122:                                      ; preds = %checkok1113
  %ge1123 = icmp sge i64 %sext1115, 128, !dbg !3172
  %456 = call i1 @llvm.expect.i1(i1 %ge1123, i1 false), !dbg !3172
  br i1 %456, label %panic1124, label %checkok1131, !dbg !3172

checkok1131:                                      ; preds = %checkok1122
  %ptroffset1132 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1115, !dbg !3172
  %457 = load i32, ptr %ptroffset1132, align 4, !dbg !3172
  %or1133 = or i32 %453, %457, !dbg !3173
  store i32 %or1133, ptr %ptroffset1114, align 4, !dbg !3173
  br label %if.exit1134, !dbg !3173

if.exit1134:                                      ; preds = %checkok1131, %if.then1087
  %458 = load i32, ptr %a, align 4, !dbg !3174
  %sext1135 = sext i32 %458 to i64, !dbg !3174
  %lt1136 = icmp slt i64 %sext1135, 0, !dbg !3174
  %459 = call i1 @llvm.expect.i1(i1 %lt1136, i1 false), !dbg !3174
  br i1 %459, label %panic1137, label %checkok1142, !dbg !3174

checkok1142:                                      ; preds = %if.exit1134
  %ge1143 = icmp sge i64 %sext1135, 128, !dbg !3174
  %460 = call i1 @llvm.expect.i1(i1 %ge1143, i1 false), !dbg !3174
  br i1 %460, label %panic1144, label %checkok1151, !dbg !3174

checkok1151:                                      ; preds = %checkok1142
  %ptroffset1152 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1135, !dbg !3174
  %461 = load i32, ptr %carry977, align 4, !dbg !3175
  store i32 %461, ptr %ptroffset1152, align 4, !dbg !3175
  br label %if.exit1153, !dbg !3175

if.exit1153:                                      ; preds = %checkok1151, %loop.exit1085
  br label %loop.cond948, !dbg !3175

loop.exit1154:                                    ; preds = %or.phi974
  br label %loop.body1155, !dbg !3176

loop.body1155:                                    ; preds = %if.exit1438, %loop.exit1154
    #dbg_declare(ptr %carry1156, !3177, !DIExpression(), !3180)
  store i32 0, ptr %carry1156, align 4, !dbg !3181
    #dbg_declare(ptr %sh, !3182, !DIExpression(), !3183)
  store i32 1, ptr %sh, align 4, !dbg !3184
    #dbg_declare(ptr %i, !3185, !DIExpression(), !3186)
  store i32 0, ptr %i, align 4, !dbg !3186
  store i32 0, ptr %i, align 4, !dbg !3187
  br label %loop.cond1157, !dbg !3187

loop.cond1157:                                    ; preds = %if.exit1245, %loop.body1155
  %462 = load i32, ptr %i, align 4, !dbg !3189
  %lt1158 = icmp slt i32 %462, 2, !dbg !3189
  br i1 %lt1158, label %loop.body1159, label %loop.exit1247, !dbg !3189

loop.body1159:                                    ; preds = %loop.cond1157
  %463 = load i32, ptr %a, align 4, !dbg !3190
  %464 = load i32, ptr %i, align 4, !dbg !3192
  %add1160 = add i32 %463, %464, !dbg !3190
  %and1161 = and i32 %add1160, 127, !dbg !3190
  store i32 %and1161, ptr %k, align 4, !dbg !3190
  %465 = load i32, ptr %k, align 4, !dbg !3193
  %466 = load i32, ptr %z, align 4, !dbg !3194
  %eq1162 = icmp eq i32 %465, %466, !dbg !3193
  br i1 %eq1162, label %or.phi1201, label %or.rhs1163, !dbg !3193

or.rhs1163:                                       ; preds = %loop.body1159
  %467 = load i32, ptr %k, align 4, !dbg !3195
  %sext1164 = sext i32 %467 to i64, !dbg !3195
  %lt1165 = icmp slt i64 %sext1164, 0, !dbg !3195
  %468 = call i1 @llvm.expect.i1(i1 %lt1165, i1 false), !dbg !3195
  br i1 %468, label %panic1166, label %checkok1171, !dbg !3195

checkok1171:                                      ; preds = %or.rhs1163
  %ge1172 = icmp sge i64 %sext1164, 128, !dbg !3195
  %469 = call i1 @llvm.expect.i1(i1 %ge1172, i1 false), !dbg !3195
  br i1 %469, label %panic1173, label %checkok1180, !dbg !3195

checkok1180:                                      ; preds = %checkok1171
  %ptroffset1181 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1164, !dbg !3195
  %470 = load i32, ptr %ptroffset1181, align 4, !dbg !3195
  %471 = load i32, ptr %i, align 4, !dbg !3196
  %sext1182 = sext i32 %471 to i64, !dbg !3196
  %lt1183 = icmp slt i64 %sext1182, 0, !dbg !3196
  %472 = call i1 @llvm.expect.i1(i1 %lt1183, i1 false), !dbg !3196
  br i1 %472, label %panic1184, label %checkok1189, !dbg !3196

checkok1189:                                      ; preds = %checkok1180
  %ge1190 = icmp sge i64 %sext1182, 2, !dbg !3196
  %473 = call i1 @llvm.expect.i1(i1 %ge1190, i1 false), !dbg !3196
  br i1 %473, label %panic1191, label %checkok1198, !dbg !3196

checkok1198:                                      ; preds = %checkok1189
  %ptroffset1199 = getelementptr inbounds [4 x i8], ptr @to_double.TH, i64 %sext1182, !dbg !3196
  %474 = load i32, ptr %ptroffset1199, align 4, !dbg !3196
  %lt1200 = icmp ult i32 %470, %474, !dbg !3197
  br label %or.phi1201, !dbg !3197

or.phi1201:                                       ; preds = %checkok1198, %loop.body1159
  %val1202 = phi i1 [ true, %loop.body1159 ], [ %lt1200, %checkok1198 ], !dbg !3197
  br i1 %val1202, label %if.then1203, label %if.exit1204, !dbg !3197

if.then1203:                                      ; preds = %or.phi1201
  store i32 2, ptr %i, align 4, !dbg !3198
  br label %loop.exit1247, !dbg !3200

if.exit1204:                                      ; preds = %or.phi1201
  %475 = load i32, ptr %a, align 4, !dbg !3201
  %476 = load i32, ptr %i, align 4, !dbg !3202
  %add1205 = add i32 %475, %476, !dbg !3201
  %and1206 = and i32 %add1205, 127, !dbg !3201
  %sext1207 = sext i32 %and1206 to i64, !dbg !3201
  %lt1208 = icmp slt i64 %sext1207, 0, !dbg !3201
  %477 = call i1 @llvm.expect.i1(i1 %lt1208, i1 false), !dbg !3201
  br i1 %477, label %panic1209, label %checkok1214, !dbg !3201

checkok1214:                                      ; preds = %if.exit1204
  %ge1215 = icmp sge i64 %sext1207, 128, !dbg !3201
  %478 = call i1 @llvm.expect.i1(i1 %ge1215, i1 false), !dbg !3201
  br i1 %478, label %panic1216, label %checkok1223, !dbg !3201

checkok1223:                                      ; preds = %checkok1214
  %ptroffset1224 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1207, !dbg !3201
  %479 = load i32, ptr %ptroffset1224, align 4, !dbg !3201
  %480 = load i32, ptr %i, align 4, !dbg !3203
  %sext1225 = sext i32 %480 to i64, !dbg !3203
  %lt1226 = icmp slt i64 %sext1225, 0, !dbg !3203
  %481 = call i1 @llvm.expect.i1(i1 %lt1226, i1 false), !dbg !3203
  br i1 %481, label %panic1227, label %checkok1232, !dbg !3203

checkok1232:                                      ; preds = %checkok1223
  %ge1233 = icmp sge i64 %sext1225, 2, !dbg !3203
  %482 = call i1 @llvm.expect.i1(i1 %ge1233, i1 false), !dbg !3203
  br i1 %482, label %panic1234, label %checkok1241, !dbg !3203

checkok1241:                                      ; preds = %checkok1232
  %ptroffset1242 = getelementptr inbounds [4 x i8], ptr @to_double.TH, i64 %sext1225, !dbg !3203
  %483 = load i32, ptr %ptroffset1242, align 4, !dbg !3203
  %gt1243 = icmp ugt i32 %479, %483, !dbg !3204
  br i1 %gt1243, label %if.then1244, label %if.exit1245, !dbg !3204

if.then1244:                                      ; preds = %checkok1241
  br label %loop.exit1247, !dbg !3205

if.exit1245:                                      ; preds = %checkok1241
  %484 = load i32, ptr %i, align 4, !dbg !3206
  %add1246 = add i32 %484, 1, !dbg !3206
  store i32 %add1246, ptr %i, align 4, !dbg !3206
  br label %loop.cond1157, !dbg !3206

loop.exit1247:                                    ; preds = %if.then1244, %if.then1203, %loop.cond1157
  %485 = load i32, ptr %i, align 4, !dbg !3207
  %eq1248 = icmp eq i32 %485, 2, !dbg !3207
  br i1 %eq1248, label %and.rhs1249, label %and.phi1251, !dbg !3207

and.rhs1249:                                      ; preds = %loop.exit1247
  %486 = load i64, ptr %rp708, align 8, !dbg !3208
  %eq1250 = icmp eq i64 %486, 18, !dbg !3208
  br label %and.phi1251, !dbg !3208

and.phi1251:                                      ; preds = %and.rhs1249, %loop.exit1247
  %val1252 = phi i1 [ false, %loop.exit1247 ], [ %eq1250, %and.rhs1249 ], !dbg !3208
  br i1 %val1252, label %if.then1253, label %if.exit1254, !dbg !3208

if.then1253:                                      ; preds = %and.phi1251
  br label %loop.exit1439, !dbg !3209

if.exit1254:                                      ; preds = %and.phi1251
  %487 = load i64, ptr %rp708, align 8, !dbg !3210
  %gt1255 = icmp sgt i64 %487, 27, !dbg !3210
  br i1 %gt1255, label %if.then1256, label %if.exit1257, !dbg !3210

if.then1256:                                      ; preds = %if.exit1254
  store i32 9, ptr %sh, align 4, !dbg !3211
  br label %if.exit1257, !dbg !3211

if.exit1257:                                      ; preds = %if.then1256, %if.exit1254
  %488 = load i32, ptr %e2707, align 4, !dbg !3212
  %489 = load i32, ptr %sh, align 4, !dbg !3213
  %add1258 = add i32 %488, %489, !dbg !3212
  store i32 %add1258, ptr %e2707, align 4, !dbg !3212
  %490 = load i32, ptr %a, align 4, !dbg !3214
  store i32 %490, ptr %k, align 4, !dbg !3214
  br label %loop.cond1259, !dbg !3214

loop.cond1259:                                    ; preds = %if.exit1385, %if.exit1257
  %491 = load i32, ptr %k, align 4, !dbg !3216
  %492 = load i32, ptr %z, align 4, !dbg !3217
  %neq1260 = icmp ne i32 %491, %492, !dbg !3216
  br i1 %neq1260, label %loop.body1261, label %loop.exit1388, !dbg !3216

loop.body1261:                                    ; preds = %loop.cond1259
    #dbg_declare(ptr %tmp1262, !3218, !DIExpression(), !3220)
  %493 = load i32, ptr %k, align 4, !dbg !3221
  %sext1263 = sext i32 %493 to i64, !dbg !3221
  %lt1264 = icmp slt i64 %sext1263, 0, !dbg !3221
  %494 = call i1 @llvm.expect.i1(i1 %lt1264, i1 false), !dbg !3221
  br i1 %494, label %panic1265, label %checkok1270, !dbg !3221

checkok1270:                                      ; preds = %loop.body1261
  %ge1271 = icmp sge i64 %sext1263, 128, !dbg !3221
  %495 = call i1 @llvm.expect.i1(i1 %ge1271, i1 false), !dbg !3221
  br i1 %495, label %panic1272, label %checkok1279, !dbg !3221

checkok1279:                                      ; preds = %checkok1270
  %ptroffset1280 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1263, !dbg !3221
  %496 = load i32, ptr %ptroffset1280, align 4, !dbg !3221
  %497 = load i32, ptr %sh, align 4, !dbg !3222
  %shift_underflow = icmp slt i32 %497, 0, !dbg !3223
  %498 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !3223
  br i1 %498, label %panic1281, label %checkok1286, !dbg !3223

checkok1286:                                      ; preds = %checkok1279
  %shift_exceeds1287 = icmp sge i32 %497, 32, !dbg !3223
  %499 = call i1 @llvm.expect.i1(i1 %shift_exceeds1287, i1 false), !dbg !3223
  br i1 %499, label %panic1288, label %checkok1293, !dbg !3223

checkok1293:                                      ; preds = %checkok1286
  %shl1294 = shl i32 1, %497, !dbg !3223
  %500 = freeze i32 %shl1294, !dbg !3223
  %sub1295 = sub i32 %500, 1, !dbg !3223
  %and1296 = and i32 %496, %sub1295, !dbg !3224
  store i32 %and1296, ptr %tmp1262, align 4, !dbg !3224
  %501 = load i32, ptr %k, align 4, !dbg !3225
  %sext1297 = sext i32 %501 to i64, !dbg !3225
  %lt1298 = icmp slt i64 %sext1297, 0, !dbg !3225
  %502 = call i1 @llvm.expect.i1(i1 %lt1298, i1 false), !dbg !3225
  br i1 %502, label %panic1299, label %checkok1304, !dbg !3225

checkok1304:                                      ; preds = %checkok1293
  %ge1305 = icmp sge i64 %sext1297, 128, !dbg !3225
  %503 = call i1 @llvm.expect.i1(i1 %ge1305, i1 false), !dbg !3225
  br i1 %503, label %panic1306, label %checkok1313, !dbg !3225

checkok1313:                                      ; preds = %checkok1304
  %ptroffset1314 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1297, !dbg !3225
  %504 = load i32, ptr %k, align 4, !dbg !3226
  %sext1315 = sext i32 %504 to i64, !dbg !3226
  %lt1316 = icmp slt i64 %sext1315, 0, !dbg !3226
  %505 = call i1 @llvm.expect.i1(i1 %lt1316, i1 false), !dbg !3226
  br i1 %505, label %panic1317, label %checkok1322, !dbg !3226

checkok1322:                                      ; preds = %checkok1313
  %ge1323 = icmp sge i64 %sext1315, 128, !dbg !3226
  %506 = call i1 @llvm.expect.i1(i1 %ge1323, i1 false), !dbg !3226
  br i1 %506, label %panic1324, label %checkok1331, !dbg !3226

checkok1331:                                      ; preds = %checkok1322
  %ptroffset1332 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1315, !dbg !3226
  %507 = load i32, ptr %ptroffset1332, align 4, !dbg !3226
  %508 = load i32, ptr %sh, align 4, !dbg !3227
  %shift_exceeds1333 = icmp uge i32 %508, 32, !dbg !3228
  %509 = call i1 @llvm.expect.i1(i1 %shift_exceeds1333, i1 false), !dbg !3228
  br i1 %509, label %panic1334, label %checkok1339, !dbg !3228

checkok1339:                                      ; preds = %checkok1331
  %lshr1340 = lshr i32 %507, %508, !dbg !3228
  %510 = freeze i32 %lshr1340, !dbg !3228
  %511 = load i32, ptr %carry1156, align 4, !dbg !3229
  %add1341 = add i32 %510, %511, !dbg !3228
  store i32 %add1341, ptr %ptroffset1314, align 4, !dbg !3228
  %512 = load i32, ptr %sh, align 4, !dbg !3230
  %shift_underflow1342 = icmp slt i32 %512, 0, !dbg !3231
  %513 = call i1 @llvm.expect.i1(i1 %shift_underflow1342, i1 false), !dbg !3231
  br i1 %513, label %panic1343, label %checkok1348, !dbg !3231

checkok1348:                                      ; preds = %checkok1339
  %shift_exceeds1349 = icmp sge i32 %512, 32, !dbg !3231
  %514 = call i1 @llvm.expect.i1(i1 %shift_exceeds1349, i1 false), !dbg !3231
  br i1 %514, label %panic1350, label %checkok1355, !dbg !3231

checkok1355:                                      ; preds = %checkok1348
  %ashr = ashr i32 1000000000, %512, !dbg !3231
  %515 = freeze i32 %ashr, !dbg !3231
  %516 = load i32, ptr %tmp1262, align 4, !dbg !3232
  %mul1356 = mul i32 %515, %516, !dbg !3231
  store i32 %mul1356, ptr %carry1156, align 4, !dbg !3231
  %517 = load i32, ptr %k, align 4, !dbg !3233
  %518 = load i32, ptr %a, align 4, !dbg !3234
  %eq1357 = icmp eq i32 %517, %518, !dbg !3233
  br i1 %eq1357, label %and.rhs1358, label %and.phi1378, !dbg !3233

and.rhs1358:                                      ; preds = %checkok1355
  %519 = load i32, ptr %k, align 4, !dbg !3235
  %sext1359 = sext i32 %519 to i64, !dbg !3235
  %lt1360 = icmp slt i64 %sext1359, 0, !dbg !3235
  %520 = call i1 @llvm.expect.i1(i1 %lt1360, i1 false), !dbg !3235
  br i1 %520, label %panic1361, label %checkok1366, !dbg !3235

checkok1366:                                      ; preds = %and.rhs1358
  %ge1367 = icmp sge i64 %sext1359, 128, !dbg !3235
  %521 = call i1 @llvm.expect.i1(i1 %ge1367, i1 false), !dbg !3235
  br i1 %521, label %panic1368, label %checkok1375, !dbg !3235

checkok1375:                                      ; preds = %checkok1366
  %ptroffset1376 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1359, !dbg !3235
  %522 = load i32, ptr %ptroffset1376, align 4, !dbg !3235
  %i2nb1377 = icmp eq i32 %522, 0, !dbg !3235
  br label %and.phi1378, !dbg !3235

and.phi1378:                                      ; preds = %checkok1375, %checkok1355
  %val1379 = phi i1 [ false, %checkok1355 ], [ %i2nb1377, %checkok1375 ], !dbg !3235
  br i1 %val1379, label %if.then1380, label %if.exit1385, !dbg !3235

if.then1380:                                      ; preds = %and.phi1378
  %523 = load i32, ptr %a, align 4, !dbg !3236
  %add1381 = add i32 %523, 1, !dbg !3236
  %and1382 = and i32 %add1381, 127, !dbg !3236
  store i32 %and1382, ptr %a, align 4, !dbg !3236
  %524 = load i32, ptr %i, align 4, !dbg !3238
  %sub1383 = sub i32 %524, 1, !dbg !3238
  store i32 %sub1383, ptr %i, align 4, !dbg !3238
  %525 = load i64, ptr %rp708, align 8, !dbg !3239
  %sub1384 = sub i64 %525, 9, !dbg !3239
  store i64 %sub1384, ptr %rp708, align 8, !dbg !3239
  br label %if.exit1385, !dbg !3239

if.exit1385:                                      ; preds = %if.then1380, %and.phi1378
  %526 = load i32, ptr %k, align 4, !dbg !3240
  %add1386 = add i32 %526, 1, !dbg !3240
  %and1387 = and i32 %add1386, 127, !dbg !3240
  store i32 %and1387, ptr %k, align 4, !dbg !3240
  br label %loop.cond1259, !dbg !3240

loop.exit1388:                                    ; preds = %loop.cond1259
  %527 = load i32, ptr %carry1156, align 4, !dbg !3241
  %i2b1389 = icmp ne i32 %527, 0, !dbg !3241
  br i1 %i2b1389, label %if.then1390, label %if.exit1438, !dbg !3241

if.then1390:                                      ; preds = %loop.exit1388
  %528 = load i32, ptr %z, align 4, !dbg !3242
  %add1391 = add i32 %528, 1, !dbg !3242
  %and1392 = and i32 %add1391, 127, !dbg !3242
  %529 = load i32, ptr %a, align 4, !dbg !3244
  %neq1393 = icmp ne i32 %and1392, %529, !dbg !3242
  br i1 %neq1393, label %if.then1394, label %if.else1415, !dbg !3242

if.then1394:                                      ; preds = %if.then1390
  %530 = load i32, ptr %z, align 4, !dbg !3245
  %sext1395 = sext i32 %530 to i64, !dbg !3245
  %lt1396 = icmp slt i64 %sext1395, 0, !dbg !3245
  %531 = call i1 @llvm.expect.i1(i1 %lt1396, i1 false), !dbg !3245
  br i1 %531, label %panic1397, label %checkok1402, !dbg !3245

checkok1402:                                      ; preds = %if.then1394
  %ge1403 = icmp sge i64 %sext1395, 128, !dbg !3245
  %532 = call i1 @llvm.expect.i1(i1 %ge1403, i1 false), !dbg !3245
  br i1 %532, label %panic1404, label %checkok1411, !dbg !3245

checkok1411:                                      ; preds = %checkok1402
  %ptroffset1412 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1395, !dbg !3245
  %533 = load i32, ptr %carry1156, align 4, !dbg !3247
  store i32 %533, ptr %ptroffset1412, align 4, !dbg !3247
  %534 = load i32, ptr %z, align 4, !dbg !3248
  %add1413 = add i32 %534, 1, !dbg !3248
  %and1414 = and i32 %add1413, 127, !dbg !3248
  store i32 %and1414, ptr %z, align 4, !dbg !3248
  br label %if.exit1437, !dbg !3248

if.else1415:                                      ; preds = %if.then1390
  %535 = load i32, ptr %z, align 4, !dbg !3249
  %sub1416 = sub i32 %535, 1, !dbg !3249
  %and1417 = and i32 %sub1416, 127, !dbg !3249
  %sext1418 = sext i32 %and1417 to i64, !dbg !3249
  %lt1419 = icmp slt i64 %sext1418, 0, !dbg !3249
  %536 = call i1 @llvm.expect.i1(i1 %lt1419, i1 false), !dbg !3249
  br i1 %536, label %panic1420, label %checkok1425, !dbg !3249

checkok1425:                                      ; preds = %if.else1415
  %ge1426 = icmp sge i64 %sext1418, 128, !dbg !3249
  %537 = call i1 @llvm.expect.i1(i1 %ge1426, i1 false), !dbg !3249
  br i1 %537, label %panic1427, label %checkok1434, !dbg !3249

checkok1434:                                      ; preds = %checkok1425
  %ptroffset1435 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1418, !dbg !3249
  %538 = load i32, ptr %ptroffset1435, align 4, !dbg !3249
  %or1436 = or i32 %538, 1, !dbg !3251
  store i32 %or1436, ptr %ptroffset1435, align 4, !dbg !3251
  br label %if.exit1437, !dbg !3251

if.exit1437:                                      ; preds = %checkok1434, %checkok1411
  br label %if.exit1438, !dbg !3251

if.exit1438:                                      ; preds = %if.exit1437, %loop.exit1388
  br label %loop.body1155, !dbg !3251

loop.exit1439:                                    ; preds = %if.then1253
    #dbg_declare(ptr %y1440, !3252, !DIExpression(), !3253)
  store double 0.000000e+00, ptr %y1440, align 8, !dbg !3253
    #dbg_declare(ptr %i1441, !3254, !DIExpression(), !3255)
  store i32 0, ptr %i1441, align 4, !dbg !3255
  store i32 0, ptr %i1441, align 4, !dbg !3256
  br label %loop.cond1442, !dbg !3256

loop.cond1442:                                    ; preds = %checkok1490, %loop.exit1439
  %539 = load i32, ptr %i1441, align 4, !dbg !3258
  %lt1443 = icmp slt i32 %539, 2, !dbg !3258
  br i1 %lt1443, label %loop.body1444, label %loop.exit1495, !dbg !3258

loop.body1444:                                    ; preds = %loop.cond1442
  %540 = load i32, ptr %a, align 4, !dbg !3259
  %541 = load i32, ptr %i1441, align 4, !dbg !3261
  %add1445 = add i32 %540, %541, !dbg !3259
  %and1446 = and i32 %add1445, 127, !dbg !3259
  %542 = load i32, ptr %z, align 4, !dbg !3262
  %eq1447 = icmp eq i32 %and1446, %542, !dbg !3259
  br i1 %eq1447, label %if.then1448, label %if.exit1470, !dbg !3259

if.then1448:                                      ; preds = %loop.body1444
  %543 = load i32, ptr %z, align 4, !dbg !3263
  %add1449 = add i32 %543, 1, !dbg !3263
  %and1450 = and i32 %add1449, 127, !dbg !3263
  store i32 %and1450, ptr %z, align 4, !dbg !3263
  %sub1451 = sub i32 %and1450, 1, !dbg !3264
  %sext1452 = sext i32 %sub1451 to i64, !dbg !3264
  %lt1453 = icmp slt i64 %sext1452, 0, !dbg !3264
  %544 = call i1 @llvm.expect.i1(i1 %lt1453, i1 false), !dbg !3264
  br i1 %544, label %panic1454, label %checkok1459, !dbg !3264

checkok1459:                                      ; preds = %if.then1448
  %ge1460 = icmp sge i64 %sext1452, 128, !dbg !3264
  %545 = call i1 @llvm.expect.i1(i1 %ge1460, i1 false), !dbg !3264
  br i1 %545, label %panic1461, label %checkok1468, !dbg !3264

checkok1468:                                      ; preds = %checkok1459
  %ptroffset1469 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1452, !dbg !3264
  store i32 0, ptr %ptroffset1469, align 4, !dbg !3265
  br label %if.exit1470, !dbg !3265

if.exit1470:                                      ; preds = %checkok1468, %loop.body1444
  %546 = load double, ptr %y1440, align 8, !dbg !3266
  %fmul1471 = fmul double 1.000000e+09, %546, !dbg !3267
  %547 = load i32, ptr %a, align 4, !dbg !3268
  %548 = load i32, ptr %i1441, align 4, !dbg !3269
  %add1472 = add i32 %547, %548, !dbg !3268
  %and1473 = and i32 %add1472, 127, !dbg !3268
  %sext1474 = sext i32 %and1473 to i64, !dbg !3268
  %lt1475 = icmp slt i64 %sext1474, 0, !dbg !3268
  %549 = call i1 @llvm.expect.i1(i1 %lt1475, i1 false), !dbg !3268
  br i1 %549, label %panic1476, label %checkok1481, !dbg !3268

checkok1481:                                      ; preds = %if.exit1470
  %ge1482 = icmp sge i64 %sext1474, 128, !dbg !3268
  %550 = call i1 @llvm.expect.i1(i1 %ge1482, i1 false), !dbg !3268
  br i1 %550, label %panic1483, label %checkok1490, !dbg !3268

checkok1490:                                      ; preds = %checkok1481
  %ptroffset1491 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1474, !dbg !3268
  %551 = load i32, ptr %ptroffset1491, align 4, !dbg !3268
  %uifp1492 = uitofp i32 %551 to double, !dbg !3268
  %fadd1493 = fadd double %fmul1471, %uifp1492, !dbg !3267
  store double %fadd1493, ptr %y1440, align 8, !dbg !3267
  %552 = load i32, ptr %i1441, align 4, !dbg !3270
  %add1494 = add i32 %552, 1, !dbg !3270
  store i32 %add1494, ptr %i1441, align 4, !dbg !3270
  br label %loop.cond1442, !dbg !3270

loop.exit1495:                                    ; preds = %loop.cond1442
  %553 = load double, ptr %y1440, align 8, !dbg !3271
  %554 = load i32, ptr %sign383, align 4, !dbg !3272
  %sifp1496 = sitofp i32 %554 to double, !dbg !3272
  %fmul1497 = fmul double %553, %sifp1496, !dbg !3271
  store double %fmul1497, ptr %y1440, align 8, !dbg !3271
    #dbg_declare(ptr %denormal, !3273, !DIExpression(), !3274)
  store i8 0, ptr %denormal, align 1, !dbg !3274
    #dbg_declare(ptr %bits1498, !3275, !DIExpression(), !3276)
  store i32 53, ptr %bits1498, align 4, !dbg !3277
  %555 = load i32, ptr %bits1498, align 4, !dbg !3278
  %556 = load i32, ptr %e2707, align 4, !dbg !3279
  %add1499 = add i32 53, %556, !dbg !3280
  %sub1500 = sub i32 %add1499, -1074, !dbg !3280
  %lt1501 = icmp slt i32 %sub1500, %555, !dbg !3278
  %check1502 = icmp slt i32 %555, 0, !dbg !3278
  %siui-lt1503 = or i1 %check1502, %lt1501, !dbg !3278
  br i1 %siui-lt1503, label %if.then1504, label %if.exit1510, !dbg !3278

if.then1504:                                      ; preds = %loop.exit1495
  %557 = load i32, ptr %e2707, align 4, !dbg !3281
  %add1505 = add i32 53, %557, !dbg !3283
  %sub1506 = sub i32 %add1505, -1074, !dbg !3283
  store i32 %sub1506, ptr %bits1498, align 4, !dbg !3283
  %558 = load i32, ptr %bits1498, align 4, !dbg !3284
  %gt1507 = icmp ugt i32 0, %558, !dbg !3284
  br i1 %gt1507, label %if.then1508, label %if.exit1509, !dbg !3284

if.then1508:                                      ; preds = %if.then1504
  store i32 0, ptr %bits1498, align 4, !dbg !3285
  br label %if.exit1509, !dbg !3285

if.exit1509:                                      ; preds = %if.then1508, %if.then1504
  store i8 1, ptr %denormal, align 1, !dbg !3286
  br label %if.exit1510, !dbg !3286

if.exit1510:                                      ; preds = %if.exit1509, %loop.exit1495
    #dbg_declare(ptr %bias1511, !3287, !DIExpression(), !3288)
  store double 0.000000e+00, ptr %bias1511, align 8, !dbg !3288
    #dbg_declare(ptr %frac, !3289, !DIExpression(), !3290)
  store double 0.000000e+00, ptr %frac, align 8, !dbg !3290
  %559 = load i32, ptr %bits1498, align 4, !dbg !3291
  %gt1512 = icmp ugt i32 53, %559, !dbg !3291
  br i1 %gt1512, label %if.then1513, label %if.exit1530, !dbg !3291

if.then1513:                                      ; preds = %if.exit1510
  store double 1.000000e+00, ptr %x1514, align 8
  %560 = load i32, ptr %bits1498, align 4, !dbg !3292
  %sub1515 = sub i32 106, %560, !dbg !3294
  %sub1516 = sub i32 %sub1515, 1, !dbg !3294
  store i32 %sub1516, ptr %n1517, align 4
  %561 = load double, ptr %x1514, align 8, !dbg !3295
  %562 = load i32, ptr %n1517, align 4, !dbg !3295
  %563 = call double @scalbn(double %561, i32 %562), !dbg !3298
  store double %563, ptr %mag1518, align 8
  %564 = load double, ptr %y1440, align 8
  store double %564, ptr %sgn1519, align 8
  %565 = load double, ptr %mag1518, align 8
  store double %565, ptr %x1520, align 8
  %566 = load double, ptr %sgn1519, align 8
  store double %566, ptr %y1521, align 8
  %567 = load double, ptr %x1520, align 8, !dbg !3299
  %568 = load double, ptr %sgn1519, align 8, !dbg !3304
  %569 = call double @llvm.copysign.f64(double %567, double %568), !dbg !3304
  store double %569, ptr %bias1511, align 8, !dbg !3304
  %570 = load double, ptr %y1440, align 8, !dbg !3305
  store double 1.000000e+00, ptr %x1522, align 8
  %571 = load i32, ptr %bits1498, align 4, !dbg !3306
  %sub1523 = sub i32 53, %571, !dbg !3307
  store i32 %sub1523, ptr %n1524, align 4
  %572 = load double, ptr %x1522, align 8, !dbg !3308
  %573 = load i32, ptr %n1524, align 4, !dbg !3308
  %574 = call double @scalbn(double %572, i32 %573), !dbg !3311
  %zero1525 = fcmp ueq double %574, 0.000000e+00, !dbg !3305
  %575 = call i1 @llvm.expect.i1(i1 %zero1525, i1 false), !dbg !3305
  br i1 %575, label %panic1526, label %checkok1527, !dbg !3305

checkok1527:                                      ; preds = %if.then1513
  %fmod = frem double %570, %574, !dbg !3305
  store double %fmod, ptr %frac, align 8, !dbg !3305
  %576 = load double, ptr %y1440, align 8, !dbg !3312
  %577 = load double, ptr %frac, align 8, !dbg !3313
  %fsub1528 = fsub double %576, %577, !dbg !3312
  store double %fsub1528, ptr %y1440, align 8, !dbg !3312
  %578 = load double, ptr %y1440, align 8, !dbg !3314
  %579 = load double, ptr %bias1511, align 8, !dbg !3315
  %fadd1529 = fadd double %578, %579, !dbg !3314
  store double %fadd1529, ptr %y1440, align 8, !dbg !3314
  br label %if.exit1530, !dbg !3314

if.exit1530:                                      ; preds = %checkok1527, %if.exit1510
  %580 = load i32, ptr %a, align 4, !dbg !3316
  %581 = load i32, ptr %i1441, align 4, !dbg !3317
  %add1531 = add i32 %580, %581, !dbg !3316
  %and1532 = and i32 %add1531, 127, !dbg !3316
  %582 = load i32, ptr %z, align 4, !dbg !3318
  %neq1533 = icmp ne i32 %and1532, %582, !dbg !3316
  br i1 %neq1533, label %if.then1534, label %if.exit1610, !dbg !3316

if.then1534:                                      ; preds = %if.exit1530
    #dbg_declare(ptr %t, !3319, !DIExpression(), !3321)
  %583 = load i32, ptr %a, align 4, !dbg !3322
  %584 = load i32, ptr %i1441, align 4, !dbg !3323
  %add1535 = add i32 %583, %584, !dbg !3322
  %and1536 = and i32 %add1535, 127, !dbg !3322
  %sext1537 = sext i32 %and1536 to i64, !dbg !3322
  %lt1538 = icmp slt i64 %sext1537, 0, !dbg !3322
  %585 = call i1 @llvm.expect.i1(i1 %lt1538, i1 false), !dbg !3322
  br i1 %585, label %panic1539, label %checkok1544, !dbg !3322

checkok1544:                                      ; preds = %if.then1534
  %ge1545 = icmp sge i64 %sext1537, 128, !dbg !3322
  %586 = call i1 @llvm.expect.i1(i1 %ge1545, i1 false), !dbg !3322
  br i1 %586, label %panic1546, label %checkok1553, !dbg !3322

checkok1553:                                      ; preds = %checkok1544
  %ptroffset1554 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1537, !dbg !3322
  %587 = load i32, ptr %ptroffset1554, align 4, !dbg !3322
  store i32 %587, ptr %t, align 4, !dbg !3322
  store i8 1, ptr %switch1555, align 1
  br label %switch.entry1556

switch.entry1556:                                 ; preds = %checkok1553
  %588 = load i8, ptr %switch1555, align 1
  %589 = trunc i8 %588 to i1
  %590 = load i32, ptr %t, align 4, !dbg !3324
  %gt1557 = icmp ugt i32 500000000, %590, !dbg !3324
  br i1 %gt1557, label %and.rhs1558, label %and.phi1567, !dbg !3324

and.rhs1558:                                      ; preds = %switch.entry1556
  %591 = load i32, ptr %t, align 4, !dbg !3326
  %i2b1559 = icmp ne i32 %591, 0, !dbg !3326
  br i1 %i2b1559, label %or.phi1565, label %or.rhs1560, !dbg !3326

or.rhs1560:                                       ; preds = %and.rhs1558
  %592 = load i32, ptr %a, align 4, !dbg !3327
  %593 = load i32, ptr %i1441, align 4, !dbg !3328
  %add1561 = add i32 %592, %593, !dbg !3327
  %add1562 = add i32 %add1561, 1, !dbg !3327
  %and1563 = and i32 %add1562, 127, !dbg !3327
  %594 = load i32, ptr %z, align 4, !dbg !3329
  %neq1564 = icmp ne i32 %and1563, %594, !dbg !3327
  br label %or.phi1565, !dbg !3327

or.phi1565:                                       ; preds = %or.rhs1560, %and.rhs1558
  %val1566 = phi i1 [ true, %and.rhs1558 ], [ %neq1564, %or.rhs1560 ], !dbg !3327
  br label %and.phi1567, !dbg !3327

and.phi1567:                                      ; preds = %or.phi1565, %switch.entry1556
  %val1568 = phi i1 [ false, %switch.entry1556 ], [ %val1566, %or.phi1565 ], !dbg !3327
  %eq1569 = icmp eq i1 %val1568, %589, !dbg !3327
  br i1 %eq1569, label %switch.case1570, label %next_if1574, !dbg !3327

switch.case1570:                                  ; preds = %and.phi1567
  %595 = load double, ptr %frac, align 8, !dbg !3330
  %596 = load i32, ptr %sign383, align 4, !dbg !3332
  %sifp1571 = sitofp i32 %596 to double, !dbg !3332
  %fmul1572 = fmul double 2.500000e-01, %sifp1571, !dbg !3333
  %fadd1573 = fadd double %595, %fmul1572, !dbg !3330
  store double %fadd1573, ptr %frac, align 8, !dbg !3330
  br label %switch.exit1599, !dbg !3330

next_if1574:                                      ; preds = %and.phi1567
  %597 = load i32, ptr %t, align 4, !dbg !3334
  %lt1575 = icmp ult i32 500000000, %597, !dbg !3334
  %eq1576 = icmp eq i1 %lt1575, %589, !dbg !3334
  br i1 %eq1576, label %switch.case1577, label %next_if1581, !dbg !3334

switch.case1577:                                  ; preds = %next_if1574
  %598 = load double, ptr %frac, align 8, !dbg !3335
  %599 = load i32, ptr %sign383, align 4, !dbg !3337
  %sifp1578 = sitofp i32 %599 to double, !dbg !3337
  %fmul1579 = fmul double 7.500000e-01, %sifp1578, !dbg !3338
  %fadd1580 = fadd double %598, %fmul1579, !dbg !3335
  store double %fadd1580, ptr %frac, align 8, !dbg !3335
  br label %switch.exit1599, !dbg !3335

next_if1581:                                      ; preds = %next_if1574
  %600 = load i32, ptr %t, align 4, !dbg !3339
  %eq1582 = icmp eq i32 500000000, %600, !dbg !3339
  %eq1583 = icmp eq i1 %eq1582, %589, !dbg !3339
  br i1 %eq1583, label %switch.case1584, label %next_if1598, !dbg !3339

switch.case1584:                                  ; preds = %next_if1581
  %601 = load i32, ptr %a, align 4, !dbg !3340
  %602 = load i32, ptr %i1441, align 4, !dbg !3342
  %add1585 = add i32 %601, %602, !dbg !3340
  %add1586 = add i32 %add1585, 1, !dbg !3340
  %and1587 = and i32 %add1586, 127, !dbg !3340
  %603 = load i32, ptr %z, align 4, !dbg !3343
  %eq1588 = icmp eq i32 %and1587, %603, !dbg !3340
  br i1 %eq1588, label %if.then1589, label %if.else1593, !dbg !3340

if.then1589:                                      ; preds = %switch.case1584
  %604 = load double, ptr %frac, align 8, !dbg !3344
  %605 = load i32, ptr %sign383, align 4, !dbg !3346
  %sifp1590 = sitofp i32 %605 to double, !dbg !3346
  %fmul1591 = fmul double 5.000000e-01, %sifp1590, !dbg !3347
  %fadd1592 = fadd double %604, %fmul1591, !dbg !3344
  store double %fadd1592, ptr %frac, align 8, !dbg !3344
  br label %if.exit1597, !dbg !3344

if.else1593:                                      ; preds = %switch.case1584
  %606 = load double, ptr %frac, align 8, !dbg !3348
  %607 = load i32, ptr %sign383, align 4, !dbg !3350
  %sifp1594 = sitofp i32 %607 to double, !dbg !3350
  %fmul1595 = fmul double 7.500000e-01, %sifp1594, !dbg !3351
  %fadd1596 = fadd double %606, %fmul1595, !dbg !3348
  store double %fadd1596, ptr %frac, align 8, !dbg !3348
  br label %if.exit1597, !dbg !3348

if.exit1597:                                      ; preds = %if.else1593, %if.then1589
  br label %switch.exit1599, !dbg !3348

next_if1598:                                      ; preds = %next_if1581
  br label %switch.exit1599, !dbg !3348

switch.exit1599:                                  ; preds = %next_if1598, %if.exit1597, %switch.case1577, %switch.case1570
  %608 = load i32, ptr %bits1498, align 4, !dbg !3352
  %sub1600 = sub i32 53, %608, !dbg !3353
  %ge1601 = icmp sge i32 %sub1600, 2, !dbg !3353
  br i1 %ge1601, label %and.rhs1602, label %and.phi1606, !dbg !3353

and.rhs1602:                                      ; preds = %switch.exit1599
  %609 = load double, ptr %frac, align 8, !dbg !3354
  %fmod1603 = frem double %609, 1.000000e+00, !dbg !3354
  %neq1604 = fcmp one double %fmod1603, 0.000000e+00, !dbg !3354
  %not1605 = xor i1 %neq1604, true, !dbg !3354
  br label %and.phi1606, !dbg !3354

and.phi1606:                                      ; preds = %and.rhs1602, %switch.exit1599
  %val1607 = phi i1 [ false, %switch.exit1599 ], [ %not1605, %and.rhs1602 ], !dbg !3354
  br i1 %val1607, label %if.then1608, label %if.exit1609, !dbg !3354

if.then1608:                                      ; preds = %and.phi1606
  %610 = load double, ptr %frac, align 8, !dbg !3355
  %fincdec = fadd double %610, 1.000000e+00, !dbg !3355
  store double %fincdec, ptr %frac, align 8, !dbg !3355
  br label %if.exit1609, !dbg !3355

if.exit1609:                                      ; preds = %if.then1608, %and.phi1606
  br label %if.exit1610, !dbg !3355

if.exit1610:                                      ; preds = %if.exit1609, %if.exit1530
  %611 = load double, ptr %y1440, align 8, !dbg !3356
  %612 = load double, ptr %frac, align 8, !dbg !3357
  %fadd1611 = fadd double %611, %612, !dbg !3356
  store double %fadd1611, ptr %y1440, align 8, !dbg !3356
  %613 = load double, ptr %y1440, align 8, !dbg !3358
  %614 = load double, ptr %bias1511, align 8, !dbg !3359
  %fsub1612 = fsub double %613, %614, !dbg !3358
  store double %fsub1612, ptr %y1440, align 8, !dbg !3358
  %615 = load i32, ptr %e2707, align 4, !dbg !3360
  %add1613 = add i32 %615, 53, !dbg !3360
  %and1614 = and i32 %add1613, 2147483647, !dbg !3360
  %616 = load i32, ptr %emax, align 4, !dbg !3361
  %sub1615 = sub i32 %616, 5, !dbg !3361
  %gt1616 = icmp sgt i32 %and1614, %sub1615, !dbg !3360
  br i1 %gt1616, label %if.then1617, label %if.exit1645, !dbg !3360

if.then1617:                                      ; preds = %if.exit1610
  %617 = load double, ptr %y1440, align 8
  store double %617, ptr %x1618, align 8
  %618 = load double, ptr %x1618, align 8, !dbg !3362
  %619 = call double @llvm.fabs.f64(double %618), !dbg !3362
  %ge1619 = fcmp oge double %619, 0x4340000000000000, !dbg !3364
  br i1 %ge1619, label %if.then1620, label %if.exit1633, !dbg !3364

if.then1620:                                      ; preds = %if.then1617
  %620 = load i8, ptr %denormal, align 1, !dbg !3366
  %621 = trunc i8 %620 to i1, !dbg !3366
  br i1 %621, label %and.rhs1621, label %and.phi1627, !dbg !3366

and.rhs1621:                                      ; preds = %if.then1620
  %622 = load i32, ptr %bits1498, align 4, !dbg !3368
  %623 = load i32, ptr %e2707, align 4, !dbg !3369
  %add1622 = add i32 53, %623, !dbg !3370
  %sub1623 = sub i32 %add1622, -1074, !dbg !3370
  %eq1624 = icmp eq i32 %sub1623, %622, !dbg !3368
  %check1625 = icmp sge i32 %sub1623, 0, !dbg !3368
  %siui-eq1626 = and i1 %check1625, %eq1624, !dbg !3368
  br label %and.phi1627, !dbg !3368

and.phi1627:                                      ; preds = %and.rhs1621, %if.then1620
  %val1628 = phi i1 [ false, %if.then1620 ], [ %siui-eq1626, %and.rhs1621 ], !dbg !3368
  br i1 %val1628, label %if.then1629, label %if.exit1630, !dbg !3368

if.then1629:                                      ; preds = %and.phi1627
  store i8 0, ptr %denormal, align 1, !dbg !3371
  br label %if.exit1630, !dbg !3371

if.exit1630:                                      ; preds = %if.then1629, %and.phi1627
  %624 = load double, ptr %y1440, align 8, !dbg !3372
  %fmul1631 = fmul double %624, 5.000000e-01, !dbg !3372
  store double %fmul1631, ptr %y1440, align 8, !dbg !3372
  %625 = load i32, ptr %e2707, align 4, !dbg !3373
  %add1632 = add i32 %625, 1, !dbg !3373
  store i32 %add1632, ptr %e2707, align 4, !dbg !3373
  br label %if.exit1633, !dbg !3373

if.exit1633:                                      ; preds = %if.exit1630, %if.then1617
  %626 = load i32, ptr %e2707, align 4, !dbg !3374
  %add1634 = add i32 %626, 53, !dbg !3374
  %627 = load i32, ptr %emax, align 4, !dbg !3375
  %gt1635 = icmp sgt i32 %add1634, %627, !dbg !3374
  br i1 %gt1635, label %or.phi1641, label %or.rhs1636, !dbg !3374

or.rhs1636:                                       ; preds = %if.exit1633
  %628 = load i8, ptr %denormal, align 1, !dbg !3376
  %629 = trunc i8 %628 to i1, !dbg !3376
  br i1 %629, label %and.rhs1637, label %and.phi1639, !dbg !3376

and.rhs1637:                                      ; preds = %or.rhs1636
  %630 = load double, ptr %frac, align 8, !dbg !3377
  %neq1638 = fcmp one double %630, 0.000000e+00, !dbg !3377
  br label %and.phi1639, !dbg !3377

and.phi1639:                                      ; preds = %and.rhs1637, %or.rhs1636
  %val1640 = phi i1 [ false, %or.rhs1636 ], [ %neq1638, %and.rhs1637 ], !dbg !3377
  br label %or.phi1641, !dbg !3377

or.phi1641:                                       ; preds = %and.phi1639, %if.exit1633
  %val1642 = phi i1 [ true, %if.exit1633 ], [ %val1640, %and.phi1639 ], !dbg !3377
  br i1 %val1642, label %if.then1643, label %if.exit1644, !dbg !3377

if.then1643:                                      ; preds = %or.phi1641
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !3378
  br label %err_retblock, !dbg !3378

if.exit1644:                                      ; preds = %or.phi1641
  br label %if.exit1645, !dbg !3378

if.exit1645:                                      ; preds = %if.exit1644, %if.exit1610
  %631 = load double, ptr %y1440, align 8
  store double %631, ptr %x1646, align 8
  %632 = load i32, ptr %e2707, align 4
  store i32 %632, ptr %n1647, align 4
  %633 = load double, ptr %x1646, align 8, !dbg !3379
  %634 = load i32, ptr %n1647, align 4, !dbg !3379
  %635 = call double @scalbn(double %633, i32 %634), !dbg !3382
  store double %635, ptr %blockret384, align 8, !dbg !3382
  br label %expr_block.exit1649, !dbg !3382

expr_block.exit1649:                              ; preds = %if.exit1645, %checkok789, %checkok750, %if.then720, %if.then668, %if.then651, %if.exit438, %if.then426
  %636 = load double, ptr %blockret384, align 8, !dbg !3382
  store double %636, ptr %blockret, align 8, !dbg !3382
  br label %expr_block.exit1650, !dbg !3382

expr_block.exit1650:                              ; preds = %expr_block.exit1649, %expr_block.exit, %if.then83, %if.then56
  %637 = load double, ptr %blockret, align 8, !dbg !3382
  store double %637, ptr %0, align 8, !dbg !3382
  ret i64 0, !dbg !3382

err_retblock:                                     ; preds = %if.then1643, %if.then677, %if.then674, %if.then647, %guard_block642, %if.then616, %if.then607, %if.then498, %if.then437, %if.then375, %if.then319, %if.then316, %guard_block, %if.then271, %if.then219, %if.then154, %if.then
  %638 = load i64, ptr %reterr, align 8, !dbg !3382
  ret i64 %638, !dbg !3382

panic:                                            ; preds = %and.rhs
  store i64 %4, ptr %taddr, align 8
  %639 = insertvalue %any undef, ptr %taddr, 0
  %640 = insertvalue %any %639, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr3, align 8
  %641 = insertvalue %any undef, ptr %taddr3, 0
  %642 = insertvalue %any %641, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %640, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %642, ptr %ptradd4, align 16
  %643 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %643, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 465, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !2634
  unreachable, !dbg !2634

panic5:                                           ; preds = %loop.body
  store i64 %10, ptr %taddr6, align 8
  %644 = insertvalue %any undef, ptr %taddr6, 0
  %645 = insertvalue %any %644, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr7, align 8
  %646 = insertvalue %any undef, ptr %taddr7, 0
  %647 = insertvalue %any %646, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %645, ptr %varargslots8, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots8, i64 16
  store %any %647, ptr %ptradd9, align 16
  %648 = insertvalue %"any[]" undef, ptr %varargslots8, 0
  %"$$temp10" = insertvalue %"any[]" %648, i64 2, 1
  store %"any[]" %"$$temp10", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 465, ptr byval(%"any[]") align 8 %indirectarg11) #6, !dbg !2635
  unreachable, !dbg !2635

panic19:                                          ; preds = %if.then16
  store i64 %16, ptr %taddr20, align 8
  %649 = insertvalue %any undef, ptr %taddr20, 0
  %650 = insertvalue %any %649, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr21, align 8
  %651 = insertvalue %any undef, ptr %taddr21, 0
  %652 = insertvalue %any %651, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %650, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %652, ptr %ptradd23, align 16
  %653 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %653, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 470, ptr byval(%"any[]") align 8 %indirectarg25) #6, !dbg !2643
  unreachable, !dbg !2643

panic29:                                          ; preds = %switch.case27
  store i64 %23, ptr %taddr30, align 8
  %654 = insertvalue %any undef, ptr %taddr30, 0
  %655 = insertvalue %any %654, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr31, align 8
  %656 = insertvalue %any undef, ptr %taddr31, 0
  %657 = insertvalue %any %656, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %655, ptr %varargslots32, align 16
  %ptradd33 = getelementptr inbounds i8, ptr %varargslots32, i64 16
  store %any %657, ptr %ptradd33, align 16
  %658 = insertvalue %"any[]" undef, ptr %varargslots32, 0
  %"$$temp34" = insertvalue %"any[]" %658, i64 2, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 476, ptr byval(%"any[]") align 8 %indirectarg35) #6, !dbg !2647
  unreachable, !dbg !2647

panic90:                                          ; preds = %and.rhs87
  store i64 %57, ptr %taddr91, align 8
  %659 = insertvalue %any undef, ptr %taddr91, 0
  %660 = insertvalue %any %659, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr92, align 8
  %661 = insertvalue %any undef, ptr %taddr92, 0
  %662 = insertvalue %any %661, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %660, ptr %varargslots93, align 16
  %ptradd94 = getelementptr inbounds i8, ptr %varargslots93, i64 16
  store %any %662, ptr %ptradd94, align 16
  %663 = insertvalue %"any[]" undef, ptr %varargslots93, 0
  %"$$temp95" = insertvalue %"any[]" %663, i64 2, 1
  store %"any[]" %"$$temp95", ptr %indirectarg96, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 482, ptr byval(%"any[]") align 8 %indirectarg96) #6, !dbg !2658
  unreachable, !dbg !2658

panic104:                                         ; preds = %and.rhs101
  store i64 %61, ptr %taddr105, align 8
  %664 = insertvalue %any undef, ptr %taddr105, 0
  %665 = insertvalue %any %664, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr106, align 8
  %666 = insertvalue %any undef, ptr %taddr106, 0
  %667 = insertvalue %any %666, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %665, ptr %varargslots107, align 16
  %ptradd108 = getelementptr inbounds i8, ptr %varargslots107, i64 16
  store %any %667, ptr %ptradd108, align 16
  %668 = insertvalue %"any[]" undef, ptr %varargslots107, 0
  %"$$temp109" = insertvalue %"any[]" %668, i64 2, 1
  store %"any[]" %"$$temp109", ptr %indirectarg110, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 482, ptr byval(%"any[]") align 8 %indirectarg110) #6, !dbg !2660
  unreachable, !dbg !2660

panic118:                                         ; preds = %if.then116
  store i64 %67, ptr %taddr119, align 8
  %669 = insertvalue %any undef, ptr %taddr119, 0
  %670 = insertvalue %any %669, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 2, ptr %taddr120, align 8
  %671 = insertvalue %any undef, ptr %taddr120, 0
  %672 = insertvalue %any %671, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %670, ptr %varargslots121, align 16
  %ptradd122 = getelementptr inbounds i8, ptr %varargslots121, i64 16
  store %any %672, ptr %ptradd122, align 16
  %673 = insertvalue %"any[]" undef, ptr %varargslots121, 0
  %"$$temp123" = insertvalue %"any[]" %673, i64 2, 1
  store %"any[]" %"$$temp123", ptr %indirectarg124, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 484, ptr byval(%"any[]") align 8 %indirectarg124) #6, !dbg !2664
  unreachable, !dbg !2664

panic135:                                         ; preds = %loop.cond132
  store i64 %74, ptr %taddr136, align 8
  %674 = insertvalue %any undef, ptr %taddr136, 0
  %675 = insertvalue %any %674, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %76, ptr %taddr137, align 8
  %676 = insertvalue %any undef, ptr %taddr137, 0
  %677 = insertvalue %any %676, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %675, ptr %varargslots138, align 16
  %ptradd139 = getelementptr inbounds i8, ptr %varargslots138, i64 16
  store %any %677, ptr %ptradd139, align 16
  %678 = insertvalue %"any[]" undef, ptr %varargslots138, 0
  %"$$temp140" = insertvalue %"any[]" %678, i64 2, 1
  store %"any[]" %"$$temp140", ptr %indirectarg141, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 344, ptr byval(%"any[]") align 8 %indirectarg141) #6, !dbg !2697
  unreachable, !dbg !2697

panic164:                                         ; preds = %and.rhs160
  store i64 %90, ptr %taddr165, align 8
  %679 = insertvalue %any undef, ptr %taddr165, 0
  %680 = insertvalue %any %679, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add162, ptr %taddr166, align 8
  %681 = insertvalue %any undef, ptr %taddr166, 0
  %682 = insertvalue %any %681, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %680, ptr %varargslots167, align 16
  %ptradd168 = getelementptr inbounds i8, ptr %varargslots167, i64 16
  store %any %682, ptr %ptradd168, align 16
  %683 = insertvalue %"any[]" undef, ptr %varargslots167, 0
  %"$$temp169" = insertvalue %"any[]" %683, i64 2, 1
  store %"any[]" %"$$temp169", ptr %indirectarg170, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 357, ptr byval(%"any[]") align 8 %indirectarg170) #6, !dbg !2717
  unreachable, !dbg !2717

panic184:                                         ; preds = %and.rhs180
  store i64 %98, ptr %taddr185, align 8
  %684 = insertvalue %any undef, ptr %taddr185, 0
  %685 = insertvalue %any %684, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add182, ptr %taddr186, align 8
  %686 = insertvalue %any undef, ptr %taddr186, 0
  %687 = insertvalue %any %686, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %685, ptr %varargslots187, align 16
  %ptradd188 = getelementptr inbounds i8, ptr %varargslots187, i64 16
  store %any %687, ptr %ptradd188, align 16
  %688 = insertvalue %"any[]" undef, ptr %varargslots187, 0
  %"$$temp189" = insertvalue %"any[]" %688, i64 2, 1
  store %"any[]" %"$$temp189", ptr %indirectarg190, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 361, ptr byval(%"any[]") align 8 %indirectarg190) #6, !dbg !2728
  unreachable, !dbg !2728

panic260:                                         ; preds = %if.exit256
  store i64 %131, ptr %taddr261, align 8
  %689 = insertvalue %any undef, ptr %taddr261, 0
  %690 = insertvalue %any %689, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add258, ptr %taddr262, align 8
  %691 = insertvalue %any undef, ptr %taddr262, 0
  %692 = insertvalue %any %691, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %690, ptr %varargslots263, align 16
  %ptradd264 = getelementptr inbounds i8, ptr %varargslots263, i64 16
  store %any %692, ptr %ptradd264, align 16
  %693 = insertvalue %"any[]" undef, ptr %varargslots263, 0
  %"$$temp265" = insertvalue %"any[]" %693, i64 2, 1
  store %"any[]" %"$$temp265", ptr %indirectarg266, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 394, ptr byval(%"any[]") align 8 %indirectarg266) #6, !dbg !2775
  unreachable, !dbg !2775

panic290:                                         ; preds = %if.then287
  store i64 %148, ptr %taddr291, align 8
  %694 = insertvalue %any undef, ptr %taddr291, 0
  %695 = insertvalue %any %694, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add288, ptr %taddr292, align 8
  %696 = insertvalue %any undef, ptr %taddr292, 0
  %697 = insertvalue %any %696, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %695, ptr %varargslots293, align 16
  %ptradd294 = getelementptr inbounds i8, ptr %varargslots293, i64 16
  store %any %697, ptr %ptradd294, align 16
  %698 = insertvalue %"any[]" undef, ptr %varargslots293, 0
  %"$$temp295" = insertvalue %"any[]" %698, i64 2, 1
  store %"any[]" %"$$temp295", ptr %indirectarg296, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 403, ptr byval(%"any[]") align 8 %indirectarg296) #6, !dbg !2793
  unreachable, !dbg !2793

panic298:                                         ; preds = %checkok297
  store i64 %add288, ptr %taddr299, align 8
  %699 = insertvalue %any undef, ptr %taddr299, 0
  %700 = insertvalue %any %699, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %700, ptr %varargslots300, align 16
  %701 = insertvalue %"any[]" undef, ptr %varargslots300, 0
  %"$$temp301" = insertvalue %"any[]" %701, i64 1, 1
  store %"any[]" %"$$temp301", ptr %indirectarg302, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.96, i64 22, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 403, ptr byval(%"any[]") align 8 %indirectarg302) #6, !dbg !2792
  unreachable, !dbg !2792

panic392:                                         ; preds = %assert_ok
  store i64 %210, ptr %taddr393, align 8
  %702 = insertvalue %any undef, ptr %taddr393, 0
  %703 = insertvalue %any %702, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr394, align 8
  %704 = insertvalue %any undef, ptr %taddr394, 0
  %705 = insertvalue %any %704, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %703, ptr %varargslots395, align 16
  %ptradd396 = getelementptr inbounds i8, ptr %varargslots395, i64 16
  store %any %705, ptr %ptradd396, align 16
  %706 = insertvalue %"any[]" undef, ptr %varargslots395, 0
  %"$$temp397" = insertvalue %"any[]" %706, i64 2, 1
  store %"any[]" %"$$temp397", ptr %indirectarg398, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 45, ptr byval(%"any[]") align 8 %indirectarg398) #6, !dbg !2891
  unreachable, !dbg !2891

panic414:                                         ; preds = %loop.cond411
  store i64 %219, ptr %taddr415, align 8
  %707 = insertvalue %any undef, ptr %taddr415, 0
  %708 = insertvalue %any %707, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %221, ptr %taddr416, align 8
  %709 = insertvalue %any undef, ptr %taddr416, 0
  %710 = insertvalue %any %709, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %708, ptr %varargslots417, align 16
  %ptradd418 = getelementptr inbounds i8, ptr %varargslots417, i64 16
  store %any %710, ptr %ptradd418, align 16
  %711 = insertvalue %"any[]" undef, ptr %varargslots417, 0
  %"$$temp419" = insertvalue %"any[]" %711, i64 2, 1
  store %"any[]" %"$$temp419", ptr %indirectarg420, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 56, ptr byval(%"any[]") align 8 %indirectarg420) #6, !dbg !2916
  unreachable, !dbg !2916

panic447:                                         ; preds = %and.rhs443
  store i64 %236, ptr %taddr448, align 8
  %712 = insertvalue %any undef, ptr %taddr448, 0
  %713 = insertvalue %any %712, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add445, ptr %taddr449, align 8
  %714 = insertvalue %any undef, ptr %taddr449, 0
  %715 = insertvalue %any %714, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %713, ptr %varargslots450, align 16
  %ptradd451 = getelementptr inbounds i8, ptr %varargslots450, i64 16
  store %any %715, ptr %ptradd451, align 16
  %716 = insertvalue %"any[]" undef, ptr %varargslots450, 0
  %"$$temp452" = insertvalue %"any[]" %716, i64 2, 1
  store %"any[]" %"$$temp452", ptr %indirectarg453, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 70, ptr byval(%"any[]") align 8 %indirectarg453) #6, !dbg !2936
  unreachable, !dbg !2936

panic467:                                         ; preds = %and.rhs463
  store i64 %244, ptr %taddr468, align 8
  %717 = insertvalue %any undef, ptr %taddr468, 0
  %718 = insertvalue %any %717, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add465, ptr %taddr469, align 8
  %719 = insertvalue %any undef, ptr %taddr469, 0
  %720 = insertvalue %any %719, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %718, ptr %varargslots470, align 16
  %ptradd471 = getelementptr inbounds i8, ptr %varargslots470, i64 16
  store %any %720, ptr %ptradd471, align 16
  %721 = insertvalue %"any[]" undef, ptr %varargslots470, 0
  %"$$temp472" = insertvalue %"any[]" %721, i64 2, 1
  store %"any[]" %"$$temp472", ptr %indirectarg473, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 74, ptr byval(%"any[]") align 8 %indirectarg473) #6, !dbg !2947
  unreachable, !dbg !2947

panic512:                                         ; preds = %if.then510
  store i64 %sext, ptr %taddr513, align 8
  %722 = insertvalue %any undef, ptr %taddr513, 0
  %723 = insertvalue %any %722, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %723, ptr %varargslots514, align 16
  %724 = insertvalue %"any[]" undef, ptr %varargslots514, 0
  %"$$temp515" = insertvalue %"any[]" %724, i64 1, 1
  store %"any[]" %"$$temp515", ptr %indirectarg516, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 94, ptr byval(%"any[]") align 8 %indirectarg516) #6, !dbg !2969
  unreachable, !dbg !2969

panic519:                                         ; preds = %checkok517
  store i64 128, ptr %taddr520, align 8
  %725 = insertvalue %any undef, ptr %taddr520, 0
  %726 = insertvalue %any %725, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext, ptr %taddr521, align 8
  %727 = insertvalue %any undef, ptr %taddr521, 0
  %728 = insertvalue %any %727, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %726, ptr %varargslots522, align 16
  %ptradd523 = getelementptr inbounds i8, ptr %varargslots522, i64 16
  store %any %728, ptr %ptradd523, align 16
  %729 = insertvalue %"any[]" undef, ptr %varargslots522, 0
  %"$$temp524" = insertvalue %"any[]" %729, i64 2, 1
  store %"any[]" %"$$temp524", ptr %indirectarg525, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 94, ptr byval(%"any[]") align 8 %indirectarg525) #6, !dbg !2969
  unreachable, !dbg !2969

panic529:                                         ; preds = %checkok526
  store i64 %sext527, ptr %taddr530, align 8
  %730 = insertvalue %any undef, ptr %taddr530, 0
  %731 = insertvalue %any %730, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %731, ptr %varargslots531, align 16
  %732 = insertvalue %"any[]" undef, ptr %varargslots531, 0
  %"$$temp532" = insertvalue %"any[]" %732, i64 1, 1
  store %"any[]" %"$$temp532", ptr %indirectarg533, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 94, ptr byval(%"any[]") align 8 %indirectarg533) #6, !dbg !2971
  unreachable, !dbg !2971

panic536:                                         ; preds = %checkok534
  store i64 128, ptr %taddr537, align 8
  %733 = insertvalue %any undef, ptr %taddr537, 0
  %734 = insertvalue %any %733, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext527, ptr %taddr538, align 8
  %735 = insertvalue %any undef, ptr %taddr538, 0
  %736 = insertvalue %any %735, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %734, ptr %varargslots539, align 16
  %ptradd540 = getelementptr inbounds i8, ptr %varargslots539, i64 16
  store %any %736, ptr %ptradd540, align 16
  %737 = insertvalue %"any[]" undef, ptr %varargslots539, 0
  %"$$temp541" = insertvalue %"any[]" %737, i64 2, 1
  store %"any[]" %"$$temp541", ptr %indirectarg542, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 94, ptr byval(%"any[]") align 8 %indirectarg542) #6, !dbg !2971
  unreachable, !dbg !2971

panic552:                                         ; preds = %if.else549
  store i64 %sext550, ptr %taddr553, align 8
  %738 = insertvalue %any undef, ptr %taddr553, 0
  %739 = insertvalue %any %738, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %739, ptr %varargslots554, align 16
  %740 = insertvalue %"any[]" undef, ptr %varargslots554, 0
  %"$$temp555" = insertvalue %"any[]" %740, i64 1, 1
  store %"any[]" %"$$temp555", ptr %indirectarg556, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 98, ptr byval(%"any[]") align 8 %indirectarg556) #6, !dbg !2974
  unreachable, !dbg !2974

panic559:                                         ; preds = %checkok557
  store i64 128, ptr %taddr560, align 8
  %741 = insertvalue %any undef, ptr %taddr560, 0
  %742 = insertvalue %any %741, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext550, ptr %taddr561, align 8
  %743 = insertvalue %any undef, ptr %taddr561, 0
  %744 = insertvalue %any %743, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %742, ptr %varargslots562, align 16
  %ptradd563 = getelementptr inbounds i8, ptr %varargslots562, i64 16
  store %any %744, ptr %ptradd563, align 16
  %745 = insertvalue %"any[]" undef, ptr %varargslots562, 0
  %"$$temp564" = insertvalue %"any[]" %745, i64 2, 1
  store %"any[]" %"$$temp564", ptr %indirectarg565, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 98, ptr byval(%"any[]") align 8 %indirectarg565) #6, !dbg !2974
  unreachable, !dbg !2974

panic593:                                         ; preds = %assert_ok589
  store i64 %285, ptr %taddr594, align 8
  %746 = insertvalue %any undef, ptr %taddr594, 0
  %747 = insertvalue %any %746, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add591, ptr %taddr595, align 8
  %748 = insertvalue %any undef, ptr %taddr595, 0
  %749 = insertvalue %any %748, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %747, ptr %varargslots596, align 16
  %ptradd597 = getelementptr inbounds i8, ptr %varargslots596, i64 16
  store %any %749, ptr %ptradd597, align 16
  %750 = insertvalue %"any[]" undef, ptr %varargslots596, 0
  %"$$temp598" = insertvalue %"any[]" %750, i64 2, 1
  store %"any[]" %"$$temp598", ptr %indirectarg599, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 113, ptr byval(%"any[]") align 8 %indirectarg599) #6, !dbg !2995
  unreachable, !dbg !2995

panic620:                                         ; preds = %if.exit617
  store i64 %301, ptr %taddr621, align 8
  %751 = insertvalue %any undef, ptr %taddr621, 0
  %752 = insertvalue %any %751, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add618, ptr %taddr622, align 8
  %753 = insertvalue %any undef, ptr %taddr622, 0
  %754 = insertvalue %any %753, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %752, ptr %varargslots623, align 16
  %ptradd624 = getelementptr inbounds i8, ptr %varargslots623, i64 16
  store %any %754, ptr %ptradd624, align 16
  %755 = insertvalue %"any[]" undef, ptr %varargslots623, 0
  %"$$temp625" = insertvalue %"any[]" %755, i64 2, 1
  store %"any[]" %"$$temp625", ptr %indirectarg626, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 120, ptr byval(%"any[]") align 8 %indirectarg626) #6, !dbg !3009
  unreachable, !dbg !3009

panic629:                                         ; preds = %checkok627
  store i64 %add618, ptr %taddr630, align 8
  %756 = insertvalue %any undef, ptr %taddr630, 0
  %757 = insertvalue %any %756, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %757, ptr %varargslots631, align 16
  %758 = insertvalue %"any[]" undef, ptr %varargslots631, 0
  %"$$temp632" = insertvalue %"any[]" %758, i64 1, 1
  store %"any[]" %"$$temp632", ptr %indirectarg633, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.96, i64 22, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 120, ptr byval(%"any[]") align 8 %indirectarg633) #6, !dbg !3008
  unreachable, !dbg !3008

panic686:                                         ; preds = %loop.body683
  store i64 %sext684, ptr %taddr687, align 8
  %759 = insertvalue %any undef, ptr %taddr687, 0
  %760 = insertvalue %any %759, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %760, ptr %varargslots688, align 16
  %761 = insertvalue %"any[]" undef, ptr %varargslots688, 0
  %"$$temp689" = insertvalue %"any[]" %761, i64 1, 1
  store %"any[]" %"$$temp689", ptr %indirectarg690, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 138, ptr byval(%"any[]") align 8 %indirectarg690) #6, !dbg !3037
  unreachable, !dbg !3037

panic693:                                         ; preds = %checkok691
  store i64 128, ptr %taddr694, align 8
  %762 = insertvalue %any undef, ptr %taddr694, 0
  %763 = insertvalue %any %762, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext684, ptr %taddr695, align 8
  %764 = insertvalue %any undef, ptr %taddr695, 0
  %765 = insertvalue %any %764, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %763, ptr %varargslots696, align 16
  %ptradd697 = getelementptr inbounds i8, ptr %varargslots696, i64 16
  store %any %765, ptr %ptradd697, align 16
  %766 = insertvalue %"any[]" undef, ptr %varargslots696, 0
  %"$$temp698" = insertvalue %"any[]" %766, i64 2, 1
  store %"any[]" %"$$temp698", ptr %indirectarg699, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 138, ptr byval(%"any[]") align 8 %indirectarg699) #6, !dbg !3037
  unreachable, !dbg !3037

panic732:                                         ; preds = %if.then726
  store i64 %sub730, ptr %taddr733, align 8
  %767 = insertvalue %any undef, ptr %taddr733, 0
  %768 = insertvalue %any %767, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %768, ptr %varargslots734, align 16
  %769 = insertvalue %"any[]" undef, ptr %varargslots734, 0
  %"$$temp735" = insertvalue %"any[]" %769, i64 1, 1
  store %"any[]" %"$$temp735", ptr %indirectarg736, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 152, ptr byval(%"any[]") align 8 %indirectarg736) #6, !dbg !3064
  unreachable, !dbg !3064

panic739:                                         ; preds = %checkok737
  store i64 8, ptr %taddr740, align 8
  %770 = insertvalue %any undef, ptr %taddr740, 0
  %771 = insertvalue %any %770, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub730, ptr %taddr741, align 8
  %772 = insertvalue %any undef, ptr %taddr741, 0
  %773 = insertvalue %any %772, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %771, ptr %varargslots742, align 16
  %ptradd743 = getelementptr inbounds i8, ptr %varargslots742, i64 16
  store %any %773, ptr %ptradd743, align 16
  %774 = insertvalue %"any[]" undef, ptr %varargslots742, 0
  %"$$temp744" = insertvalue %"any[]" %774, i64 2, 1
  store %"any[]" %"$$temp744", ptr %indirectarg745, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 152, ptr byval(%"any[]") align 8 %indirectarg745) #6, !dbg !3064
  unreachable, !dbg !3064

panic749:                                         ; preds = %checkok746
  %775 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3061
  call void %775(ptr @.panic_msg.100, i64 17, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 152) #6, !dbg !3061
  unreachable, !dbg !3061

panic759:                                         ; preds = %or.rhs758
  store i32 %353, ptr %taddr760, align 4
  %776 = insertvalue %any undef, ptr %taddr760, 0
  %777 = insertvalue %any %776, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %777, ptr %varargslots761, align 16
  %778 = insertvalue %"any[]" undef, ptr %varargslots761, 0
  %"$$temp762" = insertvalue %"any[]" %778, i64 1, 1
  store %"any[]" %"$$temp762", ptr %indirectarg763, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 35, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 154, ptr byval(%"any[]") align 8 %indirectarg763) #6, !dbg !3074
  unreachable, !dbg !3074

panic775:                                         ; preds = %if.then769
  store i64 %sub773, ptr %taddr776, align 8
  %779 = insertvalue %any undef, ptr %taddr776, 0
  %780 = insertvalue %any %779, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %780, ptr %varargslots777, align 16
  %781 = insertvalue %"any[]" undef, ptr %varargslots777, 0
  %"$$temp778" = insertvalue %"any[]" %781, i64 1, 1
  store %"any[]" %"$$temp778", ptr %indirectarg779, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 154, ptr byval(%"any[]") align 8 %indirectarg779) #6, !dbg !3077
  unreachable, !dbg !3077

panic782:                                         ; preds = %checkok780
  store i64 8, ptr %taddr783, align 8
  %782 = insertvalue %any undef, ptr %taddr783, 0
  %783 = insertvalue %any %782, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub773, ptr %taddr784, align 8
  %784 = insertvalue %any undef, ptr %taddr784, 0
  %785 = insertvalue %any %784, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %783, ptr %varargslots785, align 16
  %ptradd786 = getelementptr inbounds i8, ptr %varargslots785, i64 16
  store %any %785, ptr %ptradd786, align 16
  %786 = insertvalue %"any[]" undef, ptr %varargslots785, 0
  %"$$temp787" = insertvalue %"any[]" %786, i64 2, 1
  store %"any[]" %"$$temp787", ptr %indirectarg788, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 154, ptr byval(%"any[]") align 8 %indirectarg788) #6, !dbg !3077
  unreachable, !dbg !3077

panic807:                                         ; preds = %cond.phi803
  store i64 %sub805, ptr %taddr808, align 8
  %787 = insertvalue %any undef, ptr %taddr808, 0
  %788 = insertvalue %any %787, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %788, ptr %varargslots809, align 16
  %789 = insertvalue %"any[]" undef, ptr %varargslots809, 0
  %"$$temp810" = insertvalue %"any[]" %789, i64 1, 1
  store %"any[]" %"$$temp810", ptr %indirectarg811, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 161, ptr byval(%"any[]") align 8 %indirectarg811) #6, !dbg !3088
  unreachable, !dbg !3088

panic814:                                         ; preds = %checkok812
  store i64 8, ptr %taddr815, align 8
  %790 = insertvalue %any undef, ptr %taddr815, 0
  %791 = insertvalue %any %790, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub805, ptr %taddr816, align 8
  %792 = insertvalue %any undef, ptr %taddr816, 0
  %793 = insertvalue %any %792, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %791, ptr %varargslots817, align 16
  %ptradd818 = getelementptr inbounds i8, ptr %varargslots817, i64 16
  store %any %793, ptr %ptradd818, align 16
  %794 = insertvalue %"any[]" undef, ptr %varargslots817, 0
  %"$$temp819" = insertvalue %"any[]" %794, i64 2, 1
  store %"any[]" %"$$temp819", ptr %indirectarg820, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 161, ptr byval(%"any[]") align 8 %indirectarg820) #6, !dbg !3088
  unreachable, !dbg !3088

panic828:                                         ; preds = %loop.body825
  store i64 %sext826, ptr %taddr829, align 8
  %795 = insertvalue %any undef, ptr %taddr829, 0
  %796 = insertvalue %any %795, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %796, ptr %varargslots830, align 16
  %797 = insertvalue %"any[]" undef, ptr %varargslots830, 0
  %"$$temp831" = insertvalue %"any[]" %797, i64 1, 1
  store %"any[]" %"$$temp831", ptr %indirectarg832, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 165, ptr byval(%"any[]") align 8 %indirectarg832) #6, !dbg !3099
  unreachable, !dbg !3099

panic835:                                         ; preds = %checkok833
  store i64 128, ptr %taddr836, align 8
  %798 = insertvalue %any undef, ptr %taddr836, 0
  %799 = insertvalue %any %798, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext826, ptr %taddr837, align 8
  %800 = insertvalue %any undef, ptr %taddr837, 0
  %801 = insertvalue %any %800, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %799, ptr %varargslots838, align 16
  %ptradd839 = getelementptr inbounds i8, ptr %varargslots838, i64 16
  store %any %801, ptr %ptradd839, align 16
  %802 = insertvalue %"any[]" undef, ptr %varargslots838, 0
  %"$$temp840" = insertvalue %"any[]" %802, i64 2, 1
  store %"any[]" %"$$temp840", ptr %indirectarg841, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 165, ptr byval(%"any[]") align 8 %indirectarg841) #6, !dbg !3099
  unreachable, !dbg !3099

panic845:                                         ; preds = %checkok842
  %803 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3101
  call void %803(ptr @.panic_msg.102, i64 10, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 165) #6, !dbg !3101
  unreachable, !dbg !3101

panic850:                                         ; preds = %checkok846
  store i64 %sext848, ptr %taddr851, align 8
  %804 = insertvalue %any undef, ptr %taddr851, 0
  %805 = insertvalue %any %804, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %805, ptr %varargslots852, align 16
  %806 = insertvalue %"any[]" undef, ptr %varargslots852, 0
  %"$$temp853" = insertvalue %"any[]" %806, i64 1, 1
  store %"any[]" %"$$temp853", ptr %indirectarg854, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 166, ptr byval(%"any[]") align 8 %indirectarg854) #6, !dbg !3102
  unreachable, !dbg !3102

panic857:                                         ; preds = %checkok855
  store i64 128, ptr %taddr858, align 8
  %807 = insertvalue %any undef, ptr %taddr858, 0
  %808 = insertvalue %any %807, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext848, ptr %taddr859, align 8
  %809 = insertvalue %any undef, ptr %taddr859, 0
  %810 = insertvalue %any %809, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %808, ptr %varargslots860, align 16
  %ptradd861 = getelementptr inbounds i8, ptr %varargslots860, i64 16
  store %any %810, ptr %ptradd861, align 16
  %811 = insertvalue %"any[]" undef, ptr %varargslots860, 0
  %"$$temp862" = insertvalue %"any[]" %811, i64 2, 1
  store %"any[]" %"$$temp862", ptr %indirectarg863, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 166, ptr byval(%"any[]") align 8 %indirectarg863) #6, !dbg !3102
  unreachable, !dbg !3102

panic868:                                         ; preds = %checkok864
  store i64 %sext866, ptr %taddr869, align 8
  %812 = insertvalue %any undef, ptr %taddr869, 0
  %813 = insertvalue %any %812, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %813, ptr %varargslots870, align 16
  %814 = insertvalue %"any[]" undef, ptr %varargslots870, 0
  %"$$temp871" = insertvalue %"any[]" %814, i64 1, 1
  store %"any[]" %"$$temp871", ptr %indirectarg872, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 166, ptr byval(%"any[]") align 8 %indirectarg872) #6, !dbg !3103
  unreachable, !dbg !3103

panic875:                                         ; preds = %checkok873
  store i64 128, ptr %taddr876, align 8
  %815 = insertvalue %any undef, ptr %taddr876, 0
  %816 = insertvalue %any %815, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext866, ptr %taddr877, align 8
  %817 = insertvalue %any undef, ptr %taddr877, 0
  %818 = insertvalue %any %817, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %816, ptr %varargslots878, align 16
  %ptradd879 = getelementptr inbounds i8, ptr %varargslots878, i64 16
  store %any %818, ptr %ptradd879, align 16
  %819 = insertvalue %"any[]" undef, ptr %varargslots878, 0
  %"$$temp880" = insertvalue %"any[]" %819, i64 2, 1
  store %"any[]" %"$$temp880", ptr %indirectarg881, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 166, ptr byval(%"any[]") align 8 %indirectarg881) #6, !dbg !3103
  unreachable, !dbg !3103

panic885:                                         ; preds = %checkok882
  %820 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3105
  call void %820(ptr @.panic_msg.100, i64 17, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 166) #6, !dbg !3105
  unreachable, !dbg !3105

panic889:                                         ; preds = %checkok886
  %821 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3108
  call void %821(ptr @.panic_msg.100, i64 17, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 167) #6, !dbg !3108
  unreachable, !dbg !3108

panic897:                                         ; preds = %and.rhs894
  store i64 %sext895, ptr %taddr898, align 8
  %822 = insertvalue %any undef, ptr %taddr898, 0
  %823 = insertvalue %any %822, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %823, ptr %varargslots899, align 16
  %824 = insertvalue %"any[]" undef, ptr %varargslots899, 0
  %"$$temp900" = insertvalue %"any[]" %824, i64 1, 1
  store %"any[]" %"$$temp900", ptr %indirectarg901, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 168, ptr byval(%"any[]") align 8 %indirectarg901) #6, !dbg !3112
  unreachable, !dbg !3112

panic904:                                         ; preds = %checkok902
  store i64 128, ptr %taddr905, align 8
  %825 = insertvalue %any undef, ptr %taddr905, 0
  %826 = insertvalue %any %825, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext895, ptr %taddr906, align 8
  %827 = insertvalue %any undef, ptr %taddr906, 0
  %828 = insertvalue %any %827, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %826, ptr %varargslots907, align 16
  %ptradd908 = getelementptr inbounds i8, ptr %varargslots907, i64 16
  store %any %828, ptr %ptradd908, align 16
  %829 = insertvalue %"any[]" undef, ptr %varargslots907, 0
  %"$$temp909" = insertvalue %"any[]" %829, i64 2, 1
  store %"any[]" %"$$temp909", ptr %indirectarg910, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 168, ptr byval(%"any[]") align 8 %indirectarg910) #6, !dbg !3112
  unreachable, !dbg !3112

panic928:                                         ; preds = %if.then924
  store i64 %sext926, ptr %taddr929, align 8
  %830 = insertvalue %any undef, ptr %taddr929, 0
  %831 = insertvalue %any %830, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %831, ptr %varargslots930, align 16
  %832 = insertvalue %"any[]" undef, ptr %varargslots930, 0
  %"$$temp931" = insertvalue %"any[]" %832, i64 1, 1
  store %"any[]" %"$$temp931", ptr %indirectarg932, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 174, ptr byval(%"any[]") align 8 %indirectarg932) #6, !dbg !3118
  unreachable, !dbg !3118

panic935:                                         ; preds = %checkok933
  store i64 128, ptr %taddr936, align 8
  %833 = insertvalue %any undef, ptr %taddr936, 0
  %834 = insertvalue %any %833, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext926, ptr %taddr937, align 8
  %835 = insertvalue %any undef, ptr %taddr937, 0
  %836 = insertvalue %any %835, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %834, ptr %varargslots938, align 16
  %ptradd939 = getelementptr inbounds i8, ptr %varargslots938, i64 16
  store %any %836, ptr %ptradd939, align 16
  %837 = insertvalue %"any[]" undef, ptr %varargslots938, 0
  %"$$temp940" = insertvalue %"any[]" %837, i64 2, 1
  store %"any[]" %"$$temp940", ptr %indirectarg941, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 174, ptr byval(%"any[]") align 8 %indirectarg941) #6, !dbg !3118
  unreachable, !dbg !3118

panic955:                                         ; preds = %and.rhs952
  store i64 %sext953, ptr %taddr956, align 8
  %838 = insertvalue %any undef, ptr %taddr956, 0
  %839 = insertvalue %any %838, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %839, ptr %varargslots957, align 16
  %840 = insertvalue %"any[]" undef, ptr %varargslots957, 0
  %"$$temp958" = insertvalue %"any[]" %840, i64 1, 1
  store %"any[]" %"$$temp958", ptr %indirectarg959, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 179, ptr byval(%"any[]") align 8 %indirectarg959) #6, !dbg !3127
  unreachable, !dbg !3127

panic962:                                         ; preds = %checkok960
  store i64 128, ptr %taddr963, align 8
  %841 = insertvalue %any undef, ptr %taddr963, 0
  %842 = insertvalue %any %841, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext953, ptr %taddr964, align 8
  %843 = insertvalue %any undef, ptr %taddr964, 0
  %844 = insertvalue %any %843, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %842, ptr %varargslots965, align 16
  %ptradd966 = getelementptr inbounds i8, ptr %varargslots965, i64 16
  store %any %844, ptr %ptradd966, align 16
  %845 = insertvalue %"any[]" undef, ptr %varargslots965, 0
  %"$$temp967" = insertvalue %"any[]" %845, i64 2, 1
  store %"any[]" %"$$temp967", ptr %indirectarg968, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 179, ptr byval(%"any[]") align 8 %indirectarg968) #6, !dbg !3127
  unreachable, !dbg !3127

panic985:                                         ; preds = %loop.body981
  store i64 %sext983, ptr %taddr986, align 8
  %846 = insertvalue %any undef, ptr %taddr986, 0
  %847 = insertvalue %any %846, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %847, ptr %varargslots987, align 16
  %848 = insertvalue %"any[]" undef, ptr %varargslots987, 0
  %"$$temp988" = insertvalue %"any[]" %848, i64 1, 1
  store %"any[]" %"$$temp988", ptr %indirectarg989, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 185, ptr byval(%"any[]") align 8 %indirectarg989) #6, !dbg !3139
  unreachable, !dbg !3139

panic992:                                         ; preds = %checkok990
  store i64 128, ptr %taddr993, align 8
  %849 = insertvalue %any undef, ptr %taddr993, 0
  %850 = insertvalue %any %849, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext983, ptr %taddr994, align 8
  %851 = insertvalue %any undef, ptr %taddr994, 0
  %852 = insertvalue %any %851, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %850, ptr %varargslots995, align 16
  %ptradd996 = getelementptr inbounds i8, ptr %varargslots995, i64 16
  store %any %852, ptr %ptradd996, align 16
  %853 = insertvalue %"any[]" undef, ptr %varargslots995, 0
  %"$$temp997" = insertvalue %"any[]" %853, i64 2, 1
  store %"any[]" %"$$temp997", ptr %indirectarg998, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 185, ptr byval(%"any[]") align 8 %indirectarg998) #6, !dbg !3139
  unreachable, !dbg !3139

panic1010:                                        ; preds = %if.then1005
  store i64 %sext1008, ptr %taddr1011, align 8
  %854 = insertvalue %any undef, ptr %taddr1011, 0
  %855 = insertvalue %any %854, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %855, ptr %varargslots1012, align 16
  %856 = insertvalue %"any[]" undef, ptr %varargslots1012, 0
  %"$$temp1013" = insertvalue %"any[]" %856, i64 1, 1
  store %"any[]" %"$$temp1013", ptr %indirectarg1014, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 189, ptr byval(%"any[]") align 8 %indirectarg1014) #6, !dbg !3146
  unreachable, !dbg !3146

panic1017:                                        ; preds = %checkok1015
  store i64 128, ptr %taddr1018, align 8
  %857 = insertvalue %any undef, ptr %taddr1018, 0
  %858 = insertvalue %any %857, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1008, ptr %taddr1019, align 8
  %859 = insertvalue %any undef, ptr %taddr1019, 0
  %860 = insertvalue %any %859, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %858, ptr %varargslots1020, align 16
  %ptradd1021 = getelementptr inbounds i8, ptr %varargslots1020, i64 16
  store %any %860, ptr %ptradd1021, align 16
  %861 = insertvalue %"any[]" undef, ptr %varargslots1020, 0
  %"$$temp1022" = insertvalue %"any[]" %861, i64 2, 1
  store %"any[]" %"$$temp1022", ptr %indirectarg1023, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 189, ptr byval(%"any[]") align 8 %indirectarg1023) #6, !dbg !3146
  unreachable, !dbg !3146

panic1031:                                        ; preds = %if.else1028
  store i64 %sext1029, ptr %taddr1032, align 8
  %862 = insertvalue %any undef, ptr %taddr1032, 0
  %863 = insertvalue %any %862, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %863, ptr %varargslots1033, align 16
  %864 = insertvalue %"any[]" undef, ptr %varargslots1033, 0
  %"$$temp1034" = insertvalue %"any[]" %864, i64 1, 1
  store %"any[]" %"$$temp1034", ptr %indirectarg1035, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 194, ptr byval(%"any[]") align 8 %indirectarg1035) #6, !dbg !3151
  unreachable, !dbg !3151

panic1038:                                        ; preds = %checkok1036
  store i64 128, ptr %taddr1039, align 8
  %865 = insertvalue %any undef, ptr %taddr1039, 0
  %866 = insertvalue %any %865, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1029, ptr %taddr1040, align 8
  %867 = insertvalue %any undef, ptr %taddr1040, 0
  %868 = insertvalue %any %867, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %866, ptr %varargslots1041, align 16
  %ptradd1042 = getelementptr inbounds i8, ptr %varargslots1041, i64 16
  store %any %868, ptr %ptradd1042, align 16
  %869 = insertvalue %"any[]" undef, ptr %varargslots1041, 0
  %"$$temp1043" = insertvalue %"any[]" %869, i64 2, 1
  store %"any[]" %"$$temp1043", ptr %indirectarg1044, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 194, ptr byval(%"any[]") align 8 %indirectarg1044) #6, !dbg !3151
  unreachable, !dbg !3151

panic1059:                                        ; preds = %and.rhs1056
  store i64 %sext1057, ptr %taddr1060, align 8
  %870 = insertvalue %any undef, ptr %taddr1060, 0
  %871 = insertvalue %any %870, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %871, ptr %varargslots1061, align 16
  %872 = insertvalue %"any[]" undef, ptr %varargslots1061, 0
  %"$$temp1062" = insertvalue %"any[]" %872, i64 1, 1
  store %"any[]" %"$$temp1062", ptr %indirectarg1063, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 196, ptr byval(%"any[]") align 8 %indirectarg1063) #6, !dbg !3157
  unreachable, !dbg !3157

panic1066:                                        ; preds = %checkok1064
  store i64 128, ptr %taddr1067, align 8
  %873 = insertvalue %any undef, ptr %taddr1067, 0
  %874 = insertvalue %any %873, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1057, ptr %taddr1068, align 8
  %875 = insertvalue %any undef, ptr %taddr1068, 0
  %876 = insertvalue %any %875, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %874, ptr %varargslots1069, align 16
  %ptradd1070 = getelementptr inbounds i8, ptr %varargslots1069, i64 16
  store %any %876, ptr %ptradd1070, align 16
  %877 = insertvalue %"any[]" undef, ptr %varargslots1069, 0
  %"$$temp1071" = insertvalue %"any[]" %877, i64 2, 1
  store %"any[]" %"$$temp1071", ptr %indirectarg1072, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 196, ptr byval(%"any[]") align 8 %indirectarg1072) #6, !dbg !3157
  unreachable, !dbg !3157

panic1099:                                        ; preds = %if.then1092
  store i64 %sext1097, ptr %taddr1100, align 8
  %878 = insertvalue %any undef, ptr %taddr1100, 0
  %879 = insertvalue %any %878, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %879, ptr %varargslots1101, align 16
  %880 = insertvalue %"any[]" undef, ptr %varargslots1101, 0
  %"$$temp1102" = insertvalue %"any[]" %880, i64 1, 1
  store %"any[]" %"$$temp1102", ptr %indirectarg1103, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 206, ptr byval(%"any[]") align 8 %indirectarg1103) #6, !dbg !3171
  unreachable, !dbg !3171

panic1106:                                        ; preds = %checkok1104
  store i64 128, ptr %taddr1107, align 8
  %881 = insertvalue %any undef, ptr %taddr1107, 0
  %882 = insertvalue %any %881, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1097, ptr %taddr1108, align 8
  %883 = insertvalue %any undef, ptr %taddr1108, 0
  %884 = insertvalue %any %883, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %882, ptr %varargslots1109, align 16
  %ptradd1110 = getelementptr inbounds i8, ptr %varargslots1109, i64 16
  store %any %884, ptr %ptradd1110, align 16
  %885 = insertvalue %"any[]" undef, ptr %varargslots1109, 0
  %"$$temp1111" = insertvalue %"any[]" %885, i64 2, 1
  store %"any[]" %"$$temp1111", ptr %indirectarg1112, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 206, ptr byval(%"any[]") align 8 %indirectarg1112) #6, !dbg !3171
  unreachable, !dbg !3171

panic1117:                                        ; preds = %checkok1113
  store i64 %sext1115, ptr %taddr1118, align 8
  %886 = insertvalue %any undef, ptr %taddr1118, 0
  %887 = insertvalue %any %886, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %887, ptr %varargslots1119, align 16
  %888 = insertvalue %"any[]" undef, ptr %varargslots1119, 0
  %"$$temp1120" = insertvalue %"any[]" %888, i64 1, 1
  store %"any[]" %"$$temp1120", ptr %indirectarg1121, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 206, ptr byval(%"any[]") align 8 %indirectarg1121) #6, !dbg !3172
  unreachable, !dbg !3172

panic1124:                                        ; preds = %checkok1122
  store i64 128, ptr %taddr1125, align 8
  %889 = insertvalue %any undef, ptr %taddr1125, 0
  %890 = insertvalue %any %889, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1115, ptr %taddr1126, align 8
  %891 = insertvalue %any undef, ptr %taddr1126, 0
  %892 = insertvalue %any %891, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %890, ptr %varargslots1127, align 16
  %ptradd1128 = getelementptr inbounds i8, ptr %varargslots1127, i64 16
  store %any %892, ptr %ptradd1128, align 16
  %893 = insertvalue %"any[]" undef, ptr %varargslots1127, 0
  %"$$temp1129" = insertvalue %"any[]" %893, i64 2, 1
  store %"any[]" %"$$temp1129", ptr %indirectarg1130, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 206, ptr byval(%"any[]") align 8 %indirectarg1130) #6, !dbg !3172
  unreachable, !dbg !3172

panic1137:                                        ; preds = %if.exit1134
  store i64 %sext1135, ptr %taddr1138, align 8
  %894 = insertvalue %any undef, ptr %taddr1138, 0
  %895 = insertvalue %any %894, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %895, ptr %varargslots1139, align 16
  %896 = insertvalue %"any[]" undef, ptr %varargslots1139, 0
  %"$$temp1140" = insertvalue %"any[]" %896, i64 1, 1
  store %"any[]" %"$$temp1140", ptr %indirectarg1141, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 208, ptr byval(%"any[]") align 8 %indirectarg1141) #6, !dbg !3174
  unreachable, !dbg !3174

panic1144:                                        ; preds = %checkok1142
  store i64 128, ptr %taddr1145, align 8
  %897 = insertvalue %any undef, ptr %taddr1145, 0
  %898 = insertvalue %any %897, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1135, ptr %taddr1146, align 8
  %899 = insertvalue %any undef, ptr %taddr1146, 0
  %900 = insertvalue %any %899, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %898, ptr %varargslots1147, align 16
  %ptradd1148 = getelementptr inbounds i8, ptr %varargslots1147, i64 16
  store %any %900, ptr %ptradd1148, align 16
  %901 = insertvalue %"any[]" undef, ptr %varargslots1147, 0
  %"$$temp1149" = insertvalue %"any[]" %901, i64 2, 1
  store %"any[]" %"$$temp1149", ptr %indirectarg1150, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 208, ptr byval(%"any[]") align 8 %indirectarg1150) #6, !dbg !3174
  unreachable, !dbg !3174

panic1166:                                        ; preds = %or.rhs1163
  store i64 %sext1164, ptr %taddr1167, align 8
  %902 = insertvalue %any undef, ptr %taddr1167, 0
  %903 = insertvalue %any %902, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %903, ptr %varargslots1168, align 16
  %904 = insertvalue %"any[]" undef, ptr %varargslots1168, 0
  %"$$temp1169" = insertvalue %"any[]" %904, i64 1, 1
  store %"any[]" %"$$temp1169", ptr %indirectarg1170, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 221, ptr byval(%"any[]") align 8 %indirectarg1170) #6, !dbg !3195
  unreachable, !dbg !3195

panic1173:                                        ; preds = %checkok1171
  store i64 128, ptr %taddr1174, align 8
  %905 = insertvalue %any undef, ptr %taddr1174, 0
  %906 = insertvalue %any %905, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1164, ptr %taddr1175, align 8
  %907 = insertvalue %any undef, ptr %taddr1175, 0
  %908 = insertvalue %any %907, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %906, ptr %varargslots1176, align 16
  %ptradd1177 = getelementptr inbounds i8, ptr %varargslots1176, i64 16
  store %any %908, ptr %ptradd1177, align 16
  %909 = insertvalue %"any[]" undef, ptr %varargslots1176, 0
  %"$$temp1178" = insertvalue %"any[]" %909, i64 2, 1
  store %"any[]" %"$$temp1178", ptr %indirectarg1179, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 221, ptr byval(%"any[]") align 8 %indirectarg1179) #6, !dbg !3195
  unreachable, !dbg !3195

panic1184:                                        ; preds = %checkok1180
  store i64 %sext1182, ptr %taddr1185, align 8
  %910 = insertvalue %any undef, ptr %taddr1185, 0
  %911 = insertvalue %any %910, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %911, ptr %varargslots1186, align 16
  %912 = insertvalue %"any[]" undef, ptr %varargslots1186, 0
  %"$$temp1187" = insertvalue %"any[]" %912, i64 1, 1
  store %"any[]" %"$$temp1187", ptr %indirectarg1188, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 221, ptr byval(%"any[]") align 8 %indirectarg1188) #6, !dbg !3196
  unreachable, !dbg !3196

panic1191:                                        ; preds = %checkok1189
  store i64 2, ptr %taddr1192, align 8
  %913 = insertvalue %any undef, ptr %taddr1192, 0
  %914 = insertvalue %any %913, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1182, ptr %taddr1193, align 8
  %915 = insertvalue %any undef, ptr %taddr1193, 0
  %916 = insertvalue %any %915, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %914, ptr %varargslots1194, align 16
  %ptradd1195 = getelementptr inbounds i8, ptr %varargslots1194, i64 16
  store %any %916, ptr %ptradd1195, align 16
  %917 = insertvalue %"any[]" undef, ptr %varargslots1194, 0
  %"$$temp1196" = insertvalue %"any[]" %917, i64 2, 1
  store %"any[]" %"$$temp1196", ptr %indirectarg1197, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 221, ptr byval(%"any[]") align 8 %indirectarg1197) #6, !dbg !3196
  unreachable, !dbg !3196

panic1209:                                        ; preds = %if.exit1204
  store i64 %sext1207, ptr %taddr1210, align 8
  %918 = insertvalue %any undef, ptr %taddr1210, 0
  %919 = insertvalue %any %918, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %919, ptr %varargslots1211, align 16
  %920 = insertvalue %"any[]" undef, ptr %varargslots1211, 0
  %"$$temp1212" = insertvalue %"any[]" %920, i64 1, 1
  store %"any[]" %"$$temp1212", ptr %indirectarg1213, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 226, ptr byval(%"any[]") align 8 %indirectarg1213) #6, !dbg !3201
  unreachable, !dbg !3201

panic1216:                                        ; preds = %checkok1214
  store i64 128, ptr %taddr1217, align 8
  %921 = insertvalue %any undef, ptr %taddr1217, 0
  %922 = insertvalue %any %921, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1207, ptr %taddr1218, align 8
  %923 = insertvalue %any undef, ptr %taddr1218, 0
  %924 = insertvalue %any %923, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %922, ptr %varargslots1219, align 16
  %ptradd1220 = getelementptr inbounds i8, ptr %varargslots1219, i64 16
  store %any %924, ptr %ptradd1220, align 16
  %925 = insertvalue %"any[]" undef, ptr %varargslots1219, 0
  %"$$temp1221" = insertvalue %"any[]" %925, i64 2, 1
  store %"any[]" %"$$temp1221", ptr %indirectarg1222, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 226, ptr byval(%"any[]") align 8 %indirectarg1222) #6, !dbg !3201
  unreachable, !dbg !3201

panic1227:                                        ; preds = %checkok1223
  store i64 %sext1225, ptr %taddr1228, align 8
  %926 = insertvalue %any undef, ptr %taddr1228, 0
  %927 = insertvalue %any %926, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %927, ptr %varargslots1229, align 16
  %928 = insertvalue %"any[]" undef, ptr %varargslots1229, 0
  %"$$temp1230" = insertvalue %"any[]" %928, i64 1, 1
  store %"any[]" %"$$temp1230", ptr %indirectarg1231, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 226, ptr byval(%"any[]") align 8 %indirectarg1231) #6, !dbg !3203
  unreachable, !dbg !3203

panic1234:                                        ; preds = %checkok1232
  store i64 2, ptr %taddr1235, align 8
  %929 = insertvalue %any undef, ptr %taddr1235, 0
  %930 = insertvalue %any %929, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1225, ptr %taddr1236, align 8
  %931 = insertvalue %any undef, ptr %taddr1236, 0
  %932 = insertvalue %any %931, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %930, ptr %varargslots1237, align 16
  %ptradd1238 = getelementptr inbounds i8, ptr %varargslots1237, i64 16
  store %any %932, ptr %ptradd1238, align 16
  %933 = insertvalue %"any[]" undef, ptr %varargslots1237, 0
  %"$$temp1239" = insertvalue %"any[]" %933, i64 2, 1
  store %"any[]" %"$$temp1239", ptr %indirectarg1240, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 226, ptr byval(%"any[]") align 8 %indirectarg1240) #6, !dbg !3203
  unreachable, !dbg !3203

panic1265:                                        ; preds = %loop.body1261
  store i64 %sext1263, ptr %taddr1266, align 8
  %934 = insertvalue %any undef, ptr %taddr1266, 0
  %935 = insertvalue %any %934, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %935, ptr %varargslots1267, align 16
  %936 = insertvalue %"any[]" undef, ptr %varargslots1267, 0
  %"$$temp1268" = insertvalue %"any[]" %936, i64 1, 1
  store %"any[]" %"$$temp1268", ptr %indirectarg1269, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 233, ptr byval(%"any[]") align 8 %indirectarg1269) #6, !dbg !3221
  unreachable, !dbg !3221

panic1272:                                        ; preds = %checkok1270
  store i64 128, ptr %taddr1273, align 8
  %937 = insertvalue %any undef, ptr %taddr1273, 0
  %938 = insertvalue %any %937, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1263, ptr %taddr1274, align 8
  %939 = insertvalue %any undef, ptr %taddr1274, 0
  %940 = insertvalue %any %939, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %938, ptr %varargslots1275, align 16
  %ptradd1276 = getelementptr inbounds i8, ptr %varargslots1275, i64 16
  store %any %940, ptr %ptradd1276, align 16
  %941 = insertvalue %"any[]" undef, ptr %varargslots1275, 0
  %"$$temp1277" = insertvalue %"any[]" %941, i64 2, 1
  store %"any[]" %"$$temp1277", ptr %indirectarg1278, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 233, ptr byval(%"any[]") align 8 %indirectarg1278) #6, !dbg !3221
  unreachable, !dbg !3221

panic1281:                                        ; preds = %checkok1279
  store i32 %497, ptr %taddr1282, align 4
  %942 = insertvalue %any undef, ptr %taddr1282, 0
  %943 = insertvalue %any %942, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %943, ptr %varargslots1283, align 16
  %944 = insertvalue %"any[]" undef, ptr %varargslots1283, 0
  %"$$temp1284" = insertvalue %"any[]" %944, i64 1, 1
  store %"any[]" %"$$temp1284", ptr %indirectarg1285, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 35, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 233, ptr byval(%"any[]") align 8 %indirectarg1285) #6, !dbg !3223
  unreachable, !dbg !3223

panic1288:                                        ; preds = %checkok1286
  store i32 %497, ptr %taddr1289, align 4
  %945 = insertvalue %any undef, ptr %taddr1289, 0
  %946 = insertvalue %any %945, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %946, ptr %varargslots1290, align 16
  %947 = insertvalue %"any[]" undef, ptr %varargslots1290, 0
  %"$$temp1291" = insertvalue %"any[]" %947, i64 1, 1
  store %"any[]" %"$$temp1291", ptr %indirectarg1292, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 35, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 233, ptr byval(%"any[]") align 8 %indirectarg1292) #6, !dbg !3223
  unreachable, !dbg !3223

panic1299:                                        ; preds = %checkok1293
  store i64 %sext1297, ptr %taddr1300, align 8
  %948 = insertvalue %any undef, ptr %taddr1300, 0
  %949 = insertvalue %any %948, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %949, ptr %varargslots1301, align 16
  %950 = insertvalue %"any[]" undef, ptr %varargslots1301, 0
  %"$$temp1302" = insertvalue %"any[]" %950, i64 1, 1
  store %"any[]" %"$$temp1302", ptr %indirectarg1303, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1303) #6, !dbg !3225
  unreachable, !dbg !3225

panic1306:                                        ; preds = %checkok1304
  store i64 128, ptr %taddr1307, align 8
  %951 = insertvalue %any undef, ptr %taddr1307, 0
  %952 = insertvalue %any %951, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1297, ptr %taddr1308, align 8
  %953 = insertvalue %any undef, ptr %taddr1308, 0
  %954 = insertvalue %any %953, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %952, ptr %varargslots1309, align 16
  %ptradd1310 = getelementptr inbounds i8, ptr %varargslots1309, i64 16
  store %any %954, ptr %ptradd1310, align 16
  %955 = insertvalue %"any[]" undef, ptr %varargslots1309, 0
  %"$$temp1311" = insertvalue %"any[]" %955, i64 2, 1
  store %"any[]" %"$$temp1311", ptr %indirectarg1312, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1312) #6, !dbg !3225
  unreachable, !dbg !3225

panic1317:                                        ; preds = %checkok1313
  store i64 %sext1315, ptr %taddr1318, align 8
  %956 = insertvalue %any undef, ptr %taddr1318, 0
  %957 = insertvalue %any %956, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %957, ptr %varargslots1319, align 16
  %958 = insertvalue %"any[]" undef, ptr %varargslots1319, 0
  %"$$temp1320" = insertvalue %"any[]" %958, i64 1, 1
  store %"any[]" %"$$temp1320", ptr %indirectarg1321, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1321) #6, !dbg !3226
  unreachable, !dbg !3226

panic1324:                                        ; preds = %checkok1322
  store i64 128, ptr %taddr1325, align 8
  %959 = insertvalue %any undef, ptr %taddr1325, 0
  %960 = insertvalue %any %959, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1315, ptr %taddr1326, align 8
  %961 = insertvalue %any undef, ptr %taddr1326, 0
  %962 = insertvalue %any %961, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %960, ptr %varargslots1327, align 16
  %ptradd1328 = getelementptr inbounds i8, ptr %varargslots1327, i64 16
  store %any %962, ptr %ptradd1328, align 16
  %963 = insertvalue %"any[]" undef, ptr %varargslots1327, 0
  %"$$temp1329" = insertvalue %"any[]" %963, i64 2, 1
  store %"any[]" %"$$temp1329", ptr %indirectarg1330, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1330) #6, !dbg !3226
  unreachable, !dbg !3226

panic1334:                                        ; preds = %checkok1331
  store i32 %508, ptr %taddr1335, align 4
  %964 = insertvalue %any undef, ptr %taddr1335, 0
  %965 = insertvalue %any %964, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %965, ptr %varargslots1336, align 16
  %966 = insertvalue %"any[]" undef, ptr %varargslots1336, 0
  %"$$temp1337" = insertvalue %"any[]" %966, i64 1, 1
  store %"any[]" %"$$temp1337", ptr %indirectarg1338, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 35, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1338) #6, !dbg !3228
  unreachable, !dbg !3228

panic1343:                                        ; preds = %checkok1339
  store i32 %512, ptr %taddr1344, align 4
  %967 = insertvalue %any undef, ptr %taddr1344, 0
  %968 = insertvalue %any %967, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %968, ptr %varargslots1345, align 16
  %969 = insertvalue %"any[]" undef, ptr %varargslots1345, 0
  %"$$temp1346" = insertvalue %"any[]" %969, i64 1, 1
  store %"any[]" %"$$temp1346", ptr %indirectarg1347, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 35, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 235, ptr byval(%"any[]") align 8 %indirectarg1347) #6, !dbg !3231
  unreachable, !dbg !3231

panic1350:                                        ; preds = %checkok1348
  store i32 %512, ptr %taddr1351, align 4
  %970 = insertvalue %any undef, ptr %taddr1351, 0
  %971 = insertvalue %any %970, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %971, ptr %varargslots1352, align 16
  %972 = insertvalue %"any[]" undef, ptr %varargslots1352, 0
  %"$$temp1353" = insertvalue %"any[]" %972, i64 1, 1
  store %"any[]" %"$$temp1353", ptr %indirectarg1354, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 35, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 235, ptr byval(%"any[]") align 8 %indirectarg1354) #6, !dbg !3231
  unreachable, !dbg !3231

panic1361:                                        ; preds = %and.rhs1358
  store i64 %sext1359, ptr %taddr1362, align 8
  %973 = insertvalue %any undef, ptr %taddr1362, 0
  %974 = insertvalue %any %973, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %974, ptr %varargslots1363, align 16
  %975 = insertvalue %"any[]" undef, ptr %varargslots1363, 0
  %"$$temp1364" = insertvalue %"any[]" %975, i64 1, 1
  store %"any[]" %"$$temp1364", ptr %indirectarg1365, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 236, ptr byval(%"any[]") align 8 %indirectarg1365) #6, !dbg !3235
  unreachable, !dbg !3235

panic1368:                                        ; preds = %checkok1366
  store i64 128, ptr %taddr1369, align 8
  %976 = insertvalue %any undef, ptr %taddr1369, 0
  %977 = insertvalue %any %976, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1359, ptr %taddr1370, align 8
  %978 = insertvalue %any undef, ptr %taddr1370, 0
  %979 = insertvalue %any %978, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %977, ptr %varargslots1371, align 16
  %ptradd1372 = getelementptr inbounds i8, ptr %varargslots1371, i64 16
  store %any %979, ptr %ptradd1372, align 16
  %980 = insertvalue %"any[]" undef, ptr %varargslots1371, 0
  %"$$temp1373" = insertvalue %"any[]" %980, i64 2, 1
  store %"any[]" %"$$temp1373", ptr %indirectarg1374, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 236, ptr byval(%"any[]") align 8 %indirectarg1374) #6, !dbg !3235
  unreachable, !dbg !3235

panic1397:                                        ; preds = %if.then1394
  store i64 %sext1395, ptr %taddr1398, align 8
  %981 = insertvalue %any undef, ptr %taddr1398, 0
  %982 = insertvalue %any %981, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %982, ptr %varargslots1399, align 16
  %983 = insertvalue %"any[]" undef, ptr %varargslots1399, 0
  %"$$temp1400" = insertvalue %"any[]" %983, i64 1, 1
  store %"any[]" %"$$temp1400", ptr %indirectarg1401, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 247, ptr byval(%"any[]") align 8 %indirectarg1401) #6, !dbg !3245
  unreachable, !dbg !3245

panic1404:                                        ; preds = %checkok1402
  store i64 128, ptr %taddr1405, align 8
  %984 = insertvalue %any undef, ptr %taddr1405, 0
  %985 = insertvalue %any %984, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1395, ptr %taddr1406, align 8
  %986 = insertvalue %any undef, ptr %taddr1406, 0
  %987 = insertvalue %any %986, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %985, ptr %varargslots1407, align 16
  %ptradd1408 = getelementptr inbounds i8, ptr %varargslots1407, i64 16
  store %any %987, ptr %ptradd1408, align 16
  %988 = insertvalue %"any[]" undef, ptr %varargslots1407, 0
  %"$$temp1409" = insertvalue %"any[]" %988, i64 2, 1
  store %"any[]" %"$$temp1409", ptr %indirectarg1410, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 247, ptr byval(%"any[]") align 8 %indirectarg1410) #6, !dbg !3245
  unreachable, !dbg !3245

panic1420:                                        ; preds = %if.else1415
  store i64 %sext1418, ptr %taddr1421, align 8
  %989 = insertvalue %any undef, ptr %taddr1421, 0
  %990 = insertvalue %any %989, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %990, ptr %varargslots1422, align 16
  %991 = insertvalue %"any[]" undef, ptr %varargslots1422, 0
  %"$$temp1423" = insertvalue %"any[]" %991, i64 1, 1
  store %"any[]" %"$$temp1423", ptr %indirectarg1424, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 252, ptr byval(%"any[]") align 8 %indirectarg1424) #6, !dbg !3249
  unreachable, !dbg !3249

panic1427:                                        ; preds = %checkok1425
  store i64 128, ptr %taddr1428, align 8
  %992 = insertvalue %any undef, ptr %taddr1428, 0
  %993 = insertvalue %any %992, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1418, ptr %taddr1429, align 8
  %994 = insertvalue %any undef, ptr %taddr1429, 0
  %995 = insertvalue %any %994, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %993, ptr %varargslots1430, align 16
  %ptradd1431 = getelementptr inbounds i8, ptr %varargslots1430, i64 16
  store %any %995, ptr %ptradd1431, align 16
  %996 = insertvalue %"any[]" undef, ptr %varargslots1430, 0
  %"$$temp1432" = insertvalue %"any[]" %996, i64 2, 1
  store %"any[]" %"$$temp1432", ptr %indirectarg1433, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 252, ptr byval(%"any[]") align 8 %indirectarg1433) #6, !dbg !3249
  unreachable, !dbg !3249

panic1454:                                        ; preds = %if.then1448
  store i64 %sext1452, ptr %taddr1455, align 8
  %997 = insertvalue %any undef, ptr %taddr1455, 0
  %998 = insertvalue %any %997, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %998, ptr %varargslots1456, align 16
  %999 = insertvalue %"any[]" undef, ptr %varargslots1456, 0
  %"$$temp1457" = insertvalue %"any[]" %999, i64 1, 1
  store %"any[]" %"$$temp1457", ptr %indirectarg1458, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 262, ptr byval(%"any[]") align 8 %indirectarg1458) #6, !dbg !3264
  unreachable, !dbg !3264

panic1461:                                        ; preds = %checkok1459
  store i64 128, ptr %taddr1462, align 8
  %1000 = insertvalue %any undef, ptr %taddr1462, 0
  %1001 = insertvalue %any %1000, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1452, ptr %taddr1463, align 8
  %1002 = insertvalue %any undef, ptr %taddr1463, 0
  %1003 = insertvalue %any %1002, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1001, ptr %varargslots1464, align 16
  %ptradd1465 = getelementptr inbounds i8, ptr %varargslots1464, i64 16
  store %any %1003, ptr %ptradd1465, align 16
  %1004 = insertvalue %"any[]" undef, ptr %varargslots1464, 0
  %"$$temp1466" = insertvalue %"any[]" %1004, i64 2, 1
  store %"any[]" %"$$temp1466", ptr %indirectarg1467, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 262, ptr byval(%"any[]") align 8 %indirectarg1467) #6, !dbg !3264
  unreachable, !dbg !3264

panic1476:                                        ; preds = %if.exit1470
  store i64 %sext1474, ptr %taddr1477, align 8
  %1005 = insertvalue %any undef, ptr %taddr1477, 0
  %1006 = insertvalue %any %1005, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1006, ptr %varargslots1478, align 16
  %1007 = insertvalue %"any[]" undef, ptr %varargslots1478, 0
  %"$$temp1479" = insertvalue %"any[]" %1007, i64 1, 1
  store %"any[]" %"$$temp1479", ptr %indirectarg1480, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 263, ptr byval(%"any[]") align 8 %indirectarg1480) #6, !dbg !3268
  unreachable, !dbg !3268

panic1483:                                        ; preds = %checkok1481
  store i64 128, ptr %taddr1484, align 8
  %1008 = insertvalue %any undef, ptr %taddr1484, 0
  %1009 = insertvalue %any %1008, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1474, ptr %taddr1485, align 8
  %1010 = insertvalue %any undef, ptr %taddr1485, 0
  %1011 = insertvalue %any %1010, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1009, ptr %varargslots1486, align 16
  %ptradd1487 = getelementptr inbounds i8, ptr %varargslots1486, i64 16
  store %any %1011, ptr %ptradd1487, align 16
  %1012 = insertvalue %"any[]" undef, ptr %varargslots1486, 0
  %"$$temp1488" = insertvalue %"any[]" %1012, i64 2, 1
  store %"any[]" %"$$temp1488", ptr %indirectarg1489, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 263, ptr byval(%"any[]") align 8 %indirectarg1489) #6, !dbg !3268
  unreachable, !dbg !3268

panic1526:                                        ; preds = %if.then1513
  %1013 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3305
  call void %1013(ptr @.panic_msg.102, i64 10, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 284) #6, !dbg !3305
  unreachable, !dbg !3305

panic1539:                                        ; preds = %if.then1534
  store i64 %sext1537, ptr %taddr1540, align 8
  %1014 = insertvalue %any undef, ptr %taddr1540, 0
  %1015 = insertvalue %any %1014, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1015, ptr %varargslots1541, align 16
  %1016 = insertvalue %"any[]" undef, ptr %varargslots1541, 0
  %"$$temp1542" = insertvalue %"any[]" %1016, i64 1, 1
  store %"any[]" %"$$temp1542", ptr %indirectarg1543, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 292, ptr byval(%"any[]") align 8 %indirectarg1543) #6, !dbg !3322
  unreachable, !dbg !3322

panic1546:                                        ; preds = %checkok1544
  store i64 128, ptr %taddr1547, align 8
  %1017 = insertvalue %any undef, ptr %taddr1547, 0
  %1018 = insertvalue %any %1017, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1537, ptr %taddr1548, align 8
  %1019 = insertvalue %any undef, ptr %taddr1548, 0
  %1020 = insertvalue %any %1019, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1018, ptr %varargslots1549, align 16
  %ptradd1550 = getelementptr inbounds i8, ptr %varargslots1549, i64 16
  store %any %1020, ptr %ptradd1550, align 16
  %1021 = insertvalue %"any[]" undef, ptr %varargslots1549, 0
  %"$$temp1551" = insertvalue %"any[]" %1021, i64 2, 1
  store %"any[]" %"$$temp1551", ptr %indirectarg1552, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.92, i64 9, i32 292, ptr byval(%"any[]") align 8 %indirectarg1552) #6, !dbg !3322
  unreachable, !dbg !3322
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_float(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3383 {
entry:
  %self = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %chars = alloca %"char[]", align 8
  %blockret = alloca float, align 4
  %sign = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots8 = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca i64, align 8
  %varargslots32 = alloca [2 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %cmp.idx46 = alloca i64, align 8
  %cmp.idx60 = alloca i64, align 8
  %cmp.idx72 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %varargslots93 = alloca [2 x %any], align 16
  %indirectarg96 = alloca %"any[]", align 8
  %taddr105 = alloca i64, align 8
  %taddr106 = alloca i64, align 8
  %varargslots107 = alloca [2 x %any], align 16
  %indirectarg110 = alloca %"any[]", align 8
  %taddr119 = alloca i64, align 8
  %taddr120 = alloca i64, align 8
  %varargslots121 = alloca [2 x %any], align 16
  %indirectarg124 = alloca %"any[]", align 8
  %chars128 = alloca %"char[]", align 8
  %sign129 = alloca i32, align 4
  %blockret130 = alloca double, align 8
  %scale = alloca double, align 8
  %x = alloca i32, align 4
  %rp = alloca i64, align 8
  %dc = alloca i64, align 8
  %c = alloca i8, align 1
  %got_rad = alloca i8, align 1
  %got_digit = alloca i8, align 1
  %got_tail = alloca i8, align 1
  %len = alloca i64, align 8
  %last_char = alloca i64, align 8
  %index = alloca i64, align 8
  %y = alloca double, align 8
  %taddr136 = alloca i64, align 8
  %taddr137 = alloca i64, align 8
  %varargslots138 = alloca [2 x %any], align 16
  %indirectarg141 = alloca %"any[]", align 8
  %taddr165 = alloca i64, align 8
  %taddr166 = alloca i64, align 8
  %varargslots167 = alloca [2 x %any], align 16
  %indirectarg170 = alloca %"any[]", align 8
  %taddr185 = alloca i64, align 8
  %taddr186 = alloca i64, align 8
  %varargslots187 = alloca [2 x %any], align 16
  %indirectarg190 = alloca %"any[]", align 8
  %d = alloca i32, align 4
  %switch229 = alloca i8, align 1
  %taddr261 = alloca i64, align 8
  %taddr262 = alloca i64, align 8
  %varargslots263 = alloca [2 x %any], align 16
  %indirectarg266 = alloca %"any[]", align 8
  %e2 = alloca i64, align 8
  %e2val = alloca i64, align 8
  %taddr291 = alloca i64, align 8
  %taddr292 = alloca i64, align 8
  %varargslots293 = alloca [2 x %any], align 16
  %indirectarg296 = alloca %"any[]", align 8
  %taddr299 = alloca i64, align 8
  %varargslots300 = alloca [1 x %any], align 16
  %indirectarg302 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %error_var = alloca i64, align 8
  %bits = alloca i32, align 4
  %bias = alloca double, align 8
  %x347 = alloca double, align 8
  %n = alloca i32, align 4
  %mag = alloca double, align 8
  %sgn = alloca double, align 8
  %x351 = alloca double, align 8
  %y352 = alloca double, align 8
  %x377 = alloca double, align 8
  %n379 = alloca i32, align 4
  %chars382 = alloca %"char[]", align 8
  %sign383 = alloca i32, align 4
  %blockret384 = alloca double, align 8
  %x387 = alloca [128 x i32], align 16
  %emax = alloca i32, align 4
  %index388 = alloca i64, align 8
  %got_digit389 = alloca i8, align 1
  %taddr393 = alloca i64, align 8
  %taddr394 = alloca i64, align 8
  %varargslots395 = alloca [2 x %any], align 16
  %indirectarg398 = alloca %"any[]", align 8
  %got_rad401 = alloca i8, align 1
  %lrp = alloca i64, align 8
  %dc402 = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %lnz = alloca i32, align 4
  %len403 = alloca i64, align 8
  %last_char405 = alloca i64, align 8
  %c410 = alloca i8, align 1
  %taddr415 = alloca i64, align 8
  %taddr416 = alloca i64, align 8
  %varargslots417 = alloca [2 x %any], align 16
  %indirectarg420 = alloca %"any[]", align 8
  %taddr448 = alloca i64, align 8
  %taddr449 = alloca i64, align 8
  %varargslots450 = alloca [2 x %any], align 16
  %indirectarg453 = alloca %"any[]", align 8
  %taddr468 = alloca i64, align 8
  %taddr469 = alloca i64, align 8
  %varargslots470 = alloca [2 x %any], align 16
  %indirectarg473 = alloca %"any[]", align 8
  %switch493 = alloca i8, align 1
  %taddr513 = alloca i64, align 8
  %varargslots514 = alloca [1 x %any], align 16
  %indirectarg516 = alloca %"any[]", align 8
  %taddr520 = alloca i64, align 8
  %taddr521 = alloca i64, align 8
  %varargslots522 = alloca [2 x %any], align 16
  %indirectarg525 = alloca %"any[]", align 8
  %taddr530 = alloca i64, align 8
  %varargslots531 = alloca [1 x %any], align 16
  %indirectarg533 = alloca %"any[]", align 8
  %taddr537 = alloca i64, align 8
  %taddr538 = alloca i64, align 8
  %varargslots539 = alloca [2 x %any], align 16
  %indirectarg542 = alloca %"any[]", align 8
  %taddr553 = alloca i64, align 8
  %varargslots554 = alloca [1 x %any], align 16
  %indirectarg556 = alloca %"any[]", align 8
  %taddr560 = alloca i64, align 8
  %taddr561 = alloca i64, align 8
  %varargslots562 = alloca [2 x %any], align 16
  %indirectarg565 = alloca %"any[]", align 8
  %taddr594 = alloca i64, align 8
  %taddr595 = alloca i64, align 8
  %varargslots596 = alloca [2 x %any], align 16
  %indirectarg599 = alloca %"any[]", align 8
  %e10 = alloca i64, align 8
  %taddr621 = alloca i64, align 8
  %taddr622 = alloca i64, align 8
  %varargslots623 = alloca [2 x %any], align 16
  %indirectarg626 = alloca %"any[]", align 8
  %taddr630 = alloca i64, align 8
  %varargslots631 = alloca [1 x %any], align 16
  %indirectarg633 = alloca %"any[]", align 8
  %retparam637 = alloca i64, align 8
  %error_var641 = alloca i64, align 8
  %taddr687 = alloca i64, align 8
  %varargslots688 = alloca [1 x %any], align 16
  %indirectarg690 = alloca %"any[]", align 8
  %taddr694 = alloca i64, align 8
  %taddr695 = alloca i64, align 8
  %varargslots696 = alloca [2 x %any], align 16
  %indirectarg699 = alloca %"any[]", align 8
  %a = alloca i32, align 4
  %z = alloca i32, align 4
  %e2707 = alloca i32, align 4
  %rp708 = alloca i64, align 8
  %taddr733 = alloca i64, align 8
  %varargslots734 = alloca [1 x %any], align 16
  %indirectarg736 = alloca %"any[]", align 8
  %taddr740 = alloca i64, align 8
  %taddr741 = alloca i64, align 8
  %varargslots742 = alloca [2 x %any], align 16
  %indirectarg745 = alloca %"any[]", align 8
  %bitlim = alloca i32, align 4
  %taddr760 = alloca i32, align 4
  %varargslots761 = alloca [1 x %any], align 16
  %indirectarg763 = alloca %"any[]", align 8
  %taddr776 = alloca i64, align 8
  %varargslots777 = alloca [1 x %any], align 16
  %indirectarg779 = alloca %"any[]", align 8
  %taddr783 = alloca i64, align 8
  %taddr784 = alloca i64, align 8
  %varargslots785 = alloca [2 x %any], align 16
  %indirectarg788 = alloca %"any[]", align 8
  %rpm9 = alloca i64, align 8
  %p10 = alloca i32, align 4
  %taddr808 = alloca i64, align 8
  %varargslots809 = alloca [1 x %any], align 16
  %indirectarg811 = alloca %"any[]", align 8
  %taddr815 = alloca i64, align 8
  %taddr816 = alloca i64, align 8
  %varargslots817 = alloca [2 x %any], align 16
  %indirectarg820 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %tmp = alloca i32, align 4
  %taddr829 = alloca i64, align 8
  %varargslots830 = alloca [1 x %any], align 16
  %indirectarg832 = alloca %"any[]", align 8
  %taddr836 = alloca i64, align 8
  %taddr837 = alloca i64, align 8
  %varargslots838 = alloca [2 x %any], align 16
  %indirectarg841 = alloca %"any[]", align 8
  %taddr851 = alloca i64, align 8
  %varargslots852 = alloca [1 x %any], align 16
  %indirectarg854 = alloca %"any[]", align 8
  %taddr858 = alloca i64, align 8
  %taddr859 = alloca i64, align 8
  %varargslots860 = alloca [2 x %any], align 16
  %indirectarg863 = alloca %"any[]", align 8
  %taddr869 = alloca i64, align 8
  %varargslots870 = alloca [1 x %any], align 16
  %indirectarg872 = alloca %"any[]", align 8
  %taddr876 = alloca i64, align 8
  %taddr877 = alloca i64, align 8
  %varargslots878 = alloca [2 x %any], align 16
  %indirectarg881 = alloca %"any[]", align 8
  %taddr898 = alloca i64, align 8
  %varargslots899 = alloca [1 x %any], align 16
  %indirectarg901 = alloca %"any[]", align 8
  %taddr905 = alloca i64, align 8
  %taddr906 = alloca i64, align 8
  %varargslots907 = alloca [2 x %any], align 16
  %indirectarg910 = alloca %"any[]", align 8
  %taddr929 = alloca i64, align 8
  %varargslots930 = alloca [1 x %any], align 16
  %indirectarg932 = alloca %"any[]", align 8
  %taddr936 = alloca i64, align 8
  %taddr937 = alloca i64, align 8
  %varargslots938 = alloca [2 x %any], align 16
  %indirectarg941 = alloca %"any[]", align 8
  %taddr956 = alloca i64, align 8
  %varargslots957 = alloca [1 x %any], align 16
  %indirectarg959 = alloca %"any[]", align 8
  %taddr963 = alloca i64, align 8
  %taddr964 = alloca i64, align 8
  %varargslots965 = alloca [2 x %any], align 16
  %indirectarg968 = alloca %"any[]", align 8
  %carry977 = alloca i32, align 4
  %tmp982 = alloca i64, align 8
  %taddr986 = alloca i64, align 8
  %varargslots987 = alloca [1 x %any], align 16
  %indirectarg989 = alloca %"any[]", align 8
  %taddr993 = alloca i64, align 8
  %taddr994 = alloca i64, align 8
  %varargslots995 = alloca [2 x %any], align 16
  %indirectarg998 = alloca %"any[]", align 8
  %taddr1011 = alloca i64, align 8
  %varargslots1012 = alloca [1 x %any], align 16
  %indirectarg1014 = alloca %"any[]", align 8
  %taddr1018 = alloca i64, align 8
  %taddr1019 = alloca i64, align 8
  %varargslots1020 = alloca [2 x %any], align 16
  %indirectarg1023 = alloca %"any[]", align 8
  %taddr1032 = alloca i64, align 8
  %varargslots1033 = alloca [1 x %any], align 16
  %indirectarg1035 = alloca %"any[]", align 8
  %taddr1039 = alloca i64, align 8
  %taddr1040 = alloca i64, align 8
  %varargslots1041 = alloca [2 x %any], align 16
  %indirectarg1044 = alloca %"any[]", align 8
  %taddr1060 = alloca i64, align 8
  %varargslots1061 = alloca [1 x %any], align 16
  %indirectarg1063 = alloca %"any[]", align 8
  %taddr1067 = alloca i64, align 8
  %taddr1068 = alloca i64, align 8
  %varargslots1069 = alloca [2 x %any], align 16
  %indirectarg1072 = alloca %"any[]", align 8
  %taddr1100 = alloca i64, align 8
  %varargslots1101 = alloca [1 x %any], align 16
  %indirectarg1103 = alloca %"any[]", align 8
  %taddr1107 = alloca i64, align 8
  %taddr1108 = alloca i64, align 8
  %varargslots1109 = alloca [2 x %any], align 16
  %indirectarg1112 = alloca %"any[]", align 8
  %taddr1118 = alloca i64, align 8
  %varargslots1119 = alloca [1 x %any], align 16
  %indirectarg1121 = alloca %"any[]", align 8
  %taddr1125 = alloca i64, align 8
  %taddr1126 = alloca i64, align 8
  %varargslots1127 = alloca [2 x %any], align 16
  %indirectarg1130 = alloca %"any[]", align 8
  %taddr1138 = alloca i64, align 8
  %varargslots1139 = alloca [1 x %any], align 16
  %indirectarg1141 = alloca %"any[]", align 8
  %taddr1145 = alloca i64, align 8
  %taddr1146 = alloca i64, align 8
  %varargslots1147 = alloca [2 x %any], align 16
  %indirectarg1150 = alloca %"any[]", align 8
  %carry1156 = alloca i32, align 4
  %sh = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr1167 = alloca i64, align 8
  %varargslots1168 = alloca [1 x %any], align 16
  %indirectarg1170 = alloca %"any[]", align 8
  %taddr1174 = alloca i64, align 8
  %taddr1175 = alloca i64, align 8
  %varargslots1176 = alloca [2 x %any], align 16
  %indirectarg1179 = alloca %"any[]", align 8
  %taddr1185 = alloca i64, align 8
  %varargslots1186 = alloca [1 x %any], align 16
  %indirectarg1188 = alloca %"any[]", align 8
  %taddr1192 = alloca i64, align 8
  %taddr1193 = alloca i64, align 8
  %varargslots1194 = alloca [2 x %any], align 16
  %indirectarg1197 = alloca %"any[]", align 8
  %taddr1210 = alloca i64, align 8
  %varargslots1211 = alloca [1 x %any], align 16
  %indirectarg1213 = alloca %"any[]", align 8
  %taddr1217 = alloca i64, align 8
  %taddr1218 = alloca i64, align 8
  %varargslots1219 = alloca [2 x %any], align 16
  %indirectarg1222 = alloca %"any[]", align 8
  %taddr1228 = alloca i64, align 8
  %varargslots1229 = alloca [1 x %any], align 16
  %indirectarg1231 = alloca %"any[]", align 8
  %taddr1235 = alloca i64, align 8
  %taddr1236 = alloca i64, align 8
  %varargslots1237 = alloca [2 x %any], align 16
  %indirectarg1240 = alloca %"any[]", align 8
  %tmp1262 = alloca i32, align 4
  %taddr1266 = alloca i64, align 8
  %varargslots1267 = alloca [1 x %any], align 16
  %indirectarg1269 = alloca %"any[]", align 8
  %taddr1273 = alloca i64, align 8
  %taddr1274 = alloca i64, align 8
  %varargslots1275 = alloca [2 x %any], align 16
  %indirectarg1278 = alloca %"any[]", align 8
  %taddr1282 = alloca i32, align 4
  %varargslots1283 = alloca [1 x %any], align 16
  %indirectarg1285 = alloca %"any[]", align 8
  %taddr1289 = alloca i32, align 4
  %varargslots1290 = alloca [1 x %any], align 16
  %indirectarg1292 = alloca %"any[]", align 8
  %taddr1300 = alloca i64, align 8
  %varargslots1301 = alloca [1 x %any], align 16
  %indirectarg1303 = alloca %"any[]", align 8
  %taddr1307 = alloca i64, align 8
  %taddr1308 = alloca i64, align 8
  %varargslots1309 = alloca [2 x %any], align 16
  %indirectarg1312 = alloca %"any[]", align 8
  %taddr1318 = alloca i64, align 8
  %varargslots1319 = alloca [1 x %any], align 16
  %indirectarg1321 = alloca %"any[]", align 8
  %taddr1325 = alloca i64, align 8
  %taddr1326 = alloca i64, align 8
  %varargslots1327 = alloca [2 x %any], align 16
  %indirectarg1330 = alloca %"any[]", align 8
  %taddr1335 = alloca i32, align 4
  %varargslots1336 = alloca [1 x %any], align 16
  %indirectarg1338 = alloca %"any[]", align 8
  %taddr1344 = alloca i32, align 4
  %varargslots1345 = alloca [1 x %any], align 16
  %indirectarg1347 = alloca %"any[]", align 8
  %taddr1351 = alloca i32, align 4
  %varargslots1352 = alloca [1 x %any], align 16
  %indirectarg1354 = alloca %"any[]", align 8
  %taddr1362 = alloca i64, align 8
  %varargslots1363 = alloca [1 x %any], align 16
  %indirectarg1365 = alloca %"any[]", align 8
  %taddr1369 = alloca i64, align 8
  %taddr1370 = alloca i64, align 8
  %varargslots1371 = alloca [2 x %any], align 16
  %indirectarg1374 = alloca %"any[]", align 8
  %taddr1398 = alloca i64, align 8
  %varargslots1399 = alloca [1 x %any], align 16
  %indirectarg1401 = alloca %"any[]", align 8
  %taddr1405 = alloca i64, align 8
  %taddr1406 = alloca i64, align 8
  %varargslots1407 = alloca [2 x %any], align 16
  %indirectarg1410 = alloca %"any[]", align 8
  %taddr1421 = alloca i64, align 8
  %varargslots1422 = alloca [1 x %any], align 16
  %indirectarg1424 = alloca %"any[]", align 8
  %taddr1428 = alloca i64, align 8
  %taddr1429 = alloca i64, align 8
  %varargslots1430 = alloca [2 x %any], align 16
  %indirectarg1433 = alloca %"any[]", align 8
  %y1440 = alloca double, align 8
  %i1441 = alloca i32, align 4
  %taddr1455 = alloca i64, align 8
  %varargslots1456 = alloca [1 x %any], align 16
  %indirectarg1458 = alloca %"any[]", align 8
  %taddr1462 = alloca i64, align 8
  %taddr1463 = alloca i64, align 8
  %varargslots1464 = alloca [2 x %any], align 16
  %indirectarg1467 = alloca %"any[]", align 8
  %taddr1477 = alloca i64, align 8
  %varargslots1478 = alloca [1 x %any], align 16
  %indirectarg1480 = alloca %"any[]", align 8
  %taddr1484 = alloca i64, align 8
  %taddr1485 = alloca i64, align 8
  %varargslots1486 = alloca [2 x %any], align 16
  %indirectarg1489 = alloca %"any[]", align 8
  %denormal = alloca i8, align 1
  %bits1498 = alloca i32, align 4
  %bias1511 = alloca double, align 8
  %frac = alloca double, align 8
  %x1514 = alloca double, align 8
  %n1517 = alloca i32, align 4
  %mag1518 = alloca double, align 8
  %sgn1519 = alloca double, align 8
  %x1520 = alloca double, align 8
  %y1521 = alloca double, align 8
  %x1522 = alloca double, align 8
  %n1524 = alloca i32, align 4
  %t = alloca i32, align 4
  %taddr1540 = alloca i64, align 8
  %varargslots1541 = alloca [1 x %any], align 16
  %indirectarg1543 = alloca %"any[]", align 8
  %taddr1547 = alloca i64, align 8
  %taddr1548 = alloca i64, align 8
  %varargslots1549 = alloca [2 x %any], align 16
  %indirectarg1552 = alloca %"any[]", align 8
  %switch1555 = alloca i8, align 1
  %x1618 = alloca double, align 8
  %x1646 = alloca double, align 8
  %n1647 = alloca i32, align 4
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !3388, !DIExpression(), !3389)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars, ptr align 8 %self, i32 16, i1 false)
    #dbg_declare(ptr %sign, !3390, !DIExpression(), !3392)
  store i32 1, ptr %sign, align 4, !dbg !3394
  br label %loop.cond, !dbg !3395

loop.cond:                                        ; preds = %checkok12, %entry
  %ptradd1 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3396
  %3 = load i64, ptr %ptradd1, align 8, !dbg !3396
  %i2b = icmp ne i64 %3, 0, !dbg !3396
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !3396

and.rhs:                                          ; preds = %loop.cond
  %ptradd2 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3398
  %4 = load i64, ptr %ptradd2, align 8, !dbg !3398
  %5 = load ptr, ptr %chars, align 8, !dbg !3398
  %ge = icmp sge i64 0, %4, !dbg !3399
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3399
  br i1 %6, label %panic, label %checkok, !dbg !3399

checkok:                                          ; preds = %and.rhs
  %7 = load i8, ptr %5, align 1, !dbg !3399
  %eq = icmp eq i8 %7, 32, !dbg !3398
  br label %and.phi, !dbg !3398

and.phi:                                          ; preds = %checkok, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %eq, %checkok ], !dbg !3398
  br i1 %val, label %loop.body, label %loop.exit, !dbg !3398

loop.body:                                        ; preds = %and.phi
  %8 = load %"char[]", ptr %chars, align 8, !dbg !3400
  %9 = extractvalue %"char[]" %8, 0, !dbg !3400
  %10 = extractvalue %"char[]" %8, 1, !dbg !3401
  %gt = icmp sgt i64 1, %10, !dbg !3401
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3401
  br i1 %11, label %panic5, label %checkok12, !dbg !3401

checkok12:                                        ; preds = %loop.body
  %size = sub i64 %10, 1, !dbg !3400
  %ptradd13 = getelementptr inbounds i8, ptr %9, i64 1, !dbg !3400
  %12 = insertvalue %"char[]" undef, ptr %ptradd13, 0, !dbg !3400
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !3400
  store %"char[]" %13, ptr %chars, align 8, !dbg !3400
  br label %loop.cond, !dbg !3400

loop.exit:                                        ; preds = %and.phi
  %ptradd14 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3402
  %14 = load i64, ptr %ptradd14, align 8, !dbg !3402
  %i2nb = icmp eq i64 %14, 0, !dbg !3402
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3402

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !3403
  br label %err_retblock, !dbg !3403

if.exit:                                          ; preds = %loop.exit
  %ptradd15 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3404
  %15 = load i64, ptr %ptradd15, align 8, !dbg !3404
  %neq = icmp ne i64 1, %15, !dbg !3404
  br i1 %neq, label %if.then16, label %if.exit39, !dbg !3404

if.then16:                                        ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3405
  %16 = load i64, ptr %ptradd17, align 8, !dbg !3405
  %17 = load ptr, ptr %chars, align 8, !dbg !3405
  %ge18 = icmp sge i64 0, %16, !dbg !3408
  %18 = call i1 @llvm.expect.i1(i1 %ge18, i1 false), !dbg !3408
  br i1 %18, label %panic19, label %checkok26, !dbg !3408

checkok26:                                        ; preds = %if.then16
  %19 = load i8, ptr %17, align 1
  store i8 %19, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok26
  %20 = load i8, ptr %switch, align 1
  switch i8 %20, label %switch.exit [
    i8 45, label %switch.case
    i8 43, label %switch.case27
  ]

switch.case:                                      ; preds = %switch.entry
  store i32 -1, ptr %sign, align 4, !dbg !3409
  br label %switch.case27, !dbg !3411

switch.case27:                                    ; preds = %switch.entry, %switch.case
  %21 = load %"char[]", ptr %chars, align 8, !dbg !3412
  %22 = extractvalue %"char[]" %21, 0, !dbg !3412
  %23 = extractvalue %"char[]" %21, 1, !dbg !3414
  %gt28 = icmp sgt i64 1, %23, !dbg !3414
  %24 = call i1 @llvm.expect.i1(i1 %gt28, i1 false), !dbg !3414
  br i1 %24, label %panic29, label %checkok36, !dbg !3414

checkok36:                                        ; preds = %switch.case27
  %size37 = sub i64 %23, 1, !dbg !3412
  %ptradd38 = getelementptr inbounds i8, ptr %22, i64 1, !dbg !3412
  %25 = insertvalue %"char[]" undef, ptr %ptradd38, 0, !dbg !3412
  %26 = insertvalue %"char[]" %25, i64 %size37, 1, !dbg !3412
  store %"char[]" %26, ptr %chars, align 8, !dbg !3412
  br label %switch.exit, !dbg !3412

switch.exit:                                      ; preds = %checkok36, %switch.entry
  br label %if.exit39, !dbg !3412

if.exit39:                                        ; preds = %switch.exit, %if.exit
  %27 = load %"char[]", ptr %chars, align 8, !dbg !3415
  %28 = extractvalue %"char[]" %27, 1, !dbg !3415
  %29 = extractvalue %"char[]" %27, 0, !dbg !3415
  %eq40 = icmp eq i64 %28, 8, !dbg !3415
  br i1 %eq40, label %slice_cmp_values, label %slice_cmp_exit, !dbg !3415

slice_cmp_values:                                 ; preds = %if.exit39
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %30 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %30, %28
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd41 = getelementptr inbounds i8, ptr %29, i64 %30
  %ptradd42 = getelementptr inbounds i8, ptr @.str.104, i64 %30
  %31 = load i8, ptr %ptradd41, align 1
  %32 = load i8, ptr %ptradd42, align 1
  %eq43 = icmp eq i8 %31, %32
  %33 = add i64 %30, 1
  store i64 %33, ptr %cmp.idx, align 8
  br i1 %eq43, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %if.exit39
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %if.exit39 ], [ false, %slice_loop_comparison ]
  br i1 %slice_cmp_phi, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %slice_cmp_exit
  %34 = load %"char[]", ptr %chars, align 8, !dbg !3416
  %35 = extractvalue %"char[]" %34, 1, !dbg !3416
  %36 = extractvalue %"char[]" %34, 0, !dbg !3416
  %eq44 = icmp eq i64 %35, 8, !dbg !3416
  br i1 %eq44, label %slice_cmp_values45, label %slice_cmp_exit53, !dbg !3416

slice_cmp_values45:                               ; preds = %or.rhs
  store i64 0, ptr %cmp.idx46, align 8
  br label %slice_loop_start47

slice_loop_start47:                               ; preds = %slice_loop_comparison49, %slice_cmp_values45
  %37 = load i64, ptr %cmp.idx46, align 8
  %lt48 = icmp slt i64 %37, %35
  br i1 %lt48, label %slice_loop_comparison49, label %slice_cmp_exit53

slice_loop_comparison49:                          ; preds = %slice_loop_start47
  %ptradd50 = getelementptr inbounds i8, ptr %36, i64 %37
  %ptradd51 = getelementptr inbounds i8, ptr @.str.105, i64 %37
  %38 = load i8, ptr %ptradd50, align 1
  %39 = load i8, ptr %ptradd51, align 1
  %eq52 = icmp eq i8 %38, %39
  %40 = add i64 %37, 1
  store i64 %40, ptr %cmp.idx46, align 8
  br i1 %eq52, label %slice_loop_start47, label %slice_cmp_exit53

slice_cmp_exit53:                                 ; preds = %slice_loop_comparison49, %slice_loop_start47, %or.rhs
  %slice_cmp_phi54 = phi i1 [ true, %slice_loop_start47 ], [ false, %or.rhs ], [ false, %slice_loop_comparison49 ]
  br label %or.phi

or.phi:                                           ; preds = %slice_cmp_exit53, %slice_cmp_exit
  %val55 = phi i1 [ true, %slice_cmp_exit ], [ %slice_cmp_phi54, %slice_cmp_exit53 ]
  br i1 %val55, label %if.then56, label %if.exit57

if.then56:                                        ; preds = %or.phi
  %41 = load i32, ptr %sign, align 4, !dbg !3417
  %sifp = sitofp i32 %41 to float, !dbg !3417
  %fmul = fmul float %sifp, 0x7FF0000000000000, !dbg !3417
  store float %fmul, ptr %blockret, align 4, !dbg !3417
  br label %expr_block.exit1651, !dbg !3417

if.exit57:                                        ; preds = %or.phi
  %42 = load %"char[]", ptr %chars, align 8, !dbg !3418
  %43 = extractvalue %"char[]" %42, 1, !dbg !3418
  %44 = extractvalue %"char[]" %42, 0, !dbg !3418
  %eq58 = icmp eq i64 %43, 3, !dbg !3418
  br i1 %eq58, label %slice_cmp_values59, label %slice_cmp_exit67, !dbg !3418

slice_cmp_values59:                               ; preds = %if.exit57
  store i64 0, ptr %cmp.idx60, align 8
  br label %slice_loop_start61

slice_loop_start61:                               ; preds = %slice_loop_comparison63, %slice_cmp_values59
  %45 = load i64, ptr %cmp.idx60, align 8
  %lt62 = icmp slt i64 %45, %43
  br i1 %lt62, label %slice_loop_comparison63, label %slice_cmp_exit67

slice_loop_comparison63:                          ; preds = %slice_loop_start61
  %ptradd64 = getelementptr inbounds i8, ptr %44, i64 %45
  %ptradd65 = getelementptr inbounds i8, ptr @.str.106, i64 %45
  %46 = load i8, ptr %ptradd64, align 1
  %47 = load i8, ptr %ptradd65, align 1
  %eq66 = icmp eq i8 %46, %47
  %48 = add i64 %45, 1
  store i64 %48, ptr %cmp.idx60, align 8
  br i1 %eq66, label %slice_loop_start61, label %slice_cmp_exit67

slice_cmp_exit67:                                 ; preds = %slice_loop_comparison63, %slice_loop_start61, %if.exit57
  %slice_cmp_phi68 = phi i1 [ true, %slice_loop_start61 ], [ false, %if.exit57 ], [ false, %slice_loop_comparison63 ]
  br i1 %slice_cmp_phi68, label %or.phi81, label %or.rhs69

or.rhs69:                                         ; preds = %slice_cmp_exit67
  %49 = load %"char[]", ptr %chars, align 8, !dbg !3419
  %50 = extractvalue %"char[]" %49, 1, !dbg !3419
  %51 = extractvalue %"char[]" %49, 0, !dbg !3419
  %eq70 = icmp eq i64 %50, 3, !dbg !3419
  br i1 %eq70, label %slice_cmp_values71, label %slice_cmp_exit79, !dbg !3419

slice_cmp_values71:                               ; preds = %or.rhs69
  store i64 0, ptr %cmp.idx72, align 8
  br label %slice_loop_start73

slice_loop_start73:                               ; preds = %slice_loop_comparison75, %slice_cmp_values71
  %52 = load i64, ptr %cmp.idx72, align 8
  %lt74 = icmp slt i64 %52, %50
  br i1 %lt74, label %slice_loop_comparison75, label %slice_cmp_exit79

slice_loop_comparison75:                          ; preds = %slice_loop_start73
  %ptradd76 = getelementptr inbounds i8, ptr %51, i64 %52
  %ptradd77 = getelementptr inbounds i8, ptr @.str.107, i64 %52
  %53 = load i8, ptr %ptradd76, align 1
  %54 = load i8, ptr %ptradd77, align 1
  %eq78 = icmp eq i8 %53, %54
  %55 = add i64 %52, 1
  store i64 %55, ptr %cmp.idx72, align 8
  br i1 %eq78, label %slice_loop_start73, label %slice_cmp_exit79

slice_cmp_exit79:                                 ; preds = %slice_loop_comparison75, %slice_loop_start73, %or.rhs69
  %slice_cmp_phi80 = phi i1 [ true, %slice_loop_start73 ], [ false, %or.rhs69 ], [ false, %slice_loop_comparison75 ]
  br label %or.phi81

or.phi81:                                         ; preds = %slice_cmp_exit79, %slice_cmp_exit67
  %val82 = phi i1 [ true, %slice_cmp_exit67 ], [ %slice_cmp_phi80, %slice_cmp_exit79 ]
  br i1 %val82, label %if.then83, label %if.exit84

if.then83:                                        ; preds = %or.phi81
  store float 0x7FF8000000000000, ptr %blockret, align 4, !dbg !3420
  br label %expr_block.exit1651, !dbg !3420

if.exit84:                                        ; preds = %or.phi81
  %ptradd85 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3421
  %56 = load i64, ptr %ptradd85, align 8, !dbg !3421
  %lt86 = icmp ult i64 2, %56, !dbg !3421
  br i1 %lt86, label %and.rhs87, label %and.phi99, !dbg !3421

and.rhs87:                                        ; preds = %if.exit84
  %ptradd88 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3422
  %57 = load i64, ptr %ptradd88, align 8, !dbg !3422
  %58 = load ptr, ptr %chars, align 8, !dbg !3422
  %ge89 = icmp sge i64 0, %57, !dbg !3423
  %59 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !3423
  br i1 %59, label %panic90, label %checkok97, !dbg !3423

checkok97:                                        ; preds = %and.rhs87
  %60 = load i8, ptr %58, align 1, !dbg !3423
  %eq98 = icmp eq i8 %60, 48, !dbg !3422
  br label %and.phi99, !dbg !3422

and.phi99:                                        ; preds = %checkok97, %if.exit84
  %val100 = phi i1 [ false, %if.exit84 ], [ %eq98, %checkok97 ], !dbg !3422
  br i1 %val100, label %and.rhs101, label %and.phi114, !dbg !3422

and.rhs101:                                       ; preds = %and.phi99
  %ptradd102 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3424
  %61 = load i64, ptr %ptradd102, align 8, !dbg !3424
  %62 = load ptr, ptr %chars, align 8, !dbg !3424
  %ge103 = icmp sge i64 1, %61, !dbg !3425
  %63 = call i1 @llvm.expect.i1(i1 %ge103, i1 false), !dbg !3425
  br i1 %63, label %panic104, label %checkok111, !dbg !3425

checkok111:                                       ; preds = %and.rhs101
  %ptradd112 = getelementptr inbounds i8, ptr %62, i64 1, !dbg !3425
  %64 = load i8, ptr %ptradd112, align 1, !dbg !3425
  %zext = zext i8 %64 to i32, !dbg !3425
  %or = or i32 %zext, 32, !dbg !3424
  %eq113 = icmp eq i32 %or, 120, !dbg !3424
  %check = icmp sge i32 %or, 0, !dbg !3424
  %siui-eq = and i1 %check, %eq113, !dbg !3424
  br label %and.phi114, !dbg !3424

and.phi114:                                       ; preds = %checkok111, %and.phi99
  %val115 = phi i1 [ false, %and.phi99 ], [ %siui-eq, %checkok111 ], !dbg !3424
  br i1 %val115, label %if.then116, label %if.exit381, !dbg !3424

if.then116:                                       ; preds = %and.phi114
  %65 = load %"char[]", ptr %chars, align 8, !dbg !3426
  %66 = extractvalue %"char[]" %65, 0, !dbg !3426
  %67 = extractvalue %"char[]" %65, 1, !dbg !3428
  %gt117 = icmp sgt i64 2, %67, !dbg !3428
  %68 = call i1 @llvm.expect.i1(i1 %gt117, i1 false), !dbg !3428
  br i1 %68, label %panic118, label %checkok125, !dbg !3428

checkok125:                                       ; preds = %if.then116
  %size126 = sub i64 %67, 2, !dbg !3429
  %ptradd127 = getelementptr inbounds i8, ptr %66, i64 2, !dbg !3429
  %69 = insertvalue %"char[]" undef, ptr %ptradd127, 0, !dbg !3429
  %70 = insertvalue %"char[]" %69, i64 %size126, 1, !dbg !3429
  store %"char[]" %70, ptr %chars128, align 8
  %71 = load i32, ptr %sign, align 4
  store i32 %71, ptr %sign129, align 4
    #dbg_declare(ptr %scale, !3430, !DIExpression(), !3432)
  store double 1.000000e+00, ptr %scale, align 8, !dbg !3434
    #dbg_declare(ptr %x, !3435, !DIExpression(), !3436)
  store i32 0, ptr %x, align 4, !dbg !3436
    #dbg_declare(ptr %rp, !3437, !DIExpression(), !3438)
  store i64 0, ptr %rp, align 8, !dbg !3438
    #dbg_declare(ptr %dc, !3439, !DIExpression(), !3440)
  store i64 0, ptr %dc, align 8, !dbg !3440
    #dbg_declare(ptr %c, !3441, !DIExpression(), !3442)
    #dbg_declare(ptr %got_rad, !3443, !DIExpression(), !3444)
  store i8 0, ptr %got_rad, align 1, !dbg !3444
    #dbg_declare(ptr %got_digit, !3445, !DIExpression(), !3446)
  store i8 0, ptr %got_digit, align 1, !dbg !3446
    #dbg_declare(ptr %got_tail, !3447, !DIExpression(), !3448)
  store i8 0, ptr %got_tail, align 1, !dbg !3448
    #dbg_declare(ptr %len, !3449, !DIExpression(), !3450)
  %ptradd131 = getelementptr inbounds i8, ptr %chars128, i64 8, !dbg !3451
  %72 = load i64, ptr %ptradd131, align 8, !dbg !3451
  store i64 %72, ptr %len, align 8, !dbg !3451
    #dbg_declare(ptr %last_char, !3452, !DIExpression(), !3453)
  %73 = load i64, ptr %len, align 8, !dbg !3454
  %sub = sub i64 %73, 1, !dbg !3454
  store i64 %sub, ptr %last_char, align 8, !dbg !3454
    #dbg_declare(ptr %index, !3455, !DIExpression(), !3456)
  store i64 0, ptr %index, align 8, !dbg !3456
    #dbg_declare(ptr %y, !3457, !DIExpression(), !3458)
  store double 0.000000e+00, ptr %y, align 8, !dbg !3458
  br label %loop.cond132, !dbg !3459

loop.cond132:                                     ; preds = %if.exit148, %checkok125
  %ptradd133 = getelementptr inbounds i8, ptr %chars128, i64 8, !dbg !3460
  %74 = load i64, ptr %ptradd133, align 8, !dbg !3460
  %75 = load ptr, ptr %chars128, align 8, !dbg !3460
  %76 = load i64, ptr %index, align 8, !dbg !3462
  %ge134 = icmp uge i64 %76, %74, !dbg !3462
  %77 = call i1 @llvm.expect.i1(i1 %ge134, i1 false), !dbg !3462
  br i1 %77, label %panic135, label %checkok142, !dbg !3462

checkok142:                                       ; preds = %loop.cond132
  %ptradd143 = getelementptr inbounds i8, ptr %75, i64 %76, !dbg !3462
  %78 = load i8, ptr %ptradd143, align 1, !dbg !3462
  store i8 %78, ptr %c, align 1, !dbg !3462
  %eq144 = icmp eq i8 %78, 48, !dbg !3463
  br i1 %eq144, label %loop.body145, label %loop.exit149, !dbg !3463

loop.body145:                                     ; preds = %checkok142
  %79 = load i64, ptr %index, align 8, !dbg !3464
  %80 = load i64, ptr %last_char, align 8, !dbg !3466
  %eq146 = icmp eq i64 %79, %80, !dbg !3464
  br i1 %eq146, label %if.then147, label %if.exit148, !dbg !3464

if.then147:                                       ; preds = %loop.body145
  store double 0.000000e+00, ptr %blockret130, align 8, !dbg !3467
  br label %expr_block.exit, !dbg !3467

if.exit148:                                       ; preds = %loop.body145
  %81 = load i64, ptr %index, align 8, !dbg !3468
  %add = add i64 %81, 1, !dbg !3468
  store i64 %add, ptr %index, align 8, !dbg !3468
  br label %loop.cond132, !dbg !3468

loop.exit149:                                     ; preds = %checkok142
  %82 = load i8, ptr %c, align 1, !dbg !3469
  %eq150 = icmp eq i8 %82, 46, !dbg !3469
  br i1 %eq150, label %if.then151, label %if.exit200, !dbg !3469

if.then151:                                       ; preds = %loop.exit149
  store i8 1, ptr %got_rad, align 1, !dbg !3470
  %83 = load i64, ptr %index, align 8, !dbg !3472
  %84 = load i64, ptr %last_char, align 8, !dbg !3473
  %eq152 = icmp eq i64 %83, %84, !dbg !3472
  br i1 %eq152, label %if.then153, label %if.exit158, !dbg !3472

if.then153:                                       ; preds = %if.then151
  %85 = load i8, ptr %got_digit, align 1, !dbg !3474
  %86 = trunc i8 %85 to i1, !dbg !3474
  %not = xor i1 %86, true, !dbg !3474
  br i1 %not, label %if.then154, label %if.exit155, !dbg !3474

if.then154:                                       ; preds = %if.then153
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !3476
  br label %err_retblock, !dbg !3476

if.exit155:                                       ; preds = %if.then153
  %87 = load i32, ptr %sign129, align 4, !dbg !3477
  %sifp156 = sitofp i32 %87 to double, !dbg !3477
  %fmul157 = fmul double %sifp156, 0.000000e+00, !dbg !3477
  store double %fmul157, ptr %blockret130, align 8, !dbg !3477
  br label %expr_block.exit, !dbg !3477

if.exit158:                                       ; preds = %if.then151
  %88 = load i64, ptr %index, align 8, !dbg !3478
  %89 = load i64, ptr %last_char, align 8, !dbg !3479
  %neq159 = icmp ne i64 %88, %89, !dbg !3478
  br i1 %neq159, label %and.rhs160, label %and.phi174, !dbg !3478

and.rhs160:                                       ; preds = %if.exit158
  %ptradd161 = getelementptr inbounds i8, ptr %chars128, i64 8, !dbg !3480
  %90 = load i64, ptr %ptradd161, align 8, !dbg !3480
  %91 = load ptr, ptr %chars128, align 8, !dbg !3480
  %92 = load i64, ptr %index, align 8, !dbg !3481
  %add162 = add i64 %92, 1, !dbg !3481
  store i64 %add162, ptr %index, align 8, !dbg !3481
  %ge163 = icmp uge i64 %add162, %90, !dbg !3481
  %93 = call i1 @llvm.expect.i1(i1 %ge163, i1 false), !dbg !3481
  br i1 %93, label %panic164, label %checkok171, !dbg !3481

checkok171:                                       ; preds = %and.rhs160
  %ptradd172 = getelementptr inbounds i8, ptr %91, i64 %add162, !dbg !3482
  %94 = load i8, ptr %ptradd172, align 1, !dbg !3482
  store i8 %94, ptr %c, align 1, !dbg !3482
  %eq173 = icmp eq i8 %94, 48, !dbg !3483
  br label %and.phi174, !dbg !3483

and.phi174:                                       ; preds = %checkok171, %if.exit158
  %val175 = phi i1 [ false, %if.exit158 ], [ %eq173, %checkok171 ], !dbg !3483
  br i1 %val175, label %if.then176, label %if.exit199, !dbg !3483

if.then176:                                       ; preds = %and.phi174
  %95 = load i64, ptr %rp, align 8, !dbg !3484
  %sub177 = sub i64 %95, 1, !dbg !3484
  store i64 %sub177, ptr %rp, align 8, !dbg !3484
  store i8 1, ptr %got_digit, align 1, !dbg !3486
  br label %loop.cond178, !dbg !3487

loop.cond178:                                     ; preds = %loop.body196, %if.then176
  %96 = load i64, ptr %last_char, align 8, !dbg !3488
  %97 = load i64, ptr %index, align 8, !dbg !3490
  %neq179 = icmp ne i64 %96, %97, !dbg !3488
  br i1 %neq179, label %and.rhs180, label %and.phi194, !dbg !3488

and.rhs180:                                       ; preds = %loop.cond178
  %ptradd181 = getelementptr inbounds i8, ptr %chars128, i64 8, !dbg !3491
  %98 = load i64, ptr %ptradd181, align 8, !dbg !3491
  %99 = load ptr, ptr %chars128, align 8, !dbg !3491
  %100 = load i64, ptr %index, align 8, !dbg !3492
  %add182 = add i64 %100, 1, !dbg !3492
  store i64 %add182, ptr %index, align 8, !dbg !3492
  %ge183 = icmp uge i64 %add182, %98, !dbg !3492
  %101 = call i1 @llvm.expect.i1(i1 %ge183, i1 false), !dbg !3492
  br i1 %101, label %panic184, label %checkok191, !dbg !3492

checkok191:                                       ; preds = %and.rhs180
  %ptradd192 = getelementptr inbounds i8, ptr %99, i64 %add182, !dbg !3493
  %102 = load i8, ptr %ptradd192, align 1, !dbg !3493
  store i8 %102, ptr %c, align 1, !dbg !3493
  %eq193 = icmp eq i8 %102, 48, !dbg !3494
  br label %and.phi194, !dbg !3494

and.phi194:                                       ; preds = %checkok191, %loop.cond178
  %val195 = phi i1 [ false, %loop.cond178 ], [ %eq193, %checkok191 ], !dbg !3494
  br i1 %val195, label %loop.body196, label %loop.exit198, !dbg !3494

loop.body196:                                     ; preds = %and.phi194
  %103 = load i64, ptr %rp, align 8, !dbg !3495
  %sub197 = sub i64 %103, 1, !dbg !3495
  store i64 %sub197, ptr %rp, align 8, !dbg !3495
  br label %loop.cond178, !dbg !3495

loop.exit198:                                     ; preds = %and.phi194
  br label %if.exit199, !dbg !3495

if.exit199:                                       ; preds = %loop.exit198, %and.phi174
  br label %if.exit200, !dbg !3495

if.exit200:                                       ; preds = %if.exit199, %loop.exit149
  br label %loop.cond201, !dbg !3497

loop.cond201:                                     ; preds = %checkok267, %if.exit200
  %104 = load i8, ptr %c, align 1, !dbg !3498
  %zext202 = zext i8 %104 to i32, !dbg !3498
  %sub203 = sub i32 %zext202, 48, !dbg !3498
  %lt204 = icmp ult i32 %sub203, 10, !dbg !3498
  br i1 %lt204, label %or.phi210, label %or.rhs205, !dbg !3498

or.rhs205:                                        ; preds = %loop.cond201
  %105 = load i8, ptr %c, align 1, !dbg !3500
  %zext206 = zext i8 %105 to i32, !dbg !3500
  %or207 = or i32 %zext206, 32, !dbg !3500
  %sub208 = sub i32 %or207, 97, !dbg !3500
  %lt209 = icmp slt i32 %sub208, 6, !dbg !3500
  %siui-lt = or i1 false, %lt209, !dbg !3500
  br label %or.phi210, !dbg !3500

or.phi210:                                        ; preds = %or.rhs205, %loop.cond201
  %val211 = phi i1 [ true, %loop.cond201 ], [ %siui-lt, %or.rhs205 ], !dbg !3500
  br i1 %val211, label %or.phi214, label %or.rhs212, !dbg !3500

or.rhs212:                                        ; preds = %or.phi210
  %106 = load i8, ptr %c, align 1, !dbg !3501
  %eq213 = icmp eq i8 %106, 46, !dbg !3501
  br label %or.phi214, !dbg !3501

or.phi214:                                        ; preds = %or.rhs212, %or.phi210
  %val215 = phi i1 [ true, %or.phi210 ], [ %eq213, %or.rhs212 ], !dbg !3501
  br i1 %val215, label %loop.body216, label %loop.exit269, !dbg !3501

loop.body216:                                     ; preds = %or.phi214
  %107 = load i8, ptr %c, align 1, !dbg !3502
  %eq217 = icmp eq i8 %107, 46, !dbg !3502
  br i1 %eq217, label %if.then218, label %if.else, !dbg !3502

if.then218:                                       ; preds = %loop.body216
  %108 = load i8, ptr %got_rad, align 1, !dbg !3504
  %109 = trunc i8 %108 to i1, !dbg !3504
  br i1 %109, label %if.then219, label %if.exit220, !dbg !3504

if.then219:                                       ; preds = %if.then218
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !3506
  br label %err_retblock, !dbg !3506

if.exit220:                                       ; preds = %if.then218
  store i8 1, ptr %got_rad, align 1, !dbg !3507
  %110 = load i64, ptr %dc, align 8, !dbg !3508
  store i64 %110, ptr %rp, align 8, !dbg !3508
  br label %if.exit253, !dbg !3508

if.else:                                          ; preds = %loop.body216
  store i8 1, ptr %got_digit, align 1, !dbg !3509
    #dbg_declare(ptr %d, !3511, !DIExpression(), !3512)
  %111 = load i8, ptr %c, align 1, !dbg !3513
  %gt221 = icmp ugt i8 %111, 57, !dbg !3513
  br i1 %gt221, label %cond.lhs, label %cond.rhs, !dbg !3513

cond.lhs:                                         ; preds = %if.else
  %112 = load i8, ptr %c, align 1, !dbg !3514
  %zext222 = zext i8 %112 to i32, !dbg !3514
  %or223 = or i32 %zext222, 32, !dbg !3514
  %add224 = add i32 %or223, 10, !dbg !3514
  %sub225 = sub i32 %add224, 97, !dbg !3514
  br label %cond.phi, !dbg !3514

cond.rhs:                                         ; preds = %if.else
  %113 = load i8, ptr %c, align 1, !dbg !3515
  %zext226 = zext i8 %113 to i32, !dbg !3515
  %sub227 = sub i32 %zext226, 48, !dbg !3515
  br label %cond.phi, !dbg !3515

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val228 = phi i32 [ %sub225, %cond.lhs ], [ %sub227, %cond.rhs ], !dbg !3515
  store i32 %val228, ptr %d, align 4, !dbg !3515
  store i8 1, ptr %switch229, align 1
  br label %switch.entry230

switch.entry230:                                  ; preds = %cond.phi
  %114 = load i8, ptr %switch229, align 1
  %115 = trunc i8 %114 to i1
  %116 = load i64, ptr %dc, align 8, !dbg !3516
  %lt231 = icmp slt i64 %116, 8, !dbg !3516
  %eq232 = icmp eq i1 %lt231, %115, !dbg !3516
  br i1 %eq232, label %switch.case233, label %next_if, !dbg !3516

switch.case233:                                   ; preds = %switch.entry230
  %117 = load i32, ptr %x, align 4, !dbg !3518
  %mul = mul i32 %117, 16, !dbg !3518
  %118 = load i32, ptr %d, align 4, !dbg !3520
  %add234 = add i32 %mul, %118, !dbg !3518
  store i32 %add234, ptr %x, align 4, !dbg !3518
  br label %switch.exit251, !dbg !3518

next_if:                                          ; preds = %switch.entry230
  %119 = load i64, ptr %dc, align 8, !dbg !3521
  %lt235 = icmp slt i64 %119, 14, !dbg !3521
  %eq236 = icmp eq i1 %lt235, %115, !dbg !3521
  br i1 %eq236, label %switch.case237, label %next_if240, !dbg !3521

switch.case237:                                   ; preds = %next_if
  %120 = load double, ptr %y, align 8, !dbg !3522
  %121 = load i32, ptr %d, align 4, !dbg !3524
  %sifp238 = sitofp i32 %121 to double, !dbg !3524
  %122 = load double, ptr %scale, align 8, !dbg !3525
  %fdiv = fdiv double %122, 1.600000e+01, !dbg !3525
  store double %fdiv, ptr %scale, align 8, !dbg !3525
  %fmul239 = fmul double %sifp238, %fdiv, !dbg !3524
  %fadd = fadd double %120, %fmul239, !dbg !3522
  store double %fadd, ptr %y, align 8, !dbg !3522
  store i8 1, ptr %got_tail, align 1, !dbg !3526
  br label %switch.exit251, !dbg !3526

next_if240:                                       ; preds = %next_if
  %123 = load i32, ptr %d, align 4, !dbg !3527
  %i2b241 = icmp ne i32 %123, 0, !dbg !3527
  br i1 %i2b241, label %and.rhs242, label %and.phi244, !dbg !3527

and.rhs242:                                       ; preds = %next_if240
  %124 = load i8, ptr %got_tail, align 1, !dbg !3528
  %125 = trunc i8 %124 to i1, !dbg !3528
  %not243 = xor i1 %125, true, !dbg !3528
  br label %and.phi244, !dbg !3528

and.phi244:                                       ; preds = %and.rhs242, %next_if240
  %val245 = phi i1 [ false, %next_if240 ], [ %not243, %and.rhs242 ], !dbg !3528
  %eq246 = icmp eq i1 %val245, %115, !dbg !3528
  br i1 %eq246, label %switch.case247, label %next_if250, !dbg !3528

switch.case247:                                   ; preds = %and.phi244
  %126 = load double, ptr %y, align 8, !dbg !3529
  %127 = load double, ptr %scale, align 8, !dbg !3531
  %fmul248 = fmul double 5.000000e-01, %127, !dbg !3532
  %fadd249 = fadd double %126, %fmul248, !dbg !3529
  store double %fadd249, ptr %y, align 8, !dbg !3529
  store i8 1, ptr %got_tail, align 1, !dbg !3533
  br label %switch.exit251, !dbg !3533

next_if250:                                       ; preds = %and.phi244
  br label %switch.exit251, !dbg !3533

switch.exit251:                                   ; preds = %next_if250, %switch.case247, %switch.case237, %switch.case233
  %128 = load i64, ptr %dc, align 8, !dbg !3534
  %add252 = add i64 %128, 1, !dbg !3534
  store i64 %add252, ptr %dc, align 8, !dbg !3534
  br label %if.exit253, !dbg !3534

if.exit253:                                       ; preds = %switch.exit251, %if.exit220
  %129 = load i64, ptr %index, align 8, !dbg !3535
  %130 = load i64, ptr %last_char, align 8, !dbg !3536
  %eq254 = icmp eq i64 %129, %130, !dbg !3535
  br i1 %eq254, label %if.then255, label %if.exit256, !dbg !3535

if.then255:                                       ; preds = %if.exit253
  br label %loop.exit269, !dbg !3537

if.exit256:                                       ; preds = %if.exit253
  %ptradd257 = getelementptr inbounds i8, ptr %chars128, i64 8, !dbg !3538
  %131 = load i64, ptr %ptradd257, align 8, !dbg !3538
  %132 = load ptr, ptr %chars128, align 8, !dbg !3538
  %133 = load i64, ptr %index, align 8, !dbg !3539
  %add258 = add i64 %133, 1, !dbg !3539
  store i64 %add258, ptr %index, align 8, !dbg !3539
  %ge259 = icmp uge i64 %add258, %131, !dbg !3539
  %134 = call i1 @llvm.expect.i1(i1 %ge259, i1 false), !dbg !3539
  br i1 %134, label %panic260, label %checkok267, !dbg !3539

checkok267:                                       ; preds = %if.exit256
  %ptradd268 = getelementptr inbounds i8, ptr %132, i64 %add258, !dbg !3540
  %135 = load i8, ptr %ptradd268, align 1, !dbg !3540
  store i8 %135, ptr %c, align 1, !dbg !3540
  br label %loop.cond201, !dbg !3540

loop.exit269:                                     ; preds = %if.then255, %or.phi214
  %136 = load i8, ptr %got_digit, align 1, !dbg !3541
  %137 = trunc i8 %136 to i1, !dbg !3541
  %not270 = xor i1 %137, true, !dbg !3541
  br i1 %not270, label %if.then271, label %if.exit272, !dbg !3541

if.then271:                                       ; preds = %loop.exit269
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !3542
  br label %err_retblock, !dbg !3542

if.exit272:                                       ; preds = %loop.exit269
  %138 = load i8, ptr %got_rad, align 1, !dbg !3543
  %139 = trunc i8 %138 to i1, !dbg !3543
  %not273 = xor i1 %139, true, !dbg !3543
  br i1 %not273, label %if.then274, label %if.exit275, !dbg !3543

if.then274:                                       ; preds = %if.exit272
  %140 = load i64, ptr %dc, align 8, !dbg !3544
  store i64 %140, ptr %rp, align 8, !dbg !3544
  br label %if.exit275, !dbg !3544

if.exit275:                                       ; preds = %if.then274, %if.exit272
  br label %loop.cond276, !dbg !3545

loop.cond276:                                     ; preds = %loop.body278, %if.exit275
  %141 = load i64, ptr %dc, align 8, !dbg !3546
  %lt277 = icmp slt i64 %141, 8, !dbg !3546
  br i1 %lt277, label %loop.body278, label %loop.exit281, !dbg !3546

loop.body278:                                     ; preds = %loop.cond276
  %142 = load i32, ptr %x, align 4, !dbg !3548
  %mul279 = mul i32 %142, 16, !dbg !3548
  store i32 %mul279, ptr %x, align 4, !dbg !3548
  %143 = load i64, ptr %dc, align 8, !dbg !3549
  %add280 = add i64 %143, 1, !dbg !3549
  store i64 %add280, ptr %dc, align 8, !dbg !3549
  br label %loop.cond276, !dbg !3549

loop.exit281:                                     ; preds = %loop.cond276
    #dbg_declare(ptr %e2, !3550, !DIExpression(), !3551)
  store i64 0, ptr %e2, align 8, !dbg !3551
  %144 = load i8, ptr %c, align 1, !dbg !3552
  %zext282 = zext i8 %144 to i32, !dbg !3552
  %or283 = or i32 %zext282, 32, !dbg !3552
  %eq284 = icmp eq i32 %or283, 112, !dbg !3552
  %check285 = icmp sge i32 %or283, 0, !dbg !3552
  %siui-eq286 = and i1 %check285, %eq284, !dbg !3552
  br i1 %siui-eq286, label %if.then287, label %if.exit306, !dbg !3552

if.then287:                                       ; preds = %loop.exit281
    #dbg_declare(ptr %e2val, !3553, !DIExpression(), !3555)
  %145 = load %"char[]", ptr %chars128, align 8, !dbg !3556
  %146 = extractvalue %"char[]" %145, 0, !dbg !3556
  %147 = load i64, ptr %index, align 8, !dbg !3557
  %add288 = add i64 %147, 1, !dbg !3557
  %148 = extractvalue %"char[]" %145, 1, !dbg !3557
  %gt289 = icmp sgt i64 %add288, %148, !dbg !3557
  %149 = call i1 @llvm.expect.i1(i1 %gt289, i1 false), !dbg !3557
  br i1 %149, label %panic290, label %checkok297, !dbg !3557

checkok297:                                       ; preds = %if.then287
  %underflow = icmp slt i64 %add288, 0, !dbg !3558
  %150 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !3558
  br i1 %150, label %panic298, label %checkok303, !dbg !3558

checkok303:                                       ; preds = %checkok297
  %size304 = sub i64 %148, %add288, !dbg !3557
  %ptradd305 = getelementptr inbounds i8, ptr %146, i64 %add288, !dbg !3557
  %151 = insertvalue %"char[]" undef, ptr %ptradd305, 0, !dbg !3557
  %152 = insertvalue %"char[]" %151, i64 %size304, 1, !dbg !3557
  %153 = call i64 @std.core.String.to_long(ptr %retparam, ptr %ptradd305, i64 %size304, i32 10), !dbg !3559
  %not_err = icmp eq i64 %153, 0, !dbg !3559
  %154 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3559
  br i1 %154, label %after_check, label %else_block, !dbg !3559

after_check:                                      ; preds = %checkok303
  %155 = load i64, ptr %retparam, align 8, !dbg !3559
  br label %phi_block, !dbg !3559

else_block:                                       ; preds = %checkok303
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %error_var, align 8, !dbg !3560
  br label %guard_block, !dbg !3560

guard_block:                                      ; preds = %else_block
  %156 = load i64, ptr %error_var, align 8, !dbg !3560
  store i64 %156, ptr %reterr, align 8, !dbg !3560
  br label %err_retblock, !dbg !3560

phi_block:                                        ; preds = %after_check
  store i64 %155, ptr %e2val, align 8, !dbg !3560
  %157 = load i64, ptr %e2val, align 8, !dbg !3561
  store i64 %157, ptr %e2, align 8, !dbg !3561
  br label %if.exit306, !dbg !3561

if.exit306:                                       ; preds = %phi_block, %loop.exit281
  %158 = load i64, ptr %e2, align 8, !dbg !3562
  %159 = load i64, ptr %rp, align 8, !dbg !3563
  %mul307 = mul i64 4, %159, !dbg !3564
  %sub308 = sub i64 %mul307, 32, !dbg !3564
  %add309 = add i64 %158, %sub308, !dbg !3562
  store i64 %add309, ptr %e2, align 8, !dbg !3562
  %160 = load i32, ptr %x, align 4, !dbg !3565
  %i2nb310 = icmp eq i32 %160, 0, !dbg !3565
  br i1 %i2nb310, label %if.then311, label %if.exit314, !dbg !3565

if.then311:                                       ; preds = %if.exit306
  %161 = load i32, ptr %sign129, align 4, !dbg !3566
  %sifp312 = sitofp i32 %161 to double, !dbg !3566
  %fmul313 = fmul double %sifp312, 0.000000e+00, !dbg !3566
  store double %fmul313, ptr %blockret130, align 8, !dbg !3566
  br label %expr_block.exit, !dbg !3566

if.exit314:                                       ; preds = %if.exit306
  %162 = load i64, ptr %e2, align 8, !dbg !3567
  %gt315 = icmp sgt i64 %162, 149, !dbg !3567
  br i1 %gt315, label %if.then316, label %if.exit317, !dbg !3567

if.then316:                                       ; preds = %if.exit314
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !3568
  br label %err_retblock, !dbg !3568

if.exit317:                                       ; preds = %if.exit314
  %163 = load i64, ptr %e2, align 8, !dbg !3569
  %lt318 = icmp slt i64 %163, -255, !dbg !3569
  br i1 %lt318, label %if.then319, label %if.exit320, !dbg !3569

if.then319:                                       ; preds = %if.exit317
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !3570
  br label %err_retblock, !dbg !3570

if.exit320:                                       ; preds = %if.exit317
  br label %loop.cond321, !dbg !3571

loop.cond321:                                     ; preds = %if.exit332, %if.exit320
  %164 = load i32, ptr %x, align 4, !dbg !3572
  %lt322 = icmp ult i32 %164, -2147483648, !dbg !3572
  br i1 %lt322, label %loop.body323, label %loop.exit334, !dbg !3572

loop.body323:                                     ; preds = %loop.cond321
  %165 = load double, ptr %y, align 8, !dbg !3574
  %ge324 = fcmp oge double %165, 5.000000e-01, !dbg !3574
  br i1 %ge324, label %if.then325, label %if.else329, !dbg !3574

if.then325:                                       ; preds = %loop.body323
  %166 = load i32, ptr %x, align 4, !dbg !3576
  %167 = load i32, ptr %x, align 4, !dbg !3578
  %add326 = add i32 %167, 1, !dbg !3578
  %add327 = add i32 %166, %add326, !dbg !3576
  store i32 %add327, ptr %x, align 4, !dbg !3576
  %168 = load double, ptr %y, align 8, !dbg !3579
  %169 = load double, ptr %y, align 8, !dbg !3580
  %fsub = fsub double %169, 1.000000e+00, !dbg !3580
  %fadd328 = fadd double %168, %fsub, !dbg !3579
  store double %fadd328, ptr %y, align 8, !dbg !3579
  br label %if.exit332, !dbg !3579

if.else329:                                       ; preds = %loop.body323
  %170 = load i32, ptr %x, align 4, !dbg !3581
  %171 = load i32, ptr %x, align 4, !dbg !3583
  %add330 = add i32 %170, %171, !dbg !3581
  store i32 %add330, ptr %x, align 4, !dbg !3581
  %172 = load double, ptr %y, align 8, !dbg !3584
  %173 = load double, ptr %y, align 8, !dbg !3585
  %fadd331 = fadd double %172, %173, !dbg !3584
  store double %fadd331, ptr %y, align 8, !dbg !3584
  br label %if.exit332, !dbg !3584

if.exit332:                                       ; preds = %if.else329, %if.then325
  %174 = load i64, ptr %e2, align 8, !dbg !3586
  %sub333 = sub i64 %174, 1, !dbg !3586
  store i64 %sub333, ptr %e2, align 8, !dbg !3586
  br label %loop.cond321, !dbg !3586

loop.exit334:                                     ; preds = %loop.cond321
    #dbg_declare(ptr %bits, !3587, !DIExpression(), !3588)
  store i32 24, ptr %bits, align 4, !dbg !3589
  %175 = load i64, ptr %e2, align 8, !dbg !3590
  %add335 = add i64 32, %175, !dbg !3591
  %sub336 = sub i64 %add335, -149, !dbg !3591
  %gt337 = icmp sgt i64 24, %sub336, !dbg !3592
  br i1 %gt337, label %if.then338, label %if.exit344, !dbg !3592

if.then338:                                       ; preds = %loop.exit334
  %176 = load i64, ptr %e2, align 8, !dbg !3593
  %add339 = add i64 32, %176, !dbg !3595
  %sub340 = sub i64 %add339, -149, !dbg !3596
  %trunc = trunc i64 %sub340 to i32, !dbg !3596
  store i32 %trunc, ptr %bits, align 4, !dbg !3596
  %177 = load i32, ptr %bits, align 4, !dbg !3597
  %lt341 = icmp slt i32 %177, 0, !dbg !3597
  br i1 %lt341, label %if.then342, label %if.exit343, !dbg !3597

if.then342:                                       ; preds = %if.then338
  store i32 0, ptr %bits, align 4, !dbg !3598
  br label %if.exit343, !dbg !3598

if.exit343:                                       ; preds = %if.then342, %if.then338
  br label %if.exit344, !dbg !3598

if.exit344:                                       ; preds = %if.exit343, %loop.exit334
    #dbg_declare(ptr %bias, !3599, !DIExpression(), !3600)
  store double 0.000000e+00, ptr %bias, align 8, !dbg !3600
  %178 = load i32, ptr %bits, align 4, !dbg !3601
  %lt345 = icmp slt i32 %178, 53, !dbg !3601
  br i1 %lt345, label %if.then346, label %if.exit353, !dbg !3601

if.then346:                                       ; preds = %if.exit344
  store double 1.000000e+00, ptr %x347, align 8
  %179 = load i32, ptr %bits, align 4, !dbg !3602
  %sub348 = sub i32 85, %179, !dbg !3604
  %sub349 = sub i32 %sub348, 1, !dbg !3604
  store i32 %sub349, ptr %n, align 4
  %180 = load double, ptr %x347, align 8, !dbg !3605
  %181 = load i32, ptr %n, align 4, !dbg !3605
  %182 = call double @scalbn(double %180, i32 %181), !dbg !3608
  store double %182, ptr %mag, align 8
  %183 = load i32, ptr %sign129, align 4, !dbg !3609
  %sifp350 = sitofp i32 %183 to double, !dbg !3609
  store double %sifp350, ptr %sgn, align 8
  %184 = load double, ptr %mag, align 8
  store double %184, ptr %x351, align 8
  %185 = load double, ptr %sgn, align 8
  store double %185, ptr %y352, align 8
  %186 = load double, ptr %x351, align 8, !dbg !3610
  %187 = load double, ptr %sgn, align 8, !dbg !3615
  %188 = call double @llvm.copysign.f64(double %186, double %187), !dbg !3615
  store double %188, ptr %bias, align 8, !dbg !3615
  br label %if.exit353, !dbg !3615

if.exit353:                                       ; preds = %if.then346, %if.exit344
  %189 = load i32, ptr %bits, align 4, !dbg !3616
  %lt354 = icmp slt i32 %189, 32, !dbg !3616
  br i1 %lt354, label %and.rhs355, label %and.phi357, !dbg !3616

and.rhs355:                                       ; preds = %if.exit353
  %190 = load double, ptr %y, align 8, !dbg !3617
  %neq356 = fcmp one double %190, 0.000000e+00, !dbg !3617
  br label %and.phi357, !dbg !3617

and.phi357:                                       ; preds = %and.rhs355, %if.exit353
  %val358 = phi i1 [ false, %if.exit353 ], [ %neq356, %and.rhs355 ], !dbg !3617
  br i1 %val358, label %and.rhs359, label %and.phi361, !dbg !3617

and.rhs359:                                       ; preds = %and.phi357
  %191 = load i32, ptr %x, align 4, !dbg !3618
  %and = and i32 %191, 1, !dbg !3619
  %i2nb360 = icmp eq i32 %and, 0, !dbg !3619
  br label %and.phi361, !dbg !3619

and.phi361:                                       ; preds = %and.rhs359, %and.phi357
  %val362 = phi i1 [ false, %and.phi357 ], [ %i2nb360, %and.rhs359 ], !dbg !3619
  br i1 %val362, label %if.then363, label %if.exit365, !dbg !3619

if.then363:                                       ; preds = %and.phi361
  %192 = load i32, ptr %x, align 4, !dbg !3620
  %add364 = add i32 %192, 1, !dbg !3620
  store i32 %add364, ptr %x, align 4, !dbg !3620
  store double 0.000000e+00, ptr %y, align 8, !dbg !3622
  br label %if.exit365, !dbg !3622

if.exit365:                                       ; preds = %if.then363, %and.phi361
  %193 = load double, ptr %bias, align 8, !dbg !3623
  %194 = load i32, ptr %sign129, align 4, !dbg !3624
  %sifp366 = sitofp i32 %194 to double, !dbg !3624
  %195 = load i32, ptr %x, align 4, !dbg !3625
  %uifp = uitofp i32 %195 to double, !dbg !3625
  %fmul367 = fmul double %sifp366, %uifp, !dbg !3624
  %fadd368 = fadd double %193, %fmul367, !dbg !3623
  %196 = load i32, ptr %sign129, align 4, !dbg !3626
  %sifp369 = sitofp i32 %196 to double, !dbg !3626
  %197 = load double, ptr %y, align 8, !dbg !3627
  %fmul370 = fmul double %sifp369, %197, !dbg !3626
  %fadd371 = fadd double %fadd368, %fmul370, !dbg !3623
  store double %fadd371, ptr %y, align 8, !dbg !3623
  %198 = load double, ptr %y, align 8, !dbg !3628
  %199 = load double, ptr %bias, align 8, !dbg !3629
  %fsub372 = fsub double %198, %199, !dbg !3628
  store double %fsub372, ptr %y, align 8, !dbg !3628
  %200 = load double, ptr %y, align 8, !dbg !3630
  %neq373 = fcmp one double %200, 0.000000e+00, !dbg !3630
  %not374 = xor i1 %neq373, true, !dbg !3630
  br i1 %not374, label %if.then375, label %if.exit376, !dbg !3630

if.then375:                                       ; preds = %if.exit365
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !3631
  br label %err_retblock, !dbg !3631

if.exit376:                                       ; preds = %if.exit365
  %201 = load double, ptr %y, align 8
  store double %201, ptr %x377, align 8
  %202 = load i64, ptr %e2, align 8, !dbg !3632
  %trunc378 = trunc i64 %202 to i32, !dbg !3632
  store i32 %trunc378, ptr %n379, align 4
  %203 = load double, ptr %x377, align 8, !dbg !3633
  %204 = load i32, ptr %n379, align 4, !dbg !3633
  %205 = call double @scalbn(double %203, i32 %204), !dbg !3636
  store double %205, ptr %blockret130, align 8, !dbg !3636
  br label %expr_block.exit, !dbg !3636

expr_block.exit:                                  ; preds = %if.exit376, %if.then311, %if.exit155, %if.then147
  %206 = load double, ptr %blockret130, align 8, !dbg !3636
  %fpfptrunc = fptrunc double %206 to float, !dbg !3636
  store float %fpfptrunc, ptr %blockret, align 4, !dbg !3636
  br label %expr_block.exit1651, !dbg !3636

if.exit381:                                       ; preds = %and.phi114
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars382, ptr align 8 %chars, i32 16, i1 false)
  %207 = load i32, ptr %sign, align 4
  store i32 %207, ptr %sign383, align 4
  %ptradd385 = getelementptr inbounds i8, ptr %chars382, i64 8, !dbg !3637
  %208 = load i64, ptr %ptradd385, align 8, !dbg !3637
  %lt386 = icmp ult i64 0, %208, !dbg !3641
  br i1 %lt386, label %assert_ok, label %assert_fail, !dbg !3641

assert_fail:                                      ; preds = %if.exit381
  %209 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3641
  call void %209(ptr @.panic_msg.97, i64 34, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 486) #6, !dbg !3641
  unreachable, !dbg !3641

assert_ok:                                        ; preds = %if.exit381
    #dbg_declare(ptr %x387, !3642, !DIExpression(), !3643)
  call void @llvm.memset.p0.i64(ptr align 16 %x387, i8 0, i64 512, i1 false), !dbg !3643
    #dbg_declare(ptr %emax, !3644, !DIExpression(), !3645)
  store i32 128, ptr %emax, align 4, !dbg !3646
    #dbg_declare(ptr %index388, !3647, !DIExpression(), !3648)
  store i64 0, ptr %index388, align 8, !dbg !3648
    #dbg_declare(ptr %got_digit389, !3649, !DIExpression(), !3650)
  %ptradd390 = getelementptr inbounds i8, ptr %chars382, i64 8, !dbg !3651
  %210 = load i64, ptr %ptradd390, align 8, !dbg !3651
  %211 = load ptr, ptr %chars382, align 8, !dbg !3651
  %ge391 = icmp sge i64 0, %210, !dbg !3652
  %212 = call i1 @llvm.expect.i1(i1 %ge391, i1 false), !dbg !3652
  br i1 %212, label %panic392, label %checkok399, !dbg !3652

checkok399:                                       ; preds = %assert_ok
  %213 = load i8, ptr %211, align 1, !dbg !3652
  %eq400 = icmp eq i8 %213, 48, !dbg !3651
  %214 = zext i1 %eq400 to i8, !dbg !3651
  store i8 %214, ptr %got_digit389, align 1, !dbg !3651
    #dbg_declare(ptr %got_rad401, !3653, !DIExpression(), !3654)
  store i8 0, ptr %got_rad401, align 1, !dbg !3654
    #dbg_declare(ptr %lrp, !3655, !DIExpression(), !3656)
  store i64 0, ptr %lrp, align 8, !dbg !3656
    #dbg_declare(ptr %dc402, !3657, !DIExpression(), !3658)
  store i64 0, ptr %dc402, align 8, !dbg !3658
    #dbg_declare(ptr %k, !3659, !DIExpression(), !3660)
  store i32 0, ptr %k, align 4, !dbg !3660
    #dbg_declare(ptr %j, !3661, !DIExpression(), !3662)
  store i32 0, ptr %j, align 4, !dbg !3662
    #dbg_declare(ptr %lnz, !3663, !DIExpression(), !3664)
  store i32 0, ptr %lnz, align 4, !dbg !3664
    #dbg_declare(ptr %len403, !3665, !DIExpression(), !3666)
  %ptradd404 = getelementptr inbounds i8, ptr %chars382, i64 8, !dbg !3667
  %215 = load i64, ptr %ptradd404, align 8, !dbg !3667
  store i64 %215, ptr %len403, align 8, !dbg !3667
    #dbg_declare(ptr %last_char405, !3668, !DIExpression(), !3669)
  %216 = load i64, ptr %len403, align 8, !dbg !3670
  %sub406 = sub i64 %216, 1, !dbg !3670
  store i64 %sub406, ptr %last_char405, align 8, !dbg !3670
  %217 = load i64, ptr %len403, align 8, !dbg !3671
  %i2b407 = icmp ne i64 %217, 0, !dbg !3671
  br i1 %i2b407, label %assert_ok409, label %assert_fail408, !dbg !3671

assert_fail408:                                   ; preds = %checkok399
  %218 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3671
  call void %218(ptr @.panic_msg.98, i64 20, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 52) #6, !dbg !3671
  unreachable, !dbg !3671

assert_ok409:                                     ; preds = %checkok399
    #dbg_declare(ptr %c410, !3672, !DIExpression(), !3673)
  br label %loop.cond411, !dbg !3674

loop.cond411:                                     ; preds = %if.exit429, %assert_ok409
  %ptradd412 = getelementptr inbounds i8, ptr %chars382, i64 8, !dbg !3675
  %219 = load i64, ptr %ptradd412, align 8, !dbg !3675
  %220 = load ptr, ptr %chars382, align 8, !dbg !3675
  %221 = load i64, ptr %index388, align 8, !dbg !3677
  %ge413 = icmp uge i64 %221, %219, !dbg !3677
  %222 = call i1 @llvm.expect.i1(i1 %ge413, i1 false), !dbg !3677
  br i1 %222, label %panic414, label %checkok421, !dbg !3677

checkok421:                                       ; preds = %loop.cond411
  %ptradd422 = getelementptr inbounds i8, ptr %220, i64 %221, !dbg !3677
  %223 = load i8, ptr %ptradd422, align 1, !dbg !3677
  store i8 %223, ptr %c410, align 1, !dbg !3677
  %eq423 = icmp eq i8 %223, 48, !dbg !3678
  br i1 %eq423, label %loop.body424, label %loop.exit431, !dbg !3678

loop.body424:                                     ; preds = %checkok421
  %224 = load i64, ptr %index388, align 8, !dbg !3679
  %225 = load i64, ptr %last_char405, align 8, !dbg !3681
  %eq425 = icmp eq i64 %224, %225, !dbg !3679
  br i1 %eq425, label %if.then426, label %if.exit429, !dbg !3679

if.then426:                                       ; preds = %loop.body424
  %226 = load i32, ptr %sign383, align 4, !dbg !3682
  %sifp427 = sitofp i32 %226 to double, !dbg !3682
  %fmul428 = fmul double %sifp427, 0.000000e+00, !dbg !3682
  store double %fmul428, ptr %blockret384, align 8, !dbg !3682
  br label %expr_block.exit1649, !dbg !3682

if.exit429:                                       ; preds = %loop.body424
  %227 = load i64, ptr %index388, align 8, !dbg !3683
  %add430 = add i64 %227, 1, !dbg !3683
  store i64 %add430, ptr %index388, align 8, !dbg !3683
  br label %loop.cond411, !dbg !3683

loop.exit431:                                     ; preds = %checkok421
  %228 = load i8, ptr %c410, align 1, !dbg !3684
  %eq432 = icmp eq i8 %228, 46, !dbg !3684
  br i1 %eq432, label %if.then433, label %if.exit483, !dbg !3684

if.then433:                                       ; preds = %loop.exit431
  store i8 1, ptr %got_rad401, align 1, !dbg !3685
  %229 = load i64, ptr %index388, align 8, !dbg !3687
  %230 = load i64, ptr %last_char405, align 8, !dbg !3688
  %eq434 = icmp eq i64 %229, %230, !dbg !3687
  br i1 %eq434, label %if.then435, label %if.exit441, !dbg !3687

if.then435:                                       ; preds = %if.then433
  %231 = load i8, ptr %got_digit389, align 1, !dbg !3689
  %232 = trunc i8 %231 to i1, !dbg !3689
  %not436 = xor i1 %232, true, !dbg !3689
  br i1 %not436, label %if.then437, label %if.exit438, !dbg !3689

if.then437:                                       ; preds = %if.then435
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !3691
  br label %err_retblock, !dbg !3691

if.exit438:                                       ; preds = %if.then435
  %233 = load i32, ptr %sign383, align 4, !dbg !3692
  %sifp439 = sitofp i32 %233 to double, !dbg !3692
  %fmul440 = fmul double %sifp439, 0.000000e+00, !dbg !3692
  store double %fmul440, ptr %blockret384, align 8, !dbg !3692
  br label %expr_block.exit1649, !dbg !3692

if.exit441:                                       ; preds = %if.then433
  %234 = load i64, ptr %index388, align 8, !dbg !3693
  %235 = load i64, ptr %last_char405, align 8, !dbg !3694
  %neq442 = icmp ne i64 %234, %235, !dbg !3693
  br i1 %neq442, label %and.rhs443, label %and.phi457, !dbg !3693

and.rhs443:                                       ; preds = %if.exit441
  %ptradd444 = getelementptr inbounds i8, ptr %chars382, i64 8, !dbg !3695
  %236 = load i64, ptr %ptradd444, align 8, !dbg !3695
  %237 = load ptr, ptr %chars382, align 8, !dbg !3695
  %238 = load i64, ptr %index388, align 8, !dbg !3696
  %add445 = add i64 %238, 1, !dbg !3696
  store i64 %add445, ptr %index388, align 8, !dbg !3696
  %ge446 = icmp uge i64 %add445, %236, !dbg !3696
  %239 = call i1 @llvm.expect.i1(i1 %ge446, i1 false), !dbg !3696
  br i1 %239, label %panic447, label %checkok454, !dbg !3696

checkok454:                                       ; preds = %and.rhs443
  %ptradd455 = getelementptr inbounds i8, ptr %237, i64 %add445, !dbg !3697
  %240 = load i8, ptr %ptradd455, align 1, !dbg !3697
  store i8 %240, ptr %c410, align 1, !dbg !3697
  %eq456 = icmp eq i8 %240, 48, !dbg !3698
  br label %and.phi457, !dbg !3698

and.phi457:                                       ; preds = %checkok454, %if.exit441
  %val458 = phi i1 [ false, %if.exit441 ], [ %eq456, %checkok454 ], !dbg !3698
  br i1 %val458, label %if.then459, label %if.exit482, !dbg !3698

if.then459:                                       ; preds = %and.phi457
  %241 = load i64, ptr %lrp, align 8, !dbg !3699
  %sub460 = sub i64 %241, 1, !dbg !3699
  store i64 %sub460, ptr %lrp, align 8, !dbg !3699
  store i8 1, ptr %got_digit389, align 1, !dbg !3701
  br label %loop.cond461, !dbg !3702

loop.cond461:                                     ; preds = %loop.body479, %if.then459
  %242 = load i64, ptr %last_char405, align 8, !dbg !3703
  %243 = load i64, ptr %index388, align 8, !dbg !3705
  %neq462 = icmp ne i64 %242, %243, !dbg !3703
  br i1 %neq462, label %and.rhs463, label %and.phi477, !dbg !3703

and.rhs463:                                       ; preds = %loop.cond461
  %ptradd464 = getelementptr inbounds i8, ptr %chars382, i64 8, !dbg !3706
  %244 = load i64, ptr %ptradd464, align 8, !dbg !3706
  %245 = load ptr, ptr %chars382, align 8, !dbg !3706
  %246 = load i64, ptr %index388, align 8, !dbg !3707
  %add465 = add i64 %246, 1, !dbg !3707
  store i64 %add465, ptr %index388, align 8, !dbg !3707
  %ge466 = icmp uge i64 %add465, %244, !dbg !3707
  %247 = call i1 @llvm.expect.i1(i1 %ge466, i1 false), !dbg !3707
  br i1 %247, label %panic467, label %checkok474, !dbg !3707

checkok474:                                       ; preds = %and.rhs463
  %ptradd475 = getelementptr inbounds i8, ptr %245, i64 %add465, !dbg !3708
  %248 = load i8, ptr %ptradd475, align 1, !dbg !3708
  store i8 %248, ptr %c410, align 1, !dbg !3708
  %eq476 = icmp eq i8 %248, 48, !dbg !3709
  br label %and.phi477, !dbg !3709

and.phi477:                                       ; preds = %checkok474, %loop.cond461
  %val478 = phi i1 [ false, %loop.cond461 ], [ %eq476, %checkok474 ], !dbg !3709
  br i1 %val478, label %loop.body479, label %loop.exit481, !dbg !3709

loop.body479:                                     ; preds = %and.phi477
  %249 = load i64, ptr %lrp, align 8, !dbg !3710
  %sub480 = sub i64 %249, 1, !dbg !3710
  store i64 %sub480, ptr %lrp, align 8, !dbg !3710
  br label %loop.cond461, !dbg !3710

loop.exit481:                                     ; preds = %and.phi477
  br label %if.exit482, !dbg !3710

if.exit482:                                       ; preds = %loop.exit481, %and.phi457
  br label %if.exit483, !dbg !3710

if.exit483:                                       ; preds = %if.exit482, %loop.exit431
  br label %loop.cond484, !dbg !3712

loop.cond484:                                     ; preds = %checkok600, %if.exit483
  %250 = load i8, ptr %c410, align 1, !dbg !3713
  %zext485 = zext i8 %250 to i32, !dbg !3713
  %sub486 = sub i32 %zext485, 48, !dbg !3713
  %lt487 = icmp ult i32 %sub486, 10, !dbg !3713
  br i1 %lt487, label %or.phi490, label %or.rhs488, !dbg !3713

or.rhs488:                                        ; preds = %loop.cond484
  %251 = load i8, ptr %c410, align 1, !dbg !3715
  %eq489 = icmp eq i8 %251, 46, !dbg !3715
  br label %or.phi490, !dbg !3715

or.phi490:                                        ; preds = %or.rhs488, %loop.cond484
  %val491 = phi i1 [ true, %loop.cond484 ], [ %eq489, %or.rhs488 ], !dbg !3715
  br i1 %val491, label %loop.body492, label %loop.exit602, !dbg !3715

loop.body492:                                     ; preds = %or.phi490
  store i8 1, ptr %switch493, align 1
  br label %switch.entry494

switch.entry494:                                  ; preds = %loop.body492
  %252 = load i8, ptr %switch493, align 1
  %253 = trunc i8 %252 to i1
  %254 = load i8, ptr %c410, align 1, !dbg !3716
  %eq495 = icmp eq i8 %254, 46, !dbg !3716
  %eq496 = icmp eq i1 %eq495, %253, !dbg !3716
  br i1 %eq496, label %switch.case497, label %next_if500, !dbg !3716

switch.case497:                                   ; preds = %switch.entry494
  %255 = load i8, ptr %got_rad401, align 1, !dbg !3719
  %256 = trunc i8 %255 to i1, !dbg !3719
  br i1 %256, label %if.then498, label %if.exit499, !dbg !3719

if.then498:                                       ; preds = %switch.case497
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !3721
  br label %err_retblock, !dbg !3721

if.exit499:                                       ; preds = %switch.case497
  store i8 1, ptr %got_rad401, align 1, !dbg !3722
  %257 = load i64, ptr %dc402, align 8, !dbg !3723
  store i64 %257, ptr %lrp, align 8, !dbg !3723
  br label %switch.exit583, !dbg !3723

next_if500:                                       ; preds = %switch.entry494
  %258 = load i32, ptr %k, align 4, !dbg !3724
  %lt501 = icmp slt i32 %258, 125, !dbg !3724
  %eq502 = icmp eq i1 %lt501, %253, !dbg !3724
  br i1 %eq502, label %switch.case503, label %next_if576, !dbg !3724

switch.case503:                                   ; preds = %next_if500
  %259 = load i64, ptr %dc402, align 8, !dbg !3725
  %add504 = add i64 %259, 1, !dbg !3725
  store i64 %add504, ptr %dc402, align 8, !dbg !3725
  %260 = load i8, ptr %c410, align 1, !dbg !3727
  %neq505 = icmp ne i8 %260, 48, !dbg !3727
  br i1 %neq505, label %if.then506, label %if.exit508, !dbg !3727

if.then506:                                       ; preds = %switch.case503
  %261 = load i64, ptr %dc402, align 8, !dbg !3728
  %trunc507 = trunc i64 %261 to i32, !dbg !3728
  store i32 %trunc507, ptr %lnz, align 4, !dbg !3728
  br label %if.exit508, !dbg !3728

if.exit508:                                       ; preds = %if.then506, %switch.case503
  %262 = load i32, ptr %j, align 4, !dbg !3729
  %i2b509 = icmp ne i32 %262, 0, !dbg !3729
  br i1 %i2b509, label %if.then510, label %if.else549, !dbg !3729

if.then510:                                       ; preds = %if.exit508
  %263 = load i32, ptr %k, align 4, !dbg !3730
  %sext = sext i32 %263 to i64, !dbg !3730
  %lt511 = icmp slt i64 %sext, 0, !dbg !3730
  %264 = call i1 @llvm.expect.i1(i1 %lt511, i1 false), !dbg !3730
  br i1 %264, label %panic512, label %checkok517, !dbg !3730

checkok517:                                       ; preds = %if.then510
  %ge518 = icmp sge i64 %sext, 128, !dbg !3730
  %265 = call i1 @llvm.expect.i1(i1 %ge518, i1 false), !dbg !3730
  br i1 %265, label %panic519, label %checkok526, !dbg !3730

checkok526:                                       ; preds = %checkok517
  %ptroffset = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext, !dbg !3730
  %266 = load i32, ptr %k, align 4, !dbg !3732
  %sext527 = sext i32 %266 to i64, !dbg !3732
  %lt528 = icmp slt i64 %sext527, 0, !dbg !3732
  %267 = call i1 @llvm.expect.i1(i1 %lt528, i1 false), !dbg !3732
  br i1 %267, label %panic529, label %checkok534, !dbg !3732

checkok534:                                       ; preds = %checkok526
  %ge535 = icmp sge i64 %sext527, 128, !dbg !3732
  %268 = call i1 @llvm.expect.i1(i1 %ge535, i1 false), !dbg !3732
  br i1 %268, label %panic536, label %checkok543, !dbg !3732

checkok543:                                       ; preds = %checkok534
  %ptroffset544 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext527, !dbg !3732
  %269 = load i32, ptr %ptroffset544, align 4, !dbg !3732
  %mul545 = mul i32 %269, 10, !dbg !3733
  %270 = load i8, ptr %c410, align 1, !dbg !3734
  %zext546 = zext i8 %270 to i32, !dbg !3734
  %add547 = add i32 %mul545, %zext546, !dbg !3733
  %sub548 = sub i32 %add547, 48, !dbg !3733
  store i32 %sub548, ptr %ptroffset, align 4, !dbg !3733
  br label %if.exit570, !dbg !3733

if.else549:                                       ; preds = %if.exit508
  %271 = load i32, ptr %k, align 4, !dbg !3735
  %sext550 = sext i32 %271 to i64, !dbg !3735
  %lt551 = icmp slt i64 %sext550, 0, !dbg !3735
  %272 = call i1 @llvm.expect.i1(i1 %lt551, i1 false), !dbg !3735
  br i1 %272, label %panic552, label %checkok557, !dbg !3735

checkok557:                                       ; preds = %if.else549
  %ge558 = icmp sge i64 %sext550, 128, !dbg !3735
  %273 = call i1 @llvm.expect.i1(i1 %ge558, i1 false), !dbg !3735
  br i1 %273, label %panic559, label %checkok566, !dbg !3735

checkok566:                                       ; preds = %checkok557
  %ptroffset567 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext550, !dbg !3735
  %274 = load i8, ptr %c410, align 1, !dbg !3737
  %zext568 = zext i8 %274 to i32, !dbg !3737
  %sub569 = sub i32 %zext568, 48, !dbg !3737
  store i32 %sub569, ptr %ptroffset567, align 4, !dbg !3737
  br label %if.exit570, !dbg !3737

if.exit570:                                       ; preds = %checkok566, %checkok543
  %275 = load i32, ptr %j, align 4, !dbg !3738
  %add571 = add i32 %275, 1, !dbg !3738
  store i32 %add571, ptr %j, align 4, !dbg !3738
  %eq572 = icmp eq i32 %add571, 9, !dbg !3739
  br i1 %eq572, label %if.then573, label %if.exit575, !dbg !3739

if.then573:                                       ; preds = %if.exit570
  %276 = load i32, ptr %k, align 4, !dbg !3740
  %add574 = add i32 %276, 1, !dbg !3740
  store i32 %add574, ptr %k, align 4, !dbg !3740
  store i32 0, ptr %j, align 4, !dbg !3742
  br label %if.exit575, !dbg !3742

if.exit575:                                       ; preds = %if.then573, %if.exit570
  store i8 1, ptr %got_digit389, align 1, !dbg !3743
  br label %switch.exit583, !dbg !3743

next_if576:                                       ; preds = %next_if500
  br label %switch.default, !dbg !3743

switch.default:                                   ; preds = %next_if576
  %277 = load i64, ptr %dc402, align 8, !dbg !3744
  %add577 = add i64 %277, 1, !dbg !3744
  store i64 %add577, ptr %dc402, align 8, !dbg !3744
  %278 = load i8, ptr %c410, align 1, !dbg !3746
  %neq578 = icmp ne i8 %278, 48, !dbg !3746
  br i1 %neq578, label %if.then579, label %if.exit582, !dbg !3746

if.then579:                                       ; preds = %switch.default
  %ptradd580 = getelementptr inbounds i8, ptr %x387, i64 496, !dbg !3747
  %279 = load i32, ptr %ptradd580, align 4, !dbg !3747
  %or581 = or i32 %279, 1, !dbg !3748
  store i32 %or581, ptr %ptradd580, align 4, !dbg !3748
  br label %if.exit582, !dbg !3748

if.exit582:                                       ; preds = %if.then579, %switch.default
  br label %switch.exit583, !dbg !3748

switch.exit583:                                   ; preds = %if.exit582, %if.exit575, %if.exit499
  %280 = load i64, ptr %index388, align 8, !dbg !3749
  %281 = load i64, ptr %last_char405, align 8, !dbg !3750
  %eq584 = icmp eq i64 %280, %281, !dbg !3749
  br i1 %eq584, label %if.then585, label %if.exit586, !dbg !3749

if.then585:                                       ; preds = %switch.exit583
  br label %loop.exit602, !dbg !3751

if.exit586:                                       ; preds = %switch.exit583
  %282 = load i64, ptr %index388, align 8, !dbg !3752
  %283 = load i64, ptr %last_char405, align 8, !dbg !3753
  %lt587 = icmp ult i64 %282, %283, !dbg !3752
  br i1 %lt587, label %assert_ok589, label %assert_fail588, !dbg !3752

assert_fail588:                                   ; preds = %if.exit586
  %284 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3752
  call void %284(ptr @.panic_msg.99, i64 34, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 112) #6, !dbg !3752
  unreachable, !dbg !3752

assert_ok589:                                     ; preds = %if.exit586
  %ptradd590 = getelementptr inbounds i8, ptr %chars382, i64 8, !dbg !3754
  %285 = load i64, ptr %ptradd590, align 8, !dbg !3754
  %286 = load ptr, ptr %chars382, align 8, !dbg !3754
  %287 = load i64, ptr %index388, align 8, !dbg !3755
  %add591 = add i64 %287, 1, !dbg !3755
  store i64 %add591, ptr %index388, align 8, !dbg !3755
  %ge592 = icmp uge i64 %add591, %285, !dbg !3755
  %288 = call i1 @llvm.expect.i1(i1 %ge592, i1 false), !dbg !3755
  br i1 %288, label %panic593, label %checkok600, !dbg !3755

checkok600:                                       ; preds = %assert_ok589
  %ptradd601 = getelementptr inbounds i8, ptr %286, i64 %add591, !dbg !3756
  %289 = load i8, ptr %ptradd601, align 1, !dbg !3756
  store i8 %289, ptr %c410, align 1, !dbg !3756
  br label %loop.cond484, !dbg !3756

loop.exit602:                                     ; preds = %if.then585, %or.phi490
  %290 = load i8, ptr %got_rad401, align 1, !dbg !3757
  %291 = trunc i8 %290 to i1, !dbg !3757
  %not603 = xor i1 %291, true, !dbg !3757
  br i1 %not603, label %if.then604, label %if.exit605, !dbg !3757

if.then604:                                       ; preds = %loop.exit602
  %292 = load i64, ptr %dc402, align 8, !dbg !3758
  store i64 %292, ptr %lrp, align 8, !dbg !3758
  br label %if.exit605, !dbg !3758

if.exit605:                                       ; preds = %if.then604, %loop.exit602
  %293 = load i8, ptr %got_digit389, align 1, !dbg !3759
  %294 = trunc i8 %293 to i1, !dbg !3759
  %not606 = xor i1 %294, true, !dbg !3759
  br i1 %not606, label %if.then607, label %if.exit608, !dbg !3759

if.then607:                                       ; preds = %if.exit605
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !3760
  br label %err_retblock, !dbg !3760

if.exit608:                                       ; preds = %if.exit605
  %295 = load i8, ptr %c410, align 1, !dbg !3761
  %zext609 = zext i8 %295 to i32, !dbg !3761
  %or610 = or i32 %zext609, 32, !dbg !3761
  %eq611 = icmp eq i32 %or610, 101, !dbg !3761
  %check612 = icmp sge i32 %or610, 0, !dbg !3761
  %siui-eq613 = and i1 %check612, %eq611, !dbg !3761
  br i1 %siui-eq613, label %if.then614, label %if.else645, !dbg !3761

if.then614:                                       ; preds = %if.exit608
  %296 = load i64, ptr %last_char405, align 8, !dbg !3762
  %297 = load i64, ptr %index388, align 8, !dbg !3764
  %eq615 = icmp eq i64 %296, %297, !dbg !3762
  br i1 %eq615, label %if.then616, label %if.exit617, !dbg !3762

if.then616:                                       ; preds = %if.then614
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !3765
  br label %err_retblock, !dbg !3765

if.exit617:                                       ; preds = %if.then614
    #dbg_declare(ptr %e10, !3766, !DIExpression(), !3767)
  %298 = load %"char[]", ptr %chars382, align 8, !dbg !3768
  %299 = extractvalue %"char[]" %298, 0, !dbg !3768
  %300 = load i64, ptr %index388, align 8, !dbg !3769
  %add618 = add i64 %300, 1, !dbg !3769
  %301 = extractvalue %"char[]" %298, 1, !dbg !3769
  %gt619 = icmp sgt i64 %add618, %301, !dbg !3769
  %302 = call i1 @llvm.expect.i1(i1 %gt619, i1 false), !dbg !3769
  br i1 %302, label %panic620, label %checkok627, !dbg !3769

checkok627:                                       ; preds = %if.exit617
  %underflow628 = icmp slt i64 %add618, 0, !dbg !3770
  %303 = call i1 @llvm.expect.i1(i1 %underflow628, i1 false), !dbg !3770
  br i1 %303, label %panic629, label %checkok634, !dbg !3770

checkok634:                                       ; preds = %checkok627
  %size635 = sub i64 %301, %add618, !dbg !3769
  %ptradd636 = getelementptr inbounds i8, ptr %299, i64 %add618, !dbg !3769
  %304 = insertvalue %"char[]" undef, ptr %ptradd636, 0, !dbg !3769
  %305 = insertvalue %"char[]" %304, i64 %size635, 1, !dbg !3769
  %306 = call i64 @std.core.String.to_long(ptr %retparam637, ptr %ptradd636, i64 %size635, i32 10), !dbg !3771
  %not_err638 = icmp eq i64 %306, 0, !dbg !3771
  %307 = call i1 @llvm.expect.i1(i1 %not_err638, i1 true), !dbg !3771
  br i1 %307, label %after_check639, label %else_block640, !dbg !3771

after_check639:                                   ; preds = %checkok634
  %308 = load i64, ptr %retparam637, align 8, !dbg !3771
  br label %phi_block643, !dbg !3771

else_block640:                                    ; preds = %checkok634
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %error_var641, align 8, !dbg !3772
  br label %guard_block642, !dbg !3772

guard_block642:                                   ; preds = %else_block640
  %309 = load i64, ptr %error_var641, align 8, !dbg !3772
  store i64 %309, ptr %reterr, align 8, !dbg !3772
  br label %err_retblock, !dbg !3772

phi_block643:                                     ; preds = %after_check639
  store i64 %308, ptr %e10, align 8, !dbg !3772
  %310 = load i64, ptr %lrp, align 8, !dbg !3773
  %311 = load i64, ptr %e10, align 8, !dbg !3774
  %add644 = add i64 %310, %311, !dbg !3773
  store i64 %add644, ptr %lrp, align 8, !dbg !3773
  br label %if.exit649, !dbg !3773

if.else645:                                       ; preds = %if.exit608
  %312 = load i64, ptr %index388, align 8, !dbg !3775
  %313 = load i64, ptr %last_char405, align 8, !dbg !3776
  %neq646 = icmp ne i64 %312, %313, !dbg !3775
  br i1 %neq646, label %if.then647, label %if.exit648, !dbg !3775

if.then647:                                       ; preds = %if.else645
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !3777
  br label %err_retblock, !dbg !3777

if.exit648:                                       ; preds = %if.else645
  br label %if.exit649, !dbg !3777

if.exit649:                                       ; preds = %if.exit648, %phi_block643
  %314 = load i32, ptr %x387, align 4, !dbg !3779
  %i2nb650 = icmp eq i32 %314, 0, !dbg !3779
  br i1 %i2nb650, label %if.then651, label %if.exit654, !dbg !3779

if.then651:                                       ; preds = %if.exit649
  %315 = load i32, ptr %sign383, align 4, !dbg !3780
  %sifp652 = sitofp i32 %315 to double, !dbg !3780
  %fmul653 = fmul double %sifp652, 0.000000e+00, !dbg !3780
  store double %fmul653, ptr %blockret384, align 8, !dbg !3780
  br label %expr_block.exit1649, !dbg !3780

if.exit654:                                       ; preds = %if.exit649
  %316 = load i64, ptr %lrp, align 8, !dbg !3781
  %317 = load i64, ptr %dc402, align 8, !dbg !3782
  %eq655 = icmp eq i64 %316, %317, !dbg !3781
  br i1 %eq655, label %and.rhs656, label %and.phi658, !dbg !3781

and.rhs656:                                       ; preds = %if.exit654
  %318 = load i64, ptr %dc402, align 8, !dbg !3783
  %lt657 = icmp slt i64 %318, 10, !dbg !3783
  br label %and.phi658, !dbg !3783

and.phi658:                                       ; preds = %and.rhs656, %if.exit654
  %val659 = phi i1 [ false, %if.exit654 ], [ %lt657, %and.rhs656 ], !dbg !3783
  br i1 %val659, label %and.rhs660, label %and.phi666, !dbg !3783

and.rhs660:                                       ; preds = %and.phi658
  br i1 false, label %or.phi664, label %or.rhs661, !dbg !3784

or.rhs661:                                        ; preds = %and.rhs660
  %319 = load i32, ptr %x387, align 4, !dbg !3785
  %zext662 = zext i32 %319 to i64, !dbg !3785
  %lshr = lshr i64 %zext662, 24, !dbg !3786
  %320 = freeze i64 %lshr, !dbg !3786
  %eq663 = icmp eq i64 0, %320, !dbg !3786
  br label %or.phi664, !dbg !3786

or.phi664:                                        ; preds = %or.rhs661, %and.rhs660
  %val665 = phi i1 [ true, %and.rhs660 ], [ %eq663, %or.rhs661 ], !dbg !3786
  br label %and.phi666, !dbg !3786

and.phi666:                                       ; preds = %or.phi664, %and.phi658
  %val667 = phi i1 [ false, %and.phi658 ], [ %val665, %or.phi664 ], !dbg !3786
  br i1 %val667, label %if.then668, label %if.exit672, !dbg !3786

if.then668:                                       ; preds = %and.phi666
  %321 = load i32, ptr %sign383, align 4, !dbg !3787
  %sifp669 = sitofp i32 %321 to double, !dbg !3787
  %322 = load i32, ptr %x387, align 4, !dbg !3788
  %uifp670 = uitofp i32 %322 to double, !dbg !3788
  %fmul671 = fmul double %sifp669, %uifp670, !dbg !3787
  store double %fmul671, ptr %blockret384, align 8, !dbg !3787
  br label %expr_block.exit1649, !dbg !3787

if.exit672:                                       ; preds = %and.phi666
  %323 = load i64, ptr %lrp, align 8, !dbg !3789
  %gt673 = icmp sgt i64 %323, 74, !dbg !3789
  br i1 %gt673, label %if.then674, label %if.exit675, !dbg !3789

if.then674:                                       ; preds = %if.exit672
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !3790
  br label %err_retblock, !dbg !3790

if.exit675:                                       ; preds = %if.exit672
  %324 = load i64, ptr %lrp, align 8, !dbg !3791
  %lt676 = icmp slt i64 %324, -255, !dbg !3791
  br i1 %lt676, label %if.then677, label %if.exit678, !dbg !3791

if.then677:                                       ; preds = %if.exit675
  store i64 ptrtoint (ptr @std.core.string.FLOAT_OUT_OF_RANGE to i64), ptr %reterr, align 8, !dbg !3792
  br label %err_retblock, !dbg !3792

if.exit678:                                       ; preds = %if.exit675
  %325 = load i32, ptr %j, align 4, !dbg !3793
  %i2b679 = icmp ne i32 %325, 0, !dbg !3793
  br i1 %i2b679, label %if.then680, label %if.exit706, !dbg !3793

if.then680:                                       ; preds = %if.exit678
  br label %loop.cond681, !dbg !3794

loop.cond681:                                     ; preds = %checkok700, %if.then680
  %326 = load i32, ptr %j, align 4, !dbg !3796
  %lt682 = icmp slt i32 %326, 9, !dbg !3796
  br i1 %lt682, label %loop.body683, label %loop.exit704, !dbg !3796

loop.body683:                                     ; preds = %loop.cond681
  %327 = load i32, ptr %k, align 4, !dbg !3798
  %sext684 = sext i32 %327 to i64, !dbg !3798
  %lt685 = icmp slt i64 %sext684, 0, !dbg !3798
  %328 = call i1 @llvm.expect.i1(i1 %lt685, i1 false), !dbg !3798
  br i1 %328, label %panic686, label %checkok691, !dbg !3798

checkok691:                                       ; preds = %loop.body683
  %ge692 = icmp sge i64 %sext684, 128, !dbg !3798
  %329 = call i1 @llvm.expect.i1(i1 %ge692, i1 false), !dbg !3798
  br i1 %329, label %panic693, label %checkok700, !dbg !3798

checkok700:                                       ; preds = %checkok691
  %ptroffset701 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext684, !dbg !3798
  %330 = load i32, ptr %ptroffset701, align 4, !dbg !3798
  %mul702 = mul i32 %330, 10, !dbg !3799
  store i32 %mul702, ptr %ptroffset701, align 4, !dbg !3799
  %331 = load i32, ptr %j, align 4, !dbg !3800
  %add703 = add i32 %331, 1, !dbg !3800
  store i32 %add703, ptr %j, align 4, !dbg !3800
  br label %loop.cond681, !dbg !3800

loop.exit704:                                     ; preds = %loop.cond681
  %332 = load i32, ptr %k, align 4, !dbg !3801
  %add705 = add i32 %332, 1, !dbg !3801
  store i32 %add705, ptr %k, align 4, !dbg !3801
  store i32 0, ptr %j, align 4, !dbg !3802
  br label %if.exit706, !dbg !3802

if.exit706:                                       ; preds = %loop.exit704, %if.exit678
    #dbg_declare(ptr %a, !3803, !DIExpression(), !3804)
  store i32 0, ptr %a, align 4, !dbg !3804
    #dbg_declare(ptr %z, !3805, !DIExpression(), !3806)
  %333 = load i32, ptr %k, align 4, !dbg !3807
  store i32 %333, ptr %z, align 4, !dbg !3807
    #dbg_declare(ptr %e2707, !3808, !DIExpression(), !3809)
  store i32 0, ptr %e2707, align 4, !dbg !3809
    #dbg_declare(ptr %rp708, !3810, !DIExpression(), !3811)
  %334 = load i64, ptr %lrp, align 8, !dbg !3812
  store i64 %334, ptr %rp708, align 8, !dbg !3812
  %335 = load i32, ptr %lnz, align 4, !dbg !3813
  %lt709 = icmp slt i32 %335, 9, !dbg !3813
  br i1 %lt709, label %and.rhs710, label %and.phi712, !dbg !3813

and.rhs710:                                       ; preds = %if.exit706
  %336 = load i32, ptr %lnz, align 4, !dbg !3814
  %sext711 = sext i32 %336 to i64, !dbg !3814
  %337 = load i64, ptr %rp708, align 8, !dbg !3815
  %le = icmp sle i64 %sext711, %337, !dbg !3814
  br label %and.phi712, !dbg !3814

and.phi712:                                       ; preds = %and.rhs710, %if.exit706
  %val713 = phi i1 [ false, %if.exit706 ], [ %le, %and.rhs710 ], !dbg !3814
  br i1 %val713, label %and.rhs714, label %and.phi716, !dbg !3814

and.rhs714:                                       ; preds = %and.phi712
  %338 = load i64, ptr %rp708, align 8, !dbg !3816
  %lt715 = icmp slt i64 %338, 18, !dbg !3816
  br label %and.phi716, !dbg !3816

and.phi716:                                       ; preds = %and.rhs714, %and.phi712
  %val717 = phi i1 [ false, %and.phi712 ], [ %lt715, %and.rhs714 ], !dbg !3816
  br i1 %val717, label %if.then718, label %if.exit794, !dbg !3816

if.then718:                                       ; preds = %and.phi716
  %339 = load i64, ptr %rp708, align 8, !dbg !3817
  %eq719 = icmp eq i64 %339, 9, !dbg !3817
  br i1 %eq719, label %if.then720, label %if.exit724, !dbg !3817

if.then720:                                       ; preds = %if.then718
  %340 = load i32, ptr %sign383, align 4, !dbg !3819
  %sifp721 = sitofp i32 %340 to double, !dbg !3819
  %341 = load i32, ptr %x387, align 4, !dbg !3820
  %uifp722 = uitofp i32 %341 to double, !dbg !3820
  %fmul723 = fmul double %sifp721, %uifp722, !dbg !3819
  store double %fmul723, ptr %blockret384, align 8, !dbg !3819
  br label %expr_block.exit1649, !dbg !3819

if.exit724:                                       ; preds = %if.then718
  %342 = load i64, ptr %rp708, align 8, !dbg !3821
  %lt725 = icmp slt i64 %342, 9, !dbg !3821
  br i1 %lt725, label %if.then726, label %if.exit752, !dbg !3821

if.then726:                                       ; preds = %if.exit724
  %343 = load i32, ptr %sign383, align 4, !dbg !3822
  %sifp727 = sitofp i32 %343 to double, !dbg !3822
  %344 = load i32, ptr %x387, align 4, !dbg !3823
  %uifp728 = uitofp i32 %344 to double, !dbg !3823
  %fmul729 = fmul double %sifp727, %uifp728, !dbg !3822
  %345 = load i64, ptr %rp708, align 8, !dbg !3824
  %sub730 = sub i64 8, %345, !dbg !3825
  %lt731 = icmp slt i64 %sub730, 0, !dbg !3825
  %346 = call i1 @llvm.expect.i1(i1 %lt731, i1 false), !dbg !3825
  br i1 %346, label %panic732, label %checkok737, !dbg !3825

checkok737:                                       ; preds = %if.then726
  %ge738 = icmp sge i64 %sub730, 8, !dbg !3825
  %347 = call i1 @llvm.expect.i1(i1 %ge738, i1 false), !dbg !3825
  br i1 %347, label %panic739, label %checkok746, !dbg !3825

checkok746:                                       ; preds = %checkok737
  %ptroffset747 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub730, !dbg !3825
  %348 = load i32, ptr %ptroffset747, align 4, !dbg !3825
  %sifp748 = sitofp i32 %348 to double, !dbg !3825
  %zero = fcmp ueq double %sifp748, 0.000000e+00, !dbg !3822
  %349 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !3822
  br i1 %349, label %panic749, label %checkok750, !dbg !3822

checkok750:                                       ; preds = %checkok746
  %fdiv751 = fdiv double %fmul729, %sifp748, !dbg !3822
  store double %fdiv751, ptr %blockret384, align 8, !dbg !3822
  br label %expr_block.exit1649, !dbg !3822

if.exit752:                                       ; preds = %if.exit724
    #dbg_declare(ptr %bitlim, !3826, !DIExpression(), !3827)
  %350 = load i64, ptr %rp708, align 8, !dbg !3828
  %sub753 = sub i64 %350, 9, !dbg !3829
  %trunc754 = trunc i64 %sub753 to i32, !dbg !3829
  %mul755 = mul i32 3, %trunc754, !dbg !3830
  %sub756 = sub i32 24, %mul755, !dbg !3831
  store i32 %sub756, ptr %bitlim, align 4, !dbg !3831
  %351 = load i32, ptr %bitlim, align 4, !dbg !3832
  %gt757 = icmp sgt i32 %351, 30, !dbg !3832
  br i1 %gt757, label %or.phi767, label %or.rhs758, !dbg !3832

or.rhs758:                                        ; preds = %if.exit752
  %352 = load i32, ptr %x387, align 4, !dbg !3833
  %353 = load i32, ptr %bitlim, align 4, !dbg !3834
  %shift_exceeds = icmp uge i32 %353, 32, !dbg !3835
  %354 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !3835
  br i1 %354, label %panic759, label %checkok764, !dbg !3835

checkok764:                                       ; preds = %or.rhs758
  %lshr765 = lshr i32 %352, %353, !dbg !3835
  %355 = freeze i32 %lshr765, !dbg !3835
  %eq766 = icmp eq i32 0, %355, !dbg !3835
  br label %or.phi767, !dbg !3835

or.phi767:                                        ; preds = %checkok764, %if.exit752
  %val768 = phi i1 [ true, %if.exit752 ], [ %eq766, %checkok764 ], !dbg !3835
  br i1 %val768, label %if.then769, label %if.exit793, !dbg !3835

if.then769:                                       ; preds = %or.phi767
  %356 = load i32, ptr %sign383, align 4, !dbg !3836
  %sifp770 = sitofp i32 %356 to double, !dbg !3836
  %357 = load i32, ptr %x387, align 4, !dbg !3837
  %uifp771 = uitofp i32 %357 to double, !dbg !3837
  %fmul772 = fmul double %sifp770, %uifp771, !dbg !3836
  %358 = load i64, ptr %rp708, align 8, !dbg !3838
  %sub773 = sub i64 %358, 10, !dbg !3838
  %lt774 = icmp slt i64 %sub773, 0, !dbg !3838
  %359 = call i1 @llvm.expect.i1(i1 %lt774, i1 false), !dbg !3838
  br i1 %359, label %panic775, label %checkok780, !dbg !3838

checkok780:                                       ; preds = %if.then769
  %ge781 = icmp sge i64 %sub773, 8, !dbg !3838
  %360 = call i1 @llvm.expect.i1(i1 %ge781, i1 false), !dbg !3838
  br i1 %360, label %panic782, label %checkok789, !dbg !3838

checkok789:                                       ; preds = %checkok780
  %ptroffset790 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub773, !dbg !3838
  %361 = load i32, ptr %ptroffset790, align 4, !dbg !3838
  %sifp791 = sitofp i32 %361 to double, !dbg !3838
  %fmul792 = fmul double %fmul772, %sifp791, !dbg !3836
  store double %fmul792, ptr %blockret384, align 8, !dbg !3836
  br label %expr_block.exit1649, !dbg !3836

if.exit793:                                       ; preds = %or.phi767
  br label %if.exit794, !dbg !3836

if.exit794:                                       ; preds = %if.exit793, %and.phi716
  %362 = load i64, ptr %rp708, align 8, !dbg !3839
  %smod = srem i64 %362, 9, !dbg !3839
  %i2b795 = icmp ne i64 %smod, 0, !dbg !3839
  br i1 %i2b795, label %if.then796, label %if.exit947, !dbg !3839

if.then796:                                       ; preds = %if.exit794
    #dbg_declare(ptr %rpm9, !3840, !DIExpression(), !3842)
  %363 = load i64, ptr %rp708, align 8, !dbg !3843
  %ge797 = icmp sge i64 %363, 0, !dbg !3843
  br i1 %ge797, label %cond.lhs798, label %cond.rhs800, !dbg !3843

cond.lhs798:                                      ; preds = %if.then796
  %364 = load i64, ptr %rp708, align 8, !dbg !3844
  %smod799 = srem i64 %364, 9, !dbg !3844
  br label %cond.phi803, !dbg !3844

cond.rhs800:                                      ; preds = %if.then796
  %365 = load i64, ptr %rp708, align 8, !dbg !3845
  %smod801 = srem i64 %365, 9, !dbg !3845
  %add802 = add i64 %smod801, 9, !dbg !3845
  br label %cond.phi803, !dbg !3845

cond.phi803:                                      ; preds = %cond.rhs800, %cond.lhs798
  %val804 = phi i64 [ %smod799, %cond.lhs798 ], [ %add802, %cond.rhs800 ], !dbg !3845
  store i64 %val804, ptr %rpm9, align 8, !dbg !3845
    #dbg_declare(ptr %p10, !3846, !DIExpression(), !3847)
  %366 = load i64, ptr %rpm9, align 8, !dbg !3848
  %sub805 = sub i64 8, %366, !dbg !3849
  %lt806 = icmp slt i64 %sub805, 0, !dbg !3849
  %367 = call i1 @llvm.expect.i1(i1 %lt806, i1 false), !dbg !3849
  br i1 %367, label %panic807, label %checkok812, !dbg !3849

checkok812:                                       ; preds = %cond.phi803
  %ge813 = icmp sge i64 %sub805, 8, !dbg !3849
  %368 = call i1 @llvm.expect.i1(i1 %ge813, i1 false), !dbg !3849
  br i1 %368, label %panic814, label %checkok821, !dbg !3849

checkok821:                                       ; preds = %checkok812
  %ptroffset822 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub805, !dbg !3849
  %369 = load i32, ptr %ptroffset822, align 4, !dbg !3849
  store i32 %369, ptr %p10, align 4, !dbg !3849
    #dbg_declare(ptr %carry, !3850, !DIExpression(), !3851)
  store i32 0, ptr %carry, align 4, !dbg !3852
  %370 = load i32, ptr %a, align 4, !dbg !3853
  store i32 %370, ptr %k, align 4, !dbg !3853
  br label %loop.cond823, !dbg !3853

loop.cond823:                                     ; preds = %if.exit920, %checkok821
  %371 = load i32, ptr %k, align 4, !dbg !3855
  %372 = load i32, ptr %z, align 4, !dbg !3856
  %neq824 = icmp ne i32 %371, %372, !dbg !3855
  br i1 %neq824, label %loop.body825, label %loop.exit922, !dbg !3855

loop.body825:                                     ; preds = %loop.cond823
    #dbg_declare(ptr %tmp, !3857, !DIExpression(), !3859)
  %373 = load i32, ptr %k, align 4, !dbg !3860
  %sext826 = sext i32 %373 to i64, !dbg !3860
  %lt827 = icmp slt i64 %sext826, 0, !dbg !3860
  %374 = call i1 @llvm.expect.i1(i1 %lt827, i1 false), !dbg !3860
  br i1 %374, label %panic828, label %checkok833, !dbg !3860

checkok833:                                       ; preds = %loop.body825
  %ge834 = icmp sge i64 %sext826, 128, !dbg !3860
  %375 = call i1 @llvm.expect.i1(i1 %ge834, i1 false), !dbg !3860
  br i1 %375, label %panic835, label %checkok842, !dbg !3860

checkok842:                                       ; preds = %checkok833
  %ptroffset843 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext826, !dbg !3860
  %376 = load i32, ptr %ptroffset843, align 4, !dbg !3860
  %377 = load i32, ptr %p10, align 4, !dbg !3861
  %zero844 = icmp eq i32 %377, 0, !dbg !3862
  %378 = call i1 @llvm.expect.i1(i1 %zero844, i1 false), !dbg !3862
  br i1 %378, label %panic845, label %checkok846, !dbg !3862

checkok846:                                       ; preds = %checkok842
  %smod847 = srem i32 %376, %377, !dbg !3862
  store i32 %smod847, ptr %tmp, align 4, !dbg !3862
  %379 = load i32, ptr %k, align 4, !dbg !3863
  %sext848 = sext i32 %379 to i64, !dbg !3863
  %lt849 = icmp slt i64 %sext848, 0, !dbg !3863
  %380 = call i1 @llvm.expect.i1(i1 %lt849, i1 false), !dbg !3863
  br i1 %380, label %panic850, label %checkok855, !dbg !3863

checkok855:                                       ; preds = %checkok846
  %ge856 = icmp sge i64 %sext848, 128, !dbg !3863
  %381 = call i1 @llvm.expect.i1(i1 %ge856, i1 false), !dbg !3863
  br i1 %381, label %panic857, label %checkok864, !dbg !3863

checkok864:                                       ; preds = %checkok855
  %ptroffset865 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext848, !dbg !3863
  %382 = load i32, ptr %k, align 4, !dbg !3864
  %sext866 = sext i32 %382 to i64, !dbg !3864
  %lt867 = icmp slt i64 %sext866, 0, !dbg !3864
  %383 = call i1 @llvm.expect.i1(i1 %lt867, i1 false), !dbg !3864
  br i1 %383, label %panic868, label %checkok873, !dbg !3864

checkok873:                                       ; preds = %checkok864
  %ge874 = icmp sge i64 %sext866, 128, !dbg !3864
  %384 = call i1 @llvm.expect.i1(i1 %ge874, i1 false), !dbg !3864
  br i1 %384, label %panic875, label %checkok882, !dbg !3864

checkok882:                                       ; preds = %checkok873
  %ptroffset883 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext866, !dbg !3864
  %385 = load i32, ptr %ptroffset883, align 4, !dbg !3864
  %386 = load i32, ptr %p10, align 4, !dbg !3865
  %zero884 = icmp eq i32 %386, 0, !dbg !3866
  %387 = call i1 @llvm.expect.i1(i1 %zero884, i1 false), !dbg !3866
  br i1 %387, label %panic885, label %checkok886, !dbg !3866

checkok886:                                       ; preds = %checkok882
  %sdiv = sdiv i32 %385, %386, !dbg !3866
  %388 = load i32, ptr %carry, align 4, !dbg !3867
  %add887 = add i32 %sdiv, %388, !dbg !3866
  store i32 %add887, ptr %ptroffset865, align 4, !dbg !3866
  %389 = load i32, ptr %p10, align 4, !dbg !3868
  %zero888 = icmp eq i32 %389, 0, !dbg !3869
  %390 = call i1 @llvm.expect.i1(i1 %zero888, i1 false), !dbg !3869
  br i1 %390, label %panic889, label %checkok890, !dbg !3869

checkok890:                                       ; preds = %checkok886
  %sdiv891 = sdiv i32 1000000000, %389, !dbg !3869
  %391 = load i32, ptr %tmp, align 4, !dbg !3870
  %mul892 = mul i32 %sdiv891, %391, !dbg !3869
  store i32 %mul892, ptr %carry, align 4, !dbg !3869
  %392 = load i32, ptr %k, align 4, !dbg !3871
  %393 = load i32, ptr %a, align 4, !dbg !3872
  %eq893 = icmp eq i32 %392, %393, !dbg !3871
  br i1 %eq893, label %and.rhs894, label %and.phi914, !dbg !3871

and.rhs894:                                       ; preds = %checkok890
  %394 = load i32, ptr %k, align 4, !dbg !3873
  %sext895 = sext i32 %394 to i64, !dbg !3873
  %lt896 = icmp slt i64 %sext895, 0, !dbg !3873
  %395 = call i1 @llvm.expect.i1(i1 %lt896, i1 false), !dbg !3873
  br i1 %395, label %panic897, label %checkok902, !dbg !3873

checkok902:                                       ; preds = %and.rhs894
  %ge903 = icmp sge i64 %sext895, 128, !dbg !3873
  %396 = call i1 @llvm.expect.i1(i1 %ge903, i1 false), !dbg !3873
  br i1 %396, label %panic904, label %checkok911, !dbg !3873

checkok911:                                       ; preds = %checkok902
  %ptroffset912 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext895, !dbg !3873
  %397 = load i32, ptr %ptroffset912, align 4, !dbg !3873
  %i2nb913 = icmp eq i32 %397, 0, !dbg !3873
  br label %and.phi914, !dbg !3873

and.phi914:                                       ; preds = %checkok911, %checkok890
  %val915 = phi i1 [ false, %checkok890 ], [ %i2nb913, %checkok911 ], !dbg !3873
  br i1 %val915, label %if.then916, label %if.exit920, !dbg !3873

if.then916:                                       ; preds = %and.phi914
  %398 = load i32, ptr %a, align 4, !dbg !3874
  %add917 = add i32 %398, 1, !dbg !3874
  %and918 = and i32 %add917, 127, !dbg !3874
  store i32 %and918, ptr %a, align 4, !dbg !3874
  %399 = load i64, ptr %rp708, align 8, !dbg !3876
  %sub919 = sub i64 %399, 9, !dbg !3876
  store i64 %sub919, ptr %rp708, align 8, !dbg !3876
  br label %if.exit920, !dbg !3876

if.exit920:                                       ; preds = %if.then916, %and.phi914
  %400 = load i32, ptr %k, align 4, !dbg !3877
  %add921 = add i32 %400, 1, !dbg !3877
  store i32 %add921, ptr %k, align 4, !dbg !3877
  br label %loop.cond823, !dbg !3877

loop.exit922:                                     ; preds = %loop.cond823
  %401 = load i32, ptr %carry, align 4, !dbg !3878
  %i2b923 = icmp ne i32 %401, 0, !dbg !3878
  br i1 %i2b923, label %if.then924, label %if.exit944, !dbg !3878

if.then924:                                       ; preds = %loop.exit922
  %402 = load i32, ptr %z, align 4, !dbg !3879
  %add925 = add i32 %402, 1, !dbg !3879
  store i32 %add925, ptr %z, align 4, !dbg !3879
  %sext926 = sext i32 %402 to i64, !dbg !3879
  %lt927 = icmp slt i64 %sext926, 0, !dbg !3879
  %403 = call i1 @llvm.expect.i1(i1 %lt927, i1 false), !dbg !3879
  br i1 %403, label %panic928, label %checkok933, !dbg !3879

checkok933:                                       ; preds = %if.then924
  %ge934 = icmp sge i64 %sext926, 128, !dbg !3879
  %404 = call i1 @llvm.expect.i1(i1 %ge934, i1 false), !dbg !3879
  br i1 %404, label %panic935, label %checkok942, !dbg !3879

checkok942:                                       ; preds = %checkok933
  %ptroffset943 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext926, !dbg !3879
  %405 = load i32, ptr %carry, align 4, !dbg !3880
  store i32 %405, ptr %ptroffset943, align 4, !dbg !3880
  br label %if.exit944, !dbg !3880

if.exit944:                                       ; preds = %checkok942, %loop.exit922
  %406 = load i64, ptr %rp708, align 8, !dbg !3881
  %407 = load i64, ptr %rpm9, align 8, !dbg !3882
  %sub945 = sub i64 9, %407, !dbg !3883
  %add946 = add i64 %406, %sub945, !dbg !3881
  store i64 %add946, ptr %rp708, align 8, !dbg !3881
  br label %if.exit947, !dbg !3881

if.exit947:                                       ; preds = %if.exit944, %if.exit794
  br label %loop.cond948, !dbg !3884

loop.cond948:                                     ; preds = %if.exit1153, %if.exit947
  %408 = load i64, ptr %rp708, align 8, !dbg !3885
  %lt949 = icmp slt i64 %408, 18, !dbg !3885
  br i1 %lt949, label %or.phi974, label %or.rhs950, !dbg !3885

or.rhs950:                                        ; preds = %loop.cond948
  %409 = load i64, ptr %rp708, align 8, !dbg !3887
  %eq951 = icmp eq i64 %409, 18, !dbg !3887
  br i1 %eq951, label %and.rhs952, label %and.phi972, !dbg !3887

and.rhs952:                                       ; preds = %or.rhs950
  %410 = load i32, ptr %a, align 4, !dbg !3888
  %sext953 = sext i32 %410 to i64, !dbg !3888
  %lt954 = icmp slt i64 %sext953, 0, !dbg !3888
  %411 = call i1 @llvm.expect.i1(i1 %lt954, i1 false), !dbg !3888
  br i1 %411, label %panic955, label %checkok960, !dbg !3888

checkok960:                                       ; preds = %and.rhs952
  %ge961 = icmp sge i64 %sext953, 128, !dbg !3888
  %412 = call i1 @llvm.expect.i1(i1 %ge961, i1 false), !dbg !3888
  br i1 %412, label %panic962, label %checkok969, !dbg !3888

checkok969:                                       ; preds = %checkok960
  %ptroffset970 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext953, !dbg !3888
  %413 = load i32, ptr %ptroffset970, align 4, !dbg !3888
  %lt971 = icmp ult i32 %413, 9007199, !dbg !3889
  br label %and.phi972, !dbg !3889

and.phi972:                                       ; preds = %checkok969, %or.rhs950
  %val973 = phi i1 [ false, %or.rhs950 ], [ %lt971, %checkok969 ], !dbg !3889
  br label %or.phi974, !dbg !3889

or.phi974:                                        ; preds = %and.phi972, %loop.cond948
  %val975 = phi i1 [ true, %loop.cond948 ], [ %val973, %and.phi972 ], !dbg !3889
  br i1 %val975, label %loop.body976, label %loop.exit1154, !dbg !3889

loop.body976:                                     ; preds = %or.phi974
    #dbg_declare(ptr %carry977, !3890, !DIExpression(), !3892)
  store i32 0, ptr %carry977, align 4, !dbg !3893
  %414 = load i32, ptr %e2707, align 4, !dbg !3894
  %sub978 = sub i32 %414, 29, !dbg !3894
  store i32 %sub978, ptr %e2707, align 4, !dbg !3894
  %415 = load i32, ptr %z, align 4, !dbg !3895
  %sub979 = sub i32 %415, 1, !dbg !3895
  %and980 = and i32 %sub979, 127, !dbg !3895
  store i32 %and980, ptr %k, align 4, !dbg !3895
  br label %loop.body981, !dbg !3895

loop.body981:                                     ; preds = %if.exit1082, %loop.body976
    #dbg_declare(ptr %tmp982, !3897, !DIExpression(), !3899)
  %416 = load i32, ptr %k, align 4, !dbg !3900
  %sext983 = sext i32 %416 to i64, !dbg !3900
  %lt984 = icmp slt i64 %sext983, 0, !dbg !3900
  %417 = call i1 @llvm.expect.i1(i1 %lt984, i1 false), !dbg !3900
  br i1 %417, label %panic985, label %checkok990, !dbg !3900

checkok990:                                       ; preds = %loop.body981
  %ge991 = icmp sge i64 %sext983, 128, !dbg !3900
  %418 = call i1 @llvm.expect.i1(i1 %ge991, i1 false), !dbg !3900
  br i1 %418, label %panic992, label %checkok999, !dbg !3900

checkok999:                                       ; preds = %checkok990
  %ptroffset1000 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext983, !dbg !3900
  %419 = load i32, ptr %ptroffset1000, align 4, !dbg !3900
  %zext1001 = zext i32 %419 to i64, !dbg !3900
  %shl = shl i64 %zext1001, 29, !dbg !3901
  %420 = freeze i64 %shl, !dbg !3901
  %421 = load i32, ptr %carry977, align 4, !dbg !3902
  %zext1002 = zext i32 %421 to i64, !dbg !3902
  %add1003 = add i64 %420, %zext1002, !dbg !3901
  store i64 %add1003, ptr %tmp982, align 8, !dbg !3901
  %422 = load i64, ptr %tmp982, align 8, !dbg !3903
  %lt1004 = icmp ult i64 1000000000, %422, !dbg !3903
  br i1 %lt1004, label %if.then1005, label %if.else1028, !dbg !3903

if.then1005:                                      ; preds = %checkok999
  %423 = load i64, ptr %tmp982, align 8, !dbg !3904
  %sdiv1006 = sdiv i64 %423, 1000000000, !dbg !3906
  %trunc1007 = trunc i64 %sdiv1006 to i32, !dbg !3906
  store i32 %trunc1007, ptr %carry977, align 4, !dbg !3906
  %424 = load i32, ptr %k, align 4, !dbg !3907
  %sext1008 = sext i32 %424 to i64, !dbg !3907
  %lt1009 = icmp slt i64 %sext1008, 0, !dbg !3907
  %425 = call i1 @llvm.expect.i1(i1 %lt1009, i1 false), !dbg !3907
  br i1 %425, label %panic1010, label %checkok1015, !dbg !3907

checkok1015:                                      ; preds = %if.then1005
  %ge1016 = icmp sge i64 %sext1008, 128, !dbg !3907
  %426 = call i1 @llvm.expect.i1(i1 %ge1016, i1 false), !dbg !3907
  br i1 %426, label %panic1017, label %checkok1024, !dbg !3907

checkok1024:                                      ; preds = %checkok1015
  %ptroffset1025 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1008, !dbg !3907
  %427 = load i64, ptr %tmp982, align 8, !dbg !3908
  %smod1026 = srem i64 %427, 1000000000, !dbg !3909
  %trunc1027 = trunc i64 %smod1026 to i32, !dbg !3909
  store i32 %trunc1027, ptr %ptroffset1025, align 4, !dbg !3909
  br label %if.exit1048, !dbg !3909

if.else1028:                                      ; preds = %checkok999
  store i32 0, ptr %carry977, align 4, !dbg !3910
  %428 = load i32, ptr %k, align 4, !dbg !3912
  %sext1029 = sext i32 %428 to i64, !dbg !3912
  %lt1030 = icmp slt i64 %sext1029, 0, !dbg !3912
  %429 = call i1 @llvm.expect.i1(i1 %lt1030, i1 false), !dbg !3912
  br i1 %429, label %panic1031, label %checkok1036, !dbg !3912

checkok1036:                                      ; preds = %if.else1028
  %ge1037 = icmp sge i64 %sext1029, 128, !dbg !3912
  %430 = call i1 @llvm.expect.i1(i1 %ge1037, i1 false), !dbg !3912
  br i1 %430, label %panic1038, label %checkok1045, !dbg !3912

checkok1045:                                      ; preds = %checkok1036
  %ptroffset1046 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1029, !dbg !3912
  %431 = load i64, ptr %tmp982, align 8, !dbg !3913
  %trunc1047 = trunc i64 %431 to i32, !dbg !3913
  store i32 %trunc1047, ptr %ptroffset1046, align 4, !dbg !3913
  br label %if.exit1048, !dbg !3913

if.exit1048:                                      ; preds = %checkok1045, %checkok1024
  %432 = load i32, ptr %k, align 4, !dbg !3914
  %433 = load i32, ptr %z, align 4, !dbg !3915
  %sub1049 = sub i32 %433, 1, !dbg !3915
  %and1050 = and i32 %sub1049, 127, !dbg !3915
  %eq1051 = icmp eq i32 %432, %and1050, !dbg !3914
  br i1 %eq1051, label %and.rhs1052, label %and.phi1054, !dbg !3914

and.rhs1052:                                      ; preds = %if.exit1048
  %434 = load i32, ptr %k, align 4, !dbg !3916
  %435 = load i32, ptr %a, align 4, !dbg !3917
  %neq1053 = icmp ne i32 %434, %435, !dbg !3916
  br label %and.phi1054, !dbg !3916

and.phi1054:                                      ; preds = %and.rhs1052, %if.exit1048
  %val1055 = phi i1 [ false, %if.exit1048 ], [ %neq1053, %and.rhs1052 ], !dbg !3916
  br i1 %val1055, label %and.rhs1056, label %and.phi1076, !dbg !3916

and.rhs1056:                                      ; preds = %and.phi1054
  %436 = load i32, ptr %k, align 4, !dbg !3918
  %sext1057 = sext i32 %436 to i64, !dbg !3918
  %lt1058 = icmp slt i64 %sext1057, 0, !dbg !3918
  %437 = call i1 @llvm.expect.i1(i1 %lt1058, i1 false), !dbg !3918
  br i1 %437, label %panic1059, label %checkok1064, !dbg !3918

checkok1064:                                      ; preds = %and.rhs1056
  %ge1065 = icmp sge i64 %sext1057, 128, !dbg !3918
  %438 = call i1 @llvm.expect.i1(i1 %ge1065, i1 false), !dbg !3918
  br i1 %438, label %panic1066, label %checkok1073, !dbg !3918

checkok1073:                                      ; preds = %checkok1064
  %ptroffset1074 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1057, !dbg !3918
  %439 = load i32, ptr %ptroffset1074, align 4, !dbg !3918
  %i2nb1075 = icmp eq i32 %439, 0, !dbg !3918
  br label %and.phi1076, !dbg !3918

and.phi1076:                                      ; preds = %checkok1073, %and.phi1054
  %val1077 = phi i1 [ false, %and.phi1054 ], [ %i2nb1075, %checkok1073 ], !dbg !3918
  br i1 %val1077, label %if.then1078, label %if.exit1079, !dbg !3918

if.then1078:                                      ; preds = %and.phi1076
  %440 = load i32, ptr %k, align 4, !dbg !3919
  store i32 %440, ptr %z, align 4, !dbg !3919
  br label %if.exit1079, !dbg !3919

if.exit1079:                                      ; preds = %if.then1078, %and.phi1076
  %441 = load i32, ptr %k, align 4, !dbg !3920
  %442 = load i32, ptr %a, align 4, !dbg !3921
  %eq1080 = icmp eq i32 %441, %442, !dbg !3920
  br i1 %eq1080, label %if.then1081, label %if.exit1082, !dbg !3920

if.then1081:                                      ; preds = %if.exit1079
  br label %loop.exit1085, !dbg !3922

if.exit1082:                                      ; preds = %if.exit1079
  %443 = load i32, ptr %k, align 4, !dbg !3923
  %sub1083 = sub i32 %443, 1, !dbg !3923
  %and1084 = and i32 %sub1083, 127, !dbg !3923
  store i32 %and1084, ptr %k, align 4, !dbg !3923
  br label %loop.body981, !dbg !3923

loop.exit1085:                                    ; preds = %if.then1081
  %444 = load i32, ptr %carry977, align 4, !dbg !3924
  %i2b1086 = icmp ne i32 %444, 0, !dbg !3924
  br i1 %i2b1086, label %if.then1087, label %if.exit1153, !dbg !3924

if.then1087:                                      ; preds = %loop.exit1085
  %445 = load i64, ptr %rp708, align 8, !dbg !3925
  %add1088 = add i64 %445, 9, !dbg !3925
  store i64 %add1088, ptr %rp708, align 8, !dbg !3925
  %446 = load i32, ptr %a, align 4, !dbg !3927
  %sub1089 = sub i32 %446, 1, !dbg !3927
  %and1090 = and i32 %sub1089, 127, !dbg !3927
  store i32 %and1090, ptr %a, align 4, !dbg !3927
  %447 = load i32, ptr %a, align 4, !dbg !3928
  %448 = load i32, ptr %z, align 4, !dbg !3929
  %eq1091 = icmp eq i32 %447, %448, !dbg !3928
  br i1 %eq1091, label %if.then1092, label %if.exit1134, !dbg !3928

if.then1092:                                      ; preds = %if.then1087
  %449 = load i32, ptr %z, align 4, !dbg !3930
  %sub1093 = sub i32 %449, 1, !dbg !3930
  %and1094 = and i32 %sub1093, 127, !dbg !3930
  store i32 %and1094, ptr %z, align 4, !dbg !3930
  %450 = load i32, ptr %z, align 4, !dbg !3932
  %sub1095 = sub i32 %450, 1, !dbg !3932
  %and1096 = and i32 %sub1095, 127, !dbg !3932
  %sext1097 = sext i32 %and1096 to i64, !dbg !3932
  %lt1098 = icmp slt i64 %sext1097, 0, !dbg !3932
  %451 = call i1 @llvm.expect.i1(i1 %lt1098, i1 false), !dbg !3932
  br i1 %451, label %panic1099, label %checkok1104, !dbg !3932

checkok1104:                                      ; preds = %if.then1092
  %ge1105 = icmp sge i64 %sext1097, 128, !dbg !3932
  %452 = call i1 @llvm.expect.i1(i1 %ge1105, i1 false), !dbg !3932
  br i1 %452, label %panic1106, label %checkok1113, !dbg !3932

checkok1113:                                      ; preds = %checkok1104
  %ptroffset1114 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1097, !dbg !3932
  %453 = load i32, ptr %ptroffset1114, align 4, !dbg !3932
  %454 = load i32, ptr %z, align 4, !dbg !3933
  %sext1115 = sext i32 %454 to i64, !dbg !3933
  %lt1116 = icmp slt i64 %sext1115, 0, !dbg !3933
  %455 = call i1 @llvm.expect.i1(i1 %lt1116, i1 false), !dbg !3933
  br i1 %455, label %panic1117, label %checkok1122, !dbg !3933

checkok1122:                                      ; preds = %checkok1113
  %ge1123 = icmp sge i64 %sext1115, 128, !dbg !3933
  %456 = call i1 @llvm.expect.i1(i1 %ge1123, i1 false), !dbg !3933
  br i1 %456, label %panic1124, label %checkok1131, !dbg !3933

checkok1131:                                      ; preds = %checkok1122
  %ptroffset1132 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1115, !dbg !3933
  %457 = load i32, ptr %ptroffset1132, align 4, !dbg !3933
  %or1133 = or i32 %453, %457, !dbg !3934
  store i32 %or1133, ptr %ptroffset1114, align 4, !dbg !3934
  br label %if.exit1134, !dbg !3934

if.exit1134:                                      ; preds = %checkok1131, %if.then1087
  %458 = load i32, ptr %a, align 4, !dbg !3935
  %sext1135 = sext i32 %458 to i64, !dbg !3935
  %lt1136 = icmp slt i64 %sext1135, 0, !dbg !3935
  %459 = call i1 @llvm.expect.i1(i1 %lt1136, i1 false), !dbg !3935
  br i1 %459, label %panic1137, label %checkok1142, !dbg !3935

checkok1142:                                      ; preds = %if.exit1134
  %ge1143 = icmp sge i64 %sext1135, 128, !dbg !3935
  %460 = call i1 @llvm.expect.i1(i1 %ge1143, i1 false), !dbg !3935
  br i1 %460, label %panic1144, label %checkok1151, !dbg !3935

checkok1151:                                      ; preds = %checkok1142
  %ptroffset1152 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1135, !dbg !3935
  %461 = load i32, ptr %carry977, align 4, !dbg !3936
  store i32 %461, ptr %ptroffset1152, align 4, !dbg !3936
  br label %if.exit1153, !dbg !3936

if.exit1153:                                      ; preds = %checkok1151, %loop.exit1085
  br label %loop.cond948, !dbg !3936

loop.exit1154:                                    ; preds = %or.phi974
  br label %loop.body1155, !dbg !3937

loop.body1155:                                    ; preds = %if.exit1438, %loop.exit1154
    #dbg_declare(ptr %carry1156, !3938, !DIExpression(), !3941)
  store i32 0, ptr %carry1156, align 4, !dbg !3942
    #dbg_declare(ptr %sh, !3943, !DIExpression(), !3944)
  store i32 1, ptr %sh, align 4, !dbg !3945
    #dbg_declare(ptr %i, !3946, !DIExpression(), !3947)
  store i32 0, ptr %i, align 4, !dbg !3947
  store i32 0, ptr %i, align 4, !dbg !3948
  br label %loop.cond1157, !dbg !3948

loop.cond1157:                                    ; preds = %if.exit1245, %loop.body1155
  %462 = load i32, ptr %i, align 4, !dbg !3950
  %lt1158 = icmp slt i32 %462, 2, !dbg !3950
  br i1 %lt1158, label %loop.body1159, label %loop.exit1247, !dbg !3950

loop.body1159:                                    ; preds = %loop.cond1157
  %463 = load i32, ptr %a, align 4, !dbg !3951
  %464 = load i32, ptr %i, align 4, !dbg !3953
  %add1160 = add i32 %463, %464, !dbg !3951
  %and1161 = and i32 %add1160, 127, !dbg !3951
  store i32 %and1161, ptr %k, align 4, !dbg !3951
  %465 = load i32, ptr %k, align 4, !dbg !3954
  %466 = load i32, ptr %z, align 4, !dbg !3955
  %eq1162 = icmp eq i32 %465, %466, !dbg !3954
  br i1 %eq1162, label %or.phi1201, label %or.rhs1163, !dbg !3954

or.rhs1163:                                       ; preds = %loop.body1159
  %467 = load i32, ptr %k, align 4, !dbg !3956
  %sext1164 = sext i32 %467 to i64, !dbg !3956
  %lt1165 = icmp slt i64 %sext1164, 0, !dbg !3956
  %468 = call i1 @llvm.expect.i1(i1 %lt1165, i1 false), !dbg !3956
  br i1 %468, label %panic1166, label %checkok1171, !dbg !3956

checkok1171:                                      ; preds = %or.rhs1163
  %ge1172 = icmp sge i64 %sext1164, 128, !dbg !3956
  %469 = call i1 @llvm.expect.i1(i1 %ge1172, i1 false), !dbg !3956
  br i1 %469, label %panic1173, label %checkok1180, !dbg !3956

checkok1180:                                      ; preds = %checkok1171
  %ptroffset1181 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1164, !dbg !3956
  %470 = load i32, ptr %ptroffset1181, align 4, !dbg !3956
  %471 = load i32, ptr %i, align 4, !dbg !3957
  %sext1182 = sext i32 %471 to i64, !dbg !3957
  %lt1183 = icmp slt i64 %sext1182, 0, !dbg !3957
  %472 = call i1 @llvm.expect.i1(i1 %lt1183, i1 false), !dbg !3957
  br i1 %472, label %panic1184, label %checkok1189, !dbg !3957

checkok1189:                                      ; preds = %checkok1180
  %ge1190 = icmp sge i64 %sext1182, 2, !dbg !3957
  %473 = call i1 @llvm.expect.i1(i1 %ge1190, i1 false), !dbg !3957
  br i1 %473, label %panic1191, label %checkok1198, !dbg !3957

checkok1198:                                      ; preds = %checkok1189
  %ptroffset1199 = getelementptr inbounds [4 x i8], ptr @to_float.TH, i64 %sext1182, !dbg !3957
  %474 = load i32, ptr %ptroffset1199, align 4, !dbg !3957
  %lt1200 = icmp ult i32 %470, %474, !dbg !3958
  br label %or.phi1201, !dbg !3958

or.phi1201:                                       ; preds = %checkok1198, %loop.body1159
  %val1202 = phi i1 [ true, %loop.body1159 ], [ %lt1200, %checkok1198 ], !dbg !3958
  br i1 %val1202, label %if.then1203, label %if.exit1204, !dbg !3958

if.then1203:                                      ; preds = %or.phi1201
  store i32 2, ptr %i, align 4, !dbg !3959
  br label %loop.exit1247, !dbg !3961

if.exit1204:                                      ; preds = %or.phi1201
  %475 = load i32, ptr %a, align 4, !dbg !3962
  %476 = load i32, ptr %i, align 4, !dbg !3963
  %add1205 = add i32 %475, %476, !dbg !3962
  %and1206 = and i32 %add1205, 127, !dbg !3962
  %sext1207 = sext i32 %and1206 to i64, !dbg !3962
  %lt1208 = icmp slt i64 %sext1207, 0, !dbg !3962
  %477 = call i1 @llvm.expect.i1(i1 %lt1208, i1 false), !dbg !3962
  br i1 %477, label %panic1209, label %checkok1214, !dbg !3962

checkok1214:                                      ; preds = %if.exit1204
  %ge1215 = icmp sge i64 %sext1207, 128, !dbg !3962
  %478 = call i1 @llvm.expect.i1(i1 %ge1215, i1 false), !dbg !3962
  br i1 %478, label %panic1216, label %checkok1223, !dbg !3962

checkok1223:                                      ; preds = %checkok1214
  %ptroffset1224 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1207, !dbg !3962
  %479 = load i32, ptr %ptroffset1224, align 4, !dbg !3962
  %480 = load i32, ptr %i, align 4, !dbg !3964
  %sext1225 = sext i32 %480 to i64, !dbg !3964
  %lt1226 = icmp slt i64 %sext1225, 0, !dbg !3964
  %481 = call i1 @llvm.expect.i1(i1 %lt1226, i1 false), !dbg !3964
  br i1 %481, label %panic1227, label %checkok1232, !dbg !3964

checkok1232:                                      ; preds = %checkok1223
  %ge1233 = icmp sge i64 %sext1225, 2, !dbg !3964
  %482 = call i1 @llvm.expect.i1(i1 %ge1233, i1 false), !dbg !3964
  br i1 %482, label %panic1234, label %checkok1241, !dbg !3964

checkok1241:                                      ; preds = %checkok1232
  %ptroffset1242 = getelementptr inbounds [4 x i8], ptr @to_float.TH, i64 %sext1225, !dbg !3964
  %483 = load i32, ptr %ptroffset1242, align 4, !dbg !3964
  %gt1243 = icmp ugt i32 %479, %483, !dbg !3965
  br i1 %gt1243, label %if.then1244, label %if.exit1245, !dbg !3965

if.then1244:                                      ; preds = %checkok1241
  br label %loop.exit1247, !dbg !3966

if.exit1245:                                      ; preds = %checkok1241
  %484 = load i32, ptr %i, align 4, !dbg !3967
  %add1246 = add i32 %484, 1, !dbg !3967
  store i32 %add1246, ptr %i, align 4, !dbg !3967
  br label %loop.cond1157, !dbg !3967

loop.exit1247:                                    ; preds = %if.then1244, %if.then1203, %loop.cond1157
  %485 = load i32, ptr %i, align 4, !dbg !3968
  %eq1248 = icmp eq i32 %485, 2, !dbg !3968
  br i1 %eq1248, label %and.rhs1249, label %and.phi1251, !dbg !3968

and.rhs1249:                                      ; preds = %loop.exit1247
  %486 = load i64, ptr %rp708, align 8, !dbg !3969
  %eq1250 = icmp eq i64 %486, 18, !dbg !3969
  br label %and.phi1251, !dbg !3969

and.phi1251:                                      ; preds = %and.rhs1249, %loop.exit1247
  %val1252 = phi i1 [ false, %loop.exit1247 ], [ %eq1250, %and.rhs1249 ], !dbg !3969
  br i1 %val1252, label %if.then1253, label %if.exit1254, !dbg !3969

if.then1253:                                      ; preds = %and.phi1251
  br label %loop.exit1439, !dbg !3970

if.exit1254:                                      ; preds = %and.phi1251
  %487 = load i64, ptr %rp708, align 8, !dbg !3971
  %gt1255 = icmp sgt i64 %487, 27, !dbg !3971
  br i1 %gt1255, label %if.then1256, label %if.exit1257, !dbg !3971

if.then1256:                                      ; preds = %if.exit1254
  store i32 9, ptr %sh, align 4, !dbg !3972
  br label %if.exit1257, !dbg !3972

if.exit1257:                                      ; preds = %if.then1256, %if.exit1254
  %488 = load i32, ptr %e2707, align 4, !dbg !3973
  %489 = load i32, ptr %sh, align 4, !dbg !3974
  %add1258 = add i32 %488, %489, !dbg !3973
  store i32 %add1258, ptr %e2707, align 4, !dbg !3973
  %490 = load i32, ptr %a, align 4, !dbg !3975
  store i32 %490, ptr %k, align 4, !dbg !3975
  br label %loop.cond1259, !dbg !3975

loop.cond1259:                                    ; preds = %if.exit1385, %if.exit1257
  %491 = load i32, ptr %k, align 4, !dbg !3977
  %492 = load i32, ptr %z, align 4, !dbg !3978
  %neq1260 = icmp ne i32 %491, %492, !dbg !3977
  br i1 %neq1260, label %loop.body1261, label %loop.exit1388, !dbg !3977

loop.body1261:                                    ; preds = %loop.cond1259
    #dbg_declare(ptr %tmp1262, !3979, !DIExpression(), !3981)
  %493 = load i32, ptr %k, align 4, !dbg !3982
  %sext1263 = sext i32 %493 to i64, !dbg !3982
  %lt1264 = icmp slt i64 %sext1263, 0, !dbg !3982
  %494 = call i1 @llvm.expect.i1(i1 %lt1264, i1 false), !dbg !3982
  br i1 %494, label %panic1265, label %checkok1270, !dbg !3982

checkok1270:                                      ; preds = %loop.body1261
  %ge1271 = icmp sge i64 %sext1263, 128, !dbg !3982
  %495 = call i1 @llvm.expect.i1(i1 %ge1271, i1 false), !dbg !3982
  br i1 %495, label %panic1272, label %checkok1279, !dbg !3982

checkok1279:                                      ; preds = %checkok1270
  %ptroffset1280 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1263, !dbg !3982
  %496 = load i32, ptr %ptroffset1280, align 4, !dbg !3982
  %497 = load i32, ptr %sh, align 4, !dbg !3983
  %shift_underflow = icmp slt i32 %497, 0, !dbg !3984
  %498 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !3984
  br i1 %498, label %panic1281, label %checkok1286, !dbg !3984

checkok1286:                                      ; preds = %checkok1279
  %shift_exceeds1287 = icmp sge i32 %497, 32, !dbg !3984
  %499 = call i1 @llvm.expect.i1(i1 %shift_exceeds1287, i1 false), !dbg !3984
  br i1 %499, label %panic1288, label %checkok1293, !dbg !3984

checkok1293:                                      ; preds = %checkok1286
  %shl1294 = shl i32 1, %497, !dbg !3984
  %500 = freeze i32 %shl1294, !dbg !3984
  %sub1295 = sub i32 %500, 1, !dbg !3984
  %and1296 = and i32 %496, %sub1295, !dbg !3985
  store i32 %and1296, ptr %tmp1262, align 4, !dbg !3985
  %501 = load i32, ptr %k, align 4, !dbg !3986
  %sext1297 = sext i32 %501 to i64, !dbg !3986
  %lt1298 = icmp slt i64 %sext1297, 0, !dbg !3986
  %502 = call i1 @llvm.expect.i1(i1 %lt1298, i1 false), !dbg !3986
  br i1 %502, label %panic1299, label %checkok1304, !dbg !3986

checkok1304:                                      ; preds = %checkok1293
  %ge1305 = icmp sge i64 %sext1297, 128, !dbg !3986
  %503 = call i1 @llvm.expect.i1(i1 %ge1305, i1 false), !dbg !3986
  br i1 %503, label %panic1306, label %checkok1313, !dbg !3986

checkok1313:                                      ; preds = %checkok1304
  %ptroffset1314 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1297, !dbg !3986
  %504 = load i32, ptr %k, align 4, !dbg !3987
  %sext1315 = sext i32 %504 to i64, !dbg !3987
  %lt1316 = icmp slt i64 %sext1315, 0, !dbg !3987
  %505 = call i1 @llvm.expect.i1(i1 %lt1316, i1 false), !dbg !3987
  br i1 %505, label %panic1317, label %checkok1322, !dbg !3987

checkok1322:                                      ; preds = %checkok1313
  %ge1323 = icmp sge i64 %sext1315, 128, !dbg !3987
  %506 = call i1 @llvm.expect.i1(i1 %ge1323, i1 false), !dbg !3987
  br i1 %506, label %panic1324, label %checkok1331, !dbg !3987

checkok1331:                                      ; preds = %checkok1322
  %ptroffset1332 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1315, !dbg !3987
  %507 = load i32, ptr %ptroffset1332, align 4, !dbg !3987
  %508 = load i32, ptr %sh, align 4, !dbg !3988
  %shift_exceeds1333 = icmp uge i32 %508, 32, !dbg !3989
  %509 = call i1 @llvm.expect.i1(i1 %shift_exceeds1333, i1 false), !dbg !3989
  br i1 %509, label %panic1334, label %checkok1339, !dbg !3989

checkok1339:                                      ; preds = %checkok1331
  %lshr1340 = lshr i32 %507, %508, !dbg !3989
  %510 = freeze i32 %lshr1340, !dbg !3989
  %511 = load i32, ptr %carry1156, align 4, !dbg !3990
  %add1341 = add i32 %510, %511, !dbg !3989
  store i32 %add1341, ptr %ptroffset1314, align 4, !dbg !3989
  %512 = load i32, ptr %sh, align 4, !dbg !3991
  %shift_underflow1342 = icmp slt i32 %512, 0, !dbg !3992
  %513 = call i1 @llvm.expect.i1(i1 %shift_underflow1342, i1 false), !dbg !3992
  br i1 %513, label %panic1343, label %checkok1348, !dbg !3992

checkok1348:                                      ; preds = %checkok1339
  %shift_exceeds1349 = icmp sge i32 %512, 32, !dbg !3992
  %514 = call i1 @llvm.expect.i1(i1 %shift_exceeds1349, i1 false), !dbg !3992
  br i1 %514, label %panic1350, label %checkok1355, !dbg !3992

checkok1355:                                      ; preds = %checkok1348
  %ashr = ashr i32 1000000000, %512, !dbg !3992
  %515 = freeze i32 %ashr, !dbg !3992
  %516 = load i32, ptr %tmp1262, align 4, !dbg !3993
  %mul1356 = mul i32 %515, %516, !dbg !3992
  store i32 %mul1356, ptr %carry1156, align 4, !dbg !3992
  %517 = load i32, ptr %k, align 4, !dbg !3994
  %518 = load i32, ptr %a, align 4, !dbg !3995
  %eq1357 = icmp eq i32 %517, %518, !dbg !3994
  br i1 %eq1357, label %and.rhs1358, label %and.phi1378, !dbg !3994

and.rhs1358:                                      ; preds = %checkok1355
  %519 = load i32, ptr %k, align 4, !dbg !3996
  %sext1359 = sext i32 %519 to i64, !dbg !3996
  %lt1360 = icmp slt i64 %sext1359, 0, !dbg !3996
  %520 = call i1 @llvm.expect.i1(i1 %lt1360, i1 false), !dbg !3996
  br i1 %520, label %panic1361, label %checkok1366, !dbg !3996

checkok1366:                                      ; preds = %and.rhs1358
  %ge1367 = icmp sge i64 %sext1359, 128, !dbg !3996
  %521 = call i1 @llvm.expect.i1(i1 %ge1367, i1 false), !dbg !3996
  br i1 %521, label %panic1368, label %checkok1375, !dbg !3996

checkok1375:                                      ; preds = %checkok1366
  %ptroffset1376 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1359, !dbg !3996
  %522 = load i32, ptr %ptroffset1376, align 4, !dbg !3996
  %i2nb1377 = icmp eq i32 %522, 0, !dbg !3996
  br label %and.phi1378, !dbg !3996

and.phi1378:                                      ; preds = %checkok1375, %checkok1355
  %val1379 = phi i1 [ false, %checkok1355 ], [ %i2nb1377, %checkok1375 ], !dbg !3996
  br i1 %val1379, label %if.then1380, label %if.exit1385, !dbg !3996

if.then1380:                                      ; preds = %and.phi1378
  %523 = load i32, ptr %a, align 4, !dbg !3997
  %add1381 = add i32 %523, 1, !dbg !3997
  %and1382 = and i32 %add1381, 127, !dbg !3997
  store i32 %and1382, ptr %a, align 4, !dbg !3997
  %524 = load i32, ptr %i, align 4, !dbg !3999
  %sub1383 = sub i32 %524, 1, !dbg !3999
  store i32 %sub1383, ptr %i, align 4, !dbg !3999
  %525 = load i64, ptr %rp708, align 8, !dbg !4000
  %sub1384 = sub i64 %525, 9, !dbg !4000
  store i64 %sub1384, ptr %rp708, align 8, !dbg !4000
  br label %if.exit1385, !dbg !4000

if.exit1385:                                      ; preds = %if.then1380, %and.phi1378
  %526 = load i32, ptr %k, align 4, !dbg !4001
  %add1386 = add i32 %526, 1, !dbg !4001
  %and1387 = and i32 %add1386, 127, !dbg !4001
  store i32 %and1387, ptr %k, align 4, !dbg !4001
  br label %loop.cond1259, !dbg !4001

loop.exit1388:                                    ; preds = %loop.cond1259
  %527 = load i32, ptr %carry1156, align 4, !dbg !4002
  %i2b1389 = icmp ne i32 %527, 0, !dbg !4002
  br i1 %i2b1389, label %if.then1390, label %if.exit1438, !dbg !4002

if.then1390:                                      ; preds = %loop.exit1388
  %528 = load i32, ptr %z, align 4, !dbg !4003
  %add1391 = add i32 %528, 1, !dbg !4003
  %and1392 = and i32 %add1391, 127, !dbg !4003
  %529 = load i32, ptr %a, align 4, !dbg !4005
  %neq1393 = icmp ne i32 %and1392, %529, !dbg !4003
  br i1 %neq1393, label %if.then1394, label %if.else1415, !dbg !4003

if.then1394:                                      ; preds = %if.then1390
  %530 = load i32, ptr %z, align 4, !dbg !4006
  %sext1395 = sext i32 %530 to i64, !dbg !4006
  %lt1396 = icmp slt i64 %sext1395, 0, !dbg !4006
  %531 = call i1 @llvm.expect.i1(i1 %lt1396, i1 false), !dbg !4006
  br i1 %531, label %panic1397, label %checkok1402, !dbg !4006

checkok1402:                                      ; preds = %if.then1394
  %ge1403 = icmp sge i64 %sext1395, 128, !dbg !4006
  %532 = call i1 @llvm.expect.i1(i1 %ge1403, i1 false), !dbg !4006
  br i1 %532, label %panic1404, label %checkok1411, !dbg !4006

checkok1411:                                      ; preds = %checkok1402
  %ptroffset1412 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1395, !dbg !4006
  %533 = load i32, ptr %carry1156, align 4, !dbg !4008
  store i32 %533, ptr %ptroffset1412, align 4, !dbg !4008
  %534 = load i32, ptr %z, align 4, !dbg !4009
  %add1413 = add i32 %534, 1, !dbg !4009
  %and1414 = and i32 %add1413, 127, !dbg !4009
  store i32 %and1414, ptr %z, align 4, !dbg !4009
  br label %if.exit1437, !dbg !4009

if.else1415:                                      ; preds = %if.then1390
  %535 = load i32, ptr %z, align 4, !dbg !4010
  %sub1416 = sub i32 %535, 1, !dbg !4010
  %and1417 = and i32 %sub1416, 127, !dbg !4010
  %sext1418 = sext i32 %and1417 to i64, !dbg !4010
  %lt1419 = icmp slt i64 %sext1418, 0, !dbg !4010
  %536 = call i1 @llvm.expect.i1(i1 %lt1419, i1 false), !dbg !4010
  br i1 %536, label %panic1420, label %checkok1425, !dbg !4010

checkok1425:                                      ; preds = %if.else1415
  %ge1426 = icmp sge i64 %sext1418, 128, !dbg !4010
  %537 = call i1 @llvm.expect.i1(i1 %ge1426, i1 false), !dbg !4010
  br i1 %537, label %panic1427, label %checkok1434, !dbg !4010

checkok1434:                                      ; preds = %checkok1425
  %ptroffset1435 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1418, !dbg !4010
  %538 = load i32, ptr %ptroffset1435, align 4, !dbg !4010
  %or1436 = or i32 %538, 1, !dbg !4012
  store i32 %or1436, ptr %ptroffset1435, align 4, !dbg !4012
  br label %if.exit1437, !dbg !4012

if.exit1437:                                      ; preds = %checkok1434, %checkok1411
  br label %if.exit1438, !dbg !4012

if.exit1438:                                      ; preds = %if.exit1437, %loop.exit1388
  br label %loop.body1155, !dbg !4012

loop.exit1439:                                    ; preds = %if.then1253
    #dbg_declare(ptr %y1440, !4013, !DIExpression(), !4014)
  store double 0.000000e+00, ptr %y1440, align 8, !dbg !4014
    #dbg_declare(ptr %i1441, !4015, !DIExpression(), !4016)
  store i32 0, ptr %i1441, align 4, !dbg !4016
  store i32 0, ptr %i1441, align 4, !dbg !4017
  br label %loop.cond1442, !dbg !4017

loop.cond1442:                                    ; preds = %checkok1490, %loop.exit1439
  %539 = load i32, ptr %i1441, align 4, !dbg !4019
  %lt1443 = icmp slt i32 %539, 2, !dbg !4019
  br i1 %lt1443, label %loop.body1444, label %loop.exit1495, !dbg !4019

loop.body1444:                                    ; preds = %loop.cond1442
  %540 = load i32, ptr %a, align 4, !dbg !4020
  %541 = load i32, ptr %i1441, align 4, !dbg !4022
  %add1445 = add i32 %540, %541, !dbg !4020
  %and1446 = and i32 %add1445, 127, !dbg !4020
  %542 = load i32, ptr %z, align 4, !dbg !4023
  %eq1447 = icmp eq i32 %and1446, %542, !dbg !4020
  br i1 %eq1447, label %if.then1448, label %if.exit1470, !dbg !4020

if.then1448:                                      ; preds = %loop.body1444
  %543 = load i32, ptr %z, align 4, !dbg !4024
  %add1449 = add i32 %543, 1, !dbg !4024
  %and1450 = and i32 %add1449, 127, !dbg !4024
  store i32 %and1450, ptr %z, align 4, !dbg !4024
  %sub1451 = sub i32 %and1450, 1, !dbg !4025
  %sext1452 = sext i32 %sub1451 to i64, !dbg !4025
  %lt1453 = icmp slt i64 %sext1452, 0, !dbg !4025
  %544 = call i1 @llvm.expect.i1(i1 %lt1453, i1 false), !dbg !4025
  br i1 %544, label %panic1454, label %checkok1459, !dbg !4025

checkok1459:                                      ; preds = %if.then1448
  %ge1460 = icmp sge i64 %sext1452, 128, !dbg !4025
  %545 = call i1 @llvm.expect.i1(i1 %ge1460, i1 false), !dbg !4025
  br i1 %545, label %panic1461, label %checkok1468, !dbg !4025

checkok1468:                                      ; preds = %checkok1459
  %ptroffset1469 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1452, !dbg !4025
  store i32 0, ptr %ptroffset1469, align 4, !dbg !4026
  br label %if.exit1470, !dbg !4026

if.exit1470:                                      ; preds = %checkok1468, %loop.body1444
  %546 = load double, ptr %y1440, align 8, !dbg !4027
  %fmul1471 = fmul double 1.000000e+09, %546, !dbg !4028
  %547 = load i32, ptr %a, align 4, !dbg !4029
  %548 = load i32, ptr %i1441, align 4, !dbg !4030
  %add1472 = add i32 %547, %548, !dbg !4029
  %and1473 = and i32 %add1472, 127, !dbg !4029
  %sext1474 = sext i32 %and1473 to i64, !dbg !4029
  %lt1475 = icmp slt i64 %sext1474, 0, !dbg !4029
  %549 = call i1 @llvm.expect.i1(i1 %lt1475, i1 false), !dbg !4029
  br i1 %549, label %panic1476, label %checkok1481, !dbg !4029

checkok1481:                                      ; preds = %if.exit1470
  %ge1482 = icmp sge i64 %sext1474, 128, !dbg !4029
  %550 = call i1 @llvm.expect.i1(i1 %ge1482, i1 false), !dbg !4029
  br i1 %550, label %panic1483, label %checkok1490, !dbg !4029

checkok1490:                                      ; preds = %checkok1481
  %ptroffset1491 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1474, !dbg !4029
  %551 = load i32, ptr %ptroffset1491, align 4, !dbg !4029
  %uifp1492 = uitofp i32 %551 to double, !dbg !4029
  %fadd1493 = fadd double %fmul1471, %uifp1492, !dbg !4028
  store double %fadd1493, ptr %y1440, align 8, !dbg !4028
  %552 = load i32, ptr %i1441, align 4, !dbg !4031
  %add1494 = add i32 %552, 1, !dbg !4031
  store i32 %add1494, ptr %i1441, align 4, !dbg !4031
  br label %loop.cond1442, !dbg !4031

loop.exit1495:                                    ; preds = %loop.cond1442
  %553 = load double, ptr %y1440, align 8, !dbg !4032
  %554 = load i32, ptr %sign383, align 4, !dbg !4033
  %sifp1496 = sitofp i32 %554 to double, !dbg !4033
  %fmul1497 = fmul double %553, %sifp1496, !dbg !4032
  store double %fmul1497, ptr %y1440, align 8, !dbg !4032
    #dbg_declare(ptr %denormal, !4034, !DIExpression(), !4035)
  store i8 0, ptr %denormal, align 1, !dbg !4035
    #dbg_declare(ptr %bits1498, !4036, !DIExpression(), !4037)
  store i32 24, ptr %bits1498, align 4, !dbg !4038
  %555 = load i32, ptr %bits1498, align 4, !dbg !4039
  %556 = load i32, ptr %e2707, align 4, !dbg !4040
  %add1499 = add i32 53, %556, !dbg !4041
  %sub1500 = sub i32 %add1499, -149, !dbg !4041
  %lt1501 = icmp slt i32 %sub1500, %555, !dbg !4039
  %check1502 = icmp slt i32 %555, 0, !dbg !4039
  %siui-lt1503 = or i1 %check1502, %lt1501, !dbg !4039
  br i1 %siui-lt1503, label %if.then1504, label %if.exit1510, !dbg !4039

if.then1504:                                      ; preds = %loop.exit1495
  %557 = load i32, ptr %e2707, align 4, !dbg !4042
  %add1505 = add i32 53, %557, !dbg !4044
  %sub1506 = sub i32 %add1505, -149, !dbg !4044
  store i32 %sub1506, ptr %bits1498, align 4, !dbg !4044
  %558 = load i32, ptr %bits1498, align 4, !dbg !4045
  %gt1507 = icmp ugt i32 0, %558, !dbg !4045
  br i1 %gt1507, label %if.then1508, label %if.exit1509, !dbg !4045

if.then1508:                                      ; preds = %if.then1504
  store i32 0, ptr %bits1498, align 4, !dbg !4046
  br label %if.exit1509, !dbg !4046

if.exit1509:                                      ; preds = %if.then1508, %if.then1504
  store i8 1, ptr %denormal, align 1, !dbg !4047
  br label %if.exit1510, !dbg !4047

if.exit1510:                                      ; preds = %if.exit1509, %loop.exit1495
    #dbg_declare(ptr %bias1511, !4048, !DIExpression(), !4049)
  store double 0.000000e+00, ptr %bias1511, align 8, !dbg !4049
    #dbg_declare(ptr %frac, !4050, !DIExpression(), !4051)
  store double 0.000000e+00, ptr %frac, align 8, !dbg !4051
  %559 = load i32, ptr %bits1498, align 4, !dbg !4052
  %gt1512 = icmp ugt i32 53, %559, !dbg !4052
  br i1 %gt1512, label %if.then1513, label %if.exit1530, !dbg !4052

if.then1513:                                      ; preds = %if.exit1510
  store double 1.000000e+00, ptr %x1514, align 8
  %560 = load i32, ptr %bits1498, align 4, !dbg !4053
  %sub1515 = sub i32 106, %560, !dbg !4055
  %sub1516 = sub i32 %sub1515, 1, !dbg !4055
  store i32 %sub1516, ptr %n1517, align 4
  %561 = load double, ptr %x1514, align 8, !dbg !4056
  %562 = load i32, ptr %n1517, align 4, !dbg !4056
  %563 = call double @scalbn(double %561, i32 %562), !dbg !4059
  store double %563, ptr %mag1518, align 8
  %564 = load double, ptr %y1440, align 8
  store double %564, ptr %sgn1519, align 8
  %565 = load double, ptr %mag1518, align 8
  store double %565, ptr %x1520, align 8
  %566 = load double, ptr %sgn1519, align 8
  store double %566, ptr %y1521, align 8
  %567 = load double, ptr %x1520, align 8, !dbg !4060
  %568 = load double, ptr %sgn1519, align 8, !dbg !4065
  %569 = call double @llvm.copysign.f64(double %567, double %568), !dbg !4065
  store double %569, ptr %bias1511, align 8, !dbg !4065
  %570 = load double, ptr %y1440, align 8, !dbg !4066
  store double 1.000000e+00, ptr %x1522, align 8
  %571 = load i32, ptr %bits1498, align 4, !dbg !4067
  %sub1523 = sub i32 53, %571, !dbg !4068
  store i32 %sub1523, ptr %n1524, align 4
  %572 = load double, ptr %x1522, align 8, !dbg !4069
  %573 = load i32, ptr %n1524, align 4, !dbg !4069
  %574 = call double @scalbn(double %572, i32 %573), !dbg !4072
  %zero1525 = fcmp ueq double %574, 0.000000e+00, !dbg !4066
  %575 = call i1 @llvm.expect.i1(i1 %zero1525, i1 false), !dbg !4066
  br i1 %575, label %panic1526, label %checkok1527, !dbg !4066

checkok1527:                                      ; preds = %if.then1513
  %fmod = frem double %570, %574, !dbg !4066
  store double %fmod, ptr %frac, align 8, !dbg !4066
  %576 = load double, ptr %y1440, align 8, !dbg !4073
  %577 = load double, ptr %frac, align 8, !dbg !4074
  %fsub1528 = fsub double %576, %577, !dbg !4073
  store double %fsub1528, ptr %y1440, align 8, !dbg !4073
  %578 = load double, ptr %y1440, align 8, !dbg !4075
  %579 = load double, ptr %bias1511, align 8, !dbg !4076
  %fadd1529 = fadd double %578, %579, !dbg !4075
  store double %fadd1529, ptr %y1440, align 8, !dbg !4075
  br label %if.exit1530, !dbg !4075

if.exit1530:                                      ; preds = %checkok1527, %if.exit1510
  %580 = load i32, ptr %a, align 4, !dbg !4077
  %581 = load i32, ptr %i1441, align 4, !dbg !4078
  %add1531 = add i32 %580, %581, !dbg !4077
  %and1532 = and i32 %add1531, 127, !dbg !4077
  %582 = load i32, ptr %z, align 4, !dbg !4079
  %neq1533 = icmp ne i32 %and1532, %582, !dbg !4077
  br i1 %neq1533, label %if.then1534, label %if.exit1610, !dbg !4077

if.then1534:                                      ; preds = %if.exit1530
    #dbg_declare(ptr %t, !4080, !DIExpression(), !4082)
  %583 = load i32, ptr %a, align 4, !dbg !4083
  %584 = load i32, ptr %i1441, align 4, !dbg !4084
  %add1535 = add i32 %583, %584, !dbg !4083
  %and1536 = and i32 %add1535, 127, !dbg !4083
  %sext1537 = sext i32 %and1536 to i64, !dbg !4083
  %lt1538 = icmp slt i64 %sext1537, 0, !dbg !4083
  %585 = call i1 @llvm.expect.i1(i1 %lt1538, i1 false), !dbg !4083
  br i1 %585, label %panic1539, label %checkok1544, !dbg !4083

checkok1544:                                      ; preds = %if.then1534
  %ge1545 = icmp sge i64 %sext1537, 128, !dbg !4083
  %586 = call i1 @llvm.expect.i1(i1 %ge1545, i1 false), !dbg !4083
  br i1 %586, label %panic1546, label %checkok1553, !dbg !4083

checkok1553:                                      ; preds = %checkok1544
  %ptroffset1554 = getelementptr inbounds [4 x i8], ptr %x387, i64 %sext1537, !dbg !4083
  %587 = load i32, ptr %ptroffset1554, align 4, !dbg !4083
  store i32 %587, ptr %t, align 4, !dbg !4083
  store i8 1, ptr %switch1555, align 1
  br label %switch.entry1556

switch.entry1556:                                 ; preds = %checkok1553
  %588 = load i8, ptr %switch1555, align 1
  %589 = trunc i8 %588 to i1
  %590 = load i32, ptr %t, align 4, !dbg !4085
  %gt1557 = icmp ugt i32 500000000, %590, !dbg !4085
  br i1 %gt1557, label %and.rhs1558, label %and.phi1567, !dbg !4085

and.rhs1558:                                      ; preds = %switch.entry1556
  %591 = load i32, ptr %t, align 4, !dbg !4087
  %i2b1559 = icmp ne i32 %591, 0, !dbg !4087
  br i1 %i2b1559, label %or.phi1565, label %or.rhs1560, !dbg !4087

or.rhs1560:                                       ; preds = %and.rhs1558
  %592 = load i32, ptr %a, align 4, !dbg !4088
  %593 = load i32, ptr %i1441, align 4, !dbg !4089
  %add1561 = add i32 %592, %593, !dbg !4088
  %add1562 = add i32 %add1561, 1, !dbg !4088
  %and1563 = and i32 %add1562, 127, !dbg !4088
  %594 = load i32, ptr %z, align 4, !dbg !4090
  %neq1564 = icmp ne i32 %and1563, %594, !dbg !4088
  br label %or.phi1565, !dbg !4088

or.phi1565:                                       ; preds = %or.rhs1560, %and.rhs1558
  %val1566 = phi i1 [ true, %and.rhs1558 ], [ %neq1564, %or.rhs1560 ], !dbg !4088
  br label %and.phi1567, !dbg !4088

and.phi1567:                                      ; preds = %or.phi1565, %switch.entry1556
  %val1568 = phi i1 [ false, %switch.entry1556 ], [ %val1566, %or.phi1565 ], !dbg !4088
  %eq1569 = icmp eq i1 %val1568, %589, !dbg !4088
  br i1 %eq1569, label %switch.case1570, label %next_if1574, !dbg !4088

switch.case1570:                                  ; preds = %and.phi1567
  %595 = load double, ptr %frac, align 8, !dbg !4091
  %596 = load i32, ptr %sign383, align 4, !dbg !4093
  %sifp1571 = sitofp i32 %596 to double, !dbg !4093
  %fmul1572 = fmul double 2.500000e-01, %sifp1571, !dbg !4094
  %fadd1573 = fadd double %595, %fmul1572, !dbg !4091
  store double %fadd1573, ptr %frac, align 8, !dbg !4091
  br label %switch.exit1599, !dbg !4091

next_if1574:                                      ; preds = %and.phi1567
  %597 = load i32, ptr %t, align 4, !dbg !4095
  %lt1575 = icmp ult i32 500000000, %597, !dbg !4095
  %eq1576 = icmp eq i1 %lt1575, %589, !dbg !4095
  br i1 %eq1576, label %switch.case1577, label %next_if1581, !dbg !4095

switch.case1577:                                  ; preds = %next_if1574
  %598 = load double, ptr %frac, align 8, !dbg !4096
  %599 = load i32, ptr %sign383, align 4, !dbg !4098
  %sifp1578 = sitofp i32 %599 to double, !dbg !4098
  %fmul1579 = fmul double 7.500000e-01, %sifp1578, !dbg !4099
  %fadd1580 = fadd double %598, %fmul1579, !dbg !4096
  store double %fadd1580, ptr %frac, align 8, !dbg !4096
  br label %switch.exit1599, !dbg !4096

next_if1581:                                      ; preds = %next_if1574
  %600 = load i32, ptr %t, align 4, !dbg !4100
  %eq1582 = icmp eq i32 500000000, %600, !dbg !4100
  %eq1583 = icmp eq i1 %eq1582, %589, !dbg !4100
  br i1 %eq1583, label %switch.case1584, label %next_if1598, !dbg !4100

switch.case1584:                                  ; preds = %next_if1581
  %601 = load i32, ptr %a, align 4, !dbg !4101
  %602 = load i32, ptr %i1441, align 4, !dbg !4103
  %add1585 = add i32 %601, %602, !dbg !4101
  %add1586 = add i32 %add1585, 1, !dbg !4101
  %and1587 = and i32 %add1586, 127, !dbg !4101
  %603 = load i32, ptr %z, align 4, !dbg !4104
  %eq1588 = icmp eq i32 %and1587, %603, !dbg !4101
  br i1 %eq1588, label %if.then1589, label %if.else1593, !dbg !4101

if.then1589:                                      ; preds = %switch.case1584
  %604 = load double, ptr %frac, align 8, !dbg !4105
  %605 = load i32, ptr %sign383, align 4, !dbg !4107
  %sifp1590 = sitofp i32 %605 to double, !dbg !4107
  %fmul1591 = fmul double 5.000000e-01, %sifp1590, !dbg !4108
  %fadd1592 = fadd double %604, %fmul1591, !dbg !4105
  store double %fadd1592, ptr %frac, align 8, !dbg !4105
  br label %if.exit1597, !dbg !4105

if.else1593:                                      ; preds = %switch.case1584
  %606 = load double, ptr %frac, align 8, !dbg !4109
  %607 = load i32, ptr %sign383, align 4, !dbg !4111
  %sifp1594 = sitofp i32 %607 to double, !dbg !4111
  %fmul1595 = fmul double 7.500000e-01, %sifp1594, !dbg !4112
  %fadd1596 = fadd double %606, %fmul1595, !dbg !4109
  store double %fadd1596, ptr %frac, align 8, !dbg !4109
  br label %if.exit1597, !dbg !4109

if.exit1597:                                      ; preds = %if.else1593, %if.then1589
  br label %switch.exit1599, !dbg !4109

next_if1598:                                      ; preds = %next_if1581
  br label %switch.exit1599, !dbg !4109

switch.exit1599:                                  ; preds = %next_if1598, %if.exit1597, %switch.case1577, %switch.case1570
  %608 = load i32, ptr %bits1498, align 4, !dbg !4113
  %sub1600 = sub i32 53, %608, !dbg !4114
  %ge1601 = icmp sge i32 %sub1600, 2, !dbg !4114
  br i1 %ge1601, label %and.rhs1602, label %and.phi1606, !dbg !4114

and.rhs1602:                                      ; preds = %switch.exit1599
  %609 = load double, ptr %frac, align 8, !dbg !4115
  %fmod1603 = frem double %609, 1.000000e+00, !dbg !4115
  %neq1604 = fcmp one double %fmod1603, 0.000000e+00, !dbg !4115
  %not1605 = xor i1 %neq1604, true, !dbg !4115
  br label %and.phi1606, !dbg !4115

and.phi1606:                                      ; preds = %and.rhs1602, %switch.exit1599
  %val1607 = phi i1 [ false, %switch.exit1599 ], [ %not1605, %and.rhs1602 ], !dbg !4115
  br i1 %val1607, label %if.then1608, label %if.exit1609, !dbg !4115

if.then1608:                                      ; preds = %and.phi1606
  %610 = load double, ptr %frac, align 8, !dbg !4116
  %fincdec = fadd double %610, 1.000000e+00, !dbg !4116
  store double %fincdec, ptr %frac, align 8, !dbg !4116
  br label %if.exit1609, !dbg !4116

if.exit1609:                                      ; preds = %if.then1608, %and.phi1606
  br label %if.exit1610, !dbg !4116

if.exit1610:                                      ; preds = %if.exit1609, %if.exit1530
  %611 = load double, ptr %y1440, align 8, !dbg !4117
  %612 = load double, ptr %frac, align 8, !dbg !4118
  %fadd1611 = fadd double %611, %612, !dbg !4117
  store double %fadd1611, ptr %y1440, align 8, !dbg !4117
  %613 = load double, ptr %y1440, align 8, !dbg !4119
  %614 = load double, ptr %bias1511, align 8, !dbg !4120
  %fsub1612 = fsub double %613, %614, !dbg !4119
  store double %fsub1612, ptr %y1440, align 8, !dbg !4119
  %615 = load i32, ptr %e2707, align 4, !dbg !4121
  %add1613 = add i32 %615, 53, !dbg !4121
  %and1614 = and i32 %add1613, 2147483647, !dbg !4121
  %616 = load i32, ptr %emax, align 4, !dbg !4122
  %sub1615 = sub i32 %616, 5, !dbg !4122
  %gt1616 = icmp sgt i32 %and1614, %sub1615, !dbg !4121
  br i1 %gt1616, label %if.then1617, label %if.exit1645, !dbg !4121

if.then1617:                                      ; preds = %if.exit1610
  %617 = load double, ptr %y1440, align 8
  store double %617, ptr %x1618, align 8
  %618 = load double, ptr %x1618, align 8, !dbg !4123
  %619 = call double @llvm.fabs.f64(double %618), !dbg !4123
  %ge1619 = fcmp oge double %619, 0x4340000000000000, !dbg !4125
  br i1 %ge1619, label %if.then1620, label %if.exit1633, !dbg !4125

if.then1620:                                      ; preds = %if.then1617
  %620 = load i8, ptr %denormal, align 1, !dbg !4127
  %621 = trunc i8 %620 to i1, !dbg !4127
  br i1 %621, label %and.rhs1621, label %and.phi1627, !dbg !4127

and.rhs1621:                                      ; preds = %if.then1620
  %622 = load i32, ptr %bits1498, align 4, !dbg !4129
  %623 = load i32, ptr %e2707, align 4, !dbg !4130
  %add1622 = add i32 53, %623, !dbg !4131
  %sub1623 = sub i32 %add1622, -149, !dbg !4131
  %eq1624 = icmp eq i32 %sub1623, %622, !dbg !4129
  %check1625 = icmp sge i32 %sub1623, 0, !dbg !4129
  %siui-eq1626 = and i1 %check1625, %eq1624, !dbg !4129
  br label %and.phi1627, !dbg !4129

and.phi1627:                                      ; preds = %and.rhs1621, %if.then1620
  %val1628 = phi i1 [ false, %if.then1620 ], [ %siui-eq1626, %and.rhs1621 ], !dbg !4129
  br i1 %val1628, label %if.then1629, label %if.exit1630, !dbg !4129

if.then1629:                                      ; preds = %and.phi1627
  store i8 0, ptr %denormal, align 1, !dbg !4132
  br label %if.exit1630, !dbg !4132

if.exit1630:                                      ; preds = %if.then1629, %and.phi1627
  %624 = load double, ptr %y1440, align 8, !dbg !4133
  %fmul1631 = fmul double %624, 5.000000e-01, !dbg !4133
  store double %fmul1631, ptr %y1440, align 8, !dbg !4133
  %625 = load i32, ptr %e2707, align 4, !dbg !4134
  %add1632 = add i32 %625, 1, !dbg !4134
  store i32 %add1632, ptr %e2707, align 4, !dbg !4134
  br label %if.exit1633, !dbg !4134

if.exit1633:                                      ; preds = %if.exit1630, %if.then1617
  %626 = load i32, ptr %e2707, align 4, !dbg !4135
  %add1634 = add i32 %626, 53, !dbg !4135
  %627 = load i32, ptr %emax, align 4, !dbg !4136
  %gt1635 = icmp sgt i32 %add1634, %627, !dbg !4135
  br i1 %gt1635, label %or.phi1641, label %or.rhs1636, !dbg !4135

or.rhs1636:                                       ; preds = %if.exit1633
  %628 = load i8, ptr %denormal, align 1, !dbg !4137
  %629 = trunc i8 %628 to i1, !dbg !4137
  br i1 %629, label %and.rhs1637, label %and.phi1639, !dbg !4137

and.rhs1637:                                      ; preds = %or.rhs1636
  %630 = load double, ptr %frac, align 8, !dbg !4138
  %neq1638 = fcmp one double %630, 0.000000e+00, !dbg !4138
  br label %and.phi1639, !dbg !4138

and.phi1639:                                      ; preds = %and.rhs1637, %or.rhs1636
  %val1640 = phi i1 [ false, %or.rhs1636 ], [ %neq1638, %and.rhs1637 ], !dbg !4138
  br label %or.phi1641, !dbg !4138

or.phi1641:                                       ; preds = %and.phi1639, %if.exit1633
  %val1642 = phi i1 [ true, %if.exit1633 ], [ %val1640, %and.phi1639 ], !dbg !4138
  br i1 %val1642, label %if.then1643, label %if.exit1644, !dbg !4138

if.then1643:                                      ; preds = %or.phi1641
  store i64 ptrtoint (ptr @std.core.string.MALFORMED_FLOAT to i64), ptr %reterr, align 8, !dbg !4139
  br label %err_retblock, !dbg !4139

if.exit1644:                                      ; preds = %or.phi1641
  br label %if.exit1645, !dbg !4139

if.exit1645:                                      ; preds = %if.exit1644, %if.exit1610
  %631 = load double, ptr %y1440, align 8
  store double %631, ptr %x1646, align 8
  %632 = load i32, ptr %e2707, align 4
  store i32 %632, ptr %n1647, align 4
  %633 = load double, ptr %x1646, align 8, !dbg !4140
  %634 = load i32, ptr %n1647, align 4, !dbg !4140
  %635 = call double @scalbn(double %633, i32 %634), !dbg !4143
  store double %635, ptr %blockret384, align 8, !dbg !4143
  br label %expr_block.exit1649, !dbg !4143

expr_block.exit1649:                              ; preds = %if.exit1645, %checkok789, %checkok750, %if.then720, %if.then668, %if.then651, %if.exit438, %if.then426
  %636 = load double, ptr %blockret384, align 8, !dbg !4143
  %fpfptrunc1650 = fptrunc double %636 to float, !dbg !4143
  store float %fpfptrunc1650, ptr %blockret, align 4, !dbg !4143
  br label %expr_block.exit1651, !dbg !4143

expr_block.exit1651:                              ; preds = %expr_block.exit1649, %expr_block.exit, %if.then83, %if.then56
  %637 = load float, ptr %blockret, align 4, !dbg !4143
  store float %637, ptr %0, align 4, !dbg !4143
  ret i64 0, !dbg !4143

err_retblock:                                     ; preds = %if.then1643, %if.then677, %if.then674, %if.then647, %guard_block642, %if.then616, %if.then607, %if.then498, %if.then437, %if.then375, %if.then319, %if.then316, %guard_block, %if.then271, %if.then219, %if.then154, %if.then
  %638 = load i64, ptr %reterr, align 8, !dbg !4143
  ret i64 %638, !dbg !4143

panic:                                            ; preds = %and.rhs
  store i64 %4, ptr %taddr, align 8
  %639 = insertvalue %any undef, ptr %taddr, 0
  %640 = insertvalue %any %639, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr3, align 8
  %641 = insertvalue %any undef, ptr %taddr3, 0
  %642 = insertvalue %any %641, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %640, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %642, ptr %ptradd4, align 16
  %643 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %643, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 465, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !3399
  unreachable, !dbg !3399

panic5:                                           ; preds = %loop.body
  store i64 %10, ptr %taddr6, align 8
  %644 = insertvalue %any undef, ptr %taddr6, 0
  %645 = insertvalue %any %644, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr7, align 8
  %646 = insertvalue %any undef, ptr %taddr7, 0
  %647 = insertvalue %any %646, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %645, ptr %varargslots8, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots8, i64 16
  store %any %647, ptr %ptradd9, align 16
  %648 = insertvalue %"any[]" undef, ptr %varargslots8, 0
  %"$$temp10" = insertvalue %"any[]" %648, i64 2, 1
  store %"any[]" %"$$temp10", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 465, ptr byval(%"any[]") align 8 %indirectarg11) #6, !dbg !3400
  unreachable, !dbg !3400

panic19:                                          ; preds = %if.then16
  store i64 %16, ptr %taddr20, align 8
  %649 = insertvalue %any undef, ptr %taddr20, 0
  %650 = insertvalue %any %649, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr21, align 8
  %651 = insertvalue %any undef, ptr %taddr21, 0
  %652 = insertvalue %any %651, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %650, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %652, ptr %ptradd23, align 16
  %653 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %653, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 470, ptr byval(%"any[]") align 8 %indirectarg25) #6, !dbg !3408
  unreachable, !dbg !3408

panic29:                                          ; preds = %switch.case27
  store i64 %23, ptr %taddr30, align 8
  %654 = insertvalue %any undef, ptr %taddr30, 0
  %655 = insertvalue %any %654, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr31, align 8
  %656 = insertvalue %any undef, ptr %taddr31, 0
  %657 = insertvalue %any %656, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %655, ptr %varargslots32, align 16
  %ptradd33 = getelementptr inbounds i8, ptr %varargslots32, i64 16
  store %any %657, ptr %ptradd33, align 16
  %658 = insertvalue %"any[]" undef, ptr %varargslots32, 0
  %"$$temp34" = insertvalue %"any[]" %658, i64 2, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 476, ptr byval(%"any[]") align 8 %indirectarg35) #6, !dbg !3412
  unreachable, !dbg !3412

panic90:                                          ; preds = %and.rhs87
  store i64 %57, ptr %taddr91, align 8
  %659 = insertvalue %any undef, ptr %taddr91, 0
  %660 = insertvalue %any %659, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr92, align 8
  %661 = insertvalue %any undef, ptr %taddr92, 0
  %662 = insertvalue %any %661, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %660, ptr %varargslots93, align 16
  %ptradd94 = getelementptr inbounds i8, ptr %varargslots93, i64 16
  store %any %662, ptr %ptradd94, align 16
  %663 = insertvalue %"any[]" undef, ptr %varargslots93, 0
  %"$$temp95" = insertvalue %"any[]" %663, i64 2, 1
  store %"any[]" %"$$temp95", ptr %indirectarg96, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 482, ptr byval(%"any[]") align 8 %indirectarg96) #6, !dbg !3423
  unreachable, !dbg !3423

panic104:                                         ; preds = %and.rhs101
  store i64 %61, ptr %taddr105, align 8
  %664 = insertvalue %any undef, ptr %taddr105, 0
  %665 = insertvalue %any %664, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr106, align 8
  %666 = insertvalue %any undef, ptr %taddr106, 0
  %667 = insertvalue %any %666, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %665, ptr %varargslots107, align 16
  %ptradd108 = getelementptr inbounds i8, ptr %varargslots107, i64 16
  store %any %667, ptr %ptradd108, align 16
  %668 = insertvalue %"any[]" undef, ptr %varargslots107, 0
  %"$$temp109" = insertvalue %"any[]" %668, i64 2, 1
  store %"any[]" %"$$temp109", ptr %indirectarg110, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 482, ptr byval(%"any[]") align 8 %indirectarg110) #6, !dbg !3425
  unreachable, !dbg !3425

panic118:                                         ; preds = %if.then116
  store i64 %67, ptr %taddr119, align 8
  %669 = insertvalue %any undef, ptr %taddr119, 0
  %670 = insertvalue %any %669, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 2, ptr %taddr120, align 8
  %671 = insertvalue %any undef, ptr %taddr120, 0
  %672 = insertvalue %any %671, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %670, ptr %varargslots121, align 16
  %ptradd122 = getelementptr inbounds i8, ptr %varargslots121, i64 16
  store %any %672, ptr %ptradd122, align 16
  %673 = insertvalue %"any[]" undef, ptr %varargslots121, 0
  %"$$temp123" = insertvalue %"any[]" %673, i64 2, 1
  store %"any[]" %"$$temp123", ptr %indirectarg124, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 484, ptr byval(%"any[]") align 8 %indirectarg124) #6, !dbg !3429
  unreachable, !dbg !3429

panic135:                                         ; preds = %loop.cond132
  store i64 %74, ptr %taddr136, align 8
  %674 = insertvalue %any undef, ptr %taddr136, 0
  %675 = insertvalue %any %674, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %76, ptr %taddr137, align 8
  %676 = insertvalue %any undef, ptr %taddr137, 0
  %677 = insertvalue %any %676, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %675, ptr %varargslots138, align 16
  %ptradd139 = getelementptr inbounds i8, ptr %varargslots138, i64 16
  store %any %677, ptr %ptradd139, align 16
  %678 = insertvalue %"any[]" undef, ptr %varargslots138, 0
  %"$$temp140" = insertvalue %"any[]" %678, i64 2, 1
  store %"any[]" %"$$temp140", ptr %indirectarg141, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 344, ptr byval(%"any[]") align 8 %indirectarg141) #6, !dbg !3462
  unreachable, !dbg !3462

panic164:                                         ; preds = %and.rhs160
  store i64 %90, ptr %taddr165, align 8
  %679 = insertvalue %any undef, ptr %taddr165, 0
  %680 = insertvalue %any %679, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add162, ptr %taddr166, align 8
  %681 = insertvalue %any undef, ptr %taddr166, 0
  %682 = insertvalue %any %681, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %680, ptr %varargslots167, align 16
  %ptradd168 = getelementptr inbounds i8, ptr %varargslots167, i64 16
  store %any %682, ptr %ptradd168, align 16
  %683 = insertvalue %"any[]" undef, ptr %varargslots167, 0
  %"$$temp169" = insertvalue %"any[]" %683, i64 2, 1
  store %"any[]" %"$$temp169", ptr %indirectarg170, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 357, ptr byval(%"any[]") align 8 %indirectarg170) #6, !dbg !3482
  unreachable, !dbg !3482

panic184:                                         ; preds = %and.rhs180
  store i64 %98, ptr %taddr185, align 8
  %684 = insertvalue %any undef, ptr %taddr185, 0
  %685 = insertvalue %any %684, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add182, ptr %taddr186, align 8
  %686 = insertvalue %any undef, ptr %taddr186, 0
  %687 = insertvalue %any %686, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %685, ptr %varargslots187, align 16
  %ptradd188 = getelementptr inbounds i8, ptr %varargslots187, i64 16
  store %any %687, ptr %ptradd188, align 16
  %688 = insertvalue %"any[]" undef, ptr %varargslots187, 0
  %"$$temp189" = insertvalue %"any[]" %688, i64 2, 1
  store %"any[]" %"$$temp189", ptr %indirectarg190, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 361, ptr byval(%"any[]") align 8 %indirectarg190) #6, !dbg !3493
  unreachable, !dbg !3493

panic260:                                         ; preds = %if.exit256
  store i64 %131, ptr %taddr261, align 8
  %689 = insertvalue %any undef, ptr %taddr261, 0
  %690 = insertvalue %any %689, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add258, ptr %taddr262, align 8
  %691 = insertvalue %any undef, ptr %taddr262, 0
  %692 = insertvalue %any %691, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %690, ptr %varargslots263, align 16
  %ptradd264 = getelementptr inbounds i8, ptr %varargslots263, i64 16
  store %any %692, ptr %ptradd264, align 16
  %693 = insertvalue %"any[]" undef, ptr %varargslots263, 0
  %"$$temp265" = insertvalue %"any[]" %693, i64 2, 1
  store %"any[]" %"$$temp265", ptr %indirectarg266, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 394, ptr byval(%"any[]") align 8 %indirectarg266) #6, !dbg !3540
  unreachable, !dbg !3540

panic290:                                         ; preds = %if.then287
  store i64 %148, ptr %taddr291, align 8
  %694 = insertvalue %any undef, ptr %taddr291, 0
  %695 = insertvalue %any %694, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add288, ptr %taddr292, align 8
  %696 = insertvalue %any undef, ptr %taddr292, 0
  %697 = insertvalue %any %696, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %695, ptr %varargslots293, align 16
  %ptradd294 = getelementptr inbounds i8, ptr %varargslots293, i64 16
  store %any %697, ptr %ptradd294, align 16
  %698 = insertvalue %"any[]" undef, ptr %varargslots293, 0
  %"$$temp295" = insertvalue %"any[]" %698, i64 2, 1
  store %"any[]" %"$$temp295", ptr %indirectarg296, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 403, ptr byval(%"any[]") align 8 %indirectarg296) #6, !dbg !3558
  unreachable, !dbg !3558

panic298:                                         ; preds = %checkok297
  store i64 %add288, ptr %taddr299, align 8
  %699 = insertvalue %any undef, ptr %taddr299, 0
  %700 = insertvalue %any %699, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %700, ptr %varargslots300, align 16
  %701 = insertvalue %"any[]" undef, ptr %varargslots300, 0
  %"$$temp301" = insertvalue %"any[]" %701, i64 1, 1
  store %"any[]" %"$$temp301", ptr %indirectarg302, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.96, i64 22, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 403, ptr byval(%"any[]") align 8 %indirectarg302) #6, !dbg !3557
  unreachable, !dbg !3557

panic392:                                         ; preds = %assert_ok
  store i64 %210, ptr %taddr393, align 8
  %702 = insertvalue %any undef, ptr %taddr393, 0
  %703 = insertvalue %any %702, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr394, align 8
  %704 = insertvalue %any undef, ptr %taddr394, 0
  %705 = insertvalue %any %704, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %703, ptr %varargslots395, align 16
  %ptradd396 = getelementptr inbounds i8, ptr %varargslots395, i64 16
  store %any %705, ptr %ptradd396, align 16
  %706 = insertvalue %"any[]" undef, ptr %varargslots395, 0
  %"$$temp397" = insertvalue %"any[]" %706, i64 2, 1
  store %"any[]" %"$$temp397", ptr %indirectarg398, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 45, ptr byval(%"any[]") align 8 %indirectarg398) #6, !dbg !3652
  unreachable, !dbg !3652

panic414:                                         ; preds = %loop.cond411
  store i64 %219, ptr %taddr415, align 8
  %707 = insertvalue %any undef, ptr %taddr415, 0
  %708 = insertvalue %any %707, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %221, ptr %taddr416, align 8
  %709 = insertvalue %any undef, ptr %taddr416, 0
  %710 = insertvalue %any %709, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %708, ptr %varargslots417, align 16
  %ptradd418 = getelementptr inbounds i8, ptr %varargslots417, i64 16
  store %any %710, ptr %ptradd418, align 16
  %711 = insertvalue %"any[]" undef, ptr %varargslots417, 0
  %"$$temp419" = insertvalue %"any[]" %711, i64 2, 1
  store %"any[]" %"$$temp419", ptr %indirectarg420, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 56, ptr byval(%"any[]") align 8 %indirectarg420) #6, !dbg !3677
  unreachable, !dbg !3677

panic447:                                         ; preds = %and.rhs443
  store i64 %236, ptr %taddr448, align 8
  %712 = insertvalue %any undef, ptr %taddr448, 0
  %713 = insertvalue %any %712, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add445, ptr %taddr449, align 8
  %714 = insertvalue %any undef, ptr %taddr449, 0
  %715 = insertvalue %any %714, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %713, ptr %varargslots450, align 16
  %ptradd451 = getelementptr inbounds i8, ptr %varargslots450, i64 16
  store %any %715, ptr %ptradd451, align 16
  %716 = insertvalue %"any[]" undef, ptr %varargslots450, 0
  %"$$temp452" = insertvalue %"any[]" %716, i64 2, 1
  store %"any[]" %"$$temp452", ptr %indirectarg453, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 70, ptr byval(%"any[]") align 8 %indirectarg453) #6, !dbg !3697
  unreachable, !dbg !3697

panic467:                                         ; preds = %and.rhs463
  store i64 %244, ptr %taddr468, align 8
  %717 = insertvalue %any undef, ptr %taddr468, 0
  %718 = insertvalue %any %717, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add465, ptr %taddr469, align 8
  %719 = insertvalue %any undef, ptr %taddr469, 0
  %720 = insertvalue %any %719, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %718, ptr %varargslots470, align 16
  %ptradd471 = getelementptr inbounds i8, ptr %varargslots470, i64 16
  store %any %720, ptr %ptradd471, align 16
  %721 = insertvalue %"any[]" undef, ptr %varargslots470, 0
  %"$$temp472" = insertvalue %"any[]" %721, i64 2, 1
  store %"any[]" %"$$temp472", ptr %indirectarg473, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 74, ptr byval(%"any[]") align 8 %indirectarg473) #6, !dbg !3708
  unreachable, !dbg !3708

panic512:                                         ; preds = %if.then510
  store i64 %sext, ptr %taddr513, align 8
  %722 = insertvalue %any undef, ptr %taddr513, 0
  %723 = insertvalue %any %722, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %723, ptr %varargslots514, align 16
  %724 = insertvalue %"any[]" undef, ptr %varargslots514, 0
  %"$$temp515" = insertvalue %"any[]" %724, i64 1, 1
  store %"any[]" %"$$temp515", ptr %indirectarg516, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 94, ptr byval(%"any[]") align 8 %indirectarg516) #6, !dbg !3730
  unreachable, !dbg !3730

panic519:                                         ; preds = %checkok517
  store i64 128, ptr %taddr520, align 8
  %725 = insertvalue %any undef, ptr %taddr520, 0
  %726 = insertvalue %any %725, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext, ptr %taddr521, align 8
  %727 = insertvalue %any undef, ptr %taddr521, 0
  %728 = insertvalue %any %727, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %726, ptr %varargslots522, align 16
  %ptradd523 = getelementptr inbounds i8, ptr %varargslots522, i64 16
  store %any %728, ptr %ptradd523, align 16
  %729 = insertvalue %"any[]" undef, ptr %varargslots522, 0
  %"$$temp524" = insertvalue %"any[]" %729, i64 2, 1
  store %"any[]" %"$$temp524", ptr %indirectarg525, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 94, ptr byval(%"any[]") align 8 %indirectarg525) #6, !dbg !3730
  unreachable, !dbg !3730

panic529:                                         ; preds = %checkok526
  store i64 %sext527, ptr %taddr530, align 8
  %730 = insertvalue %any undef, ptr %taddr530, 0
  %731 = insertvalue %any %730, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %731, ptr %varargslots531, align 16
  %732 = insertvalue %"any[]" undef, ptr %varargslots531, 0
  %"$$temp532" = insertvalue %"any[]" %732, i64 1, 1
  store %"any[]" %"$$temp532", ptr %indirectarg533, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 94, ptr byval(%"any[]") align 8 %indirectarg533) #6, !dbg !3732
  unreachable, !dbg !3732

panic536:                                         ; preds = %checkok534
  store i64 128, ptr %taddr537, align 8
  %733 = insertvalue %any undef, ptr %taddr537, 0
  %734 = insertvalue %any %733, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext527, ptr %taddr538, align 8
  %735 = insertvalue %any undef, ptr %taddr538, 0
  %736 = insertvalue %any %735, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %734, ptr %varargslots539, align 16
  %ptradd540 = getelementptr inbounds i8, ptr %varargslots539, i64 16
  store %any %736, ptr %ptradd540, align 16
  %737 = insertvalue %"any[]" undef, ptr %varargslots539, 0
  %"$$temp541" = insertvalue %"any[]" %737, i64 2, 1
  store %"any[]" %"$$temp541", ptr %indirectarg542, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 94, ptr byval(%"any[]") align 8 %indirectarg542) #6, !dbg !3732
  unreachable, !dbg !3732

panic552:                                         ; preds = %if.else549
  store i64 %sext550, ptr %taddr553, align 8
  %738 = insertvalue %any undef, ptr %taddr553, 0
  %739 = insertvalue %any %738, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %739, ptr %varargslots554, align 16
  %740 = insertvalue %"any[]" undef, ptr %varargslots554, 0
  %"$$temp555" = insertvalue %"any[]" %740, i64 1, 1
  store %"any[]" %"$$temp555", ptr %indirectarg556, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 98, ptr byval(%"any[]") align 8 %indirectarg556) #6, !dbg !3735
  unreachable, !dbg !3735

panic559:                                         ; preds = %checkok557
  store i64 128, ptr %taddr560, align 8
  %741 = insertvalue %any undef, ptr %taddr560, 0
  %742 = insertvalue %any %741, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext550, ptr %taddr561, align 8
  %743 = insertvalue %any undef, ptr %taddr561, 0
  %744 = insertvalue %any %743, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %742, ptr %varargslots562, align 16
  %ptradd563 = getelementptr inbounds i8, ptr %varargslots562, i64 16
  store %any %744, ptr %ptradd563, align 16
  %745 = insertvalue %"any[]" undef, ptr %varargslots562, 0
  %"$$temp564" = insertvalue %"any[]" %745, i64 2, 1
  store %"any[]" %"$$temp564", ptr %indirectarg565, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 98, ptr byval(%"any[]") align 8 %indirectarg565) #6, !dbg !3735
  unreachable, !dbg !3735

panic593:                                         ; preds = %assert_ok589
  store i64 %285, ptr %taddr594, align 8
  %746 = insertvalue %any undef, ptr %taddr594, 0
  %747 = insertvalue %any %746, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add591, ptr %taddr595, align 8
  %748 = insertvalue %any undef, ptr %taddr595, 0
  %749 = insertvalue %any %748, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %747, ptr %varargslots596, align 16
  %ptradd597 = getelementptr inbounds i8, ptr %varargslots596, i64 16
  store %any %749, ptr %ptradd597, align 16
  %750 = insertvalue %"any[]" undef, ptr %varargslots596, 0
  %"$$temp598" = insertvalue %"any[]" %750, i64 2, 1
  store %"any[]" %"$$temp598", ptr %indirectarg599, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 113, ptr byval(%"any[]") align 8 %indirectarg599) #6, !dbg !3756
  unreachable, !dbg !3756

panic620:                                         ; preds = %if.exit617
  store i64 %301, ptr %taddr621, align 8
  %751 = insertvalue %any undef, ptr %taddr621, 0
  %752 = insertvalue %any %751, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add618, ptr %taddr622, align 8
  %753 = insertvalue %any undef, ptr %taddr622, 0
  %754 = insertvalue %any %753, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %752, ptr %varargslots623, align 16
  %ptradd624 = getelementptr inbounds i8, ptr %varargslots623, i64 16
  store %any %754, ptr %ptradd624, align 16
  %755 = insertvalue %"any[]" undef, ptr %varargslots623, 0
  %"$$temp625" = insertvalue %"any[]" %755, i64 2, 1
  store %"any[]" %"$$temp625", ptr %indirectarg626, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 120, ptr byval(%"any[]") align 8 %indirectarg626) #6, !dbg !3770
  unreachable, !dbg !3770

panic629:                                         ; preds = %checkok627
  store i64 %add618, ptr %taddr630, align 8
  %756 = insertvalue %any undef, ptr %taddr630, 0
  %757 = insertvalue %any %756, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %757, ptr %varargslots631, align 16
  %758 = insertvalue %"any[]" undef, ptr %varargslots631, 0
  %"$$temp632" = insertvalue %"any[]" %758, i64 1, 1
  store %"any[]" %"$$temp632", ptr %indirectarg633, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.96, i64 22, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 120, ptr byval(%"any[]") align 8 %indirectarg633) #6, !dbg !3769
  unreachable, !dbg !3769

panic686:                                         ; preds = %loop.body683
  store i64 %sext684, ptr %taddr687, align 8
  %759 = insertvalue %any undef, ptr %taddr687, 0
  %760 = insertvalue %any %759, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %760, ptr %varargslots688, align 16
  %761 = insertvalue %"any[]" undef, ptr %varargslots688, 0
  %"$$temp689" = insertvalue %"any[]" %761, i64 1, 1
  store %"any[]" %"$$temp689", ptr %indirectarg690, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 138, ptr byval(%"any[]") align 8 %indirectarg690) #6, !dbg !3798
  unreachable, !dbg !3798

panic693:                                         ; preds = %checkok691
  store i64 128, ptr %taddr694, align 8
  %762 = insertvalue %any undef, ptr %taddr694, 0
  %763 = insertvalue %any %762, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext684, ptr %taddr695, align 8
  %764 = insertvalue %any undef, ptr %taddr695, 0
  %765 = insertvalue %any %764, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %763, ptr %varargslots696, align 16
  %ptradd697 = getelementptr inbounds i8, ptr %varargslots696, i64 16
  store %any %765, ptr %ptradd697, align 16
  %766 = insertvalue %"any[]" undef, ptr %varargslots696, 0
  %"$$temp698" = insertvalue %"any[]" %766, i64 2, 1
  store %"any[]" %"$$temp698", ptr %indirectarg699, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 138, ptr byval(%"any[]") align 8 %indirectarg699) #6, !dbg !3798
  unreachable, !dbg !3798

panic732:                                         ; preds = %if.then726
  store i64 %sub730, ptr %taddr733, align 8
  %767 = insertvalue %any undef, ptr %taddr733, 0
  %768 = insertvalue %any %767, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %768, ptr %varargslots734, align 16
  %769 = insertvalue %"any[]" undef, ptr %varargslots734, 0
  %"$$temp735" = insertvalue %"any[]" %769, i64 1, 1
  store %"any[]" %"$$temp735", ptr %indirectarg736, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 152, ptr byval(%"any[]") align 8 %indirectarg736) #6, !dbg !3825
  unreachable, !dbg !3825

panic739:                                         ; preds = %checkok737
  store i64 8, ptr %taddr740, align 8
  %770 = insertvalue %any undef, ptr %taddr740, 0
  %771 = insertvalue %any %770, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub730, ptr %taddr741, align 8
  %772 = insertvalue %any undef, ptr %taddr741, 0
  %773 = insertvalue %any %772, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %771, ptr %varargslots742, align 16
  %ptradd743 = getelementptr inbounds i8, ptr %varargslots742, i64 16
  store %any %773, ptr %ptradd743, align 16
  %774 = insertvalue %"any[]" undef, ptr %varargslots742, 0
  %"$$temp744" = insertvalue %"any[]" %774, i64 2, 1
  store %"any[]" %"$$temp744", ptr %indirectarg745, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 152, ptr byval(%"any[]") align 8 %indirectarg745) #6, !dbg !3825
  unreachable, !dbg !3825

panic749:                                         ; preds = %checkok746
  %775 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3822
  call void %775(ptr @.panic_msg.100, i64 17, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 152) #6, !dbg !3822
  unreachable, !dbg !3822

panic759:                                         ; preds = %or.rhs758
  store i32 %353, ptr %taddr760, align 4
  %776 = insertvalue %any undef, ptr %taddr760, 0
  %777 = insertvalue %any %776, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %777, ptr %varargslots761, align 16
  %778 = insertvalue %"any[]" undef, ptr %varargslots761, 0
  %"$$temp762" = insertvalue %"any[]" %778, i64 1, 1
  store %"any[]" %"$$temp762", ptr %indirectarg763, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 35, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 154, ptr byval(%"any[]") align 8 %indirectarg763) #6, !dbg !3835
  unreachable, !dbg !3835

panic775:                                         ; preds = %if.then769
  store i64 %sub773, ptr %taddr776, align 8
  %779 = insertvalue %any undef, ptr %taddr776, 0
  %780 = insertvalue %any %779, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %780, ptr %varargslots777, align 16
  %781 = insertvalue %"any[]" undef, ptr %varargslots777, 0
  %"$$temp778" = insertvalue %"any[]" %781, i64 1, 1
  store %"any[]" %"$$temp778", ptr %indirectarg779, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 154, ptr byval(%"any[]") align 8 %indirectarg779) #6, !dbg !3838
  unreachable, !dbg !3838

panic782:                                         ; preds = %checkok780
  store i64 8, ptr %taddr783, align 8
  %782 = insertvalue %any undef, ptr %taddr783, 0
  %783 = insertvalue %any %782, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub773, ptr %taddr784, align 8
  %784 = insertvalue %any undef, ptr %taddr784, 0
  %785 = insertvalue %any %784, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %783, ptr %varargslots785, align 16
  %ptradd786 = getelementptr inbounds i8, ptr %varargslots785, i64 16
  store %any %785, ptr %ptradd786, align 16
  %786 = insertvalue %"any[]" undef, ptr %varargslots785, 0
  %"$$temp787" = insertvalue %"any[]" %786, i64 2, 1
  store %"any[]" %"$$temp787", ptr %indirectarg788, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 154, ptr byval(%"any[]") align 8 %indirectarg788) #6, !dbg !3838
  unreachable, !dbg !3838

panic807:                                         ; preds = %cond.phi803
  store i64 %sub805, ptr %taddr808, align 8
  %787 = insertvalue %any undef, ptr %taddr808, 0
  %788 = insertvalue %any %787, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %788, ptr %varargslots809, align 16
  %789 = insertvalue %"any[]" undef, ptr %varargslots809, 0
  %"$$temp810" = insertvalue %"any[]" %789, i64 1, 1
  store %"any[]" %"$$temp810", ptr %indirectarg811, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 161, ptr byval(%"any[]") align 8 %indirectarg811) #6, !dbg !3849
  unreachable, !dbg !3849

panic814:                                         ; preds = %checkok812
  store i64 8, ptr %taddr815, align 8
  %790 = insertvalue %any undef, ptr %taddr815, 0
  %791 = insertvalue %any %790, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub805, ptr %taddr816, align 8
  %792 = insertvalue %any undef, ptr %taddr816, 0
  %793 = insertvalue %any %792, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %791, ptr %varargslots817, align 16
  %ptradd818 = getelementptr inbounds i8, ptr %varargslots817, i64 16
  store %any %793, ptr %ptradd818, align 16
  %794 = insertvalue %"any[]" undef, ptr %varargslots817, 0
  %"$$temp819" = insertvalue %"any[]" %794, i64 2, 1
  store %"any[]" %"$$temp819", ptr %indirectarg820, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 161, ptr byval(%"any[]") align 8 %indirectarg820) #6, !dbg !3849
  unreachable, !dbg !3849

panic828:                                         ; preds = %loop.body825
  store i64 %sext826, ptr %taddr829, align 8
  %795 = insertvalue %any undef, ptr %taddr829, 0
  %796 = insertvalue %any %795, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %796, ptr %varargslots830, align 16
  %797 = insertvalue %"any[]" undef, ptr %varargslots830, 0
  %"$$temp831" = insertvalue %"any[]" %797, i64 1, 1
  store %"any[]" %"$$temp831", ptr %indirectarg832, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 165, ptr byval(%"any[]") align 8 %indirectarg832) #6, !dbg !3860
  unreachable, !dbg !3860

panic835:                                         ; preds = %checkok833
  store i64 128, ptr %taddr836, align 8
  %798 = insertvalue %any undef, ptr %taddr836, 0
  %799 = insertvalue %any %798, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext826, ptr %taddr837, align 8
  %800 = insertvalue %any undef, ptr %taddr837, 0
  %801 = insertvalue %any %800, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %799, ptr %varargslots838, align 16
  %ptradd839 = getelementptr inbounds i8, ptr %varargslots838, i64 16
  store %any %801, ptr %ptradd839, align 16
  %802 = insertvalue %"any[]" undef, ptr %varargslots838, 0
  %"$$temp840" = insertvalue %"any[]" %802, i64 2, 1
  store %"any[]" %"$$temp840", ptr %indirectarg841, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 165, ptr byval(%"any[]") align 8 %indirectarg841) #6, !dbg !3860
  unreachable, !dbg !3860

panic845:                                         ; preds = %checkok842
  %803 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3862
  call void %803(ptr @.panic_msg.102, i64 10, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 165) #6, !dbg !3862
  unreachable, !dbg !3862

panic850:                                         ; preds = %checkok846
  store i64 %sext848, ptr %taddr851, align 8
  %804 = insertvalue %any undef, ptr %taddr851, 0
  %805 = insertvalue %any %804, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %805, ptr %varargslots852, align 16
  %806 = insertvalue %"any[]" undef, ptr %varargslots852, 0
  %"$$temp853" = insertvalue %"any[]" %806, i64 1, 1
  store %"any[]" %"$$temp853", ptr %indirectarg854, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 166, ptr byval(%"any[]") align 8 %indirectarg854) #6, !dbg !3863
  unreachable, !dbg !3863

panic857:                                         ; preds = %checkok855
  store i64 128, ptr %taddr858, align 8
  %807 = insertvalue %any undef, ptr %taddr858, 0
  %808 = insertvalue %any %807, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext848, ptr %taddr859, align 8
  %809 = insertvalue %any undef, ptr %taddr859, 0
  %810 = insertvalue %any %809, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %808, ptr %varargslots860, align 16
  %ptradd861 = getelementptr inbounds i8, ptr %varargslots860, i64 16
  store %any %810, ptr %ptradd861, align 16
  %811 = insertvalue %"any[]" undef, ptr %varargslots860, 0
  %"$$temp862" = insertvalue %"any[]" %811, i64 2, 1
  store %"any[]" %"$$temp862", ptr %indirectarg863, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 166, ptr byval(%"any[]") align 8 %indirectarg863) #6, !dbg !3863
  unreachable, !dbg !3863

panic868:                                         ; preds = %checkok864
  store i64 %sext866, ptr %taddr869, align 8
  %812 = insertvalue %any undef, ptr %taddr869, 0
  %813 = insertvalue %any %812, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %813, ptr %varargslots870, align 16
  %814 = insertvalue %"any[]" undef, ptr %varargslots870, 0
  %"$$temp871" = insertvalue %"any[]" %814, i64 1, 1
  store %"any[]" %"$$temp871", ptr %indirectarg872, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 166, ptr byval(%"any[]") align 8 %indirectarg872) #6, !dbg !3864
  unreachable, !dbg !3864

panic875:                                         ; preds = %checkok873
  store i64 128, ptr %taddr876, align 8
  %815 = insertvalue %any undef, ptr %taddr876, 0
  %816 = insertvalue %any %815, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext866, ptr %taddr877, align 8
  %817 = insertvalue %any undef, ptr %taddr877, 0
  %818 = insertvalue %any %817, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %816, ptr %varargslots878, align 16
  %ptradd879 = getelementptr inbounds i8, ptr %varargslots878, i64 16
  store %any %818, ptr %ptradd879, align 16
  %819 = insertvalue %"any[]" undef, ptr %varargslots878, 0
  %"$$temp880" = insertvalue %"any[]" %819, i64 2, 1
  store %"any[]" %"$$temp880", ptr %indirectarg881, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 166, ptr byval(%"any[]") align 8 %indirectarg881) #6, !dbg !3864
  unreachable, !dbg !3864

panic885:                                         ; preds = %checkok882
  %820 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3866
  call void %820(ptr @.panic_msg.100, i64 17, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 166) #6, !dbg !3866
  unreachable, !dbg !3866

panic889:                                         ; preds = %checkok886
  %821 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3869
  call void %821(ptr @.panic_msg.100, i64 17, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 167) #6, !dbg !3869
  unreachable, !dbg !3869

panic897:                                         ; preds = %and.rhs894
  store i64 %sext895, ptr %taddr898, align 8
  %822 = insertvalue %any undef, ptr %taddr898, 0
  %823 = insertvalue %any %822, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %823, ptr %varargslots899, align 16
  %824 = insertvalue %"any[]" undef, ptr %varargslots899, 0
  %"$$temp900" = insertvalue %"any[]" %824, i64 1, 1
  store %"any[]" %"$$temp900", ptr %indirectarg901, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 168, ptr byval(%"any[]") align 8 %indirectarg901) #6, !dbg !3873
  unreachable, !dbg !3873

panic904:                                         ; preds = %checkok902
  store i64 128, ptr %taddr905, align 8
  %825 = insertvalue %any undef, ptr %taddr905, 0
  %826 = insertvalue %any %825, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext895, ptr %taddr906, align 8
  %827 = insertvalue %any undef, ptr %taddr906, 0
  %828 = insertvalue %any %827, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %826, ptr %varargslots907, align 16
  %ptradd908 = getelementptr inbounds i8, ptr %varargslots907, i64 16
  store %any %828, ptr %ptradd908, align 16
  %829 = insertvalue %"any[]" undef, ptr %varargslots907, 0
  %"$$temp909" = insertvalue %"any[]" %829, i64 2, 1
  store %"any[]" %"$$temp909", ptr %indirectarg910, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 168, ptr byval(%"any[]") align 8 %indirectarg910) #6, !dbg !3873
  unreachable, !dbg !3873

panic928:                                         ; preds = %if.then924
  store i64 %sext926, ptr %taddr929, align 8
  %830 = insertvalue %any undef, ptr %taddr929, 0
  %831 = insertvalue %any %830, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %831, ptr %varargslots930, align 16
  %832 = insertvalue %"any[]" undef, ptr %varargslots930, 0
  %"$$temp931" = insertvalue %"any[]" %832, i64 1, 1
  store %"any[]" %"$$temp931", ptr %indirectarg932, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 174, ptr byval(%"any[]") align 8 %indirectarg932) #6, !dbg !3879
  unreachable, !dbg !3879

panic935:                                         ; preds = %checkok933
  store i64 128, ptr %taddr936, align 8
  %833 = insertvalue %any undef, ptr %taddr936, 0
  %834 = insertvalue %any %833, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext926, ptr %taddr937, align 8
  %835 = insertvalue %any undef, ptr %taddr937, 0
  %836 = insertvalue %any %835, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %834, ptr %varargslots938, align 16
  %ptradd939 = getelementptr inbounds i8, ptr %varargslots938, i64 16
  store %any %836, ptr %ptradd939, align 16
  %837 = insertvalue %"any[]" undef, ptr %varargslots938, 0
  %"$$temp940" = insertvalue %"any[]" %837, i64 2, 1
  store %"any[]" %"$$temp940", ptr %indirectarg941, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 174, ptr byval(%"any[]") align 8 %indirectarg941) #6, !dbg !3879
  unreachable, !dbg !3879

panic955:                                         ; preds = %and.rhs952
  store i64 %sext953, ptr %taddr956, align 8
  %838 = insertvalue %any undef, ptr %taddr956, 0
  %839 = insertvalue %any %838, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %839, ptr %varargslots957, align 16
  %840 = insertvalue %"any[]" undef, ptr %varargslots957, 0
  %"$$temp958" = insertvalue %"any[]" %840, i64 1, 1
  store %"any[]" %"$$temp958", ptr %indirectarg959, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 179, ptr byval(%"any[]") align 8 %indirectarg959) #6, !dbg !3888
  unreachable, !dbg !3888

panic962:                                         ; preds = %checkok960
  store i64 128, ptr %taddr963, align 8
  %841 = insertvalue %any undef, ptr %taddr963, 0
  %842 = insertvalue %any %841, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext953, ptr %taddr964, align 8
  %843 = insertvalue %any undef, ptr %taddr964, 0
  %844 = insertvalue %any %843, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %842, ptr %varargslots965, align 16
  %ptradd966 = getelementptr inbounds i8, ptr %varargslots965, i64 16
  store %any %844, ptr %ptradd966, align 16
  %845 = insertvalue %"any[]" undef, ptr %varargslots965, 0
  %"$$temp967" = insertvalue %"any[]" %845, i64 2, 1
  store %"any[]" %"$$temp967", ptr %indirectarg968, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 179, ptr byval(%"any[]") align 8 %indirectarg968) #6, !dbg !3888
  unreachable, !dbg !3888

panic985:                                         ; preds = %loop.body981
  store i64 %sext983, ptr %taddr986, align 8
  %846 = insertvalue %any undef, ptr %taddr986, 0
  %847 = insertvalue %any %846, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %847, ptr %varargslots987, align 16
  %848 = insertvalue %"any[]" undef, ptr %varargslots987, 0
  %"$$temp988" = insertvalue %"any[]" %848, i64 1, 1
  store %"any[]" %"$$temp988", ptr %indirectarg989, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 185, ptr byval(%"any[]") align 8 %indirectarg989) #6, !dbg !3900
  unreachable, !dbg !3900

panic992:                                         ; preds = %checkok990
  store i64 128, ptr %taddr993, align 8
  %849 = insertvalue %any undef, ptr %taddr993, 0
  %850 = insertvalue %any %849, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext983, ptr %taddr994, align 8
  %851 = insertvalue %any undef, ptr %taddr994, 0
  %852 = insertvalue %any %851, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %850, ptr %varargslots995, align 16
  %ptradd996 = getelementptr inbounds i8, ptr %varargslots995, i64 16
  store %any %852, ptr %ptradd996, align 16
  %853 = insertvalue %"any[]" undef, ptr %varargslots995, 0
  %"$$temp997" = insertvalue %"any[]" %853, i64 2, 1
  store %"any[]" %"$$temp997", ptr %indirectarg998, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 185, ptr byval(%"any[]") align 8 %indirectarg998) #6, !dbg !3900
  unreachable, !dbg !3900

panic1010:                                        ; preds = %if.then1005
  store i64 %sext1008, ptr %taddr1011, align 8
  %854 = insertvalue %any undef, ptr %taddr1011, 0
  %855 = insertvalue %any %854, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %855, ptr %varargslots1012, align 16
  %856 = insertvalue %"any[]" undef, ptr %varargslots1012, 0
  %"$$temp1013" = insertvalue %"any[]" %856, i64 1, 1
  store %"any[]" %"$$temp1013", ptr %indirectarg1014, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 189, ptr byval(%"any[]") align 8 %indirectarg1014) #6, !dbg !3907
  unreachable, !dbg !3907

panic1017:                                        ; preds = %checkok1015
  store i64 128, ptr %taddr1018, align 8
  %857 = insertvalue %any undef, ptr %taddr1018, 0
  %858 = insertvalue %any %857, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1008, ptr %taddr1019, align 8
  %859 = insertvalue %any undef, ptr %taddr1019, 0
  %860 = insertvalue %any %859, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %858, ptr %varargslots1020, align 16
  %ptradd1021 = getelementptr inbounds i8, ptr %varargslots1020, i64 16
  store %any %860, ptr %ptradd1021, align 16
  %861 = insertvalue %"any[]" undef, ptr %varargslots1020, 0
  %"$$temp1022" = insertvalue %"any[]" %861, i64 2, 1
  store %"any[]" %"$$temp1022", ptr %indirectarg1023, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 189, ptr byval(%"any[]") align 8 %indirectarg1023) #6, !dbg !3907
  unreachable, !dbg !3907

panic1031:                                        ; preds = %if.else1028
  store i64 %sext1029, ptr %taddr1032, align 8
  %862 = insertvalue %any undef, ptr %taddr1032, 0
  %863 = insertvalue %any %862, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %863, ptr %varargslots1033, align 16
  %864 = insertvalue %"any[]" undef, ptr %varargslots1033, 0
  %"$$temp1034" = insertvalue %"any[]" %864, i64 1, 1
  store %"any[]" %"$$temp1034", ptr %indirectarg1035, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 194, ptr byval(%"any[]") align 8 %indirectarg1035) #6, !dbg !3912
  unreachable, !dbg !3912

panic1038:                                        ; preds = %checkok1036
  store i64 128, ptr %taddr1039, align 8
  %865 = insertvalue %any undef, ptr %taddr1039, 0
  %866 = insertvalue %any %865, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1029, ptr %taddr1040, align 8
  %867 = insertvalue %any undef, ptr %taddr1040, 0
  %868 = insertvalue %any %867, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %866, ptr %varargslots1041, align 16
  %ptradd1042 = getelementptr inbounds i8, ptr %varargslots1041, i64 16
  store %any %868, ptr %ptradd1042, align 16
  %869 = insertvalue %"any[]" undef, ptr %varargslots1041, 0
  %"$$temp1043" = insertvalue %"any[]" %869, i64 2, 1
  store %"any[]" %"$$temp1043", ptr %indirectarg1044, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 194, ptr byval(%"any[]") align 8 %indirectarg1044) #6, !dbg !3912
  unreachable, !dbg !3912

panic1059:                                        ; preds = %and.rhs1056
  store i64 %sext1057, ptr %taddr1060, align 8
  %870 = insertvalue %any undef, ptr %taddr1060, 0
  %871 = insertvalue %any %870, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %871, ptr %varargslots1061, align 16
  %872 = insertvalue %"any[]" undef, ptr %varargslots1061, 0
  %"$$temp1062" = insertvalue %"any[]" %872, i64 1, 1
  store %"any[]" %"$$temp1062", ptr %indirectarg1063, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 196, ptr byval(%"any[]") align 8 %indirectarg1063) #6, !dbg !3918
  unreachable, !dbg !3918

panic1066:                                        ; preds = %checkok1064
  store i64 128, ptr %taddr1067, align 8
  %873 = insertvalue %any undef, ptr %taddr1067, 0
  %874 = insertvalue %any %873, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1057, ptr %taddr1068, align 8
  %875 = insertvalue %any undef, ptr %taddr1068, 0
  %876 = insertvalue %any %875, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %874, ptr %varargslots1069, align 16
  %ptradd1070 = getelementptr inbounds i8, ptr %varargslots1069, i64 16
  store %any %876, ptr %ptradd1070, align 16
  %877 = insertvalue %"any[]" undef, ptr %varargslots1069, 0
  %"$$temp1071" = insertvalue %"any[]" %877, i64 2, 1
  store %"any[]" %"$$temp1071", ptr %indirectarg1072, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 196, ptr byval(%"any[]") align 8 %indirectarg1072) #6, !dbg !3918
  unreachable, !dbg !3918

panic1099:                                        ; preds = %if.then1092
  store i64 %sext1097, ptr %taddr1100, align 8
  %878 = insertvalue %any undef, ptr %taddr1100, 0
  %879 = insertvalue %any %878, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %879, ptr %varargslots1101, align 16
  %880 = insertvalue %"any[]" undef, ptr %varargslots1101, 0
  %"$$temp1102" = insertvalue %"any[]" %880, i64 1, 1
  store %"any[]" %"$$temp1102", ptr %indirectarg1103, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 206, ptr byval(%"any[]") align 8 %indirectarg1103) #6, !dbg !3932
  unreachable, !dbg !3932

panic1106:                                        ; preds = %checkok1104
  store i64 128, ptr %taddr1107, align 8
  %881 = insertvalue %any undef, ptr %taddr1107, 0
  %882 = insertvalue %any %881, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1097, ptr %taddr1108, align 8
  %883 = insertvalue %any undef, ptr %taddr1108, 0
  %884 = insertvalue %any %883, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %882, ptr %varargslots1109, align 16
  %ptradd1110 = getelementptr inbounds i8, ptr %varargslots1109, i64 16
  store %any %884, ptr %ptradd1110, align 16
  %885 = insertvalue %"any[]" undef, ptr %varargslots1109, 0
  %"$$temp1111" = insertvalue %"any[]" %885, i64 2, 1
  store %"any[]" %"$$temp1111", ptr %indirectarg1112, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 206, ptr byval(%"any[]") align 8 %indirectarg1112) #6, !dbg !3932
  unreachable, !dbg !3932

panic1117:                                        ; preds = %checkok1113
  store i64 %sext1115, ptr %taddr1118, align 8
  %886 = insertvalue %any undef, ptr %taddr1118, 0
  %887 = insertvalue %any %886, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %887, ptr %varargslots1119, align 16
  %888 = insertvalue %"any[]" undef, ptr %varargslots1119, 0
  %"$$temp1120" = insertvalue %"any[]" %888, i64 1, 1
  store %"any[]" %"$$temp1120", ptr %indirectarg1121, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 206, ptr byval(%"any[]") align 8 %indirectarg1121) #6, !dbg !3933
  unreachable, !dbg !3933

panic1124:                                        ; preds = %checkok1122
  store i64 128, ptr %taddr1125, align 8
  %889 = insertvalue %any undef, ptr %taddr1125, 0
  %890 = insertvalue %any %889, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1115, ptr %taddr1126, align 8
  %891 = insertvalue %any undef, ptr %taddr1126, 0
  %892 = insertvalue %any %891, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %890, ptr %varargslots1127, align 16
  %ptradd1128 = getelementptr inbounds i8, ptr %varargslots1127, i64 16
  store %any %892, ptr %ptradd1128, align 16
  %893 = insertvalue %"any[]" undef, ptr %varargslots1127, 0
  %"$$temp1129" = insertvalue %"any[]" %893, i64 2, 1
  store %"any[]" %"$$temp1129", ptr %indirectarg1130, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 206, ptr byval(%"any[]") align 8 %indirectarg1130) #6, !dbg !3933
  unreachable, !dbg !3933

panic1137:                                        ; preds = %if.exit1134
  store i64 %sext1135, ptr %taddr1138, align 8
  %894 = insertvalue %any undef, ptr %taddr1138, 0
  %895 = insertvalue %any %894, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %895, ptr %varargslots1139, align 16
  %896 = insertvalue %"any[]" undef, ptr %varargslots1139, 0
  %"$$temp1140" = insertvalue %"any[]" %896, i64 1, 1
  store %"any[]" %"$$temp1140", ptr %indirectarg1141, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 208, ptr byval(%"any[]") align 8 %indirectarg1141) #6, !dbg !3935
  unreachable, !dbg !3935

panic1144:                                        ; preds = %checkok1142
  store i64 128, ptr %taddr1145, align 8
  %897 = insertvalue %any undef, ptr %taddr1145, 0
  %898 = insertvalue %any %897, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1135, ptr %taddr1146, align 8
  %899 = insertvalue %any undef, ptr %taddr1146, 0
  %900 = insertvalue %any %899, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %898, ptr %varargslots1147, align 16
  %ptradd1148 = getelementptr inbounds i8, ptr %varargslots1147, i64 16
  store %any %900, ptr %ptradd1148, align 16
  %901 = insertvalue %"any[]" undef, ptr %varargslots1147, 0
  %"$$temp1149" = insertvalue %"any[]" %901, i64 2, 1
  store %"any[]" %"$$temp1149", ptr %indirectarg1150, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 208, ptr byval(%"any[]") align 8 %indirectarg1150) #6, !dbg !3935
  unreachable, !dbg !3935

panic1166:                                        ; preds = %or.rhs1163
  store i64 %sext1164, ptr %taddr1167, align 8
  %902 = insertvalue %any undef, ptr %taddr1167, 0
  %903 = insertvalue %any %902, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %903, ptr %varargslots1168, align 16
  %904 = insertvalue %"any[]" undef, ptr %varargslots1168, 0
  %"$$temp1169" = insertvalue %"any[]" %904, i64 1, 1
  store %"any[]" %"$$temp1169", ptr %indirectarg1170, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 221, ptr byval(%"any[]") align 8 %indirectarg1170) #6, !dbg !3956
  unreachable, !dbg !3956

panic1173:                                        ; preds = %checkok1171
  store i64 128, ptr %taddr1174, align 8
  %905 = insertvalue %any undef, ptr %taddr1174, 0
  %906 = insertvalue %any %905, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1164, ptr %taddr1175, align 8
  %907 = insertvalue %any undef, ptr %taddr1175, 0
  %908 = insertvalue %any %907, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %906, ptr %varargslots1176, align 16
  %ptradd1177 = getelementptr inbounds i8, ptr %varargslots1176, i64 16
  store %any %908, ptr %ptradd1177, align 16
  %909 = insertvalue %"any[]" undef, ptr %varargslots1176, 0
  %"$$temp1178" = insertvalue %"any[]" %909, i64 2, 1
  store %"any[]" %"$$temp1178", ptr %indirectarg1179, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 221, ptr byval(%"any[]") align 8 %indirectarg1179) #6, !dbg !3956
  unreachable, !dbg !3956

panic1184:                                        ; preds = %checkok1180
  store i64 %sext1182, ptr %taddr1185, align 8
  %910 = insertvalue %any undef, ptr %taddr1185, 0
  %911 = insertvalue %any %910, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %911, ptr %varargslots1186, align 16
  %912 = insertvalue %"any[]" undef, ptr %varargslots1186, 0
  %"$$temp1187" = insertvalue %"any[]" %912, i64 1, 1
  store %"any[]" %"$$temp1187", ptr %indirectarg1188, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 221, ptr byval(%"any[]") align 8 %indirectarg1188) #6, !dbg !3957
  unreachable, !dbg !3957

panic1191:                                        ; preds = %checkok1189
  store i64 2, ptr %taddr1192, align 8
  %913 = insertvalue %any undef, ptr %taddr1192, 0
  %914 = insertvalue %any %913, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1182, ptr %taddr1193, align 8
  %915 = insertvalue %any undef, ptr %taddr1193, 0
  %916 = insertvalue %any %915, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %914, ptr %varargslots1194, align 16
  %ptradd1195 = getelementptr inbounds i8, ptr %varargslots1194, i64 16
  store %any %916, ptr %ptradd1195, align 16
  %917 = insertvalue %"any[]" undef, ptr %varargslots1194, 0
  %"$$temp1196" = insertvalue %"any[]" %917, i64 2, 1
  store %"any[]" %"$$temp1196", ptr %indirectarg1197, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 221, ptr byval(%"any[]") align 8 %indirectarg1197) #6, !dbg !3957
  unreachable, !dbg !3957

panic1209:                                        ; preds = %if.exit1204
  store i64 %sext1207, ptr %taddr1210, align 8
  %918 = insertvalue %any undef, ptr %taddr1210, 0
  %919 = insertvalue %any %918, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %919, ptr %varargslots1211, align 16
  %920 = insertvalue %"any[]" undef, ptr %varargslots1211, 0
  %"$$temp1212" = insertvalue %"any[]" %920, i64 1, 1
  store %"any[]" %"$$temp1212", ptr %indirectarg1213, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 226, ptr byval(%"any[]") align 8 %indirectarg1213) #6, !dbg !3962
  unreachable, !dbg !3962

panic1216:                                        ; preds = %checkok1214
  store i64 128, ptr %taddr1217, align 8
  %921 = insertvalue %any undef, ptr %taddr1217, 0
  %922 = insertvalue %any %921, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1207, ptr %taddr1218, align 8
  %923 = insertvalue %any undef, ptr %taddr1218, 0
  %924 = insertvalue %any %923, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %922, ptr %varargslots1219, align 16
  %ptradd1220 = getelementptr inbounds i8, ptr %varargslots1219, i64 16
  store %any %924, ptr %ptradd1220, align 16
  %925 = insertvalue %"any[]" undef, ptr %varargslots1219, 0
  %"$$temp1221" = insertvalue %"any[]" %925, i64 2, 1
  store %"any[]" %"$$temp1221", ptr %indirectarg1222, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 226, ptr byval(%"any[]") align 8 %indirectarg1222) #6, !dbg !3962
  unreachable, !dbg !3962

panic1227:                                        ; preds = %checkok1223
  store i64 %sext1225, ptr %taddr1228, align 8
  %926 = insertvalue %any undef, ptr %taddr1228, 0
  %927 = insertvalue %any %926, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %927, ptr %varargslots1229, align 16
  %928 = insertvalue %"any[]" undef, ptr %varargslots1229, 0
  %"$$temp1230" = insertvalue %"any[]" %928, i64 1, 1
  store %"any[]" %"$$temp1230", ptr %indirectarg1231, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 226, ptr byval(%"any[]") align 8 %indirectarg1231) #6, !dbg !3964
  unreachable, !dbg !3964

panic1234:                                        ; preds = %checkok1232
  store i64 2, ptr %taddr1235, align 8
  %929 = insertvalue %any undef, ptr %taddr1235, 0
  %930 = insertvalue %any %929, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1225, ptr %taddr1236, align 8
  %931 = insertvalue %any undef, ptr %taddr1236, 0
  %932 = insertvalue %any %931, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %930, ptr %varargslots1237, align 16
  %ptradd1238 = getelementptr inbounds i8, ptr %varargslots1237, i64 16
  store %any %932, ptr %ptradd1238, align 16
  %933 = insertvalue %"any[]" undef, ptr %varargslots1237, 0
  %"$$temp1239" = insertvalue %"any[]" %933, i64 2, 1
  store %"any[]" %"$$temp1239", ptr %indirectarg1240, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 226, ptr byval(%"any[]") align 8 %indirectarg1240) #6, !dbg !3964
  unreachable, !dbg !3964

panic1265:                                        ; preds = %loop.body1261
  store i64 %sext1263, ptr %taddr1266, align 8
  %934 = insertvalue %any undef, ptr %taddr1266, 0
  %935 = insertvalue %any %934, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %935, ptr %varargslots1267, align 16
  %936 = insertvalue %"any[]" undef, ptr %varargslots1267, 0
  %"$$temp1268" = insertvalue %"any[]" %936, i64 1, 1
  store %"any[]" %"$$temp1268", ptr %indirectarg1269, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 233, ptr byval(%"any[]") align 8 %indirectarg1269) #6, !dbg !3982
  unreachable, !dbg !3982

panic1272:                                        ; preds = %checkok1270
  store i64 128, ptr %taddr1273, align 8
  %937 = insertvalue %any undef, ptr %taddr1273, 0
  %938 = insertvalue %any %937, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1263, ptr %taddr1274, align 8
  %939 = insertvalue %any undef, ptr %taddr1274, 0
  %940 = insertvalue %any %939, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %938, ptr %varargslots1275, align 16
  %ptradd1276 = getelementptr inbounds i8, ptr %varargslots1275, i64 16
  store %any %940, ptr %ptradd1276, align 16
  %941 = insertvalue %"any[]" undef, ptr %varargslots1275, 0
  %"$$temp1277" = insertvalue %"any[]" %941, i64 2, 1
  store %"any[]" %"$$temp1277", ptr %indirectarg1278, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 233, ptr byval(%"any[]") align 8 %indirectarg1278) #6, !dbg !3982
  unreachable, !dbg !3982

panic1281:                                        ; preds = %checkok1279
  store i32 %497, ptr %taddr1282, align 4
  %942 = insertvalue %any undef, ptr %taddr1282, 0
  %943 = insertvalue %any %942, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %943, ptr %varargslots1283, align 16
  %944 = insertvalue %"any[]" undef, ptr %varargslots1283, 0
  %"$$temp1284" = insertvalue %"any[]" %944, i64 1, 1
  store %"any[]" %"$$temp1284", ptr %indirectarg1285, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 35, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 233, ptr byval(%"any[]") align 8 %indirectarg1285) #6, !dbg !3984
  unreachable, !dbg !3984

panic1288:                                        ; preds = %checkok1286
  store i32 %497, ptr %taddr1289, align 4
  %945 = insertvalue %any undef, ptr %taddr1289, 0
  %946 = insertvalue %any %945, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %946, ptr %varargslots1290, align 16
  %947 = insertvalue %"any[]" undef, ptr %varargslots1290, 0
  %"$$temp1291" = insertvalue %"any[]" %947, i64 1, 1
  store %"any[]" %"$$temp1291", ptr %indirectarg1292, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 35, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 233, ptr byval(%"any[]") align 8 %indirectarg1292) #6, !dbg !3984
  unreachable, !dbg !3984

panic1299:                                        ; preds = %checkok1293
  store i64 %sext1297, ptr %taddr1300, align 8
  %948 = insertvalue %any undef, ptr %taddr1300, 0
  %949 = insertvalue %any %948, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %949, ptr %varargslots1301, align 16
  %950 = insertvalue %"any[]" undef, ptr %varargslots1301, 0
  %"$$temp1302" = insertvalue %"any[]" %950, i64 1, 1
  store %"any[]" %"$$temp1302", ptr %indirectarg1303, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1303) #6, !dbg !3986
  unreachable, !dbg !3986

panic1306:                                        ; preds = %checkok1304
  store i64 128, ptr %taddr1307, align 8
  %951 = insertvalue %any undef, ptr %taddr1307, 0
  %952 = insertvalue %any %951, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1297, ptr %taddr1308, align 8
  %953 = insertvalue %any undef, ptr %taddr1308, 0
  %954 = insertvalue %any %953, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %952, ptr %varargslots1309, align 16
  %ptradd1310 = getelementptr inbounds i8, ptr %varargslots1309, i64 16
  store %any %954, ptr %ptradd1310, align 16
  %955 = insertvalue %"any[]" undef, ptr %varargslots1309, 0
  %"$$temp1311" = insertvalue %"any[]" %955, i64 2, 1
  store %"any[]" %"$$temp1311", ptr %indirectarg1312, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1312) #6, !dbg !3986
  unreachable, !dbg !3986

panic1317:                                        ; preds = %checkok1313
  store i64 %sext1315, ptr %taddr1318, align 8
  %956 = insertvalue %any undef, ptr %taddr1318, 0
  %957 = insertvalue %any %956, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %957, ptr %varargslots1319, align 16
  %958 = insertvalue %"any[]" undef, ptr %varargslots1319, 0
  %"$$temp1320" = insertvalue %"any[]" %958, i64 1, 1
  store %"any[]" %"$$temp1320", ptr %indirectarg1321, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1321) #6, !dbg !3987
  unreachable, !dbg !3987

panic1324:                                        ; preds = %checkok1322
  store i64 128, ptr %taddr1325, align 8
  %959 = insertvalue %any undef, ptr %taddr1325, 0
  %960 = insertvalue %any %959, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1315, ptr %taddr1326, align 8
  %961 = insertvalue %any undef, ptr %taddr1326, 0
  %962 = insertvalue %any %961, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %960, ptr %varargslots1327, align 16
  %ptradd1328 = getelementptr inbounds i8, ptr %varargslots1327, i64 16
  store %any %962, ptr %ptradd1328, align 16
  %963 = insertvalue %"any[]" undef, ptr %varargslots1327, 0
  %"$$temp1329" = insertvalue %"any[]" %963, i64 2, 1
  store %"any[]" %"$$temp1329", ptr %indirectarg1330, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1330) #6, !dbg !3987
  unreachable, !dbg !3987

panic1334:                                        ; preds = %checkok1331
  store i32 %508, ptr %taddr1335, align 4
  %964 = insertvalue %any undef, ptr %taddr1335, 0
  %965 = insertvalue %any %964, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %965, ptr %varargslots1336, align 16
  %966 = insertvalue %"any[]" undef, ptr %varargslots1336, 0
  %"$$temp1337" = insertvalue %"any[]" %966, i64 1, 1
  store %"any[]" %"$$temp1337", ptr %indirectarg1338, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 35, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1338) #6, !dbg !3989
  unreachable, !dbg !3989

panic1343:                                        ; preds = %checkok1339
  store i32 %512, ptr %taddr1344, align 4
  %967 = insertvalue %any undef, ptr %taddr1344, 0
  %968 = insertvalue %any %967, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %968, ptr %varargslots1345, align 16
  %969 = insertvalue %"any[]" undef, ptr %varargslots1345, 0
  %"$$temp1346" = insertvalue %"any[]" %969, i64 1, 1
  store %"any[]" %"$$temp1346", ptr %indirectarg1347, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 35, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 235, ptr byval(%"any[]") align 8 %indirectarg1347) #6, !dbg !3992
  unreachable, !dbg !3992

panic1350:                                        ; preds = %checkok1348
  store i32 %512, ptr %taddr1351, align 4
  %970 = insertvalue %any undef, ptr %taddr1351, 0
  %971 = insertvalue %any %970, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %971, ptr %varargslots1352, align 16
  %972 = insertvalue %"any[]" undef, ptr %varargslots1352, 0
  %"$$temp1353" = insertvalue %"any[]" %972, i64 1, 1
  store %"any[]" %"$$temp1353", ptr %indirectarg1354, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 35, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 235, ptr byval(%"any[]") align 8 %indirectarg1354) #6, !dbg !3992
  unreachable, !dbg !3992

panic1361:                                        ; preds = %and.rhs1358
  store i64 %sext1359, ptr %taddr1362, align 8
  %973 = insertvalue %any undef, ptr %taddr1362, 0
  %974 = insertvalue %any %973, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %974, ptr %varargslots1363, align 16
  %975 = insertvalue %"any[]" undef, ptr %varargslots1363, 0
  %"$$temp1364" = insertvalue %"any[]" %975, i64 1, 1
  store %"any[]" %"$$temp1364", ptr %indirectarg1365, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 236, ptr byval(%"any[]") align 8 %indirectarg1365) #6, !dbg !3996
  unreachable, !dbg !3996

panic1368:                                        ; preds = %checkok1366
  store i64 128, ptr %taddr1369, align 8
  %976 = insertvalue %any undef, ptr %taddr1369, 0
  %977 = insertvalue %any %976, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1359, ptr %taddr1370, align 8
  %978 = insertvalue %any undef, ptr %taddr1370, 0
  %979 = insertvalue %any %978, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %977, ptr %varargslots1371, align 16
  %ptradd1372 = getelementptr inbounds i8, ptr %varargslots1371, i64 16
  store %any %979, ptr %ptradd1372, align 16
  %980 = insertvalue %"any[]" undef, ptr %varargslots1371, 0
  %"$$temp1373" = insertvalue %"any[]" %980, i64 2, 1
  store %"any[]" %"$$temp1373", ptr %indirectarg1374, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 236, ptr byval(%"any[]") align 8 %indirectarg1374) #6, !dbg !3996
  unreachable, !dbg !3996

panic1397:                                        ; preds = %if.then1394
  store i64 %sext1395, ptr %taddr1398, align 8
  %981 = insertvalue %any undef, ptr %taddr1398, 0
  %982 = insertvalue %any %981, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %982, ptr %varargslots1399, align 16
  %983 = insertvalue %"any[]" undef, ptr %varargslots1399, 0
  %"$$temp1400" = insertvalue %"any[]" %983, i64 1, 1
  store %"any[]" %"$$temp1400", ptr %indirectarg1401, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 247, ptr byval(%"any[]") align 8 %indirectarg1401) #6, !dbg !4006
  unreachable, !dbg !4006

panic1404:                                        ; preds = %checkok1402
  store i64 128, ptr %taddr1405, align 8
  %984 = insertvalue %any undef, ptr %taddr1405, 0
  %985 = insertvalue %any %984, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1395, ptr %taddr1406, align 8
  %986 = insertvalue %any undef, ptr %taddr1406, 0
  %987 = insertvalue %any %986, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %985, ptr %varargslots1407, align 16
  %ptradd1408 = getelementptr inbounds i8, ptr %varargslots1407, i64 16
  store %any %987, ptr %ptradd1408, align 16
  %988 = insertvalue %"any[]" undef, ptr %varargslots1407, 0
  %"$$temp1409" = insertvalue %"any[]" %988, i64 2, 1
  store %"any[]" %"$$temp1409", ptr %indirectarg1410, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 247, ptr byval(%"any[]") align 8 %indirectarg1410) #6, !dbg !4006
  unreachable, !dbg !4006

panic1420:                                        ; preds = %if.else1415
  store i64 %sext1418, ptr %taddr1421, align 8
  %989 = insertvalue %any undef, ptr %taddr1421, 0
  %990 = insertvalue %any %989, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %990, ptr %varargslots1422, align 16
  %991 = insertvalue %"any[]" undef, ptr %varargslots1422, 0
  %"$$temp1423" = insertvalue %"any[]" %991, i64 1, 1
  store %"any[]" %"$$temp1423", ptr %indirectarg1424, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 252, ptr byval(%"any[]") align 8 %indirectarg1424) #6, !dbg !4010
  unreachable, !dbg !4010

panic1427:                                        ; preds = %checkok1425
  store i64 128, ptr %taddr1428, align 8
  %992 = insertvalue %any undef, ptr %taddr1428, 0
  %993 = insertvalue %any %992, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1418, ptr %taddr1429, align 8
  %994 = insertvalue %any undef, ptr %taddr1429, 0
  %995 = insertvalue %any %994, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %993, ptr %varargslots1430, align 16
  %ptradd1431 = getelementptr inbounds i8, ptr %varargslots1430, i64 16
  store %any %995, ptr %ptradd1431, align 16
  %996 = insertvalue %"any[]" undef, ptr %varargslots1430, 0
  %"$$temp1432" = insertvalue %"any[]" %996, i64 2, 1
  store %"any[]" %"$$temp1432", ptr %indirectarg1433, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 252, ptr byval(%"any[]") align 8 %indirectarg1433) #6, !dbg !4010
  unreachable, !dbg !4010

panic1454:                                        ; preds = %if.then1448
  store i64 %sext1452, ptr %taddr1455, align 8
  %997 = insertvalue %any undef, ptr %taddr1455, 0
  %998 = insertvalue %any %997, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %998, ptr %varargslots1456, align 16
  %999 = insertvalue %"any[]" undef, ptr %varargslots1456, 0
  %"$$temp1457" = insertvalue %"any[]" %999, i64 1, 1
  store %"any[]" %"$$temp1457", ptr %indirectarg1458, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 262, ptr byval(%"any[]") align 8 %indirectarg1458) #6, !dbg !4025
  unreachable, !dbg !4025

panic1461:                                        ; preds = %checkok1459
  store i64 128, ptr %taddr1462, align 8
  %1000 = insertvalue %any undef, ptr %taddr1462, 0
  %1001 = insertvalue %any %1000, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1452, ptr %taddr1463, align 8
  %1002 = insertvalue %any undef, ptr %taddr1463, 0
  %1003 = insertvalue %any %1002, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1001, ptr %varargslots1464, align 16
  %ptradd1465 = getelementptr inbounds i8, ptr %varargslots1464, i64 16
  store %any %1003, ptr %ptradd1465, align 16
  %1004 = insertvalue %"any[]" undef, ptr %varargslots1464, 0
  %"$$temp1466" = insertvalue %"any[]" %1004, i64 2, 1
  store %"any[]" %"$$temp1466", ptr %indirectarg1467, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 262, ptr byval(%"any[]") align 8 %indirectarg1467) #6, !dbg !4025
  unreachable, !dbg !4025

panic1476:                                        ; preds = %if.exit1470
  store i64 %sext1474, ptr %taddr1477, align 8
  %1005 = insertvalue %any undef, ptr %taddr1477, 0
  %1006 = insertvalue %any %1005, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1006, ptr %varargslots1478, align 16
  %1007 = insertvalue %"any[]" undef, ptr %varargslots1478, 0
  %"$$temp1479" = insertvalue %"any[]" %1007, i64 1, 1
  store %"any[]" %"$$temp1479", ptr %indirectarg1480, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 263, ptr byval(%"any[]") align 8 %indirectarg1480) #6, !dbg !4029
  unreachable, !dbg !4029

panic1483:                                        ; preds = %checkok1481
  store i64 128, ptr %taddr1484, align 8
  %1008 = insertvalue %any undef, ptr %taddr1484, 0
  %1009 = insertvalue %any %1008, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1474, ptr %taddr1485, align 8
  %1010 = insertvalue %any undef, ptr %taddr1485, 0
  %1011 = insertvalue %any %1010, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1009, ptr %varargslots1486, align 16
  %ptradd1487 = getelementptr inbounds i8, ptr %varargslots1486, i64 16
  store %any %1011, ptr %ptradd1487, align 16
  %1012 = insertvalue %"any[]" undef, ptr %varargslots1486, 0
  %"$$temp1488" = insertvalue %"any[]" %1012, i64 2, 1
  store %"any[]" %"$$temp1488", ptr %indirectarg1489, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 263, ptr byval(%"any[]") align 8 %indirectarg1489) #6, !dbg !4029
  unreachable, !dbg !4029

panic1526:                                        ; preds = %if.then1513
  %1013 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4066
  call void %1013(ptr @.panic_msg.102, i64 10, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 284) #6, !dbg !4066
  unreachable, !dbg !4066

panic1539:                                        ; preds = %if.then1534
  store i64 %sext1537, ptr %taddr1540, align 8
  %1014 = insertvalue %any undef, ptr %taddr1540, 0
  %1015 = insertvalue %any %1014, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1015, ptr %varargslots1541, align 16
  %1016 = insertvalue %"any[]" undef, ptr %varargslots1541, 0
  %"$$temp1542" = insertvalue %"any[]" %1016, i64 1, 1
  store %"any[]" %"$$temp1542", ptr %indirectarg1543, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.30, i64 38, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 292, ptr byval(%"any[]") align 8 %indirectarg1543) #6, !dbg !4083
  unreachable, !dbg !4083

panic1546:                                        ; preds = %checkok1544
  store i64 128, ptr %taddr1547, align 8
  %1017 = insertvalue %any undef, ptr %taddr1547, 0
  %1018 = insertvalue %any %1017, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1537, ptr %taddr1548, align 8
  %1019 = insertvalue %any undef, ptr %taddr1548, 0
  %1020 = insertvalue %any %1019, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1018, ptr %varargslots1549, align 16
  %ptradd1550 = getelementptr inbounds i8, ptr %varargslots1549, i64 16
  store %any %1020, ptr %ptradd1550, align 16
  %1021 = insertvalue %"any[]" undef, ptr %varargslots1549, 0
  %"$$temp1551" = insertvalue %"any[]" %1021, i64 2, 1
  store %"any[]" %"$$temp1551", ptr %indirectarg1552, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.91, i64 17, ptr @.func.103, i64 8, i32 292, ptr byval(%"any[]") align 8 %indirectarg1552) #6, !dbg !4083
  unreachable, !dbg !4083
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.tokenize(ptr noalias sret(%Splitter) align 8 %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !4144 {
entry:
  %self = alloca %"char[]", align 8
  %split = alloca %"char[]", align 8
  %literal = alloca %Splitter, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !4147, !DIExpression(), !4148)
  store ptr %3, ptr %split, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %split, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %split, !4149, !DIExpression(), !4150)
  call void @llvm.memset.p0.i64(ptr align 8 %literal, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %self, i32 16, i1 false), !dbg !4151
  %ptradd2 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !4151
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd2, ptr align 8 %split, i32 16, i1 false), !dbg !4152
  %ptradd3 = getelementptr inbounds i8, ptr %literal, i64 40, !dbg !4152
  store i32 0, ptr %ptradd3, align 8, !dbg !4153
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 48, i1 false), !dbg !4153
  ret void, !dbg !4153
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.tokenize_all(ptr noalias sret(%Splitter) align 8 %0, ptr %1, i64 %2, ptr %3, i64 %4, i8 zeroext %5) #0 comdat !dbg !4154 {
entry:
  %self = alloca %"char[]", align 8
  %split = alloca %"char[]", align 8
  %skip_last = alloca i8, align 1
  %literal = alloca %Splitter, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !4157, !DIExpression(), !4158)
  store ptr %3, ptr %split, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %split, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %split, !4159, !DIExpression(), !4160)
  store i8 %5, ptr %skip_last, align 1
    #dbg_declare(ptr %skip_last, !4161, !DIExpression(), !4162)
  call void @llvm.memset.p0.i64(ptr align 8 %literal, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %self, i32 16, i1 false), !dbg !4163
  %ptradd2 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !4163
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd2, ptr align 8 %split, i32 16, i1 false), !dbg !4164
  %ptradd3 = getelementptr inbounds i8, ptr %literal, i64 40, !dbg !4164
  %6 = load i8, ptr %skip_last, align 1, !dbg !4165
  %7 = trunc i8 %6 to i1, !dbg !4165
  %ternary = select i1 %7, i32 2, i32 1, !dbg !4166
  store i32 %ternary, ptr %ptradd3, align 8, !dbg !4166
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 48, i1 false), !dbg !4166
  ret void, !dbg !4166
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.splitter(ptr noalias sret(%Splitter) align 8 %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !4167 {
entry:
  %self = alloca %"char[]", align 8
  %split = alloca %"char[]", align 8
  %sretparam = alloca %Splitter, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %self, !4168, !DIExpression(), !4169)
  store ptr %3, ptr %split, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %split, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %split, !4170, !DIExpression(), !4171)
  %lo = load ptr, ptr %self, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %self, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %split, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %split, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  call void @std.core.String.tokenize_all(ptr sret(%Splitter) align 8 %sretparam, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5, i8 zeroext 1), !dbg !4172
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 48, i1 false), !dbg !4172
  ret void, !dbg !4172
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.string.Splitter.reset(ptr %0) #0 comdat !dbg !4173 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !4177
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !4177
  br i1 %2, label %panic, label %checkok, !dbg !4177

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !4178, !DIExpression(), !4179)
  %3 = load ptr, ptr %self, align 8, !dbg !4180
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !4180
  store i64 0, ptr %ptradd, align 8, !dbg !4181
  ret void, !dbg !4181

panic:                                            ; preds = %entry
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4179
  call void %4(ptr @.panic_msg.66, i64 62, ptr @.file.16, i64 9, ptr @.func.108, i64 5, i32 1025) #6, !dbg !4179
  unreachable, !dbg !4179
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.Splitter.next(ptr %0, ptr %1) #0 comdat !dbg !4182 {
entry:
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %current = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [1 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [1 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %remaining = alloca %"char[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %varargslots42 = alloca [2 x %any], align 16
  %indirectarg45 = alloca %"any[]", align 8
  %next = alloca i64, align 8
  %next.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr61 = alloca i64, align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %varargslots66 = alloca [2 x %any], align 16
  %indirectarg69 = alloca %"any[]", align 8
  %taddr75 = alloca i64, align 8
  %varargslots76 = alloca [1 x %any], align 16
  %indirectarg78 = alloca %"any[]", align 8
  %taddr83 = alloca i64, align 8
  %taddr84 = alloca i64, align 8
  %varargslots85 = alloca [2 x %any], align 16
  %indirectarg88 = alloca %"any[]", align 8
  %reterr93 = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !4185
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !4185
  br i1 %3, label %panic, label %checkok, !dbg !4185

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !4186, !DIExpression(), !4187)
  br label %loop.body, !dbg !4188

loop.body:                                        ; preds = %if.then59, %checkok
    #dbg_declare(ptr %len, !4189, !DIExpression(), !4192)
  %4 = load ptr, ptr %self, align 8, !dbg !4193
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !4193
  %5 = load i64, ptr %ptradd, align 8, !dbg !4193
  store i64 %5, ptr %len, align 8, !dbg !4193
    #dbg_declare(ptr %current, !4194, !DIExpression(), !4195)
  %6 = load ptr, ptr %self, align 8, !dbg !4196
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !4196
  %7 = load i64, ptr %ptradd1, align 8, !dbg !4196
  store i64 %7, ptr %current, align 8, !dbg !4196
  %8 = load i64, ptr %current, align 8, !dbg !4197
  %9 = load i64, ptr %len, align 8, !dbg !4198
  %gt = icmp ugt i64 %8, %9, !dbg !4197
  br i1 %gt, label %if.then, label %if.exit, !dbg !4197

if.then:                                          ; preds = %loop.body
  ret i64 ptrtoint (ptr @std.core.builtin.NO_MORE_ELEMENT to i64), !dbg !4199

if.exit:                                          ; preds = %loop.body
  %10 = load i64, ptr %current, align 8, !dbg !4200
  %11 = load i64, ptr %len, align 8, !dbg !4201
  %eq = icmp eq i64 %10, %11, !dbg !4200
  br i1 %eq, label %if.then2, label %if.exit37, !dbg !4200

if.then2:                                         ; preds = %if.exit
  %12 = load ptr, ptr %self, align 8, !dbg !4202
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 40, !dbg !4202
  %13 = load i32, ptr %ptradd3, align 8, !dbg !4202
  %neq = icmp ne i32 %13, 1, !dbg !4202
  br i1 %neq, label %if.then4, label %if.exit5, !dbg !4202

if.then4:                                         ; preds = %if.then2
  ret i64 ptrtoint (ptr @std.core.builtin.NO_MORE_ELEMENT to i64), !dbg !4204

if.exit5:                                         ; preds = %if.then2
  %14 = load ptr, ptr %self, align 8, !dbg !4205
  %ptradd6 = getelementptr inbounds i8, ptr %14, i64 32, !dbg !4205
  %15 = load i64, ptr %ptradd6, align 8, !dbg !4205
  %add = add i64 %15, 1, !dbg !4205
  store i64 %add, ptr %ptradd6, align 8, !dbg !4205
  %16 = load ptr, ptr %self, align 8, !dbg !4206
  %17 = load %"char[]", ptr %16, align 8, !dbg !4206
  %18 = extractvalue %"char[]" %17, 0, !dbg !4206
  %19 = load i64, ptr %current, align 8, !dbg !4207
  %sub = sub i64 %19, 1, !dbg !4207
  %20 = extractvalue %"char[]" %17, 1, !dbg !4207
  %gt7 = icmp sgt i64 %sub, %20, !dbg !4207
  %21 = call i1 @llvm.expect.i1(i1 %gt7, i1 false), !dbg !4207
  br i1 %21, label %panic8, label %checkok11, !dbg !4207

checkok11:                                        ; preds = %if.exit5
  %underflow = icmp slt i64 %sub, 0, !dbg !4206
  %22 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !4206
  br i1 %22, label %panic12, label %checkok17, !dbg !4206

checkok17:                                        ; preds = %checkok11
  %add18 = add i64 %sub, 0, !dbg !4207
  %gt19 = icmp sgt i64 %sub, %add18, !dbg !4207
  %sub20 = sub i64 %add18, %sub, !dbg !4207
  %23 = call i1 @llvm.expect.i1(i1 %gt19, i1 false), !dbg !4207
  br i1 %23, label %panic21, label %checkok26, !dbg !4207

checkok26:                                        ; preds = %checkok17
  %lt = icmp slt i64 %20, %add18, !dbg !4206
  %sub27 = sub i64 %add18, 1, !dbg !4206
  %24 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !4206
  br i1 %24, label %panic28, label %checkok35, !dbg !4206

checkok35:                                        ; preds = %checkok26
  %size = sub i64 %add18, %sub, !dbg !4206
  %ptradd36 = getelementptr inbounds i8, ptr %18, i64 %sub, !dbg !4206
  %25 = insertvalue %"char[]" undef, ptr %ptradd36, 0, !dbg !4206
  %26 = insertvalue %"char[]" %25, i64 %size, 1, !dbg !4206
  store %"char[]" %26, ptr %0, align 8, !dbg !4206
  ret i64 0, !dbg !4206

if.exit37:                                        ; preds = %if.exit
    #dbg_declare(ptr %remaining, !4208, !DIExpression(), !4209)
  %27 = load ptr, ptr %self, align 8, !dbg !4210
  %28 = load %"char[]", ptr %27, align 8, !dbg !4210
  %29 = extractvalue %"char[]" %28, 0, !dbg !4210
  %30 = load i64, ptr %current, align 8, !dbg !4211
  %31 = extractvalue %"char[]" %28, 1, !dbg !4211
  %gt38 = icmp ugt i64 %30, %31, !dbg !4211
  %32 = call i1 @llvm.expect.i1(i1 %gt38, i1 false), !dbg !4211
  br i1 %32, label %panic39, label %checkok46, !dbg !4211

checkok46:                                        ; preds = %if.exit37
  %size47 = sub i64 %31, %30, !dbg !4210
  %ptradd48 = getelementptr inbounds i8, ptr %29, i64 %30, !dbg !4210
  %33 = insertvalue %"char[]" undef, ptr %ptradd48, 0, !dbg !4210
  %34 = insertvalue %"char[]" %33, i64 %size47, 1, !dbg !4210
  store %"char[]" %34, ptr %remaining, align 8, !dbg !4210
    #dbg_declare(ptr %next, !4212, !DIExpression(), !4213)
  %35 = load %"char[]", ptr %remaining, align 8, !dbg !4214
  %36 = load ptr, ptr %self, align 8, !dbg !4215
  %ptradd49 = getelementptr inbounds i8, ptr %36, i64 16, !dbg !4215
  %37 = load %"char[]", ptr %ptradd49, align 8, !dbg !4215
  %38 = extractvalue %"char[]" %37, 1, !dbg !4216
  %lt50 = icmp ult i64 0, %38, !dbg !4214
  br i1 %lt50, label %assert_ok, label %assert_fail, !dbg !4214

assert_fail:                                      ; preds = %checkok46
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4214
  call void %39(ptr @.panic_msg.38, i64 71, ptr @.file.16, i64 9, ptr @.func.109, i64 4, i32 1044) #6, !dbg !4214
  unreachable, !dbg !4214

assert_ok:                                        ; preds = %checkok46
  %40 = extractvalue %"char[]" %35, 0
  %41 = extractvalue %"char[]" %35, 1
  %42 = extractvalue %"char[]" %37, 0
  %43 = extractvalue %"char[]" %37, 1
  %44 = call i64 @std.core.String.index_of(ptr %retparam, ptr %40, i64 %41, ptr %42, i64 %43), !dbg !4214
  %not_err = icmp eq i64 %44, 0, !dbg !4214
  %45 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4214
  br i1 %45, label %after_check, label %assign_optional, !dbg !4214

assign_optional:                                  ; preds = %assert_ok
  store i64 %44, ptr %next.f, align 8, !dbg !4214
  br label %after_assign, !dbg !4214

after_check:                                      ; preds = %assert_ok
  %46 = load i64, ptr %retparam, align 8, !dbg !4214
  store i64 %46, ptr %next, align 8, !dbg !4214
  store i64 0, ptr %next.f, align 8, !dbg !4214
  br label %after_assign, !dbg !4214

after_assign:                                     ; preds = %after_check, %assign_optional
  %load.err = load i64, ptr %next.f, align 8, !dbg !4217
  %result = icmp eq i64 %load.err, 0, !dbg !4217
  br i1 %result, label %if.then51, label %if.exit91, !dbg !4217

if.then51:                                        ; preds = %after_assign
  %47 = load ptr, ptr %self, align 8, !dbg !4218
  %ptradd52 = getelementptr inbounds i8, ptr %47, i64 32, !dbg !4218
  %48 = load i64, ptr %current, align 8, !dbg !4220
  %49 = load i64, ptr %next, align 8, !dbg !4221
  %add53 = add i64 %48, %49, !dbg !4220
  %50 = load ptr, ptr %self, align 8, !dbg !4222
  %ptradd54 = getelementptr inbounds i8, ptr %50, i64 16, !dbg !4222
  %ptradd55 = getelementptr inbounds i8, ptr %ptradd54, i64 8, !dbg !4222
  %51 = load i64, ptr %ptradd55, align 8, !dbg !4222
  %add56 = add i64 %add53, %51, !dbg !4220
  store i64 %add56, ptr %ptradd52, align 8, !dbg !4220
  %52 = load i64, ptr %next, align 8, !dbg !4223
  %i2nb = icmp eq i64 %52, 0, !dbg !4223
  br i1 %i2nb, label %and.rhs, label %and.phi, !dbg !4223

and.rhs:                                          ; preds = %if.then51
  %53 = load ptr, ptr %self, align 8, !dbg !4224
  %ptradd57 = getelementptr inbounds i8, ptr %53, i64 40, !dbg !4224
  %54 = load i32, ptr %ptradd57, align 8, !dbg !4224
  %eq58 = icmp eq i32 %54, 0, !dbg !4224
  br label %and.phi, !dbg !4224

and.phi:                                          ; preds = %and.rhs, %if.then51
  %val = phi i1 [ false, %if.then51 ], [ %eq58, %and.rhs ], !dbg !4224
  br i1 %val, label %if.then59, label %if.exit60, !dbg !4224

if.then59:                                        ; preds = %and.phi
  br label %loop.body, !dbg !4225

if.exit60:                                        ; preds = %and.phi
  %55 = load %"char[]", ptr %remaining, align 8, !dbg !4226
  %56 = extractvalue %"char[]" %55, 0, !dbg !4226
  %57 = extractvalue %"char[]" %55, 1, !dbg !4227
  %gt62 = icmp ugt i64 0, %57, !dbg !4227
  %58 = call i1 @llvm.expect.i1(i1 %gt62, i1 false), !dbg !4227
  br i1 %58, label %panic63, label %checkok70, !dbg !4227

checkok70:                                        ; preds = %if.exit60
  %59 = load i64, ptr %next, align 8, !dbg !4228
  %add71 = add i64 0, %59, !dbg !4228
  %gt72 = icmp ugt i64 0, %add71, !dbg !4228
  %sub73 = sub i64 %add71, 0, !dbg !4228
  %60 = call i1 @llvm.expect.i1(i1 %gt72, i1 false), !dbg !4228
  br i1 %60, label %panic74, label %checkok79, !dbg !4228

checkok79:                                        ; preds = %checkok70
  %lt80 = icmp ult i64 %57, %add71, !dbg !4226
  %sub81 = sub i64 %add71, 1, !dbg !4226
  %61 = call i1 @llvm.expect.i1(i1 %lt80, i1 false), !dbg !4226
  br i1 %61, label %panic82, label %checkok89, !dbg !4226

checkok89:                                        ; preds = %checkok79
  %size90 = sub i64 %add71, 0, !dbg !4226
  %62 = insertvalue %"char[]" undef, ptr %56, 0, !dbg !4226
  %63 = insertvalue %"char[]" %62, i64 %size90, 1, !dbg !4226
  store %"char[]" %63, ptr %0, align 8, !dbg !4226
  ret i64 0, !dbg !4226

if.exit91:                                        ; preds = %after_assign
  %64 = load ptr, ptr %self, align 8, !dbg !4229
  %ptradd92 = getelementptr inbounds i8, ptr %64, i64 32, !dbg !4229
  %65 = load i64, ptr %len, align 8, !dbg !4230
  store i64 %65, ptr %ptradd92, align 8, !dbg !4230
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %remaining, i32 16, i1 false), !dbg !4231
  ret i64 0, !dbg !4231

panic:                                            ; preds = %entry
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4187
  call void %66(ptr @.panic_msg.66, i64 62, ptr @.file.16, i64 9, ptr @.func.109, i64 4, i32 1030) #6, !dbg !4187
  unreachable, !dbg !4187

panic8:                                           ; preds = %if.exit5
  store i64 %20, ptr %taddr, align 8
  %67 = insertvalue %any undef, ptr %taddr, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub, ptr %taddr9, align 8
  %69 = insertvalue %any undef, ptr %taddr9, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %70, ptr %ptradd10, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.109, i64 4, i32 1041, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !4206
  unreachable, !dbg !4206

panic12:                                          ; preds = %checkok11
  store i64 %sub, ptr %taddr13, align 8
  %72 = insertvalue %any undef, ptr %taddr13, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %73, ptr %varargslots14, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp15" = insertvalue %"any[]" %74, i64 1, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.96, i64 22, ptr @.file.16, i64 9, ptr @.func.109, i64 4, i32 1041, ptr byval(%"any[]") align 8 %indirectarg16) #6, !dbg !4207
  unreachable, !dbg !4207

panic21:                                          ; preds = %checkok17
  store i64 %sub20, ptr %taddr22, align 8
  %75 = insertvalue %any undef, ptr %taddr22, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %76, ptr %varargslots23, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp24" = insertvalue %"any[]" %77, i64 1, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.109, i64 4, i32 1041, ptr byval(%"any[]") align 8 %indirectarg25) #6, !dbg !4206
  unreachable, !dbg !4206

panic28:                                          ; preds = %checkok26
  store i64 %sub27, ptr %taddr29, align 8
  %78 = insertvalue %any undef, ptr %taddr29, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %20, ptr %taddr30, align 8
  %80 = insertvalue %any undef, ptr %taddr30, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %79, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %81, ptr %ptradd32, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.109, i64 4, i32 1041, ptr byval(%"any[]") align 8 %indirectarg34) #6, !dbg !4206
  unreachable, !dbg !4206

panic39:                                          ; preds = %if.exit37
  store i64 %31, ptr %taddr40, align 8
  %83 = insertvalue %any undef, ptr %taddr40, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr41, align 8
  %85 = insertvalue %any undef, ptr %taddr41, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %84, ptr %varargslots42, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %86, ptr %ptradd43, align 16
  %87 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %87, i64 2, 1
  store %"any[]" %"$$temp44", ptr %indirectarg45, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.109, i64 4, i32 1043, ptr byval(%"any[]") align 8 %indirectarg45) #6, !dbg !4210
  unreachable, !dbg !4210

panic63:                                          ; preds = %if.exit60
  store i64 %57, ptr %taddr64, align 8
  %88 = insertvalue %any undef, ptr %taddr64, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr65, align 8
  %90 = insertvalue %any undef, ptr %taddr65, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %89, ptr %varargslots66, align 16
  %ptradd67 = getelementptr inbounds i8, ptr %varargslots66, i64 16
  store %any %91, ptr %ptradd67, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots66, 0
  %"$$temp68" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp68", ptr %indirectarg69, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func.109, i64 4, i32 1049, ptr byval(%"any[]") align 8 %indirectarg69) #6, !dbg !4226
  unreachable, !dbg !4226

panic74:                                          ; preds = %checkok70
  store i64 %sub73, ptr %taddr75, align 8
  %93 = insertvalue %any undef, ptr %taddr75, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %94, ptr %varargslots76, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp77" = insertvalue %"any[]" %95, i64 1, 1
  store %"any[]" %"$$temp77", ptr %indirectarg78, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.109, i64 4, i32 1049, ptr byval(%"any[]") align 8 %indirectarg78) #6, !dbg !4226
  unreachable, !dbg !4226

panic82:                                          ; preds = %checkok79
  store i64 %sub81, ptr %taddr83, align 8
  %96 = insertvalue %any undef, ptr %taddr83, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr84, align 8
  %98 = insertvalue %any undef, ptr %taddr84, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %97, ptr %varargslots85, align 16
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %99, ptr %ptradd86, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp87", ptr %indirectarg88, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func.109, i64 4, i32 1049, ptr byval(%"any[]") align 8 %indirectarg88) #6, !dbg !4226
  unreachable, !dbg !4226
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.string.tformat_zstr(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !4232 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store ptr %0, ptr %fmt, align 8
  %ptradd = getelementptr inbounds i8, ptr %fmt, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %fmt, !4244, !DIExpression(), !4245)
  store ptr %2, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !4246, !DIExpression(), !4247)
    #dbg_declare(ptr %str, !4248, !DIExpression(), !4252)
  %ptradd2 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4253
  %4 = load i64, ptr %ptradd2, align 8, !dbg !4253
  %ptradd3 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4254
  %5 = load i64, ptr %ptradd3, align 8, !dbg !4254
  %mul = mul i64 %5, 8, !dbg !4254
  %add = add i64 %4, %mul, !dbg !4253
  %6 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4255
  store ptr %6, ptr %str, align 8, !dbg !4255
  %lo = load ptr, ptr %fmt, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %fmt, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  %lo5 = load ptr, ptr %args, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %args, i64 8
  %hi7 = load i64, ptr %ptradd6, align 8
  %7 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr %lo, i64 %hi, ptr %lo5, i64 %hi7), !dbg !4256
  %8 = call ptr @std.core.dstring.DString.zstr_view(ptr %str), !dbg !4257
  ret ptr %8, !dbg !4257
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.format(i64 %0, ptr %1, ptr %2, i64 %3, ptr %4, i64 %5) #0 comdat !dbg !4258 {
entry:
  %allocator = alloca %any, align 8
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %state = alloca ptr, align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %result = alloca %"char[]", align 8
  %taddr = alloca %"char[]", align 8
  store i64 %0, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %1, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !4261, !DIExpression(), !4262)
  store ptr %2, ptr %fmt, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %fmt, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %fmt, !4263, !DIExpression(), !4264)
  store ptr %4, ptr %args, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %5, ptr %ptradd2, align 8
    #dbg_declare(ptr %args, !4265, !DIExpression(), !4266)
    #dbg_declare(ptr %state, !4267, !DIExpression(), !4269)
  %6 = call ptr @std.core.mem.allocator.push_pool() #5, !dbg !4271
  store ptr %6, ptr %state, align 8, !dbg !4271
    #dbg_declare(ptr %str, !4272, !DIExpression(), !4274)
  %ptradd3 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4275
  %7 = load i64, ptr %ptradd3, align 8, !dbg !4275
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4276
  %8 = load i64, ptr %ptradd4, align 8, !dbg !4276
  %mul = mul i64 %8, 8, !dbg !4276
  %add = add i64 %7, %mul, !dbg !4275
  %9 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4277
  store ptr %9, ptr %str, align 8, !dbg !4277
  %lo = load ptr, ptr %fmt, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %fmt, i64 8
  %hi = load i64, ptr %ptradd5, align 8
  %lo6 = load ptr, ptr %args, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %args, i64 8
  %hi8 = load i64, ptr %ptradd7, align 8
  %10 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr %lo, i64 %hi, ptr %lo6, i64 %hi8), !dbg !4278
  %11 = load ptr, ptr %str, align 8, !dbg !4279
  %lo9 = load i64, ptr %allocator, align 8, !dbg !4279
  %ptradd10 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !4279
  %hi11 = load ptr, ptr %ptradd10, align 8, !dbg !4279
  %12 = call { ptr, i64 } @std.core.dstring.DString.copy_str(ptr %11, i64 %lo9, ptr %hi11), !dbg !4280
  store { ptr, i64 } %12, ptr %result, align 8
  %13 = load %"char[]", ptr %result, align 8
  %14 = load ptr, ptr %state, align 8, !dbg !4281
  call void @std.core.mem.allocator.pop_pool(ptr %14) #5, !dbg !4283
  store %"char[]" %13, ptr %taddr, align 8
  %15 = load { ptr, i64 }, ptr %taddr, align 8
  ret { ptr, i64 } %15
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.tformat(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !4284 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %fmt, align 8
  %ptradd = getelementptr inbounds i8, ptr %fmt, i64 8
  store i64 %1, ptr %ptradd, align 8
    #dbg_declare(ptr %fmt, !4287, !DIExpression(), !4288)
  store ptr %2, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %args, !4289, !DIExpression(), !4290)
    #dbg_declare(ptr %str, !4291, !DIExpression(), !4292)
  %ptradd2 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4293
  %4 = load i64, ptr %ptradd2, align 8, !dbg !4293
  %ptradd3 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4294
  %5 = load i64, ptr %ptradd3, align 8, !dbg !4294
  %mul = mul i64 %5, 8, !dbg !4294
  %add = add i64 %4, %mul, !dbg !4293
  %6 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4295
  store ptr %6, ptr %str, align 8, !dbg !4295
  %lo = load ptr, ptr %fmt, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %fmt, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  %lo5 = load ptr, ptr %args, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %args, i64 8
  %hi7 = load i64, ptr %ptradd6, align 8
  %7 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr %lo, i64 %hi, ptr %lo5, i64 %hi7), !dbg !4296
  %8 = load ptr, ptr %str, align 8, !dbg !4297
  %9 = call { ptr, i64 } @std.core.dstring.DString.str_view(ptr %8), !dbg !4297
  store { ptr, i64 } %9, ptr %result, align 8
  %10 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %10
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.join(i64 %0, ptr %1, ptr %2, i64 %3, ptr %4, i64 %5) #0 comdat !dbg !4298 {
entry:
  %allocator = alloca %any, align 8
  %s = alloca %"char[][]", align 8
  %joiner = alloca %"char[]", align 8
  %allocator4 = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator5 = alloca %any, align 8
  %elements6 = alloca i64, align 8
  %allocator7 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %taddr18 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %varargslots20 = alloca [1 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %total_size = alloca i64, align 8
  %.anon = alloca i64, align 8
  %str = alloca ptr, align 8
  %taddr51 = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr61 = alloca i64, align 8
  %taddr62 = alloca i64, align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %state = alloca ptr, align 8
  %res = alloca ptr, align 8
  %self = alloca ptr, align 8
  %taddr73 = alloca i64, align 8
  %taddr74 = alloca i64, align 8
  %varargslots75 = alloca [2 x %any], align 16
  %indirectarg78 = alloca %"any[]", align 8
  %value = alloca %"char[]", align 8
  %taddr86 = alloca i64, align 8
  %taddr87 = alloca i64, align 8
  %varargslots88 = alloca [2 x %any], align 16
  %indirectarg91 = alloca %"any[]", align 8
  %taddr95 = alloca %"char[][]", align 8
  %taddr100 = alloca i64, align 8
  %taddr101 = alloca i64, align 8
  %varargslots102 = alloca [2 x %any], align 16
  %indirectarg105 = alloca %"any[]", align 8
  %.anon108 = alloca i64, align 8
  %str112 = alloca ptr, align 8
  %taddr117 = alloca i64, align 8
  %taddr118 = alloca i64, align 8
  %varargslots119 = alloca [2 x %any], align 16
  %indirectarg122 = alloca %"any[]", align 8
  %taddr127 = alloca i64, align 8
  %taddr128 = alloca i64, align 8
  %varargslots129 = alloca [2 x %any], align 16
  %indirectarg132 = alloca %"any[]", align 8
  %self135 = alloca ptr, align 8
  %value136 = alloca %"char[]", align 8
  %self143 = alloca ptr, align 8
  %taddr148 = alloca i64, align 8
  %taddr149 = alloca i64, align 8
  %varargslots150 = alloca [2 x %any], align 16
  %indirectarg153 = alloca %"any[]", align 8
  %value155 = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  %taddr167 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %0, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %1, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !4301, !DIExpression(), !4302)
  store ptr %2, ptr %s, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %3, ptr %ptradd1, align 8
    #dbg_declare(ptr %s, !4303, !DIExpression(), !4304)
  store ptr %4, ptr %joiner, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %joiner, i64 8
  store i64 %5, ptr %ptradd2, align 8
    #dbg_declare(ptr %joiner, !4305, !DIExpression(), !4306)
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4307
  %6 = load i64, ptr %ptradd3, align 8, !dbg !4307
  %neq = icmp ne i64 %6, 0, !dbg !4307
  %not = xor i1 %neq, true, !dbg !4307
  br i1 %not, label %if.then, label %if.exit43, !dbg !4307

if.then:                                          ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator, i32 16, i1 false)
  store i64 2, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator4, i32 16, i1 false)
  %7 = load i64, ptr %elements, align 8
  store i64 %7, ptr %elements6, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator7, ptr align 8 %allocator5, i32 16, i1 false)
  %8 = load i64, ptr %elements6, align 8, !dbg !4308
  %mul = mul i64 1, %8, !dbg !4314
  store i64 %mul, ptr %size, align 8
  %9 = load i64, ptr %size, align 8, !dbg !4315
  %i2nb = icmp eq i64 %9, 0, !dbg !4315
  br i1 %i2nb, label %if.then8, label %if.exit, !dbg !4315

if.then8:                                         ; preds = %if.then
  store ptr null, ptr %blockret, align 8, !dbg !4318
  br label %expr_block.exit, !dbg !4318

if.exit:                                          ; preds = %if.then
  %10 = load i64, ptr %size, align 8, !dbg !4319
  br i1 true, label %or.phi, label %or.rhs, !dbg !4320

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %11 = load i64, ptr %x, align 8, !dbg !4321
  %neq9 = icmp ne i64 0, %11, !dbg !4321
  br i1 %neq9, label %and.rhs, label %and.phi, !dbg !4321

and.rhs:                                          ; preds = %or.rhs
  %12 = load i64, ptr %x, align 8, !dbg !4324
  %13 = load i64, ptr %x, align 8, !dbg !4325
  %sub = sub i64 %13, 1, !dbg !4325
  %and = and i64 %12, %sub, !dbg !4324
  %eq = icmp eq i64 %and, 0, !dbg !4324
  br label %and.phi, !dbg !4324

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !4324
  br label %or.phi, !dbg !4324

or.phi:                                           ; preds = %and.phi, %if.exit
  %val10 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !4324
  br i1 %val10, label %assert_ok, label %assert_fail, !dbg !4324

assert_fail:                                      ; preds = %or.phi
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4326
  call void %14(ptr @.panic_msg, i64 65, ptr @.file, i64 16, ptr @.func, i64 4, i32 97) #6, !dbg !4326
  unreachable, !dbg !4326

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok12, label %assert_fail11, !dbg !4326

assert_fail11:                                    ; preds = %assert_ok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4326
  call void %15(ptr @.panic_msg.10, i64 80, ptr @.file, i64 16, ptr @.func, i64 4, i32 97) #6, !dbg !4326
  unreachable, !dbg !4326

assert_ok12:                                      ; preds = %assert_ok
  %lt = icmp ult i64 0, %10, !dbg !4326
  br i1 %lt, label %assert_ok14, label %assert_fail13, !dbg !4326

assert_fail13:                                    ; preds = %assert_ok12
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4326
  call void %16(ptr @.panic_msg.11, i64 59, ptr @.file, i64 16, ptr @.func, i64 4, i32 97) #6, !dbg !4326
  unreachable, !dbg !4326

assert_ok14:                                      ; preds = %assert_ok12
  %ptradd15 = getelementptr inbounds i8, ptr %allocator7, i64 8, !dbg !4326
  %17 = load i64, ptr %ptradd15, align 8, !dbg !4326
  %18 = inttoptr i64 %17 to ptr, !dbg !4326
  %type = load ptr, ptr %.cachedtype, align 8
  %19 = icmp eq ptr %18, %type
  br i1 %19, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok14
  %ptradd16 = getelementptr inbounds i8, ptr %18, i64 16
  %20 = load ptr, ptr %ptradd16, align 8
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.acquire")
  store ptr %21, ptr %.inlinecache, align 8
  store ptr %18, ptr %.cachedtype, align 8
  br label %22

cache_hit:                                        ; preds = %assert_ok14
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %22

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ]
  %23 = icmp eq ptr %fn_phi, null
  br i1 %23, label %missing_function, label %match

missing_function:                                 ; preds = %22
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4326
  call void %24(ptr @.panic_msg.12, i64 44, ptr @.file, i64 16, ptr @.func, i64 4, i32 97) #6, !dbg !4326
  unreachable, !dbg !4326

match:                                            ; preds = %22
  %25 = load ptr, ptr %allocator7, align 8
  %26 = call i64 %fn_phi(ptr %retparam, ptr %25, i64 %10, i32 1, i64 0), !dbg !4326
  %not_err = icmp eq i64 %26, 0, !dbg !4326
  %27 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4326
  br i1 %27, label %after_check, label %assign_optional, !dbg !4326

assign_optional:                                  ; preds = %match
  store i64 %26, ptr %error_var, align 8, !dbg !4326
  br label %panic_block, !dbg !4326

after_check:                                      ; preds = %match
  %28 = load ptr, ptr %retparam, align 8, !dbg !4326
  store ptr %28, ptr %blockret, align 8, !dbg !4326
  br label %expr_block.exit, !dbg !4326

expr_block.exit:                                  ; preds = %after_check, %if.then8
  %29 = load ptr, ptr %blockret, align 8, !dbg !4326
  store ptr %29, ptr %taddr, align 8
  %30 = load ptr, ptr %taddr, align 8
  %31 = load i64, ptr %elements6, align 8, !dbg !4327
  %add = add i64 0, %31, !dbg !4327
  %gt = icmp ugt i64 0, %add, !dbg !4327
  %sub17 = sub i64 %add, 0, !dbg !4327
  %32 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !4327
  br i1 %32, label %panic, label %checkok, !dbg !4327

checkok:                                          ; preds = %expr_block.exit
  %size19 = sub i64 %add, 0, !dbg !4328
  %33 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !4328
  %34 = insertvalue %"char[]" %33, i64 %size19, 1, !dbg !4328
  br label %noerr_block, !dbg !4328

panic_block:                                      ; preds = %assign_optional
  %35 = insertvalue %any undef, ptr %error_var, 0, !dbg !4328
  %36 = insertvalue %any %35, i64 ptrtoint (ptr @"$ct.fault" to i64), 1, !dbg !4328
  store %any %36, ptr %varargslots20, align 16
  %37 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp21" = insertvalue %"any[]" %37, i64 1, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.14, i64 36, ptr @.file, i64 16, ptr @.func, i64 4, i32 261, ptr byval(%"any[]") align 8 %indirectarg22) #6, !dbg !4310
  unreachable, !dbg !4310

noerr_block:                                      ; preds = %checkok
  store %"char[]" %34, ptr %taddr23, align 8
  %38 = load %"char[]", ptr %taddr23, align 8
  %39 = extractvalue %"char[]" %38, 0
  %40 = extractvalue %"char[]" %38, 1
  %gt24 = icmp sgt i64 0, %40
  %41 = call i1 @llvm.expect.i1(i1 %gt24, i1 false)
  br i1 %41, label %panic25, label %checkok32

checkok32:                                        ; preds = %noerr_block
  %lt33 = icmp slt i64 %40, 0, !dbg !4329
  %42 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !4329
  br i1 %42, label %panic34, label %checkok41, !dbg !4329

checkok41:                                        ; preds = %checkok32
  %43 = insertvalue %"char[]" undef, ptr %39, 0, !dbg !4329
  %44 = insertvalue %"char[]" %43, i64 0, 1, !dbg !4329
  store %"char[]" %44, ptr %taddr42, align 8
  %45 = load { ptr, i64 }, ptr %taddr42, align 8
  ret { ptr, i64 } %45

if.exit43:                                        ; preds = %entry
    #dbg_declare(ptr %total_size, !4330, !DIExpression(), !4331)
  %ptradd44 = getelementptr inbounds i8, ptr %joiner, i64 8, !dbg !4332
  %46 = load i64, ptr %ptradd44, align 8, !dbg !4332
  %ptradd45 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4333
  %47 = load i64, ptr %ptradd45, align 8, !dbg !4333
  %mul46 = mul i64 %46, %47, !dbg !4332
  store i64 %mul46, ptr %total_size, align 8, !dbg !4332
  %ptradd47 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4334
  %48 = load i64, ptr %ptradd47, align 8, !dbg !4334
    #dbg_declare(ptr %.anon, !4336, !DIExpression(), !4334)
  store i64 0, ptr %.anon, align 8, !dbg !4334
  br label %loop.cond, !dbg !4334

loop.cond:                                        ; preds = %checkok67, %if.exit43
  %49 = load i64, ptr %.anon, align 8, !dbg !4334
  %lt48 = icmp ult i64 %49, %48, !dbg !4334
  br i1 %lt48, label %loop.body, label %loop.exit, !dbg !4334

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %str, !4337, !DIExpression(), !4339)
  %ptradd49 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4340
  %50 = load i64, ptr %ptradd49, align 8, !dbg !4340
  %51 = load ptr, ptr %s, align 8, !dbg !4340
  %52 = load i64, ptr %.anon, align 8, !dbg !4340
  %ge = icmp uge i64 %52, %50, !dbg !4340
  %53 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4340
  br i1 %53, label %panic50, label %checkok57, !dbg !4340

checkok57:                                        ; preds = %loop.body
  %ptroffset = getelementptr inbounds [16 x i8], ptr %51, i64 %52, !dbg !4340
  store ptr %ptroffset, ptr %str, align 8, !dbg !4340
  %54 = load i64, ptr %total_size, align 8, !dbg !4341
  %55 = load ptr, ptr %str, align 8, !dbg !4343
  %checknull = icmp eq ptr %55, null, !dbg !4343
  %56 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !4343
  br i1 %56, label %panic58, label %checkok59, !dbg !4343

checkok59:                                        ; preds = %checkok57
  %57 = ptrtoint ptr %55 to i64, !dbg !4343
  %58 = urem i64 %57, 8, !dbg !4343
  %59 = icmp ne i64 %58, 0, !dbg !4343
  %60 = call i1 @llvm.expect.i1(i1 %59, i1 false), !dbg !4343
  br i1 %60, label %panic60, label %checkok67, !dbg !4343

checkok67:                                        ; preds = %checkok59
  %ptradd68 = getelementptr inbounds i8, ptr %55, i64 8, !dbg !4343
  %61 = load i64, ptr %ptradd68, align 8, !dbg !4343
  %add69 = add i64 %54, %61, !dbg !4341
  store i64 %add69, ptr %total_size, align 8, !dbg !4341
  %62 = load i64, ptr %.anon, align 8, !dbg !4334
  %addnuw = add nuw i64 %62, 1, !dbg !4334
  store i64 %addnuw, ptr %.anon, align 8, !dbg !4334
  br label %loop.cond, !dbg !4334

loop.exit:                                        ; preds = %loop.cond
    #dbg_declare(ptr %state, !4344, !DIExpression(), !4346)
  %63 = call ptr @std.core.mem.allocator.push_pool() #5, !dbg !4348
  store ptr %63, ptr %state, align 8, !dbg !4348
    #dbg_declare(ptr %res, !4349, !DIExpression(), !4351)
  %64 = load i64, ptr %total_size, align 8, !dbg !4352
  %65 = call ptr @std.core.dstring.temp_with_capacity(i64 %64), !dbg !4353
  store ptr %65, ptr %res, align 8, !dbg !4353
  store ptr %res, ptr %self, align 8
  %ptradd70 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4354
  %66 = load i64, ptr %ptradd70, align 8, !dbg !4354
  %67 = load ptr, ptr %s, align 8, !dbg !4354
  %ge71 = icmp sge i64 0, %66, !dbg !4355
  %68 = call i1 @llvm.expect.i1(i1 %ge71, i1 false), !dbg !4355
  br i1 %68, label %panic72, label %checkok79, !dbg !4355

checkok79:                                        ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value, ptr align 8 %67, i32 16, i1 false)
  %69 = load ptr, ptr %self, align 8, !dbg !4356
  %neq80 = icmp ne ptr %69, null, !dbg !4356
  br i1 %neq80, label %assert_ok82, label %assert_fail81, !dbg !4356

assert_fail81:                                    ; preds = %checkok79
  %70 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4356
  call void %70(ptr @.panic_msg.21, i64 32, ptr @.file.22, i64 10, ptr @.func, i64 4, i32 395) #6, !dbg !4356
  unreachable, !dbg !4356

assert_ok82:                                      ; preds = %checkok79
  %71 = load ptr, ptr %self, align 8, !dbg !4361
  %lo = load ptr, ptr %value, align 8, !dbg !4361
  %ptradd83 = getelementptr inbounds i8, ptr %value, i64 8, !dbg !4361
  %hi = load i64, ptr %ptradd83, align 8, !dbg !4361
  call void @std.core.dstring.DString.append_chars(ptr %71, ptr %lo, i64 %hi), !dbg !4362
  %72 = load %"char[][]", ptr %s, align 8, !dbg !4363
  %73 = extractvalue %"char[][]" %72, 0, !dbg !4363
  %74 = extractvalue %"char[][]" %72, 1, !dbg !4365
  %gt84 = icmp sgt i64 1, %74, !dbg !4365
  %75 = call i1 @llvm.expect.i1(i1 %gt84, i1 false), !dbg !4365
  br i1 %75, label %panic85, label %checkok92, !dbg !4365

checkok92:                                        ; preds = %assert_ok82
  %size93 = sub i64 %74, 1, !dbg !4363
  %ptradd94 = getelementptr inbounds i8, ptr %73, i64 16, !dbg !4363
  %76 = insertvalue %"char[][]" undef, ptr %ptradd94, 0, !dbg !4363
  %77 = insertvalue %"char[][]" %76, i64 %size93, 1, !dbg !4363
  store %"char[][]" %77, ptr %taddr95, align 8
  %checknull96 = icmp eq ptr %taddr95, null, !dbg !4363
  %78 = call i1 @llvm.expect.i1(i1 %checknull96, i1 false), !dbg !4363
  br i1 %78, label %panic97, label %checkok98, !dbg !4363

checkok98:                                        ; preds = %checkok92
  %79 = ptrtoint ptr %taddr95 to i64, !dbg !4363
  %80 = urem i64 %79, 8, !dbg !4363
  %81 = icmp ne i64 %80, 0, !dbg !4363
  %82 = call i1 @llvm.expect.i1(i1 %81, i1 false), !dbg !4363
  br i1 %82, label %panic99, label %checkok106, !dbg !4363

checkok106:                                       ; preds = %checkok98
  %ptradd107 = getelementptr inbounds i8, ptr %taddr95, i64 8, !dbg !4363
  %83 = load i64, ptr %ptradd107, align 8, !dbg !4363
    #dbg_declare(ptr %.anon108, !4366, !DIExpression(), !4363)
  store i64 0, ptr %.anon108, align 8, !dbg !4363
  br label %loop.cond109, !dbg !4363

loop.cond109:                                     ; preds = %assert_ok158, %checkok106
  %84 = load i64, ptr %.anon108, align 8, !dbg !4363
  %lt110 = icmp ult i64 %84, %83, !dbg !4363
  br i1 %lt110, label %loop.body111, label %loop.exit163, !dbg !4363

loop.body111:                                     ; preds = %loop.cond109
    #dbg_declare(ptr %str112, !4367, !DIExpression(), !4369)
  %checknull113 = icmp eq ptr %taddr95, null, !dbg !4370
  %85 = call i1 @llvm.expect.i1(i1 %checknull113, i1 false), !dbg !4370
  br i1 %85, label %panic114, label %checkok115, !dbg !4370

checkok115:                                       ; preds = %loop.body111
  %86 = ptrtoint ptr %taddr95 to i64, !dbg !4370
  %87 = urem i64 %86, 8, !dbg !4370
  %88 = icmp ne i64 %87, 0, !dbg !4370
  %89 = call i1 @llvm.expect.i1(i1 %88, i1 false), !dbg !4370
  br i1 %89, label %panic116, label %checkok123, !dbg !4370

checkok123:                                       ; preds = %checkok115
  %ptradd124 = getelementptr inbounds i8, ptr %taddr95, i64 8, !dbg !4370
  %90 = load i64, ptr %ptradd124, align 8, !dbg !4370
  %91 = load ptr, ptr %taddr95, align 8, !dbg !4370
  %92 = load i64, ptr %.anon108, align 8, !dbg !4370
  %ge125 = icmp uge i64 %92, %90, !dbg !4370
  %93 = call i1 @llvm.expect.i1(i1 %ge125, i1 false), !dbg !4370
  br i1 %93, label %panic126, label %checkok133, !dbg !4370

checkok133:                                       ; preds = %checkok123
  %ptroffset134 = getelementptr inbounds [16 x i8], ptr %91, i64 %92, !dbg !4370
  store ptr %ptroffset134, ptr %str112, align 8, !dbg !4370
  store ptr %res, ptr %self135, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value136, ptr align 8 %joiner, i32 16, i1 false)
  %94 = load ptr, ptr %self135, align 8, !dbg !4371
  %neq137 = icmp ne ptr %94, null, !dbg !4371
  br i1 %neq137, label %assert_ok139, label %assert_fail138, !dbg !4371

assert_fail138:                                   ; preds = %checkok133
  %95 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4371
  call void %95(ptr @.panic_msg.21, i64 32, ptr @.file.22, i64 10, ptr @.func, i64 4, i32 395) #6, !dbg !4371
  unreachable, !dbg !4371

assert_ok139:                                     ; preds = %checkok133
  %96 = load ptr, ptr %self135, align 8, !dbg !4376
  %lo140 = load ptr, ptr %value136, align 8, !dbg !4376
  %ptradd141 = getelementptr inbounds i8, ptr %value136, i64 8, !dbg !4376
  %hi142 = load i64, ptr %ptradd141, align 8, !dbg !4376
  call void @std.core.dstring.DString.append_chars(ptr %96, ptr %lo140, i64 %hi142), !dbg !4377
  store ptr %res, ptr %self143, align 8
  %97 = load ptr, ptr %str112, align 8, !dbg !4378
  %checknull144 = icmp eq ptr %97, null, !dbg !4378
  %98 = call i1 @llvm.expect.i1(i1 %checknull144, i1 false), !dbg !4378
  br i1 %98, label %panic145, label %checkok146, !dbg !4378

checkok146:                                       ; preds = %assert_ok139
  %99 = ptrtoint ptr %97 to i64, !dbg !4378
  %100 = urem i64 %99, 8, !dbg !4378
  %101 = icmp ne i64 %100, 0, !dbg !4378
  %102 = call i1 @llvm.expect.i1(i1 %101, i1 false), !dbg !4378
  br i1 %102, label %panic147, label %checkok154, !dbg !4378

checkok154:                                       ; preds = %checkok146
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value155, ptr align 8 %97, i32 16, i1 false)
  %103 = load ptr, ptr %self143, align 8, !dbg !4379
  %neq156 = icmp ne ptr %103, null, !dbg !4379
  br i1 %neq156, label %assert_ok158, label %assert_fail157, !dbg !4379

assert_fail157:                                   ; preds = %checkok154
  %104 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4379
  call void %104(ptr @.panic_msg.21, i64 32, ptr @.file.22, i64 10, ptr @.func, i64 4, i32 395) #6, !dbg !4379
  unreachable, !dbg !4379

assert_ok158:                                     ; preds = %checkok154
  %105 = load ptr, ptr %self143, align 8, !dbg !4383
  %lo159 = load ptr, ptr %value155, align 8, !dbg !4383
  %ptradd160 = getelementptr inbounds i8, ptr %value155, i64 8, !dbg !4383
  %hi161 = load i64, ptr %ptradd160, align 8, !dbg !4383
  call void @std.core.dstring.DString.append_chars(ptr %105, ptr %lo159, i64 %hi161), !dbg !4384
  %106 = load i64, ptr %.anon108, align 8, !dbg !4363
  %addnuw162 = add nuw i64 %106, 1, !dbg !4363
  store i64 %addnuw162, ptr %.anon108, align 8, !dbg !4363
  br label %loop.cond109, !dbg !4363

loop.exit163:                                     ; preds = %loop.cond109
  %107 = load ptr, ptr %res, align 8, !dbg !4385
  %lo164 = load i64, ptr %allocator, align 8, !dbg !4385
  %ptradd165 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !4385
  %hi166 = load ptr, ptr %ptradd165, align 8, !dbg !4385
  %108 = call { ptr, i64 } @std.core.dstring.DString.copy_str(ptr %107, i64 %lo164, ptr %hi166), !dbg !4386
  store { ptr, i64 } %108, ptr %result, align 8
  %109 = load %"char[]", ptr %result, align 8
  %110 = load ptr, ptr %state, align 8, !dbg !4387
  call void @std.core.mem.allocator.pop_pool(ptr %110) #5, !dbg !4389
  store %"char[]" %109, ptr %taddr167, align 8
  %111 = load { ptr, i64 }, ptr %taddr167, align 8
  ret { ptr, i64 } %111

panic:                                            ; preds = %expr_block.exit
  store i64 %sub17, ptr %taddr18, align 8
  %112 = insertvalue %any undef, ptr %taddr18, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %113, ptr %varargslots, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %114, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file, i64 16, ptr @.func, i64 4, i32 269, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !4328
  unreachable, !dbg !4328

panic25:                                          ; preds = %noerr_block
  store i64 %40, ptr %taddr26, align 8
  %115 = insertvalue %any undef, ptr %taddr26, 0
  %116 = insertvalue %any %115, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %117 = insertvalue %any undef, ptr %taddr27, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %116, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %118, ptr %ptradd29, align 16
  %119 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %119, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func, i64 4, i32 136, ptr byval(%"any[]") align 8 %indirectarg31) #6, !dbg !4329
  unreachable, !dbg !4329

panic34:                                          ; preds = %checkok32
  store i64 -1, ptr %taddr35, align 8
  %120 = insertvalue %any undef, ptr %taddr35, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %40, ptr %taddr36, align 8
  %122 = insertvalue %any undef, ptr %taddr36, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %121, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %123, ptr %ptradd38, align 16
  %124 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %124, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.17, i64 60, ptr @.file.16, i64 9, ptr @.func, i64 4, i32 136, ptr byval(%"any[]") align 8 %indirectarg40) #6, !dbg !4329
  unreachable, !dbg !4329

panic50:                                          ; preds = %loop.body
  store i64 %50, ptr %taddr51, align 8
  %125 = insertvalue %any undef, ptr %taddr51, 0
  %126 = insertvalue %any %125, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %52, ptr %taddr52, align 8
  %127 = insertvalue %any undef, ptr %taddr52, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %126, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %128, ptr %ptradd54, align 16
  %129 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %129, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func, i64 4, i32 140, ptr byval(%"any[]") align 8 %indirectarg56) #6, !dbg !4340
  unreachable, !dbg !4340

panic58:                                          ; preds = %checkok57
  %130 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4343
  call void %130(ptr @.panic_msg.19, i64 44, ptr @.file.16, i64 9, ptr @.func, i64 4, i32 142) #6, !dbg !4343
  unreachable, !dbg !4343

panic60:                                          ; preds = %checkok59
  store i64 8, ptr %taddr61, align 8
  %131 = insertvalue %any undef, ptr %taddr61, 0
  %132 = insertvalue %any %131, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr62, align 8
  %133 = insertvalue %any undef, ptr %taddr62, 0
  %134 = insertvalue %any %133, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %132, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %134, ptr %ptradd64, align 16
  %135 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %135, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 94, ptr @.file.16, i64 9, ptr @.func, i64 4, i32 142, ptr byval(%"any[]") align 8 %indirectarg66) #6, !dbg !4343
  unreachable, !dbg !4343

panic72:                                          ; preds = %loop.exit
  store i64 %66, ptr %taddr73, align 8
  %136 = insertvalue %any undef, ptr %taddr73, 0
  %137 = insertvalue %any %136, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr74, align 8
  %138 = insertvalue %any undef, ptr %taddr74, 0
  %139 = insertvalue %any %138, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %137, ptr %varargslots75, align 16
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %139, ptr %ptradd76, align 16
  %140 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %140, i64 2, 1
  store %"any[]" %"$$temp77", ptr %indirectarg78, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func, i64 4, i32 147, ptr byval(%"any[]") align 8 %indirectarg78) #6, !dbg !4355
  unreachable, !dbg !4355

panic85:                                          ; preds = %assert_ok82
  store i64 %74, ptr %taddr86, align 8
  %141 = insertvalue %any undef, ptr %taddr86, 0
  %142 = insertvalue %any %141, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr87, align 8
  %143 = insertvalue %any undef, ptr %taddr87, 0
  %144 = insertvalue %any %143, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %142, ptr %varargslots88, align 16
  %ptradd89 = getelementptr inbounds i8, ptr %varargslots88, i64 16
  store %any %144, ptr %ptradd89, align 16
  %145 = insertvalue %"any[]" undef, ptr %varargslots88, 0
  %"$$temp90" = insertvalue %"any[]" %145, i64 2, 1
  store %"any[]" %"$$temp90", ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 61, ptr @.file.16, i64 9, ptr @.func, i64 4, i32 148, ptr byval(%"any[]") align 8 %indirectarg91) #6, !dbg !4363
  unreachable, !dbg !4363

panic97:                                          ; preds = %checkok92
  %146 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4363
  call void %146(ptr @.panic_msg.23, i64 47, ptr @.file.16, i64 9, ptr @.func, i64 4, i32 148) #6, !dbg !4363
  unreachable, !dbg !4363

panic99:                                          ; preds = %checkok98
  store i64 8, ptr %taddr100, align 8
  %147 = insertvalue %any undef, ptr %taddr100, 0
  %148 = insertvalue %any %147, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %80, ptr %taddr101, align 8
  %149 = insertvalue %any undef, ptr %taddr101, 0
  %150 = insertvalue %any %149, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %148, ptr %varargslots102, align 16
  %ptradd103 = getelementptr inbounds i8, ptr %varargslots102, i64 16
  store %any %150, ptr %ptradd103, align 16
  %151 = insertvalue %"any[]" undef, ptr %varargslots102, 0
  %"$$temp104" = insertvalue %"any[]" %151, i64 2, 1
  store %"any[]" %"$$temp104", ptr %indirectarg105, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 94, ptr @.file.16, i64 9, ptr @.func, i64 4, i32 148, ptr byval(%"any[]") align 8 %indirectarg105) #6, !dbg !4363
  unreachable, !dbg !4363

panic114:                                         ; preds = %loop.body111
  %152 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4370
  call void %152(ptr @.panic_msg.23, i64 47, ptr @.file.16, i64 9, ptr @.func, i64 4, i32 148) #6, !dbg !4370
  unreachable, !dbg !4370

panic116:                                         ; preds = %checkok115
  store i64 8, ptr %taddr117, align 8
  %153 = insertvalue %any undef, ptr %taddr117, 0
  %154 = insertvalue %any %153, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %87, ptr %taddr118, align 8
  %155 = insertvalue %any undef, ptr %taddr118, 0
  %156 = insertvalue %any %155, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %154, ptr %varargslots119, align 16
  %ptradd120 = getelementptr inbounds i8, ptr %varargslots119, i64 16
  store %any %156, ptr %ptradd120, align 16
  %157 = insertvalue %"any[]" undef, ptr %varargslots119, 0
  %"$$temp121" = insertvalue %"any[]" %157, i64 2, 1
  store %"any[]" %"$$temp121", ptr %indirectarg122, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 94, ptr @.file.16, i64 9, ptr @.func, i64 4, i32 148, ptr byval(%"any[]") align 8 %indirectarg122) #6, !dbg !4370
  unreachable, !dbg !4370

panic126:                                         ; preds = %checkok123
  store i64 %90, ptr %taddr127, align 8
  %158 = insertvalue %any undef, ptr %taddr127, 0
  %159 = insertvalue %any %158, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %92, ptr %taddr128, align 8
  %160 = insertvalue %any undef, ptr %taddr128, 0
  %161 = insertvalue %any %160, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %159, ptr %varargslots129, align 16
  %ptradd130 = getelementptr inbounds i8, ptr %varargslots129, i64 16
  store %any %161, ptr %ptradd130, align 16
  %162 = insertvalue %"any[]" undef, ptr %varargslots129, 0
  %"$$temp131" = insertvalue %"any[]" %162, i64 2, 1
  store %"any[]" %"$$temp131", ptr %indirectarg132, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 59, ptr @.file.16, i64 9, ptr @.func, i64 4, i32 148, ptr byval(%"any[]") align 8 %indirectarg132) #6, !dbg !4370
  unreachable, !dbg !4370

panic145:                                         ; preds = %assert_ok139
  %163 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4378
  call void %163(ptr @.panic_msg.19, i64 44, ptr @.file.16, i64 9, ptr @.func, i64 4, i32 151) #6, !dbg !4378
  unreachable, !dbg !4378

panic147:                                         ; preds = %checkok146
  store i64 8, ptr %taddr148, align 8
  %164 = insertvalue %any undef, ptr %taddr148, 0
  %165 = insertvalue %any %164, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %100, ptr %taddr149, align 8
  %166 = insertvalue %any undef, ptr %taddr149, 0
  %167 = insertvalue %any %166, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %165, ptr %varargslots150, align 16
  %ptradd151 = getelementptr inbounds i8, ptr %varargslots150, i64 16
  store %any %167, ptr %ptradd151, align 16
  %168 = insertvalue %"any[]" undef, ptr %varargslots150, 0
  %"$$temp152" = insertvalue %"any[]" %168, i64 2, 1
  store %"any[]" %"$$temp152", ptr %indirectarg153, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.20, i64 94, ptr @.file.16, i64 9, ptr @.func, i64 4, i32 151, ptr byval(%"any[]") align 8 %indirectarg153) #6, !dbg !4378
  unreachable, !dbg !4378
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.from_utf32(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4) #0 comdat !dbg !4390 {
entry:
  %allocator = alloca %any, align 8
  %utf32 = alloca %"uint[]", align 8
  %len = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !4397, !DIExpression(), !4398)
  store ptr %3, ptr %utf32, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %utf32, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %utf32, !4399, !DIExpression(), !4400)
    #dbg_declare(ptr %len, !4401, !DIExpression(), !4402)
  %lo = load ptr, ptr %utf32, align 8, !dbg !4403
  %ptradd2 = getelementptr inbounds i8, ptr %utf32, i64 8, !dbg !4403
  %hi = load i64, ptr %ptradd2, align 8, !dbg !4403
  %5 = call i64 @std.core.string.conv.utf8len_for_utf32(ptr %lo, i64 %hi), !dbg !4404
  store i64 %5, ptr %len, align 8, !dbg !4404
    #dbg_declare(ptr %data, !4405, !DIExpression(), !4406)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %6 = load i64, ptr %len, align 8, !dbg !4407
  %add = add i64 %6, 1, !dbg !4407
  store i64 %add, ptr %size, align 8
  %7 = load i64, ptr %size, align 8, !dbg !4408
  %i2nb = icmp eq i64 %7, 0, !dbg !4408
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4408

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !4411
  br label %expr_block.exit, !dbg !4411

if.exit:                                          ; preds = %entry
  %8 = load i64, ptr %size, align 8, !dbg !4412
  br i1 true, label %or.phi, label %or.rhs, !dbg !4413

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %9 = load i64, ptr %x, align 8, !dbg !4414
  %neq = icmp ne i64 0, %9, !dbg !4414
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !4414

and.rhs:                                          ; preds = %or.rhs
  %10 = load i64, ptr %x, align 8, !dbg !4417
  %11 = load i64, ptr %x, align 8, !dbg !4418
  %sub = sub i64 %11, 1, !dbg !4418
  %and = and i64 %10, %sub, !dbg !4417
  %eq = icmp eq i64 %and, 0, !dbg !4417
  br label %and.phi, !dbg !4417

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !4417
  br label %or.phi, !dbg !4417

or.phi:                                           ; preds = %and.phi, %if.exit
  %val4 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !4417
  br i1 %val4, label %assert_ok, label %assert_fail, !dbg !4417

assert_fail:                                      ; preds = %or.phi
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4419
  call void %12(ptr @.panic_msg, i64 65, ptr @.file, i64 16, ptr @.func.24, i64 10, i32 85) #6, !dbg !4419
  unreachable, !dbg !4419

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok6, label %assert_fail5, !dbg !4419

assert_fail5:                                     ; preds = %assert_ok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4419
  call void %13(ptr @.panic_msg.10, i64 80, ptr @.file, i64 16, ptr @.func.24, i64 10, i32 85) #6, !dbg !4419
  unreachable, !dbg !4419

assert_ok6:                                       ; preds = %assert_ok
  %lt = icmp ult i64 0, %8, !dbg !4419
  br i1 %lt, label %assert_ok8, label %assert_fail7, !dbg !4419

assert_fail7:                                     ; preds = %assert_ok6
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4419
  call void %14(ptr @.panic_msg.11, i64 59, ptr @.file, i64 16, ptr @.func.24, i64 10, i32 85) #6, !dbg !4419
  unreachable, !dbg !4419

assert_ok8:                                       ; preds = %assert_ok6
  %ptradd9 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !4419
  %15 = load i64, ptr %ptradd9, align 8, !dbg !4419
  %16 = inttoptr i64 %15 to ptr, !dbg !4419
  %type = load ptr, ptr %.cachedtype, align 8
  %17 = icmp eq ptr %16, %type
  br i1 %17, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok8
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 16
  %18 = load ptr, ptr %ptradd10, align 8
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.acquire")
  store ptr %19, ptr %.inlinecache, align 8
  store ptr %16, ptr %.cachedtype, align 8
  br label %20

cache_hit:                                        ; preds = %assert_ok8
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %20

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ]
  %21 = icmp eq ptr %fn_phi, null
  br i1 %21, label %missing_function, label %match

missing_function:                                 ; preds = %20
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4419
  call void %22(ptr @.panic_msg.12, i64 44, ptr @.file, i64 16, ptr @.func.24, i64 10, i32 85) #6, !dbg !4419
  unreachable, !dbg !4419

match:                                            ; preds = %20
  %23 = load ptr, ptr %allocator3, align 8
  %24 = call i64 %fn_phi(ptr %retparam, ptr %23, i64 %8, i32 0, i64 0), !dbg !4419
  %not_err = icmp eq i64 %24, 0, !dbg !4419
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4419
  br i1 %25, label %after_check, label %assign_optional, !dbg !4419

assign_optional:                                  ; preds = %match
  store i64 %24, ptr %error_var, align 8, !dbg !4419
  br label %guard_block, !dbg !4419

after_check:                                      ; preds = %match
  %26 = load ptr, ptr %retparam, align 8, !dbg !4419
  store ptr %26, ptr %blockret, align 8, !dbg !4419
  br label %expr_block.exit, !dbg !4419

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !4419

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var, align 8, !dbg !4419
  ret i64 %27, !dbg !4419

noerr_block:                                      ; preds = %expr_block.exit
  %28 = load ptr, ptr %blockret, align 8, !dbg !4419
  store ptr %28, ptr %data, align 8, !dbg !4419
  %lo11 = load ptr, ptr %utf32, align 8, !dbg !4420
  %ptradd12 = getelementptr inbounds i8, ptr %utf32, i64 8, !dbg !4420
  %hi13 = load i64, ptr %ptradd12, align 8, !dbg !4420
  %29 = load ptr, ptr %data, align 8, !dbg !4420
  call void @std.core.string.conv.utf32to8_unsafe(ptr %lo11, i64 %hi13, ptr %29), !dbg !4421
  %30 = load ptr, ptr %data, align 8, !dbg !4422
  %31 = load i64, ptr %len, align 8, !dbg !4423
  %ptradd14 = getelementptr inbounds i8, ptr %30, i64 %31, !dbg !4423
  store i8 0, ptr %ptradd14, align 1, !dbg !4424
  %32 = load ptr, ptr %data, align 8, !dbg !4425
  %33 = load i64, ptr %len, align 8, !dbg !4426
  %add15 = add i64 0, %33, !dbg !4426
  %gt = icmp ugt i64 0, %add15, !dbg !4426
  %sub16 = sub i64 %add15, 0, !dbg !4426
  %34 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !4426
  br i1 %34, label %panic, label %checkok, !dbg !4426

checkok:                                          ; preds = %noerr_block
  %size17 = sub i64 %add15, 0, !dbg !4427
  %35 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !4427
  %36 = insertvalue %"char[]" %35, i64 %size17, 1, !dbg !4427
  store %"char[]" %36, ptr %0, align 8, !dbg !4427
  ret i64 0, !dbg !4427

panic:                                            ; preds = %noerr_block
  store i64 %sub16, ptr %taddr, align 8
  %37 = insertvalue %any undef, ptr %taddr, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %38, ptr %varargslots, align 16
  %39 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %39, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.24, i64 10, i32 763, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !4427
  unreachable, !dbg !4427
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.from_utf16(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4) #0 comdat !dbg !4428 {
entry:
  %allocator = alloca %any, align 8
  %utf16 = alloca %"ushort[]", align 8
  %len = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %x = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %error_var11 = alloca i64, align 8
  %allocator19 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache27 = alloca ptr, align 8
  %.cachedtype28 = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype28, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !4435, !DIExpression(), !4436)
  store ptr %3, ptr %utf16, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %utf16, i64 8
  store i64 %4, ptr %ptradd1, align 8
    #dbg_declare(ptr %utf16, !4437, !DIExpression(), !4438)
    #dbg_declare(ptr %len, !4439, !DIExpression(), !4440)
  %lo = load ptr, ptr %utf16, align 8, !dbg !4441
  %ptradd2 = getelementptr inbounds i8, ptr %utf16, i64 8, !dbg !4441
  %hi = load i64, ptr %ptradd2, align 8, !dbg !4441
  %5 = call i64 @std.core.string.conv.utf8len_for_utf16(ptr %lo, i64 %hi), !dbg !4442
  store i64 %5, ptr %len, align 8, !dbg !4442
    #dbg_declare(ptr %data, !4443, !DIExpression(), !4444)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %6 = load i64, ptr %len, align 8, !dbg !4445
  %add = add i64 %6, 1, !dbg !4445
  store i64 %add, ptr %size, align 8
  %7 = load i64, ptr %size, align 8, !dbg !4446
  %i2nb = icmp eq i64 %7, 0, !dbg !4446
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4446

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !4449
  br label %expr_block.exit, !dbg !4449

if.exit:                                          ; preds = %entry
  %8 = load i64, ptr %size, align 8, !dbg !4450
  br i1 true, label %or.phi, label %or.rhs, !dbg !4451

or.rhs:                                           ; preds = %if.exit
  store i64 0, ptr %x, align 8
  %9 = load i64, ptr %x, align 8, !dbg !4452
  %neq = icmp ne i64 0, %9, !dbg !4452
  br i1 %neq, label %and.rhs, label %and.phi, !dbg !4452

and.rhs:                                          ; preds = %or.rhs
  %10 = load i64, ptr %x, align 8, !dbg !4455
  %11 = load i64, ptr %x, align 8, !dbg !4456
  %sub = sub i64 %11, 1, !dbg !4456
  %and = and i64 %10, %sub, !dbg !4455
  %eq = icmp eq i64 %and, 0, !dbg !4455
  br label %and.phi, !dbg !4455

and.phi:                                          ; preds = %and.rhs, %or.rhs
  %val = phi i1 [ false, %or.rhs ], [ %eq, %and.rhs ], !dbg !4455
  br label %or.phi, !dbg !4455

or.phi:                                           ; preds = %and.phi, %if.exit
  %val4 = phi i1 [ true, %if.exit ], [ %val, %and.phi ], !dbg !4455
  br i1 %val4, label %assert_ok, label %assert_fail, !dbg !4455

assert_fail:                                      ; preds = %or.phi
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4457
  call void %12(ptr @.panic_msg, i64 65, ptr @.file, i64 16, ptr @.func.25, i64 10, i32 85) #6, !dbg !4457
  unreachable, !dbg !4457

assert_ok:                                        ; preds = %or.phi
  br i1 true, label %assert_ok6, label %assert_fail5, !dbg !4457

assert_fail5:                                     ; preds = %assert_ok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4457
  call void %13(ptr @.panic_msg.10, i64 80, ptr @.file, i64 16, ptr @.func.25, i64 10, i32 85) #6, !dbg !4457
  unreachable, !dbg !4457

assert_ok6:                                       ; preds = %assert_ok
  %lt = icmp ult i64 0, %8, !dbg !4457
  br i1 %lt, label %assert_ok8, label %assert_fail7, !dbg !4457

assert_fail7:                                     ; preds = %assert_ok6
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4457
  call void %14(ptr @.panic_msg.11, i64 59, ptr @.file, i64 16, ptr @.func.25, i64 10, i32 85) #6, !dbg !4457
  unreachable, !dbg !4457

assert_ok8:                                       ; preds = %assert_ok6
  %ptradd9 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !4457
  %15 = load i64, ptr %ptradd9, align 8, !dbg !4457
  %16 = inttoptr i64 %15 to ptr, !dbg !4457
  %type = load ptr, ptr %.cachedtype, align 8
  %17 = icmp eq ptr %16, %type
  br i1 %17, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %assert_ok8
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 16
  %18 = load ptr, ptr %ptradd10, align 8
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.acquire")
  store ptr %19, ptr %.inlinecache, align 8
  store ptr %16, ptr %.cachedtype, align 8
  br label %20

cache_hit:                                        ; preds = %assert_ok8
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %20

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ]
  %21 = icmp eq ptr %fn_phi, null
  br i1 %21, label %missing_function, label %match

missing_function:                                 ; preds = %20
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4457
  call void %22(ptr @.panic_msg.12, i64 44, ptr @.file, i64 16, ptr @.func.25, i64 10, i32 85) #6, !dbg !4457
  unreachable, !dbg !4457

match:                                            ; preds = %20
  %23 = load ptr, ptr %allocator3, align 8
  %24 = call i64 %fn_phi(ptr %retparam, ptr %23, i64 %8, i32 0, i64 0), !dbg !4457
  %not_err = icmp eq i64 %24, 0, !dbg !4457
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4457
  br i1 %25, label %after_check, label %assign_optional, !dbg !4457

assign_optional:                                  ; preds = %match
  store i64 %24, ptr %error_var, align 8, !dbg !4457
  br label %guard_block, !dbg !4457

after_check:                                      ; preds = %match
  %26 = load ptr, ptr %retparam, align 8, !dbg !4457
  store ptr %26, ptr %blockret, align 8, !dbg !4457
  br label %expr_block.exit, !dbg !4457

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !4457

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var, align 8, !dbg !4457
  ret i64 %27, !dbg !4457

noerr_block:                                      ; preds = %expr_block.exit
  %28 = load ptr, ptr %blockret, align 8, !dbg !4457
  store ptr %28, ptr %data, align 8, !dbg !4457
  %lo12 = load ptr, ptr %utf16, align 8, !dbg !4458
  %ptradd13 = getelementptr inbounds i8, ptr %utf16, i64 8, !dbg !4458
  %hi14 = load i64, ptr %ptradd13, align 8, !dbg !4458
  %29 = load ptr, ptr %data, align 8, !dbg !4458
  %30 = call i64 @std.core.string.conv.utf16to8_unsafe(ptr %lo12, i64 %hi14, ptr %29), !dbg !4459
  %not_err15 = icmp eq i64 %30, 0, !dbg !4459
  %31 = call i1 @llvm.expect.i1(i1 %not_err15, i1 true), !dbg !4459
  br i1 %31, label %after_check17, label %assign_optional16, !dbg !4459

assign_optional16:                                ; preds = %noerr_block
  store i64 %30, ptr %error_var11, align 8, !dbg !4459
  br label %guard_block18, !dbg !4459

after_check17:                                    ; preds = %noerr_block
  br label %noerr_block38, !dbg !4459

guard_block18:                                    ; preds = %assign_optional16
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator19, ptr align 8 %allocator, i32 16, i1 false)
  %32 = load ptr, ptr %data, align 8, !dbg !4460
  store ptr %32, ptr %ptr, align 8
  %33 = load ptr, ptr %ptr, align 8, !dbg !4462
  %i2nb20 = icmp eq ptr %33, null, !dbg !4462
  br i1 %i2nb20, label %if.then21, label %if.exit22, !dbg !4462

if.then21:                                        ; preds = %guard_block18
  br label %expr_block.exit37, !dbg !4465

if.exit22:                                        ; preds = %guard_block18
  %34 = load ptr, ptr %ptr, align 8, !dbg !4466
  %neq23 = icmp ne ptr %34, null, !dbg !4467
  br i1 %neq23, label %assert_ok25, label %assert_fail24, !dbg !4467

assert_fail24:                                    ; preds = %if.exit22
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4467
  call void %35(ptr @.panic_msg.26, i64 75, ptr @.file, i64 16, ptr @.func.25, i64 10, i32 122) #6, !dbg !4467
  unreachable, !dbg !4467

assert_ok25:                                      ; preds = %if.exit22
  %ptradd26 = getelementptr inbounds i8, ptr %allocator19, i64 8, !dbg !4467
  %36 = load i64, ptr %ptradd26, align 8, !dbg !4467
  %37 = inttoptr i64 %36 to ptr, !dbg !4467
  %type29 = load ptr, ptr %.cachedtype28, align 8
  %38 = icmp eq ptr %37, %type29
  br i1 %38, label %cache_hit32, label %cache_miss30

cache_miss30:                                     ; preds = %assert_ok25
  %ptradd31 = getelementptr inbounds i8, ptr %37, i64 16
  %39 = load ptr, ptr %ptradd31, align 8
  %40 = call ptr @.dyn_search(ptr %39, ptr @"$sel.release")
  store ptr %40, ptr %.inlinecache27, align 8
  store ptr %37, ptr %.cachedtype28, align 8
  br label %41

cache_hit32:                                      ; preds = %assert_ok25
  %cache_hit_fn33 = load ptr, ptr %.inlinecache27, align 8
  br label %41

41:                                               ; preds = %cache_hit32, %cache_miss30
  %fn_phi34 = phi ptr [ %cache_hit_fn33, %cache_hit32 ], [ %40, %cache_miss30 ]
  %42 = icmp eq ptr %fn_phi34, null
  br i1 %42, label %missing_function35, label %match36

missing_function35:                               ; preds = %41
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4467
  call void %43(ptr @.panic_msg.27, i64 44, ptr @.file, i64 16, ptr @.func.25, i64 10, i32 122) #6, !dbg !4467
  unreachable, !dbg !4467

match36:                                          ; preds = %41
  %44 = load ptr, ptr %allocator19, align 8, !dbg !4467
  call void %fn_phi34(ptr %44, ptr %34, i8 zeroext 0), !dbg !4467
  br label %expr_block.exit37, !dbg !4467

expr_block.exit37:                                ; preds = %match36, %if.then21
  %45 = load i64, ptr %error_var11, align 8, !dbg !4467
  ret i64 %45, !dbg !4467

noerr_block38:                                    ; preds = %after_check17
  %46 = load ptr, ptr %data, align 8, !dbg !4468
  %47 = load i64, ptr %len, align 8, !dbg !4469
  %ptradd39 = getelementptr inbounds i8, ptr %46, i64 %47, !dbg !4469
  store i8 0, ptr %ptradd39, align 1, !dbg !4470
  %48 = load ptr, ptr %data, align 8, !dbg !4471
  %49 = load i64, ptr %len, align 8, !dbg !4472
  %add40 = add i64 0, %49, !dbg !4472
  %gt = icmp ugt i64 0, %add40, !dbg !4472
  %sub41 = sub i64 %add40, 0, !dbg !4472
  %50 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !4472
  br i1 %50, label %panic, label %checkok, !dbg !4472

checkok:                                          ; preds = %noerr_block38
  %size42 = sub i64 %add40, 0, !dbg !4473
  %51 = insertvalue %"char[]" undef, ptr %48, 0, !dbg !4473
  %52 = insertvalue %"char[]" %51, i64 %size42, 1, !dbg !4473
  store %"char[]" %52, ptr %0, align 8, !dbg !4473
  ret i64 0, !dbg !4473

panic:                                            ; preds = %noerr_block38
  store i64 %sub41, ptr %taddr, align 8
  %53 = insertvalue %any undef, ptr %taddr, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.25, i64 10, i32 773, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !4473
  unreachable, !dbg !4473
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.from_wstring(ptr %0, i64 %1, ptr %2, ptr %3) #0 comdat !dbg !4474 {
entry:
  %allocator = alloca %any, align 8
  %wstring = alloca ptr, align 8
  %utf16_len = alloca i64, align 8
  %utf16 = alloca %"ushort[]", align 8
  %taddr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
    #dbg_declare(ptr %allocator, !4477, !DIExpression(), !4478)
  store ptr %3, ptr %wstring, align 8
    #dbg_declare(ptr %wstring, !4479, !DIExpression(), !4480)
    #dbg_declare(ptr %utf16_len, !4481, !DIExpression(), !4482)
  store i64 0, ptr %utf16_len, align 8, !dbg !4482
  br label %loop.cond, !dbg !4483

loop.cond:                                        ; preds = %loop.body, %entry
  %4 = load ptr, ptr %wstring, align 8, !dbg !4484
  %5 = load i64, ptr %utf16_len, align 8, !dbg !4486
  %ptroffset = getelementptr inbounds [2 x i8], ptr %4, i64 %5, !dbg !4486
  %6 = load i16, ptr %ptroffset, align 2, !dbg !4486
  %zext = zext i16 %6 to i32, !dbg !4486
  %neq = icmp ne i32 0, %zext, !dbg !4484
  br i1 %neq, label %loop.body, label %loop.exit, !dbg !4484

loop.body:                                        ; preds = %loop.cond
  %7 = load i64, ptr %utf16_len, align 8, !dbg !4487
  %add = add i64 %7, 1, !dbg !4487
  store i64 %add, ptr %utf16_len, align 8, !dbg !4487
  br label %loop.cond, !dbg !4487

loop.exit:                                        ; preds = %loop.cond
    #dbg_declare(ptr %utf16, !4488, !DIExpression(), !4489)
  %8 = load ptr, ptr %wstring, align 8, !dbg !4490
  %9 = load i64, ptr %utf16_len, align 8, !dbg !4491
  %add1 = add i64 0, %9, !dbg !4491
  %gt = icmp ugt i64 0, %add1, !dbg !4491
  %sub = sub i64 %add1, 0, !dbg !4491
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !4491
  br i1 %10, label %panic, label %checkok, !dbg !4491

checkok:                                          ; preds = %loop.exit
  %size = sub i64 %add1, 0, !dbg !4490
  %11 = insertvalue %"ushort[]" undef, ptr %8, 0, !dbg !4490
  %12 = insertvalue %"ushort[]" %11, i64 %size, 1, !dbg !4490
  store %"ushort[]" %12, ptr %utf16, align 8, !dbg !4490
  %lo = load i64, ptr %allocator, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8
  %hi = load ptr, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %utf16, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %utf16, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %13 = call i64 @std.core.string.from_utf16(ptr %retparam, i64 %lo, ptr %hi, ptr %lo3, i64 %hi5), !dbg !4492
  %not_err = icmp eq i64 %13, 0, !dbg !4492
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4492
  br i1 %14, label %after_check, label %assign_optional, !dbg !4492

assign_optional:                                  ; preds = %checkok
  store i64 %13, ptr %reterr, align 8, !dbg !4492
  br label %err_retblock, !dbg !4492

after_check:                                      ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4492
  ret i64 0, !dbg !4492

err_retblock:                                     ; preds = %assign_optional
  %15 = load i64, ptr %reterr, align 8, !dbg !4492
  ret i64 %15, !dbg !4492

panic:                                            ; preds = %loop.exit
  store i64 %sub, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %18 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %18, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.13, i64 43, ptr @.file.16, i64 9, ptr @.func.28, i64 12, i32 780, ptr byval(%"any[]") align 8 %indirectarg) #6, !dbg !4490
  unreachable, !dbg !4490
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.tfrom_wstring(ptr %0, ptr %1) #0 comdat !dbg !4493 {
entry:
  %wstring = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  store ptr %1, ptr %wstring, align 8
    #dbg_declare(ptr %wstring, !4496, !DIExpression(), !4497)
  %lo = load i64, ptr @std.core.mem.allocator.current_temp, align 8
  %hi = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8
  %2 = load ptr, ptr %wstring, align 8
  %3 = call i64 @std.core.string.from_wstring(ptr %retparam, i64 %lo, ptr %hi, ptr %2) #5, !dbg !4498
  %not_err = icmp eq i64 %3, 0, !dbg !4498
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4498
  br i1 %4, label %after_check, label %assign_optional, !dbg !4498

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !4498
  br label %err_retblock, !dbg !4498

after_check:                                      ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4498
  ret i64 0, !dbg !4498

err_retblock:                                     ; preds = %assign_optional
  %5 = load i64, ptr %reterr, align 8, !dbg !4498
  ret i64 %5, !dbg !4498
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.tfrom_utf16(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !4499 {
entry:
  %utf16 = alloca %"ushort[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  store ptr %1, ptr %utf16, align 8
  %ptradd = getelementptr inbounds i8, ptr %utf16, i64 8
  store i64 %2, ptr %ptradd, align 8
    #dbg_declare(ptr %utf16, !4502, !DIExpression(), !4503)
  %lo = load i64, ptr @std.core.mem.allocator.current_temp, align 8
  %hi = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.current_temp, i64 8), align 8
  %lo1 = load ptr, ptr %utf16, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %utf16, i64 8
  %hi3 = load i64, ptr %ptradd2, align 8
  %3 = call i64 @std.core.string.from_utf16(ptr %retparam, i64 %lo, ptr %hi, ptr %lo1, i64 %hi3) #5, !dbg !4504
  %not_err = icmp eq i64 %3, 0, !dbg !4504
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4504
  br i1 %4, label %after_check, label %assign_optional, !dbg !4504

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !4504
  br label %err_retblock, !dbg !4504

after_check:                                      ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4504
  ret i64 0, !dbg !4504

err_retblock:                                     ; preds = %assign_optional
  %5 = load i64, ptr %reterr, align 8, !dbg !4504
  ret i64 %5, !dbg !4504
}

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.dstring.temp_with_capacity(i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.dstring.DString.appendf(ptr, ptr, ptr, i64, ptr, i64) #0

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #1

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.dstring.DString.zstr_view(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.mem.allocator.push_pool() #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @std.core.dstring.DString.copy_str(ptr, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.pop_pool(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @std.core.dstring.DString.str_view(ptr) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #2

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr comdat {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds nuw { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.builtin.panicf(ptr, i64, ptr, i64, ptr, i64, i32, ptr byval(%"any[]") align 8) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.dstring.DString.append_chars(ptr, ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8len_for_utf32(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.string.conv.utf32to8_unsafe(ptr, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8len_for_utf16(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf16to8_unsafe(ptr, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.dstring.join(i64, ptr, ptr, i64, ptr, i64) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf16len_for_utf8(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8to16_unsafe(ptr, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8_codepoints(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8to32_unsafe(ptr, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare double @scalbn(double, i32) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.copysign.f64(double, double) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #3

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { alwaysinline }
attributes #6 = { noreturn }

!llvm.module.flags = !{!48, !49, !50, !51, !52, !53, !54}
!llvm.dbg.cu = !{!55}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "KMAX", linkageName: "std.core.string.KMAX", scope: !2, file: !2, line: 29, type: !3, isLocal: false, isDefinition: true, align: 4)
!2 = !DIFile(filename: "string_to_real.c3", directory: "/usr/lib/c3c/lib/std/core")
!3 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
!5 = distinct !DIGlobalVariable(name: "MASK", linkageName: "std.core.string.MASK", scope: !2, file: !2, line: 30, type: !3, isLocal: false, isDefinition: true, align: 4)
!6 = !DIGlobalVariableExpression(var: !7, expr: !DIExpression())
!7 = distinct !DIGlobalVariable(name: "B1B_DIG", linkageName: "std.core.string.B1B_DIG", scope: !2, file: !2, line: 31, type: !3, isLocal: false, isDefinition: true, align: 4)
!8 = !DIGlobalVariableExpression(var: !9, expr: !DIExpression())
!9 = distinct !DIGlobalVariable(name: "B1B_MAX", linkageName: "std.core.string.B1B_MAX", scope: !2, file: !2, line: 32, type: !10, isLocal: false, isDefinition: true, align: 4)
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 64, align: 32, elements: !12)
!11 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!12 = !{!13}
!13 = !DISubrange(count: 2, lowerBound: 0)
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "SURROGATE_OFFSET", linkageName: "std.core.string.SURROGATE_OFFSET", scope: !16, file: !16, line: 998, type: !11, isLocal: true, isDefinition: true, align: 4)
!16 = !DIFile(filename: "string.c3", directory: "/usr/lib/c3c/lib/std/core")
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "SURROGATE_GENERIC_MASK", linkageName: "std.core.string.SURROGATE_GENERIC_MASK", scope: !16, file: !16, line: 999, type: !11, isLocal: true, isDefinition: true, align: 4)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "SURROGATE_MASK", linkageName: "std.core.string.SURROGATE_MASK", scope: !16, file: !16, line: 1000, type: !11, isLocal: true, isDefinition: true, align: 4)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "SURROGATE_CODEPOINT_MASK", linkageName: "std.core.string.SURROGATE_CODEPOINT_MASK", scope: !16, file: !16, line: 1001, type: !11, isLocal: true, isDefinition: true, align: 4)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(name: "SURROGATE_BITS", linkageName: "std.core.string.SURROGATE_BITS", scope: !16, file: !16, line: 1002, type: !11, isLocal: true, isDefinition: true, align: 4)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "SURROGATE_LOW_VALUE", linkageName: "std.core.string.SURROGATE_LOW_VALUE", scope: !16, file: !16, line: 1003, type: !11, isLocal: true, isDefinition: true, align: 4)
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(name: "SURROGATE_HIGH_VALUE", linkageName: "std.core.string.SURROGATE_HIGH_VALUE", scope: !16, file: !16, line: 1004, type: !11, isLocal: true, isDefinition: true, align: 4)
!29 = !DIGlobalVariableExpression(var: !30, expr: !DIExpression())
!30 = distinct !DIGlobalVariable(name: "BITS", linkageName: "to_double.BITS", scope: !16, file: !16, line: 457, type: !3, isLocal: true, isDefinition: true, align: 4)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "EMIN", linkageName: "to_double.EMIN", scope: !16, file: !16, line: 458, type: !3, isLocal: true, isDefinition: true, align: 4)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "TH", linkageName: "to_double.TH", scope: !16, file: !16, line: 40, type: !10, isLocal: true, isDefinition: true, align: 4)
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "P10S", linkageName: "to_double.P10S", scope: !16, file: !16, line: 43, type: !37, isLocal: true, isDefinition: true, align: 16)
!37 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3, size: 256, align: 32, elements: !38)
!38 = !{!39}
!39 = !DISubrange(count: 8, lowerBound: 0)
!40 = !DIGlobalVariableExpression(var: !41, expr: !DIExpression())
!41 = distinct !DIGlobalVariable(name: "BITS", linkageName: "to_float.BITS", scope: !16, file: !16, line: 454, type: !3, isLocal: true, isDefinition: true, align: 4)
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(name: "EMIN", linkageName: "to_float.EMIN", scope: !16, file: !16, line: 455, type: !3, isLocal: true, isDefinition: true, align: 4)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "TH", linkageName: "to_float.TH", scope: !16, file: !16, line: 40, type: !10, isLocal: true, isDefinition: true, align: 4)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "P10S", linkageName: "to_float.P10S", scope: !16, file: !16, line: 43, type: !37, isLocal: true, isDefinition: true, align: 16)
!48 = !{i32 2, !"Dwarf Version", i32 4}
!49 = !{i32 2, !"Debug Info Version", i32 3}
!50 = !{i32 2, !"wchar_size", i32 4}
!51 = !{i32 4, !"PIE Level", i32 2}
!52 = !{i32 4, !"PIC Level", i32 2}
!53 = !{i32 1, !"uwtable", i32 2}
!54 = !{i32 2, !"frame-pointer", i32 2}
!55 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, globals: !78, splitDebugInlining: false)
!56 = !{!57}
!57 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "SplitterType", scope: !58, file: !16, line: 1006, baseType: !3, size: 32, align: 32, elements: !74)
!58 = !DICompositeType(tag: DW_TAG_structure_type, name: "Splitter", scope: !16, file: !16, line: 1016, size: 384, align: 64, elements: !59, identifier: "std.core.string.Splitter")
!59 = !{!60, !70, !71, !72, !73}
!60 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !58, file: !16, line: 1018, baseType: !61, size: 128, align: 64)
!61 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !62)
!62 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !63, identifier: "char[]")
!63 = !{!64, !67}
!64 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !62, baseType: !65, size: 64, align: 64)
!65 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !66, size: 64, align: 64, dwarfAddressSpace: 0)
!66 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !62, baseType: !68, size: 64, align: 64, offset: 64)
!68 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !69)
!69 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!70 = !DIDerivedType(tag: DW_TAG_member, name: "split", scope: !58, file: !16, line: 1019, baseType: !61, size: 128, align: 64, offset: 128)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !58, file: !16, line: 1020, baseType: !68, size: 64, align: 64, offset: 256)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !58, file: !16, line: 1021, baseType: !57, size: 32, align: 32, offset: 320)
!73 = !DIDerivedType(tag: DW_TAG_member, name: "last_index", scope: !58, file: !16, line: 1022, baseType: !3, size: 32, align: 32, offset: 352)
!74 = !{!75, !76, !77}
!75 = !DIEnumerator(name: "TOKENIZE", value: 0)
!76 = !DIEnumerator(name: "TOKENIZE_ALL", value: 1)
!77 = !DIEnumerator(name: "TOKENIZE_ALL_SKIP_LAST", value: 2)
!78 = !{!0, !4, !6, !8, !14, !17, !19, !21, !23, !25, !27, !29, !31, !33, !35, !40, !42, !44, !46}
!79 = distinct !DISubprogram(name: "replace", linkageName: "std.core.String.replace", scope: !16, file: !16, line: 166, type: !80, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!80 = !DISubroutineType(types: !81)
!81 = !{!61, !61, !82, !61, !61}
!82 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !83, identifier: "Allocator")
!83 = !{!84, !86}
!84 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !82, baseType: !85, size: 64, align: 64)
!85 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!86 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !82, baseType: !87, size: 64, align: 64, offset: 64)
!87 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!88 = !{}
!89 = !DILocalVariable(name: "self", arg: 1, scope: !79, file: !16, line: 166, type: !61)
!90 = !DILocation(line: 166, column: 26, scope: !79)
!91 = !DILocalVariable(name: "allocator", arg: 2, scope: !79, file: !16, line: 166, type: !82)
!92 = !DILocation(line: 166, column: 42, scope: !79)
!93 = !DILocalVariable(name: "needle", arg: 3, scope: !79, file: !16, line: 166, type: !61)
!94 = !DILocation(line: 166, column: 60, scope: !79)
!95 = !DILocalVariable(name: "new_str", arg: 4, scope: !79, file: !16, line: 166, type: !61)
!96 = !DILocation(line: 166, column: 75, scope: !79)
!97 = !DILocalVariable(name: "state", scope: !98, file: !16, line: 594, type: !100, align: 8)
!98 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !99, file: !99, line: 592, scopeLine: 592, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!99 = !DIFile(filename: "mem.c3", directory: "/usr/lib/c3c/lib/std/core")
!100 = !DIDerivedType(tag: DW_TAG_typedef, name: "PoolState", scope: !16, file: !16, line: 402, baseType: !101, align: 8)
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !102, size: 64, align: 64, dwarfAddressSpace: 0)
!102 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !16, file: !16, line: 32, size: 512, align: 64, elements: !103, identifier: "std.core.mem.allocator.TempAllocator")
!103 = !{!104, !105, !117, !118, !120, !121, !122, !123}
!104 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !102, file: !16, line: 34, baseType: !82, size: 128, align: 64)
!105 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !102, file: !16, line: 35, baseType: !106, size: 64, align: 64, offset: 128)
!106 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !107, size: 64, align: 64, dwarfAddressSpace: 0)
!107 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !16, file: !16, line: 52, size: 256, align: 64, elements: !108, identifier: "std.core.mem.allocator.TempAllocatorPage")
!108 = !{!109, !110, !111, !112, !113}
!109 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !107, file: !16, line: 54, baseType: !106, size: 64, align: 64)
!110 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !107, file: !16, line: 55, baseType: !85, size: 64, align: 64, offset: 64)
!111 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !107, file: !16, line: 56, baseType: !68, size: 64, align: 64, offset: 128)
!112 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !107, file: !16, line: 57, baseType: !68, size: 64, align: 64, offset: 192)
!113 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !107, file: !16, line: 58, baseType: !114, align: 8, offset: 256)
!114 = !DICompositeType(tag: DW_TAG_array_type, baseType: !66, align: 8, elements: !115)
!115 = !{!116}
!116 = !DISubrange(count: 0, lowerBound: 0)
!117 = !DIDerivedType(tag: DW_TAG_member, name: "derived", scope: !102, file: !16, line: 36, baseType: !101, size: 64, align: 64, offset: 192)
!118 = !DIDerivedType(tag: DW_TAG_member, name: "allocated", scope: !102, file: !16, line: 37, baseType: !119, size: 8, align: 8, offset: 256)
!119 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !102, file: !16, line: 38, baseType: !68, size: 64, align: 64, offset: 320)
!121 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !102, file: !16, line: 39, baseType: !68, size: 64, align: 64, offset: 384)
!122 = !DIDerivedType(tag: DW_TAG_member, name: "original_capacity", scope: !102, file: !16, line: 40, baseType: !68, size: 64, align: 64, offset: 448)
!123 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !102, file: !16, line: 41, baseType: !114, align: 8, offset: 512)
!124 = !DILocation(line: 594, column: 12, scope: !98, inlinedAt: !125)
!125 = !DILocation(line: 168, column: 2, scope: !79)
!126 = !DILocation(line: 594, column: 20, scope: !98, inlinedAt: !125)
!127 = !DILocalVariable(name: "split", scope: !128, file: !16, line: 170, type: !129, align: 8)
!128 = distinct !DILexicalBlock(scope: !79, file: !16, line: 169, column: 2)
!129 = !DICompositeType(tag: DW_TAG_structure_type, name: "String[]", size: 128, align: 64, elements: !130, identifier: "String[]")
!130 = !{!131, !133}
!131 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !129, baseType: !132, size: 64, align: 64)
!132 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String*", baseType: !61, size: 64, align: 64, dwarfAddressSpace: 0)
!133 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !129, baseType: !68, size: 64, align: 64, offset: 64)
!134 = !DILocation(line: 170, column: 12, scope: !128)
!135 = !DILocation(line: 351, column: 79, scope: !136, inlinedAt: !137)
!136 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !16, file: !16, line: 351, scopeLine: 351, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!137 = !DILocation(line: 170, column: 20, scope: !128)
!138 = !DILocation(line: 171, column: 37, scope: !128)
!139 = !DILocation(line: 171, column: 10, scope: !128)
!140 = !DILocation(line: 171, column: 55, scope: !128)
!141 = !DILocation(line: 597, column: 23, scope: !142, inlinedAt: !125)
!142 = distinct !DILexicalBlock(scope: !98, file: !99, line: 596, column: 2)
!143 = !DILocation(line: 597, column: 3, scope: !142, inlinedAt: !125)
!144 = distinct !DISubprogram(name: "treplace", linkageName: "std.core.String.treplace", scope: !16, file: !16, line: 183, type: !145, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!145 = !DISubroutineType(types: !146)
!146 = !{!61, !61, !61, !61}
!147 = !DILocalVariable(name: "self", arg: 1, scope: !144, file: !16, line: 183, type: !61)
!148 = !DILocation(line: 183, column: 27, scope: !144)
!149 = !DILocalVariable(name: "needle", arg: 2, scope: !144, file: !16, line: 183, type: !61)
!150 = !DILocation(line: 183, column: 40, scope: !144)
!151 = !DILocalVariable(name: "new_str", arg: 3, scope: !144, file: !16, line: 183, type: !61)
!152 = !DILocation(line: 183, column: 55, scope: !144)
!153 = !DILocalVariable(name: "split", scope: !144, file: !16, line: 185, type: !129, align: 8)
!154 = !DILocation(line: 185, column: 11, scope: !144)
!155 = !DILocation(line: 351, column: 79, scope: !156, inlinedAt: !157)
!156 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !16, file: !16, line: 351, scopeLine: 351, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!157 = !DILocation(line: 185, column: 19, scope: !144)
!158 = !DILocation(line: 186, column: 36, scope: !144)
!159 = !DILocation(line: 186, column: 9, scope: !144)
!160 = distinct !DISubprogram(name: "trim", linkageName: "std.core.String.trim", scope: !16, file: !16, line: 198, type: !161, scopeLine: 198, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!161 = !DISubroutineType(types: !162)
!162 = !{!61, !61, !61}
!163 = !DILocalVariable(name: "self", arg: 1, scope: !160, file: !16, line: 198, type: !61)
!164 = !DILocation(line: 198, column: 23, scope: !160)
!165 = !DILocalVariable(name: "to_trim", arg: 2, scope: !160, file: !16, line: 198, type: !61)
!166 = !DILocation(line: 198, column: 36, scope: !160)
!167 = !DILocation(line: 200, column: 27, scope: !160)
!168 = !DILocation(line: 200, column: 12, scope: !160)
!169 = !DILocation(line: 200, column: 47, scope: !160)
!170 = distinct !DISubprogram(name: "trim_left", linkageName: "std.core.String.trim_left", scope: !16, file: !16, line: 211, type: !161, scopeLine: 211, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!171 = !DILocalVariable(name: "self", arg: 1, scope: !170, file: !16, line: 211, type: !61)
!172 = !DILocation(line: 211, column: 28, scope: !170)
!173 = !DILocalVariable(name: "to_trim", arg: 2, scope: !170, file: !16, line: 211, type: !61)
!174 = !DILocation(line: 211, column: 41, scope: !170)
!175 = !DILocalVariable(name: "start", scope: !170, file: !16, line: 213, type: !68, align: 8)
!176 = !DILocation(line: 213, column: 6, scope: !170)
!177 = !DILocation(line: 213, column: 14, scope: !170)
!178 = !DILocalVariable(name: "len", scope: !170, file: !16, line: 214, type: !68, align: 8)
!179 = !DILocation(line: 214, column: 6, scope: !170)
!180 = !DILocation(line: 214, column: 12, scope: !170)
!181 = !DILocation(line: 215, column: 2, scope: !170)
!182 = !DILocation(line: 215, column: 9, scope: !183)
!183 = distinct !DILexicalBlock(scope: !170, file: !16, line: 215, column: 2)
!184 = !DILocation(line: 215, column: 17, scope: !183)
!185 = !DILocation(line: 215, column: 36, scope: !183)
!186 = !DILocation(line: 215, column: 41, scope: !183)
!187 = !DILocation(line: 128, column: 16, scope: !188, inlinedAt: !190)
!188 = distinct !DILexicalBlock(scope: !189, file: !16, line: 128, column: 2)
!189 = distinct !DISubprogram(name: "char_in_set", linkageName: "char_in_set", scope: !16, file: !16, line: 126, scopeLine: 126, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!190 = !DILocation(line: 215, column: 24, scope: !183)
!191 = !DILocalVariable(name: ".temp", scope: !188, file: !16, line: 128, type: !68, align: 8)
!192 = !DILocalVariable(name: "ch", scope: !193, file: !16, line: 128, type: !66, align: 1)
!193 = distinct !DILexicalBlock(scope: !188, file: !16, line: 128, column: 21)
!194 = !DILocation(line: 128, column: 11, scope: !193, inlinedAt: !190)
!195 = !DILocation(line: 128, column: 16, scope: !193, inlinedAt: !190)
!196 = !DILocation(line: 128, column: 25, scope: !193, inlinedAt: !190)
!197 = !DILocation(line: 128, column: 31, scope: !193, inlinedAt: !190)
!198 = !DILocation(line: 128, column: 41, scope: !193, inlinedAt: !190)
!199 = !DILocation(line: 129, column: 9, scope: !189, inlinedAt: !190)
!200 = !DILocation(line: 215, column: 59, scope: !183)
!201 = !DILocation(line: 216, column: 6, scope: !170)
!202 = !DILocation(line: 216, column: 15, scope: !170)
!203 = !DILocation(line: 216, column: 27, scope: !170)
!204 = !DILocation(line: 217, column: 9, scope: !170)
!205 = !DILocation(line: 217, column: 14, scope: !170)
!206 = distinct !DISubprogram(name: "trim_right", linkageName: "std.core.String.trim_right", scope: !16, file: !16, line: 228, type: !161, scopeLine: 228, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!207 = !DILocalVariable(name: "self", arg: 1, scope: !206, file: !16, line: 228, type: !61)
!208 = !DILocation(line: 228, column: 29, scope: !206)
!209 = !DILocalVariable(name: "to_trim", arg: 2, scope: !206, file: !16, line: 228, type: !61)
!210 = !DILocation(line: 228, column: 42, scope: !206)
!211 = !DILocalVariable(name: "len", scope: !206, file: !16, line: 230, type: !68, align: 8)
!212 = !DILocation(line: 230, column: 6, scope: !206)
!213 = !DILocation(line: 230, column: 12, scope: !206)
!214 = !DILocation(line: 231, column: 2, scope: !206)
!215 = !DILocation(line: 231, column: 9, scope: !216)
!216 = distinct !DILexicalBlock(scope: !206, file: !16, line: 231, column: 2)
!217 = !DILocation(line: 231, column: 32, scope: !216)
!218 = !DILocation(line: 231, column: 37, scope: !216)
!219 = !DILocation(line: 128, column: 16, scope: !220, inlinedAt: !222)
!220 = distinct !DILexicalBlock(scope: !221, file: !16, line: 128, column: 2)
!221 = distinct !DISubprogram(name: "char_in_set", linkageName: "char_in_set", scope: !16, file: !16, line: 126, scopeLine: 126, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!222 = !DILocation(line: 231, column: 20, scope: !216)
!223 = !DILocalVariable(name: ".temp", scope: !220, file: !16, line: 128, type: !68, align: 8)
!224 = !DILocalVariable(name: "ch", scope: !225, file: !16, line: 128, type: !66, align: 1)
!225 = distinct !DILexicalBlock(scope: !220, file: !16, line: 128, column: 21)
!226 = !DILocation(line: 128, column: 11, scope: !225, inlinedAt: !222)
!227 = !DILocation(line: 128, column: 16, scope: !225, inlinedAt: !222)
!228 = !DILocation(line: 128, column: 25, scope: !225, inlinedAt: !222)
!229 = !DILocation(line: 128, column: 31, scope: !225, inlinedAt: !222)
!230 = !DILocation(line: 128, column: 41, scope: !225, inlinedAt: !222)
!231 = !DILocation(line: 129, column: 9, scope: !221, inlinedAt: !222)
!232 = !DILocation(line: 231, column: 57, scope: !216)
!233 = !DILocation(line: 232, column: 9, scope: !206)
!234 = !DILocation(line: 232, column: 14, scope: !206)
!235 = !DILocation(line: 232, column: 15, scope: !206)
!236 = distinct !DISubprogram(name: "starts_with", linkageName: "std.core.String.starts_with", scope: !16, file: !16, line: 243, type: !237, scopeLine: 243, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!237 = !DISubroutineType(types: !238)
!238 = !{!119, !61, !61}
!239 = !DILocalVariable(name: "self", arg: 1, scope: !236, file: !16, line: 243, type: !61)
!240 = !DILocation(line: 243, column: 28, scope: !236)
!241 = !DILocalVariable(name: "prefix", arg: 2, scope: !236, file: !16, line: 243, type: !61)
!242 = !DILocation(line: 243, column: 41, scope: !236)
!243 = !DILocation(line: 245, column: 6, scope: !236)
!244 = !DILocation(line: 245, column: 19, scope: !236)
!245 = !DILocation(line: 245, column: 36, scope: !236)
!246 = !DILocation(line: 246, column: 6, scope: !236)
!247 = !DILocation(line: 246, column: 26, scope: !236)
!248 = !DILocation(line: 247, column: 9, scope: !236)
!249 = !DILocation(line: 247, column: 14, scope: !236)
!250 = !DILocation(line: 247, column: 15, scope: !236)
!251 = !DILocation(line: 247, column: 30, scope: !236)
!252 = distinct !DISubprogram(name: "ends_with", linkageName: "std.core.String.ends_with", scope: !16, file: !16, line: 258, type: !237, scopeLine: 258, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!253 = !DILocalVariable(name: "self", arg: 1, scope: !252, file: !16, line: 258, type: !61)
!254 = !DILocation(line: 258, column: 26, scope: !252)
!255 = !DILocalVariable(name: "suffix", arg: 2, scope: !252, file: !16, line: 258, type: !61)
!256 = !DILocation(line: 258, column: 39, scope: !252)
!257 = !DILocation(line: 260, column: 6, scope: !252)
!258 = !DILocation(line: 260, column: 19, scope: !252)
!259 = !DILocation(line: 260, column: 36, scope: !252)
!260 = !DILocation(line: 261, column: 6, scope: !252)
!261 = !DILocation(line: 261, column: 26, scope: !252)
!262 = !DILocation(line: 262, column: 9, scope: !252)
!263 = !DILocation(line: 262, column: 15, scope: !252)
!264 = !DILocation(line: 262, column: 32, scope: !252)
!265 = distinct !DISubprogram(name: "strip", linkageName: "std.core.String.strip", scope: !16, file: !16, line: 273, type: !161, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!266 = !DILocalVariable(name: "self", arg: 1, scope: !265, file: !16, line: 273, type: !61)
!267 = !DILocation(line: 273, column: 24, scope: !265)
!268 = !DILocalVariable(name: "prefix", arg: 2, scope: !265, file: !16, line: 273, type: !61)
!269 = !DILocation(line: 273, column: 37, scope: !265)
!270 = !DILocation(line: 275, column: 6, scope: !265)
!271 = !DILocation(line: 275, column: 39, scope: !265)
!272 = !DILocation(line: 275, column: 22, scope: !265)
!273 = !DILocation(line: 275, column: 55, scope: !265)
!274 = !DILocation(line: 276, column: 9, scope: !265)
!275 = !DILocation(line: 276, column: 14, scope: !265)
!276 = distinct !DISubprogram(name: "strip_end", linkageName: "std.core.String.strip_end", scope: !16, file: !16, line: 287, type: !161, scopeLine: 287, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!277 = !DILocalVariable(name: "self", arg: 1, scope: !276, file: !16, line: 287, type: !61)
!278 = !DILocation(line: 287, column: 28, scope: !276)
!279 = !DILocalVariable(name: "suffix", arg: 2, scope: !276, file: !16, line: 287, type: !61)
!280 = !DILocation(line: 287, column: 41, scope: !276)
!281 = !DILocation(line: 289, column: 6, scope: !276)
!282 = !DILocation(line: 289, column: 37, scope: !276)
!283 = !DILocation(line: 289, column: 22, scope: !276)
!284 = !DILocation(line: 289, column: 53, scope: !276)
!285 = !DILocation(line: 291, column: 9, scope: !276)
!286 = !DILocation(line: 291, column: 14, scope: !276)
!287 = !DILocation(line: 291, column: 16, scope: !276)
!288 = !DILocation(line: 291, column: 27, scope: !276)
!289 = distinct !DISubprogram(name: "split", linkageName: "std.core.String.split", scope: !16, file: !16, line: 306, type: !290, scopeLine: 306, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!290 = !DISubroutineType(types: !291)
!291 = !{!129, !61, !82, !61, !69, !119}
!292 = !DILocalVariable(name: "self", arg: 1, scope: !289, file: !16, line: 306, type: !61)
!293 = !DILocation(line: 306, column: 26, scope: !289)
!294 = !DILocalVariable(name: "allocator", arg: 2, scope: !289, file: !16, line: 306, type: !82)
!295 = !DILocation(line: 306, column: 42, scope: !289)
!296 = !DILocalVariable(name: "delimiter", arg: 3, scope: !289, file: !16, line: 306, type: !61)
!297 = !DILocation(line: 306, column: 60, scope: !289)
!298 = !DILocalVariable(name: "max", arg: 4, scope: !289, file: !16, line: 306, type: !68)
!299 = !DILocation(line: 306, column: 75, scope: !289)
!300 = !DILocalVariable(name: "skip_empty", arg: 5, scope: !289, file: !16, line: 306, type: !119)
!301 = !DILocation(line: 306, column: 89, scope: !289)
!302 = !DILocation(line: 303, column: 11, scope: !303)
!303 = distinct !DILexicalBlock(scope: !289, file: !16, line: 307, column: 1)
!304 = !DILocalVariable(name: "capacity", scope: !289, file: !16, line: 308, type: !68, align: 8)
!305 = !DILocation(line: 308, column: 6, scope: !289)
!306 = !DILocation(line: 308, column: 17, scope: !289)
!307 = !DILocalVariable(name: "i", scope: !289, file: !16, line: 309, type: !68, align: 8)
!308 = !DILocation(line: 309, column: 6, scope: !289)
!309 = !DILocation(line: 309, column: 10, scope: !289)
!310 = !DILocalVariable(name: "holder", scope: !289, file: !16, line: 310, type: !132, align: 8)
!311 = !DILocation(line: 310, column: 10, scope: !289)
!312 = !DILocation(line: 303, column: 55, scope: !313, inlinedAt: !315)
!313 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !314, file: !314, line: 301, scopeLine: 301, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!314 = !DIFile(filename: "mem_allocator.c3", directory: "/usr/lib/c3c/lib/std/core")
!315 = !DILocation(line: 286, column: 9, scope: !316, inlinedAt: !317)
!316 = distinct !DISubprogram(name: "alloc_array", linkageName: "alloc_array", scope: !314, file: !314, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!317 = !DILocation(line: 310, column: 19, scope: !289)
!318 = !DILocation(line: 303, column: 40, scope: !313, inlinedAt: !315)
!319 = !DILocation(line: 79, column: 6, scope: !320, inlinedAt: !321)
!320 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !314, file: !314, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!321 = !DILocation(line: 303, column: 18, scope: !313, inlinedAt: !315)
!322 = !DILocation(line: 79, column: 20, scope: !320, inlinedAt: !321)
!323 = !DILocation(line: 85, column: 28, scope: !320, inlinedAt: !321)
!324 = !DILocation(line: 37, column: 12, scope: !320, inlinedAt: !321)
!325 = !DILocation(line: 973, column: 9, scope: !326, inlinedAt: !328)
!326 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !327, file: !327, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!327 = !DIFile(filename: "math.c3", directory: "/usr/lib/c3c/lib/std/math")
!328 = !DILocation(line: 37, column: 26, scope: !320, inlinedAt: !321)
!329 = !DILocation(line: 973, column: 20, scope: !326, inlinedAt: !328)
!330 = !DILocation(line: 973, column: 25, scope: !326, inlinedAt: !328)
!331 = !DILocation(line: 85, column: 10, scope: !320, inlinedAt: !321)
!332 = !DILocation(line: 303, column: 67, scope: !313, inlinedAt: !315)
!333 = !DILocation(line: 303, column: 10, scope: !313, inlinedAt: !315)
!334 = !DILocalVariable(name: "no_more", scope: !289, file: !16, line: 311, type: !119, align: 1)
!335 = !DILocation(line: 311, column: 7, scope: !289)
!336 = !DILocation(line: 311, column: 17, scope: !289)
!337 = !DILocation(line: 312, column: 2, scope: !289)
!338 = !DILocation(line: 312, column: 10, scope: !339)
!339 = distinct !DILexicalBlock(scope: !289, file: !16, line: 312, column: 2)
!340 = !DILocalVariable(name: "index", scope: !341, file: !16, line: 314, type: !69, align: 8)
!341 = distinct !DILexicalBlock(scope: !339, file: !16, line: 313, column: 2)
!342 = !DILocation(line: 314, column: 8, scope: !341)
!343 = !DILocation(line: 314, column: 16, scope: !341)
!344 = !DILocation(line: 314, column: 21, scope: !341)
!345 = !DILocation(line: 314, column: 31, scope: !341)
!346 = !DILocation(line: 314, column: 44, scope: !341)
!347 = !DILocation(line: 314, column: 58, scope: !341)
!348 = !DILocation(line: 533, column: 11, scope: !341)
!349 = !DILocalVariable(name: "res", scope: !341, file: !16, line: 315, type: !61, align: 8)
!350 = !DILocation(line: 315, column: 10, scope: !341)
!351 = !DILocation(line: 316, column: 7, scope: !341)
!352 = !DILocation(line: 318, column: 10, scope: !353)
!353 = distinct !DILexicalBlock(scope: !341, file: !16, line: 317, column: 3)
!354 = !DILocation(line: 318, column: 15, scope: !353)
!355 = !DILocation(line: 318, column: 16, scope: !353)
!356 = !DILocation(line: 319, column: 11, scope: !353)
!357 = !DILocation(line: 319, column: 16, scope: !353)
!358 = !DILocation(line: 319, column: 24, scope: !353)
!359 = !DILocation(line: 323, column: 10, scope: !360)
!360 = distinct !DILexicalBlock(scope: !341, file: !16, line: 322, column: 3)
!361 = !DILocation(line: 324, column: 14, scope: !360)
!362 = !DILocation(line: 326, column: 7, scope: !341)
!363 = !DILocation(line: 326, column: 19, scope: !341)
!364 = !DILocation(line: 328, column: 10, scope: !365)
!365 = distinct !DILexicalBlock(scope: !341, file: !16, line: 327, column: 9)
!366 = !DILocation(line: 331, column: 7, scope: !341)
!367 = !DILocation(line: 331, column: 12, scope: !341)
!368 = !DILocation(line: 333, column: 4, scope: !369)
!369 = distinct !DILexicalBlock(scope: !341, file: !16, line: 332, column: 3)
!370 = !DILocation(line: 334, column: 43, scope: !369)
!371 = !DILocation(line: 334, column: 67, scope: !369)
!372 = !DILocation(line: 334, column: 51, scope: !369)
!373 = !DILocation(line: 107, column: 6, scope: !374, inlinedAt: !375)
!374 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !314, file: !314, line: 105, scopeLine: 105, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!375 = !DILocation(line: 102, column: 9, scope: !376, inlinedAt: !377)
!376 = distinct !DISubprogram(name: "realloc", linkageName: "realloc", scope: !314, file: !314, line: 100, scopeLine: 100, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!377 = !DILocation(line: 334, column: 13, scope: !369)
!378 = !DILocation(line: 118, column: 6, scope: !379, inlinedAt: !380)
!379 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !314, file: !314, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!380 = !DILocation(line: 109, column: 3, scope: !381, inlinedAt: !375)
!381 = distinct !DILexicalBlock(scope: !374, file: !314, line: 108, column: 2)
!382 = !DILocation(line: 118, column: 18, scope: !379, inlinedAt: !380)
!383 = !DILocation(line: 122, column: 20, scope: !379, inlinedAt: !380)
!384 = !DILocation(line: 122, column: 2, scope: !379, inlinedAt: !380)
!385 = !DILocation(line: 110, column: 10, scope: !381, inlinedAt: !375)
!386 = !DILocation(line: 112, column: 6, scope: !374, inlinedAt: !375)
!387 = !DILocation(line: 112, column: 37, scope: !374, inlinedAt: !375)
!388 = !DILocation(line: 37, column: 12, scope: !374, inlinedAt: !375)
!389 = !DILocation(line: 973, column: 9, scope: !390, inlinedAt: !391)
!390 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !327, file: !327, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!391 = !DILocation(line: 37, column: 26, scope: !374, inlinedAt: !375)
!392 = !DILocation(line: 973, column: 20, scope: !390, inlinedAt: !391)
!393 = !DILocation(line: 973, column: 25, scope: !390, inlinedAt: !391)
!394 = !DILocation(line: 112, column: 19, scope: !374, inlinedAt: !375)
!395 = !DILocation(line: 113, column: 26, scope: !374, inlinedAt: !375)
!396 = !DILocation(line: 113, column: 31, scope: !374, inlinedAt: !375)
!397 = !DILocation(line: 47, column: 12, scope: !374, inlinedAt: !375)
!398 = !DILocation(line: 973, column: 9, scope: !399, inlinedAt: !400)
!399 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !327, file: !327, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!400 = !DILocation(line: 47, column: 26, scope: !374, inlinedAt: !375)
!401 = !DILocation(line: 973, column: 20, scope: !399, inlinedAt: !400)
!402 = !DILocation(line: 973, column: 25, scope: !399, inlinedAt: !400)
!403 = !DILocation(line: 113, column: 9, scope: !374, inlinedAt: !375)
!404 = !DILocation(line: 336, column: 3, scope: !341)
!405 = !DILocation(line: 336, column: 10, scope: !341)
!406 = !DILocation(line: 336, column: 17, scope: !341)
!407 = !DILocation(line: 338, column: 9, scope: !289)
!408 = !DILocation(line: 338, column: 17, scope: !289)
!409 = !DILocation(line: 304, column: 10, scope: !289)
!410 = !DILocation(line: 304, column: 28, scope: !289)
!411 = distinct !DISubprogram(name: "tsplit", linkageName: "std.core.String.tsplit", scope: !16, file: !16, line: 351, type: !412, scopeLine: 351, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!412 = !DISubroutineType(types: !413)
!413 = !{!129, !61, !61, !69, !119}
!414 = !DILocalVariable(name: "s", arg: 1, scope: !411, file: !16, line: 351, type: !61)
!415 = !DILocation(line: 351, column: 27, scope: !411)
!416 = !DILocalVariable(name: "delimiter", arg: 2, scope: !411, file: !16, line: 351, type: !61)
!417 = !DILocation(line: 351, column: 37, scope: !411)
!418 = !DILocalVariable(name: "max", arg: 3, scope: !411, file: !16, line: 351, type: !68)
!419 = !DILocation(line: 351, column: 52, scope: !411)
!420 = !DILocalVariable(name: "skip_empty", arg: 4, scope: !411, file: !16, line: 351, type: !119)
!421 = !DILocation(line: 351, column: 66, scope: !411)
!422 = !DILocation(line: 351, column: 89, scope: !411)
!423 = !DILocation(line: 351, column: 97, scope: !411)
!424 = !DILocation(line: 351, column: 103, scope: !411)
!425 = !DILocation(line: 351, column: 114, scope: !411)
!426 = !DILocation(line: 351, column: 119, scope: !411)
!427 = !DILocation(line: 303, column: 11, scope: !411)
!428 = distinct !DISubprogram(name: "split_to_buffer", linkageName: "std.core.String.split_to_buffer", scope: !16, file: !16, line: 366, type: !429, scopeLine: 366, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!429 = !DISubroutineType(types: !430)
!430 = !{!431, !433, !61, !61, !129, !69, !119}
!431 = !DIDerivedType(tag: DW_TAG_typedef, name: "fault", baseType: !432)
!432 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!433 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String[]*", baseType: !129, size: 64, align: 64, dwarfAddressSpace: 0)
!434 = !DILocalVariable(name: "s", arg: 1, scope: !428, file: !16, line: 366, type: !61)
!435 = !DILocation(line: 366, column: 37, scope: !428)
!436 = !DILocalVariable(name: "delimiter", arg: 2, scope: !428, file: !16, line: 366, type: !61)
!437 = !DILocation(line: 366, column: 47, scope: !428)
!438 = !DILocalVariable(name: "buffer", arg: 3, scope: !428, file: !16, line: 366, type: !129)
!439 = !DILocation(line: 366, column: 67, scope: !428)
!440 = !DILocalVariable(name: "max", arg: 4, scope: !428, file: !16, line: 366, type: !68)
!441 = !DILocation(line: 366, column: 79, scope: !428)
!442 = !DILocalVariable(name: "skip_empty", arg: 5, scope: !428, file: !16, line: 366, type: !119)
!443 = !DILocation(line: 366, column: 93, scope: !428)
!444 = !DILocation(line: 362, column: 11, scope: !445)
!445 = distinct !DILexicalBlock(scope: !428, file: !16, line: 367, column: 1)
!446 = !DILocalVariable(name: "max_capacity", scope: !428, file: !16, line: 368, type: !68, align: 8)
!447 = !DILocation(line: 368, column: 6, scope: !428)
!448 = !DILocation(line: 368, column: 21, scope: !428)
!449 = !DILocalVariable(name: "i", scope: !428, file: !16, line: 369, type: !68, align: 8)
!450 = !DILocation(line: 369, column: 6, scope: !428)
!451 = !DILocation(line: 369, column: 10, scope: !428)
!452 = !DILocalVariable(name: "no_more", scope: !428, file: !16, line: 370, type: !119, align: 1)
!453 = !DILocation(line: 370, column: 7, scope: !428)
!454 = !DILocation(line: 370, column: 17, scope: !428)
!455 = !DILocation(line: 371, column: 2, scope: !428)
!456 = !DILocation(line: 371, column: 10, scope: !457)
!457 = distinct !DILexicalBlock(scope: !428, file: !16, line: 371, column: 2)
!458 = !DILocalVariable(name: "index", scope: !459, file: !16, line: 373, type: !69, align: 8)
!459 = distinct !DILexicalBlock(scope: !457, file: !16, line: 372, column: 2)
!460 = !DILocation(line: 373, column: 8, scope: !459)
!461 = !DILocation(line: 373, column: 16, scope: !459)
!462 = !DILocation(line: 373, column: 21, scope: !459)
!463 = !DILocation(line: 373, column: 31, scope: !459)
!464 = !DILocation(line: 373, column: 44, scope: !459)
!465 = !DILocation(line: 373, column: 55, scope: !459)
!466 = !DILocation(line: 533, column: 11, scope: !459)
!467 = !DILocalVariable(name: "res", scope: !459, file: !16, line: 374, type: !61, align: 8)
!468 = !DILocation(line: 374, column: 10, scope: !459)
!469 = !DILocation(line: 375, column: 7, scope: !459)
!470 = !DILocation(line: 377, column: 10, scope: !471)
!471 = distinct !DILexicalBlock(scope: !459, file: !16, line: 376, column: 3)
!472 = !DILocation(line: 377, column: 12, scope: !471)
!473 = !DILocation(line: 377, column: 13, scope: !471)
!474 = !DILocation(line: 378, column: 8, scope: !471)
!475 = !DILocation(line: 378, column: 10, scope: !471)
!476 = !DILocation(line: 378, column: 18, scope: !471)
!477 = !DILocation(line: 382, column: 10, scope: !478)
!478 = distinct !DILexicalBlock(scope: !459, file: !16, line: 381, column: 3)
!479 = !DILocation(line: 383, column: 14, scope: !478)
!480 = !DILocation(line: 385, column: 7, scope: !459)
!481 = !DILocation(line: 385, column: 19, scope: !459)
!482 = !DILocation(line: 387, column: 4, scope: !483)
!483 = distinct !DILexicalBlock(scope: !459, file: !16, line: 386, column: 3)
!484 = !DILocation(line: 389, column: 7, scope: !459)
!485 = !DILocation(line: 389, column: 12, scope: !459)
!486 = !DILocation(line: 391, column: 11, scope: !487)
!487 = distinct !DILexicalBlock(scope: !459, file: !16, line: 390, column: 3)
!488 = !DILocation(line: 393, column: 3, scope: !459)
!489 = !DILocation(line: 393, column: 10, scope: !459)
!490 = !DILocation(line: 393, column: 17, scope: !459)
!491 = !DILocation(line: 395, column: 9, scope: !428)
!492 = !DILocation(line: 395, column: 16, scope: !428)
!493 = !DILocation(line: 395, column: 17, scope: !428)
!494 = !DILocation(line: 363, column: 10, scope: !428)
!495 = !DILocation(line: 363, column: 28, scope: !428)
!496 = distinct !DISubprogram(name: "contains", linkageName: "std.core.String.contains", scope: !16, file: !16, line: 406, type: !237, scopeLine: 406, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!497 = !DILocalVariable(name: "s", arg: 1, scope: !496, file: !16, line: 406, type: !61)
!498 = !DILocation(line: 406, column: 25, scope: !496)
!499 = !DILocalVariable(name: "substr", arg: 2, scope: !496, file: !16, line: 406, type: !61)
!500 = !DILocation(line: 406, column: 35, scope: !496)
!501 = !DILocation(line: 408, column: 13, scope: !502, inlinedAt: !504)
!502 = distinct !DISubprogram(name: "@ok", linkageName: "@ok", scope: !503, file: !503, line: 404, scopeLine: 404, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!503 = !DIFile(filename: "builtin.c3", directory: "/usr/lib/c3c/lib/std/core")
!504 = !DILocation(line: 408, column: 9, scope: !496)
!505 = !DILocation(line: 408, column: 24, scope: !502, inlinedAt: !504)
!506 = !DILocation(line: 533, column: 11, scope: !502, inlinedAt: !504)
!507 = !DILocation(line: 406, column: 12, scope: !502, inlinedAt: !504)
!508 = !DILocation(line: 406, column: 26, scope: !502, inlinedAt: !504)
!509 = !DILocation(line: 407, column: 9, scope: !502, inlinedAt: !504)
!510 = distinct !DISubprogram(name: "count", linkageName: "std.core.String.count", scope: !16, file: !16, line: 421, type: !511, scopeLine: 421, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!511 = !DISubroutineType(types: !512)
!512 = !{!68, !61, !61}
!513 = !DILocalVariable(name: "self", arg: 1, scope: !510, file: !16, line: 421, type: !61)
!514 = !DILocation(line: 421, column: 21, scope: !510)
!515 = !DILocalVariable(name: "substr", arg: 2, scope: !510, file: !16, line: 421, type: !61)
!516 = !DILocation(line: 421, column: 34, scope: !510)
!517 = !DILocalVariable(name: "count", scope: !510, file: !16, line: 423, type: !68, align: 8)
!518 = !DILocation(line: 423, column: 6, scope: !510)
!519 = !DILocation(line: 423, column: 14, scope: !510)
!520 = !DILocalVariable(name: "needed", scope: !510, file: !16, line: 424, type: !68, align: 8)
!521 = !DILocation(line: 424, column: 6, scope: !510)
!522 = !DILocation(line: 424, column: 15, scope: !510)
!523 = !DILocation(line: 425, column: 6, scope: !510)
!524 = !DILocation(line: 425, column: 26, scope: !510)
!525 = !DILocalVariable(name: "first", scope: !510, file: !16, line: 426, type: !66, align: 1)
!526 = !DILocation(line: 426, column: 10, scope: !510)
!527 = !DILocation(line: 426, column: 18, scope: !510)
!528 = !DILocation(line: 426, column: 25, scope: !510)
!529 = !DILocation(line: 427, column: 5, scope: !510)
!530 = !DILocation(line: 427, column: 19, scope: !531)
!531 = distinct !DILexicalBlock(scope: !510, file: !16, line: 427, column: 5)
!532 = !DILocation(line: 427, column: 31, scope: !531)
!533 = !DILocation(line: 429, column: 21, scope: !534)
!534 = distinct !DILexicalBlock(scope: !535, file: !16, line: 429, column: 6)
!535 = distinct !DILexicalBlock(scope: !531, file: !16, line: 428, column: 5)
!536 = !DILocation(line: 429, column: 26, scope: !534)
!537 = !DILocation(line: 429, column: 29, scope: !534)
!538 = !DILocalVariable(name: ".temp", scope: !534, file: !16, line: 429, type: !68, align: 8)
!539 = !DILocation(line: 429, column: 15, scope: !534)
!540 = !DILocalVariable(name: "i", scope: !541, file: !16, line: 429, type: !68, align: 8)
!541 = distinct !DILexicalBlock(scope: !534, file: !16, line: 430, column: 6)
!542 = !DILocation(line: 429, column: 15, scope: !541)
!543 = !DILocalVariable(name: "c", scope: !541, file: !16, line: 429, type: !66, align: 1)
!544 = !DILocation(line: 429, column: 18, scope: !541)
!545 = !DILocation(line: 429, column: 21, scope: !541)
!546 = !DILocation(line: 431, column: 11, scope: !547)
!547 = distinct !DILexicalBlock(scope: !541, file: !16, line: 430, column: 6)
!548 = !DILocation(line: 431, column: 16, scope: !547)
!549 = !DILocation(line: 431, column: 25, scope: !547)
!550 = !DILocation(line: 431, column: 30, scope: !547)
!551 = !DILocation(line: 431, column: 34, scope: !547)
!552 = !DILocation(line: 431, column: 45, scope: !547)
!553 = !DILocation(line: 433, column: 11, scope: !554)
!554 = distinct !DILexicalBlock(scope: !547, file: !16, line: 432, column: 7)
!555 = !DILocation(line: 434, column: 18, scope: !554)
!556 = !DILocation(line: 434, column: 23, scope: !554)
!557 = !DILocation(line: 434, column: 27, scope: !554)
!558 = !DILocation(line: 435, column: 11, scope: !554)
!559 = !DILocation(line: 438, column: 6, scope: !535)
!560 = !DILocation(line: 440, column: 12, scope: !510)
!561 = distinct !DISubprogram(name: "index_of_char", linkageName: "std.core.String.index_of_char", scope: !16, file: !16, line: 453, type: !562, scopeLine: 453, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!562 = !DISubroutineType(types: !563)
!563 = !{!431, !564, !61, !66}
!564 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !68, size: 64, align: 64, dwarfAddressSpace: 0)
!565 = !DILocalVariable(name: "self", arg: 1, scope: !561, file: !16, line: 453, type: !61)
!566 = !DILocation(line: 453, column: 30, scope: !561)
!567 = !DILocalVariable(name: "character", arg: 2, scope: !561, file: !16, line: 453, type: !66)
!568 = !DILocation(line: 453, column: 41, scope: !561)
!569 = !DILocation(line: 455, column: 18, scope: !570)
!570 = distinct !DILexicalBlock(scope: !561, file: !16, line: 455, column: 2)
!571 = !DILocalVariable(name: ".temp", scope: !570, file: !16, line: 455, type: !68, align: 8)
!572 = !DILocation(line: 455, column: 11, scope: !570)
!573 = !DILocalVariable(name: "i", scope: !574, file: !16, line: 455, type: !68, align: 8)
!574 = distinct !DILexicalBlock(scope: !570, file: !16, line: 456, column: 2)
!575 = !DILocation(line: 455, column: 11, scope: !574)
!576 = !DILocalVariable(name: "c", scope: !574, file: !16, line: 455, type: !66, align: 1)
!577 = !DILocation(line: 455, column: 14, scope: !574)
!578 = !DILocation(line: 455, column: 18, scope: !574)
!579 = !DILocation(line: 457, column: 7, scope: !580)
!580 = distinct !DILexicalBlock(scope: !574, file: !16, line: 456, column: 2)
!581 = !DILocation(line: 457, column: 12, scope: !580)
!582 = !DILocation(line: 457, column: 30, scope: !580)
!583 = !DILocation(line: 449, column: 10, scope: !580)
!584 = !DILocation(line: 449, column: 19, scope: !580)
!585 = !DILocation(line: 459, column: 9, scope: !561)
!586 = distinct !DISubprogram(name: "index_of_chars", linkageName: "std.core.String.index_of_chars", scope: !16, file: !16, line: 472, type: !587, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!587 = !DISubroutineType(types: !588)
!588 = !{!431, !564, !61, !62}
!589 = !DILocalVariable(name: "self", arg: 1, scope: !586, file: !16, line: 472, type: !61)
!590 = !DILocation(line: 472, column: 38, scope: !586)
!591 = !DILocalVariable(name: "characters", arg: 2, scope: !586, file: !16, line: 472, type: !62)
!592 = !DILocation(line: 472, column: 51, scope: !586)
!593 = !DILocation(line: 474, column: 21, scope: !594)
!594 = distinct !DILexicalBlock(scope: !586, file: !16, line: 474, column: 5)
!595 = !DILocalVariable(name: ".temp", scope: !594, file: !16, line: 474, type: !68, align: 8)
!596 = !DILocation(line: 474, column: 14, scope: !594)
!597 = !DILocalVariable(name: "i", scope: !598, file: !16, line: 474, type: !68, align: 8)
!598 = distinct !DILexicalBlock(scope: !594, file: !16, line: 475, column: 5)
!599 = !DILocation(line: 474, column: 14, scope: !598)
!600 = !DILocalVariable(name: "c", scope: !598, file: !16, line: 474, type: !66, align: 1)
!601 = !DILocation(line: 474, column: 17, scope: !598)
!602 = !DILocation(line: 474, column: 21, scope: !598)
!603 = !DILocation(line: 476, column: 27, scope: !604)
!604 = distinct !DILexicalBlock(scope: !605, file: !16, line: 476, column: 9)
!605 = distinct !DILexicalBlock(scope: !598, file: !16, line: 475, column: 5)
!606 = !DILocalVariable(name: ".temp", scope: !604, file: !16, line: 476, type: !68, align: 8)
!607 = !DILocation(line: 476, column: 18, scope: !604)
!608 = !DILocalVariable(name: "j", scope: !609, file: !16, line: 476, type: !68, align: 8)
!609 = distinct !DILexicalBlock(scope: !604, file: !16, line: 477, column: 9)
!610 = !DILocation(line: 476, column: 18, scope: !609)
!611 = !DILocalVariable(name: "pin", scope: !609, file: !16, line: 476, type: !66, align: 1)
!612 = !DILocation(line: 476, column: 21, scope: !609)
!613 = !DILocation(line: 476, column: 27, scope: !609)
!614 = !DILocation(line: 478, column: 17, scope: !615)
!615 = distinct !DILexicalBlock(scope: !609, file: !16, line: 477, column: 9)
!616 = !DILocation(line: 478, column: 22, scope: !615)
!617 = !DILocation(line: 478, column: 34, scope: !615)
!618 = !DILocation(line: 468, column: 10, scope: !615)
!619 = !DILocation(line: 468, column: 19, scope: !615)
!620 = !DILocation(line: 482, column: 12, scope: !586)
!621 = distinct !DISubprogram(name: "index_of_char_from", linkageName: "std.core.String.index_of_char_from", scope: !16, file: !16, line: 496, type: !622, scopeLine: 496, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!622 = !DISubroutineType(types: !623)
!623 = !{!431, !564, !61, !66, !69}
!624 = !DILocalVariable(name: "self", arg: 1, scope: !621, file: !16, line: 496, type: !61)
!625 = !DILocation(line: 496, column: 35, scope: !621)
!626 = !DILocalVariable(name: "character", arg: 2, scope: !621, file: !16, line: 496, type: !66)
!627 = !DILocation(line: 496, column: 46, scope: !621)
!628 = !DILocalVariable(name: "start_index", arg: 3, scope: !621, file: !16, line: 496, type: !68)
!629 = !DILocation(line: 496, column: 61, scope: !621)
!630 = !DILocalVariable(name: "len", scope: !621, file: !16, line: 498, type: !68, align: 8)
!631 = !DILocation(line: 498, column: 6, scope: !621)
!632 = !DILocation(line: 498, column: 12, scope: !621)
!633 = !DILocation(line: 499, column: 6, scope: !621)
!634 = !DILocation(line: 499, column: 13, scope: !621)
!635 = !DILocation(line: 499, column: 33, scope: !621)
!636 = !DILocalVariable(name: "i", scope: !637, file: !16, line: 500, type: !68, align: 8)
!637 = distinct !DILexicalBlock(scope: !621, file: !16, line: 500, column: 2)
!638 = !DILocation(line: 500, column: 11, scope: !637)
!639 = !DILocation(line: 500, column: 15, scope: !637)
!640 = !DILocation(line: 500, column: 28, scope: !637)
!641 = !DILocation(line: 500, column: 32, scope: !637)
!642 = !DILocation(line: 502, column: 7, scope: !643)
!643 = distinct !DILexicalBlock(scope: !637, file: !16, line: 501, column: 2)
!644 = !DILocation(line: 502, column: 12, scope: !643)
!645 = !DILocation(line: 502, column: 18, scope: !643)
!646 = !DILocation(line: 502, column: 36, scope: !643)
!647 = !DILocation(line: 492, column: 10, scope: !643)
!648 = !DILocation(line: 492, column: 19, scope: !643)
!649 = !DILocation(line: 500, column: 37, scope: !637)
!650 = !DILocation(line: 504, column: 9, scope: !621)
!651 = distinct !DISubprogram(name: "rindex_of_char", linkageName: "std.core.String.rindex_of_char", scope: !16, file: !16, line: 517, type: !562, scopeLine: 517, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!652 = !DILocalVariable(name: "self", arg: 1, scope: !651, file: !16, line: 517, type: !61)
!653 = !DILocation(line: 517, column: 31, scope: !651)
!654 = !DILocalVariable(name: "character", arg: 2, scope: !651, file: !16, line: 517, type: !66)
!655 = !DILocation(line: 517, column: 42, scope: !651)
!656 = !DILocalVariable(name: ".temp", scope: !657, file: !16, line: 519, type: !68, align: 8)
!657 = distinct !DILexicalBlock(scope: !651, file: !16, line: 519, column: 2)
!658 = !DILocation(line: 519, column: 13, scope: !657)
!659 = !DILocation(line: 519, column: 20, scope: !657)
!660 = !DILocalVariable(name: "i", scope: !661, file: !16, line: 519, type: !68, align: 8)
!661 = distinct !DILexicalBlock(scope: !657, file: !16, line: 520, column: 2)
!662 = !DILocation(line: 519, column: 13, scope: !661)
!663 = !DILocalVariable(name: "c", scope: !661, file: !16, line: 519, type: !66, align: 1)
!664 = !DILocation(line: 519, column: 16, scope: !661)
!665 = !DILocation(line: 519, column: 20, scope: !661)
!666 = !DILocation(line: 521, column: 7, scope: !667)
!667 = distinct !DILexicalBlock(scope: !661, file: !16, line: 520, column: 2)
!668 = !DILocation(line: 521, column: 12, scope: !667)
!669 = !DILocation(line: 521, column: 30, scope: !667)
!670 = !DILocation(line: 513, column: 10, scope: !667)
!671 = !DILocation(line: 513, column: 19, scope: !667)
!672 = !DILocation(line: 523, column: 9, scope: !651)
!673 = distinct !DISubprogram(name: "index_of", linkageName: "std.core.String.index_of", scope: !16, file: !16, line: 537, type: !674, scopeLine: 537, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!674 = !DISubroutineType(types: !675)
!675 = !{!431, !564, !61, !61}
!676 = !DILocalVariable(name: "self", arg: 1, scope: !673, file: !16, line: 537, type: !61)
!677 = !DILocation(line: 537, column: 25, scope: !673)
!678 = !DILocalVariable(name: "substr", arg: 2, scope: !673, file: !16, line: 537, type: !61)
!679 = !DILocation(line: 537, column: 38, scope: !673)
!680 = !DILocation(line: 533, column: 11, scope: !681)
!681 = distinct !DILexicalBlock(scope: !673, file: !16, line: 538, column: 1)
!682 = !DILocalVariable(name: "needed", scope: !673, file: !16, line: 539, type: !68, align: 8)
!683 = !DILocation(line: 539, column: 6, scope: !673)
!684 = !DILocation(line: 539, column: 15, scope: !673)
!685 = !DILocation(line: 540, column: 6, scope: !673)
!686 = !DILocation(line: 540, column: 20, scope: !673)
!687 = !DILocation(line: 540, column: 32, scope: !673)
!688 = !DILocalVariable(name: "first", scope: !689, file: !16, line: 542, type: !66, align: 1)
!689 = distinct !DILexicalBlock(scope: !673, file: !16, line: 541, column: 2)
!690 = !DILocation(line: 542, column: 8, scope: !689)
!691 = !DILocation(line: 542, column: 16, scope: !689)
!692 = !DILocation(line: 542, column: 23, scope: !689)
!693 = !DILocation(line: 543, column: 18, scope: !694)
!694 = distinct !DILexicalBlock(scope: !689, file: !16, line: 543, column: 3)
!695 = !DILocation(line: 543, column: 23, scope: !694)
!696 = !DILocation(line: 543, column: 26, scope: !694)
!697 = !DILocalVariable(name: ".temp", scope: !694, file: !16, line: 543, type: !68, align: 8)
!698 = !DILocation(line: 543, column: 12, scope: !694)
!699 = !DILocalVariable(name: "i", scope: !700, file: !16, line: 543, type: !68, align: 8)
!700 = distinct !DILexicalBlock(scope: !694, file: !16, line: 544, column: 3)
!701 = !DILocation(line: 543, column: 12, scope: !700)
!702 = !DILocalVariable(name: "c", scope: !700, file: !16, line: 543, type: !66, align: 1)
!703 = !DILocation(line: 543, column: 15, scope: !700)
!704 = !DILocation(line: 543, column: 18, scope: !700)
!705 = !DILocation(line: 545, column: 8, scope: !706)
!706 = distinct !DILexicalBlock(scope: !700, file: !16, line: 544, column: 3)
!707 = !DILocation(line: 545, column: 13, scope: !706)
!708 = !DILocation(line: 545, column: 22, scope: !706)
!709 = !DILocation(line: 545, column: 27, scope: !706)
!710 = !DILocation(line: 545, column: 31, scope: !706)
!711 = !DILocation(line: 545, column: 42, scope: !706)
!712 = !DILocation(line: 545, column: 57, scope: !706)
!713 = !DILocation(line: 532, column: 10, scope: !706)
!714 = !DILocation(line: 532, column: 19, scope: !706)
!715 = !DILocation(line: 548, column: 9, scope: !673)
!716 = distinct !DISubprogram(name: "rindex_of", linkageName: "std.core.String.rindex_of", scope: !16, file: !16, line: 562, type: !674, scopeLine: 562, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!717 = !DILocalVariable(name: "self", arg: 1, scope: !716, file: !16, line: 562, type: !61)
!718 = !DILocation(line: 562, column: 26, scope: !716)
!719 = !DILocalVariable(name: "substr", arg: 2, scope: !716, file: !16, line: 562, type: !61)
!720 = !DILocation(line: 562, column: 39, scope: !716)
!721 = !DILocation(line: 558, column: 11, scope: !722)
!722 = distinct !DILexicalBlock(scope: !716, file: !16, line: 563, column: 1)
!723 = !DILocalVariable(name: "needed", scope: !716, file: !16, line: 564, type: !68, align: 8)
!724 = !DILocation(line: 564, column: 6, scope: !716)
!725 = !DILocation(line: 564, column: 15, scope: !716)
!726 = !DILocation(line: 565, column: 6, scope: !716)
!727 = !DILocation(line: 565, column: 20, scope: !716)
!728 = !DILocation(line: 565, column: 32, scope: !716)
!729 = !DILocalVariable(name: "first", scope: !730, file: !16, line: 567, type: !66, align: 1)
!730 = distinct !DILexicalBlock(scope: !716, file: !16, line: 566, column: 2)
!731 = !DILocation(line: 567, column: 8, scope: !730)
!732 = !DILocation(line: 567, column: 16, scope: !730)
!733 = !DILocation(line: 567, column: 23, scope: !730)
!734 = !DILocation(line: 568, column: 20, scope: !735)
!735 = distinct !DILexicalBlock(scope: !730, file: !16, line: 568, column: 3)
!736 = !DILocation(line: 568, column: 25, scope: !735)
!737 = !DILocation(line: 568, column: 28, scope: !735)
!738 = !DILocalVariable(name: ".temp", scope: !735, file: !16, line: 568, type: !68, align: 8)
!739 = !DILocation(line: 568, column: 14, scope: !735)
!740 = !DILocalVariable(name: "i", scope: !741, file: !16, line: 568, type: !68, align: 8)
!741 = distinct !DILexicalBlock(scope: !735, file: !16, line: 569, column: 3)
!742 = !DILocation(line: 568, column: 14, scope: !741)
!743 = !DILocalVariable(name: "c", scope: !741, file: !16, line: 568, type: !66, align: 1)
!744 = !DILocation(line: 568, column: 17, scope: !741)
!745 = !DILocation(line: 568, column: 20, scope: !741)
!746 = !DILocation(line: 570, column: 8, scope: !747)
!747 = distinct !DILexicalBlock(scope: !741, file: !16, line: 569, column: 3)
!748 = !DILocation(line: 570, column: 13, scope: !747)
!749 = !DILocation(line: 570, column: 22, scope: !747)
!750 = !DILocation(line: 570, column: 27, scope: !747)
!751 = !DILocation(line: 570, column: 31, scope: !747)
!752 = !DILocation(line: 570, column: 42, scope: !747)
!753 = !DILocation(line: 570, column: 57, scope: !747)
!754 = !DILocation(line: 557, column: 10, scope: !747)
!755 = !DILocation(line: 557, column: 19, scope: !747)
!756 = !DILocation(line: 573, column: 9, scope: !716)
!757 = distinct !DISubprogram(name: "str_view", linkageName: "std.core.string.ZString.str_view", scope: !16, file: !16, line: 576, type: !758, scopeLine: 576, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!758 = !DISubroutineType(types: !759)
!759 = !{!61, !760}
!760 = !DIDerivedType(tag: DW_TAG_typedef, name: "ZString", scope: !16, file: !16, line: 10, baseType: !65, align: 8)
!761 = !DILocalVariable(name: "self", arg: 1, scope: !757, file: !16, line: 576, type: !760)
!762 = !DILocation(line: 576, column: 28, scope: !757)
!763 = !DILocation(line: 578, column: 18, scope: !757)
!764 = !DILocation(line: 578, column: 24, scope: !757)
!765 = !DILocation(line: 578, column: 9, scope: !757)
!766 = distinct !DISubprogram(name: "char_len", linkageName: "std.core.string.ZString.char_len", scope: !16, file: !16, line: 581, type: !767, scopeLine: 581, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!767 = !DISubroutineType(types: !768)
!768 = !{!68, !760}
!769 = !DILocalVariable(name: "str", arg: 1, scope: !766, file: !16, line: 581, type: !760)
!770 = !DILocation(line: 581, column: 25, scope: !766)
!771 = !DILocalVariable(name: "len", scope: !766, file: !16, line: 583, type: !68, align: 8)
!772 = !DILocation(line: 583, column: 6, scope: !766)
!773 = !DILocation(line: 583, column: 12, scope: !766)
!774 = !DILocalVariable(name: "ptr", scope: !766, file: !16, line: 584, type: !65, align: 8)
!775 = !DILocation(line: 584, column: 8, scope: !766)
!776 = !DILocation(line: 584, column: 14, scope: !766)
!777 = !DILocation(line: 585, column: 2, scope: !766)
!778 = !DILocalVariable(name: "c", scope: !779, file: !16, line: 585, type: !66, align: 1)
!779 = distinct !DILexicalBlock(scope: !766, file: !16, line: 585, column: 2)
!780 = !DILocation(line: 585, column: 14, scope: !779)
!781 = !DILocation(line: 585, column: 18, scope: !779)
!782 = !DILocation(line: 585, column: 24, scope: !779)
!783 = !DILocation(line: 587, column: 7, scope: !784)
!784 = distinct !DILexicalBlock(scope: !779, file: !16, line: 586, column: 2)
!785 = !DILocation(line: 587, column: 25, scope: !784)
!786 = !DILocation(line: 589, column: 9, scope: !766)
!787 = distinct !DISubprogram(name: "len", linkageName: "std.core.string.ZString.len", scope: !16, file: !16, line: 592, type: !767, scopeLine: 592, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!788 = !DILocalVariable(name: "self", arg: 1, scope: !787, file: !16, line: 592, type: !760)
!789 = !DILocation(line: 592, column: 20, scope: !787)
!790 = !DILocalVariable(name: "len", scope: !787, file: !16, line: 594, type: !68, align: 8)
!791 = !DILocation(line: 594, column: 6, scope: !787)
!792 = !DILocation(line: 594, column: 12, scope: !787)
!793 = !DILocalVariable(name: "ptr", scope: !787, file: !16, line: 595, type: !65, align: 8)
!794 = !DILocation(line: 595, column: 8, scope: !787)
!795 = !DILocation(line: 595, column: 14, scope: !787)
!796 = !DILocation(line: 596, column: 2, scope: !787)
!797 = !DILocalVariable(name: "c", scope: !798, file: !16, line: 596, type: !66, align: 1)
!798 = distinct !DILexicalBlock(scope: !787, file: !16, line: 596, column: 2)
!799 = !DILocation(line: 596, column: 14, scope: !798)
!800 = !DILocation(line: 596, column: 18, scope: !798)
!801 = !DILocation(line: 596, column: 24, scope: !798)
!802 = !DILocation(line: 596, column: 28, scope: !798)
!803 = !DILocation(line: 597, column: 9, scope: !787)
!804 = distinct !DISubprogram(name: "zstr_copy", linkageName: "std.core.String.zstr_copy", scope: !16, file: !16, line: 601, type: !805, scopeLine: 601, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!805 = !DISubroutineType(types: !806)
!806 = !{!760, !61, !82}
!807 = !DILocalVariable(name: "self", arg: 1, scope: !804, file: !16, line: 601, type: !61)
!808 = !DILocation(line: 601, column: 29, scope: !804)
!809 = !DILocalVariable(name: "allocator", arg: 2, scope: !804, file: !16, line: 601, type: !82)
!810 = !DILocation(line: 601, column: 45, scope: !804)
!811 = !DILocalVariable(name: "len", scope: !804, file: !16, line: 603, type: !68, align: 8)
!812 = !DILocation(line: 603, column: 6, scope: !804)
!813 = !DILocation(line: 603, column: 12, scope: !804)
!814 = !DILocalVariable(name: "str", scope: !804, file: !16, line: 604, type: !65, align: 8)
!815 = !DILocation(line: 604, column: 8, scope: !804)
!816 = !DILocation(line: 604, column: 43, scope: !804)
!817 = !DILocation(line: 79, column: 6, scope: !818, inlinedAt: !819)
!818 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !314, file: !314, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!819 = !DILocation(line: 74, column: 9, scope: !820, inlinedAt: !821)
!820 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !314, file: !314, line: 72, scopeLine: 72, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!821 = !DILocation(line: 604, column: 14, scope: !804)
!822 = !DILocation(line: 79, column: 20, scope: !818, inlinedAt: !819)
!823 = !DILocation(line: 85, column: 28, scope: !818, inlinedAt: !819)
!824 = !DILocation(line: 37, column: 12, scope: !818, inlinedAt: !819)
!825 = !DILocation(line: 973, column: 9, scope: !826, inlinedAt: !827)
!826 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !327, file: !327, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!827 = !DILocation(line: 37, column: 26, scope: !818, inlinedAt: !819)
!828 = !DILocation(line: 973, column: 20, scope: !826, inlinedAt: !827)
!829 = !DILocation(line: 973, column: 25, scope: !826, inlinedAt: !827)
!830 = !DILocation(line: 85, column: 10, scope: !818, inlinedAt: !819)
!831 = !DILocation(line: 605, column: 12, scope: !804)
!832 = !DILocation(line: 605, column: 17, scope: !804)
!833 = !DILocation(line: 329, column: 23, scope: !834, inlinedAt: !836)
!834 = distinct !DILexicalBlock(scope: !835, file: !99, line: 330, column: 1)
!835 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !99, file: !99, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!836 = !DILocation(line: 605, column: 2, scope: !804)
!837 = !DILocation(line: 326, column: 11, scope: !834, inlinedAt: !836)
!838 = !DILocation(line: 326, column: 26, scope: !834, inlinedAt: !836)
!839 = !DILocation(line: 605, column: 2, scope: !834, inlinedAt: !836)
!840 = !DILocation(line: 327, column: 11, scope: !834, inlinedAt: !836)
!841 = !DILocation(line: 327, column: 23, scope: !834, inlinedAt: !836)
!842 = !DILocation(line: 327, column: 29, scope: !834, inlinedAt: !836)
!843 = !DILocation(line: 327, column: 36, scope: !834, inlinedAt: !836)
!844 = !DILocation(line: 327, column: 43, scope: !834, inlinedAt: !836)
!845 = !DILocation(line: 327, column: 49, scope: !834, inlinedAt: !836)
!846 = !DILocation(line: 327, column: 56, scope: !834, inlinedAt: !836)
!847 = !DILocation(line: 331, column: 11, scope: !835, inlinedAt: !836)
!848 = !DILocation(line: 331, column: 16, scope: !835, inlinedAt: !836)
!849 = !DILocation(line: 331, column: 21, scope: !835, inlinedAt: !836)
!850 = !DILocation(line: 331, column: 26, scope: !835, inlinedAt: !836)
!851 = !DILocation(line: 606, column: 2, scope: !804)
!852 = !DILocation(line: 606, column: 6, scope: !804)
!853 = !DILocation(line: 606, column: 13, scope: !804)
!854 = !DILocation(line: 607, column: 9, scope: !804)
!855 = distinct !DISubprogram(name: "concat", linkageName: "std.core.String.concat", scope: !16, file: !16, line: 610, type: !856, scopeLine: 610, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!856 = !DISubroutineType(types: !857)
!857 = !{!61, !61, !82, !61}
!858 = !DILocalVariable(name: "self", arg: 1, scope: !855, file: !16, line: 610, type: !61)
!859 = !DILocation(line: 610, column: 25, scope: !855)
!860 = !DILocalVariable(name: "allocator", arg: 2, scope: !855, file: !16, line: 610, type: !82)
!861 = !DILocation(line: 610, column: 41, scope: !855)
!862 = !DILocalVariable(name: "s2", arg: 3, scope: !855, file: !16, line: 610, type: !61)
!863 = !DILocation(line: 610, column: 59, scope: !855)
!864 = !DILocalVariable(name: "full_len", scope: !855, file: !16, line: 612, type: !68, align: 8)
!865 = !DILocation(line: 612, column: 6, scope: !855)
!866 = !DILocation(line: 612, column: 17, scope: !855)
!867 = !DILocation(line: 612, column: 28, scope: !855)
!868 = !DILocalVariable(name: "str", scope: !855, file: !16, line: 613, type: !65, align: 8)
!869 = !DILocation(line: 613, column: 8, scope: !855)
!870 = !DILocation(line: 613, column: 43, scope: !855)
!871 = !DILocation(line: 79, column: 6, scope: !872, inlinedAt: !873)
!872 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !314, file: !314, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!873 = !DILocation(line: 74, column: 9, scope: !874, inlinedAt: !875)
!874 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !314, file: !314, line: 72, scopeLine: 72, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!875 = !DILocation(line: 613, column: 14, scope: !855)
!876 = !DILocation(line: 79, column: 20, scope: !872, inlinedAt: !873)
!877 = !DILocation(line: 85, column: 28, scope: !872, inlinedAt: !873)
!878 = !DILocation(line: 37, column: 12, scope: !872, inlinedAt: !873)
!879 = !DILocation(line: 973, column: 9, scope: !880, inlinedAt: !881)
!880 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !327, file: !327, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!881 = !DILocation(line: 37, column: 26, scope: !872, inlinedAt: !873)
!882 = !DILocation(line: 973, column: 20, scope: !880, inlinedAt: !881)
!883 = !DILocation(line: 973, column: 25, scope: !880, inlinedAt: !881)
!884 = !DILocation(line: 85, column: 10, scope: !872, inlinedAt: !873)
!885 = !DILocalVariable(name: "self_len", scope: !855, file: !16, line: 614, type: !68, align: 8)
!886 = !DILocation(line: 614, column: 6, scope: !855)
!887 = !DILocation(line: 614, column: 17, scope: !855)
!888 = !DILocation(line: 615, column: 12, scope: !855)
!889 = !DILocation(line: 615, column: 17, scope: !855)
!890 = !DILocation(line: 329, column: 23, scope: !891, inlinedAt: !893)
!891 = distinct !DILexicalBlock(scope: !892, file: !99, line: 330, column: 1)
!892 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !99, file: !99, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!893 = !DILocation(line: 615, column: 2, scope: !855)
!894 = !DILocation(line: 326, column: 11, scope: !891, inlinedAt: !893)
!895 = !DILocation(line: 326, column: 26, scope: !891, inlinedAt: !893)
!896 = !DILocation(line: 615, column: 2, scope: !891, inlinedAt: !893)
!897 = !DILocation(line: 327, column: 11, scope: !891, inlinedAt: !893)
!898 = !DILocation(line: 327, column: 23, scope: !891, inlinedAt: !893)
!899 = !DILocation(line: 327, column: 29, scope: !891, inlinedAt: !893)
!900 = !DILocation(line: 327, column: 36, scope: !891, inlinedAt: !893)
!901 = !DILocation(line: 327, column: 43, scope: !891, inlinedAt: !893)
!902 = !DILocation(line: 327, column: 49, scope: !891, inlinedAt: !893)
!903 = !DILocation(line: 327, column: 56, scope: !891, inlinedAt: !893)
!904 = !DILocation(line: 331, column: 11, scope: !892, inlinedAt: !893)
!905 = !DILocation(line: 331, column: 16, scope: !892, inlinedAt: !893)
!906 = !DILocation(line: 331, column: 21, scope: !892, inlinedAt: !893)
!907 = !DILocation(line: 331, column: 26, scope: !892, inlinedAt: !893)
!908 = !DILocation(line: 616, column: 12, scope: !855)
!909 = !DILocation(line: 616, column: 18, scope: !855)
!910 = !DILocation(line: 616, column: 28, scope: !855)
!911 = !DILocation(line: 616, column: 36, scope: !855)
!912 = !DILocation(line: 329, column: 23, scope: !913, inlinedAt: !915)
!913 = distinct !DILexicalBlock(scope: !914, file: !99, line: 330, column: 1)
!914 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !99, file: !99, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!915 = !DILocation(line: 616, column: 2, scope: !855)
!916 = !DILocation(line: 326, column: 11, scope: !913, inlinedAt: !915)
!917 = !DILocation(line: 326, column: 26, scope: !913, inlinedAt: !915)
!918 = !DILocation(line: 616, column: 2, scope: !913, inlinedAt: !915)
!919 = !DILocation(line: 327, column: 11, scope: !913, inlinedAt: !915)
!920 = !DILocation(line: 327, column: 23, scope: !913, inlinedAt: !915)
!921 = !DILocation(line: 327, column: 29, scope: !913, inlinedAt: !915)
!922 = !DILocation(line: 327, column: 36, scope: !913, inlinedAt: !915)
!923 = !DILocation(line: 327, column: 43, scope: !913, inlinedAt: !915)
!924 = !DILocation(line: 327, column: 49, scope: !913, inlinedAt: !915)
!925 = !DILocation(line: 327, column: 56, scope: !913, inlinedAt: !915)
!926 = !DILocation(line: 331, column: 11, scope: !914, inlinedAt: !915)
!927 = !DILocation(line: 331, column: 16, scope: !914, inlinedAt: !915)
!928 = !DILocation(line: 331, column: 21, scope: !914, inlinedAt: !915)
!929 = !DILocation(line: 331, column: 26, scope: !914, inlinedAt: !915)
!930 = !DILocation(line: 617, column: 2, scope: !855)
!931 = !DILocation(line: 617, column: 6, scope: !855)
!932 = !DILocation(line: 617, column: 18, scope: !855)
!933 = !DILocation(line: 618, column: 17, scope: !855)
!934 = !DILocation(line: 618, column: 22, scope: !855)
!935 = !DILocation(line: 618, column: 9, scope: !855)
!936 = distinct !DISubprogram(name: "tconcat", linkageName: "std.core.String.tconcat", scope: !16, file: !16, line: 621, type: !161, scopeLine: 621, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!937 = !DILocalVariable(name: "self", arg: 1, scope: !936, file: !16, line: 621, type: !61)
!938 = !DILocation(line: 621, column: 26, scope: !936)
!939 = !DILocalVariable(name: "s2", arg: 2, scope: !936, file: !16, line: 621, type: !61)
!940 = !DILocation(line: 621, column: 39, scope: !936)
!941 = !DILocation(line: 621, column: 64, scope: !936)
!942 = !DILocation(line: 621, column: 46, scope: !936)
!943 = distinct !DISubprogram(name: "zstr_tcopy", linkageName: "std.core.String.zstr_tcopy", scope: !16, file: !16, line: 624, type: !944, scopeLine: 624, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!944 = !DISubroutineType(types: !945)
!945 = !{!760, !61}
!946 = !DILocalVariable(name: "self", arg: 1, scope: !943, file: !16, line: 624, type: !61)
!947 = !DILocation(line: 624, column: 30, scope: !943)
!948 = !DILocation(line: 624, column: 54, scope: !943)
!949 = !DILocation(line: 624, column: 39, scope: !943)
!950 = distinct !DISubprogram(name: "copy", linkageName: "std.core.String.copy", scope: !16, file: !16, line: 631, type: !951, scopeLine: 631, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!951 = !DISubroutineType(types: !952)
!952 = !{!61, !61, !82}
!953 = !DILocalVariable(name: "self", arg: 1, scope: !950, file: !16, line: 631, type: !61)
!954 = !DILocation(line: 631, column: 23, scope: !950)
!955 = !DILocalVariable(name: "allocator", arg: 2, scope: !950, file: !16, line: 631, type: !82)
!956 = !DILocation(line: 631, column: 39, scope: !950)
!957 = !DILocalVariable(name: "len", scope: !950, file: !16, line: 633, type: !68, align: 8)
!958 = !DILocation(line: 633, column: 6, scope: !950)
!959 = !DILocation(line: 633, column: 12, scope: !950)
!960 = !DILocalVariable(name: "str", scope: !950, file: !16, line: 634, type: !65, align: 8)
!961 = !DILocation(line: 634, column: 8, scope: !950)
!962 = !DILocation(line: 634, column: 43, scope: !950)
!963 = !DILocation(line: 79, column: 6, scope: !964, inlinedAt: !965)
!964 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !314, file: !314, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!965 = !DILocation(line: 74, column: 9, scope: !966, inlinedAt: !967)
!966 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !314, file: !314, line: 72, scopeLine: 72, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!967 = !DILocation(line: 634, column: 14, scope: !950)
!968 = !DILocation(line: 79, column: 20, scope: !964, inlinedAt: !965)
!969 = !DILocation(line: 85, column: 28, scope: !964, inlinedAt: !965)
!970 = !DILocation(line: 37, column: 12, scope: !964, inlinedAt: !965)
!971 = !DILocation(line: 973, column: 9, scope: !972, inlinedAt: !973)
!972 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !327, file: !327, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!973 = !DILocation(line: 37, column: 26, scope: !964, inlinedAt: !965)
!974 = !DILocation(line: 973, column: 20, scope: !972, inlinedAt: !973)
!975 = !DILocation(line: 973, column: 25, scope: !972, inlinedAt: !973)
!976 = !DILocation(line: 85, column: 10, scope: !964, inlinedAt: !965)
!977 = !DILocation(line: 635, column: 12, scope: !950)
!978 = !DILocation(line: 635, column: 17, scope: !950)
!979 = !DILocation(line: 329, column: 23, scope: !980, inlinedAt: !982)
!980 = distinct !DILexicalBlock(scope: !981, file: !99, line: 330, column: 1)
!981 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !99, file: !99, line: 329, scopeLine: 329, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!982 = !DILocation(line: 635, column: 2, scope: !950)
!983 = !DILocation(line: 326, column: 11, scope: !980, inlinedAt: !982)
!984 = !DILocation(line: 326, column: 26, scope: !980, inlinedAt: !982)
!985 = !DILocation(line: 635, column: 2, scope: !980, inlinedAt: !982)
!986 = !DILocation(line: 327, column: 11, scope: !980, inlinedAt: !982)
!987 = !DILocation(line: 327, column: 23, scope: !980, inlinedAt: !982)
!988 = !DILocation(line: 327, column: 29, scope: !980, inlinedAt: !982)
!989 = !DILocation(line: 327, column: 36, scope: !980, inlinedAt: !982)
!990 = !DILocation(line: 327, column: 43, scope: !980, inlinedAt: !982)
!991 = !DILocation(line: 327, column: 49, scope: !980, inlinedAt: !982)
!992 = !DILocation(line: 327, column: 56, scope: !980, inlinedAt: !982)
!993 = !DILocation(line: 331, column: 11, scope: !981, inlinedAt: !982)
!994 = !DILocation(line: 331, column: 16, scope: !981, inlinedAt: !982)
!995 = !DILocation(line: 331, column: 21, scope: !981, inlinedAt: !982)
!996 = !DILocation(line: 331, column: 26, scope: !981, inlinedAt: !982)
!997 = !DILocation(line: 636, column: 2, scope: !950)
!998 = !DILocation(line: 636, column: 6, scope: !950)
!999 = !DILocation(line: 636, column: 13, scope: !950)
!1000 = !DILocation(line: 637, column: 17, scope: !950)
!1001 = !DILocation(line: 637, column: 22, scope: !950)
!1002 = !DILocation(line: 637, column: 9, scope: !950)
!1003 = distinct !DISubprogram(name: "free", linkageName: "std.core.String.free", scope: !16, file: !16, line: 640, type: !1004, scopeLine: 640, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1004 = !DISubroutineType(types: !1005)
!1005 = !{null, !132, !82}
!1006 = !DILocation(line: 641, column: 1, scope: !1003)
!1007 = !DILocalVariable(name: "self", arg: 1, scope: !1003, file: !16, line: 640, type: !132)
!1008 = !DILocation(line: 640, column: 21, scope: !1003)
!1009 = !DILocalVariable(name: "allocator", arg: 2, scope: !1003, file: !16, line: 640, type: !82)
!1010 = !DILocation(line: 640, column: 38, scope: !1003)
!1011 = !DILocation(line: 642, column: 7, scope: !1003)
!1012 = !DILocation(line: 642, column: 23, scope: !1003)
!1013 = !DILocation(line: 643, column: 29, scope: !1003)
!1014 = !DILocation(line: 118, column: 6, scope: !1015, inlinedAt: !1016)
!1015 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !314, file: !314, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1016 = !DILocation(line: 643, column: 2, scope: !1003)
!1017 = !DILocation(line: 118, column: 18, scope: !1015, inlinedAt: !1016)
!1018 = !DILocation(line: 122, column: 20, scope: !1015, inlinedAt: !1016)
!1019 = !DILocation(line: 122, column: 2, scope: !1015, inlinedAt: !1016)
!1020 = !DILocation(line: 644, column: 3, scope: !1003)
!1021 = !DILocation(line: 644, column: 10, scope: !1003)
!1022 = distinct !DISubprogram(name: "tcopy", linkageName: "std.core.String.tcopy", scope: !16, file: !16, line: 647, type: !1023, scopeLine: 647, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1023 = !DISubroutineType(types: !1024)
!1024 = !{!61, !61}
!1025 = !DILocalVariable(name: "self", arg: 1, scope: !1022, file: !16, line: 647, type: !61)
!1026 = !DILocation(line: 647, column: 24, scope: !1022)
!1027 = !DILocation(line: 647, column: 43, scope: !1022)
!1028 = !DILocation(line: 647, column: 33, scope: !1022)
!1029 = distinct !DISubprogram(name: "copy", linkageName: "std.core.string.ZString.copy", scope: !16, file: !16, line: 649, type: !1030, scopeLine: 649, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1030 = !DISubroutineType(types: !1031)
!1031 = !{!61, !760, !82}
!1032 = !DILocalVariable(name: "self", arg: 1, scope: !1029, file: !16, line: 649, type: !760)
!1033 = !DILocation(line: 649, column: 24, scope: !1029)
!1034 = !DILocalVariable(name: "allocator", arg: 2, scope: !1029, file: !16, line: 649, type: !82)
!1035 = !DILocation(line: 649, column: 40, scope: !1029)
!1036 = !DILocation(line: 651, column: 9, scope: !1029)
!1037 = !DILocation(line: 651, column: 30, scope: !1029)
!1038 = distinct !DISubprogram(name: "tcopy", linkageName: "std.core.string.ZString.tcopy", scope: !16, file: !16, line: 654, type: !758, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1039 = !DILocalVariable(name: "self", arg: 1, scope: !1038, file: !16, line: 654, type: !760)
!1040 = !DILocation(line: 654, column: 25, scope: !1038)
!1041 = !DILocation(line: 656, column: 9, scope: !1038)
!1042 = !DILocation(line: 656, column: 30, scope: !1038)
!1043 = distinct !DISubprogram(name: "to_utf16", linkageName: "std.core.String.to_utf16", scope: !16, file: !16, line: 664, type: !1044, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1044 = !DISubroutineType(types: !1045)
!1045 = !{!431, !1046, !61, !82}
!1046 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char16[]*", baseType: !1047, size: 64, align: 64, dwarfAddressSpace: 0)
!1047 = !DICompositeType(tag: DW_TAG_structure_type, name: "Char16[]", size: 128, align: 64, elements: !1048, identifier: "Char16[]")
!1048 = !{!1049, !1053}
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1047, baseType: !1050, size: 64, align: 64)
!1050 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char16*", baseType: !1051, size: 64, align: 64, dwarfAddressSpace: 0)
!1051 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char16", scope: !16, file: !16, line: 31, baseType: !1052, align: 2)
!1052 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1047, baseType: !68, size: 64, align: 64, offset: 64)
!1054 = !DILocalVariable(name: "self", arg: 1, scope: !1043, file: !16, line: 664, type: !61)
!1055 = !DILocation(line: 664, column: 30, scope: !1043)
!1056 = !DILocalVariable(name: "allocator", arg: 2, scope: !1043, file: !16, line: 664, type: !82)
!1057 = !DILocation(line: 664, column: 46, scope: !1043)
!1058 = !DILocalVariable(name: "len16", scope: !1043, file: !16, line: 666, type: !68, align: 8)
!1059 = !DILocation(line: 666, column: 6, scope: !1043)
!1060 = !DILocation(line: 666, column: 38, scope: !1043)
!1061 = !DILocation(line: 666, column: 14, scope: !1043)
!1062 = !DILocalVariable(name: "data", scope: !1043, file: !16, line: 667, type: !1050, align: 8)
!1063 = !DILocation(line: 667, column: 10, scope: !1043)
!1064 = !DILocation(line: 667, column: 63, scope: !1043)
!1065 = !DILocation(line: 303, column: 55, scope: !1066, inlinedAt: !1067)
!1066 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !314, file: !314, line: 301, scopeLine: 301, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1067 = !DILocation(line: 667, column: 17, scope: !1043)
!1068 = !DILocation(line: 303, column: 40, scope: !1066, inlinedAt: !1067)
!1069 = !DILocation(line: 79, column: 6, scope: !1070, inlinedAt: !1071)
!1070 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !314, file: !314, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1071 = !DILocation(line: 303, column: 18, scope: !1066, inlinedAt: !1067)
!1072 = !DILocation(line: 79, column: 20, scope: !1070, inlinedAt: !1071)
!1073 = !DILocation(line: 85, column: 28, scope: !1070, inlinedAt: !1071)
!1074 = !DILocation(line: 37, column: 12, scope: !1070, inlinedAt: !1071)
!1075 = !DILocation(line: 973, column: 9, scope: !1076, inlinedAt: !1077)
!1076 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !327, file: !327, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1077 = !DILocation(line: 37, column: 26, scope: !1070, inlinedAt: !1071)
!1078 = !DILocation(line: 973, column: 20, scope: !1076, inlinedAt: !1077)
!1079 = !DILocation(line: 973, column: 25, scope: !1076, inlinedAt: !1077)
!1080 = !DILocation(line: 85, column: 10, scope: !1070, inlinedAt: !1071)
!1081 = !DILocation(line: 303, column: 67, scope: !1066, inlinedAt: !1067)
!1082 = !DILocation(line: 303, column: 10, scope: !1066, inlinedAt: !1067)
!1083 = !DILocation(line: 668, column: 30, scope: !1043)
!1084 = !DILocation(line: 668, column: 2, scope: !1043)
!1085 = !DILocation(line: 669, column: 2, scope: !1043)
!1086 = !DILocation(line: 669, column: 7, scope: !1043)
!1087 = !DILocation(line: 669, column: 16, scope: !1043)
!1088 = !DILocation(line: 670, column: 9, scope: !1043)
!1089 = !DILocation(line: 670, column: 15, scope: !1043)
!1090 = distinct !DISubprogram(name: "to_temp_utf16", linkageName: "std.core.String.to_temp_utf16", scope: !16, file: !16, line: 673, type: !1091, scopeLine: 673, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!431, !1046, !61}
!1093 = !DILocalVariable(name: "self", arg: 1, scope: !1090, file: !16, line: 673, type: !61)
!1094 = !DILocation(line: 673, column: 35, scope: !1090)
!1095 = !DILocation(line: 673, column: 44, scope: !1090)
!1096 = distinct !DISubprogram(name: "to_wstring", linkageName: "std.core.String.to_wstring", scope: !16, file: !16, line: 675, type: !1097, scopeLine: 675, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1097 = !DISubroutineType(types: !1098)
!1098 = !{!431, !1099, !61, !82}
!1099 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WString*", baseType: !1100, size: 64, align: 64, dwarfAddressSpace: 0)
!1100 = !DIDerivedType(tag: DW_TAG_typedef, name: "WString", scope: !16, file: !16, line: 21, baseType: !1101, align: 8)
!1101 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !1052, size: 64, align: 64, dwarfAddressSpace: 0)
!1102 = !DILocalVariable(name: "self", arg: 1, scope: !1096, file: !16, line: 675, type: !61)
!1103 = !DILocation(line: 675, column: 31, scope: !1096)
!1104 = !DILocalVariable(name: "allocator", arg: 2, scope: !1096, file: !16, line: 675, type: !82)
!1105 = !DILocation(line: 675, column: 47, scope: !1096)
!1106 = !DILocation(line: 677, column: 9, scope: !1096)
!1107 = distinct !DISubprogram(name: "to_temp_wstring", linkageName: "std.core.String.to_temp_wstring", scope: !16, file: !16, line: 680, type: !1108, scopeLine: 680, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1108 = !DISubroutineType(types: !1109)
!1109 = !{!431, !1099, !61}
!1110 = !DILocalVariable(name: "self", arg: 1, scope: !1107, file: !16, line: 680, type: !61)
!1111 = !DILocation(line: 680, column: 36, scope: !1107)
!1112 = !DILocation(line: 680, column: 45, scope: !1107)
!1113 = distinct !DISubprogram(name: "to_utf32", linkageName: "std.core.String.to_utf32", scope: !16, file: !16, line: 682, type: !1114, scopeLine: 682, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1114 = !DISubroutineType(types: !1115)
!1115 = !{!431, !1116, !61, !82}
!1116 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char32[]*", baseType: !1117, size: 64, align: 64, dwarfAddressSpace: 0)
!1117 = !DICompositeType(tag: DW_TAG_structure_type, name: "Char32[]", size: 128, align: 64, elements: !1118, identifier: "Char32[]")
!1118 = !{!1119, !1122}
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1117, baseType: !1120, size: 64, align: 64)
!1120 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char32*", baseType: !1121, size: 64, align: 64, dwarfAddressSpace: 0)
!1121 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char32", scope: !16, file: !16, line: 26, baseType: !11, align: 4)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1117, baseType: !68, size: 64, align: 64, offset: 64)
!1123 = !DILocalVariable(name: "self", arg: 1, scope: !1113, file: !16, line: 682, type: !61)
!1124 = !DILocation(line: 682, column: 30, scope: !1113)
!1125 = !DILocalVariable(name: "allocator", arg: 2, scope: !1113, file: !16, line: 682, type: !82)
!1126 = !DILocation(line: 682, column: 46, scope: !1113)
!1127 = !DILocalVariable(name: "codepoints", scope: !1113, file: !16, line: 684, type: !68, align: 8)
!1128 = !DILocation(line: 684, column: 6, scope: !1113)
!1129 = !DILocation(line: 684, column: 41, scope: !1113)
!1130 = !DILocation(line: 684, column: 19, scope: !1113)
!1131 = !DILocalVariable(name: "data", scope: !1113, file: !16, line: 685, type: !1120, align: 8)
!1132 = !DILocation(line: 685, column: 10, scope: !1113)
!1133 = !DILocation(line: 685, column: 63, scope: !1113)
!1134 = !DILocation(line: 303, column: 55, scope: !1135, inlinedAt: !1136)
!1135 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !314, file: !314, line: 301, scopeLine: 301, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1136 = !DILocation(line: 685, column: 17, scope: !1113)
!1137 = !DILocation(line: 303, column: 40, scope: !1135, inlinedAt: !1136)
!1138 = !DILocation(line: 79, column: 6, scope: !1139, inlinedAt: !1140)
!1139 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !314, file: !314, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1140 = !DILocation(line: 303, column: 18, scope: !1135, inlinedAt: !1136)
!1141 = !DILocation(line: 79, column: 20, scope: !1139, inlinedAt: !1140)
!1142 = !DILocation(line: 85, column: 28, scope: !1139, inlinedAt: !1140)
!1143 = !DILocation(line: 37, column: 12, scope: !1139, inlinedAt: !1140)
!1144 = !DILocation(line: 973, column: 9, scope: !1145, inlinedAt: !1146)
!1145 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !327, file: !327, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1146 = !DILocation(line: 37, column: 26, scope: !1139, inlinedAt: !1140)
!1147 = !DILocation(line: 973, column: 20, scope: !1145, inlinedAt: !1146)
!1148 = !DILocation(line: 973, column: 25, scope: !1145, inlinedAt: !1146)
!1149 = !DILocation(line: 85, column: 10, scope: !1139, inlinedAt: !1140)
!1150 = !DILocation(line: 303, column: 67, scope: !1135, inlinedAt: !1136)
!1151 = !DILocation(line: 303, column: 10, scope: !1135, inlinedAt: !1136)
!1152 = !DILocation(line: 686, column: 30, scope: !1113)
!1153 = !DILocation(line: 686, column: 2, scope: !1113)
!1154 = !DILocation(line: 687, column: 2, scope: !1113)
!1155 = !DILocation(line: 687, column: 7, scope: !1113)
!1156 = !DILocation(line: 687, column: 21, scope: !1113)
!1157 = !DILocation(line: 688, column: 9, scope: !1113)
!1158 = !DILocation(line: 688, column: 15, scope: !1113)
!1159 = distinct !DISubprogram(name: "to_temp_utf32", linkageName: "std.core.String.to_temp_utf32", scope: !16, file: !16, line: 691, type: !1160, scopeLine: 691, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1160 = !DISubroutineType(types: !1161)
!1161 = !{!431, !1116, !61}
!1162 = !DILocalVariable(name: "self", arg: 1, scope: !1159, file: !16, line: 691, type: !61)
!1163 = !DILocation(line: 691, column: 35, scope: !1159)
!1164 = !DILocation(line: 691, column: 44, scope: !1159)
!1165 = distinct !DISubprogram(name: "convert_to_lower", linkageName: "std.core.String.convert_to_lower", scope: !16, file: !16, line: 699, type: !1166, scopeLine: 699, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1166 = !DISubroutineType(types: !1167)
!1167 = !{null, !61}
!1168 = !DILocalVariable(name: "self", arg: 1, scope: !1165, file: !16, line: 699, type: !61)
!1169 = !DILocation(line: 699, column: 33, scope: !1165)
!1170 = !DILocation(line: 701, column: 16, scope: !1171)
!1171 = distinct !DILexicalBlock(scope: !1165, file: !16, line: 701, column: 2)
!1172 = !DILocalVariable(name: ".temp", scope: !1171, file: !16, line: 701, type: !68, align: 8)
!1173 = !DILocalVariable(name: "c", scope: !1174, file: !16, line: 701, type: !65, align: 8)
!1174 = distinct !DILexicalBlock(scope: !1171, file: !16, line: 701, column: 22)
!1175 = !DILocation(line: 701, column: 12, scope: !1174)
!1176 = !DILocation(line: 701, column: 16, scope: !1174)
!1177 = !DILocation(line: 701, column: 26, scope: !1174)
!1178 = !DILocation(line: 8, column: 42, scope: !1179, inlinedAt: !1181)
!1179 = distinct !DISubprogram(name: "@is_upper", linkageName: "@is_upper", scope: !1180, file: !1180, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1180 = !DIFile(filename: "ascii.c3", directory: "/usr/lib/c3c/lib/std/core")
!1181 = !DILocation(line: 43, column: 38, scope: !1182, inlinedAt: !1177)
!1182 = distinct !DISubprogram(name: "is_upper", linkageName: "is_upper", scope: !1180, file: !1180, line: 43, scopeLine: 43, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1183 = !DILocation(line: 701, column: 47, scope: !1174)
!1184 = !DILocation(line: 701, column: 46, scope: !1174)
!1185 = distinct !DISubprogram(name: "to_lower_copy", linkageName: "std.core.String.to_lower_copy", scope: !16, file: !16, line: 704, type: !951, scopeLine: 704, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1186 = !DILocalVariable(name: "self", arg: 1, scope: !1185, file: !16, line: 704, type: !61)
!1187 = !DILocation(line: 704, column: 32, scope: !1185)
!1188 = !DILocalVariable(name: "allocator", arg: 2, scope: !1185, file: !16, line: 704, type: !82)
!1189 = !DILocation(line: 704, column: 48, scope: !1185)
!1190 = !DILocalVariable(name: "copy", scope: !1185, file: !16, line: 706, type: !61, align: 8)
!1191 = !DILocation(line: 706, column: 9, scope: !1185)
!1192 = !DILocation(line: 706, column: 26, scope: !1185)
!1193 = !DILocation(line: 706, column: 16, scope: !1185)
!1194 = !DILocation(line: 707, column: 2, scope: !1185)
!1195 = !DILocation(line: 708, column: 9, scope: !1185)
!1196 = distinct !DISubprogram(name: "to_lower_tcopy", linkageName: "std.core.String.to_lower_tcopy", scope: !16, file: !16, line: 711, type: !1023, scopeLine: 711, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1197 = !DILocalVariable(name: "self", arg: 1, scope: !1196, file: !16, line: 711, type: !61)
!1198 = !DILocation(line: 711, column: 33, scope: !1196)
!1199 = !DILocation(line: 713, column: 28, scope: !1196)
!1200 = !DILocation(line: 713, column: 9, scope: !1196)
!1201 = distinct !DISubprogram(name: "convert_to_upper", linkageName: "std.core.String.convert_to_upper", scope: !16, file: !16, line: 722, type: !1166, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1202 = !DILocalVariable(name: "self", arg: 1, scope: !1201, file: !16, line: 722, type: !61)
!1203 = !DILocation(line: 722, column: 33, scope: !1201)
!1204 = !DILocation(line: 724, column: 16, scope: !1205)
!1205 = distinct !DILexicalBlock(scope: !1201, file: !16, line: 724, column: 2)
!1206 = !DILocalVariable(name: ".temp", scope: !1205, file: !16, line: 724, type: !68, align: 8)
!1207 = !DILocalVariable(name: "c", scope: !1208, file: !16, line: 724, type: !65, align: 8)
!1208 = distinct !DILexicalBlock(scope: !1205, file: !16, line: 724, column: 22)
!1209 = !DILocation(line: 724, column: 12, scope: !1208)
!1210 = !DILocation(line: 724, column: 16, scope: !1208)
!1211 = !DILocation(line: 724, column: 26, scope: !1208)
!1212 = !DILocation(line: 7, column: 42, scope: !1213, inlinedAt: !1214)
!1213 = distinct !DISubprogram(name: "@is_lower", linkageName: "@is_lower", scope: !1180, file: !1180, line: 7, scopeLine: 7, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1214 = !DILocation(line: 42, column: 38, scope: !1215, inlinedAt: !1211)
!1215 = distinct !DISubprogram(name: "is_lower", linkageName: "is_lower", scope: !1180, file: !1180, line: 42, scopeLine: 42, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1216 = !DILocation(line: 724, column: 47, scope: !1208)
!1217 = !DILocation(line: 724, column: 46, scope: !1208)
!1218 = distinct !DISubprogram(name: "to_upper_copy", linkageName: "std.core.String.to_upper_copy", scope: !16, file: !16, line: 735, type: !951, scopeLine: 735, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1219 = !DILocalVariable(name: "self", arg: 1, scope: !1218, file: !16, line: 735, type: !61)
!1220 = !DILocation(line: 735, column: 32, scope: !1218)
!1221 = !DILocalVariable(name: "allocator", arg: 2, scope: !1218, file: !16, line: 735, type: !82)
!1222 = !DILocation(line: 735, column: 48, scope: !1218)
!1223 = !DILocalVariable(name: "copy", scope: !1218, file: !16, line: 737, type: !61, align: 8)
!1224 = !DILocation(line: 737, column: 9, scope: !1218)
!1225 = !DILocation(line: 737, column: 26, scope: !1218)
!1226 = !DILocation(line: 737, column: 16, scope: !1218)
!1227 = !DILocation(line: 738, column: 2, scope: !1218)
!1228 = !DILocation(line: 739, column: 9, scope: !1218)
!1229 = distinct !DISubprogram(name: "iterator", linkageName: "std.core.String.iterator", scope: !16, file: !16, line: 742, type: !1230, scopeLine: 742, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1230 = !DISubroutineType(types: !1231)
!1231 = !{!1232, !61}
!1232 = !DICompositeType(tag: DW_TAG_structure_type, name: "StringIterator", scope: !16, file: !16, line: 3, size: 192, align: 64, elements: !1233, identifier: "std.core.string.iterator.StringIterator")
!1233 = !{!1234, !1235}
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "utf8", scope: !1232, file: !16, line: 5, baseType: !61, size: 128, align: 64)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1232, file: !16, line: 6, baseType: !68, size: 64, align: 64, offset: 128)
!1236 = !DILocalVariable(name: "self", arg: 1, scope: !1229, file: !16, line: 742, type: !61)
!1237 = !DILocation(line: 742, column: 35, scope: !1229)
!1238 = !DILocation(line: 744, column: 11, scope: !1229)
!1239 = !DILocation(line: 744, column: 17, scope: !1229)
!1240 = distinct !DISubprogram(name: "to_upper_tcopy", linkageName: "std.core.String.to_upper_tcopy", scope: !16, file: !16, line: 751, type: !1023, scopeLine: 751, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1241 = !DILocalVariable(name: "self", arg: 1, scope: !1240, file: !16, line: 751, type: !61)
!1242 = !DILocation(line: 751, column: 33, scope: !1240)
!1243 = !DILocation(line: 753, column: 28, scope: !1240)
!1244 = !DILocation(line: 753, column: 9, scope: !1240)
!1245 = distinct !DISubprogram(name: "utf8_codepoints", linkageName: "std.core.String.utf8_codepoints", scope: !16, file: !16, line: 787, type: !1246, scopeLine: 787, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1246 = !DISubroutineType(types: !1247)
!1247 = !{!68, !61}
!1248 = !DILocalVariable(name: "s", arg: 1, scope: !1245, file: !16, line: 787, type: !61)
!1249 = !DILocation(line: 787, column: 31, scope: !1245)
!1250 = !DILocalVariable(name: "len", scope: !1245, file: !16, line: 789, type: !68, align: 8)
!1251 = !DILocation(line: 789, column: 6, scope: !1245)
!1252 = !DILocation(line: 789, column: 12, scope: !1245)
!1253 = !DILocation(line: 790, column: 20, scope: !1254)
!1254 = distinct !DILexicalBlock(scope: !1245, file: !16, line: 790, column: 2)
!1255 = !DILocalVariable(name: ".temp", scope: !1254, file: !16, line: 790, type: !68, align: 8)
!1256 = !DILocalVariable(name: "c", scope: !1257, file: !16, line: 790, type: !66, align: 1)
!1257 = distinct !DILexicalBlock(scope: !1254, file: !16, line: 791, column: 2)
!1258 = !DILocation(line: 790, column: 16, scope: !1257)
!1259 = !DILocation(line: 790, column: 20, scope: !1257)
!1260 = !DILocation(line: 792, column: 7, scope: !1261)
!1261 = distinct !DILexicalBlock(scope: !1257, file: !16, line: 791, column: 2)
!1262 = !DILocation(line: 792, column: 25, scope: !1261)
!1263 = !DILocation(line: 794, column: 9, scope: !1245)
!1264 = distinct !DISubprogram(name: "is_zstr", linkageName: "std.core.String.is_zstr", scope: !16, file: !16, line: 806, type: !1265, scopeLine: 806, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1265 = !DISubroutineType(types: !1266)
!1266 = !{!119, !61}
!1267 = !DILocalVariable(name: "self", arg: 1, scope: !1264, file: !16, line: 806, type: !61)
!1268 = !DILocation(line: 806, column: 24, scope: !1264)
!1269 = !DILocation(line: 808, column: 9, scope: !1264)
!1270 = !DILocation(line: 808, column: 23, scope: !1264)
!1271 = !DILocation(line: 808, column: 34, scope: !1264)
!1272 = !DILocation(line: 808, column: 21, scope: !1264)
!1273 = distinct !DISubprogram(name: "quick_zstr", linkageName: "std.core.String.quick_zstr", scope: !16, file: !16, line: 827, type: !944, scopeLine: 827, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1274 = !DILocalVariable(name: "self", arg: 1, scope: !1273, file: !16, line: 827, type: !61)
!1275 = !DILocation(line: 827, column: 30, scope: !1273)
!1276 = !DILocation(line: 829, column: 6, scope: !1273)
!1277 = !DILocation(line: 829, column: 37, scope: !1273)
!1278 = !DILocation(line: 825, column: 10, scope: !1273)
!1279 = !DILocation(line: 825, column: 17, scope: !1273)
!1280 = !DILocation(line: 830, column: 9, scope: !1273)
!1281 = distinct !DISubprogram(name: "to_int128", linkageName: "std.core.String.to_int128", scope: !16, file: !16, line: 922, type: !1282, scopeLine: 922, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1282 = !DISubroutineType(types: !1283)
!1283 = !{!431, !1284, !61, !3}
!1284 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int128*", baseType: !1285, size: 64, align: 64, dwarfAddressSpace: 0)
!1285 = !DIBasicType(name: "int128", size: 128, encoding: DW_ATE_signed)
!1286 = !DILocalVariable(name: "self", arg: 1, scope: !1281, file: !16, line: 922, type: !61)
!1287 = !DILocation(line: 922, column: 29, scope: !1281)
!1288 = !DILocalVariable(name: "base", arg: 2, scope: !1281, file: !16, line: 922, type: !3)
!1289 = !DILocation(line: 922, column: 39, scope: !1281)
!1290 = !DILocation(line: 843, column: 11, scope: !1291, inlinedAt: !1293)
!1291 = distinct !DILexicalBlock(scope: !1292, file: !16, line: 850, column: 1)
!1292 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !16, file: !16, line: 849, scopeLine: 849, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1293 = !DILocation(line: 922, column: 53, scope: !1281)
!1294 = !DILocation(line: 843, column: 23, scope: !1291, inlinedAt: !1293)
!1295 = !DILocation(line: 922, column: 53, scope: !1291, inlinedAt: !1293)
!1296 = !DILocalVariable(name: "len", scope: !1292, file: !16, line: 851, type: !68, align: 8)
!1297 = !DILocation(line: 851, column: 6, scope: !1292, inlinedAt: !1293)
!1298 = !DILocation(line: 851, column: 12, scope: !1292, inlinedAt: !1293)
!1299 = !DILocalVariable(name: "index", scope: !1292, file: !16, line: 852, type: !68, align: 8)
!1300 = !DILocation(line: 852, column: 6, scope: !1292, inlinedAt: !1293)
!1301 = !DILocation(line: 852, column: 14, scope: !1292, inlinedAt: !1293)
!1302 = !DILocalVariable(name: "ptr", scope: !1292, file: !16, line: 853, type: !65, align: 8)
!1303 = !DILocation(line: 853, column: 8, scope: !1292, inlinedAt: !1293)
!1304 = !DILocation(line: 853, column: 14, scope: !1292, inlinedAt: !1293)
!1305 = !DILocation(line: 854, column: 2, scope: !1292, inlinedAt: !1293)
!1306 = !DILocation(line: 854, column: 9, scope: !1307, inlinedAt: !1293)
!1307 = distinct !DILexicalBlock(scope: !1292, file: !16, line: 854, column: 2)
!1308 = !DILocation(line: 854, column: 17, scope: !1307, inlinedAt: !1293)
!1309 = !DILocation(line: 854, column: 24, scope: !1307, inlinedAt: !1293)
!1310 = !DILocation(line: 854, column: 28, scope: !1307, inlinedAt: !1293)
!1311 = !DILocation(line: 19, column: 42, scope: !1312, inlinedAt: !1313)
!1312 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !1180, file: !1180, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1313 = !DILocation(line: 54, column: 38, scope: !1314, inlinedAt: !1309)
!1314 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !1180, file: !1180, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1315 = !DILocation(line: 854, column: 47, scope: !1307, inlinedAt: !1293)
!1316 = !DILocation(line: 855, column: 6, scope: !1292, inlinedAt: !1293)
!1317 = !DILocation(line: 855, column: 13, scope: !1292, inlinedAt: !1293)
!1318 = !DILocation(line: 855, column: 27, scope: !1292, inlinedAt: !1293)
!1319 = !DILocalVariable(name: "is_negative", scope: !1292, file: !16, line: 856, type: !119, align: 1)
!1320 = !DILocation(line: 856, column: 7, scope: !1292, inlinedAt: !1293)
!1321 = !DILocation(line: 857, column: 10, scope: !1322, inlinedAt: !1293)
!1322 = distinct !DILexicalBlock(scope: !1292, file: !16, line: 857, column: 2)
!1323 = !DILocation(line: 857, column: 15, scope: !1322, inlinedAt: !1293)
!1324 = !DILocation(line: 860, column: 8, scope: !1325, inlinedAt: !1293)
!1325 = distinct !DILexicalBlock(scope: !1322, file: !16, line: 860, column: 4)
!1326 = !DILocation(line: 861, column: 18, scope: !1325, inlinedAt: !1293)
!1327 = !DILocation(line: 862, column: 4, scope: !1325, inlinedAt: !1293)
!1328 = !DILocation(line: 864, column: 4, scope: !1329, inlinedAt: !1293)
!1329 = distinct !DILexicalBlock(scope: !1322, file: !16, line: 864, column: 4)
!1330 = !DILocation(line: 866, column: 4, scope: !1331, inlinedAt: !1293)
!1331 = distinct !DILexicalBlock(scope: !1322, file: !16, line: 866, column: 4)
!1332 = !DILocation(line: 868, column: 6, scope: !1292, inlinedAt: !1293)
!1333 = !DILocation(line: 868, column: 13, scope: !1292, inlinedAt: !1293)
!1334 = !DILocation(line: 868, column: 27, scope: !1292, inlinedAt: !1293)
!1335 = !DILocalVariable(name: "base_used", scope: !1292, file: !16, line: 869, type: !1285, align: 16)
!1336 = !DILocation(line: 869, column: 8, scope: !1292, inlinedAt: !1293)
!1337 = !DILocation(line: 869, column: 20, scope: !1292, inlinedAt: !1293)
!1338 = !DILocation(line: 870, column: 6, scope: !1292, inlinedAt: !1293)
!1339 = !DILocation(line: 870, column: 11, scope: !1292, inlinedAt: !1293)
!1340 = !DILocation(line: 870, column: 28, scope: !1292, inlinedAt: !1293)
!1341 = !DILocation(line: 872, column: 3, scope: !1342, inlinedAt: !1293)
!1342 = distinct !DILexicalBlock(scope: !1292, file: !16, line: 871, column: 2)
!1343 = !DILocation(line: 873, column: 7, scope: !1342, inlinedAt: !1293)
!1344 = !DILocation(line: 873, column: 16, scope: !1342, inlinedAt: !1293)
!1345 = !DILocation(line: 873, column: 28, scope: !1342, inlinedAt: !1293)
!1346 = !DILocation(line: 874, column: 11, scope: !1347, inlinedAt: !1293)
!1347 = distinct !DILexicalBlock(scope: !1342, file: !16, line: 874, column: 3)
!1348 = !DILocation(line: 874, column: 16, scope: !1347, inlinedAt: !1293)
!1349 = !DILocation(line: 878, column: 17, scope: !1350, inlinedAt: !1293)
!1350 = distinct !DILexicalBlock(scope: !1347, file: !16, line: 878, column: 5)
!1351 = !DILocation(line: 879, column: 5, scope: !1350, inlinedAt: !1293)
!1352 = !DILocation(line: 882, column: 17, scope: !1353, inlinedAt: !1293)
!1353 = distinct !DILexicalBlock(scope: !1347, file: !16, line: 882, column: 5)
!1354 = !DILocation(line: 883, column: 5, scope: !1353, inlinedAt: !1293)
!1355 = !DILocation(line: 886, column: 17, scope: !1356, inlinedAt: !1293)
!1356 = distinct !DILexicalBlock(scope: !1347, file: !16, line: 886, column: 5)
!1357 = !DILocation(line: 887, column: 5, scope: !1356, inlinedAt: !1293)
!1358 = !DILocation(line: 889, column: 5, scope: !1359, inlinedAt: !1293)
!1359 = distinct !DILexicalBlock(scope: !1347, file: !16, line: 889, column: 5)
!1360 = !DILocation(line: 891, column: 7, scope: !1342, inlinedAt: !1293)
!1361 = !DILocation(line: 891, column: 14, scope: !1342, inlinedAt: !1293)
!1362 = !DILocation(line: 891, column: 28, scope: !1342, inlinedAt: !1293)
!1363 = !DILocalVariable(name: "value", scope: !1292, file: !16, line: 893, type: !1285, align: 16)
!1364 = !DILocation(line: 893, column: 8, scope: !1292, inlinedAt: !1293)
!1365 = !DILocation(line: 893, column: 16, scope: !1292, inlinedAt: !1293)
!1366 = !DILocation(line: 894, column: 2, scope: !1292, inlinedAt: !1293)
!1367 = !DILocation(line: 894, column: 9, scope: !1368, inlinedAt: !1293)
!1368 = distinct !DILexicalBlock(scope: !1292, file: !16, line: 894, column: 2)
!1369 = !DILocation(line: 894, column: 18, scope: !1368, inlinedAt: !1293)
!1370 = !DILocalVariable(name: "c", scope: !1371, file: !16, line: 896, type: !66, align: 1)
!1371 = distinct !DILexicalBlock(scope: !1368, file: !16, line: 895, column: 2)
!1372 = !DILocation(line: 896, column: 8, scope: !1371, inlinedAt: !1293)
!1373 = !DILocation(line: 896, column: 12, scope: !1371, inlinedAt: !1293)
!1374 = !DILocation(line: 896, column: 17, scope: !1371, inlinedAt: !1293)
!1375 = !DILocation(line: 899, column: 9, scope: !1376, inlinedAt: !1293)
!1376 = distinct !DILexicalBlock(scope: !1371, file: !16, line: 897, column: 3)
!1377 = !DILocation(line: 899, column: 27, scope: !1376, inlinedAt: !1293)
!1378 = !DILocation(line: 899, column: 38, scope: !1379, inlinedAt: !1293)
!1379 = distinct !DILexicalBlock(scope: !1376, file: !16, line: 899, column: 38)
!1380 = !DILocation(line: 900, column: 9, scope: !1376, inlinedAt: !1293)
!1381 = !DILocation(line: 900, column: 38, scope: !1382, inlinedAt: !1293)
!1382 = distinct !DILexicalBlock(scope: !1376, file: !16, line: 900, column: 38)
!1383 = !DILocation(line: 901, column: 9, scope: !1376, inlinedAt: !1293)
!1384 = !DILocation(line: 901, column: 20, scope: !1376, inlinedAt: !1293)
!1385 = !DILocation(line: 901, column: 45, scope: !1386, inlinedAt: !1293)
!1386 = distinct !DILexicalBlock(scope: !1376, file: !16, line: 901, column: 38)
!1387 = !DILocation(line: 902, column: 38, scope: !1388, inlinedAt: !1293)
!1388 = distinct !DILexicalBlock(scope: !1376, file: !16, line: 902, column: 38)
!1389 = !DILocation(line: 904, column: 7, scope: !1371, inlinedAt: !1293)
!1390 = !DILocation(line: 904, column: 12, scope: !1371, inlinedAt: !1293)
!1391 = !DILocation(line: 904, column: 30, scope: !1371, inlinedAt: !1293)
!1392 = !DILocation(line: 907, column: 8, scope: !1393, inlinedAt: !1293)
!1393 = distinct !DILexicalBlock(scope: !1394, file: !16, line: 906, column: 3)
!1394 = distinct !DILexicalBlock(scope: !1371, file: !16, line: 905, column: 3)
!1395 = !DILocalVariable(name: "new_value", scope: !1396, file: !16, line: 909, type: !1285, align: 16)
!1396 = distinct !DILexicalBlock(scope: !1393, file: !16, line: 908, column: 4)
!1397 = !DILocation(line: 909, column: 11, scope: !1396, inlinedAt: !1293)
!1398 = !DILocation(line: 909, column: 23, scope: !1396, inlinedAt: !1293)
!1399 = !DILocation(line: 909, column: 31, scope: !1396, inlinedAt: !1293)
!1400 = !DILocation(line: 909, column: 43, scope: !1396, inlinedAt: !1293)
!1401 = !DILocation(line: 910, column: 9, scope: !1396, inlinedAt: !1293)
!1402 = !DILocation(line: 910, column: 21, scope: !1396, inlinedAt: !1293)
!1403 = !DILocation(line: 910, column: 35, scope: !1396, inlinedAt: !1293)
!1404 = !DILocation(line: 911, column: 13, scope: !1396, inlinedAt: !1293)
!1405 = !DILocation(line: 912, column: 5, scope: !1396, inlinedAt: !1293)
!1406 = !DILocalVariable(name: "new_value", scope: !1393, file: !16, line: 914, type: !1285, align: 16)
!1407 = !DILocation(line: 914, column: 10, scope: !1393, inlinedAt: !1293)
!1408 = !DILocation(line: 914, column: 22, scope: !1393, inlinedAt: !1293)
!1409 = !DILocation(line: 914, column: 30, scope: !1393, inlinedAt: !1293)
!1410 = !DILocation(line: 914, column: 42, scope: !1393, inlinedAt: !1293)
!1411 = !DILocation(line: 915, column: 8, scope: !1393, inlinedAt: !1293)
!1412 = !DILocation(line: 915, column: 20, scope: !1393, inlinedAt: !1293)
!1413 = !DILocation(line: 915, column: 34, scope: !1393, inlinedAt: !1293)
!1414 = !DILocation(line: 916, column: 12, scope: !1393, inlinedAt: !1293)
!1415 = !DILocation(line: 919, column: 9, scope: !1292, inlinedAt: !1293)
!1416 = distinct !DISubprogram(name: "to_long", linkageName: "std.core.String.to_long", scope: !16, file: !16, line: 923, type: !1417, scopeLine: 923, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1417 = !DISubroutineType(types: !1418)
!1418 = !{!431, !1419, !61, !3}
!1419 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "long*", baseType: !432, size: 64, align: 64, dwarfAddressSpace: 0)
!1420 = !DILocalVariable(name: "self", arg: 1, scope: !1416, file: !16, line: 923, type: !61)
!1421 = !DILocation(line: 923, column: 25, scope: !1416)
!1422 = !DILocalVariable(name: "base", arg: 2, scope: !1416, file: !16, line: 923, type: !3)
!1423 = !DILocation(line: 923, column: 35, scope: !1416)
!1424 = !DILocation(line: 843, column: 11, scope: !1425, inlinedAt: !1427)
!1425 = distinct !DILexicalBlock(scope: !1426, file: !16, line: 850, column: 1)
!1426 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !16, file: !16, line: 849, scopeLine: 849, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1427 = !DILocation(line: 923, column: 49, scope: !1416)
!1428 = !DILocation(line: 843, column: 23, scope: !1425, inlinedAt: !1427)
!1429 = !DILocation(line: 923, column: 49, scope: !1425, inlinedAt: !1427)
!1430 = !DILocalVariable(name: "len", scope: !1426, file: !16, line: 851, type: !68, align: 8)
!1431 = !DILocation(line: 851, column: 6, scope: !1426, inlinedAt: !1427)
!1432 = !DILocation(line: 851, column: 12, scope: !1426, inlinedAt: !1427)
!1433 = !DILocalVariable(name: "index", scope: !1426, file: !16, line: 852, type: !68, align: 8)
!1434 = !DILocation(line: 852, column: 6, scope: !1426, inlinedAt: !1427)
!1435 = !DILocation(line: 852, column: 14, scope: !1426, inlinedAt: !1427)
!1436 = !DILocalVariable(name: "ptr", scope: !1426, file: !16, line: 853, type: !65, align: 8)
!1437 = !DILocation(line: 853, column: 8, scope: !1426, inlinedAt: !1427)
!1438 = !DILocation(line: 853, column: 14, scope: !1426, inlinedAt: !1427)
!1439 = !DILocation(line: 854, column: 2, scope: !1426, inlinedAt: !1427)
!1440 = !DILocation(line: 854, column: 9, scope: !1441, inlinedAt: !1427)
!1441 = distinct !DILexicalBlock(scope: !1426, file: !16, line: 854, column: 2)
!1442 = !DILocation(line: 854, column: 17, scope: !1441, inlinedAt: !1427)
!1443 = !DILocation(line: 854, column: 24, scope: !1441, inlinedAt: !1427)
!1444 = !DILocation(line: 854, column: 28, scope: !1441, inlinedAt: !1427)
!1445 = !DILocation(line: 19, column: 42, scope: !1446, inlinedAt: !1447)
!1446 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !1180, file: !1180, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1447 = !DILocation(line: 54, column: 38, scope: !1448, inlinedAt: !1443)
!1448 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !1180, file: !1180, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1449 = !DILocation(line: 854, column: 47, scope: !1441, inlinedAt: !1427)
!1450 = !DILocation(line: 855, column: 6, scope: !1426, inlinedAt: !1427)
!1451 = !DILocation(line: 855, column: 13, scope: !1426, inlinedAt: !1427)
!1452 = !DILocation(line: 855, column: 27, scope: !1426, inlinedAt: !1427)
!1453 = !DILocalVariable(name: "is_negative", scope: !1426, file: !16, line: 856, type: !119, align: 1)
!1454 = !DILocation(line: 856, column: 7, scope: !1426, inlinedAt: !1427)
!1455 = !DILocation(line: 857, column: 10, scope: !1456, inlinedAt: !1427)
!1456 = distinct !DILexicalBlock(scope: !1426, file: !16, line: 857, column: 2)
!1457 = !DILocation(line: 857, column: 15, scope: !1456, inlinedAt: !1427)
!1458 = !DILocation(line: 860, column: 8, scope: !1459, inlinedAt: !1427)
!1459 = distinct !DILexicalBlock(scope: !1456, file: !16, line: 860, column: 4)
!1460 = !DILocation(line: 861, column: 18, scope: !1459, inlinedAt: !1427)
!1461 = !DILocation(line: 862, column: 4, scope: !1459, inlinedAt: !1427)
!1462 = !DILocation(line: 864, column: 4, scope: !1463, inlinedAt: !1427)
!1463 = distinct !DILexicalBlock(scope: !1456, file: !16, line: 864, column: 4)
!1464 = !DILocation(line: 866, column: 4, scope: !1465, inlinedAt: !1427)
!1465 = distinct !DILexicalBlock(scope: !1456, file: !16, line: 866, column: 4)
!1466 = !DILocation(line: 868, column: 6, scope: !1426, inlinedAt: !1427)
!1467 = !DILocation(line: 868, column: 13, scope: !1426, inlinedAt: !1427)
!1468 = !DILocation(line: 868, column: 27, scope: !1426, inlinedAt: !1427)
!1469 = !DILocalVariable(name: "base_used", scope: !1426, file: !16, line: 869, type: !432, align: 8)
!1470 = !DILocation(line: 869, column: 8, scope: !1426, inlinedAt: !1427)
!1471 = !DILocation(line: 869, column: 20, scope: !1426, inlinedAt: !1427)
!1472 = !DILocation(line: 870, column: 6, scope: !1426, inlinedAt: !1427)
!1473 = !DILocation(line: 870, column: 11, scope: !1426, inlinedAt: !1427)
!1474 = !DILocation(line: 870, column: 28, scope: !1426, inlinedAt: !1427)
!1475 = !DILocation(line: 872, column: 3, scope: !1476, inlinedAt: !1427)
!1476 = distinct !DILexicalBlock(scope: !1426, file: !16, line: 871, column: 2)
!1477 = !DILocation(line: 873, column: 7, scope: !1476, inlinedAt: !1427)
!1478 = !DILocation(line: 873, column: 16, scope: !1476, inlinedAt: !1427)
!1479 = !DILocation(line: 873, column: 28, scope: !1476, inlinedAt: !1427)
!1480 = !DILocation(line: 874, column: 11, scope: !1481, inlinedAt: !1427)
!1481 = distinct !DILexicalBlock(scope: !1476, file: !16, line: 874, column: 3)
!1482 = !DILocation(line: 874, column: 16, scope: !1481, inlinedAt: !1427)
!1483 = !DILocation(line: 878, column: 17, scope: !1484, inlinedAt: !1427)
!1484 = distinct !DILexicalBlock(scope: !1481, file: !16, line: 878, column: 5)
!1485 = !DILocation(line: 879, column: 5, scope: !1484, inlinedAt: !1427)
!1486 = !DILocation(line: 882, column: 17, scope: !1487, inlinedAt: !1427)
!1487 = distinct !DILexicalBlock(scope: !1481, file: !16, line: 882, column: 5)
!1488 = !DILocation(line: 883, column: 5, scope: !1487, inlinedAt: !1427)
!1489 = !DILocation(line: 886, column: 17, scope: !1490, inlinedAt: !1427)
!1490 = distinct !DILexicalBlock(scope: !1481, file: !16, line: 886, column: 5)
!1491 = !DILocation(line: 887, column: 5, scope: !1490, inlinedAt: !1427)
!1492 = !DILocation(line: 889, column: 5, scope: !1493, inlinedAt: !1427)
!1493 = distinct !DILexicalBlock(scope: !1481, file: !16, line: 889, column: 5)
!1494 = !DILocation(line: 891, column: 7, scope: !1476, inlinedAt: !1427)
!1495 = !DILocation(line: 891, column: 14, scope: !1476, inlinedAt: !1427)
!1496 = !DILocation(line: 891, column: 28, scope: !1476, inlinedAt: !1427)
!1497 = !DILocalVariable(name: "value", scope: !1426, file: !16, line: 893, type: !432, align: 8)
!1498 = !DILocation(line: 893, column: 8, scope: !1426, inlinedAt: !1427)
!1499 = !DILocation(line: 893, column: 16, scope: !1426, inlinedAt: !1427)
!1500 = !DILocation(line: 894, column: 2, scope: !1426, inlinedAt: !1427)
!1501 = !DILocation(line: 894, column: 9, scope: !1502, inlinedAt: !1427)
!1502 = distinct !DILexicalBlock(scope: !1426, file: !16, line: 894, column: 2)
!1503 = !DILocation(line: 894, column: 18, scope: !1502, inlinedAt: !1427)
!1504 = !DILocalVariable(name: "c", scope: !1505, file: !16, line: 896, type: !66, align: 1)
!1505 = distinct !DILexicalBlock(scope: !1502, file: !16, line: 895, column: 2)
!1506 = !DILocation(line: 896, column: 8, scope: !1505, inlinedAt: !1427)
!1507 = !DILocation(line: 896, column: 12, scope: !1505, inlinedAt: !1427)
!1508 = !DILocation(line: 896, column: 17, scope: !1505, inlinedAt: !1427)
!1509 = !DILocation(line: 899, column: 9, scope: !1510, inlinedAt: !1427)
!1510 = distinct !DILexicalBlock(scope: !1505, file: !16, line: 897, column: 3)
!1511 = !DILocation(line: 899, column: 27, scope: !1510, inlinedAt: !1427)
!1512 = !DILocation(line: 899, column: 38, scope: !1513, inlinedAt: !1427)
!1513 = distinct !DILexicalBlock(scope: !1510, file: !16, line: 899, column: 38)
!1514 = !DILocation(line: 900, column: 9, scope: !1510, inlinedAt: !1427)
!1515 = !DILocation(line: 900, column: 38, scope: !1516, inlinedAt: !1427)
!1516 = distinct !DILexicalBlock(scope: !1510, file: !16, line: 900, column: 38)
!1517 = !DILocation(line: 901, column: 9, scope: !1510, inlinedAt: !1427)
!1518 = !DILocation(line: 901, column: 20, scope: !1510, inlinedAt: !1427)
!1519 = !DILocation(line: 901, column: 45, scope: !1520, inlinedAt: !1427)
!1520 = distinct !DILexicalBlock(scope: !1510, file: !16, line: 901, column: 38)
!1521 = !DILocation(line: 902, column: 38, scope: !1522, inlinedAt: !1427)
!1522 = distinct !DILexicalBlock(scope: !1510, file: !16, line: 902, column: 38)
!1523 = !DILocation(line: 904, column: 7, scope: !1505, inlinedAt: !1427)
!1524 = !DILocation(line: 904, column: 12, scope: !1505, inlinedAt: !1427)
!1525 = !DILocation(line: 904, column: 30, scope: !1505, inlinedAt: !1427)
!1526 = !DILocation(line: 907, column: 8, scope: !1527, inlinedAt: !1427)
!1527 = distinct !DILexicalBlock(scope: !1528, file: !16, line: 906, column: 3)
!1528 = distinct !DILexicalBlock(scope: !1505, file: !16, line: 905, column: 3)
!1529 = !DILocalVariable(name: "new_value", scope: !1530, file: !16, line: 909, type: !432, align: 8)
!1530 = distinct !DILexicalBlock(scope: !1527, file: !16, line: 908, column: 4)
!1531 = !DILocation(line: 909, column: 11, scope: !1530, inlinedAt: !1427)
!1532 = !DILocation(line: 909, column: 23, scope: !1530, inlinedAt: !1427)
!1533 = !DILocation(line: 909, column: 31, scope: !1530, inlinedAt: !1427)
!1534 = !DILocation(line: 909, column: 43, scope: !1530, inlinedAt: !1427)
!1535 = !DILocation(line: 910, column: 9, scope: !1530, inlinedAt: !1427)
!1536 = !DILocation(line: 910, column: 21, scope: !1530, inlinedAt: !1427)
!1537 = !DILocation(line: 910, column: 35, scope: !1530, inlinedAt: !1427)
!1538 = !DILocation(line: 911, column: 13, scope: !1530, inlinedAt: !1427)
!1539 = !DILocation(line: 912, column: 5, scope: !1530, inlinedAt: !1427)
!1540 = !DILocalVariable(name: "new_value", scope: !1527, file: !16, line: 914, type: !432, align: 8)
!1541 = !DILocation(line: 914, column: 10, scope: !1527, inlinedAt: !1427)
!1542 = !DILocation(line: 914, column: 22, scope: !1527, inlinedAt: !1427)
!1543 = !DILocation(line: 914, column: 30, scope: !1527, inlinedAt: !1427)
!1544 = !DILocation(line: 914, column: 42, scope: !1527, inlinedAt: !1427)
!1545 = !DILocation(line: 915, column: 8, scope: !1527, inlinedAt: !1427)
!1546 = !DILocation(line: 915, column: 20, scope: !1527, inlinedAt: !1427)
!1547 = !DILocation(line: 915, column: 34, scope: !1527, inlinedAt: !1427)
!1548 = !DILocation(line: 916, column: 12, scope: !1527, inlinedAt: !1427)
!1549 = !DILocation(line: 919, column: 9, scope: !1426, inlinedAt: !1427)
!1550 = distinct !DISubprogram(name: "to_int", linkageName: "std.core.String.to_int", scope: !16, file: !16, line: 924, type: !1551, scopeLine: 924, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1551 = !DISubroutineType(types: !1552)
!1552 = !{!431, !1553, !61, !3}
!1553 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!1554 = !DILocalVariable(name: "self", arg: 1, scope: !1550, file: !16, line: 924, type: !61)
!1555 = !DILocation(line: 924, column: 23, scope: !1550)
!1556 = !DILocalVariable(name: "base", arg: 2, scope: !1550, file: !16, line: 924, type: !3)
!1557 = !DILocation(line: 924, column: 33, scope: !1550)
!1558 = !DILocation(line: 843, column: 11, scope: !1559, inlinedAt: !1561)
!1559 = distinct !DILexicalBlock(scope: !1560, file: !16, line: 850, column: 1)
!1560 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !16, file: !16, line: 849, scopeLine: 849, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1561 = !DILocation(line: 924, column: 47, scope: !1550)
!1562 = !DILocation(line: 843, column: 23, scope: !1559, inlinedAt: !1561)
!1563 = !DILocation(line: 924, column: 47, scope: !1559, inlinedAt: !1561)
!1564 = !DILocalVariable(name: "len", scope: !1560, file: !16, line: 851, type: !68, align: 8)
!1565 = !DILocation(line: 851, column: 6, scope: !1560, inlinedAt: !1561)
!1566 = !DILocation(line: 851, column: 12, scope: !1560, inlinedAt: !1561)
!1567 = !DILocalVariable(name: "index", scope: !1560, file: !16, line: 852, type: !68, align: 8)
!1568 = !DILocation(line: 852, column: 6, scope: !1560, inlinedAt: !1561)
!1569 = !DILocation(line: 852, column: 14, scope: !1560, inlinedAt: !1561)
!1570 = !DILocalVariable(name: "ptr", scope: !1560, file: !16, line: 853, type: !65, align: 8)
!1571 = !DILocation(line: 853, column: 8, scope: !1560, inlinedAt: !1561)
!1572 = !DILocation(line: 853, column: 14, scope: !1560, inlinedAt: !1561)
!1573 = !DILocation(line: 854, column: 2, scope: !1560, inlinedAt: !1561)
!1574 = !DILocation(line: 854, column: 9, scope: !1575, inlinedAt: !1561)
!1575 = distinct !DILexicalBlock(scope: !1560, file: !16, line: 854, column: 2)
!1576 = !DILocation(line: 854, column: 17, scope: !1575, inlinedAt: !1561)
!1577 = !DILocation(line: 854, column: 24, scope: !1575, inlinedAt: !1561)
!1578 = !DILocation(line: 854, column: 28, scope: !1575, inlinedAt: !1561)
!1579 = !DILocation(line: 19, column: 42, scope: !1580, inlinedAt: !1581)
!1580 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !1180, file: !1180, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1581 = !DILocation(line: 54, column: 38, scope: !1582, inlinedAt: !1577)
!1582 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !1180, file: !1180, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1583 = !DILocation(line: 854, column: 47, scope: !1575, inlinedAt: !1561)
!1584 = !DILocation(line: 855, column: 6, scope: !1560, inlinedAt: !1561)
!1585 = !DILocation(line: 855, column: 13, scope: !1560, inlinedAt: !1561)
!1586 = !DILocation(line: 855, column: 27, scope: !1560, inlinedAt: !1561)
!1587 = !DILocalVariable(name: "is_negative", scope: !1560, file: !16, line: 856, type: !119, align: 1)
!1588 = !DILocation(line: 856, column: 7, scope: !1560, inlinedAt: !1561)
!1589 = !DILocation(line: 857, column: 10, scope: !1590, inlinedAt: !1561)
!1590 = distinct !DILexicalBlock(scope: !1560, file: !16, line: 857, column: 2)
!1591 = !DILocation(line: 857, column: 15, scope: !1590, inlinedAt: !1561)
!1592 = !DILocation(line: 860, column: 8, scope: !1593, inlinedAt: !1561)
!1593 = distinct !DILexicalBlock(scope: !1590, file: !16, line: 860, column: 4)
!1594 = !DILocation(line: 861, column: 18, scope: !1593, inlinedAt: !1561)
!1595 = !DILocation(line: 862, column: 4, scope: !1593, inlinedAt: !1561)
!1596 = !DILocation(line: 864, column: 4, scope: !1597, inlinedAt: !1561)
!1597 = distinct !DILexicalBlock(scope: !1590, file: !16, line: 864, column: 4)
!1598 = !DILocation(line: 866, column: 4, scope: !1599, inlinedAt: !1561)
!1599 = distinct !DILexicalBlock(scope: !1590, file: !16, line: 866, column: 4)
!1600 = !DILocation(line: 868, column: 6, scope: !1560, inlinedAt: !1561)
!1601 = !DILocation(line: 868, column: 13, scope: !1560, inlinedAt: !1561)
!1602 = !DILocation(line: 868, column: 27, scope: !1560, inlinedAt: !1561)
!1603 = !DILocalVariable(name: "base_used", scope: !1560, file: !16, line: 869, type: !3, align: 4)
!1604 = !DILocation(line: 869, column: 8, scope: !1560, inlinedAt: !1561)
!1605 = !DILocation(line: 869, column: 20, scope: !1560, inlinedAt: !1561)
!1606 = !DILocation(line: 870, column: 6, scope: !1560, inlinedAt: !1561)
!1607 = !DILocation(line: 870, column: 11, scope: !1560, inlinedAt: !1561)
!1608 = !DILocation(line: 870, column: 28, scope: !1560, inlinedAt: !1561)
!1609 = !DILocation(line: 872, column: 3, scope: !1610, inlinedAt: !1561)
!1610 = distinct !DILexicalBlock(scope: !1560, file: !16, line: 871, column: 2)
!1611 = !DILocation(line: 873, column: 7, scope: !1610, inlinedAt: !1561)
!1612 = !DILocation(line: 873, column: 16, scope: !1610, inlinedAt: !1561)
!1613 = !DILocation(line: 873, column: 28, scope: !1610, inlinedAt: !1561)
!1614 = !DILocation(line: 874, column: 11, scope: !1615, inlinedAt: !1561)
!1615 = distinct !DILexicalBlock(scope: !1610, file: !16, line: 874, column: 3)
!1616 = !DILocation(line: 874, column: 16, scope: !1615, inlinedAt: !1561)
!1617 = !DILocation(line: 878, column: 17, scope: !1618, inlinedAt: !1561)
!1618 = distinct !DILexicalBlock(scope: !1615, file: !16, line: 878, column: 5)
!1619 = !DILocation(line: 879, column: 5, scope: !1618, inlinedAt: !1561)
!1620 = !DILocation(line: 882, column: 17, scope: !1621, inlinedAt: !1561)
!1621 = distinct !DILexicalBlock(scope: !1615, file: !16, line: 882, column: 5)
!1622 = !DILocation(line: 883, column: 5, scope: !1621, inlinedAt: !1561)
!1623 = !DILocation(line: 886, column: 17, scope: !1624, inlinedAt: !1561)
!1624 = distinct !DILexicalBlock(scope: !1615, file: !16, line: 886, column: 5)
!1625 = !DILocation(line: 887, column: 5, scope: !1624, inlinedAt: !1561)
!1626 = !DILocation(line: 889, column: 5, scope: !1627, inlinedAt: !1561)
!1627 = distinct !DILexicalBlock(scope: !1615, file: !16, line: 889, column: 5)
!1628 = !DILocation(line: 891, column: 7, scope: !1610, inlinedAt: !1561)
!1629 = !DILocation(line: 891, column: 14, scope: !1610, inlinedAt: !1561)
!1630 = !DILocation(line: 891, column: 28, scope: !1610, inlinedAt: !1561)
!1631 = !DILocalVariable(name: "value", scope: !1560, file: !16, line: 893, type: !3, align: 4)
!1632 = !DILocation(line: 893, column: 8, scope: !1560, inlinedAt: !1561)
!1633 = !DILocation(line: 893, column: 16, scope: !1560, inlinedAt: !1561)
!1634 = !DILocation(line: 894, column: 2, scope: !1560, inlinedAt: !1561)
!1635 = !DILocation(line: 894, column: 9, scope: !1636, inlinedAt: !1561)
!1636 = distinct !DILexicalBlock(scope: !1560, file: !16, line: 894, column: 2)
!1637 = !DILocation(line: 894, column: 18, scope: !1636, inlinedAt: !1561)
!1638 = !DILocalVariable(name: "c", scope: !1639, file: !16, line: 896, type: !66, align: 1)
!1639 = distinct !DILexicalBlock(scope: !1636, file: !16, line: 895, column: 2)
!1640 = !DILocation(line: 896, column: 8, scope: !1639, inlinedAt: !1561)
!1641 = !DILocation(line: 896, column: 12, scope: !1639, inlinedAt: !1561)
!1642 = !DILocation(line: 896, column: 17, scope: !1639, inlinedAt: !1561)
!1643 = !DILocation(line: 899, column: 9, scope: !1644, inlinedAt: !1561)
!1644 = distinct !DILexicalBlock(scope: !1639, file: !16, line: 897, column: 3)
!1645 = !DILocation(line: 899, column: 27, scope: !1644, inlinedAt: !1561)
!1646 = !DILocation(line: 899, column: 38, scope: !1647, inlinedAt: !1561)
!1647 = distinct !DILexicalBlock(scope: !1644, file: !16, line: 899, column: 38)
!1648 = !DILocation(line: 900, column: 9, scope: !1644, inlinedAt: !1561)
!1649 = !DILocation(line: 900, column: 38, scope: !1650, inlinedAt: !1561)
!1650 = distinct !DILexicalBlock(scope: !1644, file: !16, line: 900, column: 38)
!1651 = !DILocation(line: 901, column: 9, scope: !1644, inlinedAt: !1561)
!1652 = !DILocation(line: 901, column: 20, scope: !1644, inlinedAt: !1561)
!1653 = !DILocation(line: 901, column: 45, scope: !1654, inlinedAt: !1561)
!1654 = distinct !DILexicalBlock(scope: !1644, file: !16, line: 901, column: 38)
!1655 = !DILocation(line: 902, column: 38, scope: !1656, inlinedAt: !1561)
!1656 = distinct !DILexicalBlock(scope: !1644, file: !16, line: 902, column: 38)
!1657 = !DILocation(line: 904, column: 7, scope: !1639, inlinedAt: !1561)
!1658 = !DILocation(line: 904, column: 12, scope: !1639, inlinedAt: !1561)
!1659 = !DILocation(line: 904, column: 30, scope: !1639, inlinedAt: !1561)
!1660 = !DILocation(line: 907, column: 8, scope: !1661, inlinedAt: !1561)
!1661 = distinct !DILexicalBlock(scope: !1662, file: !16, line: 906, column: 3)
!1662 = distinct !DILexicalBlock(scope: !1639, file: !16, line: 905, column: 3)
!1663 = !DILocalVariable(name: "new_value", scope: !1664, file: !16, line: 909, type: !3, align: 4)
!1664 = distinct !DILexicalBlock(scope: !1661, file: !16, line: 908, column: 4)
!1665 = !DILocation(line: 909, column: 11, scope: !1664, inlinedAt: !1561)
!1666 = !DILocation(line: 909, column: 23, scope: !1664, inlinedAt: !1561)
!1667 = !DILocation(line: 909, column: 31, scope: !1664, inlinedAt: !1561)
!1668 = !DILocation(line: 909, column: 43, scope: !1664, inlinedAt: !1561)
!1669 = !DILocation(line: 910, column: 9, scope: !1664, inlinedAt: !1561)
!1670 = !DILocation(line: 910, column: 21, scope: !1664, inlinedAt: !1561)
!1671 = !DILocation(line: 910, column: 35, scope: !1664, inlinedAt: !1561)
!1672 = !DILocation(line: 911, column: 13, scope: !1664, inlinedAt: !1561)
!1673 = !DILocation(line: 912, column: 5, scope: !1664, inlinedAt: !1561)
!1674 = !DILocalVariable(name: "new_value", scope: !1661, file: !16, line: 914, type: !3, align: 4)
!1675 = !DILocation(line: 914, column: 10, scope: !1661, inlinedAt: !1561)
!1676 = !DILocation(line: 914, column: 22, scope: !1661, inlinedAt: !1561)
!1677 = !DILocation(line: 914, column: 30, scope: !1661, inlinedAt: !1561)
!1678 = !DILocation(line: 914, column: 42, scope: !1661, inlinedAt: !1561)
!1679 = !DILocation(line: 915, column: 8, scope: !1661, inlinedAt: !1561)
!1680 = !DILocation(line: 915, column: 20, scope: !1661, inlinedAt: !1561)
!1681 = !DILocation(line: 915, column: 34, scope: !1661, inlinedAt: !1561)
!1682 = !DILocation(line: 916, column: 12, scope: !1661, inlinedAt: !1561)
!1683 = !DILocation(line: 919, column: 9, scope: !1560, inlinedAt: !1561)
!1684 = distinct !DISubprogram(name: "to_short", linkageName: "std.core.String.to_short", scope: !16, file: !16, line: 925, type: !1685, scopeLine: 925, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1685 = !DISubroutineType(types: !1686)
!1686 = !{!431, !1687, !61, !3}
!1687 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "short*", baseType: !1688, size: 64, align: 64, dwarfAddressSpace: 0)
!1688 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!1689 = !DILocalVariable(name: "self", arg: 1, scope: !1684, file: !16, line: 925, type: !61)
!1690 = !DILocation(line: 925, column: 27, scope: !1684)
!1691 = !DILocalVariable(name: "base", arg: 2, scope: !1684, file: !16, line: 925, type: !3)
!1692 = !DILocation(line: 925, column: 37, scope: !1684)
!1693 = !DILocation(line: 843, column: 11, scope: !1694, inlinedAt: !1696)
!1694 = distinct !DILexicalBlock(scope: !1695, file: !16, line: 850, column: 1)
!1695 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !16, file: !16, line: 849, scopeLine: 849, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1696 = !DILocation(line: 925, column: 51, scope: !1684)
!1697 = !DILocation(line: 843, column: 23, scope: !1694, inlinedAt: !1696)
!1698 = !DILocation(line: 925, column: 51, scope: !1694, inlinedAt: !1696)
!1699 = !DILocalVariable(name: "len", scope: !1695, file: !16, line: 851, type: !68, align: 8)
!1700 = !DILocation(line: 851, column: 6, scope: !1695, inlinedAt: !1696)
!1701 = !DILocation(line: 851, column: 12, scope: !1695, inlinedAt: !1696)
!1702 = !DILocalVariable(name: "index", scope: !1695, file: !16, line: 852, type: !68, align: 8)
!1703 = !DILocation(line: 852, column: 6, scope: !1695, inlinedAt: !1696)
!1704 = !DILocation(line: 852, column: 14, scope: !1695, inlinedAt: !1696)
!1705 = !DILocalVariable(name: "ptr", scope: !1695, file: !16, line: 853, type: !65, align: 8)
!1706 = !DILocation(line: 853, column: 8, scope: !1695, inlinedAt: !1696)
!1707 = !DILocation(line: 853, column: 14, scope: !1695, inlinedAt: !1696)
!1708 = !DILocation(line: 854, column: 2, scope: !1695, inlinedAt: !1696)
!1709 = !DILocation(line: 854, column: 9, scope: !1710, inlinedAt: !1696)
!1710 = distinct !DILexicalBlock(scope: !1695, file: !16, line: 854, column: 2)
!1711 = !DILocation(line: 854, column: 17, scope: !1710, inlinedAt: !1696)
!1712 = !DILocation(line: 854, column: 24, scope: !1710, inlinedAt: !1696)
!1713 = !DILocation(line: 854, column: 28, scope: !1710, inlinedAt: !1696)
!1714 = !DILocation(line: 19, column: 42, scope: !1715, inlinedAt: !1716)
!1715 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !1180, file: !1180, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1716 = !DILocation(line: 54, column: 38, scope: !1717, inlinedAt: !1712)
!1717 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !1180, file: !1180, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1718 = !DILocation(line: 854, column: 47, scope: !1710, inlinedAt: !1696)
!1719 = !DILocation(line: 855, column: 6, scope: !1695, inlinedAt: !1696)
!1720 = !DILocation(line: 855, column: 13, scope: !1695, inlinedAt: !1696)
!1721 = !DILocation(line: 855, column: 27, scope: !1695, inlinedAt: !1696)
!1722 = !DILocalVariable(name: "is_negative", scope: !1695, file: !16, line: 856, type: !119, align: 1)
!1723 = !DILocation(line: 856, column: 7, scope: !1695, inlinedAt: !1696)
!1724 = !DILocation(line: 857, column: 10, scope: !1725, inlinedAt: !1696)
!1725 = distinct !DILexicalBlock(scope: !1695, file: !16, line: 857, column: 2)
!1726 = !DILocation(line: 857, column: 15, scope: !1725, inlinedAt: !1696)
!1727 = !DILocation(line: 860, column: 8, scope: !1728, inlinedAt: !1696)
!1728 = distinct !DILexicalBlock(scope: !1725, file: !16, line: 860, column: 4)
!1729 = !DILocation(line: 861, column: 18, scope: !1728, inlinedAt: !1696)
!1730 = !DILocation(line: 862, column: 4, scope: !1728, inlinedAt: !1696)
!1731 = !DILocation(line: 864, column: 4, scope: !1732, inlinedAt: !1696)
!1732 = distinct !DILexicalBlock(scope: !1725, file: !16, line: 864, column: 4)
!1733 = !DILocation(line: 866, column: 4, scope: !1734, inlinedAt: !1696)
!1734 = distinct !DILexicalBlock(scope: !1725, file: !16, line: 866, column: 4)
!1735 = !DILocation(line: 868, column: 6, scope: !1695, inlinedAt: !1696)
!1736 = !DILocation(line: 868, column: 13, scope: !1695, inlinedAt: !1696)
!1737 = !DILocation(line: 868, column: 27, scope: !1695, inlinedAt: !1696)
!1738 = !DILocalVariable(name: "base_used", scope: !1695, file: !16, line: 869, type: !1688, align: 2)
!1739 = !DILocation(line: 869, column: 8, scope: !1695, inlinedAt: !1696)
!1740 = !DILocation(line: 869, column: 20, scope: !1695, inlinedAt: !1696)
!1741 = !DILocation(line: 870, column: 6, scope: !1695, inlinedAt: !1696)
!1742 = !DILocation(line: 870, column: 11, scope: !1695, inlinedAt: !1696)
!1743 = !DILocation(line: 870, column: 28, scope: !1695, inlinedAt: !1696)
!1744 = !DILocation(line: 872, column: 3, scope: !1745, inlinedAt: !1696)
!1745 = distinct !DILexicalBlock(scope: !1695, file: !16, line: 871, column: 2)
!1746 = !DILocation(line: 873, column: 7, scope: !1745, inlinedAt: !1696)
!1747 = !DILocation(line: 873, column: 16, scope: !1745, inlinedAt: !1696)
!1748 = !DILocation(line: 873, column: 28, scope: !1745, inlinedAt: !1696)
!1749 = !DILocation(line: 874, column: 11, scope: !1750, inlinedAt: !1696)
!1750 = distinct !DILexicalBlock(scope: !1745, file: !16, line: 874, column: 3)
!1751 = !DILocation(line: 874, column: 16, scope: !1750, inlinedAt: !1696)
!1752 = !DILocation(line: 878, column: 17, scope: !1753, inlinedAt: !1696)
!1753 = distinct !DILexicalBlock(scope: !1750, file: !16, line: 878, column: 5)
!1754 = !DILocation(line: 879, column: 5, scope: !1753, inlinedAt: !1696)
!1755 = !DILocation(line: 882, column: 17, scope: !1756, inlinedAt: !1696)
!1756 = distinct !DILexicalBlock(scope: !1750, file: !16, line: 882, column: 5)
!1757 = !DILocation(line: 883, column: 5, scope: !1756, inlinedAt: !1696)
!1758 = !DILocation(line: 886, column: 17, scope: !1759, inlinedAt: !1696)
!1759 = distinct !DILexicalBlock(scope: !1750, file: !16, line: 886, column: 5)
!1760 = !DILocation(line: 887, column: 5, scope: !1759, inlinedAt: !1696)
!1761 = !DILocation(line: 889, column: 5, scope: !1762, inlinedAt: !1696)
!1762 = distinct !DILexicalBlock(scope: !1750, file: !16, line: 889, column: 5)
!1763 = !DILocation(line: 891, column: 7, scope: !1745, inlinedAt: !1696)
!1764 = !DILocation(line: 891, column: 14, scope: !1745, inlinedAt: !1696)
!1765 = !DILocation(line: 891, column: 28, scope: !1745, inlinedAt: !1696)
!1766 = !DILocalVariable(name: "value", scope: !1695, file: !16, line: 893, type: !1688, align: 2)
!1767 = !DILocation(line: 893, column: 8, scope: !1695, inlinedAt: !1696)
!1768 = !DILocation(line: 893, column: 16, scope: !1695, inlinedAt: !1696)
!1769 = !DILocation(line: 894, column: 2, scope: !1695, inlinedAt: !1696)
!1770 = !DILocation(line: 894, column: 9, scope: !1771, inlinedAt: !1696)
!1771 = distinct !DILexicalBlock(scope: !1695, file: !16, line: 894, column: 2)
!1772 = !DILocation(line: 894, column: 18, scope: !1771, inlinedAt: !1696)
!1773 = !DILocalVariable(name: "c", scope: !1774, file: !16, line: 896, type: !66, align: 1)
!1774 = distinct !DILexicalBlock(scope: !1771, file: !16, line: 895, column: 2)
!1775 = !DILocation(line: 896, column: 8, scope: !1774, inlinedAt: !1696)
!1776 = !DILocation(line: 896, column: 12, scope: !1774, inlinedAt: !1696)
!1777 = !DILocation(line: 896, column: 17, scope: !1774, inlinedAt: !1696)
!1778 = !DILocation(line: 899, column: 9, scope: !1779, inlinedAt: !1696)
!1779 = distinct !DILexicalBlock(scope: !1774, file: !16, line: 897, column: 3)
!1780 = !DILocation(line: 899, column: 27, scope: !1779, inlinedAt: !1696)
!1781 = !DILocation(line: 899, column: 38, scope: !1782, inlinedAt: !1696)
!1782 = distinct !DILexicalBlock(scope: !1779, file: !16, line: 899, column: 38)
!1783 = !DILocation(line: 900, column: 9, scope: !1779, inlinedAt: !1696)
!1784 = !DILocation(line: 900, column: 38, scope: !1785, inlinedAt: !1696)
!1785 = distinct !DILexicalBlock(scope: !1779, file: !16, line: 900, column: 38)
!1786 = !DILocation(line: 901, column: 9, scope: !1779, inlinedAt: !1696)
!1787 = !DILocation(line: 901, column: 20, scope: !1779, inlinedAt: !1696)
!1788 = !DILocation(line: 901, column: 45, scope: !1789, inlinedAt: !1696)
!1789 = distinct !DILexicalBlock(scope: !1779, file: !16, line: 901, column: 38)
!1790 = !DILocation(line: 902, column: 38, scope: !1791, inlinedAt: !1696)
!1791 = distinct !DILexicalBlock(scope: !1779, file: !16, line: 902, column: 38)
!1792 = !DILocation(line: 904, column: 7, scope: !1774, inlinedAt: !1696)
!1793 = !DILocation(line: 904, column: 12, scope: !1774, inlinedAt: !1696)
!1794 = !DILocation(line: 904, column: 30, scope: !1774, inlinedAt: !1696)
!1795 = !DILocation(line: 907, column: 8, scope: !1796, inlinedAt: !1696)
!1796 = distinct !DILexicalBlock(scope: !1797, file: !16, line: 906, column: 3)
!1797 = distinct !DILexicalBlock(scope: !1774, file: !16, line: 905, column: 3)
!1798 = !DILocalVariable(name: "new_value", scope: !1799, file: !16, line: 909, type: !1688, align: 2)
!1799 = distinct !DILexicalBlock(scope: !1796, file: !16, line: 908, column: 4)
!1800 = !DILocation(line: 909, column: 11, scope: !1799, inlinedAt: !1696)
!1801 = !DILocation(line: 909, column: 23, scope: !1799, inlinedAt: !1696)
!1802 = !DILocation(line: 909, column: 31, scope: !1799, inlinedAt: !1696)
!1803 = !DILocation(line: 909, column: 43, scope: !1799, inlinedAt: !1696)
!1804 = !DILocation(line: 910, column: 9, scope: !1799, inlinedAt: !1696)
!1805 = !DILocation(line: 910, column: 21, scope: !1799, inlinedAt: !1696)
!1806 = !DILocation(line: 910, column: 35, scope: !1799, inlinedAt: !1696)
!1807 = !DILocation(line: 911, column: 13, scope: !1799, inlinedAt: !1696)
!1808 = !DILocation(line: 912, column: 5, scope: !1799, inlinedAt: !1696)
!1809 = !DILocalVariable(name: "new_value", scope: !1796, file: !16, line: 914, type: !1688, align: 2)
!1810 = !DILocation(line: 914, column: 10, scope: !1796, inlinedAt: !1696)
!1811 = !DILocation(line: 914, column: 22, scope: !1796, inlinedAt: !1696)
!1812 = !DILocation(line: 914, column: 30, scope: !1796, inlinedAt: !1696)
!1813 = !DILocation(line: 914, column: 42, scope: !1796, inlinedAt: !1696)
!1814 = !DILocation(line: 915, column: 8, scope: !1796, inlinedAt: !1696)
!1815 = !DILocation(line: 915, column: 20, scope: !1796, inlinedAt: !1696)
!1816 = !DILocation(line: 915, column: 34, scope: !1796, inlinedAt: !1696)
!1817 = !DILocation(line: 916, column: 12, scope: !1796, inlinedAt: !1696)
!1818 = !DILocation(line: 919, column: 9, scope: !1695, inlinedAt: !1696)
!1819 = distinct !DISubprogram(name: "to_ichar", linkageName: "std.core.String.to_ichar", scope: !16, file: !16, line: 926, type: !1820, scopeLine: 926, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1820 = !DISubroutineType(types: !1821)
!1821 = !{!431, !1822, !61, !3}
!1822 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ichar*", baseType: !1823, size: 64, align: 64, dwarfAddressSpace: 0)
!1823 = !DIBasicType(name: "ichar", size: 8, encoding: DW_ATE_signed_char)
!1824 = !DILocalVariable(name: "self", arg: 1, scope: !1819, file: !16, line: 926, type: !61)
!1825 = !DILocation(line: 926, column: 27, scope: !1819)
!1826 = !DILocalVariable(name: "base", arg: 2, scope: !1819, file: !16, line: 926, type: !3)
!1827 = !DILocation(line: 926, column: 37, scope: !1819)
!1828 = !DILocation(line: 843, column: 11, scope: !1829, inlinedAt: !1831)
!1829 = distinct !DILexicalBlock(scope: !1830, file: !16, line: 850, column: 1)
!1830 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !16, file: !16, line: 849, scopeLine: 849, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1831 = !DILocation(line: 926, column: 51, scope: !1819)
!1832 = !DILocation(line: 843, column: 23, scope: !1829, inlinedAt: !1831)
!1833 = !DILocation(line: 926, column: 51, scope: !1829, inlinedAt: !1831)
!1834 = !DILocalVariable(name: "len", scope: !1830, file: !16, line: 851, type: !68, align: 8)
!1835 = !DILocation(line: 851, column: 6, scope: !1830, inlinedAt: !1831)
!1836 = !DILocation(line: 851, column: 12, scope: !1830, inlinedAt: !1831)
!1837 = !DILocalVariable(name: "index", scope: !1830, file: !16, line: 852, type: !68, align: 8)
!1838 = !DILocation(line: 852, column: 6, scope: !1830, inlinedAt: !1831)
!1839 = !DILocation(line: 852, column: 14, scope: !1830, inlinedAt: !1831)
!1840 = !DILocalVariable(name: "ptr", scope: !1830, file: !16, line: 853, type: !65, align: 8)
!1841 = !DILocation(line: 853, column: 8, scope: !1830, inlinedAt: !1831)
!1842 = !DILocation(line: 853, column: 14, scope: !1830, inlinedAt: !1831)
!1843 = !DILocation(line: 854, column: 2, scope: !1830, inlinedAt: !1831)
!1844 = !DILocation(line: 854, column: 9, scope: !1845, inlinedAt: !1831)
!1845 = distinct !DILexicalBlock(scope: !1830, file: !16, line: 854, column: 2)
!1846 = !DILocation(line: 854, column: 17, scope: !1845, inlinedAt: !1831)
!1847 = !DILocation(line: 854, column: 24, scope: !1845, inlinedAt: !1831)
!1848 = !DILocation(line: 854, column: 28, scope: !1845, inlinedAt: !1831)
!1849 = !DILocation(line: 19, column: 42, scope: !1850, inlinedAt: !1851)
!1850 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !1180, file: !1180, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1851 = !DILocation(line: 54, column: 38, scope: !1852, inlinedAt: !1847)
!1852 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !1180, file: !1180, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1853 = !DILocation(line: 854, column: 47, scope: !1845, inlinedAt: !1831)
!1854 = !DILocation(line: 855, column: 6, scope: !1830, inlinedAt: !1831)
!1855 = !DILocation(line: 855, column: 13, scope: !1830, inlinedAt: !1831)
!1856 = !DILocation(line: 855, column: 27, scope: !1830, inlinedAt: !1831)
!1857 = !DILocalVariable(name: "is_negative", scope: !1830, file: !16, line: 856, type: !119, align: 1)
!1858 = !DILocation(line: 856, column: 7, scope: !1830, inlinedAt: !1831)
!1859 = !DILocation(line: 857, column: 10, scope: !1860, inlinedAt: !1831)
!1860 = distinct !DILexicalBlock(scope: !1830, file: !16, line: 857, column: 2)
!1861 = !DILocation(line: 857, column: 15, scope: !1860, inlinedAt: !1831)
!1862 = !DILocation(line: 860, column: 8, scope: !1863, inlinedAt: !1831)
!1863 = distinct !DILexicalBlock(scope: !1860, file: !16, line: 860, column: 4)
!1864 = !DILocation(line: 861, column: 18, scope: !1863, inlinedAt: !1831)
!1865 = !DILocation(line: 862, column: 4, scope: !1863, inlinedAt: !1831)
!1866 = !DILocation(line: 864, column: 4, scope: !1867, inlinedAt: !1831)
!1867 = distinct !DILexicalBlock(scope: !1860, file: !16, line: 864, column: 4)
!1868 = !DILocation(line: 866, column: 4, scope: !1869, inlinedAt: !1831)
!1869 = distinct !DILexicalBlock(scope: !1860, file: !16, line: 866, column: 4)
!1870 = !DILocation(line: 868, column: 6, scope: !1830, inlinedAt: !1831)
!1871 = !DILocation(line: 868, column: 13, scope: !1830, inlinedAt: !1831)
!1872 = !DILocation(line: 868, column: 27, scope: !1830, inlinedAt: !1831)
!1873 = !DILocalVariable(name: "base_used", scope: !1830, file: !16, line: 869, type: !1823, align: 1)
!1874 = !DILocation(line: 869, column: 8, scope: !1830, inlinedAt: !1831)
!1875 = !DILocation(line: 869, column: 20, scope: !1830, inlinedAt: !1831)
!1876 = !DILocation(line: 870, column: 6, scope: !1830, inlinedAt: !1831)
!1877 = !DILocation(line: 870, column: 11, scope: !1830, inlinedAt: !1831)
!1878 = !DILocation(line: 870, column: 28, scope: !1830, inlinedAt: !1831)
!1879 = !DILocation(line: 872, column: 3, scope: !1880, inlinedAt: !1831)
!1880 = distinct !DILexicalBlock(scope: !1830, file: !16, line: 871, column: 2)
!1881 = !DILocation(line: 873, column: 7, scope: !1880, inlinedAt: !1831)
!1882 = !DILocation(line: 873, column: 16, scope: !1880, inlinedAt: !1831)
!1883 = !DILocation(line: 873, column: 28, scope: !1880, inlinedAt: !1831)
!1884 = !DILocation(line: 874, column: 11, scope: !1885, inlinedAt: !1831)
!1885 = distinct !DILexicalBlock(scope: !1880, file: !16, line: 874, column: 3)
!1886 = !DILocation(line: 874, column: 16, scope: !1885, inlinedAt: !1831)
!1887 = !DILocation(line: 878, column: 17, scope: !1888, inlinedAt: !1831)
!1888 = distinct !DILexicalBlock(scope: !1885, file: !16, line: 878, column: 5)
!1889 = !DILocation(line: 879, column: 5, scope: !1888, inlinedAt: !1831)
!1890 = !DILocation(line: 882, column: 17, scope: !1891, inlinedAt: !1831)
!1891 = distinct !DILexicalBlock(scope: !1885, file: !16, line: 882, column: 5)
!1892 = !DILocation(line: 883, column: 5, scope: !1891, inlinedAt: !1831)
!1893 = !DILocation(line: 886, column: 17, scope: !1894, inlinedAt: !1831)
!1894 = distinct !DILexicalBlock(scope: !1885, file: !16, line: 886, column: 5)
!1895 = !DILocation(line: 887, column: 5, scope: !1894, inlinedAt: !1831)
!1896 = !DILocation(line: 889, column: 5, scope: !1897, inlinedAt: !1831)
!1897 = distinct !DILexicalBlock(scope: !1885, file: !16, line: 889, column: 5)
!1898 = !DILocation(line: 891, column: 7, scope: !1880, inlinedAt: !1831)
!1899 = !DILocation(line: 891, column: 14, scope: !1880, inlinedAt: !1831)
!1900 = !DILocation(line: 891, column: 28, scope: !1880, inlinedAt: !1831)
!1901 = !DILocalVariable(name: "value", scope: !1830, file: !16, line: 893, type: !1823, align: 1)
!1902 = !DILocation(line: 893, column: 8, scope: !1830, inlinedAt: !1831)
!1903 = !DILocation(line: 893, column: 16, scope: !1830, inlinedAt: !1831)
!1904 = !DILocation(line: 894, column: 2, scope: !1830, inlinedAt: !1831)
!1905 = !DILocation(line: 894, column: 9, scope: !1906, inlinedAt: !1831)
!1906 = distinct !DILexicalBlock(scope: !1830, file: !16, line: 894, column: 2)
!1907 = !DILocation(line: 894, column: 18, scope: !1906, inlinedAt: !1831)
!1908 = !DILocalVariable(name: "c", scope: !1909, file: !16, line: 896, type: !66, align: 1)
!1909 = distinct !DILexicalBlock(scope: !1906, file: !16, line: 895, column: 2)
!1910 = !DILocation(line: 896, column: 8, scope: !1909, inlinedAt: !1831)
!1911 = !DILocation(line: 896, column: 12, scope: !1909, inlinedAt: !1831)
!1912 = !DILocation(line: 896, column: 17, scope: !1909, inlinedAt: !1831)
!1913 = !DILocation(line: 899, column: 9, scope: !1914, inlinedAt: !1831)
!1914 = distinct !DILexicalBlock(scope: !1909, file: !16, line: 897, column: 3)
!1915 = !DILocation(line: 899, column: 27, scope: !1914, inlinedAt: !1831)
!1916 = !DILocation(line: 899, column: 38, scope: !1917, inlinedAt: !1831)
!1917 = distinct !DILexicalBlock(scope: !1914, file: !16, line: 899, column: 38)
!1918 = !DILocation(line: 900, column: 9, scope: !1914, inlinedAt: !1831)
!1919 = !DILocation(line: 900, column: 38, scope: !1920, inlinedAt: !1831)
!1920 = distinct !DILexicalBlock(scope: !1914, file: !16, line: 900, column: 38)
!1921 = !DILocation(line: 901, column: 9, scope: !1914, inlinedAt: !1831)
!1922 = !DILocation(line: 901, column: 20, scope: !1914, inlinedAt: !1831)
!1923 = !DILocation(line: 901, column: 45, scope: !1924, inlinedAt: !1831)
!1924 = distinct !DILexicalBlock(scope: !1914, file: !16, line: 901, column: 38)
!1925 = !DILocation(line: 902, column: 38, scope: !1926, inlinedAt: !1831)
!1926 = distinct !DILexicalBlock(scope: !1914, file: !16, line: 902, column: 38)
!1927 = !DILocation(line: 904, column: 7, scope: !1909, inlinedAt: !1831)
!1928 = !DILocation(line: 904, column: 12, scope: !1909, inlinedAt: !1831)
!1929 = !DILocation(line: 904, column: 30, scope: !1909, inlinedAt: !1831)
!1930 = !DILocation(line: 907, column: 8, scope: !1931, inlinedAt: !1831)
!1931 = distinct !DILexicalBlock(scope: !1932, file: !16, line: 906, column: 3)
!1932 = distinct !DILexicalBlock(scope: !1909, file: !16, line: 905, column: 3)
!1933 = !DILocalVariable(name: "new_value", scope: !1934, file: !16, line: 909, type: !1823, align: 1)
!1934 = distinct !DILexicalBlock(scope: !1931, file: !16, line: 908, column: 4)
!1935 = !DILocation(line: 909, column: 11, scope: !1934, inlinedAt: !1831)
!1936 = !DILocation(line: 909, column: 23, scope: !1934, inlinedAt: !1831)
!1937 = !DILocation(line: 909, column: 31, scope: !1934, inlinedAt: !1831)
!1938 = !DILocation(line: 909, column: 43, scope: !1934, inlinedAt: !1831)
!1939 = !DILocation(line: 910, column: 9, scope: !1934, inlinedAt: !1831)
!1940 = !DILocation(line: 910, column: 21, scope: !1934, inlinedAt: !1831)
!1941 = !DILocation(line: 910, column: 35, scope: !1934, inlinedAt: !1831)
!1942 = !DILocation(line: 911, column: 13, scope: !1934, inlinedAt: !1831)
!1943 = !DILocation(line: 912, column: 5, scope: !1934, inlinedAt: !1831)
!1944 = !DILocalVariable(name: "new_value", scope: !1931, file: !16, line: 914, type: !1823, align: 1)
!1945 = !DILocation(line: 914, column: 10, scope: !1931, inlinedAt: !1831)
!1946 = !DILocation(line: 914, column: 22, scope: !1931, inlinedAt: !1831)
!1947 = !DILocation(line: 914, column: 30, scope: !1931, inlinedAt: !1831)
!1948 = !DILocation(line: 914, column: 42, scope: !1931, inlinedAt: !1831)
!1949 = !DILocation(line: 915, column: 8, scope: !1931, inlinedAt: !1831)
!1950 = !DILocation(line: 915, column: 20, scope: !1931, inlinedAt: !1831)
!1951 = !DILocation(line: 915, column: 34, scope: !1931, inlinedAt: !1831)
!1952 = !DILocation(line: 916, column: 12, scope: !1931, inlinedAt: !1831)
!1953 = !DILocation(line: 919, column: 9, scope: !1830, inlinedAt: !1831)
!1954 = distinct !DISubprogram(name: "to_uint128", linkageName: "std.core.String.to_uint128", scope: !16, file: !16, line: 928, type: !1955, scopeLine: 928, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1955 = !DISubroutineType(types: !1956)
!1956 = !{!431, !1957, !61, !3}
!1957 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !1958, size: 64, align: 64, dwarfAddressSpace: 0)
!1958 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!1959 = !DILocalVariable(name: "self", arg: 1, scope: !1954, file: !16, line: 928, type: !61)
!1960 = !DILocation(line: 928, column: 31, scope: !1954)
!1961 = !DILocalVariable(name: "base", arg: 2, scope: !1954, file: !16, line: 928, type: !3)
!1962 = !DILocation(line: 928, column: 41, scope: !1954)
!1963 = !DILocation(line: 843, column: 11, scope: !1964, inlinedAt: !1966)
!1964 = distinct !DILexicalBlock(scope: !1965, file: !16, line: 850, column: 1)
!1965 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !16, file: !16, line: 849, scopeLine: 849, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!1966 = !DILocation(line: 928, column: 55, scope: !1954)
!1967 = !DILocation(line: 843, column: 23, scope: !1964, inlinedAt: !1966)
!1968 = !DILocation(line: 928, column: 55, scope: !1964, inlinedAt: !1966)
!1969 = !DILocalVariable(name: "len", scope: !1965, file: !16, line: 851, type: !68, align: 8)
!1970 = !DILocation(line: 851, column: 6, scope: !1965, inlinedAt: !1966)
!1971 = !DILocation(line: 851, column: 12, scope: !1965, inlinedAt: !1966)
!1972 = !DILocalVariable(name: "index", scope: !1965, file: !16, line: 852, type: !68, align: 8)
!1973 = !DILocation(line: 852, column: 6, scope: !1965, inlinedAt: !1966)
!1974 = !DILocation(line: 852, column: 14, scope: !1965, inlinedAt: !1966)
!1975 = !DILocalVariable(name: "ptr", scope: !1965, file: !16, line: 853, type: !65, align: 8)
!1976 = !DILocation(line: 853, column: 8, scope: !1965, inlinedAt: !1966)
!1977 = !DILocation(line: 853, column: 14, scope: !1965, inlinedAt: !1966)
!1978 = !DILocation(line: 854, column: 2, scope: !1965, inlinedAt: !1966)
!1979 = !DILocation(line: 854, column: 9, scope: !1980, inlinedAt: !1966)
!1980 = distinct !DILexicalBlock(scope: !1965, file: !16, line: 854, column: 2)
!1981 = !DILocation(line: 854, column: 17, scope: !1980, inlinedAt: !1966)
!1982 = !DILocation(line: 854, column: 24, scope: !1980, inlinedAt: !1966)
!1983 = !DILocation(line: 854, column: 28, scope: !1980, inlinedAt: !1966)
!1984 = !DILocation(line: 19, column: 42, scope: !1985, inlinedAt: !1986)
!1985 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !1180, file: !1180, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1986 = !DILocation(line: 54, column: 38, scope: !1987, inlinedAt: !1982)
!1987 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !1180, file: !1180, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!1988 = !DILocation(line: 854, column: 47, scope: !1980, inlinedAt: !1966)
!1989 = !DILocation(line: 855, column: 6, scope: !1965, inlinedAt: !1966)
!1990 = !DILocation(line: 855, column: 13, scope: !1965, inlinedAt: !1966)
!1991 = !DILocation(line: 855, column: 27, scope: !1965, inlinedAt: !1966)
!1992 = !DILocalVariable(name: "is_negative", scope: !1965, file: !16, line: 856, type: !119, align: 1)
!1993 = !DILocation(line: 856, column: 7, scope: !1965, inlinedAt: !1966)
!1994 = !DILocation(line: 857, column: 10, scope: !1995, inlinedAt: !1966)
!1995 = distinct !DILexicalBlock(scope: !1965, file: !16, line: 857, column: 2)
!1996 = !DILocation(line: 857, column: 15, scope: !1995, inlinedAt: !1966)
!1997 = !DILocation(line: 860, column: 8, scope: !1998, inlinedAt: !1966)
!1998 = distinct !DILexicalBlock(scope: !1995, file: !16, line: 860, column: 4)
!1999 = !DILocation(line: 860, column: 31, scope: !1998, inlinedAt: !1966)
!2000 = !DILocation(line: 864, column: 4, scope: !2001, inlinedAt: !1966)
!2001 = distinct !DILexicalBlock(scope: !1995, file: !16, line: 864, column: 4)
!2002 = !DILocation(line: 866, column: 4, scope: !2003, inlinedAt: !1966)
!2003 = distinct !DILexicalBlock(scope: !1995, file: !16, line: 866, column: 4)
!2004 = !DILocation(line: 868, column: 6, scope: !1965, inlinedAt: !1966)
!2005 = !DILocation(line: 868, column: 13, scope: !1965, inlinedAt: !1966)
!2006 = !DILocation(line: 868, column: 27, scope: !1965, inlinedAt: !1966)
!2007 = !DILocalVariable(name: "base_used", scope: !1965, file: !16, line: 869, type: !1958, align: 16)
!2008 = !DILocation(line: 869, column: 8, scope: !1965, inlinedAt: !1966)
!2009 = !DILocation(line: 869, column: 20, scope: !1965, inlinedAt: !1966)
!2010 = !DILocation(line: 870, column: 6, scope: !1965, inlinedAt: !1966)
!2011 = !DILocation(line: 870, column: 11, scope: !1965, inlinedAt: !1966)
!2012 = !DILocation(line: 870, column: 28, scope: !1965, inlinedAt: !1966)
!2013 = !DILocation(line: 872, column: 3, scope: !2014, inlinedAt: !1966)
!2014 = distinct !DILexicalBlock(scope: !1965, file: !16, line: 871, column: 2)
!2015 = !DILocation(line: 873, column: 7, scope: !2014, inlinedAt: !1966)
!2016 = !DILocation(line: 873, column: 16, scope: !2014, inlinedAt: !1966)
!2017 = !DILocation(line: 873, column: 28, scope: !2014, inlinedAt: !1966)
!2018 = !DILocation(line: 874, column: 11, scope: !2019, inlinedAt: !1966)
!2019 = distinct !DILexicalBlock(scope: !2014, file: !16, line: 874, column: 3)
!2020 = !DILocation(line: 874, column: 16, scope: !2019, inlinedAt: !1966)
!2021 = !DILocation(line: 878, column: 17, scope: !2022, inlinedAt: !1966)
!2022 = distinct !DILexicalBlock(scope: !2019, file: !16, line: 878, column: 5)
!2023 = !DILocation(line: 879, column: 5, scope: !2022, inlinedAt: !1966)
!2024 = !DILocation(line: 882, column: 17, scope: !2025, inlinedAt: !1966)
!2025 = distinct !DILexicalBlock(scope: !2019, file: !16, line: 882, column: 5)
!2026 = !DILocation(line: 883, column: 5, scope: !2025, inlinedAt: !1966)
!2027 = !DILocation(line: 886, column: 17, scope: !2028, inlinedAt: !1966)
!2028 = distinct !DILexicalBlock(scope: !2019, file: !16, line: 886, column: 5)
!2029 = !DILocation(line: 887, column: 5, scope: !2028, inlinedAt: !1966)
!2030 = !DILocation(line: 889, column: 5, scope: !2031, inlinedAt: !1966)
!2031 = distinct !DILexicalBlock(scope: !2019, file: !16, line: 889, column: 5)
!2032 = !DILocation(line: 891, column: 7, scope: !2014, inlinedAt: !1966)
!2033 = !DILocation(line: 891, column: 14, scope: !2014, inlinedAt: !1966)
!2034 = !DILocation(line: 891, column: 28, scope: !2014, inlinedAt: !1966)
!2035 = !DILocalVariable(name: "value", scope: !1965, file: !16, line: 893, type: !1958, align: 16)
!2036 = !DILocation(line: 893, column: 8, scope: !1965, inlinedAt: !1966)
!2037 = !DILocation(line: 893, column: 16, scope: !1965, inlinedAt: !1966)
!2038 = !DILocation(line: 894, column: 2, scope: !1965, inlinedAt: !1966)
!2039 = !DILocation(line: 894, column: 9, scope: !2040, inlinedAt: !1966)
!2040 = distinct !DILexicalBlock(scope: !1965, file: !16, line: 894, column: 2)
!2041 = !DILocation(line: 894, column: 18, scope: !2040, inlinedAt: !1966)
!2042 = !DILocalVariable(name: "c", scope: !2043, file: !16, line: 896, type: !66, align: 1)
!2043 = distinct !DILexicalBlock(scope: !2040, file: !16, line: 895, column: 2)
!2044 = !DILocation(line: 896, column: 8, scope: !2043, inlinedAt: !1966)
!2045 = !DILocation(line: 896, column: 12, scope: !2043, inlinedAt: !1966)
!2046 = !DILocation(line: 896, column: 17, scope: !2043, inlinedAt: !1966)
!2047 = !DILocation(line: 899, column: 9, scope: !2048, inlinedAt: !1966)
!2048 = distinct !DILexicalBlock(scope: !2043, file: !16, line: 897, column: 3)
!2049 = !DILocation(line: 899, column: 27, scope: !2048, inlinedAt: !1966)
!2050 = !DILocation(line: 899, column: 38, scope: !2051, inlinedAt: !1966)
!2051 = distinct !DILexicalBlock(scope: !2048, file: !16, line: 899, column: 38)
!2052 = !DILocation(line: 900, column: 9, scope: !2048, inlinedAt: !1966)
!2053 = !DILocation(line: 900, column: 38, scope: !2054, inlinedAt: !1966)
!2054 = distinct !DILexicalBlock(scope: !2048, file: !16, line: 900, column: 38)
!2055 = !DILocation(line: 901, column: 9, scope: !2048, inlinedAt: !1966)
!2056 = !DILocation(line: 901, column: 20, scope: !2048, inlinedAt: !1966)
!2057 = !DILocation(line: 901, column: 45, scope: !2058, inlinedAt: !1966)
!2058 = distinct !DILexicalBlock(scope: !2048, file: !16, line: 901, column: 38)
!2059 = !DILocation(line: 902, column: 38, scope: !2060, inlinedAt: !1966)
!2060 = distinct !DILexicalBlock(scope: !2048, file: !16, line: 902, column: 38)
!2061 = !DILocation(line: 904, column: 7, scope: !2043, inlinedAt: !1966)
!2062 = !DILocation(line: 904, column: 12, scope: !2043, inlinedAt: !1966)
!2063 = !DILocation(line: 904, column: 30, scope: !2043, inlinedAt: !1966)
!2064 = !DILocation(line: 907, column: 8, scope: !2065, inlinedAt: !1966)
!2065 = distinct !DILexicalBlock(scope: !2066, file: !16, line: 906, column: 3)
!2066 = distinct !DILexicalBlock(scope: !2043, file: !16, line: 905, column: 3)
!2067 = !DILocalVariable(name: "new_value", scope: !2068, file: !16, line: 909, type: !1958, align: 16)
!2068 = distinct !DILexicalBlock(scope: !2065, file: !16, line: 908, column: 4)
!2069 = !DILocation(line: 909, column: 11, scope: !2068, inlinedAt: !1966)
!2070 = !DILocation(line: 909, column: 23, scope: !2068, inlinedAt: !1966)
!2071 = !DILocation(line: 909, column: 31, scope: !2068, inlinedAt: !1966)
!2072 = !DILocation(line: 909, column: 43, scope: !2068, inlinedAt: !1966)
!2073 = !DILocation(line: 910, column: 9, scope: !2068, inlinedAt: !1966)
!2074 = !DILocation(line: 910, column: 21, scope: !2068, inlinedAt: !1966)
!2075 = !DILocation(line: 910, column: 35, scope: !2068, inlinedAt: !1966)
!2076 = !DILocation(line: 911, column: 13, scope: !2068, inlinedAt: !1966)
!2077 = !DILocation(line: 912, column: 5, scope: !2068, inlinedAt: !1966)
!2078 = !DILocalVariable(name: "new_value", scope: !2065, file: !16, line: 914, type: !1958, align: 16)
!2079 = !DILocation(line: 914, column: 10, scope: !2065, inlinedAt: !1966)
!2080 = !DILocation(line: 914, column: 22, scope: !2065, inlinedAt: !1966)
!2081 = !DILocation(line: 914, column: 30, scope: !2065, inlinedAt: !1966)
!2082 = !DILocation(line: 914, column: 42, scope: !2065, inlinedAt: !1966)
!2083 = !DILocation(line: 915, column: 8, scope: !2065, inlinedAt: !1966)
!2084 = !DILocation(line: 915, column: 20, scope: !2065, inlinedAt: !1966)
!2085 = !DILocation(line: 915, column: 34, scope: !2065, inlinedAt: !1966)
!2086 = !DILocation(line: 916, column: 12, scope: !2065, inlinedAt: !1966)
!2087 = !DILocation(line: 919, column: 9, scope: !1965, inlinedAt: !1966)
!2088 = distinct !DISubprogram(name: "to_ulong", linkageName: "std.core.String.to_ulong", scope: !16, file: !16, line: 929, type: !2089, scopeLine: 929, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!2089 = !DISubroutineType(types: !2090)
!2090 = !{!431, !2091, !61, !3}
!2091 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !69, size: 64, align: 64, dwarfAddressSpace: 0)
!2092 = !DILocalVariable(name: "self", arg: 1, scope: !2088, file: !16, line: 929, type: !61)
!2093 = !DILocation(line: 929, column: 27, scope: !2088)
!2094 = !DILocalVariable(name: "base", arg: 2, scope: !2088, file: !16, line: 929, type: !3)
!2095 = !DILocation(line: 929, column: 37, scope: !2088)
!2096 = !DILocation(line: 843, column: 11, scope: !2097, inlinedAt: !2099)
!2097 = distinct !DILexicalBlock(scope: !2098, file: !16, line: 850, column: 1)
!2098 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !16, file: !16, line: 849, scopeLine: 849, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!2099 = !DILocation(line: 929, column: 51, scope: !2088)
!2100 = !DILocation(line: 843, column: 23, scope: !2097, inlinedAt: !2099)
!2101 = !DILocation(line: 929, column: 51, scope: !2097, inlinedAt: !2099)
!2102 = !DILocalVariable(name: "len", scope: !2098, file: !16, line: 851, type: !68, align: 8)
!2103 = !DILocation(line: 851, column: 6, scope: !2098, inlinedAt: !2099)
!2104 = !DILocation(line: 851, column: 12, scope: !2098, inlinedAt: !2099)
!2105 = !DILocalVariable(name: "index", scope: !2098, file: !16, line: 852, type: !68, align: 8)
!2106 = !DILocation(line: 852, column: 6, scope: !2098, inlinedAt: !2099)
!2107 = !DILocation(line: 852, column: 14, scope: !2098, inlinedAt: !2099)
!2108 = !DILocalVariable(name: "ptr", scope: !2098, file: !16, line: 853, type: !65, align: 8)
!2109 = !DILocation(line: 853, column: 8, scope: !2098, inlinedAt: !2099)
!2110 = !DILocation(line: 853, column: 14, scope: !2098, inlinedAt: !2099)
!2111 = !DILocation(line: 854, column: 2, scope: !2098, inlinedAt: !2099)
!2112 = !DILocation(line: 854, column: 9, scope: !2113, inlinedAt: !2099)
!2113 = distinct !DILexicalBlock(scope: !2098, file: !16, line: 854, column: 2)
!2114 = !DILocation(line: 854, column: 17, scope: !2113, inlinedAt: !2099)
!2115 = !DILocation(line: 854, column: 24, scope: !2113, inlinedAt: !2099)
!2116 = !DILocation(line: 854, column: 28, scope: !2113, inlinedAt: !2099)
!2117 = !DILocation(line: 19, column: 42, scope: !2118, inlinedAt: !2119)
!2118 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !1180, file: !1180, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2119 = !DILocation(line: 54, column: 38, scope: !2120, inlinedAt: !2115)
!2120 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !1180, file: !1180, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2121 = !DILocation(line: 854, column: 47, scope: !2113, inlinedAt: !2099)
!2122 = !DILocation(line: 855, column: 6, scope: !2098, inlinedAt: !2099)
!2123 = !DILocation(line: 855, column: 13, scope: !2098, inlinedAt: !2099)
!2124 = !DILocation(line: 855, column: 27, scope: !2098, inlinedAt: !2099)
!2125 = !DILocalVariable(name: "is_negative", scope: !2098, file: !16, line: 856, type: !119, align: 1)
!2126 = !DILocation(line: 856, column: 7, scope: !2098, inlinedAt: !2099)
!2127 = !DILocation(line: 857, column: 10, scope: !2128, inlinedAt: !2099)
!2128 = distinct !DILexicalBlock(scope: !2098, file: !16, line: 857, column: 2)
!2129 = !DILocation(line: 857, column: 15, scope: !2128, inlinedAt: !2099)
!2130 = !DILocation(line: 860, column: 8, scope: !2131, inlinedAt: !2099)
!2131 = distinct !DILexicalBlock(scope: !2128, file: !16, line: 860, column: 4)
!2132 = !DILocation(line: 860, column: 31, scope: !2131, inlinedAt: !2099)
!2133 = !DILocation(line: 864, column: 4, scope: !2134, inlinedAt: !2099)
!2134 = distinct !DILexicalBlock(scope: !2128, file: !16, line: 864, column: 4)
!2135 = !DILocation(line: 866, column: 4, scope: !2136, inlinedAt: !2099)
!2136 = distinct !DILexicalBlock(scope: !2128, file: !16, line: 866, column: 4)
!2137 = !DILocation(line: 868, column: 6, scope: !2098, inlinedAt: !2099)
!2138 = !DILocation(line: 868, column: 13, scope: !2098, inlinedAt: !2099)
!2139 = !DILocation(line: 868, column: 27, scope: !2098, inlinedAt: !2099)
!2140 = !DILocalVariable(name: "base_used", scope: !2098, file: !16, line: 869, type: !69, align: 8)
!2141 = !DILocation(line: 869, column: 8, scope: !2098, inlinedAt: !2099)
!2142 = !DILocation(line: 869, column: 20, scope: !2098, inlinedAt: !2099)
!2143 = !DILocation(line: 870, column: 6, scope: !2098, inlinedAt: !2099)
!2144 = !DILocation(line: 870, column: 11, scope: !2098, inlinedAt: !2099)
!2145 = !DILocation(line: 870, column: 28, scope: !2098, inlinedAt: !2099)
!2146 = !DILocation(line: 872, column: 3, scope: !2147, inlinedAt: !2099)
!2147 = distinct !DILexicalBlock(scope: !2098, file: !16, line: 871, column: 2)
!2148 = !DILocation(line: 873, column: 7, scope: !2147, inlinedAt: !2099)
!2149 = !DILocation(line: 873, column: 16, scope: !2147, inlinedAt: !2099)
!2150 = !DILocation(line: 873, column: 28, scope: !2147, inlinedAt: !2099)
!2151 = !DILocation(line: 874, column: 11, scope: !2152, inlinedAt: !2099)
!2152 = distinct !DILexicalBlock(scope: !2147, file: !16, line: 874, column: 3)
!2153 = !DILocation(line: 874, column: 16, scope: !2152, inlinedAt: !2099)
!2154 = !DILocation(line: 878, column: 17, scope: !2155, inlinedAt: !2099)
!2155 = distinct !DILexicalBlock(scope: !2152, file: !16, line: 878, column: 5)
!2156 = !DILocation(line: 879, column: 5, scope: !2155, inlinedAt: !2099)
!2157 = !DILocation(line: 882, column: 17, scope: !2158, inlinedAt: !2099)
!2158 = distinct !DILexicalBlock(scope: !2152, file: !16, line: 882, column: 5)
!2159 = !DILocation(line: 883, column: 5, scope: !2158, inlinedAt: !2099)
!2160 = !DILocation(line: 886, column: 17, scope: !2161, inlinedAt: !2099)
!2161 = distinct !DILexicalBlock(scope: !2152, file: !16, line: 886, column: 5)
!2162 = !DILocation(line: 887, column: 5, scope: !2161, inlinedAt: !2099)
!2163 = !DILocation(line: 889, column: 5, scope: !2164, inlinedAt: !2099)
!2164 = distinct !DILexicalBlock(scope: !2152, file: !16, line: 889, column: 5)
!2165 = !DILocation(line: 891, column: 7, scope: !2147, inlinedAt: !2099)
!2166 = !DILocation(line: 891, column: 14, scope: !2147, inlinedAt: !2099)
!2167 = !DILocation(line: 891, column: 28, scope: !2147, inlinedAt: !2099)
!2168 = !DILocalVariable(name: "value", scope: !2098, file: !16, line: 893, type: !69, align: 8)
!2169 = !DILocation(line: 893, column: 8, scope: !2098, inlinedAt: !2099)
!2170 = !DILocation(line: 893, column: 16, scope: !2098, inlinedAt: !2099)
!2171 = !DILocation(line: 894, column: 2, scope: !2098, inlinedAt: !2099)
!2172 = !DILocation(line: 894, column: 9, scope: !2173, inlinedAt: !2099)
!2173 = distinct !DILexicalBlock(scope: !2098, file: !16, line: 894, column: 2)
!2174 = !DILocation(line: 894, column: 18, scope: !2173, inlinedAt: !2099)
!2175 = !DILocalVariable(name: "c", scope: !2176, file: !16, line: 896, type: !66, align: 1)
!2176 = distinct !DILexicalBlock(scope: !2173, file: !16, line: 895, column: 2)
!2177 = !DILocation(line: 896, column: 8, scope: !2176, inlinedAt: !2099)
!2178 = !DILocation(line: 896, column: 12, scope: !2176, inlinedAt: !2099)
!2179 = !DILocation(line: 896, column: 17, scope: !2176, inlinedAt: !2099)
!2180 = !DILocation(line: 899, column: 9, scope: !2181, inlinedAt: !2099)
!2181 = distinct !DILexicalBlock(scope: !2176, file: !16, line: 897, column: 3)
!2182 = !DILocation(line: 899, column: 27, scope: !2181, inlinedAt: !2099)
!2183 = !DILocation(line: 899, column: 38, scope: !2184, inlinedAt: !2099)
!2184 = distinct !DILexicalBlock(scope: !2181, file: !16, line: 899, column: 38)
!2185 = !DILocation(line: 900, column: 9, scope: !2181, inlinedAt: !2099)
!2186 = !DILocation(line: 900, column: 38, scope: !2187, inlinedAt: !2099)
!2187 = distinct !DILexicalBlock(scope: !2181, file: !16, line: 900, column: 38)
!2188 = !DILocation(line: 901, column: 9, scope: !2181, inlinedAt: !2099)
!2189 = !DILocation(line: 901, column: 20, scope: !2181, inlinedAt: !2099)
!2190 = !DILocation(line: 901, column: 45, scope: !2191, inlinedAt: !2099)
!2191 = distinct !DILexicalBlock(scope: !2181, file: !16, line: 901, column: 38)
!2192 = !DILocation(line: 902, column: 38, scope: !2193, inlinedAt: !2099)
!2193 = distinct !DILexicalBlock(scope: !2181, file: !16, line: 902, column: 38)
!2194 = !DILocation(line: 904, column: 7, scope: !2176, inlinedAt: !2099)
!2195 = !DILocation(line: 904, column: 12, scope: !2176, inlinedAt: !2099)
!2196 = !DILocation(line: 904, column: 30, scope: !2176, inlinedAt: !2099)
!2197 = !DILocation(line: 907, column: 8, scope: !2198, inlinedAt: !2099)
!2198 = distinct !DILexicalBlock(scope: !2199, file: !16, line: 906, column: 3)
!2199 = distinct !DILexicalBlock(scope: !2176, file: !16, line: 905, column: 3)
!2200 = !DILocalVariable(name: "new_value", scope: !2201, file: !16, line: 909, type: !69, align: 8)
!2201 = distinct !DILexicalBlock(scope: !2198, file: !16, line: 908, column: 4)
!2202 = !DILocation(line: 909, column: 11, scope: !2201, inlinedAt: !2099)
!2203 = !DILocation(line: 909, column: 23, scope: !2201, inlinedAt: !2099)
!2204 = !DILocation(line: 909, column: 31, scope: !2201, inlinedAt: !2099)
!2205 = !DILocation(line: 909, column: 43, scope: !2201, inlinedAt: !2099)
!2206 = !DILocation(line: 910, column: 9, scope: !2201, inlinedAt: !2099)
!2207 = !DILocation(line: 910, column: 21, scope: !2201, inlinedAt: !2099)
!2208 = !DILocation(line: 910, column: 35, scope: !2201, inlinedAt: !2099)
!2209 = !DILocation(line: 911, column: 13, scope: !2201, inlinedAt: !2099)
!2210 = !DILocation(line: 912, column: 5, scope: !2201, inlinedAt: !2099)
!2211 = !DILocalVariable(name: "new_value", scope: !2198, file: !16, line: 914, type: !69, align: 8)
!2212 = !DILocation(line: 914, column: 10, scope: !2198, inlinedAt: !2099)
!2213 = !DILocation(line: 914, column: 22, scope: !2198, inlinedAt: !2099)
!2214 = !DILocation(line: 914, column: 30, scope: !2198, inlinedAt: !2099)
!2215 = !DILocation(line: 914, column: 42, scope: !2198, inlinedAt: !2099)
!2216 = !DILocation(line: 915, column: 8, scope: !2198, inlinedAt: !2099)
!2217 = !DILocation(line: 915, column: 20, scope: !2198, inlinedAt: !2099)
!2218 = !DILocation(line: 915, column: 34, scope: !2198, inlinedAt: !2099)
!2219 = !DILocation(line: 916, column: 12, scope: !2198, inlinedAt: !2099)
!2220 = !DILocation(line: 919, column: 9, scope: !2098, inlinedAt: !2099)
!2221 = distinct !DISubprogram(name: "to_uint", linkageName: "std.core.String.to_uint", scope: !16, file: !16, line: 930, type: !2222, scopeLine: 930, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!2222 = !DISubroutineType(types: !2223)
!2223 = !{!431, !2224, !61, !3}
!2224 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !11, size: 64, align: 64, dwarfAddressSpace: 0)
!2225 = !DILocalVariable(name: "self", arg: 1, scope: !2221, file: !16, line: 930, type: !61)
!2226 = !DILocation(line: 930, column: 25, scope: !2221)
!2227 = !DILocalVariable(name: "base", arg: 2, scope: !2221, file: !16, line: 930, type: !3)
!2228 = !DILocation(line: 930, column: 35, scope: !2221)
!2229 = !DILocation(line: 843, column: 11, scope: !2230, inlinedAt: !2232)
!2230 = distinct !DILexicalBlock(scope: !2231, file: !16, line: 850, column: 1)
!2231 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !16, file: !16, line: 849, scopeLine: 849, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!2232 = !DILocation(line: 930, column: 49, scope: !2221)
!2233 = !DILocation(line: 843, column: 23, scope: !2230, inlinedAt: !2232)
!2234 = !DILocation(line: 930, column: 49, scope: !2230, inlinedAt: !2232)
!2235 = !DILocalVariable(name: "len", scope: !2231, file: !16, line: 851, type: !68, align: 8)
!2236 = !DILocation(line: 851, column: 6, scope: !2231, inlinedAt: !2232)
!2237 = !DILocation(line: 851, column: 12, scope: !2231, inlinedAt: !2232)
!2238 = !DILocalVariable(name: "index", scope: !2231, file: !16, line: 852, type: !68, align: 8)
!2239 = !DILocation(line: 852, column: 6, scope: !2231, inlinedAt: !2232)
!2240 = !DILocation(line: 852, column: 14, scope: !2231, inlinedAt: !2232)
!2241 = !DILocalVariable(name: "ptr", scope: !2231, file: !16, line: 853, type: !65, align: 8)
!2242 = !DILocation(line: 853, column: 8, scope: !2231, inlinedAt: !2232)
!2243 = !DILocation(line: 853, column: 14, scope: !2231, inlinedAt: !2232)
!2244 = !DILocation(line: 854, column: 2, scope: !2231, inlinedAt: !2232)
!2245 = !DILocation(line: 854, column: 9, scope: !2246, inlinedAt: !2232)
!2246 = distinct !DILexicalBlock(scope: !2231, file: !16, line: 854, column: 2)
!2247 = !DILocation(line: 854, column: 17, scope: !2246, inlinedAt: !2232)
!2248 = !DILocation(line: 854, column: 24, scope: !2246, inlinedAt: !2232)
!2249 = !DILocation(line: 854, column: 28, scope: !2246, inlinedAt: !2232)
!2250 = !DILocation(line: 19, column: 42, scope: !2251, inlinedAt: !2252)
!2251 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !1180, file: !1180, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2252 = !DILocation(line: 54, column: 38, scope: !2253, inlinedAt: !2248)
!2253 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !1180, file: !1180, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2254 = !DILocation(line: 854, column: 47, scope: !2246, inlinedAt: !2232)
!2255 = !DILocation(line: 855, column: 6, scope: !2231, inlinedAt: !2232)
!2256 = !DILocation(line: 855, column: 13, scope: !2231, inlinedAt: !2232)
!2257 = !DILocation(line: 855, column: 27, scope: !2231, inlinedAt: !2232)
!2258 = !DILocalVariable(name: "is_negative", scope: !2231, file: !16, line: 856, type: !119, align: 1)
!2259 = !DILocation(line: 856, column: 7, scope: !2231, inlinedAt: !2232)
!2260 = !DILocation(line: 857, column: 10, scope: !2261, inlinedAt: !2232)
!2261 = distinct !DILexicalBlock(scope: !2231, file: !16, line: 857, column: 2)
!2262 = !DILocation(line: 857, column: 15, scope: !2261, inlinedAt: !2232)
!2263 = !DILocation(line: 860, column: 8, scope: !2264, inlinedAt: !2232)
!2264 = distinct !DILexicalBlock(scope: !2261, file: !16, line: 860, column: 4)
!2265 = !DILocation(line: 860, column: 31, scope: !2264, inlinedAt: !2232)
!2266 = !DILocation(line: 864, column: 4, scope: !2267, inlinedAt: !2232)
!2267 = distinct !DILexicalBlock(scope: !2261, file: !16, line: 864, column: 4)
!2268 = !DILocation(line: 866, column: 4, scope: !2269, inlinedAt: !2232)
!2269 = distinct !DILexicalBlock(scope: !2261, file: !16, line: 866, column: 4)
!2270 = !DILocation(line: 868, column: 6, scope: !2231, inlinedAt: !2232)
!2271 = !DILocation(line: 868, column: 13, scope: !2231, inlinedAt: !2232)
!2272 = !DILocation(line: 868, column: 27, scope: !2231, inlinedAt: !2232)
!2273 = !DILocalVariable(name: "base_used", scope: !2231, file: !16, line: 869, type: !11, align: 4)
!2274 = !DILocation(line: 869, column: 8, scope: !2231, inlinedAt: !2232)
!2275 = !DILocation(line: 869, column: 20, scope: !2231, inlinedAt: !2232)
!2276 = !DILocation(line: 870, column: 6, scope: !2231, inlinedAt: !2232)
!2277 = !DILocation(line: 870, column: 11, scope: !2231, inlinedAt: !2232)
!2278 = !DILocation(line: 870, column: 28, scope: !2231, inlinedAt: !2232)
!2279 = !DILocation(line: 872, column: 3, scope: !2280, inlinedAt: !2232)
!2280 = distinct !DILexicalBlock(scope: !2231, file: !16, line: 871, column: 2)
!2281 = !DILocation(line: 873, column: 7, scope: !2280, inlinedAt: !2232)
!2282 = !DILocation(line: 873, column: 16, scope: !2280, inlinedAt: !2232)
!2283 = !DILocation(line: 873, column: 28, scope: !2280, inlinedAt: !2232)
!2284 = !DILocation(line: 874, column: 11, scope: !2285, inlinedAt: !2232)
!2285 = distinct !DILexicalBlock(scope: !2280, file: !16, line: 874, column: 3)
!2286 = !DILocation(line: 874, column: 16, scope: !2285, inlinedAt: !2232)
!2287 = !DILocation(line: 878, column: 17, scope: !2288, inlinedAt: !2232)
!2288 = distinct !DILexicalBlock(scope: !2285, file: !16, line: 878, column: 5)
!2289 = !DILocation(line: 879, column: 5, scope: !2288, inlinedAt: !2232)
!2290 = !DILocation(line: 882, column: 17, scope: !2291, inlinedAt: !2232)
!2291 = distinct !DILexicalBlock(scope: !2285, file: !16, line: 882, column: 5)
!2292 = !DILocation(line: 883, column: 5, scope: !2291, inlinedAt: !2232)
!2293 = !DILocation(line: 886, column: 17, scope: !2294, inlinedAt: !2232)
!2294 = distinct !DILexicalBlock(scope: !2285, file: !16, line: 886, column: 5)
!2295 = !DILocation(line: 887, column: 5, scope: !2294, inlinedAt: !2232)
!2296 = !DILocation(line: 889, column: 5, scope: !2297, inlinedAt: !2232)
!2297 = distinct !DILexicalBlock(scope: !2285, file: !16, line: 889, column: 5)
!2298 = !DILocation(line: 891, column: 7, scope: !2280, inlinedAt: !2232)
!2299 = !DILocation(line: 891, column: 14, scope: !2280, inlinedAt: !2232)
!2300 = !DILocation(line: 891, column: 28, scope: !2280, inlinedAt: !2232)
!2301 = !DILocalVariable(name: "value", scope: !2231, file: !16, line: 893, type: !11, align: 4)
!2302 = !DILocation(line: 893, column: 8, scope: !2231, inlinedAt: !2232)
!2303 = !DILocation(line: 893, column: 16, scope: !2231, inlinedAt: !2232)
!2304 = !DILocation(line: 894, column: 2, scope: !2231, inlinedAt: !2232)
!2305 = !DILocation(line: 894, column: 9, scope: !2306, inlinedAt: !2232)
!2306 = distinct !DILexicalBlock(scope: !2231, file: !16, line: 894, column: 2)
!2307 = !DILocation(line: 894, column: 18, scope: !2306, inlinedAt: !2232)
!2308 = !DILocalVariable(name: "c", scope: !2309, file: !16, line: 896, type: !66, align: 1)
!2309 = distinct !DILexicalBlock(scope: !2306, file: !16, line: 895, column: 2)
!2310 = !DILocation(line: 896, column: 8, scope: !2309, inlinedAt: !2232)
!2311 = !DILocation(line: 896, column: 12, scope: !2309, inlinedAt: !2232)
!2312 = !DILocation(line: 896, column: 17, scope: !2309, inlinedAt: !2232)
!2313 = !DILocation(line: 899, column: 9, scope: !2314, inlinedAt: !2232)
!2314 = distinct !DILexicalBlock(scope: !2309, file: !16, line: 897, column: 3)
!2315 = !DILocation(line: 899, column: 27, scope: !2314, inlinedAt: !2232)
!2316 = !DILocation(line: 899, column: 38, scope: !2317, inlinedAt: !2232)
!2317 = distinct !DILexicalBlock(scope: !2314, file: !16, line: 899, column: 38)
!2318 = !DILocation(line: 900, column: 9, scope: !2314, inlinedAt: !2232)
!2319 = !DILocation(line: 900, column: 38, scope: !2320, inlinedAt: !2232)
!2320 = distinct !DILexicalBlock(scope: !2314, file: !16, line: 900, column: 38)
!2321 = !DILocation(line: 901, column: 9, scope: !2314, inlinedAt: !2232)
!2322 = !DILocation(line: 901, column: 20, scope: !2314, inlinedAt: !2232)
!2323 = !DILocation(line: 901, column: 45, scope: !2324, inlinedAt: !2232)
!2324 = distinct !DILexicalBlock(scope: !2314, file: !16, line: 901, column: 38)
!2325 = !DILocation(line: 902, column: 38, scope: !2326, inlinedAt: !2232)
!2326 = distinct !DILexicalBlock(scope: !2314, file: !16, line: 902, column: 38)
!2327 = !DILocation(line: 904, column: 7, scope: !2309, inlinedAt: !2232)
!2328 = !DILocation(line: 904, column: 12, scope: !2309, inlinedAt: !2232)
!2329 = !DILocation(line: 904, column: 30, scope: !2309, inlinedAt: !2232)
!2330 = !DILocation(line: 907, column: 8, scope: !2331, inlinedAt: !2232)
!2331 = distinct !DILexicalBlock(scope: !2332, file: !16, line: 906, column: 3)
!2332 = distinct !DILexicalBlock(scope: !2309, file: !16, line: 905, column: 3)
!2333 = !DILocalVariable(name: "new_value", scope: !2334, file: !16, line: 909, type: !11, align: 4)
!2334 = distinct !DILexicalBlock(scope: !2331, file: !16, line: 908, column: 4)
!2335 = !DILocation(line: 909, column: 11, scope: !2334, inlinedAt: !2232)
!2336 = !DILocation(line: 909, column: 23, scope: !2334, inlinedAt: !2232)
!2337 = !DILocation(line: 909, column: 31, scope: !2334, inlinedAt: !2232)
!2338 = !DILocation(line: 909, column: 43, scope: !2334, inlinedAt: !2232)
!2339 = !DILocation(line: 910, column: 9, scope: !2334, inlinedAt: !2232)
!2340 = !DILocation(line: 910, column: 21, scope: !2334, inlinedAt: !2232)
!2341 = !DILocation(line: 910, column: 35, scope: !2334, inlinedAt: !2232)
!2342 = !DILocation(line: 911, column: 13, scope: !2334, inlinedAt: !2232)
!2343 = !DILocation(line: 912, column: 5, scope: !2334, inlinedAt: !2232)
!2344 = !DILocalVariable(name: "new_value", scope: !2331, file: !16, line: 914, type: !11, align: 4)
!2345 = !DILocation(line: 914, column: 10, scope: !2331, inlinedAt: !2232)
!2346 = !DILocation(line: 914, column: 22, scope: !2331, inlinedAt: !2232)
!2347 = !DILocation(line: 914, column: 30, scope: !2331, inlinedAt: !2232)
!2348 = !DILocation(line: 914, column: 42, scope: !2331, inlinedAt: !2232)
!2349 = !DILocation(line: 915, column: 8, scope: !2331, inlinedAt: !2232)
!2350 = !DILocation(line: 915, column: 20, scope: !2331, inlinedAt: !2232)
!2351 = !DILocation(line: 915, column: 34, scope: !2331, inlinedAt: !2232)
!2352 = !DILocation(line: 916, column: 12, scope: !2331, inlinedAt: !2232)
!2353 = !DILocation(line: 919, column: 9, scope: !2231, inlinedAt: !2232)
!2354 = distinct !DISubprogram(name: "to_ushort", linkageName: "std.core.String.to_ushort", scope: !16, file: !16, line: 931, type: !2355, scopeLine: 931, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!2355 = !DISubroutineType(types: !2356)
!2356 = !{!431, !1101, !61, !3}
!2357 = !DILocalVariable(name: "self", arg: 1, scope: !2354, file: !16, line: 931, type: !61)
!2358 = !DILocation(line: 931, column: 29, scope: !2354)
!2359 = !DILocalVariable(name: "base", arg: 2, scope: !2354, file: !16, line: 931, type: !3)
!2360 = !DILocation(line: 931, column: 39, scope: !2354)
!2361 = !DILocation(line: 843, column: 11, scope: !2362, inlinedAt: !2364)
!2362 = distinct !DILexicalBlock(scope: !2363, file: !16, line: 850, column: 1)
!2363 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !16, file: !16, line: 849, scopeLine: 849, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!2364 = !DILocation(line: 931, column: 53, scope: !2354)
!2365 = !DILocation(line: 843, column: 23, scope: !2362, inlinedAt: !2364)
!2366 = !DILocation(line: 931, column: 53, scope: !2362, inlinedAt: !2364)
!2367 = !DILocalVariable(name: "len", scope: !2363, file: !16, line: 851, type: !68, align: 8)
!2368 = !DILocation(line: 851, column: 6, scope: !2363, inlinedAt: !2364)
!2369 = !DILocation(line: 851, column: 12, scope: !2363, inlinedAt: !2364)
!2370 = !DILocalVariable(name: "index", scope: !2363, file: !16, line: 852, type: !68, align: 8)
!2371 = !DILocation(line: 852, column: 6, scope: !2363, inlinedAt: !2364)
!2372 = !DILocation(line: 852, column: 14, scope: !2363, inlinedAt: !2364)
!2373 = !DILocalVariable(name: "ptr", scope: !2363, file: !16, line: 853, type: !65, align: 8)
!2374 = !DILocation(line: 853, column: 8, scope: !2363, inlinedAt: !2364)
!2375 = !DILocation(line: 853, column: 14, scope: !2363, inlinedAt: !2364)
!2376 = !DILocation(line: 854, column: 2, scope: !2363, inlinedAt: !2364)
!2377 = !DILocation(line: 854, column: 9, scope: !2378, inlinedAt: !2364)
!2378 = distinct !DILexicalBlock(scope: !2363, file: !16, line: 854, column: 2)
!2379 = !DILocation(line: 854, column: 17, scope: !2378, inlinedAt: !2364)
!2380 = !DILocation(line: 854, column: 24, scope: !2378, inlinedAt: !2364)
!2381 = !DILocation(line: 854, column: 28, scope: !2378, inlinedAt: !2364)
!2382 = !DILocation(line: 19, column: 42, scope: !2383, inlinedAt: !2384)
!2383 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !1180, file: !1180, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2384 = !DILocation(line: 54, column: 38, scope: !2385, inlinedAt: !2380)
!2385 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !1180, file: !1180, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2386 = !DILocation(line: 854, column: 47, scope: !2378, inlinedAt: !2364)
!2387 = !DILocation(line: 855, column: 6, scope: !2363, inlinedAt: !2364)
!2388 = !DILocation(line: 855, column: 13, scope: !2363, inlinedAt: !2364)
!2389 = !DILocation(line: 855, column: 27, scope: !2363, inlinedAt: !2364)
!2390 = !DILocalVariable(name: "is_negative", scope: !2363, file: !16, line: 856, type: !119, align: 1)
!2391 = !DILocation(line: 856, column: 7, scope: !2363, inlinedAt: !2364)
!2392 = !DILocation(line: 857, column: 10, scope: !2393, inlinedAt: !2364)
!2393 = distinct !DILexicalBlock(scope: !2363, file: !16, line: 857, column: 2)
!2394 = !DILocation(line: 857, column: 15, scope: !2393, inlinedAt: !2364)
!2395 = !DILocation(line: 860, column: 8, scope: !2396, inlinedAt: !2364)
!2396 = distinct !DILexicalBlock(scope: !2393, file: !16, line: 860, column: 4)
!2397 = !DILocation(line: 860, column: 31, scope: !2396, inlinedAt: !2364)
!2398 = !DILocation(line: 864, column: 4, scope: !2399, inlinedAt: !2364)
!2399 = distinct !DILexicalBlock(scope: !2393, file: !16, line: 864, column: 4)
!2400 = !DILocation(line: 866, column: 4, scope: !2401, inlinedAt: !2364)
!2401 = distinct !DILexicalBlock(scope: !2393, file: !16, line: 866, column: 4)
!2402 = !DILocation(line: 868, column: 6, scope: !2363, inlinedAt: !2364)
!2403 = !DILocation(line: 868, column: 13, scope: !2363, inlinedAt: !2364)
!2404 = !DILocation(line: 868, column: 27, scope: !2363, inlinedAt: !2364)
!2405 = !DILocalVariable(name: "base_used", scope: !2363, file: !16, line: 869, type: !1052, align: 2)
!2406 = !DILocation(line: 869, column: 8, scope: !2363, inlinedAt: !2364)
!2407 = !DILocation(line: 869, column: 20, scope: !2363, inlinedAt: !2364)
!2408 = !DILocation(line: 870, column: 6, scope: !2363, inlinedAt: !2364)
!2409 = !DILocation(line: 870, column: 11, scope: !2363, inlinedAt: !2364)
!2410 = !DILocation(line: 870, column: 28, scope: !2363, inlinedAt: !2364)
!2411 = !DILocation(line: 872, column: 3, scope: !2412, inlinedAt: !2364)
!2412 = distinct !DILexicalBlock(scope: !2363, file: !16, line: 871, column: 2)
!2413 = !DILocation(line: 873, column: 7, scope: !2412, inlinedAt: !2364)
!2414 = !DILocation(line: 873, column: 16, scope: !2412, inlinedAt: !2364)
!2415 = !DILocation(line: 873, column: 28, scope: !2412, inlinedAt: !2364)
!2416 = !DILocation(line: 874, column: 11, scope: !2417, inlinedAt: !2364)
!2417 = distinct !DILexicalBlock(scope: !2412, file: !16, line: 874, column: 3)
!2418 = !DILocation(line: 874, column: 16, scope: !2417, inlinedAt: !2364)
!2419 = !DILocation(line: 878, column: 17, scope: !2420, inlinedAt: !2364)
!2420 = distinct !DILexicalBlock(scope: !2417, file: !16, line: 878, column: 5)
!2421 = !DILocation(line: 879, column: 5, scope: !2420, inlinedAt: !2364)
!2422 = !DILocation(line: 882, column: 17, scope: !2423, inlinedAt: !2364)
!2423 = distinct !DILexicalBlock(scope: !2417, file: !16, line: 882, column: 5)
!2424 = !DILocation(line: 883, column: 5, scope: !2423, inlinedAt: !2364)
!2425 = !DILocation(line: 886, column: 17, scope: !2426, inlinedAt: !2364)
!2426 = distinct !DILexicalBlock(scope: !2417, file: !16, line: 886, column: 5)
!2427 = !DILocation(line: 887, column: 5, scope: !2426, inlinedAt: !2364)
!2428 = !DILocation(line: 889, column: 5, scope: !2429, inlinedAt: !2364)
!2429 = distinct !DILexicalBlock(scope: !2417, file: !16, line: 889, column: 5)
!2430 = !DILocation(line: 891, column: 7, scope: !2412, inlinedAt: !2364)
!2431 = !DILocation(line: 891, column: 14, scope: !2412, inlinedAt: !2364)
!2432 = !DILocation(line: 891, column: 28, scope: !2412, inlinedAt: !2364)
!2433 = !DILocalVariable(name: "value", scope: !2363, file: !16, line: 893, type: !1052, align: 2)
!2434 = !DILocation(line: 893, column: 8, scope: !2363, inlinedAt: !2364)
!2435 = !DILocation(line: 893, column: 16, scope: !2363, inlinedAt: !2364)
!2436 = !DILocation(line: 894, column: 2, scope: !2363, inlinedAt: !2364)
!2437 = !DILocation(line: 894, column: 9, scope: !2438, inlinedAt: !2364)
!2438 = distinct !DILexicalBlock(scope: !2363, file: !16, line: 894, column: 2)
!2439 = !DILocation(line: 894, column: 18, scope: !2438, inlinedAt: !2364)
!2440 = !DILocalVariable(name: "c", scope: !2441, file: !16, line: 896, type: !66, align: 1)
!2441 = distinct !DILexicalBlock(scope: !2438, file: !16, line: 895, column: 2)
!2442 = !DILocation(line: 896, column: 8, scope: !2441, inlinedAt: !2364)
!2443 = !DILocation(line: 896, column: 12, scope: !2441, inlinedAt: !2364)
!2444 = !DILocation(line: 896, column: 17, scope: !2441, inlinedAt: !2364)
!2445 = !DILocation(line: 899, column: 9, scope: !2446, inlinedAt: !2364)
!2446 = distinct !DILexicalBlock(scope: !2441, file: !16, line: 897, column: 3)
!2447 = !DILocation(line: 899, column: 27, scope: !2446, inlinedAt: !2364)
!2448 = !DILocation(line: 899, column: 38, scope: !2449, inlinedAt: !2364)
!2449 = distinct !DILexicalBlock(scope: !2446, file: !16, line: 899, column: 38)
!2450 = !DILocation(line: 900, column: 9, scope: !2446, inlinedAt: !2364)
!2451 = !DILocation(line: 900, column: 38, scope: !2452, inlinedAt: !2364)
!2452 = distinct !DILexicalBlock(scope: !2446, file: !16, line: 900, column: 38)
!2453 = !DILocation(line: 901, column: 9, scope: !2446, inlinedAt: !2364)
!2454 = !DILocation(line: 901, column: 20, scope: !2446, inlinedAt: !2364)
!2455 = !DILocation(line: 901, column: 45, scope: !2456, inlinedAt: !2364)
!2456 = distinct !DILexicalBlock(scope: !2446, file: !16, line: 901, column: 38)
!2457 = !DILocation(line: 902, column: 38, scope: !2458, inlinedAt: !2364)
!2458 = distinct !DILexicalBlock(scope: !2446, file: !16, line: 902, column: 38)
!2459 = !DILocation(line: 904, column: 7, scope: !2441, inlinedAt: !2364)
!2460 = !DILocation(line: 904, column: 12, scope: !2441, inlinedAt: !2364)
!2461 = !DILocation(line: 904, column: 30, scope: !2441, inlinedAt: !2364)
!2462 = !DILocation(line: 907, column: 8, scope: !2463, inlinedAt: !2364)
!2463 = distinct !DILexicalBlock(scope: !2464, file: !16, line: 906, column: 3)
!2464 = distinct !DILexicalBlock(scope: !2441, file: !16, line: 905, column: 3)
!2465 = !DILocalVariable(name: "new_value", scope: !2466, file: !16, line: 909, type: !1052, align: 2)
!2466 = distinct !DILexicalBlock(scope: !2463, file: !16, line: 908, column: 4)
!2467 = !DILocation(line: 909, column: 11, scope: !2466, inlinedAt: !2364)
!2468 = !DILocation(line: 909, column: 23, scope: !2466, inlinedAt: !2364)
!2469 = !DILocation(line: 909, column: 31, scope: !2466, inlinedAt: !2364)
!2470 = !DILocation(line: 909, column: 43, scope: !2466, inlinedAt: !2364)
!2471 = !DILocation(line: 910, column: 9, scope: !2466, inlinedAt: !2364)
!2472 = !DILocation(line: 910, column: 21, scope: !2466, inlinedAt: !2364)
!2473 = !DILocation(line: 910, column: 35, scope: !2466, inlinedAt: !2364)
!2474 = !DILocation(line: 911, column: 13, scope: !2466, inlinedAt: !2364)
!2475 = !DILocation(line: 912, column: 5, scope: !2466, inlinedAt: !2364)
!2476 = !DILocalVariable(name: "new_value", scope: !2463, file: !16, line: 914, type: !1052, align: 2)
!2477 = !DILocation(line: 914, column: 10, scope: !2463, inlinedAt: !2364)
!2478 = !DILocation(line: 914, column: 22, scope: !2463, inlinedAt: !2364)
!2479 = !DILocation(line: 914, column: 30, scope: !2463, inlinedAt: !2364)
!2480 = !DILocation(line: 914, column: 42, scope: !2463, inlinedAt: !2364)
!2481 = !DILocation(line: 915, column: 8, scope: !2463, inlinedAt: !2364)
!2482 = !DILocation(line: 915, column: 20, scope: !2463, inlinedAt: !2364)
!2483 = !DILocation(line: 915, column: 34, scope: !2463, inlinedAt: !2364)
!2484 = !DILocation(line: 916, column: 12, scope: !2463, inlinedAt: !2364)
!2485 = !DILocation(line: 919, column: 9, scope: !2363, inlinedAt: !2364)
!2486 = distinct !DISubprogram(name: "to_uchar", linkageName: "std.core.String.to_uchar", scope: !16, file: !16, line: 932, type: !2487, scopeLine: 932, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!2487 = !DISubroutineType(types: !2488)
!2488 = !{!431, !65, !61, !3}
!2489 = !DILocalVariable(name: "self", arg: 1, scope: !2486, file: !16, line: 932, type: !61)
!2490 = !DILocation(line: 932, column: 26, scope: !2486)
!2491 = !DILocalVariable(name: "base", arg: 2, scope: !2486, file: !16, line: 932, type: !3)
!2492 = !DILocation(line: 932, column: 36, scope: !2486)
!2493 = !DILocation(line: 843, column: 11, scope: !2494, inlinedAt: !2496)
!2494 = distinct !DILexicalBlock(scope: !2495, file: !16, line: 850, column: 1)
!2495 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !16, file: !16, line: 849, scopeLine: 849, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!2496 = !DILocation(line: 932, column: 50, scope: !2486)
!2497 = !DILocation(line: 843, column: 23, scope: !2494, inlinedAt: !2496)
!2498 = !DILocation(line: 932, column: 50, scope: !2494, inlinedAt: !2496)
!2499 = !DILocalVariable(name: "len", scope: !2495, file: !16, line: 851, type: !68, align: 8)
!2500 = !DILocation(line: 851, column: 6, scope: !2495, inlinedAt: !2496)
!2501 = !DILocation(line: 851, column: 12, scope: !2495, inlinedAt: !2496)
!2502 = !DILocalVariable(name: "index", scope: !2495, file: !16, line: 852, type: !68, align: 8)
!2503 = !DILocation(line: 852, column: 6, scope: !2495, inlinedAt: !2496)
!2504 = !DILocation(line: 852, column: 14, scope: !2495, inlinedAt: !2496)
!2505 = !DILocalVariable(name: "ptr", scope: !2495, file: !16, line: 853, type: !65, align: 8)
!2506 = !DILocation(line: 853, column: 8, scope: !2495, inlinedAt: !2496)
!2507 = !DILocation(line: 853, column: 14, scope: !2495, inlinedAt: !2496)
!2508 = !DILocation(line: 854, column: 2, scope: !2495, inlinedAt: !2496)
!2509 = !DILocation(line: 854, column: 9, scope: !2510, inlinedAt: !2496)
!2510 = distinct !DILexicalBlock(scope: !2495, file: !16, line: 854, column: 2)
!2511 = !DILocation(line: 854, column: 17, scope: !2510, inlinedAt: !2496)
!2512 = !DILocation(line: 854, column: 24, scope: !2510, inlinedAt: !2496)
!2513 = !DILocation(line: 854, column: 28, scope: !2510, inlinedAt: !2496)
!2514 = !DILocation(line: 19, column: 42, scope: !2515, inlinedAt: !2516)
!2515 = distinct !DISubprogram(name: "@is_blank", linkageName: "@is_blank", scope: !1180, file: !1180, line: 19, scopeLine: 19, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2516 = !DILocation(line: 54, column: 38, scope: !2517, inlinedAt: !2512)
!2517 = distinct !DISubprogram(name: "is_blank", linkageName: "is_blank", scope: !1180, file: !1180, line: 54, scopeLine: 54, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2518 = !DILocation(line: 854, column: 47, scope: !2510, inlinedAt: !2496)
!2519 = !DILocation(line: 855, column: 6, scope: !2495, inlinedAt: !2496)
!2520 = !DILocation(line: 855, column: 13, scope: !2495, inlinedAt: !2496)
!2521 = !DILocation(line: 855, column: 27, scope: !2495, inlinedAt: !2496)
!2522 = !DILocalVariable(name: "is_negative", scope: !2495, file: !16, line: 856, type: !119, align: 1)
!2523 = !DILocation(line: 856, column: 7, scope: !2495, inlinedAt: !2496)
!2524 = !DILocation(line: 857, column: 10, scope: !2525, inlinedAt: !2496)
!2525 = distinct !DILexicalBlock(scope: !2495, file: !16, line: 857, column: 2)
!2526 = !DILocation(line: 857, column: 15, scope: !2525, inlinedAt: !2496)
!2527 = !DILocation(line: 860, column: 8, scope: !2528, inlinedAt: !2496)
!2528 = distinct !DILexicalBlock(scope: !2525, file: !16, line: 860, column: 4)
!2529 = !DILocation(line: 860, column: 31, scope: !2528, inlinedAt: !2496)
!2530 = !DILocation(line: 864, column: 4, scope: !2531, inlinedAt: !2496)
!2531 = distinct !DILexicalBlock(scope: !2525, file: !16, line: 864, column: 4)
!2532 = !DILocation(line: 866, column: 4, scope: !2533, inlinedAt: !2496)
!2533 = distinct !DILexicalBlock(scope: !2525, file: !16, line: 866, column: 4)
!2534 = !DILocation(line: 868, column: 6, scope: !2495, inlinedAt: !2496)
!2535 = !DILocation(line: 868, column: 13, scope: !2495, inlinedAt: !2496)
!2536 = !DILocation(line: 868, column: 27, scope: !2495, inlinedAt: !2496)
!2537 = !DILocalVariable(name: "base_used", scope: !2495, file: !16, line: 869, type: !66, align: 1)
!2538 = !DILocation(line: 869, column: 8, scope: !2495, inlinedAt: !2496)
!2539 = !DILocation(line: 869, column: 20, scope: !2495, inlinedAt: !2496)
!2540 = !DILocation(line: 870, column: 6, scope: !2495, inlinedAt: !2496)
!2541 = !DILocation(line: 870, column: 11, scope: !2495, inlinedAt: !2496)
!2542 = !DILocation(line: 870, column: 28, scope: !2495, inlinedAt: !2496)
!2543 = !DILocation(line: 872, column: 3, scope: !2544, inlinedAt: !2496)
!2544 = distinct !DILexicalBlock(scope: !2495, file: !16, line: 871, column: 2)
!2545 = !DILocation(line: 873, column: 7, scope: !2544, inlinedAt: !2496)
!2546 = !DILocation(line: 873, column: 16, scope: !2544, inlinedAt: !2496)
!2547 = !DILocation(line: 873, column: 28, scope: !2544, inlinedAt: !2496)
!2548 = !DILocation(line: 874, column: 11, scope: !2549, inlinedAt: !2496)
!2549 = distinct !DILexicalBlock(scope: !2544, file: !16, line: 874, column: 3)
!2550 = !DILocation(line: 874, column: 16, scope: !2549, inlinedAt: !2496)
!2551 = !DILocation(line: 878, column: 17, scope: !2552, inlinedAt: !2496)
!2552 = distinct !DILexicalBlock(scope: !2549, file: !16, line: 878, column: 5)
!2553 = !DILocation(line: 879, column: 5, scope: !2552, inlinedAt: !2496)
!2554 = !DILocation(line: 882, column: 17, scope: !2555, inlinedAt: !2496)
!2555 = distinct !DILexicalBlock(scope: !2549, file: !16, line: 882, column: 5)
!2556 = !DILocation(line: 883, column: 5, scope: !2555, inlinedAt: !2496)
!2557 = !DILocation(line: 886, column: 17, scope: !2558, inlinedAt: !2496)
!2558 = distinct !DILexicalBlock(scope: !2549, file: !16, line: 886, column: 5)
!2559 = !DILocation(line: 887, column: 5, scope: !2558, inlinedAt: !2496)
!2560 = !DILocation(line: 889, column: 5, scope: !2561, inlinedAt: !2496)
!2561 = distinct !DILexicalBlock(scope: !2549, file: !16, line: 889, column: 5)
!2562 = !DILocation(line: 891, column: 7, scope: !2544, inlinedAt: !2496)
!2563 = !DILocation(line: 891, column: 14, scope: !2544, inlinedAt: !2496)
!2564 = !DILocation(line: 891, column: 28, scope: !2544, inlinedAt: !2496)
!2565 = !DILocalVariable(name: "value", scope: !2495, file: !16, line: 893, type: !66, align: 1)
!2566 = !DILocation(line: 893, column: 8, scope: !2495, inlinedAt: !2496)
!2567 = !DILocation(line: 893, column: 16, scope: !2495, inlinedAt: !2496)
!2568 = !DILocation(line: 894, column: 2, scope: !2495, inlinedAt: !2496)
!2569 = !DILocation(line: 894, column: 9, scope: !2570, inlinedAt: !2496)
!2570 = distinct !DILexicalBlock(scope: !2495, file: !16, line: 894, column: 2)
!2571 = !DILocation(line: 894, column: 18, scope: !2570, inlinedAt: !2496)
!2572 = !DILocalVariable(name: "c", scope: !2573, file: !16, line: 896, type: !66, align: 1)
!2573 = distinct !DILexicalBlock(scope: !2570, file: !16, line: 895, column: 2)
!2574 = !DILocation(line: 896, column: 8, scope: !2573, inlinedAt: !2496)
!2575 = !DILocation(line: 896, column: 12, scope: !2573, inlinedAt: !2496)
!2576 = !DILocation(line: 896, column: 17, scope: !2573, inlinedAt: !2496)
!2577 = !DILocation(line: 899, column: 9, scope: !2578, inlinedAt: !2496)
!2578 = distinct !DILexicalBlock(scope: !2573, file: !16, line: 897, column: 3)
!2579 = !DILocation(line: 899, column: 27, scope: !2578, inlinedAt: !2496)
!2580 = !DILocation(line: 899, column: 38, scope: !2581, inlinedAt: !2496)
!2581 = distinct !DILexicalBlock(scope: !2578, file: !16, line: 899, column: 38)
!2582 = !DILocation(line: 900, column: 9, scope: !2578, inlinedAt: !2496)
!2583 = !DILocation(line: 900, column: 38, scope: !2584, inlinedAt: !2496)
!2584 = distinct !DILexicalBlock(scope: !2578, file: !16, line: 900, column: 38)
!2585 = !DILocation(line: 901, column: 9, scope: !2578, inlinedAt: !2496)
!2586 = !DILocation(line: 901, column: 20, scope: !2578, inlinedAt: !2496)
!2587 = !DILocation(line: 901, column: 45, scope: !2588, inlinedAt: !2496)
!2588 = distinct !DILexicalBlock(scope: !2578, file: !16, line: 901, column: 38)
!2589 = !DILocation(line: 902, column: 38, scope: !2590, inlinedAt: !2496)
!2590 = distinct !DILexicalBlock(scope: !2578, file: !16, line: 902, column: 38)
!2591 = !DILocation(line: 904, column: 7, scope: !2573, inlinedAt: !2496)
!2592 = !DILocation(line: 904, column: 12, scope: !2573, inlinedAt: !2496)
!2593 = !DILocation(line: 904, column: 30, scope: !2573, inlinedAt: !2496)
!2594 = !DILocation(line: 907, column: 8, scope: !2595, inlinedAt: !2496)
!2595 = distinct !DILexicalBlock(scope: !2596, file: !16, line: 906, column: 3)
!2596 = distinct !DILexicalBlock(scope: !2573, file: !16, line: 905, column: 3)
!2597 = !DILocalVariable(name: "new_value", scope: !2598, file: !16, line: 909, type: !66, align: 1)
!2598 = distinct !DILexicalBlock(scope: !2595, file: !16, line: 908, column: 4)
!2599 = !DILocation(line: 909, column: 11, scope: !2598, inlinedAt: !2496)
!2600 = !DILocation(line: 909, column: 23, scope: !2598, inlinedAt: !2496)
!2601 = !DILocation(line: 909, column: 31, scope: !2598, inlinedAt: !2496)
!2602 = !DILocation(line: 909, column: 43, scope: !2598, inlinedAt: !2496)
!2603 = !DILocation(line: 910, column: 9, scope: !2598, inlinedAt: !2496)
!2604 = !DILocation(line: 910, column: 21, scope: !2598, inlinedAt: !2496)
!2605 = !DILocation(line: 910, column: 35, scope: !2598, inlinedAt: !2496)
!2606 = !DILocation(line: 911, column: 13, scope: !2598, inlinedAt: !2496)
!2607 = !DILocation(line: 912, column: 5, scope: !2598, inlinedAt: !2496)
!2608 = !DILocalVariable(name: "new_value", scope: !2595, file: !16, line: 914, type: !66, align: 1)
!2609 = !DILocation(line: 914, column: 10, scope: !2595, inlinedAt: !2496)
!2610 = !DILocation(line: 914, column: 22, scope: !2595, inlinedAt: !2496)
!2611 = !DILocation(line: 914, column: 30, scope: !2595, inlinedAt: !2496)
!2612 = !DILocation(line: 914, column: 42, scope: !2595, inlinedAt: !2496)
!2613 = !DILocation(line: 915, column: 8, scope: !2595, inlinedAt: !2496)
!2614 = !DILocation(line: 915, column: 20, scope: !2595, inlinedAt: !2496)
!2615 = !DILocation(line: 915, column: 34, scope: !2595, inlinedAt: !2496)
!2616 = !DILocation(line: 916, column: 12, scope: !2595, inlinedAt: !2496)
!2617 = !DILocation(line: 919, column: 9, scope: !2495, inlinedAt: !2496)
!2618 = distinct !DISubprogram(name: "to_double", linkageName: "std.core.String.to_double", scope: !16, file: !16, line: 934, type: !2619, scopeLine: 934, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!2619 = !DISubroutineType(types: !2620)
!2620 = !{!431, !2621, !61}
!2621 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "double*", baseType: !2622, size: 64, align: 64, dwarfAddressSpace: 0)
!2622 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!2623 = !DILocalVariable(name: "self", arg: 1, scope: !2618, file: !16, line: 934, type: !61)
!2624 = !DILocation(line: 934, column: 29, scope: !2618)
!2625 = !DILocalVariable(name: "sign", scope: !2626, file: !16, line: 451, type: !3, align: 4)
!2626 = distinct !DISubprogram(name: "to_real", linkageName: "to_real", scope: !2, file: !2, line: 449, scopeLine: 449, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!2627 = !DILocation(line: 451, column: 6, scope: !2626, inlinedAt: !2628)
!2628 = !DILocation(line: 934, column: 38, scope: !2618)
!2629 = !DILocation(line: 451, column: 13, scope: !2626, inlinedAt: !2628)
!2630 = !DILocation(line: 465, column: 2, scope: !2626, inlinedAt: !2628)
!2631 = !DILocation(line: 465, column: 9, scope: !2632, inlinedAt: !2628)
!2632 = distinct !DILexicalBlock(scope: !2626, file: !2, line: 465, column: 2)
!2633 = !DILocation(line: 465, column: 22, scope: !2632, inlinedAt: !2628)
!2634 = !DILocation(line: 465, column: 28, scope: !2632, inlinedAt: !2628)
!2635 = !DILocation(line: 465, column: 47, scope: !2632, inlinedAt: !2628)
!2636 = !DILocation(line: 465, column: 53, scope: !2632, inlinedAt: !2628)
!2637 = !DILocation(line: 466, column: 6, scope: !2626, inlinedAt: !2628)
!2638 = !DILocation(line: 466, column: 25, scope: !2626, inlinedAt: !2628)
!2639 = !DILocation(line: 468, column: 6, scope: !2626, inlinedAt: !2628)
!2640 = !DILocation(line: 470, column: 11, scope: !2641, inlinedAt: !2628)
!2641 = distinct !DILexicalBlock(scope: !2642, file: !2, line: 470, column: 3)
!2642 = distinct !DILexicalBlock(scope: !2626, file: !2, line: 469, column: 2)
!2643 = !DILocation(line: 470, column: 17, scope: !2641, inlinedAt: !2628)
!2644 = !DILocation(line: 473, column: 12, scope: !2645, inlinedAt: !2628)
!2645 = distinct !DILexicalBlock(scope: !2641, file: !2, line: 473, column: 5)
!2646 = !DILocation(line: 474, column: 5, scope: !2645, inlinedAt: !2628)
!2647 = !DILocation(line: 476, column: 13, scope: !2648, inlinedAt: !2628)
!2648 = distinct !DILexicalBlock(scope: !2641, file: !2, line: 476, column: 5)
!2649 = !DILocation(line: 476, column: 19, scope: !2648, inlinedAt: !2628)
!2650 = !DILocation(line: 479, column: 6, scope: !2626, inlinedAt: !2628)
!2651 = !DILocation(line: 479, column: 29, scope: !2626, inlinedAt: !2628)
!2652 = !DILocation(line: 479, column: 57, scope: !2626, inlinedAt: !2628)
!2653 = !DILocation(line: 480, column: 6, scope: !2626, inlinedAt: !2628)
!2654 = !DILocation(line: 480, column: 24, scope: !2626, inlinedAt: !2628)
!2655 = !DILocation(line: 480, column: 47, scope: !2626, inlinedAt: !2628)
!2656 = !DILocation(line: 482, column: 6, scope: !2626, inlinedAt: !2628)
!2657 = !DILocation(line: 482, column: 23, scope: !2626, inlinedAt: !2628)
!2658 = !DILocation(line: 482, column: 29, scope: !2626, inlinedAt: !2628)
!2659 = !DILocation(line: 482, column: 43, scope: !2626, inlinedAt: !2628)
!2660 = !DILocation(line: 482, column: 49, scope: !2626, inlinedAt: !2628)
!2661 = !DILocation(line: 484, column: 34, scope: !2662, inlinedAt: !2628)
!2662 = distinct !DILexicalBlock(scope: !2626, file: !2, line: 483, column: 2)
!2663 = !DILocation(line: 484, column: 40, scope: !2662, inlinedAt: !2628)
!2664 = !DILocation(line: 484, column: 26, scope: !2662, inlinedAt: !2628)
!2665 = !DILocalVariable(name: "scale", scope: !2666, file: !16, line: 330, type: !2622, align: 8)
!2666 = distinct !DISubprogram(name: "hexfloat", linkageName: "hexfloat", scope: !2, file: !2, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!2667 = !DILocation(line: 330, column: 9, scope: !2666, inlinedAt: !2668)
!2668 = !DILocation(line: 484, column: 10, scope: !2662, inlinedAt: !2628)
!2669 = !DILocation(line: 330, column: 17, scope: !2666, inlinedAt: !2668)
!2670 = !DILocalVariable(name: "x", scope: !2666, file: !16, line: 331, type: !11, align: 4)
!2671 = !DILocation(line: 331, column: 7, scope: !2666, inlinedAt: !2668)
!2672 = !DILocalVariable(name: "rp", scope: !2666, file: !16, line: 332, type: !432, align: 8)
!2673 = !DILocation(line: 332, column: 7, scope: !2666, inlinedAt: !2668)
!2674 = !DILocalVariable(name: "dc", scope: !2666, file: !16, line: 333, type: !432, align: 8)
!2675 = !DILocation(line: 333, column: 7, scope: !2666, inlinedAt: !2668)
!2676 = !DILocalVariable(name: "c", scope: !2666, file: !16, line: 334, type: !66, align: 1)
!2677 = !DILocation(line: 334, column: 7, scope: !2666, inlinedAt: !2668)
!2678 = !DILocalVariable(name: "got_rad", scope: !2666, file: !16, line: 335, type: !119, align: 1)
!2679 = !DILocation(line: 335, column: 7, scope: !2666, inlinedAt: !2668)
!2680 = !DILocalVariable(name: "got_digit", scope: !2666, file: !16, line: 336, type: !119, align: 1)
!2681 = !DILocation(line: 336, column: 7, scope: !2666, inlinedAt: !2668)
!2682 = !DILocalVariable(name: "got_tail", scope: !2666, file: !16, line: 337, type: !119, align: 1)
!2683 = !DILocation(line: 337, column: 7, scope: !2666, inlinedAt: !2668)
!2684 = !DILocalVariable(name: "len", scope: !2666, file: !16, line: 338, type: !68, align: 8)
!2685 = !DILocation(line: 338, column: 6, scope: !2666, inlinedAt: !2668)
!2686 = !DILocation(line: 338, column: 12, scope: !2666, inlinedAt: !2668)
!2687 = !DILocalVariable(name: "last_char", scope: !2666, file: !16, line: 339, type: !68, align: 8)
!2688 = !DILocation(line: 339, column: 6, scope: !2666, inlinedAt: !2668)
!2689 = !DILocation(line: 339, column: 18, scope: !2666, inlinedAt: !2668)
!2690 = !DILocalVariable(name: "index", scope: !2666, file: !16, line: 340, type: !68, align: 8)
!2691 = !DILocation(line: 340, column: 6, scope: !2666, inlinedAt: !2668)
!2692 = !DILocalVariable(name: "y", scope: !2666, file: !16, line: 341, type: !2622, align: 8)
!2693 = !DILocation(line: 341, column: 9, scope: !2666, inlinedAt: !2668)
!2694 = !DILocation(line: 344, column: 2, scope: !2666, inlinedAt: !2668)
!2695 = !DILocation(line: 344, column: 14, scope: !2696, inlinedAt: !2668)
!2696 = distinct !DILexicalBlock(scope: !2666, file: !2, line: 344, column: 2)
!2697 = !DILocation(line: 344, column: 20, scope: !2696, inlinedAt: !2668)
!2698 = !DILocation(line: 344, column: 10, scope: !2696, inlinedAt: !2668)
!2699 = !DILocation(line: 346, column: 7, scope: !2700, inlinedAt: !2668)
!2700 = distinct !DILexicalBlock(scope: !2696, file: !2, line: 345, column: 2)
!2701 = !DILocation(line: 346, column: 16, scope: !2700, inlinedAt: !2668)
!2702 = !DILocation(line: 346, column: 34, scope: !2700, inlinedAt: !2668)
!2703 = !DILocation(line: 347, column: 3, scope: !2700, inlinedAt: !2668)
!2704 = !DILocation(line: 349, column: 6, scope: !2666, inlinedAt: !2668)
!2705 = !DILocation(line: 351, column: 13, scope: !2706, inlinedAt: !2668)
!2706 = distinct !DILexicalBlock(scope: !2666, file: !2, line: 350, column: 2)
!2707 = !DILocation(line: 352, column: 7, scope: !2706, inlinedAt: !2668)
!2708 = !DILocation(line: 352, column: 16, scope: !2706, inlinedAt: !2668)
!2709 = !DILocation(line: 354, column: 9, scope: !2710, inlinedAt: !2668)
!2710 = distinct !DILexicalBlock(scope: !2706, file: !2, line: 353, column: 3)
!2711 = !DILocation(line: 354, column: 27, scope: !2710, inlinedAt: !2668)
!2712 = !DILocation(line: 355, column: 11, scope: !2710, inlinedAt: !2668)
!2713 = !DILocation(line: 357, column: 7, scope: !2706, inlinedAt: !2668)
!2714 = !DILocation(line: 357, column: 16, scope: !2706, inlinedAt: !2668)
!2715 = !DILocation(line: 357, column: 34, scope: !2706, inlinedAt: !2668)
!2716 = !DILocation(line: 357, column: 42, scope: !2706, inlinedAt: !2668)
!2717 = !DILocation(line: 357, column: 40, scope: !2706, inlinedAt: !2668)
!2718 = !DILocation(line: 357, column: 30, scope: !2706, inlinedAt: !2668)
!2719 = !DILocation(line: 359, column: 4, scope: !2720, inlinedAt: !2668)
!2720 = distinct !DILexicalBlock(scope: !2706, file: !2, line: 358, column: 3)
!2721 = !DILocation(line: 360, column: 16, scope: !2720, inlinedAt: !2668)
!2722 = !DILocation(line: 361, column: 4, scope: !2720, inlinedAt: !2668)
!2723 = !DILocation(line: 361, column: 11, scope: !2724, inlinedAt: !2668)
!2724 = distinct !DILexicalBlock(scope: !2720, file: !2, line: 361, column: 4)
!2725 = !DILocation(line: 361, column: 24, scope: !2724, inlinedAt: !2668)
!2726 = !DILocation(line: 361, column: 38, scope: !2724, inlinedAt: !2668)
!2727 = !DILocation(line: 361, column: 46, scope: !2724, inlinedAt: !2668)
!2728 = !DILocation(line: 361, column: 44, scope: !2724, inlinedAt: !2668)
!2729 = !DILocation(line: 361, column: 34, scope: !2724, inlinedAt: !2668)
!2730 = !DILocation(line: 363, column: 5, scope: !2731, inlinedAt: !2668)
!2731 = distinct !DILexicalBlock(scope: !2724, file: !2, line: 362, column: 4)
!2732 = !DILocation(line: 368, column: 2, scope: !2666, inlinedAt: !2668)
!2733 = !DILocation(line: 368, column: 10, scope: !2734, inlinedAt: !2668)
!2734 = distinct !DILexicalBlock(scope: !2666, file: !2, line: 368, column: 2)
!2735 = !DILocation(line: 368, column: 30, scope: !2734, inlinedAt: !2668)
!2736 = !DILocation(line: 368, column: 53, scope: !2734, inlinedAt: !2668)
!2737 = !DILocation(line: 370, column: 7, scope: !2738, inlinedAt: !2668)
!2738 = distinct !DILexicalBlock(scope: !2734, file: !2, line: 369, column: 2)
!2739 = !DILocation(line: 372, column: 8, scope: !2740, inlinedAt: !2668)
!2740 = distinct !DILexicalBlock(scope: !2738, file: !2, line: 371, column: 3)
!2741 = !DILocation(line: 372, column: 24, scope: !2740, inlinedAt: !2668)
!2742 = !DILocation(line: 373, column: 14, scope: !2740, inlinedAt: !2668)
!2743 = !DILocation(line: 374, column: 9, scope: !2740, inlinedAt: !2668)
!2744 = !DILocation(line: 378, column: 16, scope: !2745, inlinedAt: !2668)
!2745 = distinct !DILexicalBlock(scope: !2738, file: !2, line: 377, column: 3)
!2746 = !DILocalVariable(name: "d", scope: !2745, file: !16, line: 379, type: !3, align: 4)
!2747 = !DILocation(line: 379, column: 8, scope: !2745, inlinedAt: !2668)
!2748 = !DILocation(line: 379, column: 12, scope: !2745, inlinedAt: !2668)
!2749 = !DILocation(line: 379, column: 24, scope: !2745, inlinedAt: !2668)
!2750 = !DILocation(line: 379, column: 47, scope: !2745, inlinedAt: !2668)
!2751 = !DILocation(line: 382, column: 10, scope: !2752, inlinedAt: !2668)
!2752 = distinct !DILexicalBlock(scope: !2745, file: !2, line: 380, column: 4)
!2753 = !DILocation(line: 383, column: 10, scope: !2754, inlinedAt: !2668)
!2754 = distinct !DILexicalBlock(scope: !2752, file: !2, line: 383, column: 6)
!2755 = !DILocation(line: 383, column: 19, scope: !2754, inlinedAt: !2668)
!2756 = !DILocation(line: 384, column: 10, scope: !2752, inlinedAt: !2668)
!2757 = !DILocation(line: 385, column: 6, scope: !2758, inlinedAt: !2668)
!2758 = distinct !DILexicalBlock(scope: !2752, file: !2, line: 385, column: 6)
!2759 = !DILocation(line: 385, column: 11, scope: !2758, inlinedAt: !2668)
!2760 = !DILocation(line: 385, column: 16, scope: !2758, inlinedAt: !2668)
!2761 = !DILocation(line: 386, column: 17, scope: !2758, inlinedAt: !2668)
!2762 = !DILocation(line: 387, column: 10, scope: !2752, inlinedAt: !2668)
!2763 = !DILocation(line: 387, column: 16, scope: !2752, inlinedAt: !2668)
!2764 = !DILocation(line: 388, column: 6, scope: !2765, inlinedAt: !2668)
!2765 = distinct !DILexicalBlock(scope: !2752, file: !2, line: 388, column: 6)
!2766 = !DILocation(line: 388, column: 17, scope: !2765, inlinedAt: !2668)
!2767 = !DILocation(line: 388, column: 11, scope: !2765, inlinedAt: !2668)
!2768 = !DILocation(line: 389, column: 17, scope: !2765, inlinedAt: !2668)
!2769 = !DILocation(line: 391, column: 4, scope: !2745, inlinedAt: !2668)
!2770 = !DILocation(line: 393, column: 7, scope: !2738, inlinedAt: !2668)
!2771 = !DILocation(line: 393, column: 16, scope: !2738, inlinedAt: !2668)
!2772 = !DILocation(line: 393, column: 27, scope: !2738, inlinedAt: !2668)
!2773 = !DILocation(line: 394, column: 7, scope: !2738, inlinedAt: !2668)
!2774 = !DILocation(line: 394, column: 15, scope: !2738, inlinedAt: !2668)
!2775 = !DILocation(line: 394, column: 13, scope: !2738, inlinedAt: !2668)
!2776 = !DILocation(line: 396, column: 7, scope: !2666, inlinedAt: !2668)
!2777 = !DILocation(line: 396, column: 25, scope: !2666, inlinedAt: !2668)
!2778 = !DILocation(line: 397, column: 7, scope: !2666, inlinedAt: !2668)
!2779 = !DILocation(line: 397, column: 21, scope: !2666, inlinedAt: !2668)
!2780 = !DILocation(line: 398, column: 2, scope: !2666, inlinedAt: !2668)
!2781 = !DILocation(line: 398, column: 9, scope: !2782, inlinedAt: !2668)
!2782 = distinct !DILexicalBlock(scope: !2666, file: !2, line: 398, column: 2)
!2783 = !DILocation(line: 398, column: 23, scope: !2782, inlinedAt: !2668)
!2784 = !DILocation(line: 398, column: 17, scope: !2782, inlinedAt: !2668)
!2785 = !DILocalVariable(name: "e2", scope: !2666, file: !16, line: 400, type: !432, align: 8)
!2786 = !DILocation(line: 400, column: 7, scope: !2666, inlinedAt: !2668)
!2787 = !DILocation(line: 401, column: 7, scope: !2666, inlinedAt: !2668)
!2788 = !DILocalVariable(name: "e2val", scope: !2789, file: !16, line: 403, type: !432, align: 8)
!2789 = distinct !DILexicalBlock(scope: !2666, file: !2, line: 402, column: 2)
!2790 = !DILocation(line: 403, column: 8, scope: !2789, inlinedAt: !2668)
!2791 = !DILocation(line: 403, column: 39, scope: !2789, inlinedAt: !2668)
!2792 = !DILocation(line: 403, column: 45, scope: !2789, inlinedAt: !2668)
!2793 = !DILocation(line: 403, column: 31, scope: !2789, inlinedAt: !2668)
!2794 = !DILocation(line: 403, column: 16, scope: !2789, inlinedAt: !2668)
!2795 = !DILocation(line: 403, column: 63, scope: !2789, inlinedAt: !2668)
!2796 = !DILocation(line: 404, column: 8, scope: !2789, inlinedAt: !2668)
!2797 = !DILocation(line: 406, column: 2, scope: !2666, inlinedAt: !2668)
!2798 = !DILocation(line: 406, column: 12, scope: !2666, inlinedAt: !2668)
!2799 = !DILocation(line: 406, column: 8, scope: !2666, inlinedAt: !2668)
!2800 = !DILocation(line: 407, column: 6, scope: !2666, inlinedAt: !2668)
!2801 = !DILocation(line: 407, column: 17, scope: !2666, inlinedAt: !2668)
!2802 = !DILocation(line: 408, column: 6, scope: !2666, inlinedAt: !2668)
!2803 = !DILocation(line: 408, column: 26, scope: !2666, inlinedAt: !2668)
!2804 = !DILocation(line: 409, column: 6, scope: !2666, inlinedAt: !2668)
!2805 = !DILocation(line: 409, column: 53, scope: !2666, inlinedAt: !2668)
!2806 = !DILocation(line: 411, column: 2, scope: !2666, inlinedAt: !2668)
!2807 = !DILocation(line: 411, column: 9, scope: !2808, inlinedAt: !2668)
!2808 = distinct !DILexicalBlock(scope: !2666, file: !2, line: 411, column: 2)
!2809 = !DILocation(line: 413, column: 7, scope: !2810, inlinedAt: !2668)
!2810 = distinct !DILexicalBlock(scope: !2808, file: !2, line: 412, column: 2)
!2811 = !DILocation(line: 415, column: 4, scope: !2812, inlinedAt: !2668)
!2812 = distinct !DILexicalBlock(scope: !2810, file: !2, line: 414, column: 3)
!2813 = !DILocation(line: 415, column: 9, scope: !2812, inlinedAt: !2668)
!2814 = !DILocation(line: 416, column: 4, scope: !2812, inlinedAt: !2668)
!2815 = !DILocation(line: 416, column: 9, scope: !2812, inlinedAt: !2668)
!2816 = !DILocation(line: 420, column: 4, scope: !2817, inlinedAt: !2668)
!2817 = distinct !DILexicalBlock(scope: !2810, file: !2, line: 419, column: 3)
!2818 = !DILocation(line: 420, column: 9, scope: !2817, inlinedAt: !2668)
!2819 = !DILocation(line: 421, column: 4, scope: !2817, inlinedAt: !2668)
!2820 = !DILocation(line: 421, column: 9, scope: !2817, inlinedAt: !2668)
!2821 = !DILocation(line: 423, column: 3, scope: !2810, inlinedAt: !2668)
!2822 = !DILocalVariable(name: "bits", scope: !2666, file: !16, line: 425, type: !3, align: 4)
!2823 = !DILocation(line: 425, column: 6, scope: !2666, inlinedAt: !2668)
!2824 = !DILocation(line: 425, column: 13, scope: !2666, inlinedAt: !2668)
!2825 = !DILocation(line: 426, column: 19, scope: !2666, inlinedAt: !2668)
!2826 = !DILocation(line: 426, column: 14, scope: !2666, inlinedAt: !2668)
!2827 = !DILocation(line: 426, column: 6, scope: !2666, inlinedAt: !2668)
!2828 = !DILocation(line: 428, column: 21, scope: !2829, inlinedAt: !2668)
!2829 = distinct !DILexicalBlock(scope: !2666, file: !2, line: 427, column: 2)
!2830 = !DILocation(line: 428, column: 16, scope: !2829, inlinedAt: !2668)
!2831 = !DILocation(line: 428, column: 10, scope: !2829, inlinedAt: !2668)
!2832 = !DILocation(line: 429, column: 7, scope: !2829, inlinedAt: !2668)
!2833 = !DILocation(line: 429, column: 24, scope: !2829, inlinedAt: !2668)
!2834 = !DILocalVariable(name: "bias", scope: !2666, file: !16, line: 431, type: !2622, align: 8)
!2835 = !DILocation(line: 431, column: 9, scope: !2666, inlinedAt: !2668)
!2836 = !DILocation(line: 432, column: 6, scope: !2666, inlinedAt: !2668)
!2837 = !DILocation(line: 434, column: 70, scope: !2838, inlinedAt: !2668)
!2838 = distinct !DILexicalBlock(scope: !2666, file: !2, line: 433, column: 2)
!2839 = !DILocation(line: 434, column: 41, scope: !2838, inlinedAt: !2668)
!2840 = !DILocation(line: 1013, column: 52, scope: !2841, inlinedAt: !2842)
!2841 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !327, file: !327, line: 1013, scopeLine: 1013, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2842 = !DILocation(line: 434, column: 25, scope: !2838, inlinedAt: !2668)
!2843 = !DILocation(line: 1013, column: 41, scope: !2841, inlinedAt: !2842)
!2844 = !DILocation(line: 434, column: 81, scope: !2838, inlinedAt: !2668)
!2845 = !DILocation(line: 61, column: 10, scope: !2846, inlinedAt: !2848)
!2846 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2847, file: !2847, line: 49, scopeLine: 49, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2847 = !DIFile(filename: "values.c3", directory: "/usr/lib/c3c/lib/std/core")
!2848 = !DILocation(line: 262, column: 40, scope: !2849, inlinedAt: !2850)
!2849 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !327, file: !327, line: 262, scopeLine: 262, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2850 = !DILocation(line: 434, column: 10, scope: !2838, inlinedAt: !2668)
!2851 = !DILocation(line: 262, column: 76, scope: !2849, inlinedAt: !2850)
!2852 = !DILocation(line: 437, column: 6, scope: !2666, inlinedAt: !2668)
!2853 = !DILocation(line: 437, column: 19, scope: !2666, inlinedAt: !2668)
!2854 = !DILocation(line: 437, column: 26, scope: !2666, inlinedAt: !2668)
!2855 = !DILocation(line: 437, column: 24, scope: !2666, inlinedAt: !2668)
!2856 = !DILocation(line: 439, column: 3, scope: !2857, inlinedAt: !2668)
!2857 = distinct !DILexicalBlock(scope: !2666, file: !2, line: 438, column: 2)
!2858 = !DILocation(line: 440, column: 7, scope: !2857, inlinedAt: !2668)
!2859 = !DILocation(line: 442, column: 6, scope: !2666, inlinedAt: !2668)
!2860 = !DILocation(line: 442, column: 13, scope: !2666, inlinedAt: !2668)
!2861 = !DILocation(line: 442, column: 20, scope: !2666, inlinedAt: !2668)
!2862 = !DILocation(line: 442, column: 32, scope: !2666, inlinedAt: !2668)
!2863 = !DILocation(line: 442, column: 39, scope: !2666, inlinedAt: !2668)
!2864 = !DILocation(line: 443, column: 2, scope: !2666, inlinedAt: !2668)
!2865 = !DILocation(line: 443, column: 7, scope: !2666, inlinedAt: !2668)
!2866 = !DILocation(line: 444, column: 7, scope: !2666, inlinedAt: !2668)
!2867 = !DILocation(line: 444, column: 17, scope: !2666, inlinedAt: !2668)
!2868 = !DILocation(line: 446, column: 25, scope: !2666, inlinedAt: !2668)
!2869 = !DILocation(line: 1013, column: 52, scope: !2870, inlinedAt: !2871)
!2870 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !327, file: !327, line: 1013, scopeLine: 1013, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!2871 = !DILocation(line: 446, column: 9, scope: !2666, inlinedAt: !2668)
!2872 = !DILocation(line: 1013, column: 41, scope: !2870, inlinedAt: !2871)
!2873 = !DILocation(line: 35, column: 11, scope: !2874, inlinedAt: !2876)
!2874 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 38, column: 1)
!2875 = distinct !DISubprogram(name: "decfloat", linkageName: "decfloat", scope: !2, file: !2, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!2876 = !DILocation(line: 486, column: 9, scope: !2626, inlinedAt: !2628)
!2877 = !DILocation(line: 486, column: 16, scope: !2874, inlinedAt: !2876)
!2878 = !DILocalVariable(name: "x", scope: !2875, file: !16, line: 39, type: !2879, align: 16)
!2879 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 4096, align: 32, elements: !2880)
!2880 = !{!2881}
!2881 = !DISubrange(count: 128, lowerBound: 0)
!2882 = !DILocation(line: 39, column: 13, scope: !2875, inlinedAt: !2876)
!2883 = !DILocalVariable(name: "emax", scope: !2875, file: !16, line: 41, type: !3, align: 4)
!2884 = !DILocation(line: 41, column: 6, scope: !2875, inlinedAt: !2876)
!2885 = !DILocation(line: 41, column: 13, scope: !2875, inlinedAt: !2876)
!2886 = !DILocalVariable(name: "index", scope: !2875, file: !16, line: 44, type: !68, align: 8)
!2887 = !DILocation(line: 44, column: 6, scope: !2875, inlinedAt: !2876)
!2888 = !DILocalVariable(name: "got_digit", scope: !2875, file: !16, line: 45, type: !119, align: 1)
!2889 = !DILocation(line: 45, column: 7, scope: !2875, inlinedAt: !2876)
!2890 = !DILocation(line: 45, column: 19, scope: !2875, inlinedAt: !2876)
!2891 = !DILocation(line: 45, column: 25, scope: !2875, inlinedAt: !2876)
!2892 = !DILocalVariable(name: "got_rad", scope: !2875, file: !16, line: 46, type: !119, align: 1)
!2893 = !DILocation(line: 46, column: 7, scope: !2875, inlinedAt: !2876)
!2894 = !DILocalVariable(name: "lrp", scope: !2875, file: !16, line: 47, type: !432, align: 8)
!2895 = !DILocation(line: 47, column: 7, scope: !2875, inlinedAt: !2876)
!2896 = !DILocalVariable(name: "dc", scope: !2875, file: !16, line: 47, type: !432, align: 8)
!2897 = !DILocation(line: 47, column: 12, scope: !2875, inlinedAt: !2876)
!2898 = !DILocalVariable(name: "k", scope: !2875, file: !16, line: 48, type: !3, align: 4)
!2899 = !DILocation(line: 48, column: 6, scope: !2875, inlinedAt: !2876)
!2900 = !DILocalVariable(name: "j", scope: !2875, file: !16, line: 48, type: !3, align: 4)
!2901 = !DILocation(line: 48, column: 9, scope: !2875, inlinedAt: !2876)
!2902 = !DILocalVariable(name: "lnz", scope: !2875, file: !16, line: 48, type: !3, align: 4)
!2903 = !DILocation(line: 48, column: 12, scope: !2875, inlinedAt: !2876)
!2904 = !DILocalVariable(name: "len", scope: !2875, file: !16, line: 49, type: !68, align: 8)
!2905 = !DILocation(line: 49, column: 6, scope: !2875, inlinedAt: !2876)
!2906 = !DILocation(line: 49, column: 12, scope: !2875, inlinedAt: !2876)
!2907 = !DILocalVariable(name: "last_char", scope: !2875, file: !16, line: 50, type: !68, align: 8)
!2908 = !DILocation(line: 50, column: 6, scope: !2875, inlinedAt: !2876)
!2909 = !DILocation(line: 50, column: 18, scope: !2875, inlinedAt: !2876)
!2910 = !DILocation(line: 52, column: 9, scope: !2875, inlinedAt: !2876)
!2911 = !DILocalVariable(name: "c", scope: !2875, file: !16, line: 54, type: !66, align: 1)
!2912 = !DILocation(line: 54, column: 7, scope: !2875, inlinedAt: !2876)
!2913 = !DILocation(line: 56, column: 2, scope: !2875, inlinedAt: !2876)
!2914 = !DILocation(line: 56, column: 14, scope: !2915, inlinedAt: !2876)
!2915 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 56, column: 2)
!2916 = !DILocation(line: 56, column: 20, scope: !2915, inlinedAt: !2876)
!2917 = !DILocation(line: 56, column: 10, scope: !2915, inlinedAt: !2876)
!2918 = !DILocation(line: 58, column: 7, scope: !2919, inlinedAt: !2876)
!2919 = distinct !DILexicalBlock(scope: !2915, file: !2, line: 57, column: 2)
!2920 = !DILocation(line: 58, column: 16, scope: !2919, inlinedAt: !2876)
!2921 = !DILocation(line: 58, column: 34, scope: !2919, inlinedAt: !2876)
!2922 = !DILocation(line: 59, column: 3, scope: !2919, inlinedAt: !2876)
!2923 = !DILocation(line: 62, column: 6, scope: !2875, inlinedAt: !2876)
!2924 = !DILocation(line: 64, column: 13, scope: !2925, inlinedAt: !2876)
!2925 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 63, column: 2)
!2926 = !DILocation(line: 65, column: 7, scope: !2925, inlinedAt: !2876)
!2927 = !DILocation(line: 65, column: 16, scope: !2925, inlinedAt: !2876)
!2928 = !DILocation(line: 67, column: 9, scope: !2929, inlinedAt: !2876)
!2929 = distinct !DILexicalBlock(scope: !2925, file: !2, line: 66, column: 3)
!2930 = !DILocation(line: 67, column: 27, scope: !2929, inlinedAt: !2876)
!2931 = !DILocation(line: 68, column: 11, scope: !2929, inlinedAt: !2876)
!2932 = !DILocation(line: 70, column: 7, scope: !2925, inlinedAt: !2876)
!2933 = !DILocation(line: 70, column: 16, scope: !2925, inlinedAt: !2876)
!2934 = !DILocation(line: 70, column: 34, scope: !2925, inlinedAt: !2876)
!2935 = !DILocation(line: 70, column: 42, scope: !2925, inlinedAt: !2876)
!2936 = !DILocation(line: 70, column: 40, scope: !2925, inlinedAt: !2876)
!2937 = !DILocation(line: 70, column: 30, scope: !2925, inlinedAt: !2876)
!2938 = !DILocation(line: 72, column: 4, scope: !2939, inlinedAt: !2876)
!2939 = distinct !DILexicalBlock(scope: !2925, file: !2, line: 71, column: 3)
!2940 = !DILocation(line: 73, column: 16, scope: !2939, inlinedAt: !2876)
!2941 = !DILocation(line: 74, column: 4, scope: !2939, inlinedAt: !2876)
!2942 = !DILocation(line: 74, column: 11, scope: !2943, inlinedAt: !2876)
!2943 = distinct !DILexicalBlock(scope: !2939, file: !2, line: 74, column: 4)
!2944 = !DILocation(line: 74, column: 24, scope: !2943, inlinedAt: !2876)
!2945 = !DILocation(line: 74, column: 38, scope: !2943, inlinedAt: !2876)
!2946 = !DILocation(line: 74, column: 46, scope: !2943, inlinedAt: !2876)
!2947 = !DILocation(line: 74, column: 44, scope: !2943, inlinedAt: !2876)
!2948 = !DILocation(line: 74, column: 34, scope: !2943, inlinedAt: !2876)
!2949 = !DILocation(line: 76, column: 5, scope: !2950, inlinedAt: !2876)
!2950 = distinct !DILexicalBlock(scope: !2943, file: !2, line: 75, column: 4)
!2951 = !DILocation(line: 81, column: 2, scope: !2875, inlinedAt: !2876)
!2952 = !DILocation(line: 81, column: 9, scope: !2953, inlinedAt: !2876)
!2953 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 81, column: 2)
!2954 = !DILocation(line: 81, column: 26, scope: !2953, inlinedAt: !2876)
!2955 = !DILocation(line: 85, column: 9, scope: !2956, inlinedAt: !2876)
!2956 = distinct !DILexicalBlock(scope: !2957, file: !2, line: 83, column: 3)
!2957 = distinct !DILexicalBlock(scope: !2953, file: !2, line: 82, column: 2)
!2958 = !DILocation(line: 86, column: 9, scope: !2959, inlinedAt: !2876)
!2959 = distinct !DILexicalBlock(scope: !2956, file: !2, line: 86, column: 5)
!2960 = !DILocation(line: 86, column: 25, scope: !2959, inlinedAt: !2876)
!2961 = !DILocation(line: 87, column: 15, scope: !2959, inlinedAt: !2876)
!2962 = !DILocation(line: 88, column: 11, scope: !2959, inlinedAt: !2876)
!2963 = !DILocation(line: 89, column: 9, scope: !2956, inlinedAt: !2876)
!2964 = !DILocation(line: 90, column: 5, scope: !2965, inlinedAt: !2876)
!2965 = distinct !DILexicalBlock(scope: !2956, file: !2, line: 90, column: 5)
!2966 = !DILocation(line: 91, column: 9, scope: !2965, inlinedAt: !2876)
!2967 = !DILocation(line: 91, column: 25, scope: !2965, inlinedAt: !2876)
!2968 = !DILocation(line: 92, column: 9, scope: !2965, inlinedAt: !2876)
!2969 = !DILocation(line: 94, column: 8, scope: !2970, inlinedAt: !2876)
!2970 = distinct !DILexicalBlock(scope: !2965, file: !2, line: 93, column: 5)
!2971 = !DILocation(line: 94, column: 15, scope: !2970, inlinedAt: !2876)
!2972 = !DILocation(line: 94, column: 13, scope: !2970, inlinedAt: !2876)
!2973 = !DILocation(line: 94, column: 25, scope: !2970, inlinedAt: !2876)
!2974 = !DILocation(line: 98, column: 8, scope: !2975, inlinedAt: !2876)
!2975 = distinct !DILexicalBlock(scope: !2965, file: !2, line: 97, column: 5)
!2976 = !DILocation(line: 98, column: 13, scope: !2975, inlinedAt: !2876)
!2977 = !DILocation(line: 100, column: 11, scope: !2965, inlinedAt: !2876)
!2978 = !DILocation(line: 100, column: 9, scope: !2965, inlinedAt: !2876)
!2979 = !DILocation(line: 102, column: 6, scope: !2980, inlinedAt: !2876)
!2980 = distinct !DILexicalBlock(scope: !2965, file: !2, line: 101, column: 5)
!2981 = !DILocation(line: 103, column: 10, scope: !2980, inlinedAt: !2876)
!2982 = !DILocation(line: 105, column: 17, scope: !2965, inlinedAt: !2876)
!2983 = !DILocation(line: 107, column: 5, scope: !2984, inlinedAt: !2876)
!2984 = distinct !DILexicalBlock(scope: !2956, file: !2, line: 107, column: 5)
!2985 = !DILocation(line: 108, column: 9, scope: !2984, inlinedAt: !2876)
!2986 = !DILocation(line: 108, column: 21, scope: !2984, inlinedAt: !2876)
!2987 = !DILocation(line: 108, column: 19, scope: !2984, inlinedAt: !2876)
!2988 = !DILocation(line: 111, column: 7, scope: !2957, inlinedAt: !2876)
!2989 = !DILocation(line: 111, column: 16, scope: !2957, inlinedAt: !2876)
!2990 = !DILocation(line: 111, column: 27, scope: !2957, inlinedAt: !2876)
!2991 = !DILocation(line: 112, column: 10, scope: !2957, inlinedAt: !2876)
!2992 = !DILocation(line: 112, column: 18, scope: !2957, inlinedAt: !2876)
!2993 = !DILocation(line: 113, column: 7, scope: !2957, inlinedAt: !2876)
!2994 = !DILocation(line: 113, column: 15, scope: !2957, inlinedAt: !2876)
!2995 = !DILocation(line: 113, column: 13, scope: !2957, inlinedAt: !2876)
!2996 = !DILocation(line: 115, column: 7, scope: !2875, inlinedAt: !2876)
!2997 = !DILocation(line: 115, column: 22, scope: !2875, inlinedAt: !2876)
!2998 = !DILocation(line: 116, column: 7, scope: !2875, inlinedAt: !2876)
!2999 = !DILocation(line: 116, column: 25, scope: !2875, inlinedAt: !2876)
!3000 = !DILocation(line: 117, column: 7, scope: !2875, inlinedAt: !2876)
!3001 = !DILocation(line: 119, column: 7, scope: !3002, inlinedAt: !2876)
!3002 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 118, column: 2)
!3003 = !DILocation(line: 119, column: 20, scope: !3002, inlinedAt: !2876)
!3004 = !DILocation(line: 119, column: 34, scope: !3002, inlinedAt: !2876)
!3005 = !DILocalVariable(name: "e10", scope: !3002, file: !16, line: 120, type: !432, align: 8)
!3006 = !DILocation(line: 120, column: 8, scope: !3002, inlinedAt: !2876)
!3007 = !DILocation(line: 120, column: 37, scope: !3002, inlinedAt: !2876)
!3008 = !DILocation(line: 120, column: 43, scope: !3002, inlinedAt: !2876)
!3009 = !DILocation(line: 120, column: 29, scope: !3002, inlinedAt: !2876)
!3010 = !DILocation(line: 120, column: 14, scope: !3002, inlinedAt: !2876)
!3011 = !DILocation(line: 120, column: 60, scope: !3002, inlinedAt: !2876)
!3012 = !DILocation(line: 121, column: 3, scope: !3002, inlinedAt: !2876)
!3013 = !DILocation(line: 121, column: 10, scope: !3002, inlinedAt: !2876)
!3014 = !DILocation(line: 123, column: 11, scope: !2875, inlinedAt: !2876)
!3015 = !DILocation(line: 123, column: 20, scope: !2875, inlinedAt: !2876)
!3016 = !DILocation(line: 125, column: 10, scope: !3017, inlinedAt: !2876)
!3017 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 124, column: 2)
!3018 = !DILocation(line: 128, column: 9, scope: !2875, inlinedAt: !2876)
!3019 = !DILocation(line: 128, column: 20, scope: !2875, inlinedAt: !2876)
!3020 = !DILocation(line: 131, column: 6, scope: !2875, inlinedAt: !2876)
!3021 = !DILocation(line: 131, column: 13, scope: !2875, inlinedAt: !2876)
!3022 = !DILocation(line: 131, column: 19, scope: !2875, inlinedAt: !2876)
!3023 = !DILocation(line: 131, column: 31, scope: !2875, inlinedAt: !2876)
!3024 = !DILocation(line: 131, column: 54, scope: !2875, inlinedAt: !2876)
!3025 = !DILocation(line: 131, column: 45, scope: !2875, inlinedAt: !2876)
!3026 = !DILocation(line: 131, column: 80, scope: !2875, inlinedAt: !2876)
!3027 = !DILocation(line: 131, column: 97, scope: !2875, inlinedAt: !2876)
!3028 = !DILocation(line: 132, column: 6, scope: !2875, inlinedAt: !2876)
!3029 = !DILocation(line: 132, column: 32, scope: !2875, inlinedAt: !2876)
!3030 = !DILocation(line: 133, column: 6, scope: !2875, inlinedAt: !2876)
!3031 = !DILocation(line: 133, column: 54, scope: !2875, inlinedAt: !2876)
!3032 = !DILocation(line: 136, column: 6, scope: !2875, inlinedAt: !2876)
!3033 = !DILocation(line: 138, column: 3, scope: !3034, inlinedAt: !2876)
!3034 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 137, column: 2)
!3035 = !DILocation(line: 138, column: 10, scope: !3036, inlinedAt: !2876)
!3036 = distinct !DILexicalBlock(scope: !3034, file: !2, line: 138, column: 3)
!3037 = !DILocation(line: 138, column: 24, scope: !3036, inlinedAt: !2876)
!3038 = !DILocation(line: 138, column: 22, scope: !3036, inlinedAt: !2876)
!3039 = !DILocation(line: 138, column: 17, scope: !3036, inlinedAt: !2876)
!3040 = !DILocation(line: 139, column: 3, scope: !3034, inlinedAt: !2876)
!3041 = !DILocation(line: 140, column: 7, scope: !3034, inlinedAt: !2876)
!3042 = !DILocalVariable(name: "a", scope: !2875, file: !16, line: 143, type: !3, align: 4)
!3043 = !DILocation(line: 143, column: 6, scope: !2875, inlinedAt: !2876)
!3044 = !DILocalVariable(name: "z", scope: !2875, file: !16, line: 144, type: !3, align: 4)
!3045 = !DILocation(line: 144, column: 6, scope: !2875, inlinedAt: !2876)
!3046 = !DILocation(line: 144, column: 10, scope: !2875, inlinedAt: !2876)
!3047 = !DILocalVariable(name: "e2", scope: !2875, file: !16, line: 145, type: !3, align: 4)
!3048 = !DILocation(line: 145, column: 6, scope: !2875, inlinedAt: !2876)
!3049 = !DILocalVariable(name: "rp", scope: !2875, file: !16, line: 146, type: !432, align: 8)
!3050 = !DILocation(line: 146, column: 7, scope: !2875, inlinedAt: !2876)
!3051 = !DILocation(line: 146, column: 12, scope: !2875, inlinedAt: !2876)
!3052 = !DILocation(line: 149, column: 6, scope: !2875, inlinedAt: !2876)
!3053 = !DILocation(line: 149, column: 17, scope: !2875, inlinedAt: !2876)
!3054 = !DILocation(line: 149, column: 24, scope: !2875, inlinedAt: !2876)
!3055 = !DILocation(line: 149, column: 30, scope: !2875, inlinedAt: !2876)
!3056 = !DILocation(line: 151, column: 7, scope: !3057, inlinedAt: !2876)
!3057 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 150, column: 2)
!3058 = !DILocation(line: 151, column: 23, scope: !3057, inlinedAt: !2876)
!3059 = !DILocation(line: 151, column: 40, scope: !3057, inlinedAt: !2876)
!3060 = !DILocation(line: 152, column: 7, scope: !3057, inlinedAt: !2876)
!3061 = !DILocation(line: 152, column: 22, scope: !3057, inlinedAt: !2876)
!3062 = !DILocation(line: 152, column: 39, scope: !3057, inlinedAt: !2876)
!3063 = !DILocation(line: 152, column: 53, scope: !3057, inlinedAt: !2876)
!3064 = !DILocation(line: 152, column: 49, scope: !3057, inlinedAt: !2876)
!3065 = !DILocalVariable(name: "bitlim", scope: !3057, file: !16, line: 153, type: !3, align: 4)
!3066 = !DILocation(line: 153, column: 7, scope: !3057, inlinedAt: !2876)
!3067 = !DILocation(line: 153, column: 34, scope: !3057, inlinedAt: !2876)
!3068 = !DILocation(line: 153, column: 28, scope: !3057, inlinedAt: !2876)
!3069 = !DILocation(line: 153, column: 24, scope: !3057, inlinedAt: !2876)
!3070 = !DILocation(line: 153, column: 16, scope: !3057, inlinedAt: !2876)
!3071 = !DILocation(line: 154, column: 7, scope: !3057, inlinedAt: !2876)
!3072 = !DILocation(line: 154, column: 24, scope: !3057, inlinedAt: !2876)
!3073 = !DILocation(line: 154, column: 30, scope: !3057, inlinedAt: !2876)
!3074 = !DILocation(line: 154, column: 22, scope: !3057, inlinedAt: !2876)
!3075 = !DILocation(line: 154, column: 50, scope: !3057, inlinedAt: !2876)
!3076 = !DILocation(line: 154, column: 67, scope: !3057, inlinedAt: !2876)
!3077 = !DILocation(line: 154, column: 77, scope: !3057, inlinedAt: !2876)
!3078 = !DILocation(line: 158, column: 6, scope: !2875, inlinedAt: !2876)
!3079 = !DILocalVariable(name: "rpm9", scope: !3080, file: !16, line: 160, type: !432, align: 8)
!3080 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 159, column: 2)
!3081 = !DILocation(line: 160, column: 8, scope: !3080, inlinedAt: !2876)
!3082 = !DILocation(line: 160, column: 15, scope: !3080, inlinedAt: !2876)
!3083 = !DILocation(line: 160, column: 25, scope: !3080, inlinedAt: !2876)
!3084 = !DILocation(line: 160, column: 34, scope: !3080, inlinedAt: !2876)
!3085 = !DILocalVariable(name: "p10", scope: !3080, file: !16, line: 161, type: !3, align: 4)
!3086 = !DILocation(line: 161, column: 7, scope: !3080, inlinedAt: !2876)
!3087 = !DILocation(line: 161, column: 22, scope: !3080, inlinedAt: !2876)
!3088 = !DILocation(line: 161, column: 18, scope: !3080, inlinedAt: !2876)
!3089 = !DILocalVariable(name: "carry", scope: !3080, file: !16, line: 162, type: !11, align: 4)
!3090 = !DILocation(line: 162, column: 8, scope: !3080, inlinedAt: !2876)
!3091 = !DILocation(line: 162, column: 16, scope: !3080, inlinedAt: !2876)
!3092 = !DILocation(line: 163, column: 12, scope: !3093, inlinedAt: !2876)
!3093 = distinct !DILexicalBlock(scope: !3080, file: !2, line: 163, column: 3)
!3094 = !DILocation(line: 163, column: 15, scope: !3093, inlinedAt: !2876)
!3095 = !DILocation(line: 163, column: 20, scope: !3093, inlinedAt: !2876)
!3096 = !DILocalVariable(name: "tmp", scope: !3097, file: !16, line: 165, type: !11, align: 4)
!3097 = distinct !DILexicalBlock(scope: !3093, file: !2, line: 164, column: 3)
!3098 = !DILocation(line: 165, column: 9, scope: !3097, inlinedAt: !2876)
!3099 = !DILocation(line: 165, column: 17, scope: !3097, inlinedAt: !2876)
!3100 = !DILocation(line: 165, column: 22, scope: !3097, inlinedAt: !2876)
!3101 = !DILocation(line: 165, column: 15, scope: !3097, inlinedAt: !2876)
!3102 = !DILocation(line: 166, column: 6, scope: !3097, inlinedAt: !2876)
!3103 = !DILocation(line: 166, column: 13, scope: !3097, inlinedAt: !2876)
!3104 = !DILocation(line: 166, column: 18, scope: !3097, inlinedAt: !2876)
!3105 = !DILocation(line: 166, column: 11, scope: !3097, inlinedAt: !2876)
!3106 = !DILocation(line: 166, column: 24, scope: !3097, inlinedAt: !2876)
!3107 = !DILocation(line: 167, column: 25, scope: !3097, inlinedAt: !2876)
!3108 = !DILocation(line: 167, column: 12, scope: !3097, inlinedAt: !2876)
!3109 = !DILocation(line: 167, column: 31, scope: !3097, inlinedAt: !2876)
!3110 = !DILocation(line: 168, column: 8, scope: !3097, inlinedAt: !2876)
!3111 = !DILocation(line: 168, column: 13, scope: !3097, inlinedAt: !2876)
!3112 = !DILocation(line: 168, column: 21, scope: !3097, inlinedAt: !2876)
!3113 = !DILocation(line: 170, column: 10, scope: !3114, inlinedAt: !2876)
!3114 = distinct !DILexicalBlock(scope: !3097, file: !2, line: 169, column: 4)
!3115 = !DILocation(line: 171, column: 5, scope: !3114, inlinedAt: !2876)
!3116 = !DILocation(line: 163, column: 23, scope: !3093, inlinedAt: !2876)
!3117 = !DILocation(line: 174, column: 7, scope: !3080, inlinedAt: !2876)
!3118 = !DILocation(line: 174, column: 16, scope: !3080, inlinedAt: !2876)
!3119 = !DILocation(line: 174, column: 23, scope: !3080, inlinedAt: !2876)
!3120 = !DILocation(line: 175, column: 3, scope: !3080, inlinedAt: !2876)
!3121 = !DILocation(line: 175, column: 13, scope: !3080, inlinedAt: !2876)
!3122 = !DILocation(line: 175, column: 9, scope: !3080, inlinedAt: !2876)
!3123 = !DILocation(line: 179, column: 2, scope: !2875, inlinedAt: !2876)
!3124 = !DILocation(line: 179, column: 9, scope: !3125, inlinedAt: !2876)
!3125 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 179, column: 2)
!3126 = !DILocation(line: 179, column: 30, scope: !3125, inlinedAt: !2876)
!3127 = !DILocation(line: 179, column: 53, scope: !3125, inlinedAt: !2876)
!3128 = !DILocation(line: 179, column: 51, scope: !3125, inlinedAt: !2876)
!3129 = !DILocalVariable(name: "carry", scope: !3130, file: !16, line: 181, type: !11, align: 4)
!3130 = distinct !DILexicalBlock(scope: !3125, file: !2, line: 180, column: 2)
!3131 = !DILocation(line: 181, column: 8, scope: !3130, inlinedAt: !2876)
!3132 = !DILocation(line: 181, column: 16, scope: !3130, inlinedAt: !2876)
!3133 = !DILocation(line: 182, column: 3, scope: !3130, inlinedAt: !2876)
!3134 = !DILocation(line: 183, column: 13, scope: !3135, inlinedAt: !2876)
!3135 = distinct !DILexicalBlock(scope: !3130, file: !2, line: 183, column: 3)
!3136 = !DILocalVariable(name: "tmp", scope: !3137, file: !16, line: 185, type: !69, align: 8)
!3137 = distinct !DILexicalBlock(scope: !3135, file: !2, line: 184, column: 3)
!3138 = !DILocation(line: 185, column: 10, scope: !3137, inlinedAt: !2876)
!3139 = !DILocation(line: 185, column: 25, scope: !3137, inlinedAt: !2876)
!3140 = !DILocation(line: 185, column: 16, scope: !3137, inlinedAt: !2876)
!3141 = !DILocation(line: 185, column: 36, scope: !3137, inlinedAt: !2876)
!3142 = !DILocation(line: 186, column: 8, scope: !3137, inlinedAt: !2876)
!3143 = !DILocation(line: 188, column: 20, scope: !3144, inlinedAt: !2876)
!3144 = distinct !DILexicalBlock(scope: !3137, file: !2, line: 187, column: 4)
!3145 = !DILocation(line: 188, column: 13, scope: !3144, inlinedAt: !2876)
!3146 = !DILocation(line: 189, column: 7, scope: !3144, inlinedAt: !2876)
!3147 = !DILocation(line: 189, column: 19, scope: !3144, inlinedAt: !2876)
!3148 = !DILocation(line: 189, column: 12, scope: !3144, inlinedAt: !2876)
!3149 = !DILocation(line: 193, column: 13, scope: !3150, inlinedAt: !2876)
!3150 = distinct !DILexicalBlock(scope: !3137, file: !2, line: 192, column: 4)
!3151 = !DILocation(line: 194, column: 7, scope: !3150, inlinedAt: !2876)
!3152 = !DILocation(line: 194, column: 12, scope: !3150, inlinedAt: !2876)
!3153 = !DILocation(line: 196, column: 8, scope: !3137, inlinedAt: !2876)
!3154 = !DILocation(line: 196, column: 14, scope: !3137, inlinedAt: !2876)
!3155 = !DILocation(line: 196, column: 31, scope: !3137, inlinedAt: !2876)
!3156 = !DILocation(line: 196, column: 36, scope: !3137, inlinedAt: !2876)
!3157 = !DILocation(line: 196, column: 44, scope: !3137, inlinedAt: !2876)
!3158 = !DILocation(line: 196, column: 52, scope: !3137, inlinedAt: !2876)
!3159 = !DILocation(line: 197, column: 8, scope: !3137, inlinedAt: !2876)
!3160 = !DILocation(line: 197, column: 13, scope: !3137, inlinedAt: !2876)
!3161 = !DILocation(line: 197, column: 16, scope: !3137, inlinedAt: !2876)
!3162 = !DILocation(line: 183, column: 35, scope: !3135, inlinedAt: !2876)
!3163 = !DILocation(line: 199, column: 7, scope: !3130, inlinedAt: !2876)
!3164 = !DILocation(line: 201, column: 4, scope: !3165, inlinedAt: !2876)
!3165 = distinct !DILexicalBlock(scope: !3130, file: !2, line: 200, column: 3)
!3166 = !DILocation(line: 202, column: 9, scope: !3165, inlinedAt: !2876)
!3167 = !DILocation(line: 203, column: 8, scope: !3165, inlinedAt: !2876)
!3168 = !DILocation(line: 203, column: 13, scope: !3165, inlinedAt: !2876)
!3169 = !DILocation(line: 205, column: 10, scope: !3170, inlinedAt: !2876)
!3170 = distinct !DILexicalBlock(scope: !3165, file: !2, line: 204, column: 4)
!3171 = !DILocation(line: 206, column: 8, scope: !3170, inlinedAt: !2876)
!3172 = !DILocation(line: 206, column: 28, scope: !3170, inlinedAt: !2876)
!3173 = !DILocation(line: 206, column: 5, scope: !3170, inlinedAt: !2876)
!3174 = !DILocation(line: 208, column: 6, scope: !3165, inlinedAt: !2876)
!3175 = !DILocation(line: 208, column: 11, scope: !3165, inlinedAt: !2876)
!3176 = !DILocation(line: 213, column: 2, scope: !2875, inlinedAt: !2876)
!3177 = !DILocalVariable(name: "carry", scope: !3178, file: !16, line: 215, type: !11, align: 4)
!3178 = distinct !DILexicalBlock(scope: !3179, file: !2, line: 214, column: 2)
!3179 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 213, column: 2)
!3180 = !DILocation(line: 215, column: 8, scope: !3178, inlinedAt: !2876)
!3181 = !DILocation(line: 215, column: 16, scope: !3178, inlinedAt: !2876)
!3182 = !DILocalVariable(name: "sh", scope: !3178, file: !16, line: 216, type: !3, align: 4)
!3183 = !DILocation(line: 216, column: 7, scope: !3178, inlinedAt: !2876)
!3184 = !DILocation(line: 216, column: 12, scope: !3178, inlinedAt: !2876)
!3185 = !DILocalVariable(name: "i", scope: !3178, file: !16, line: 217, type: !3, align: 4)
!3186 = !DILocation(line: 217, column: 7, scope: !3178, inlinedAt: !2876)
!3187 = !DILocation(line: 218, column: 12, scope: !3188, inlinedAt: !2876)
!3188 = distinct !DILexicalBlock(scope: !3178, file: !2, line: 218, column: 3)
!3189 = !DILocation(line: 218, column: 15, scope: !3188, inlinedAt: !2876)
!3190 = !DILocation(line: 220, column: 9, scope: !3191, inlinedAt: !2876)
!3191 = distinct !DILexicalBlock(scope: !3188, file: !2, line: 219, column: 3)
!3192 = !DILocation(line: 220, column: 13, scope: !3191, inlinedAt: !2876)
!3193 = !DILocation(line: 221, column: 8, scope: !3191, inlinedAt: !2876)
!3194 = !DILocation(line: 221, column: 13, scope: !3191, inlinedAt: !2876)
!3195 = !DILocation(line: 221, column: 20, scope: !3191, inlinedAt: !2876)
!3196 = !DILocation(line: 221, column: 28, scope: !3191, inlinedAt: !2876)
!3197 = !DILocation(line: 221, column: 18, scope: !3191, inlinedAt: !2876)
!3198 = !DILocation(line: 223, column: 9, scope: !3199, inlinedAt: !2876)
!3199 = distinct !DILexicalBlock(scope: !3191, file: !2, line: 222, column: 4)
!3200 = !DILocation(line: 224, column: 5, scope: !3199, inlinedAt: !2876)
!3201 = !DILocation(line: 226, column: 11, scope: !3191, inlinedAt: !2876)
!3202 = !DILocation(line: 226, column: 15, scope: !3191, inlinedAt: !2876)
!3203 = !DILocation(line: 226, column: 31, scope: !3191, inlinedAt: !2876)
!3204 = !DILocation(line: 226, column: 8, scope: !3191, inlinedAt: !2876)
!3205 = !DILocation(line: 226, column: 35, scope: !3191, inlinedAt: !2876)
!3206 = !DILocation(line: 218, column: 28, scope: !3188, inlinedAt: !2876)
!3207 = !DILocation(line: 228, column: 7, scope: !3178, inlinedAt: !2876)
!3208 = !DILocation(line: 228, column: 23, scope: !3178, inlinedAt: !2876)
!3209 = !DILocation(line: 228, column: 42, scope: !3178, inlinedAt: !2876)
!3210 = !DILocation(line: 229, column: 7, scope: !3178, inlinedAt: !2876)
!3211 = !DILocation(line: 229, column: 34, scope: !3178, inlinedAt: !2876)
!3212 = !DILocation(line: 230, column: 3, scope: !3178, inlinedAt: !2876)
!3213 = !DILocation(line: 230, column: 9, scope: !3178, inlinedAt: !2876)
!3214 = !DILocation(line: 231, column: 12, scope: !3215, inlinedAt: !2876)
!3215 = distinct !DILexicalBlock(scope: !3178, file: !2, line: 231, column: 3)
!3216 = !DILocation(line: 231, column: 15, scope: !3215, inlinedAt: !2876)
!3217 = !DILocation(line: 231, column: 20, scope: !3215, inlinedAt: !2876)
!3218 = !DILocalVariable(name: "tmp", scope: !3219, file: !16, line: 233, type: !11, align: 4)
!3219 = distinct !DILexicalBlock(scope: !3215, file: !2, line: 232, column: 3)
!3220 = !DILocation(line: 233, column: 9, scope: !3219, inlinedAt: !2876)
!3221 = !DILocation(line: 233, column: 17, scope: !3219, inlinedAt: !2876)
!3222 = !DILocation(line: 233, column: 28, scope: !3219, inlinedAt: !2876)
!3223 = !DILocation(line: 233, column: 23, scope: !3219, inlinedAt: !2876)
!3224 = !DILocation(line: 233, column: 15, scope: !3219, inlinedAt: !2876)
!3225 = !DILocation(line: 234, column: 6, scope: !3219, inlinedAt: !2876)
!3226 = !DILocation(line: 234, column: 13, scope: !3219, inlinedAt: !2876)
!3227 = !DILocation(line: 234, column: 19, scope: !3219, inlinedAt: !2876)
!3228 = !DILocation(line: 234, column: 11, scope: !3219, inlinedAt: !2876)
!3229 = !DILocation(line: 234, column: 24, scope: !3219, inlinedAt: !2876)
!3230 = !DILocation(line: 235, column: 27, scope: !3219, inlinedAt: !2876)
!3231 = !DILocation(line: 235, column: 13, scope: !3219, inlinedAt: !2876)
!3232 = !DILocation(line: 235, column: 33, scope: !3219, inlinedAt: !2876)
!3233 = !DILocation(line: 236, column: 8, scope: !3219, inlinedAt: !2876)
!3234 = !DILocation(line: 236, column: 13, scope: !3219, inlinedAt: !2876)
!3235 = !DILocation(line: 236, column: 21, scope: !3219, inlinedAt: !2876)
!3236 = !DILocation(line: 238, column: 10, scope: !3237, inlinedAt: !2876)
!3237 = distinct !DILexicalBlock(scope: !3219, file: !2, line: 237, column: 4)
!3238 = !DILocation(line: 239, column: 5, scope: !3237, inlinedAt: !2876)
!3239 = !DILocation(line: 240, column: 5, scope: !3237, inlinedAt: !2876)
!3240 = !DILocation(line: 231, column: 28, scope: !3215, inlinedAt: !2876)
!3241 = !DILocation(line: 243, column: 7, scope: !3178, inlinedAt: !2876)
!3242 = !DILocation(line: 245, column: 9, scope: !3243, inlinedAt: !2876)
!3243 = distinct !DILexicalBlock(scope: !3178, file: !2, line: 244, column: 3)
!3244 = !DILocation(line: 245, column: 26, scope: !3243, inlinedAt: !2876)
!3245 = !DILocation(line: 247, column: 7, scope: !3246, inlinedAt: !2876)
!3246 = distinct !DILexicalBlock(scope: !3243, file: !2, line: 246, column: 4)
!3247 = !DILocation(line: 247, column: 12, scope: !3246, inlinedAt: !2876)
!3248 = !DILocation(line: 248, column: 10, scope: !3246, inlinedAt: !2876)
!3249 = !DILocation(line: 252, column: 8, scope: !3250, inlinedAt: !2876)
!3250 = distinct !DILexicalBlock(scope: !3243, file: !2, line: 251, column: 4)
!3251 = !DILocation(line: 252, column: 5, scope: !3250, inlinedAt: !2876)
!3252 = !DILocalVariable(name: "y", scope: !2875, file: !16, line: 258, type: !2622, align: 8)
!3253 = !DILocation(line: 258, column: 9, scope: !2875, inlinedAt: !2876)
!3254 = !DILocalVariable(name: "i", scope: !2875, file: !16, line: 259, type: !3, align: 4)
!3255 = !DILocation(line: 259, column: 6, scope: !2875, inlinedAt: !2876)
!3256 = !DILocation(line: 260, column: 11, scope: !3257, inlinedAt: !2876)
!3257 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 260, column: 2)
!3258 = !DILocation(line: 260, column: 14, scope: !3257, inlinedAt: !2876)
!3259 = !DILocation(line: 262, column: 8, scope: !3260, inlinedAt: !2876)
!3260 = distinct !DILexicalBlock(scope: !3257, file: !2, line: 261, column: 2)
!3261 = !DILocation(line: 262, column: 12, scope: !3260, inlinedAt: !2876)
!3262 = !DILocation(line: 262, column: 25, scope: !3260, inlinedAt: !2876)
!3263 = !DILocation(line: 262, column: 36, scope: !3260, inlinedAt: !2876)
!3264 = !DILocation(line: 262, column: 31, scope: !3260, inlinedAt: !2876)
!3265 = !DILocation(line: 262, column: 58, scope: !3260, inlinedAt: !2876)
!3266 = !DILocation(line: 263, column: 22, scope: !3260, inlinedAt: !2876)
!3267 = !DILocation(line: 263, column: 7, scope: !3260, inlinedAt: !2876)
!3268 = !DILocation(line: 263, column: 29, scope: !3260, inlinedAt: !2876)
!3269 = !DILocation(line: 263, column: 33, scope: !3260, inlinedAt: !2876)
!3270 = !DILocation(line: 260, column: 27, scope: !3257, inlinedAt: !2876)
!3271 = !DILocation(line: 266, column: 2, scope: !2875, inlinedAt: !2876)
!3272 = !DILocation(line: 266, column: 7, scope: !2875, inlinedAt: !2876)
!3273 = !DILocalVariable(name: "denormal", scope: !2875, file: !16, line: 268, type: !119, align: 1)
!3274 = !DILocation(line: 268, column: 7, scope: !2875, inlinedAt: !2876)
!3275 = !DILocalVariable(name: "bits", scope: !2875, file: !16, line: 270, type: !11, align: 4)
!3276 = !DILocation(line: 270, column: 7, scope: !2875, inlinedAt: !2876)
!3277 = !DILocation(line: 270, column: 14, scope: !2875, inlinedAt: !2876)
!3278 = !DILocation(line: 271, column: 6, scope: !2875, inlinedAt: !2876)
!3279 = !DILocation(line: 271, column: 37, scope: !2875, inlinedAt: !2876)
!3280 = !DILocation(line: 271, column: 13, scope: !2875, inlinedAt: !2876)
!3281 = !DILocation(line: 273, column: 34, scope: !3282, inlinedAt: !2876)
!3282 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 272, column: 2)
!3283 = !DILocation(line: 273, column: 10, scope: !3282, inlinedAt: !2876)
!3284 = !DILocation(line: 274, column: 7, scope: !3282, inlinedAt: !2876)
!3285 = !DILocation(line: 274, column: 24, scope: !3282, inlinedAt: !2876)
!3286 = !DILocation(line: 275, column: 14, scope: !3282, inlinedAt: !2876)
!3287 = !DILocalVariable(name: "bias", scope: !2875, file: !16, line: 279, type: !2622, align: 8)
!3288 = !DILocation(line: 279, column: 9, scope: !2875, inlinedAt: !2876)
!3289 = !DILocalVariable(name: "frac", scope: !2875, file: !16, line: 280, type: !2622, align: 8)
!3290 = !DILocation(line: 280, column: 9, scope: !2875, inlinedAt: !2876)
!3291 = !DILocation(line: 281, column: 6, scope: !2875, inlinedAt: !2876)
!3292 = !DILocation(line: 283, column: 69, scope: !3293, inlinedAt: !2876)
!3293 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 282, column: 2)
!3294 = !DILocation(line: 283, column: 41, scope: !3293, inlinedAt: !2876)
!3295 = !DILocation(line: 1013, column: 52, scope: !3296, inlinedAt: !3297)
!3296 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !327, file: !327, line: 1013, scopeLine: 1013, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3297 = !DILocation(line: 283, column: 25, scope: !3293, inlinedAt: !2876)
!3298 = !DILocation(line: 1013, column: 41, scope: !3296, inlinedAt: !3297)
!3299 = !DILocation(line: 61, column: 10, scope: !3300, inlinedAt: !3301)
!3300 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2847, file: !2847, line: 49, scopeLine: 49, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3301 = !DILocation(line: 262, column: 40, scope: !3302, inlinedAt: !3303)
!3302 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !327, file: !327, line: 262, scopeLine: 262, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3303 = !DILocation(line: 283, column: 10, scope: !3293, inlinedAt: !2876)
!3304 = !DILocation(line: 262, column: 76, scope: !3302, inlinedAt: !3303)
!3305 = !DILocation(line: 284, column: 10, scope: !3293, inlinedAt: !2876)
!3306 = !DILocation(line: 284, column: 54, scope: !3293, inlinedAt: !2876)
!3307 = !DILocation(line: 284, column: 30, scope: !3293, inlinedAt: !2876)
!3308 = !DILocation(line: 1013, column: 52, scope: !3309, inlinedAt: !3310)
!3309 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !327, file: !327, line: 1013, scopeLine: 1013, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3310 = !DILocation(line: 284, column: 14, scope: !3293, inlinedAt: !2876)
!3311 = !DILocation(line: 1013, column: 41, scope: !3309, inlinedAt: !3310)
!3312 = !DILocation(line: 285, column: 3, scope: !3293, inlinedAt: !2876)
!3313 = !DILocation(line: 285, column: 8, scope: !3293, inlinedAt: !2876)
!3314 = !DILocation(line: 286, column: 3, scope: !3293, inlinedAt: !2876)
!3315 = !DILocation(line: 286, column: 8, scope: !3293, inlinedAt: !2876)
!3316 = !DILocation(line: 290, column: 7, scope: !2875, inlinedAt: !2876)
!3317 = !DILocation(line: 290, column: 11, scope: !2875, inlinedAt: !2876)
!3318 = !DILocation(line: 290, column: 24, scope: !2875, inlinedAt: !2876)
!3319 = !DILocalVariable(name: "t", scope: !3320, file: !16, line: 292, type: !11, align: 4)
!3320 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 291, column: 2)
!3321 = !DILocation(line: 292, column: 8, scope: !3320, inlinedAt: !2876)
!3322 = !DILocation(line: 292, column: 15, scope: !3320, inlinedAt: !2876)
!3323 = !DILocation(line: 292, column: 19, scope: !3320, inlinedAt: !2876)
!3324 = !DILocation(line: 295, column: 9, scope: !3325, inlinedAt: !2876)
!3325 = distinct !DILexicalBlock(scope: !3320, file: !2, line: 293, column: 3)
!3326 = !DILocation(line: 295, column: 27, scope: !3325, inlinedAt: !2876)
!3327 = !DILocation(line: 295, column: 33, scope: !3325, inlinedAt: !2876)
!3328 = !DILocation(line: 295, column: 37, scope: !3325, inlinedAt: !2876)
!3329 = !DILocation(line: 295, column: 54, scope: !3325, inlinedAt: !2876)
!3330 = !DILocation(line: 296, column: 5, scope: !3331, inlinedAt: !2876)
!3331 = distinct !DILexicalBlock(scope: !3325, file: !2, line: 296, column: 5)
!3332 = !DILocation(line: 296, column: 20, scope: !3331, inlinedAt: !2876)
!3333 = !DILocation(line: 296, column: 13, scope: !3331, inlinedAt: !2876)
!3334 = !DILocation(line: 297, column: 9, scope: !3325, inlinedAt: !2876)
!3335 = !DILocation(line: 298, column: 5, scope: !3336, inlinedAt: !2876)
!3336 = distinct !DILexicalBlock(scope: !3325, file: !2, line: 298, column: 5)
!3337 = !DILocation(line: 298, column: 20, scope: !3336, inlinedAt: !2876)
!3338 = !DILocation(line: 298, column: 13, scope: !3336, inlinedAt: !2876)
!3339 = !DILocation(line: 299, column: 9, scope: !3325, inlinedAt: !2876)
!3340 = !DILocation(line: 300, column: 10, scope: !3341, inlinedAt: !2876)
!3341 = distinct !DILexicalBlock(scope: !3325, file: !2, line: 300, column: 5)
!3342 = !DILocation(line: 300, column: 14, scope: !3341, inlinedAt: !2876)
!3343 = !DILocation(line: 300, column: 31, scope: !3341, inlinedAt: !2876)
!3344 = !DILocation(line: 302, column: 6, scope: !3345, inlinedAt: !2876)
!3345 = distinct !DILexicalBlock(scope: !3341, file: !2, line: 301, column: 5)
!3346 = !DILocation(line: 302, column: 20, scope: !3345, inlinedAt: !2876)
!3347 = !DILocation(line: 302, column: 14, scope: !3345, inlinedAt: !2876)
!3348 = !DILocation(line: 306, column: 6, scope: !3349, inlinedAt: !2876)
!3349 = distinct !DILexicalBlock(scope: !3341, file: !2, line: 305, column: 5)
!3350 = !DILocation(line: 306, column: 21, scope: !3349, inlinedAt: !2876)
!3351 = !DILocation(line: 306, column: 14, scope: !3349, inlinedAt: !2876)
!3352 = !DILocation(line: 309, column: 31, scope: !3320, inlinedAt: !2876)
!3353 = !DILocation(line: 309, column: 7, scope: !3320, inlinedAt: !2876)
!3354 = !DILocation(line: 309, column: 46, scope: !3320, inlinedAt: !2876)
!3355 = !DILocation(line: 309, column: 57, scope: !3320, inlinedAt: !2876)
!3356 = !DILocation(line: 312, column: 2, scope: !2875, inlinedAt: !2876)
!3357 = !DILocation(line: 312, column: 7, scope: !2875, inlinedAt: !2876)
!3358 = !DILocation(line: 313, column: 2, scope: !2875, inlinedAt: !2876)
!3359 = !DILocation(line: 313, column: 7, scope: !2875, inlinedAt: !2876)
!3360 = !DILocation(line: 315, column: 8, scope: !2875, inlinedAt: !2876)
!3361 = !DILocation(line: 315, column: 49, scope: !2875, inlinedAt: !2876)
!3362 = !DILocation(line: 77, column: 23, scope: !3363, inlinedAt: !3364)
!3363 = distinct !DISubprogram(name: "abs", linkageName: "abs", scope: !327, file: !327, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3364 = !DILocation(line: 317, column: 7, scope: !3365, inlinedAt: !2876)
!3365 = distinct !DILexicalBlock(scope: !2875, file: !2, line: 316, column: 2)
!3366 = !DILocation(line: 319, column: 8, scope: !3367, inlinedAt: !2876)
!3367 = distinct !DILexicalBlock(scope: !3365, file: !2, line: 318, column: 3)
!3368 = !DILocation(line: 319, column: 20, scope: !3367, inlinedAt: !2876)
!3369 = !DILocation(line: 319, column: 52, scope: !3367, inlinedAt: !2876)
!3370 = !DILocation(line: 319, column: 28, scope: !3367, inlinedAt: !2876)
!3371 = !DILocation(line: 319, column: 75, scope: !3367, inlinedAt: !2876)
!3372 = !DILocation(line: 320, column: 4, scope: !3367, inlinedAt: !2876)
!3373 = !DILocation(line: 321, column: 4, scope: !3367, inlinedAt: !2876)
!3374 = !DILocation(line: 323, column: 7, scope: !3365, inlinedAt: !2876)
!3375 = !DILocation(line: 323, column: 36, scope: !3365, inlinedAt: !2876)
!3376 = !DILocation(line: 323, column: 45, scope: !3365, inlinedAt: !2876)
!3377 = !DILocation(line: 323, column: 57, scope: !3365, inlinedAt: !2876)
!3378 = !DILocation(line: 323, column: 71, scope: !3365, inlinedAt: !2876)
!3379 = !DILocation(line: 1013, column: 52, scope: !3380, inlinedAt: !3381)
!3380 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !327, file: !327, line: 1013, scopeLine: 1013, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3381 = !DILocation(line: 325, column: 9, scope: !2875, inlinedAt: !2876)
!3382 = !DILocation(line: 1013, column: 41, scope: !3380, inlinedAt: !3381)
!3383 = distinct !DISubprogram(name: "to_float", linkageName: "std.core.String.to_float", scope: !16, file: !16, line: 935, type: !3384, scopeLine: 935, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!3384 = !DISubroutineType(types: !3385)
!3385 = !{!431, !3386, !61}
!3386 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "float*", baseType: !3387, size: 64, align: 64, dwarfAddressSpace: 0)
!3387 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!3388 = !DILocalVariable(name: "self", arg: 1, scope: !3383, file: !16, line: 935, type: !61)
!3389 = !DILocation(line: 935, column: 27, scope: !3383)
!3390 = !DILocalVariable(name: "sign", scope: !3391, file: !16, line: 451, type: !3, align: 4)
!3391 = distinct !DISubprogram(name: "to_real", linkageName: "to_real", scope: !2, file: !2, line: 449, scopeLine: 449, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!3392 = !DILocation(line: 451, column: 6, scope: !3391, inlinedAt: !3393)
!3393 = !DILocation(line: 935, column: 36, scope: !3383)
!3394 = !DILocation(line: 451, column: 13, scope: !3391, inlinedAt: !3393)
!3395 = !DILocation(line: 465, column: 2, scope: !3391, inlinedAt: !3393)
!3396 = !DILocation(line: 465, column: 9, scope: !3397, inlinedAt: !3393)
!3397 = distinct !DILexicalBlock(scope: !3391, file: !2, line: 465, column: 2)
!3398 = !DILocation(line: 465, column: 22, scope: !3397, inlinedAt: !3393)
!3399 = !DILocation(line: 465, column: 28, scope: !3397, inlinedAt: !3393)
!3400 = !DILocation(line: 465, column: 47, scope: !3397, inlinedAt: !3393)
!3401 = !DILocation(line: 465, column: 53, scope: !3397, inlinedAt: !3393)
!3402 = !DILocation(line: 466, column: 6, scope: !3391, inlinedAt: !3393)
!3403 = !DILocation(line: 466, column: 25, scope: !3391, inlinedAt: !3393)
!3404 = !DILocation(line: 468, column: 6, scope: !3391, inlinedAt: !3393)
!3405 = !DILocation(line: 470, column: 11, scope: !3406, inlinedAt: !3393)
!3406 = distinct !DILexicalBlock(scope: !3407, file: !2, line: 470, column: 3)
!3407 = distinct !DILexicalBlock(scope: !3391, file: !2, line: 469, column: 2)
!3408 = !DILocation(line: 470, column: 17, scope: !3406, inlinedAt: !3393)
!3409 = !DILocation(line: 473, column: 12, scope: !3410, inlinedAt: !3393)
!3410 = distinct !DILexicalBlock(scope: !3406, file: !2, line: 473, column: 5)
!3411 = !DILocation(line: 474, column: 5, scope: !3410, inlinedAt: !3393)
!3412 = !DILocation(line: 476, column: 13, scope: !3413, inlinedAt: !3393)
!3413 = distinct !DILexicalBlock(scope: !3406, file: !2, line: 476, column: 5)
!3414 = !DILocation(line: 476, column: 19, scope: !3413, inlinedAt: !3393)
!3415 = !DILocation(line: 479, column: 6, scope: !3391, inlinedAt: !3393)
!3416 = !DILocation(line: 479, column: 29, scope: !3391, inlinedAt: !3393)
!3417 = !DILocation(line: 479, column: 57, scope: !3391, inlinedAt: !3393)
!3418 = !DILocation(line: 480, column: 6, scope: !3391, inlinedAt: !3393)
!3419 = !DILocation(line: 480, column: 24, scope: !3391, inlinedAt: !3393)
!3420 = !DILocation(line: 480, column: 47, scope: !3391, inlinedAt: !3393)
!3421 = !DILocation(line: 482, column: 6, scope: !3391, inlinedAt: !3393)
!3422 = !DILocation(line: 482, column: 23, scope: !3391, inlinedAt: !3393)
!3423 = !DILocation(line: 482, column: 29, scope: !3391, inlinedAt: !3393)
!3424 = !DILocation(line: 482, column: 43, scope: !3391, inlinedAt: !3393)
!3425 = !DILocation(line: 482, column: 49, scope: !3391, inlinedAt: !3393)
!3426 = !DILocation(line: 484, column: 34, scope: !3427, inlinedAt: !3393)
!3427 = distinct !DILexicalBlock(scope: !3391, file: !2, line: 483, column: 2)
!3428 = !DILocation(line: 484, column: 40, scope: !3427, inlinedAt: !3393)
!3429 = !DILocation(line: 484, column: 26, scope: !3427, inlinedAt: !3393)
!3430 = !DILocalVariable(name: "scale", scope: !3431, file: !16, line: 330, type: !2622, align: 8)
!3431 = distinct !DISubprogram(name: "hexfloat", linkageName: "hexfloat", scope: !2, file: !2, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!3432 = !DILocation(line: 330, column: 9, scope: !3431, inlinedAt: !3433)
!3433 = !DILocation(line: 484, column: 10, scope: !3427, inlinedAt: !3393)
!3434 = !DILocation(line: 330, column: 17, scope: !3431, inlinedAt: !3433)
!3435 = !DILocalVariable(name: "x", scope: !3431, file: !16, line: 331, type: !11, align: 4)
!3436 = !DILocation(line: 331, column: 7, scope: !3431, inlinedAt: !3433)
!3437 = !DILocalVariable(name: "rp", scope: !3431, file: !16, line: 332, type: !432, align: 8)
!3438 = !DILocation(line: 332, column: 7, scope: !3431, inlinedAt: !3433)
!3439 = !DILocalVariable(name: "dc", scope: !3431, file: !16, line: 333, type: !432, align: 8)
!3440 = !DILocation(line: 333, column: 7, scope: !3431, inlinedAt: !3433)
!3441 = !DILocalVariable(name: "c", scope: !3431, file: !16, line: 334, type: !66, align: 1)
!3442 = !DILocation(line: 334, column: 7, scope: !3431, inlinedAt: !3433)
!3443 = !DILocalVariable(name: "got_rad", scope: !3431, file: !16, line: 335, type: !119, align: 1)
!3444 = !DILocation(line: 335, column: 7, scope: !3431, inlinedAt: !3433)
!3445 = !DILocalVariable(name: "got_digit", scope: !3431, file: !16, line: 336, type: !119, align: 1)
!3446 = !DILocation(line: 336, column: 7, scope: !3431, inlinedAt: !3433)
!3447 = !DILocalVariable(name: "got_tail", scope: !3431, file: !16, line: 337, type: !119, align: 1)
!3448 = !DILocation(line: 337, column: 7, scope: !3431, inlinedAt: !3433)
!3449 = !DILocalVariable(name: "len", scope: !3431, file: !16, line: 338, type: !68, align: 8)
!3450 = !DILocation(line: 338, column: 6, scope: !3431, inlinedAt: !3433)
!3451 = !DILocation(line: 338, column: 12, scope: !3431, inlinedAt: !3433)
!3452 = !DILocalVariable(name: "last_char", scope: !3431, file: !16, line: 339, type: !68, align: 8)
!3453 = !DILocation(line: 339, column: 6, scope: !3431, inlinedAt: !3433)
!3454 = !DILocation(line: 339, column: 18, scope: !3431, inlinedAt: !3433)
!3455 = !DILocalVariable(name: "index", scope: !3431, file: !16, line: 340, type: !68, align: 8)
!3456 = !DILocation(line: 340, column: 6, scope: !3431, inlinedAt: !3433)
!3457 = !DILocalVariable(name: "y", scope: !3431, file: !16, line: 341, type: !2622, align: 8)
!3458 = !DILocation(line: 341, column: 9, scope: !3431, inlinedAt: !3433)
!3459 = !DILocation(line: 344, column: 2, scope: !3431, inlinedAt: !3433)
!3460 = !DILocation(line: 344, column: 14, scope: !3461, inlinedAt: !3433)
!3461 = distinct !DILexicalBlock(scope: !3431, file: !2, line: 344, column: 2)
!3462 = !DILocation(line: 344, column: 20, scope: !3461, inlinedAt: !3433)
!3463 = !DILocation(line: 344, column: 10, scope: !3461, inlinedAt: !3433)
!3464 = !DILocation(line: 346, column: 7, scope: !3465, inlinedAt: !3433)
!3465 = distinct !DILexicalBlock(scope: !3461, file: !2, line: 345, column: 2)
!3466 = !DILocation(line: 346, column: 16, scope: !3465, inlinedAt: !3433)
!3467 = !DILocation(line: 346, column: 34, scope: !3465, inlinedAt: !3433)
!3468 = !DILocation(line: 347, column: 3, scope: !3465, inlinedAt: !3433)
!3469 = !DILocation(line: 349, column: 6, scope: !3431, inlinedAt: !3433)
!3470 = !DILocation(line: 351, column: 13, scope: !3471, inlinedAt: !3433)
!3471 = distinct !DILexicalBlock(scope: !3431, file: !2, line: 350, column: 2)
!3472 = !DILocation(line: 352, column: 7, scope: !3471, inlinedAt: !3433)
!3473 = !DILocation(line: 352, column: 16, scope: !3471, inlinedAt: !3433)
!3474 = !DILocation(line: 354, column: 9, scope: !3475, inlinedAt: !3433)
!3475 = distinct !DILexicalBlock(scope: !3471, file: !2, line: 353, column: 3)
!3476 = !DILocation(line: 354, column: 27, scope: !3475, inlinedAt: !3433)
!3477 = !DILocation(line: 355, column: 11, scope: !3475, inlinedAt: !3433)
!3478 = !DILocation(line: 357, column: 7, scope: !3471, inlinedAt: !3433)
!3479 = !DILocation(line: 357, column: 16, scope: !3471, inlinedAt: !3433)
!3480 = !DILocation(line: 357, column: 34, scope: !3471, inlinedAt: !3433)
!3481 = !DILocation(line: 357, column: 42, scope: !3471, inlinedAt: !3433)
!3482 = !DILocation(line: 357, column: 40, scope: !3471, inlinedAt: !3433)
!3483 = !DILocation(line: 357, column: 30, scope: !3471, inlinedAt: !3433)
!3484 = !DILocation(line: 359, column: 4, scope: !3485, inlinedAt: !3433)
!3485 = distinct !DILexicalBlock(scope: !3471, file: !2, line: 358, column: 3)
!3486 = !DILocation(line: 360, column: 16, scope: !3485, inlinedAt: !3433)
!3487 = !DILocation(line: 361, column: 4, scope: !3485, inlinedAt: !3433)
!3488 = !DILocation(line: 361, column: 11, scope: !3489, inlinedAt: !3433)
!3489 = distinct !DILexicalBlock(scope: !3485, file: !2, line: 361, column: 4)
!3490 = !DILocation(line: 361, column: 24, scope: !3489, inlinedAt: !3433)
!3491 = !DILocation(line: 361, column: 38, scope: !3489, inlinedAt: !3433)
!3492 = !DILocation(line: 361, column: 46, scope: !3489, inlinedAt: !3433)
!3493 = !DILocation(line: 361, column: 44, scope: !3489, inlinedAt: !3433)
!3494 = !DILocation(line: 361, column: 34, scope: !3489, inlinedAt: !3433)
!3495 = !DILocation(line: 363, column: 5, scope: !3496, inlinedAt: !3433)
!3496 = distinct !DILexicalBlock(scope: !3489, file: !2, line: 362, column: 4)
!3497 = !DILocation(line: 368, column: 2, scope: !3431, inlinedAt: !3433)
!3498 = !DILocation(line: 368, column: 10, scope: !3499, inlinedAt: !3433)
!3499 = distinct !DILexicalBlock(scope: !3431, file: !2, line: 368, column: 2)
!3500 = !DILocation(line: 368, column: 30, scope: !3499, inlinedAt: !3433)
!3501 = !DILocation(line: 368, column: 53, scope: !3499, inlinedAt: !3433)
!3502 = !DILocation(line: 370, column: 7, scope: !3503, inlinedAt: !3433)
!3503 = distinct !DILexicalBlock(scope: !3499, file: !2, line: 369, column: 2)
!3504 = !DILocation(line: 372, column: 8, scope: !3505, inlinedAt: !3433)
!3505 = distinct !DILexicalBlock(scope: !3503, file: !2, line: 371, column: 3)
!3506 = !DILocation(line: 372, column: 24, scope: !3505, inlinedAt: !3433)
!3507 = !DILocation(line: 373, column: 14, scope: !3505, inlinedAt: !3433)
!3508 = !DILocation(line: 374, column: 9, scope: !3505, inlinedAt: !3433)
!3509 = !DILocation(line: 378, column: 16, scope: !3510, inlinedAt: !3433)
!3510 = distinct !DILexicalBlock(scope: !3503, file: !2, line: 377, column: 3)
!3511 = !DILocalVariable(name: "d", scope: !3510, file: !16, line: 379, type: !3, align: 4)
!3512 = !DILocation(line: 379, column: 8, scope: !3510, inlinedAt: !3433)
!3513 = !DILocation(line: 379, column: 12, scope: !3510, inlinedAt: !3433)
!3514 = !DILocation(line: 379, column: 24, scope: !3510, inlinedAt: !3433)
!3515 = !DILocation(line: 379, column: 47, scope: !3510, inlinedAt: !3433)
!3516 = !DILocation(line: 382, column: 10, scope: !3517, inlinedAt: !3433)
!3517 = distinct !DILexicalBlock(scope: !3510, file: !2, line: 380, column: 4)
!3518 = !DILocation(line: 383, column: 10, scope: !3519, inlinedAt: !3433)
!3519 = distinct !DILexicalBlock(scope: !3517, file: !2, line: 383, column: 6)
!3520 = !DILocation(line: 383, column: 19, scope: !3519, inlinedAt: !3433)
!3521 = !DILocation(line: 384, column: 10, scope: !3517, inlinedAt: !3433)
!3522 = !DILocation(line: 385, column: 6, scope: !3523, inlinedAt: !3433)
!3523 = distinct !DILexicalBlock(scope: !3517, file: !2, line: 385, column: 6)
!3524 = !DILocation(line: 385, column: 11, scope: !3523, inlinedAt: !3433)
!3525 = !DILocation(line: 385, column: 16, scope: !3523, inlinedAt: !3433)
!3526 = !DILocation(line: 386, column: 17, scope: !3523, inlinedAt: !3433)
!3527 = !DILocation(line: 387, column: 10, scope: !3517, inlinedAt: !3433)
!3528 = !DILocation(line: 387, column: 16, scope: !3517, inlinedAt: !3433)
!3529 = !DILocation(line: 388, column: 6, scope: !3530, inlinedAt: !3433)
!3530 = distinct !DILexicalBlock(scope: !3517, file: !2, line: 388, column: 6)
!3531 = !DILocation(line: 388, column: 17, scope: !3530, inlinedAt: !3433)
!3532 = !DILocation(line: 388, column: 11, scope: !3530, inlinedAt: !3433)
!3533 = !DILocation(line: 389, column: 17, scope: !3530, inlinedAt: !3433)
!3534 = !DILocation(line: 391, column: 4, scope: !3510, inlinedAt: !3433)
!3535 = !DILocation(line: 393, column: 7, scope: !3503, inlinedAt: !3433)
!3536 = !DILocation(line: 393, column: 16, scope: !3503, inlinedAt: !3433)
!3537 = !DILocation(line: 393, column: 27, scope: !3503, inlinedAt: !3433)
!3538 = !DILocation(line: 394, column: 7, scope: !3503, inlinedAt: !3433)
!3539 = !DILocation(line: 394, column: 15, scope: !3503, inlinedAt: !3433)
!3540 = !DILocation(line: 394, column: 13, scope: !3503, inlinedAt: !3433)
!3541 = !DILocation(line: 396, column: 7, scope: !3431, inlinedAt: !3433)
!3542 = !DILocation(line: 396, column: 25, scope: !3431, inlinedAt: !3433)
!3543 = !DILocation(line: 397, column: 7, scope: !3431, inlinedAt: !3433)
!3544 = !DILocation(line: 397, column: 21, scope: !3431, inlinedAt: !3433)
!3545 = !DILocation(line: 398, column: 2, scope: !3431, inlinedAt: !3433)
!3546 = !DILocation(line: 398, column: 9, scope: !3547, inlinedAt: !3433)
!3547 = distinct !DILexicalBlock(scope: !3431, file: !2, line: 398, column: 2)
!3548 = !DILocation(line: 398, column: 23, scope: !3547, inlinedAt: !3433)
!3549 = !DILocation(line: 398, column: 17, scope: !3547, inlinedAt: !3433)
!3550 = !DILocalVariable(name: "e2", scope: !3431, file: !16, line: 400, type: !432, align: 8)
!3551 = !DILocation(line: 400, column: 7, scope: !3431, inlinedAt: !3433)
!3552 = !DILocation(line: 401, column: 7, scope: !3431, inlinedAt: !3433)
!3553 = !DILocalVariable(name: "e2val", scope: !3554, file: !16, line: 403, type: !432, align: 8)
!3554 = distinct !DILexicalBlock(scope: !3431, file: !2, line: 402, column: 2)
!3555 = !DILocation(line: 403, column: 8, scope: !3554, inlinedAt: !3433)
!3556 = !DILocation(line: 403, column: 39, scope: !3554, inlinedAt: !3433)
!3557 = !DILocation(line: 403, column: 45, scope: !3554, inlinedAt: !3433)
!3558 = !DILocation(line: 403, column: 31, scope: !3554, inlinedAt: !3433)
!3559 = !DILocation(line: 403, column: 16, scope: !3554, inlinedAt: !3433)
!3560 = !DILocation(line: 403, column: 63, scope: !3554, inlinedAt: !3433)
!3561 = !DILocation(line: 404, column: 8, scope: !3554, inlinedAt: !3433)
!3562 = !DILocation(line: 406, column: 2, scope: !3431, inlinedAt: !3433)
!3563 = !DILocation(line: 406, column: 12, scope: !3431, inlinedAt: !3433)
!3564 = !DILocation(line: 406, column: 8, scope: !3431, inlinedAt: !3433)
!3565 = !DILocation(line: 407, column: 6, scope: !3431, inlinedAt: !3433)
!3566 = !DILocation(line: 407, column: 17, scope: !3431, inlinedAt: !3433)
!3567 = !DILocation(line: 408, column: 6, scope: !3431, inlinedAt: !3433)
!3568 = !DILocation(line: 408, column: 26, scope: !3431, inlinedAt: !3433)
!3569 = !DILocation(line: 409, column: 6, scope: !3431, inlinedAt: !3433)
!3570 = !DILocation(line: 409, column: 53, scope: !3431, inlinedAt: !3433)
!3571 = !DILocation(line: 411, column: 2, scope: !3431, inlinedAt: !3433)
!3572 = !DILocation(line: 411, column: 9, scope: !3573, inlinedAt: !3433)
!3573 = distinct !DILexicalBlock(scope: !3431, file: !2, line: 411, column: 2)
!3574 = !DILocation(line: 413, column: 7, scope: !3575, inlinedAt: !3433)
!3575 = distinct !DILexicalBlock(scope: !3573, file: !2, line: 412, column: 2)
!3576 = !DILocation(line: 415, column: 4, scope: !3577, inlinedAt: !3433)
!3577 = distinct !DILexicalBlock(scope: !3575, file: !2, line: 414, column: 3)
!3578 = !DILocation(line: 415, column: 9, scope: !3577, inlinedAt: !3433)
!3579 = !DILocation(line: 416, column: 4, scope: !3577, inlinedAt: !3433)
!3580 = !DILocation(line: 416, column: 9, scope: !3577, inlinedAt: !3433)
!3581 = !DILocation(line: 420, column: 4, scope: !3582, inlinedAt: !3433)
!3582 = distinct !DILexicalBlock(scope: !3575, file: !2, line: 419, column: 3)
!3583 = !DILocation(line: 420, column: 9, scope: !3582, inlinedAt: !3433)
!3584 = !DILocation(line: 421, column: 4, scope: !3582, inlinedAt: !3433)
!3585 = !DILocation(line: 421, column: 9, scope: !3582, inlinedAt: !3433)
!3586 = !DILocation(line: 423, column: 3, scope: !3575, inlinedAt: !3433)
!3587 = !DILocalVariable(name: "bits", scope: !3431, file: !16, line: 425, type: !3, align: 4)
!3588 = !DILocation(line: 425, column: 6, scope: !3431, inlinedAt: !3433)
!3589 = !DILocation(line: 425, column: 13, scope: !3431, inlinedAt: !3433)
!3590 = !DILocation(line: 426, column: 19, scope: !3431, inlinedAt: !3433)
!3591 = !DILocation(line: 426, column: 14, scope: !3431, inlinedAt: !3433)
!3592 = !DILocation(line: 426, column: 6, scope: !3431, inlinedAt: !3433)
!3593 = !DILocation(line: 428, column: 21, scope: !3594, inlinedAt: !3433)
!3594 = distinct !DILexicalBlock(scope: !3431, file: !2, line: 427, column: 2)
!3595 = !DILocation(line: 428, column: 16, scope: !3594, inlinedAt: !3433)
!3596 = !DILocation(line: 428, column: 10, scope: !3594, inlinedAt: !3433)
!3597 = !DILocation(line: 429, column: 7, scope: !3594, inlinedAt: !3433)
!3598 = !DILocation(line: 429, column: 24, scope: !3594, inlinedAt: !3433)
!3599 = !DILocalVariable(name: "bias", scope: !3431, file: !16, line: 431, type: !2622, align: 8)
!3600 = !DILocation(line: 431, column: 9, scope: !3431, inlinedAt: !3433)
!3601 = !DILocation(line: 432, column: 6, scope: !3431, inlinedAt: !3433)
!3602 = !DILocation(line: 434, column: 70, scope: !3603, inlinedAt: !3433)
!3603 = distinct !DILexicalBlock(scope: !3431, file: !2, line: 433, column: 2)
!3604 = !DILocation(line: 434, column: 41, scope: !3603, inlinedAt: !3433)
!3605 = !DILocation(line: 1013, column: 52, scope: !3606, inlinedAt: !3607)
!3606 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !327, file: !327, line: 1013, scopeLine: 1013, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3607 = !DILocation(line: 434, column: 25, scope: !3603, inlinedAt: !3433)
!3608 = !DILocation(line: 1013, column: 41, scope: !3606, inlinedAt: !3607)
!3609 = !DILocation(line: 434, column: 81, scope: !3603, inlinedAt: !3433)
!3610 = !DILocation(line: 61, column: 10, scope: !3611, inlinedAt: !3612)
!3611 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2847, file: !2847, line: 49, scopeLine: 49, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3612 = !DILocation(line: 262, column: 40, scope: !3613, inlinedAt: !3614)
!3613 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !327, file: !327, line: 262, scopeLine: 262, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3614 = !DILocation(line: 434, column: 10, scope: !3603, inlinedAt: !3433)
!3615 = !DILocation(line: 262, column: 76, scope: !3613, inlinedAt: !3614)
!3616 = !DILocation(line: 437, column: 6, scope: !3431, inlinedAt: !3433)
!3617 = !DILocation(line: 437, column: 19, scope: !3431, inlinedAt: !3433)
!3618 = !DILocation(line: 437, column: 26, scope: !3431, inlinedAt: !3433)
!3619 = !DILocation(line: 437, column: 24, scope: !3431, inlinedAt: !3433)
!3620 = !DILocation(line: 439, column: 3, scope: !3621, inlinedAt: !3433)
!3621 = distinct !DILexicalBlock(scope: !3431, file: !2, line: 438, column: 2)
!3622 = !DILocation(line: 440, column: 7, scope: !3621, inlinedAt: !3433)
!3623 = !DILocation(line: 442, column: 6, scope: !3431, inlinedAt: !3433)
!3624 = !DILocation(line: 442, column: 13, scope: !3431, inlinedAt: !3433)
!3625 = !DILocation(line: 442, column: 20, scope: !3431, inlinedAt: !3433)
!3626 = !DILocation(line: 442, column: 32, scope: !3431, inlinedAt: !3433)
!3627 = !DILocation(line: 442, column: 39, scope: !3431, inlinedAt: !3433)
!3628 = !DILocation(line: 443, column: 2, scope: !3431, inlinedAt: !3433)
!3629 = !DILocation(line: 443, column: 7, scope: !3431, inlinedAt: !3433)
!3630 = !DILocation(line: 444, column: 7, scope: !3431, inlinedAt: !3433)
!3631 = !DILocation(line: 444, column: 17, scope: !3431, inlinedAt: !3433)
!3632 = !DILocation(line: 446, column: 25, scope: !3431, inlinedAt: !3433)
!3633 = !DILocation(line: 1013, column: 52, scope: !3634, inlinedAt: !3635)
!3634 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !327, file: !327, line: 1013, scopeLine: 1013, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!3635 = !DILocation(line: 446, column: 9, scope: !3431, inlinedAt: !3433)
!3636 = !DILocation(line: 1013, column: 41, scope: !3634, inlinedAt: !3635)
!3637 = !DILocation(line: 35, column: 11, scope: !3638, inlinedAt: !3640)
!3638 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 38, column: 1)
!3639 = distinct !DISubprogram(name: "decfloat", linkageName: "decfloat", scope: !2, file: !2, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!3640 = !DILocation(line: 486, column: 9, scope: !3391, inlinedAt: !3393)
!3641 = !DILocation(line: 486, column: 16, scope: !3638, inlinedAt: !3640)
!3642 = !DILocalVariable(name: "x", scope: !3639, file: !16, line: 39, type: !2879, align: 16)
!3643 = !DILocation(line: 39, column: 13, scope: !3639, inlinedAt: !3640)
!3644 = !DILocalVariable(name: "emax", scope: !3639, file: !16, line: 41, type: !3, align: 4)
!3645 = !DILocation(line: 41, column: 6, scope: !3639, inlinedAt: !3640)
!3646 = !DILocation(line: 41, column: 13, scope: !3639, inlinedAt: !3640)
!3647 = !DILocalVariable(name: "index", scope: !3639, file: !16, line: 44, type: !68, align: 8)
!3648 = !DILocation(line: 44, column: 6, scope: !3639, inlinedAt: !3640)
!3649 = !DILocalVariable(name: "got_digit", scope: !3639, file: !16, line: 45, type: !119, align: 1)
!3650 = !DILocation(line: 45, column: 7, scope: !3639, inlinedAt: !3640)
!3651 = !DILocation(line: 45, column: 19, scope: !3639, inlinedAt: !3640)
!3652 = !DILocation(line: 45, column: 25, scope: !3639, inlinedAt: !3640)
!3653 = !DILocalVariable(name: "got_rad", scope: !3639, file: !16, line: 46, type: !119, align: 1)
!3654 = !DILocation(line: 46, column: 7, scope: !3639, inlinedAt: !3640)
!3655 = !DILocalVariable(name: "lrp", scope: !3639, file: !16, line: 47, type: !432, align: 8)
!3656 = !DILocation(line: 47, column: 7, scope: !3639, inlinedAt: !3640)
!3657 = !DILocalVariable(name: "dc", scope: !3639, file: !16, line: 47, type: !432, align: 8)
!3658 = !DILocation(line: 47, column: 12, scope: !3639, inlinedAt: !3640)
!3659 = !DILocalVariable(name: "k", scope: !3639, file: !16, line: 48, type: !3, align: 4)
!3660 = !DILocation(line: 48, column: 6, scope: !3639, inlinedAt: !3640)
!3661 = !DILocalVariable(name: "j", scope: !3639, file: !16, line: 48, type: !3, align: 4)
!3662 = !DILocation(line: 48, column: 9, scope: !3639, inlinedAt: !3640)
!3663 = !DILocalVariable(name: "lnz", scope: !3639, file: !16, line: 48, type: !3, align: 4)
!3664 = !DILocation(line: 48, column: 12, scope: !3639, inlinedAt: !3640)
!3665 = !DILocalVariable(name: "len", scope: !3639, file: !16, line: 49, type: !68, align: 8)
!3666 = !DILocation(line: 49, column: 6, scope: !3639, inlinedAt: !3640)
!3667 = !DILocation(line: 49, column: 12, scope: !3639, inlinedAt: !3640)
!3668 = !DILocalVariable(name: "last_char", scope: !3639, file: !16, line: 50, type: !68, align: 8)
!3669 = !DILocation(line: 50, column: 6, scope: !3639, inlinedAt: !3640)
!3670 = !DILocation(line: 50, column: 18, scope: !3639, inlinedAt: !3640)
!3671 = !DILocation(line: 52, column: 9, scope: !3639, inlinedAt: !3640)
!3672 = !DILocalVariable(name: "c", scope: !3639, file: !16, line: 54, type: !66, align: 1)
!3673 = !DILocation(line: 54, column: 7, scope: !3639, inlinedAt: !3640)
!3674 = !DILocation(line: 56, column: 2, scope: !3639, inlinedAt: !3640)
!3675 = !DILocation(line: 56, column: 14, scope: !3676, inlinedAt: !3640)
!3676 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 56, column: 2)
!3677 = !DILocation(line: 56, column: 20, scope: !3676, inlinedAt: !3640)
!3678 = !DILocation(line: 56, column: 10, scope: !3676, inlinedAt: !3640)
!3679 = !DILocation(line: 58, column: 7, scope: !3680, inlinedAt: !3640)
!3680 = distinct !DILexicalBlock(scope: !3676, file: !2, line: 57, column: 2)
!3681 = !DILocation(line: 58, column: 16, scope: !3680, inlinedAt: !3640)
!3682 = !DILocation(line: 58, column: 34, scope: !3680, inlinedAt: !3640)
!3683 = !DILocation(line: 59, column: 3, scope: !3680, inlinedAt: !3640)
!3684 = !DILocation(line: 62, column: 6, scope: !3639, inlinedAt: !3640)
!3685 = !DILocation(line: 64, column: 13, scope: !3686, inlinedAt: !3640)
!3686 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 63, column: 2)
!3687 = !DILocation(line: 65, column: 7, scope: !3686, inlinedAt: !3640)
!3688 = !DILocation(line: 65, column: 16, scope: !3686, inlinedAt: !3640)
!3689 = !DILocation(line: 67, column: 9, scope: !3690, inlinedAt: !3640)
!3690 = distinct !DILexicalBlock(scope: !3686, file: !2, line: 66, column: 3)
!3691 = !DILocation(line: 67, column: 27, scope: !3690, inlinedAt: !3640)
!3692 = !DILocation(line: 68, column: 11, scope: !3690, inlinedAt: !3640)
!3693 = !DILocation(line: 70, column: 7, scope: !3686, inlinedAt: !3640)
!3694 = !DILocation(line: 70, column: 16, scope: !3686, inlinedAt: !3640)
!3695 = !DILocation(line: 70, column: 34, scope: !3686, inlinedAt: !3640)
!3696 = !DILocation(line: 70, column: 42, scope: !3686, inlinedAt: !3640)
!3697 = !DILocation(line: 70, column: 40, scope: !3686, inlinedAt: !3640)
!3698 = !DILocation(line: 70, column: 30, scope: !3686, inlinedAt: !3640)
!3699 = !DILocation(line: 72, column: 4, scope: !3700, inlinedAt: !3640)
!3700 = distinct !DILexicalBlock(scope: !3686, file: !2, line: 71, column: 3)
!3701 = !DILocation(line: 73, column: 16, scope: !3700, inlinedAt: !3640)
!3702 = !DILocation(line: 74, column: 4, scope: !3700, inlinedAt: !3640)
!3703 = !DILocation(line: 74, column: 11, scope: !3704, inlinedAt: !3640)
!3704 = distinct !DILexicalBlock(scope: !3700, file: !2, line: 74, column: 4)
!3705 = !DILocation(line: 74, column: 24, scope: !3704, inlinedAt: !3640)
!3706 = !DILocation(line: 74, column: 38, scope: !3704, inlinedAt: !3640)
!3707 = !DILocation(line: 74, column: 46, scope: !3704, inlinedAt: !3640)
!3708 = !DILocation(line: 74, column: 44, scope: !3704, inlinedAt: !3640)
!3709 = !DILocation(line: 74, column: 34, scope: !3704, inlinedAt: !3640)
!3710 = !DILocation(line: 76, column: 5, scope: !3711, inlinedAt: !3640)
!3711 = distinct !DILexicalBlock(scope: !3704, file: !2, line: 75, column: 4)
!3712 = !DILocation(line: 81, column: 2, scope: !3639, inlinedAt: !3640)
!3713 = !DILocation(line: 81, column: 9, scope: !3714, inlinedAt: !3640)
!3714 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 81, column: 2)
!3715 = !DILocation(line: 81, column: 26, scope: !3714, inlinedAt: !3640)
!3716 = !DILocation(line: 85, column: 9, scope: !3717, inlinedAt: !3640)
!3717 = distinct !DILexicalBlock(scope: !3718, file: !2, line: 83, column: 3)
!3718 = distinct !DILexicalBlock(scope: !3714, file: !2, line: 82, column: 2)
!3719 = !DILocation(line: 86, column: 9, scope: !3720, inlinedAt: !3640)
!3720 = distinct !DILexicalBlock(scope: !3717, file: !2, line: 86, column: 5)
!3721 = !DILocation(line: 86, column: 25, scope: !3720, inlinedAt: !3640)
!3722 = !DILocation(line: 87, column: 15, scope: !3720, inlinedAt: !3640)
!3723 = !DILocation(line: 88, column: 11, scope: !3720, inlinedAt: !3640)
!3724 = !DILocation(line: 89, column: 9, scope: !3717, inlinedAt: !3640)
!3725 = !DILocation(line: 90, column: 5, scope: !3726, inlinedAt: !3640)
!3726 = distinct !DILexicalBlock(scope: !3717, file: !2, line: 90, column: 5)
!3727 = !DILocation(line: 91, column: 9, scope: !3726, inlinedAt: !3640)
!3728 = !DILocation(line: 91, column: 25, scope: !3726, inlinedAt: !3640)
!3729 = !DILocation(line: 92, column: 9, scope: !3726, inlinedAt: !3640)
!3730 = !DILocation(line: 94, column: 8, scope: !3731, inlinedAt: !3640)
!3731 = distinct !DILexicalBlock(scope: !3726, file: !2, line: 93, column: 5)
!3732 = !DILocation(line: 94, column: 15, scope: !3731, inlinedAt: !3640)
!3733 = !DILocation(line: 94, column: 13, scope: !3731, inlinedAt: !3640)
!3734 = !DILocation(line: 94, column: 25, scope: !3731, inlinedAt: !3640)
!3735 = !DILocation(line: 98, column: 8, scope: !3736, inlinedAt: !3640)
!3736 = distinct !DILexicalBlock(scope: !3726, file: !2, line: 97, column: 5)
!3737 = !DILocation(line: 98, column: 13, scope: !3736, inlinedAt: !3640)
!3738 = !DILocation(line: 100, column: 11, scope: !3726, inlinedAt: !3640)
!3739 = !DILocation(line: 100, column: 9, scope: !3726, inlinedAt: !3640)
!3740 = !DILocation(line: 102, column: 6, scope: !3741, inlinedAt: !3640)
!3741 = distinct !DILexicalBlock(scope: !3726, file: !2, line: 101, column: 5)
!3742 = !DILocation(line: 103, column: 10, scope: !3741, inlinedAt: !3640)
!3743 = !DILocation(line: 105, column: 17, scope: !3726, inlinedAt: !3640)
!3744 = !DILocation(line: 107, column: 5, scope: !3745, inlinedAt: !3640)
!3745 = distinct !DILexicalBlock(scope: !3717, file: !2, line: 107, column: 5)
!3746 = !DILocation(line: 108, column: 9, scope: !3745, inlinedAt: !3640)
!3747 = !DILocation(line: 108, column: 21, scope: !3745, inlinedAt: !3640)
!3748 = !DILocation(line: 108, column: 19, scope: !3745, inlinedAt: !3640)
!3749 = !DILocation(line: 111, column: 7, scope: !3718, inlinedAt: !3640)
!3750 = !DILocation(line: 111, column: 16, scope: !3718, inlinedAt: !3640)
!3751 = !DILocation(line: 111, column: 27, scope: !3718, inlinedAt: !3640)
!3752 = !DILocation(line: 112, column: 10, scope: !3718, inlinedAt: !3640)
!3753 = !DILocation(line: 112, column: 18, scope: !3718, inlinedAt: !3640)
!3754 = !DILocation(line: 113, column: 7, scope: !3718, inlinedAt: !3640)
!3755 = !DILocation(line: 113, column: 15, scope: !3718, inlinedAt: !3640)
!3756 = !DILocation(line: 113, column: 13, scope: !3718, inlinedAt: !3640)
!3757 = !DILocation(line: 115, column: 7, scope: !3639, inlinedAt: !3640)
!3758 = !DILocation(line: 115, column: 22, scope: !3639, inlinedAt: !3640)
!3759 = !DILocation(line: 116, column: 7, scope: !3639, inlinedAt: !3640)
!3760 = !DILocation(line: 116, column: 25, scope: !3639, inlinedAt: !3640)
!3761 = !DILocation(line: 117, column: 7, scope: !3639, inlinedAt: !3640)
!3762 = !DILocation(line: 119, column: 7, scope: !3763, inlinedAt: !3640)
!3763 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 118, column: 2)
!3764 = !DILocation(line: 119, column: 20, scope: !3763, inlinedAt: !3640)
!3765 = !DILocation(line: 119, column: 34, scope: !3763, inlinedAt: !3640)
!3766 = !DILocalVariable(name: "e10", scope: !3763, file: !16, line: 120, type: !432, align: 8)
!3767 = !DILocation(line: 120, column: 8, scope: !3763, inlinedAt: !3640)
!3768 = !DILocation(line: 120, column: 37, scope: !3763, inlinedAt: !3640)
!3769 = !DILocation(line: 120, column: 43, scope: !3763, inlinedAt: !3640)
!3770 = !DILocation(line: 120, column: 29, scope: !3763, inlinedAt: !3640)
!3771 = !DILocation(line: 120, column: 14, scope: !3763, inlinedAt: !3640)
!3772 = !DILocation(line: 120, column: 60, scope: !3763, inlinedAt: !3640)
!3773 = !DILocation(line: 121, column: 3, scope: !3763, inlinedAt: !3640)
!3774 = !DILocation(line: 121, column: 10, scope: !3763, inlinedAt: !3640)
!3775 = !DILocation(line: 123, column: 11, scope: !3639, inlinedAt: !3640)
!3776 = !DILocation(line: 123, column: 20, scope: !3639, inlinedAt: !3640)
!3777 = !DILocation(line: 125, column: 10, scope: !3778, inlinedAt: !3640)
!3778 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 124, column: 2)
!3779 = !DILocation(line: 128, column: 9, scope: !3639, inlinedAt: !3640)
!3780 = !DILocation(line: 128, column: 20, scope: !3639, inlinedAt: !3640)
!3781 = !DILocation(line: 131, column: 6, scope: !3639, inlinedAt: !3640)
!3782 = !DILocation(line: 131, column: 13, scope: !3639, inlinedAt: !3640)
!3783 = !DILocation(line: 131, column: 19, scope: !3639, inlinedAt: !3640)
!3784 = !DILocation(line: 131, column: 31, scope: !3639, inlinedAt: !3640)
!3785 = !DILocation(line: 131, column: 54, scope: !3639, inlinedAt: !3640)
!3786 = !DILocation(line: 131, column: 45, scope: !3639, inlinedAt: !3640)
!3787 = !DILocation(line: 131, column: 80, scope: !3639, inlinedAt: !3640)
!3788 = !DILocation(line: 131, column: 97, scope: !3639, inlinedAt: !3640)
!3789 = !DILocation(line: 132, column: 6, scope: !3639, inlinedAt: !3640)
!3790 = !DILocation(line: 132, column: 32, scope: !3639, inlinedAt: !3640)
!3791 = !DILocation(line: 133, column: 6, scope: !3639, inlinedAt: !3640)
!3792 = !DILocation(line: 133, column: 54, scope: !3639, inlinedAt: !3640)
!3793 = !DILocation(line: 136, column: 6, scope: !3639, inlinedAt: !3640)
!3794 = !DILocation(line: 138, column: 3, scope: !3795, inlinedAt: !3640)
!3795 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 137, column: 2)
!3796 = !DILocation(line: 138, column: 10, scope: !3797, inlinedAt: !3640)
!3797 = distinct !DILexicalBlock(scope: !3795, file: !2, line: 138, column: 3)
!3798 = !DILocation(line: 138, column: 24, scope: !3797, inlinedAt: !3640)
!3799 = !DILocation(line: 138, column: 22, scope: !3797, inlinedAt: !3640)
!3800 = !DILocation(line: 138, column: 17, scope: !3797, inlinedAt: !3640)
!3801 = !DILocation(line: 139, column: 3, scope: !3795, inlinedAt: !3640)
!3802 = !DILocation(line: 140, column: 7, scope: !3795, inlinedAt: !3640)
!3803 = !DILocalVariable(name: "a", scope: !3639, file: !16, line: 143, type: !3, align: 4)
!3804 = !DILocation(line: 143, column: 6, scope: !3639, inlinedAt: !3640)
!3805 = !DILocalVariable(name: "z", scope: !3639, file: !16, line: 144, type: !3, align: 4)
!3806 = !DILocation(line: 144, column: 6, scope: !3639, inlinedAt: !3640)
!3807 = !DILocation(line: 144, column: 10, scope: !3639, inlinedAt: !3640)
!3808 = !DILocalVariable(name: "e2", scope: !3639, file: !16, line: 145, type: !3, align: 4)
!3809 = !DILocation(line: 145, column: 6, scope: !3639, inlinedAt: !3640)
!3810 = !DILocalVariable(name: "rp", scope: !3639, file: !16, line: 146, type: !432, align: 8)
!3811 = !DILocation(line: 146, column: 7, scope: !3639, inlinedAt: !3640)
!3812 = !DILocation(line: 146, column: 12, scope: !3639, inlinedAt: !3640)
!3813 = !DILocation(line: 149, column: 6, scope: !3639, inlinedAt: !3640)
!3814 = !DILocation(line: 149, column: 17, scope: !3639, inlinedAt: !3640)
!3815 = !DILocation(line: 149, column: 24, scope: !3639, inlinedAt: !3640)
!3816 = !DILocation(line: 149, column: 30, scope: !3639, inlinedAt: !3640)
!3817 = !DILocation(line: 151, column: 7, scope: !3818, inlinedAt: !3640)
!3818 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 150, column: 2)
!3819 = !DILocation(line: 151, column: 23, scope: !3818, inlinedAt: !3640)
!3820 = !DILocation(line: 151, column: 40, scope: !3818, inlinedAt: !3640)
!3821 = !DILocation(line: 152, column: 7, scope: !3818, inlinedAt: !3640)
!3822 = !DILocation(line: 152, column: 22, scope: !3818, inlinedAt: !3640)
!3823 = !DILocation(line: 152, column: 39, scope: !3818, inlinedAt: !3640)
!3824 = !DILocation(line: 152, column: 53, scope: !3818, inlinedAt: !3640)
!3825 = !DILocation(line: 152, column: 49, scope: !3818, inlinedAt: !3640)
!3826 = !DILocalVariable(name: "bitlim", scope: !3818, file: !16, line: 153, type: !3, align: 4)
!3827 = !DILocation(line: 153, column: 7, scope: !3818, inlinedAt: !3640)
!3828 = !DILocation(line: 153, column: 34, scope: !3818, inlinedAt: !3640)
!3829 = !DILocation(line: 153, column: 28, scope: !3818, inlinedAt: !3640)
!3830 = !DILocation(line: 153, column: 24, scope: !3818, inlinedAt: !3640)
!3831 = !DILocation(line: 153, column: 16, scope: !3818, inlinedAt: !3640)
!3832 = !DILocation(line: 154, column: 7, scope: !3818, inlinedAt: !3640)
!3833 = !DILocation(line: 154, column: 24, scope: !3818, inlinedAt: !3640)
!3834 = !DILocation(line: 154, column: 30, scope: !3818, inlinedAt: !3640)
!3835 = !DILocation(line: 154, column: 22, scope: !3818, inlinedAt: !3640)
!3836 = !DILocation(line: 154, column: 50, scope: !3818, inlinedAt: !3640)
!3837 = !DILocation(line: 154, column: 67, scope: !3818, inlinedAt: !3640)
!3838 = !DILocation(line: 154, column: 77, scope: !3818, inlinedAt: !3640)
!3839 = !DILocation(line: 158, column: 6, scope: !3639, inlinedAt: !3640)
!3840 = !DILocalVariable(name: "rpm9", scope: !3841, file: !16, line: 160, type: !432, align: 8)
!3841 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 159, column: 2)
!3842 = !DILocation(line: 160, column: 8, scope: !3841, inlinedAt: !3640)
!3843 = !DILocation(line: 160, column: 15, scope: !3841, inlinedAt: !3640)
!3844 = !DILocation(line: 160, column: 25, scope: !3841, inlinedAt: !3640)
!3845 = !DILocation(line: 160, column: 34, scope: !3841, inlinedAt: !3640)
!3846 = !DILocalVariable(name: "p10", scope: !3841, file: !16, line: 161, type: !3, align: 4)
!3847 = !DILocation(line: 161, column: 7, scope: !3841, inlinedAt: !3640)
!3848 = !DILocation(line: 161, column: 22, scope: !3841, inlinedAt: !3640)
!3849 = !DILocation(line: 161, column: 18, scope: !3841, inlinedAt: !3640)
!3850 = !DILocalVariable(name: "carry", scope: !3841, file: !16, line: 162, type: !11, align: 4)
!3851 = !DILocation(line: 162, column: 8, scope: !3841, inlinedAt: !3640)
!3852 = !DILocation(line: 162, column: 16, scope: !3841, inlinedAt: !3640)
!3853 = !DILocation(line: 163, column: 12, scope: !3854, inlinedAt: !3640)
!3854 = distinct !DILexicalBlock(scope: !3841, file: !2, line: 163, column: 3)
!3855 = !DILocation(line: 163, column: 15, scope: !3854, inlinedAt: !3640)
!3856 = !DILocation(line: 163, column: 20, scope: !3854, inlinedAt: !3640)
!3857 = !DILocalVariable(name: "tmp", scope: !3858, file: !16, line: 165, type: !11, align: 4)
!3858 = distinct !DILexicalBlock(scope: !3854, file: !2, line: 164, column: 3)
!3859 = !DILocation(line: 165, column: 9, scope: !3858, inlinedAt: !3640)
!3860 = !DILocation(line: 165, column: 17, scope: !3858, inlinedAt: !3640)
!3861 = !DILocation(line: 165, column: 22, scope: !3858, inlinedAt: !3640)
!3862 = !DILocation(line: 165, column: 15, scope: !3858, inlinedAt: !3640)
!3863 = !DILocation(line: 166, column: 6, scope: !3858, inlinedAt: !3640)
!3864 = !DILocation(line: 166, column: 13, scope: !3858, inlinedAt: !3640)
!3865 = !DILocation(line: 166, column: 18, scope: !3858, inlinedAt: !3640)
!3866 = !DILocation(line: 166, column: 11, scope: !3858, inlinedAt: !3640)
!3867 = !DILocation(line: 166, column: 24, scope: !3858, inlinedAt: !3640)
!3868 = !DILocation(line: 167, column: 25, scope: !3858, inlinedAt: !3640)
!3869 = !DILocation(line: 167, column: 12, scope: !3858, inlinedAt: !3640)
!3870 = !DILocation(line: 167, column: 31, scope: !3858, inlinedAt: !3640)
!3871 = !DILocation(line: 168, column: 8, scope: !3858, inlinedAt: !3640)
!3872 = !DILocation(line: 168, column: 13, scope: !3858, inlinedAt: !3640)
!3873 = !DILocation(line: 168, column: 21, scope: !3858, inlinedAt: !3640)
!3874 = !DILocation(line: 170, column: 10, scope: !3875, inlinedAt: !3640)
!3875 = distinct !DILexicalBlock(scope: !3858, file: !2, line: 169, column: 4)
!3876 = !DILocation(line: 171, column: 5, scope: !3875, inlinedAt: !3640)
!3877 = !DILocation(line: 163, column: 23, scope: !3854, inlinedAt: !3640)
!3878 = !DILocation(line: 174, column: 7, scope: !3841, inlinedAt: !3640)
!3879 = !DILocation(line: 174, column: 16, scope: !3841, inlinedAt: !3640)
!3880 = !DILocation(line: 174, column: 23, scope: !3841, inlinedAt: !3640)
!3881 = !DILocation(line: 175, column: 3, scope: !3841, inlinedAt: !3640)
!3882 = !DILocation(line: 175, column: 13, scope: !3841, inlinedAt: !3640)
!3883 = !DILocation(line: 175, column: 9, scope: !3841, inlinedAt: !3640)
!3884 = !DILocation(line: 179, column: 2, scope: !3639, inlinedAt: !3640)
!3885 = !DILocation(line: 179, column: 9, scope: !3886, inlinedAt: !3640)
!3886 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 179, column: 2)
!3887 = !DILocation(line: 179, column: 30, scope: !3886, inlinedAt: !3640)
!3888 = !DILocation(line: 179, column: 53, scope: !3886, inlinedAt: !3640)
!3889 = !DILocation(line: 179, column: 51, scope: !3886, inlinedAt: !3640)
!3890 = !DILocalVariable(name: "carry", scope: !3891, file: !16, line: 181, type: !11, align: 4)
!3891 = distinct !DILexicalBlock(scope: !3886, file: !2, line: 180, column: 2)
!3892 = !DILocation(line: 181, column: 8, scope: !3891, inlinedAt: !3640)
!3893 = !DILocation(line: 181, column: 16, scope: !3891, inlinedAt: !3640)
!3894 = !DILocation(line: 182, column: 3, scope: !3891, inlinedAt: !3640)
!3895 = !DILocation(line: 183, column: 13, scope: !3896, inlinedAt: !3640)
!3896 = distinct !DILexicalBlock(scope: !3891, file: !2, line: 183, column: 3)
!3897 = !DILocalVariable(name: "tmp", scope: !3898, file: !16, line: 185, type: !69, align: 8)
!3898 = distinct !DILexicalBlock(scope: !3896, file: !2, line: 184, column: 3)
!3899 = !DILocation(line: 185, column: 10, scope: !3898, inlinedAt: !3640)
!3900 = !DILocation(line: 185, column: 25, scope: !3898, inlinedAt: !3640)
!3901 = !DILocation(line: 185, column: 16, scope: !3898, inlinedAt: !3640)
!3902 = !DILocation(line: 185, column: 36, scope: !3898, inlinedAt: !3640)
!3903 = !DILocation(line: 186, column: 8, scope: !3898, inlinedAt: !3640)
!3904 = !DILocation(line: 188, column: 20, scope: !3905, inlinedAt: !3640)
!3905 = distinct !DILexicalBlock(scope: !3898, file: !2, line: 187, column: 4)
!3906 = !DILocation(line: 188, column: 13, scope: !3905, inlinedAt: !3640)
!3907 = !DILocation(line: 189, column: 7, scope: !3905, inlinedAt: !3640)
!3908 = !DILocation(line: 189, column: 19, scope: !3905, inlinedAt: !3640)
!3909 = !DILocation(line: 189, column: 12, scope: !3905, inlinedAt: !3640)
!3910 = !DILocation(line: 193, column: 13, scope: !3911, inlinedAt: !3640)
!3911 = distinct !DILexicalBlock(scope: !3898, file: !2, line: 192, column: 4)
!3912 = !DILocation(line: 194, column: 7, scope: !3911, inlinedAt: !3640)
!3913 = !DILocation(line: 194, column: 12, scope: !3911, inlinedAt: !3640)
!3914 = !DILocation(line: 196, column: 8, scope: !3898, inlinedAt: !3640)
!3915 = !DILocation(line: 196, column: 14, scope: !3898, inlinedAt: !3640)
!3916 = !DILocation(line: 196, column: 31, scope: !3898, inlinedAt: !3640)
!3917 = !DILocation(line: 196, column: 36, scope: !3898, inlinedAt: !3640)
!3918 = !DILocation(line: 196, column: 44, scope: !3898, inlinedAt: !3640)
!3919 = !DILocation(line: 196, column: 52, scope: !3898, inlinedAt: !3640)
!3920 = !DILocation(line: 197, column: 8, scope: !3898, inlinedAt: !3640)
!3921 = !DILocation(line: 197, column: 13, scope: !3898, inlinedAt: !3640)
!3922 = !DILocation(line: 197, column: 16, scope: !3898, inlinedAt: !3640)
!3923 = !DILocation(line: 183, column: 35, scope: !3896, inlinedAt: !3640)
!3924 = !DILocation(line: 199, column: 7, scope: !3891, inlinedAt: !3640)
!3925 = !DILocation(line: 201, column: 4, scope: !3926, inlinedAt: !3640)
!3926 = distinct !DILexicalBlock(scope: !3891, file: !2, line: 200, column: 3)
!3927 = !DILocation(line: 202, column: 9, scope: !3926, inlinedAt: !3640)
!3928 = !DILocation(line: 203, column: 8, scope: !3926, inlinedAt: !3640)
!3929 = !DILocation(line: 203, column: 13, scope: !3926, inlinedAt: !3640)
!3930 = !DILocation(line: 205, column: 10, scope: !3931, inlinedAt: !3640)
!3931 = distinct !DILexicalBlock(scope: !3926, file: !2, line: 204, column: 4)
!3932 = !DILocation(line: 206, column: 8, scope: !3931, inlinedAt: !3640)
!3933 = !DILocation(line: 206, column: 28, scope: !3931, inlinedAt: !3640)
!3934 = !DILocation(line: 206, column: 5, scope: !3931, inlinedAt: !3640)
!3935 = !DILocation(line: 208, column: 6, scope: !3926, inlinedAt: !3640)
!3936 = !DILocation(line: 208, column: 11, scope: !3926, inlinedAt: !3640)
!3937 = !DILocation(line: 213, column: 2, scope: !3639, inlinedAt: !3640)
!3938 = !DILocalVariable(name: "carry", scope: !3939, file: !16, line: 215, type: !11, align: 4)
!3939 = distinct !DILexicalBlock(scope: !3940, file: !2, line: 214, column: 2)
!3940 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 213, column: 2)
!3941 = !DILocation(line: 215, column: 8, scope: !3939, inlinedAt: !3640)
!3942 = !DILocation(line: 215, column: 16, scope: !3939, inlinedAt: !3640)
!3943 = !DILocalVariable(name: "sh", scope: !3939, file: !16, line: 216, type: !3, align: 4)
!3944 = !DILocation(line: 216, column: 7, scope: !3939, inlinedAt: !3640)
!3945 = !DILocation(line: 216, column: 12, scope: !3939, inlinedAt: !3640)
!3946 = !DILocalVariable(name: "i", scope: !3939, file: !16, line: 217, type: !3, align: 4)
!3947 = !DILocation(line: 217, column: 7, scope: !3939, inlinedAt: !3640)
!3948 = !DILocation(line: 218, column: 12, scope: !3949, inlinedAt: !3640)
!3949 = distinct !DILexicalBlock(scope: !3939, file: !2, line: 218, column: 3)
!3950 = !DILocation(line: 218, column: 15, scope: !3949, inlinedAt: !3640)
!3951 = !DILocation(line: 220, column: 9, scope: !3952, inlinedAt: !3640)
!3952 = distinct !DILexicalBlock(scope: !3949, file: !2, line: 219, column: 3)
!3953 = !DILocation(line: 220, column: 13, scope: !3952, inlinedAt: !3640)
!3954 = !DILocation(line: 221, column: 8, scope: !3952, inlinedAt: !3640)
!3955 = !DILocation(line: 221, column: 13, scope: !3952, inlinedAt: !3640)
!3956 = !DILocation(line: 221, column: 20, scope: !3952, inlinedAt: !3640)
!3957 = !DILocation(line: 221, column: 28, scope: !3952, inlinedAt: !3640)
!3958 = !DILocation(line: 221, column: 18, scope: !3952, inlinedAt: !3640)
!3959 = !DILocation(line: 223, column: 9, scope: !3960, inlinedAt: !3640)
!3960 = distinct !DILexicalBlock(scope: !3952, file: !2, line: 222, column: 4)
!3961 = !DILocation(line: 224, column: 5, scope: !3960, inlinedAt: !3640)
!3962 = !DILocation(line: 226, column: 11, scope: !3952, inlinedAt: !3640)
!3963 = !DILocation(line: 226, column: 15, scope: !3952, inlinedAt: !3640)
!3964 = !DILocation(line: 226, column: 31, scope: !3952, inlinedAt: !3640)
!3965 = !DILocation(line: 226, column: 8, scope: !3952, inlinedAt: !3640)
!3966 = !DILocation(line: 226, column: 35, scope: !3952, inlinedAt: !3640)
!3967 = !DILocation(line: 218, column: 28, scope: !3949, inlinedAt: !3640)
!3968 = !DILocation(line: 228, column: 7, scope: !3939, inlinedAt: !3640)
!3969 = !DILocation(line: 228, column: 23, scope: !3939, inlinedAt: !3640)
!3970 = !DILocation(line: 228, column: 42, scope: !3939, inlinedAt: !3640)
!3971 = !DILocation(line: 229, column: 7, scope: !3939, inlinedAt: !3640)
!3972 = !DILocation(line: 229, column: 34, scope: !3939, inlinedAt: !3640)
!3973 = !DILocation(line: 230, column: 3, scope: !3939, inlinedAt: !3640)
!3974 = !DILocation(line: 230, column: 9, scope: !3939, inlinedAt: !3640)
!3975 = !DILocation(line: 231, column: 12, scope: !3976, inlinedAt: !3640)
!3976 = distinct !DILexicalBlock(scope: !3939, file: !2, line: 231, column: 3)
!3977 = !DILocation(line: 231, column: 15, scope: !3976, inlinedAt: !3640)
!3978 = !DILocation(line: 231, column: 20, scope: !3976, inlinedAt: !3640)
!3979 = !DILocalVariable(name: "tmp", scope: !3980, file: !16, line: 233, type: !11, align: 4)
!3980 = distinct !DILexicalBlock(scope: !3976, file: !2, line: 232, column: 3)
!3981 = !DILocation(line: 233, column: 9, scope: !3980, inlinedAt: !3640)
!3982 = !DILocation(line: 233, column: 17, scope: !3980, inlinedAt: !3640)
!3983 = !DILocation(line: 233, column: 28, scope: !3980, inlinedAt: !3640)
!3984 = !DILocation(line: 233, column: 23, scope: !3980, inlinedAt: !3640)
!3985 = !DILocation(line: 233, column: 15, scope: !3980, inlinedAt: !3640)
!3986 = !DILocation(line: 234, column: 6, scope: !3980, inlinedAt: !3640)
!3987 = !DILocation(line: 234, column: 13, scope: !3980, inlinedAt: !3640)
!3988 = !DILocation(line: 234, column: 19, scope: !3980, inlinedAt: !3640)
!3989 = !DILocation(line: 234, column: 11, scope: !3980, inlinedAt: !3640)
!3990 = !DILocation(line: 234, column: 24, scope: !3980, inlinedAt: !3640)
!3991 = !DILocation(line: 235, column: 27, scope: !3980, inlinedAt: !3640)
!3992 = !DILocation(line: 235, column: 13, scope: !3980, inlinedAt: !3640)
!3993 = !DILocation(line: 235, column: 33, scope: !3980, inlinedAt: !3640)
!3994 = !DILocation(line: 236, column: 8, scope: !3980, inlinedAt: !3640)
!3995 = !DILocation(line: 236, column: 13, scope: !3980, inlinedAt: !3640)
!3996 = !DILocation(line: 236, column: 21, scope: !3980, inlinedAt: !3640)
!3997 = !DILocation(line: 238, column: 10, scope: !3998, inlinedAt: !3640)
!3998 = distinct !DILexicalBlock(scope: !3980, file: !2, line: 237, column: 4)
!3999 = !DILocation(line: 239, column: 5, scope: !3998, inlinedAt: !3640)
!4000 = !DILocation(line: 240, column: 5, scope: !3998, inlinedAt: !3640)
!4001 = !DILocation(line: 231, column: 28, scope: !3976, inlinedAt: !3640)
!4002 = !DILocation(line: 243, column: 7, scope: !3939, inlinedAt: !3640)
!4003 = !DILocation(line: 245, column: 9, scope: !4004, inlinedAt: !3640)
!4004 = distinct !DILexicalBlock(scope: !3939, file: !2, line: 244, column: 3)
!4005 = !DILocation(line: 245, column: 26, scope: !4004, inlinedAt: !3640)
!4006 = !DILocation(line: 247, column: 7, scope: !4007, inlinedAt: !3640)
!4007 = distinct !DILexicalBlock(scope: !4004, file: !2, line: 246, column: 4)
!4008 = !DILocation(line: 247, column: 12, scope: !4007, inlinedAt: !3640)
!4009 = !DILocation(line: 248, column: 10, scope: !4007, inlinedAt: !3640)
!4010 = !DILocation(line: 252, column: 8, scope: !4011, inlinedAt: !3640)
!4011 = distinct !DILexicalBlock(scope: !4004, file: !2, line: 251, column: 4)
!4012 = !DILocation(line: 252, column: 5, scope: !4011, inlinedAt: !3640)
!4013 = !DILocalVariable(name: "y", scope: !3639, file: !16, line: 258, type: !2622, align: 8)
!4014 = !DILocation(line: 258, column: 9, scope: !3639, inlinedAt: !3640)
!4015 = !DILocalVariable(name: "i", scope: !3639, file: !16, line: 259, type: !3, align: 4)
!4016 = !DILocation(line: 259, column: 6, scope: !3639, inlinedAt: !3640)
!4017 = !DILocation(line: 260, column: 11, scope: !4018, inlinedAt: !3640)
!4018 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 260, column: 2)
!4019 = !DILocation(line: 260, column: 14, scope: !4018, inlinedAt: !3640)
!4020 = !DILocation(line: 262, column: 8, scope: !4021, inlinedAt: !3640)
!4021 = distinct !DILexicalBlock(scope: !4018, file: !2, line: 261, column: 2)
!4022 = !DILocation(line: 262, column: 12, scope: !4021, inlinedAt: !3640)
!4023 = !DILocation(line: 262, column: 25, scope: !4021, inlinedAt: !3640)
!4024 = !DILocation(line: 262, column: 36, scope: !4021, inlinedAt: !3640)
!4025 = !DILocation(line: 262, column: 31, scope: !4021, inlinedAt: !3640)
!4026 = !DILocation(line: 262, column: 58, scope: !4021, inlinedAt: !3640)
!4027 = !DILocation(line: 263, column: 22, scope: !4021, inlinedAt: !3640)
!4028 = !DILocation(line: 263, column: 7, scope: !4021, inlinedAt: !3640)
!4029 = !DILocation(line: 263, column: 29, scope: !4021, inlinedAt: !3640)
!4030 = !DILocation(line: 263, column: 33, scope: !4021, inlinedAt: !3640)
!4031 = !DILocation(line: 260, column: 27, scope: !4018, inlinedAt: !3640)
!4032 = !DILocation(line: 266, column: 2, scope: !3639, inlinedAt: !3640)
!4033 = !DILocation(line: 266, column: 7, scope: !3639, inlinedAt: !3640)
!4034 = !DILocalVariable(name: "denormal", scope: !3639, file: !16, line: 268, type: !119, align: 1)
!4035 = !DILocation(line: 268, column: 7, scope: !3639, inlinedAt: !3640)
!4036 = !DILocalVariable(name: "bits", scope: !3639, file: !16, line: 270, type: !11, align: 4)
!4037 = !DILocation(line: 270, column: 7, scope: !3639, inlinedAt: !3640)
!4038 = !DILocation(line: 270, column: 14, scope: !3639, inlinedAt: !3640)
!4039 = !DILocation(line: 271, column: 6, scope: !3639, inlinedAt: !3640)
!4040 = !DILocation(line: 271, column: 37, scope: !3639, inlinedAt: !3640)
!4041 = !DILocation(line: 271, column: 13, scope: !3639, inlinedAt: !3640)
!4042 = !DILocation(line: 273, column: 34, scope: !4043, inlinedAt: !3640)
!4043 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 272, column: 2)
!4044 = !DILocation(line: 273, column: 10, scope: !4043, inlinedAt: !3640)
!4045 = !DILocation(line: 274, column: 7, scope: !4043, inlinedAt: !3640)
!4046 = !DILocation(line: 274, column: 24, scope: !4043, inlinedAt: !3640)
!4047 = !DILocation(line: 275, column: 14, scope: !4043, inlinedAt: !3640)
!4048 = !DILocalVariable(name: "bias", scope: !3639, file: !16, line: 279, type: !2622, align: 8)
!4049 = !DILocation(line: 279, column: 9, scope: !3639, inlinedAt: !3640)
!4050 = !DILocalVariable(name: "frac", scope: !3639, file: !16, line: 280, type: !2622, align: 8)
!4051 = !DILocation(line: 280, column: 9, scope: !3639, inlinedAt: !3640)
!4052 = !DILocation(line: 281, column: 6, scope: !3639, inlinedAt: !3640)
!4053 = !DILocation(line: 283, column: 69, scope: !4054, inlinedAt: !3640)
!4054 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 282, column: 2)
!4055 = !DILocation(line: 283, column: 41, scope: !4054, inlinedAt: !3640)
!4056 = !DILocation(line: 1013, column: 52, scope: !4057, inlinedAt: !4058)
!4057 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !327, file: !327, line: 1013, scopeLine: 1013, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4058 = !DILocation(line: 283, column: 25, scope: !4054, inlinedAt: !3640)
!4059 = !DILocation(line: 1013, column: 41, scope: !4057, inlinedAt: !4058)
!4060 = !DILocation(line: 61, column: 10, scope: !4061, inlinedAt: !4062)
!4061 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2847, file: !2847, line: 49, scopeLine: 49, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4062 = !DILocation(line: 262, column: 40, scope: !4063, inlinedAt: !4064)
!4063 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !327, file: !327, line: 262, scopeLine: 262, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4064 = !DILocation(line: 283, column: 10, scope: !4054, inlinedAt: !3640)
!4065 = !DILocation(line: 262, column: 76, scope: !4063, inlinedAt: !4064)
!4066 = !DILocation(line: 284, column: 10, scope: !4054, inlinedAt: !3640)
!4067 = !DILocation(line: 284, column: 54, scope: !4054, inlinedAt: !3640)
!4068 = !DILocation(line: 284, column: 30, scope: !4054, inlinedAt: !3640)
!4069 = !DILocation(line: 1013, column: 52, scope: !4070, inlinedAt: !4071)
!4070 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !327, file: !327, line: 1013, scopeLine: 1013, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4071 = !DILocation(line: 284, column: 14, scope: !4054, inlinedAt: !3640)
!4072 = !DILocation(line: 1013, column: 41, scope: !4070, inlinedAt: !4071)
!4073 = !DILocation(line: 285, column: 3, scope: !4054, inlinedAt: !3640)
!4074 = !DILocation(line: 285, column: 8, scope: !4054, inlinedAt: !3640)
!4075 = !DILocation(line: 286, column: 3, scope: !4054, inlinedAt: !3640)
!4076 = !DILocation(line: 286, column: 8, scope: !4054, inlinedAt: !3640)
!4077 = !DILocation(line: 290, column: 7, scope: !3639, inlinedAt: !3640)
!4078 = !DILocation(line: 290, column: 11, scope: !3639, inlinedAt: !3640)
!4079 = !DILocation(line: 290, column: 24, scope: !3639, inlinedAt: !3640)
!4080 = !DILocalVariable(name: "t", scope: !4081, file: !16, line: 292, type: !11, align: 4)
!4081 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 291, column: 2)
!4082 = !DILocation(line: 292, column: 8, scope: !4081, inlinedAt: !3640)
!4083 = !DILocation(line: 292, column: 15, scope: !4081, inlinedAt: !3640)
!4084 = !DILocation(line: 292, column: 19, scope: !4081, inlinedAt: !3640)
!4085 = !DILocation(line: 295, column: 9, scope: !4086, inlinedAt: !3640)
!4086 = distinct !DILexicalBlock(scope: !4081, file: !2, line: 293, column: 3)
!4087 = !DILocation(line: 295, column: 27, scope: !4086, inlinedAt: !3640)
!4088 = !DILocation(line: 295, column: 33, scope: !4086, inlinedAt: !3640)
!4089 = !DILocation(line: 295, column: 37, scope: !4086, inlinedAt: !3640)
!4090 = !DILocation(line: 295, column: 54, scope: !4086, inlinedAt: !3640)
!4091 = !DILocation(line: 296, column: 5, scope: !4092, inlinedAt: !3640)
!4092 = distinct !DILexicalBlock(scope: !4086, file: !2, line: 296, column: 5)
!4093 = !DILocation(line: 296, column: 20, scope: !4092, inlinedAt: !3640)
!4094 = !DILocation(line: 296, column: 13, scope: !4092, inlinedAt: !3640)
!4095 = !DILocation(line: 297, column: 9, scope: !4086, inlinedAt: !3640)
!4096 = !DILocation(line: 298, column: 5, scope: !4097, inlinedAt: !3640)
!4097 = distinct !DILexicalBlock(scope: !4086, file: !2, line: 298, column: 5)
!4098 = !DILocation(line: 298, column: 20, scope: !4097, inlinedAt: !3640)
!4099 = !DILocation(line: 298, column: 13, scope: !4097, inlinedAt: !3640)
!4100 = !DILocation(line: 299, column: 9, scope: !4086, inlinedAt: !3640)
!4101 = !DILocation(line: 300, column: 10, scope: !4102, inlinedAt: !3640)
!4102 = distinct !DILexicalBlock(scope: !4086, file: !2, line: 300, column: 5)
!4103 = !DILocation(line: 300, column: 14, scope: !4102, inlinedAt: !3640)
!4104 = !DILocation(line: 300, column: 31, scope: !4102, inlinedAt: !3640)
!4105 = !DILocation(line: 302, column: 6, scope: !4106, inlinedAt: !3640)
!4106 = distinct !DILexicalBlock(scope: !4102, file: !2, line: 301, column: 5)
!4107 = !DILocation(line: 302, column: 20, scope: !4106, inlinedAt: !3640)
!4108 = !DILocation(line: 302, column: 14, scope: !4106, inlinedAt: !3640)
!4109 = !DILocation(line: 306, column: 6, scope: !4110, inlinedAt: !3640)
!4110 = distinct !DILexicalBlock(scope: !4102, file: !2, line: 305, column: 5)
!4111 = !DILocation(line: 306, column: 21, scope: !4110, inlinedAt: !3640)
!4112 = !DILocation(line: 306, column: 14, scope: !4110, inlinedAt: !3640)
!4113 = !DILocation(line: 309, column: 31, scope: !4081, inlinedAt: !3640)
!4114 = !DILocation(line: 309, column: 7, scope: !4081, inlinedAt: !3640)
!4115 = !DILocation(line: 309, column: 46, scope: !4081, inlinedAt: !3640)
!4116 = !DILocation(line: 309, column: 57, scope: !4081, inlinedAt: !3640)
!4117 = !DILocation(line: 312, column: 2, scope: !3639, inlinedAt: !3640)
!4118 = !DILocation(line: 312, column: 7, scope: !3639, inlinedAt: !3640)
!4119 = !DILocation(line: 313, column: 2, scope: !3639, inlinedAt: !3640)
!4120 = !DILocation(line: 313, column: 7, scope: !3639, inlinedAt: !3640)
!4121 = !DILocation(line: 315, column: 8, scope: !3639, inlinedAt: !3640)
!4122 = !DILocation(line: 315, column: 49, scope: !3639, inlinedAt: !3640)
!4123 = !DILocation(line: 77, column: 23, scope: !4124, inlinedAt: !4125)
!4124 = distinct !DISubprogram(name: "abs", linkageName: "abs", scope: !327, file: !327, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4125 = !DILocation(line: 317, column: 7, scope: !4126, inlinedAt: !3640)
!4126 = distinct !DILexicalBlock(scope: !3639, file: !2, line: 316, column: 2)
!4127 = !DILocation(line: 319, column: 8, scope: !4128, inlinedAt: !3640)
!4128 = distinct !DILexicalBlock(scope: !4126, file: !2, line: 318, column: 3)
!4129 = !DILocation(line: 319, column: 20, scope: !4128, inlinedAt: !3640)
!4130 = !DILocation(line: 319, column: 52, scope: !4128, inlinedAt: !3640)
!4131 = !DILocation(line: 319, column: 28, scope: !4128, inlinedAt: !3640)
!4132 = !DILocation(line: 319, column: 75, scope: !4128, inlinedAt: !3640)
!4133 = !DILocation(line: 320, column: 4, scope: !4128, inlinedAt: !3640)
!4134 = !DILocation(line: 321, column: 4, scope: !4128, inlinedAt: !3640)
!4135 = !DILocation(line: 323, column: 7, scope: !4126, inlinedAt: !3640)
!4136 = !DILocation(line: 323, column: 36, scope: !4126, inlinedAt: !3640)
!4137 = !DILocation(line: 323, column: 45, scope: !4126, inlinedAt: !3640)
!4138 = !DILocation(line: 323, column: 57, scope: !4126, inlinedAt: !3640)
!4139 = !DILocation(line: 323, column: 71, scope: !4126, inlinedAt: !3640)
!4140 = !DILocation(line: 1013, column: 52, scope: !4141, inlinedAt: !4142)
!4141 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !327, file: !327, line: 1013, scopeLine: 1013, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4142 = !DILocation(line: 325, column: 9, scope: !3639, inlinedAt: !3640)
!4143 = !DILocation(line: 1013, column: 41, scope: !4141, inlinedAt: !4142)
!4144 = distinct !DISubprogram(name: "tokenize", linkageName: "std.core.String.tokenize", scope: !16, file: !16, line: 946, type: !4145, scopeLine: 946, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4145 = !DISubroutineType(types: !4146)
!4146 = !{!58, !61, !61}
!4147 = !DILocalVariable(name: "self", arg: 1, scope: !4144, file: !16, line: 946, type: !61)
!4148 = !DILocation(line: 946, column: 29, scope: !4144)
!4149 = !DILocalVariable(name: "split", arg: 2, scope: !4144, file: !16, line: 946, type: !61)
!4150 = !DILocation(line: 946, column: 42, scope: !4144)
!4151 = !DILocation(line: 948, column: 21, scope: !4144)
!4152 = !DILocation(line: 948, column: 36, scope: !4144)
!4153 = !DILocation(line: 948, column: 51, scope: !4144)
!4154 = distinct !DISubprogram(name: "tokenize_all", linkageName: "std.core.String.tokenize_all", scope: !16, file: !16, line: 960, type: !4155, scopeLine: 960, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4155 = !DISubroutineType(types: !4156)
!4156 = !{!58, !61, !61, !119}
!4157 = !DILocalVariable(name: "self", arg: 1, scope: !4154, file: !16, line: 960, type: !61)
!4158 = !DILocation(line: 960, column: 33, scope: !4154)
!4159 = !DILocalVariable(name: "split", arg: 2, scope: !4154, file: !16, line: 960, type: !61)
!4160 = !DILocation(line: 960, column: 46, scope: !4154)
!4161 = !DILocalVariable(name: "skip_last", arg: 3, scope: !4154, file: !16, line: 960, type: !119)
!4162 = !DILocation(line: 960, column: 58, scope: !4154)
!4163 = !DILocation(line: 963, column: 13, scope: !4154)
!4164 = !DILocation(line: 964, column: 12, scope: !4154)
!4165 = !DILocation(line: 965, column: 11, scope: !4154)
!4166 = !DILocation(line: 965, column: 48, scope: !4154)
!4167 = distinct !DISubprogram(name: "splitter", linkageName: "std.core.String.splitter", scope: !16, file: !16, line: 969, type: !4145, scopeLine: 969, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4168 = !DILocalVariable(name: "self", arg: 1, scope: !4167, file: !16, line: 969, type: !61)
!4169 = !DILocation(line: 969, column: 29, scope: !4167)
!4170 = !DILocalVariable(name: "split", arg: 2, scope: !4167, file: !16, line: 969, type: !61)
!4171 = !DILocation(line: 969, column: 42, scope: !4167)
!4172 = !DILocation(line: 971, column: 9, scope: !4167)
!4173 = distinct !DISubprogram(name: "reset", linkageName: "std.core.string.Splitter.reset", scope: !16, file: !16, line: 1025, type: !4174, scopeLine: 1025, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4174 = !DISubroutineType(types: !4175)
!4175 = !{null, !4176}
!4176 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Splitter*", baseType: !58, size: 64, align: 64, dwarfAddressSpace: 0)
!4177 = !DILocation(line: 1026, column: 1, scope: !4173)
!4178 = !DILocalVariable(name: "self", arg: 1, scope: !4173, file: !16, line: 1025, type: !4176)
!4179 = !DILocation(line: 1025, column: 24, scope: !4173)
!4180 = !DILocation(line: 1027, column: 2, scope: !4173)
!4181 = !DILocation(line: 1027, column: 17, scope: !4173)
!4182 = distinct !DISubprogram(name: "next", linkageName: "std.core.string.Splitter.next", scope: !16, file: !16, line: 1030, type: !4183, scopeLine: 1030, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4183 = !DISubroutineType(types: !4184)
!4184 = !{!431, !132, !4176}
!4185 = !DILocation(line: 1031, column: 1, scope: !4182)
!4186 = !DILocalVariable(name: "self", arg: 1, scope: !4182, file: !16, line: 1030, type: !4176)
!4187 = !DILocation(line: 1030, column: 26, scope: !4182)
!4188 = !DILocation(line: 1032, column: 2, scope: !4182)
!4189 = !DILocalVariable(name: "len", scope: !4190, file: !16, line: 1034, type: !68, align: 8)
!4190 = distinct !DILexicalBlock(scope: !4191, file: !16, line: 1033, column: 2)
!4191 = distinct !DILexicalBlock(scope: !4182, file: !16, line: 1032, column: 2)
!4192 = !DILocation(line: 1034, column: 7, scope: !4190)
!4193 = !DILocation(line: 1034, column: 13, scope: !4190)
!4194 = !DILocalVariable(name: "current", scope: !4190, file: !16, line: 1035, type: !68, align: 8)
!4195 = !DILocation(line: 1035, column: 7, scope: !4190)
!4196 = !DILocation(line: 1035, column: 17, scope: !4190)
!4197 = !DILocation(line: 1036, column: 7, scope: !4190)
!4198 = !DILocation(line: 1036, column: 17, scope: !4190)
!4199 = !DILocation(line: 1036, column: 29, scope: !4190)
!4200 = !DILocation(line: 1037, column: 7, scope: !4190)
!4201 = !DILocation(line: 1037, column: 18, scope: !4190)
!4202 = !DILocation(line: 1039, column: 8, scope: !4203)
!4203 = distinct !DILexicalBlock(scope: !4190, file: !16, line: 1038, column: 3)
!4204 = !DILocation(line: 1039, column: 42, scope: !4203)
!4205 = !DILocation(line: 1040, column: 4, scope: !4203)
!4206 = !DILocation(line: 1041, column: 11, scope: !4203)
!4207 = !DILocation(line: 1041, column: 23, scope: !4203)
!4208 = !DILocalVariable(name: "remaining", scope: !4190, file: !16, line: 1043, type: !61, align: 8)
!4209 = !DILocation(line: 1043, column: 10, scope: !4190)
!4210 = !DILocation(line: 1043, column: 22, scope: !4190)
!4211 = !DILocation(line: 1043, column: 34, scope: !4190)
!4212 = !DILocalVariable(name: "next", scope: !4190, file: !16, line: 1044, type: !69, align: 8)
!4213 = !DILocation(line: 1044, column: 8, scope: !4190)
!4214 = !DILocation(line: 1044, column: 15, scope: !4190)
!4215 = !DILocation(line: 1044, column: 34, scope: !4190)
!4216 = !DILocation(line: 533, column: 11, scope: !4190)
!4217 = !DILocation(line: 1045, column: 7, scope: !4190)
!4218 = !DILocation(line: 1047, column: 4, scope: !4219)
!4219 = distinct !DILexicalBlock(scope: !4190, file: !16, line: 1046, column: 3)
!4220 = !DILocation(line: 1047, column: 19, scope: !4219)
!4221 = !DILocation(line: 1047, column: 29, scope: !4219)
!4222 = !DILocation(line: 1047, column: 36, scope: !4219)
!4223 = !DILocation(line: 1048, column: 8, scope: !4219)
!4224 = !DILocation(line: 1048, column: 17, scope: !4219)
!4225 = !DILocation(line: 1048, column: 40, scope: !4219)
!4226 = !DILocation(line: 1049, column: 11, scope: !4219)
!4227 = !DILocation(line: 1049, column: 21, scope: !4219)
!4228 = !DILocation(line: 1049, column: 22, scope: !4219)
!4229 = !DILocation(line: 1051, column: 3, scope: !4190)
!4230 = !DILocation(line: 1051, column: 18, scope: !4190)
!4231 = !DILocation(line: 1052, column: 10, scope: !4190)
!4232 = distinct !DISubprogram(name: "tformat_zstr", linkageName: "std.core.string.tformat_zstr", scope: !16, file: !16, line: 86, type: !4233, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4233 = !DISubroutineType(types: !4234)
!4234 = !{!760, !61, !4235}
!4235 = !DICompositeType(tag: DW_TAG_structure_type, name: "any[]", size: 128, align: 64, elements: !4236, identifier: "any[]")
!4236 = !{!4237, !4243}
!4237 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4235, baseType: !4238, size: 64, align: 64)
!4238 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "any*", baseType: !4239, size: 64, align: 64, dwarfAddressSpace: 0)
!4239 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !4240, identifier: "any")
!4240 = !{!4241, !4242}
!4241 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4239, baseType: !85, size: 64, align: 64)
!4242 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4239, baseType: !87, size: 64, align: 64, offset: 64)
!4243 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4235, baseType: !68, size: 64, align: 64, offset: 64)
!4244 = !DILocalVariable(name: "fmt", arg: 1, scope: !4232, file: !16, line: 86, type: !61)
!4245 = !DILocation(line: 86, column: 32, scope: !4232)
!4246 = !DILocalVariable(name: "args", arg: 2, scope: !4232, file: !16, line: 86, type: !4235)
!4247 = !DILocation(line: 86, column: 37, scope: !4232)
!4248 = !DILocalVariable(name: "str", scope: !4232, file: !16, line: 88, type: !4249, align: 8)
!4249 = !DIDerivedType(tag: DW_TAG_typedef, name: "DString", scope: !16, file: !16, line: 7, baseType: !4250, align: 8)
!4250 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "DStringOpaque*", baseType: !4251, size: 64, align: 64, dwarfAddressSpace: 0)
!4251 = !DIDerivedType(tag: DW_TAG_typedef, name: "DStringOpaque", scope: !16, file: !16, line: 8, baseType: null, align: 1)
!4252 = !DILocation(line: 88, column: 10, scope: !4232)
!4253 = !DILocation(line: 88, column: 44, scope: !4232)
!4254 = !DILocation(line: 88, column: 54, scope: !4232)
!4255 = !DILocation(line: 88, column: 16, scope: !4232)
!4256 = !DILocation(line: 89, column: 2, scope: !4232)
!4257 = !DILocation(line: 90, column: 9, scope: !4232)
!4258 = distinct !DISubprogram(name: "format", linkageName: "std.core.string.format", scope: !16, file: !16, line: 99, type: !4259, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4259 = !DISubroutineType(types: !4260)
!4260 = !{!61, !82, !61, !4235}
!4261 = !DILocalVariable(name: "allocator", arg: 1, scope: !4258, file: !16, line: 99, type: !82)
!4262 = !DILocation(line: 99, column: 28, scope: !4258)
!4263 = !DILocalVariable(name: "fmt", arg: 2, scope: !4258, file: !16, line: 99, type: !61)
!4264 = !DILocation(line: 99, column: 46, scope: !4258)
!4265 = !DILocalVariable(name: "args", arg: 3, scope: !4258, file: !16, line: 99, type: !4235)
!4266 = !DILocation(line: 99, column: 51, scope: !4258)
!4267 = !DILocalVariable(name: "state", scope: !4268, file: !16, line: 594, type: !100, align: 8)
!4268 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !99, file: !99, line: 592, scopeLine: 592, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4269 = !DILocation(line: 594, column: 12, scope: !4268, inlinedAt: !4270)
!4270 = !DILocation(line: 99, column: 74, scope: !4258)
!4271 = !DILocation(line: 594, column: 20, scope: !4268, inlinedAt: !4270)
!4272 = !DILocalVariable(name: "str", scope: !4273, file: !16, line: 101, type: !4249, align: 8)
!4273 = distinct !DILexicalBlock(scope: !4258, file: !16, line: 100, column: 1)
!4274 = !DILocation(line: 101, column: 10, scope: !4273)
!4275 = !DILocation(line: 101, column: 44, scope: !4273)
!4276 = !DILocation(line: 101, column: 54, scope: !4273)
!4277 = !DILocation(line: 101, column: 16, scope: !4273)
!4278 = !DILocation(line: 102, column: 2, scope: !4273)
!4279 = !DILocation(line: 103, column: 22, scope: !4273)
!4280 = !DILocation(line: 103, column: 9, scope: !4273)
!4281 = !DILocation(line: 597, column: 23, scope: !4282, inlinedAt: !4270)
!4282 = distinct !DILexicalBlock(scope: !4268, file: !99, line: 596, column: 2)
!4283 = !DILocation(line: 597, column: 3, scope: !4282, inlinedAt: !4270)
!4284 = distinct !DISubprogram(name: "tformat", linkageName: "std.core.string.tformat", scope: !16, file: !16, line: 111, type: !4285, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4285 = !DISubroutineType(types: !4286)
!4286 = !{!61, !61, !4235}
!4287 = !DILocalVariable(name: "fmt", arg: 1, scope: !4284, file: !16, line: 111, type: !61)
!4288 = !DILocation(line: 111, column: 26, scope: !4284)
!4289 = !DILocalVariable(name: "args", arg: 2, scope: !4284, file: !16, line: 111, type: !4235)
!4290 = !DILocation(line: 111, column: 31, scope: !4284)
!4291 = !DILocalVariable(name: "str", scope: !4284, file: !16, line: 113, type: !4249, align: 8)
!4292 = !DILocation(line: 113, column: 10, scope: !4284)
!4293 = !DILocation(line: 113, column: 44, scope: !4284)
!4294 = !DILocation(line: 113, column: 54, scope: !4284)
!4295 = !DILocation(line: 113, column: 16, scope: !4284)
!4296 = !DILocation(line: 114, column: 2, scope: !4284)
!4297 = !DILocation(line: 115, column: 9, scope: !4284)
!4298 = distinct !DISubprogram(name: "join", linkageName: "std.core.string.join", scope: !16, file: !16, line: 132, type: !4299, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4299 = !DISubroutineType(types: !4300)
!4300 = !{!61, !82, !129, !61}
!4301 = !DILocalVariable(name: "allocator", arg: 1, scope: !4298, file: !16, line: 132, type: !82)
!4302 = !DILocation(line: 132, column: 26, scope: !4298)
!4303 = !DILocalVariable(name: "s", arg: 2, scope: !4298, file: !16, line: 132, type: !129)
!4304 = !DILocation(line: 132, column: 46, scope: !4298)
!4305 = !DILocalVariable(name: "joiner", arg: 3, scope: !4298, file: !16, line: 132, type: !61)
!4306 = !DILocation(line: 132, column: 56, scope: !4298)
!4307 = !DILocation(line: 134, column: 7, scope: !4298)
!4308 = !DILocation(line: 269, column: 55, scope: !4309, inlinedAt: !4310)
!4309 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !314, file: !314, line: 267, scopeLine: 267, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4310 = !DILocation(line: 261, column: 9, scope: !4311, inlinedAt: !4312)
!4311 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !314, file: !314, line: 259, scopeLine: 259, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4312 = !DILocation(line: 136, column: 18, scope: !4313)
!4313 = distinct !DILexicalBlock(scope: !4298, file: !16, line: 135, column: 2)
!4314 = !DILocation(line: 269, column: 40, scope: !4309, inlinedAt: !4310)
!4315 = !DILocation(line: 96, column: 6, scope: !4316, inlinedAt: !4317)
!4316 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !314, file: !314, line: 94, scopeLine: 94, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4317 = !DILocation(line: 269, column: 18, scope: !4309, inlinedAt: !4310)
!4318 = !DILocation(line: 96, column: 20, scope: !4316, inlinedAt: !4317)
!4319 = !DILocation(line: 97, column: 27, scope: !4316, inlinedAt: !4317)
!4320 = !DILocation(line: 37, column: 12, scope: !4316, inlinedAt: !4317)
!4321 = !DILocation(line: 973, column: 9, scope: !4322, inlinedAt: !4323)
!4322 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !327, file: !327, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4323 = !DILocation(line: 37, column: 26, scope: !4316, inlinedAt: !4317)
!4324 = !DILocation(line: 973, column: 20, scope: !4322, inlinedAt: !4323)
!4325 = !DILocation(line: 973, column: 25, scope: !4322, inlinedAt: !4323)
!4326 = !DILocation(line: 97, column: 9, scope: !4316, inlinedAt: !4317)
!4327 = !DILocation(line: 269, column: 67, scope: !4309, inlinedAt: !4310)
!4328 = !DILocation(line: 269, column: 10, scope: !4309, inlinedAt: !4310)
!4329 = !DILocation(line: 136, column: 10, scope: !4313)
!4330 = !DILocalVariable(name: "total_size", scope: !4298, file: !16, line: 139, type: !68, align: 8)
!4331 = !DILocation(line: 139, column: 6, scope: !4298)
!4332 = !DILocation(line: 139, column: 19, scope: !4298)
!4333 = !DILocation(line: 139, column: 32, scope: !4298)
!4334 = !DILocation(line: 140, column: 26, scope: !4335)
!4335 = distinct !DILexicalBlock(scope: !4298, file: !16, line: 140, column: 2)
!4336 = !DILocalVariable(name: ".temp", scope: !4335, file: !16, line: 140, type: !68, align: 8)
!4337 = !DILocalVariable(name: "str", scope: !4338, file: !16, line: 140, type: !132, align: 8)
!4338 = distinct !DILexicalBlock(scope: !4335, file: !16, line: 141, column: 2)
!4339 = !DILocation(line: 140, column: 20, scope: !4338)
!4340 = !DILocation(line: 140, column: 26, scope: !4338)
!4341 = !DILocation(line: 142, column: 3, scope: !4342)
!4342 = distinct !DILexicalBlock(scope: !4338, file: !16, line: 141, column: 2)
!4343 = !DILocation(line: 142, column: 17, scope: !4342)
!4344 = !DILocalVariable(name: "state", scope: !4345, file: !16, line: 594, type: !100, align: 8)
!4345 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !99, file: !99, line: 592, scopeLine: 592, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4346 = !DILocation(line: 594, column: 12, scope: !4345, inlinedAt: !4347)
!4347 = !DILocation(line: 144, column: 2, scope: !4298)
!4348 = !DILocation(line: 594, column: 20, scope: !4345, inlinedAt: !4347)
!4349 = !DILocalVariable(name: "res", scope: !4350, file: !16, line: 146, type: !4249, align: 8)
!4350 = distinct !DILexicalBlock(scope: !4298, file: !16, line: 145, column: 2)
!4351 = !DILocation(line: 146, column: 11, scope: !4350)
!4352 = !DILocation(line: 146, column: 45, scope: !4350)
!4353 = !DILocation(line: 146, column: 17, scope: !4350)
!4354 = !DILocation(line: 147, column: 14, scope: !4350)
!4355 = !DILocation(line: 147, column: 16, scope: !4350)
!4356 = !DILocation(line: 395, column: 27, scope: !4357, inlinedAt: !4360)
!4357 = distinct !DILexicalBlock(scope: !4359, file: !4358, line: 396, column: 1)
!4358 = !DIFile(filename: "dstring.c3", directory: "/usr/lib/c3c/lib/std/core")
!4359 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4358, file: !4358, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4360 = !DILocation(line: 147, column: 3, scope: !4350)
!4361 = !DILocation(line: 405, column: 22, scope: !4359, inlinedAt: !4360)
!4362 = !DILocation(line: 405, column: 4, scope: !4359, inlinedAt: !4360)
!4363 = !DILocation(line: 148, column: 27, scope: !4364)
!4364 = distinct !DILexicalBlock(scope: !4350, file: !16, line: 148, column: 3)
!4365 = !DILocation(line: 148, column: 29, scope: !4364)
!4366 = !DILocalVariable(name: ".temp", scope: !4364, file: !16, line: 148, type: !68, align: 8)
!4367 = !DILocalVariable(name: "str", scope: !4368, file: !16, line: 148, type: !132, align: 8)
!4368 = distinct !DILexicalBlock(scope: !4364, file: !16, line: 149, column: 3)
!4369 = !DILocation(line: 148, column: 21, scope: !4368)
!4370 = !DILocation(line: 148, column: 27, scope: !4368)
!4371 = !DILocation(line: 395, column: 27, scope: !4372, inlinedAt: !4374)
!4372 = distinct !DILexicalBlock(scope: !4373, file: !4358, line: 396, column: 1)
!4373 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4358, file: !4358, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4374 = !DILocation(line: 150, column: 4, scope: !4375)
!4375 = distinct !DILexicalBlock(scope: !4368, file: !16, line: 149, column: 3)
!4376 = !DILocation(line: 405, column: 22, scope: !4373, inlinedAt: !4374)
!4377 = !DILocation(line: 405, column: 4, scope: !4373, inlinedAt: !4374)
!4378 = !DILocation(line: 151, column: 16, scope: !4375)
!4379 = !DILocation(line: 395, column: 27, scope: !4380, inlinedAt: !4382)
!4380 = distinct !DILexicalBlock(scope: !4381, file: !4358, line: 396, column: 1)
!4381 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4358, file: !4358, line: 395, scopeLine: 395, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4382 = !DILocation(line: 151, column: 4, scope: !4375)
!4383 = !DILocation(line: 405, column: 22, scope: !4381, inlinedAt: !4382)
!4384 = !DILocation(line: 405, column: 4, scope: !4381, inlinedAt: !4382)
!4385 = !DILocation(line: 153, column: 23, scope: !4350)
!4386 = !DILocation(line: 153, column: 10, scope: !4350)
!4387 = !DILocation(line: 597, column: 23, scope: !4388, inlinedAt: !4347)
!4388 = distinct !DILexicalBlock(scope: !4345, file: !99, line: 596, column: 2)
!4389 = !DILocation(line: 597, column: 3, scope: !4388, inlinedAt: !4347)
!4390 = distinct !DISubprogram(name: "from_utf32", linkageName: "std.core.string.from_utf32", scope: !16, file: !16, line: 756, type: !4391, scopeLine: 756, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4391 = !DISubroutineType(types: !4392)
!4392 = !{!431, !132, !82, !4393}
!4393 = !DICompositeType(tag: DW_TAG_structure_type, name: "uint[]", size: 128, align: 64, elements: !4394, identifier: "uint[]")
!4394 = !{!4395, !4396}
!4395 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4393, baseType: !2224, size: 64, align: 64)
!4396 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4393, baseType: !68, size: 64, align: 64, offset: 64)
!4397 = !DILocalVariable(name: "allocator", arg: 1, scope: !4390, file: !16, line: 756, type: !82)
!4398 = !DILocation(line: 756, column: 33, scope: !4390)
!4399 = !DILocalVariable(name: "utf32", arg: 2, scope: !4390, file: !16, line: 756, type: !1117)
!4400 = !DILocation(line: 756, column: 53, scope: !4390)
!4401 = !DILocalVariable(name: "len", scope: !4390, file: !16, line: 758, type: !68, align: 8)
!4402 = !DILocation(line: 758, column: 6, scope: !4390)
!4403 = !DILocation(line: 758, column: 36, scope: !4390)
!4404 = !DILocation(line: 758, column: 12, scope: !4390)
!4405 = !DILocalVariable(name: "data", scope: !4390, file: !16, line: 759, type: !65, align: 8)
!4406 = !DILocation(line: 759, column: 8, scope: !4390)
!4407 = !DILocation(line: 759, column: 48, scope: !4390)
!4408 = !DILocation(line: 79, column: 6, scope: !4409, inlinedAt: !4410)
!4409 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !314, file: !314, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4410 = !DILocation(line: 759, column: 15, scope: !4390)
!4411 = !DILocation(line: 79, column: 20, scope: !4409, inlinedAt: !4410)
!4412 = !DILocation(line: 85, column: 28, scope: !4409, inlinedAt: !4410)
!4413 = !DILocation(line: 37, column: 12, scope: !4409, inlinedAt: !4410)
!4414 = !DILocation(line: 973, column: 9, scope: !4415, inlinedAt: !4416)
!4415 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !327, file: !327, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4416 = !DILocation(line: 37, column: 26, scope: !4409, inlinedAt: !4410)
!4417 = !DILocation(line: 973, column: 20, scope: !4415, inlinedAt: !4416)
!4418 = !DILocation(line: 973, column: 25, scope: !4415, inlinedAt: !4416)
!4419 = !DILocation(line: 85, column: 10, scope: !4409, inlinedAt: !4410)
!4420 = !DILocation(line: 761, column: 31, scope: !4390)
!4421 = !DILocation(line: 761, column: 2, scope: !4390)
!4422 = !DILocation(line: 762, column: 2, scope: !4390)
!4423 = !DILocation(line: 762, column: 7, scope: !4390)
!4424 = !DILocation(line: 762, column: 14, scope: !4390)
!4425 = !DILocation(line: 763, column: 17, scope: !4390)
!4426 = !DILocation(line: 763, column: 23, scope: !4390)
!4427 = !DILocation(line: 763, column: 9, scope: !4390)
!4428 = distinct !DISubprogram(name: "from_utf16", linkageName: "std.core.string.from_utf16", scope: !16, file: !16, line: 766, type: !4429, scopeLine: 766, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4429 = !DISubroutineType(types: !4430)
!4430 = !{!431, !132, !82, !4431}
!4431 = !DICompositeType(tag: DW_TAG_structure_type, name: "ushort[]", size: 128, align: 64, elements: !4432, identifier: "ushort[]")
!4432 = !{!4433, !4434}
!4433 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4431, baseType: !1101, size: 64, align: 64)
!4434 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4431, baseType: !68, size: 64, align: 64, offset: 64)
!4435 = !DILocalVariable(name: "allocator", arg: 1, scope: !4428, file: !16, line: 766, type: !82)
!4436 = !DILocation(line: 766, column: 33, scope: !4428)
!4437 = !DILocalVariable(name: "utf16", arg: 2, scope: !4428, file: !16, line: 766, type: !1047)
!4438 = !DILocation(line: 766, column: 53, scope: !4428)
!4439 = !DILocalVariable(name: "len", scope: !4428, file: !16, line: 768, type: !68, align: 8)
!4440 = !DILocation(line: 768, column: 6, scope: !4428)
!4441 = !DILocation(line: 768, column: 36, scope: !4428)
!4442 = !DILocation(line: 768, column: 12, scope: !4428)
!4443 = !DILocalVariable(name: "data", scope: !4428, file: !16, line: 769, type: !65, align: 8)
!4444 = !DILocation(line: 769, column: 8, scope: !4428)
!4445 = !DILocation(line: 769, column: 48, scope: !4428)
!4446 = !DILocation(line: 79, column: 6, scope: !4447, inlinedAt: !4448)
!4447 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !314, file: !314, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4448 = !DILocation(line: 769, column: 15, scope: !4428)
!4449 = !DILocation(line: 79, column: 20, scope: !4447, inlinedAt: !4448)
!4450 = !DILocation(line: 85, column: 28, scope: !4447, inlinedAt: !4448)
!4451 = !DILocation(line: 37, column: 12, scope: !4447, inlinedAt: !4448)
!4452 = !DILocation(line: 973, column: 9, scope: !4453, inlinedAt: !4454)
!4453 = distinct !DISubprogram(name: "is_power_of_2", linkageName: "is_power_of_2", scope: !327, file: !327, line: 971, scopeLine: 971, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4454 = !DILocation(line: 37, column: 26, scope: !4447, inlinedAt: !4448)
!4455 = !DILocation(line: 973, column: 20, scope: !4453, inlinedAt: !4454)
!4456 = !DILocation(line: 973, column: 25, scope: !4453, inlinedAt: !4454)
!4457 = !DILocation(line: 85, column: 10, scope: !4447, inlinedAt: !4448)
!4458 = !DILocation(line: 771, column: 31, scope: !4428)
!4459 = !DILocation(line: 771, column: 2, scope: !4428)
!4460 = !DILocation(line: 770, column: 41, scope: !4461)
!4461 = distinct !DILexicalBlock(scope: !4428, file: !16, line: 770, column: 14)
!4462 = !DILocation(line: 118, column: 6, scope: !4463, inlinedAt: !4464)
!4463 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !314, file: !314, line: 116, scopeLine: 116, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !55)
!4464 = !DILocation(line: 770, column: 14, scope: !4461)
!4465 = !DILocation(line: 118, column: 18, scope: !4463, inlinedAt: !4464)
!4466 = !DILocation(line: 122, column: 20, scope: !4463, inlinedAt: !4464)
!4467 = !DILocation(line: 122, column: 2, scope: !4463, inlinedAt: !4464)
!4468 = !DILocation(line: 772, column: 2, scope: !4428)
!4469 = !DILocation(line: 772, column: 7, scope: !4428)
!4470 = !DILocation(line: 772, column: 14, scope: !4428)
!4471 = !DILocation(line: 773, column: 17, scope: !4428)
!4472 = !DILocation(line: 773, column: 23, scope: !4428)
!4473 = !DILocation(line: 773, column: 9, scope: !4428)
!4474 = distinct !DISubprogram(name: "from_wstring", linkageName: "std.core.string.from_wstring", scope: !16, file: !16, line: 776, type: !4475, scopeLine: 776, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4475 = !DISubroutineType(types: !4476)
!4476 = !{!431, !132, !82, !1100}
!4477 = !DILocalVariable(name: "allocator", arg: 1, scope: !4474, file: !16, line: 776, type: !82)
!4478 = !DILocation(line: 776, column: 35, scope: !4474)
!4479 = !DILocalVariable(name: "wstring", arg: 2, scope: !4474, file: !16, line: 776, type: !1100)
!4480 = !DILocation(line: 776, column: 54, scope: !4474)
!4481 = !DILocalVariable(name: "utf16_len", scope: !4474, file: !16, line: 778, type: !68, align: 8)
!4482 = !DILocation(line: 778, column: 6, scope: !4474)
!4483 = !DILocation(line: 779, column: 2, scope: !4474)
!4484 = !DILocation(line: 779, column: 9, scope: !4485)
!4485 = distinct !DILexicalBlock(scope: !4474, file: !16, line: 779, column: 2)
!4486 = !DILocation(line: 779, column: 17, scope: !4485)
!4487 = !DILocation(line: 779, column: 34, scope: !4485)
!4488 = !DILocalVariable(name: "utf16", scope: !4474, file: !16, line: 780, type: !1047, align: 8)
!4489 = !DILocation(line: 780, column: 11, scope: !4474)
!4490 = !DILocation(line: 780, column: 19, scope: !4474)
!4491 = !DILocation(line: 780, column: 28, scope: !4474)
!4492 = !DILocation(line: 781, column: 9, scope: !4474)
!4493 = distinct !DISubprogram(name: "tfrom_wstring", linkageName: "std.core.string.tfrom_wstring", scope: !16, file: !16, line: 784, type: !4494, scopeLine: 784, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4494 = !DISubroutineType(types: !4495)
!4495 = !{!431, !132, !1100}
!4496 = !DILocalVariable(name: "wstring", arg: 1, scope: !4493, file: !16, line: 784, type: !1100)
!4497 = !DILocation(line: 784, column: 34, scope: !4493)
!4498 = !DILocation(line: 784, column: 46, scope: !4493)
!4499 = distinct !DISubprogram(name: "tfrom_utf16", linkageName: "std.core.string.tfrom_utf16", scope: !16, file: !16, line: 785, type: !4500, scopeLine: 785, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !55, retainedNodes: !88)
!4500 = !DISubroutineType(types: !4501)
!4501 = !{!431, !132, !4431}
!4502 = !DILocalVariable(name: "utf16", arg: 1, scope: !4499, file: !16, line: 785, type: !1047)
!4503 = !DILocation(line: 785, column: 33, scope: !4499)
!4504 = !DILocation(line: 785, column: 43, scope: !4499)
